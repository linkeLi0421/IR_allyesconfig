; ModuleID = '/llk/IR_all_yes/drivers/base/regmap/regmap.c_pt.bc'
source_filename = "../drivers/base/regmap/regmap.c"
target datalayout = "E-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64"
target triple = "armebv6k-unknown-linux-gnueabi"

module asm ".syntax unified"
module asm "\09.section \22___kcrctab_gpl+regmap_reg_in_ranges\22, \22a\22\09"
module asm "\09.weak\09__crc_regmap_reg_in_ranges\09\09\09\09"
module asm "\09.long\09__crc_regmap_reg_in_ranges\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_regmap_reg_in_ranges:\09\09\09\09\09"
module asm "\09.asciz \09\22regmap_reg_in_ranges\22\09\09\09\09\09"
module asm "__kstrtabns_regmap_reg_in_ranges:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab_gpl+regmap_check_range_table\22, \22a\22\09"
module asm "\09.weak\09__crc_regmap_check_range_table\09\09\09\09"
module asm "\09.long\09__crc_regmap_check_range_table\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_regmap_check_range_table:\09\09\09\09\09"
module asm "\09.asciz \09\22regmap_check_range_table\22\09\09\09\09\09"
module asm "__kstrtabns_regmap_check_range_table:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab_gpl+regmap_attach_dev\22, \22a\22\09"
module asm "\09.weak\09__crc_regmap_attach_dev\09\09\09\09"
module asm "\09.long\09__crc_regmap_attach_dev\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_regmap_attach_dev:\09\09\09\09\09"
module asm "\09.asciz \09\22regmap_attach_dev\22\09\09\09\09\09"
module asm "__kstrtabns_regmap_attach_dev:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab_gpl+regmap_get_val_endian\22, \22a\22\09"
module asm "\09.weak\09__crc_regmap_get_val_endian\09\09\09\09"
module asm "\09.long\09__crc_regmap_get_val_endian\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_regmap_get_val_endian:\09\09\09\09\09"
module asm "\09.asciz \09\22regmap_get_val_endian\22\09\09\09\09\09"
module asm "__kstrtabns_regmap_get_val_endian:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab_gpl+__regmap_init\22, \22a\22\09"
module asm "\09.weak\09__crc___regmap_init\09\09\09\09"
module asm "\09.long\09__crc___regmap_init\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab___regmap_init:\09\09\09\09\09"
module asm "\09.asciz \09\22__regmap_init\22\09\09\09\09\09"
module asm "__kstrtabns___regmap_init:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab_gpl+__devm_regmap_init\22, \22a\22\09"
module asm "\09.weak\09__crc___devm_regmap_init\09\09\09\09"
module asm "\09.long\09__crc___devm_regmap_init\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab___devm_regmap_init:\09\09\09\09\09"
module asm "\09.asciz \09\22__devm_regmap_init\22\09\09\09\09\09"
module asm "__kstrtabns___devm_regmap_init:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab_gpl+devm_regmap_field_alloc\22, \22a\22\09"
module asm "\09.weak\09__crc_devm_regmap_field_alloc\09\09\09\09"
module asm "\09.long\09__crc_devm_regmap_field_alloc\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_devm_regmap_field_alloc:\09\09\09\09\09"
module asm "\09.asciz \09\22devm_regmap_field_alloc\22\09\09\09\09\09"
module asm "__kstrtabns_devm_regmap_field_alloc:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab_gpl+regmap_field_bulk_alloc\22, \22a\22\09"
module asm "\09.weak\09__crc_regmap_field_bulk_alloc\09\09\09\09"
module asm "\09.long\09__crc_regmap_field_bulk_alloc\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_regmap_field_bulk_alloc:\09\09\09\09\09"
module asm "\09.asciz \09\22regmap_field_bulk_alloc\22\09\09\09\09\09"
module asm "__kstrtabns_regmap_field_bulk_alloc:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab_gpl+devm_regmap_field_bulk_alloc\22, \22a\22\09"
module asm "\09.weak\09__crc_devm_regmap_field_bulk_alloc\09\09\09\09"
module asm "\09.long\09__crc_devm_regmap_field_bulk_alloc\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_devm_regmap_field_bulk_alloc:\09\09\09\09\09"
module asm "\09.asciz \09\22devm_regmap_field_bulk_alloc\22\09\09\09\09\09"
module asm "__kstrtabns_devm_regmap_field_bulk_alloc:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab_gpl+regmap_field_bulk_free\22, \22a\22\09"
module asm "\09.weak\09__crc_regmap_field_bulk_free\09\09\09\09"
module asm "\09.long\09__crc_regmap_field_bulk_free\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_regmap_field_bulk_free:\09\09\09\09\09"
module asm "\09.asciz \09\22regmap_field_bulk_free\22\09\09\09\09\09"
module asm "__kstrtabns_regmap_field_bulk_free:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab_gpl+devm_regmap_field_bulk_free\22, \22a\22\09"
module asm "\09.weak\09__crc_devm_regmap_field_bulk_free\09\09\09\09"
module asm "\09.long\09__crc_devm_regmap_field_bulk_free\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_devm_regmap_field_bulk_free:\09\09\09\09\09"
module asm "\09.asciz \09\22devm_regmap_field_bulk_free\22\09\09\09\09\09"
module asm "__kstrtabns_devm_regmap_field_bulk_free:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab_gpl+devm_regmap_field_free\22, \22a\22\09"
module asm "\09.weak\09__crc_devm_regmap_field_free\09\09\09\09"
module asm "\09.long\09__crc_devm_regmap_field_free\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_devm_regmap_field_free:\09\09\09\09\09"
module asm "\09.asciz \09\22devm_regmap_field_free\22\09\09\09\09\09"
module asm "__kstrtabns_devm_regmap_field_free:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab_gpl+regmap_field_alloc\22, \22a\22\09"
module asm "\09.weak\09__crc_regmap_field_alloc\09\09\09\09"
module asm "\09.long\09__crc_regmap_field_alloc\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_regmap_field_alloc:\09\09\09\09\09"
module asm "\09.asciz \09\22regmap_field_alloc\22\09\09\09\09\09"
module asm "__kstrtabns_regmap_field_alloc:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab_gpl+regmap_field_free\22, \22a\22\09"
module asm "\09.weak\09__crc_regmap_field_free\09\09\09\09"
module asm "\09.long\09__crc_regmap_field_free\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_regmap_field_free:\09\09\09\09\09"
module asm "\09.asciz \09\22regmap_field_free\22\09\09\09\09\09"
module asm "__kstrtabns_regmap_field_free:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab_gpl+regmap_reinit_cache\22, \22a\22\09"
module asm "\09.weak\09__crc_regmap_reinit_cache\09\09\09\09"
module asm "\09.long\09__crc_regmap_reinit_cache\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_regmap_reinit_cache:\09\09\09\09\09"
module asm "\09.asciz \09\22regmap_reinit_cache\22\09\09\09\09\09"
module asm "__kstrtabns_regmap_reinit_cache:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab_gpl+regmap_exit\22, \22a\22\09"
module asm "\09.weak\09__crc_regmap_exit\09\09\09\09"
module asm "\09.long\09__crc_regmap_exit\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_regmap_exit:\09\09\09\09\09"
module asm "\09.asciz \09\22regmap_exit\22\09\09\09\09\09"
module asm "__kstrtabns_regmap_exit:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab_gpl+dev_get_regmap\22, \22a\22\09"
module asm "\09.weak\09__crc_dev_get_regmap\09\09\09\09"
module asm "\09.long\09__crc_dev_get_regmap\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_dev_get_regmap:\09\09\09\09\09"
module asm "\09.asciz \09\22dev_get_regmap\22\09\09\09\09\09"
module asm "__kstrtabns_dev_get_regmap:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab_gpl+regmap_get_device\22, \22a\22\09"
module asm "\09.weak\09__crc_regmap_get_device\09\09\09\09"
module asm "\09.long\09__crc_regmap_get_device\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_regmap_get_device:\09\09\09\09\09"
module asm "\09.asciz \09\22regmap_get_device\22\09\09\09\09\09"
module asm "__kstrtabns_regmap_get_device:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab_gpl+regmap_can_raw_write\22, \22a\22\09"
module asm "\09.weak\09__crc_regmap_can_raw_write\09\09\09\09"
module asm "\09.long\09__crc_regmap_can_raw_write\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_regmap_can_raw_write:\09\09\09\09\09"
module asm "\09.asciz \09\22regmap_can_raw_write\22\09\09\09\09\09"
module asm "__kstrtabns_regmap_can_raw_write:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab_gpl+regmap_get_raw_read_max\22, \22a\22\09"
module asm "\09.weak\09__crc_regmap_get_raw_read_max\09\09\09\09"
module asm "\09.long\09__crc_regmap_get_raw_read_max\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_regmap_get_raw_read_max:\09\09\09\09\09"
module asm "\09.asciz \09\22regmap_get_raw_read_max\22\09\09\09\09\09"
module asm "__kstrtabns_regmap_get_raw_read_max:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab_gpl+regmap_get_raw_write_max\22, \22a\22\09"
module asm "\09.weak\09__crc_regmap_get_raw_write_max\09\09\09\09"
module asm "\09.long\09__crc_regmap_get_raw_write_max\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_regmap_get_raw_write_max:\09\09\09\09\09"
module asm "\09.asciz \09\22regmap_get_raw_write_max\22\09\09\09\09\09"
module asm "__kstrtabns_regmap_get_raw_write_max:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab_gpl+regmap_write\22, \22a\22\09"
module asm "\09.weak\09__crc_regmap_write\09\09\09\09"
module asm "\09.long\09__crc_regmap_write\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_regmap_write:\09\09\09\09\09"
module asm "\09.asciz \09\22regmap_write\22\09\09\09\09\09"
module asm "__kstrtabns_regmap_write:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab_gpl+regmap_write_async\22, \22a\22\09"
module asm "\09.weak\09__crc_regmap_write_async\09\09\09\09"
module asm "\09.long\09__crc_regmap_write_async\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_regmap_write_async:\09\09\09\09\09"
module asm "\09.asciz \09\22regmap_write_async\22\09\09\09\09\09"
module asm "__kstrtabns_regmap_write_async:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab_gpl+regmap_raw_write\22, \22a\22\09"
module asm "\09.weak\09__crc_regmap_raw_write\09\09\09\09"
module asm "\09.long\09__crc_regmap_raw_write\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_regmap_raw_write:\09\09\09\09\09"
module asm "\09.asciz \09\22regmap_raw_write\22\09\09\09\09\09"
module asm "__kstrtabns_regmap_raw_write:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab_gpl+regmap_noinc_write\22, \22a\22\09"
module asm "\09.weak\09__crc_regmap_noinc_write\09\09\09\09"
module asm "\09.long\09__crc_regmap_noinc_write\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_regmap_noinc_write:\09\09\09\09\09"
module asm "\09.asciz \09\22regmap_noinc_write\22\09\09\09\09\09"
module asm "__kstrtabns_regmap_noinc_write:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab_gpl+regmap_field_update_bits_base\22, \22a\22\09"
module asm "\09.weak\09__crc_regmap_field_update_bits_base\09\09\09\09"
module asm "\09.long\09__crc_regmap_field_update_bits_base\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_regmap_field_update_bits_base:\09\09\09\09\09"
module asm "\09.asciz \09\22regmap_field_update_bits_base\22\09\09\09\09\09"
module asm "__kstrtabns_regmap_field_update_bits_base:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab_gpl+regmap_fields_update_bits_base\22, \22a\22\09"
module asm "\09.weak\09__crc_regmap_fields_update_bits_base\09\09\09\09"
module asm "\09.long\09__crc_regmap_fields_update_bits_base\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_regmap_fields_update_bits_base:\09\09\09\09\09"
module asm "\09.asciz \09\22regmap_fields_update_bits_base\22\09\09\09\09\09"
module asm "__kstrtabns_regmap_fields_update_bits_base:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab_gpl+regmap_bulk_write\22, \22a\22\09"
module asm "\09.weak\09__crc_regmap_bulk_write\09\09\09\09"
module asm "\09.long\09__crc_regmap_bulk_write\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_regmap_bulk_write:\09\09\09\09\09"
module asm "\09.asciz \09\22regmap_bulk_write\22\09\09\09\09\09"
module asm "__kstrtabns_regmap_bulk_write:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab_gpl+regmap_multi_reg_write\22, \22a\22\09"
module asm "\09.weak\09__crc_regmap_multi_reg_write\09\09\09\09"
module asm "\09.long\09__crc_regmap_multi_reg_write\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_regmap_multi_reg_write:\09\09\09\09\09"
module asm "\09.asciz \09\22regmap_multi_reg_write\22\09\09\09\09\09"
module asm "__kstrtabns_regmap_multi_reg_write:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab_gpl+regmap_multi_reg_write_bypassed\22, \22a\22\09"
module asm "\09.weak\09__crc_regmap_multi_reg_write_bypassed\09\09\09\09"
module asm "\09.long\09__crc_regmap_multi_reg_write_bypassed\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_regmap_multi_reg_write_bypassed:\09\09\09\09\09"
module asm "\09.asciz \09\22regmap_multi_reg_write_bypassed\22\09\09\09\09\09"
module asm "__kstrtabns_regmap_multi_reg_write_bypassed:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab_gpl+regmap_raw_write_async\22, \22a\22\09"
module asm "\09.weak\09__crc_regmap_raw_write_async\09\09\09\09"
module asm "\09.long\09__crc_regmap_raw_write_async\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_regmap_raw_write_async:\09\09\09\09\09"
module asm "\09.asciz \09\22regmap_raw_write_async\22\09\09\09\09\09"
module asm "__kstrtabns_regmap_raw_write_async:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab_gpl+regmap_read\22, \22a\22\09"
module asm "\09.weak\09__crc_regmap_read\09\09\09\09"
module asm "\09.long\09__crc_regmap_read\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_regmap_read:\09\09\09\09\09"
module asm "\09.asciz \09\22regmap_read\22\09\09\09\09\09"
module asm "__kstrtabns_regmap_read:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab_gpl+regmap_raw_read\22, \22a\22\09"
module asm "\09.weak\09__crc_regmap_raw_read\09\09\09\09"
module asm "\09.long\09__crc_regmap_raw_read\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_regmap_raw_read:\09\09\09\09\09"
module asm "\09.asciz \09\22regmap_raw_read\22\09\09\09\09\09"
module asm "__kstrtabns_regmap_raw_read:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab_gpl+regmap_noinc_read\22, \22a\22\09"
module asm "\09.weak\09__crc_regmap_noinc_read\09\09\09\09"
module asm "\09.long\09__crc_regmap_noinc_read\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_regmap_noinc_read:\09\09\09\09\09"
module asm "\09.asciz \09\22regmap_noinc_read\22\09\09\09\09\09"
module asm "__kstrtabns_regmap_noinc_read:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab_gpl+regmap_field_read\22, \22a\22\09"
module asm "\09.weak\09__crc_regmap_field_read\09\09\09\09"
module asm "\09.long\09__crc_regmap_field_read\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_regmap_field_read:\09\09\09\09\09"
module asm "\09.asciz \09\22regmap_field_read\22\09\09\09\09\09"
module asm "__kstrtabns_regmap_field_read:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab_gpl+regmap_fields_read\22, \22a\22\09"
module asm "\09.weak\09__crc_regmap_fields_read\09\09\09\09"
module asm "\09.long\09__crc_regmap_fields_read\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_regmap_fields_read:\09\09\09\09\09"
module asm "\09.asciz \09\22regmap_fields_read\22\09\09\09\09\09"
module asm "__kstrtabns_regmap_fields_read:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab_gpl+regmap_bulk_read\22, \22a\22\09"
module asm "\09.weak\09__crc_regmap_bulk_read\09\09\09\09"
module asm "\09.long\09__crc_regmap_bulk_read\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_regmap_bulk_read:\09\09\09\09\09"
module asm "\09.asciz \09\22regmap_bulk_read\22\09\09\09\09\09"
module asm "__kstrtabns_regmap_bulk_read:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab_gpl+regmap_update_bits_base\22, \22a\22\09"
module asm "\09.weak\09__crc_regmap_update_bits_base\09\09\09\09"
module asm "\09.long\09__crc_regmap_update_bits_base\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_regmap_update_bits_base:\09\09\09\09\09"
module asm "\09.asciz \09\22regmap_update_bits_base\22\09\09\09\09\09"
module asm "__kstrtabns_regmap_update_bits_base:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab_gpl+regmap_test_bits\22, \22a\22\09"
module asm "\09.weak\09__crc_regmap_test_bits\09\09\09\09"
module asm "\09.long\09__crc_regmap_test_bits\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_regmap_test_bits:\09\09\09\09\09"
module asm "\09.asciz \09\22regmap_test_bits\22\09\09\09\09\09"
module asm "__kstrtabns_regmap_test_bits:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab_gpl+regmap_async_complete_cb\22, \22a\22\09"
module asm "\09.weak\09__crc_regmap_async_complete_cb\09\09\09\09"
module asm "\09.long\09__crc_regmap_async_complete_cb\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_regmap_async_complete_cb:\09\09\09\09\09"
module asm "\09.asciz \09\22regmap_async_complete_cb\22\09\09\09\09\09"
module asm "__kstrtabns_regmap_async_complete_cb:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab_gpl+regmap_async_complete\22, \22a\22\09"
module asm "\09.weak\09__crc_regmap_async_complete\09\09\09\09"
module asm "\09.long\09__crc_regmap_async_complete\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_regmap_async_complete:\09\09\09\09\09"
module asm "\09.asciz \09\22regmap_async_complete\22\09\09\09\09\09"
module asm "__kstrtabns_regmap_async_complete:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab_gpl+regmap_register_patch\22, \22a\22\09"
module asm "\09.weak\09__crc_regmap_register_patch\09\09\09\09"
module asm "\09.long\09__crc_regmap_register_patch\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_regmap_register_patch:\09\09\09\09\09"
module asm "\09.asciz \09\22regmap_register_patch\22\09\09\09\09\09"
module asm "__kstrtabns_regmap_register_patch:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab_gpl+regmap_get_val_bytes\22, \22a\22\09"
module asm "\09.weak\09__crc_regmap_get_val_bytes\09\09\09\09"
module asm "\09.long\09__crc_regmap_get_val_bytes\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_regmap_get_val_bytes:\09\09\09\09\09"
module asm "\09.asciz \09\22regmap_get_val_bytes\22\09\09\09\09\09"
module asm "__kstrtabns_regmap_get_val_bytes:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab_gpl+regmap_get_max_register\22, \22a\22\09"
module asm "\09.weak\09__crc_regmap_get_max_register\09\09\09\09"
module asm "\09.long\09__crc_regmap_get_max_register\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_regmap_get_max_register:\09\09\09\09\09"
module asm "\09.asciz \09\22regmap_get_max_register\22\09\09\09\09\09"
module asm "__kstrtabns_regmap_get_max_register:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab_gpl+regmap_get_reg_stride\22, \22a\22\09"
module asm "\09.weak\09__crc_regmap_get_reg_stride\09\09\09\09"
module asm "\09.long\09__crc_regmap_get_reg_stride\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_regmap_get_reg_stride:\09\09\09\09\09"
module asm "\09.asciz \09\22regmap_get_reg_stride\22\09\09\09\09\09"
module asm "__kstrtabns_regmap_get_reg_stride:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab_gpl+regmap_parse_val\22, \22a\22\09"
module asm "\09.weak\09__crc_regmap_parse_val\09\09\09\09"
module asm "\09.long\09__crc_regmap_parse_val\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_regmap_parse_val:\09\09\09\09\09"
module asm "\09.asciz \09\22regmap_parse_val\22\09\09\09\09\09"
module asm "__kstrtabns_regmap_parse_val:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"

%struct.static_call_key = type { ptr }
%struct.atomic_t = type { i32 }
%struct.trace_event_fields = type { ptr, %union.anon.98 }
%union.anon.98 = type { %struct.anon.99 }
%struct.anon.99 = type { ptr, i32, i32, i32, i32 }
%struct.trace_event_class = type { ptr, ptr, ptr, ptr, ptr, ptr, %struct.list_head, ptr }
%struct.list_head = type { ptr, ptr }
%struct.trace_event_functions = type { ptr, ptr, ptr, ptr }
%struct.trace_event_call = type { %struct.list_head, ptr, %union.anon.100, %struct.trace_event, ptr, ptr, %union.anon.101, ptr, i32, i32, ptr, ptr, ptr }
%union.anon.100 = type { ptr }
%struct.trace_event = type { %struct.hlist_node, %struct.list_head, i32, ptr }
%struct.hlist_node = type { ptr, ptr }
%union.anon.101 = type { ptr }
%union.anon.102 = type { %struct.bpf_raw_event_map }
%struct.bpf_raw_event_map = type { ptr, ptr, i32, i32, [16 x i8] }
%union.anon.103 = type { %struct.bpf_raw_event_map }
%union.anon.104 = type { %struct.bpf_raw_event_map }
%union.anon.105 = type { %struct.bpf_raw_event_map }
%union.anon.106 = type { %struct.bpf_raw_event_map }
%union.anon.107 = type { %struct.bpf_raw_event_map }
%union.anon.108 = type { %struct.bpf_raw_event_map }
%union.anon.109 = type { %struct.bpf_raw_event_map }
%union.anon.110 = type { %struct.bpf_raw_event_map }
%union.anon.111 = type { %struct.bpf_raw_event_map }
%union.anon.112 = type { %struct.bpf_raw_event_map }
%union.anon.113 = type { %struct.bpf_raw_event_map }
%union.anon.114 = type { %struct.bpf_raw_event_map }
%union.anon.115 = type { %struct.bpf_raw_event_map }
%union.anon.116 = type { %struct.bpf_raw_event_map }
%struct.kernel_symbol = type { i32, ptr, ptr }
%struct.lock_class_key = type { %union.anon.2 }
%union.anon.2 = type { %struct.hlist_node }
%struct.pi_entry = type { ptr, ptr, ptr, i32, ptr, ptr }
%struct.cpumask = type { [1 x i32] }
%struct.arm_delay_ops = type { ptr, ptr, ptr, i32 }
%struct.tracepoint_func = type { ptr, ptr, i32 }
%struct.trace_event_buffer = type { ptr, ptr, ptr, ptr, i32, ptr }
%struct.trace_event_file = type { %struct.list_head, ptr, ptr, ptr, ptr, ptr, %struct.list_head, i32, %struct.atomic_t, %struct.atomic_t }
%struct.regmap = type { %union.anon.0, ptr, ptr, ptr, i32, ptr, ptr, %struct.regmap_format, ptr, ptr, ptr, i8, %struct.spinlock, %struct.wait_queue_head, %struct.list_head, %struct.list_head, i32, i8, ptr, ptr, i32, i32, i32, %struct.list_head, %struct.mutex, i32, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i8, i32, i32, i32, i32, i32, ptr, i32, i32, i32, i32, i32, i8, i8, i8, ptr, ptr, ptr, i8, i8, ptr, i32, i8, i8, i8, i32, i32, %struct.rb_root, ptr, ptr, i8 }
%union.anon.0 = type { %struct.mutex }
%struct.regmap_format = type { i32, i32, i32, i32, ptr, ptr, ptr, ptr, ptr }
%struct.spinlock = type { %union.anon.3 }
%union.anon.3 = type { %struct.raw_spinlock }
%struct.raw_spinlock = type { %struct.arch_spinlock_t, i32, i32, ptr, %struct.lockdep_map }
%struct.arch_spinlock_t = type { %union.anon.1 }
%union.anon.1 = type { i32 }
%struct.lockdep_map = type { ptr, [2 x ptr], ptr, i8, i8, i8, i32, i32 }
%struct.wait_queue_head = type { %struct.spinlock, %struct.list_head }
%struct.mutex = type { %struct.atomic_t, %struct.raw_spinlock, %struct.optimistic_spin_queue, %struct.list_head, ptr, %struct.lockdep_map }
%struct.optimistic_spin_queue = type { %struct.atomic_t }
%struct.rb_root = type { ptr }
%struct.device = type { %struct.kobject, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, %struct.mutex, %struct.mutex, %struct.dev_links_info, %struct.dev_pm_info, ptr, ptr, ptr, %struct.dev_msi_info, ptr, ptr, i64, i64, ptr, ptr, %struct.list_head, ptr, ptr, %struct.dev_archdata, ptr, ptr, i32, i32, %struct.spinlock, %struct.list_head, ptr, ptr, ptr, ptr, ptr, i32, i8 }
%struct.kobject = type { ptr, %struct.list_head, ptr, ptr, ptr, ptr, %struct.kref, %struct.delayed_work, i8 }
%struct.kref = type { %struct.refcount_struct }
%struct.refcount_struct = type { %struct.atomic_t }
%struct.delayed_work = type { %struct.work_struct, %struct.timer_list, ptr, i32 }
%struct.work_struct = type { %struct.atomic_t, %struct.list_head, ptr, %struct.lockdep_map }
%struct.timer_list = type { %struct.hlist_node, i32, ptr, i32, %struct.lockdep_map }
%struct.dev_links_info = type { %struct.list_head, %struct.list_head, %struct.list_head, i32 }
%struct.dev_pm_info = type { %struct.pm_message, i16, i32, %struct.spinlock, %struct.list_head, %struct.completion, ptr, i8, %struct.hrtimer, i64, %struct.work_struct, %struct.wait_queue_head, ptr, %struct.atomic_t, %struct.atomic_t, i16, i32, i32, i32, i32, i32, i32, i64, i64, i64, i64, ptr, ptr, ptr }
%struct.pm_message = type { i32 }
%struct.completion = type { i32, %struct.swait_queue_head }
%struct.swait_queue_head = type { %struct.raw_spinlock, %struct.list_head }
%struct.hrtimer = type { %struct.timerqueue_node, i64, ptr, ptr, i8, i8, i8, i8 }
%struct.timerqueue_node = type { %struct.rb_node, i64 }
%struct.rb_node = type { i32, ptr, ptr }
%struct.dev_msi_info = type { ptr, ptr }
%struct.dev_archdata = type { ptr, i8 }
%struct.trace_event_raw_regmap_reg = type { %struct.trace_entry, i32, i32, i32, [0 x i8] }
%struct.trace_entry = type { i16, i8, i8, i32 }
%struct.thread_info = type { i32, i32, ptr, i32, i32, %struct.cpu_context_save, i32, [16 x i8], [2 x i32], %union.fp_state, %union.vfp_state, i32 }
%struct.cpu_context_save = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [2 x i32] }
%union.fp_state = type { %struct.iwmmxt_struct }
%struct.iwmmxt_struct = type { [38 x i32] }
%union.vfp_state = type { %struct.vfp_hard_struct }
%struct.vfp_hard_struct = type { [32 x i64], i32, i32, i32, i32, i32 }
%struct.trace_event_raw_regmap_block = type { %struct.trace_entry, i32, i32, i32, [0 x i8] }
%struct.trace_event_raw_regcache_sync = type { %struct.trace_entry, i32, i32, i32, [0 x i8] }
%struct.trace_event_raw_regmap_bool = type { %struct.trace_entry, i32, i32, [0 x i8] }
%struct.trace_event_raw_regmap_async = type { %struct.trace_entry, i32, [0 x i8] }
%struct.trace_event_raw_regcache_drop_region = type { %struct.trace_entry, i32, i32, i32, [0 x i8] }
%struct.regmap_range = type { i32, i32 }
%struct.regmap_access_table = type { ptr, i32, ptr, i32 }
%struct.regmap_config = type { ptr, i32, i32, i32, i32, ptr, ptr, ptr, ptr, ptr, ptr, i8, ptr, ptr, ptr, ptr, ptr, ptr, i8, i32, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i32, i32, ptr, i32, i32, i32, i8, i8, i8, i8, i8, i32, i32, ptr, i32, i8, i8, i32, i32, i8 }
%struct.regmap_bus = type { i8, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i8, i32, i32, i32, i32, i8 }
%struct.anon.4 = type { [16 x i8], %struct.lockdep_map }
%struct.regmap_range_cfg = type { ptr, i32, i32, i32, i32, i32, i32, i32 }
%struct.regmap_range_node = type { %struct.rb_node, ptr, ptr, i32, i32, i32, i32, i32, i32, i32 }
%struct.anon = type { %struct.spinlock, i32 }
%struct.anon.5 = type { %struct.raw_spinlock, i32 }
%struct.regmap_field = type { ptr, i32, i32, i32, i32, i32 }
%struct.reg_field = type { i32, i32, i32, i32, i32 }
%struct.regmap_async = type { %struct.list_head, ptr, ptr }
%struct.regcache_ops = type { ptr, i32, ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%struct.reg_sequence = type { i32, i32, i32 }
%struct.wait_queue_entry = type { i32, ptr, ptr, %struct.list_head }
%struct.trace_iterator = type { ptr, ptr, ptr, ptr, i32, %struct.mutex, ptr, i32, ptr, i32, ptr, i32, %struct.trace_seq, ptr, i8, %struct.trace_seq, ptr, i32, i32, i32, i32, i64, i64, i32 }
%struct.trace_seq = type { [4096 x i8], %struct.seq_buf, i32 }
%struct.seq_buf = type { ptr, i32, i32, i64 }

@__tpstrtab_regmap_reg_write = internal constant [17 x i8] c"regmap_reg_write\00", section "__tracepoints_strings", align 1
@__SCK__tp_func_regmap_reg_write = dso_local global %struct.static_call_key { ptr @__traceiter_regmap_reg_write }, align 4
@__tracepoint_regmap_reg_write = dso_local global { ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr } { ptr @__tpstrtab_regmap_reg_write, { %struct.atomic_t, { ptr } } zeroinitializer, ptr @__SCK__tp_func_regmap_reg_write, ptr null, ptr @__traceiter_regmap_reg_write, ptr null, ptr null, ptr null }, section "__tracepoints", align 4
@__tracepoint_ptr_regmap_reg_write = internal constant ptr @__tracepoint_regmap_reg_write, section "__tracepoints_ptrs", align 4
@__tpstrtab_regmap_reg_read = internal constant [16 x i8] c"regmap_reg_read\00", section "__tracepoints_strings", align 1
@__SCK__tp_func_regmap_reg_read = dso_local global %struct.static_call_key { ptr @__traceiter_regmap_reg_read }, align 4
@__tracepoint_regmap_reg_read = dso_local global { ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr } { ptr @__tpstrtab_regmap_reg_read, { %struct.atomic_t, { ptr } } zeroinitializer, ptr @__SCK__tp_func_regmap_reg_read, ptr null, ptr @__traceiter_regmap_reg_read, ptr null, ptr null, ptr null }, section "__tracepoints", align 4
@__tracepoint_ptr_regmap_reg_read = internal constant ptr @__tracepoint_regmap_reg_read, section "__tracepoints_ptrs", align 4
@__tpstrtab_regmap_reg_read_cache = internal constant [22 x i8] c"regmap_reg_read_cache\00", section "__tracepoints_strings", align 1
@__SCK__tp_func_regmap_reg_read_cache = dso_local global %struct.static_call_key { ptr @__traceiter_regmap_reg_read_cache }, align 4
@__tracepoint_regmap_reg_read_cache = dso_local global { ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr } { ptr @__tpstrtab_regmap_reg_read_cache, { %struct.atomic_t, { ptr } } zeroinitializer, ptr @__SCK__tp_func_regmap_reg_read_cache, ptr null, ptr @__traceiter_regmap_reg_read_cache, ptr null, ptr null, ptr null }, section "__tracepoints", align 4
@__tracepoint_ptr_regmap_reg_read_cache = internal constant ptr @__tracepoint_regmap_reg_read_cache, section "__tracepoints_ptrs", align 4
@__tpstrtab_regmap_hw_read_start = internal constant [21 x i8] c"regmap_hw_read_start\00", section "__tracepoints_strings", align 1
@__SCK__tp_func_regmap_hw_read_start = dso_local global %struct.static_call_key { ptr @__traceiter_regmap_hw_read_start }, align 4
@__tracepoint_regmap_hw_read_start = dso_local global { ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr } { ptr @__tpstrtab_regmap_hw_read_start, { %struct.atomic_t, { ptr } } zeroinitializer, ptr @__SCK__tp_func_regmap_hw_read_start, ptr null, ptr @__traceiter_regmap_hw_read_start, ptr null, ptr null, ptr null }, section "__tracepoints", align 4
@__tracepoint_ptr_regmap_hw_read_start = internal constant ptr @__tracepoint_regmap_hw_read_start, section "__tracepoints_ptrs", align 4
@__tpstrtab_regmap_hw_read_done = internal constant [20 x i8] c"regmap_hw_read_done\00", section "__tracepoints_strings", align 1
@__SCK__tp_func_regmap_hw_read_done = dso_local global %struct.static_call_key { ptr @__traceiter_regmap_hw_read_done }, align 4
@__tracepoint_regmap_hw_read_done = dso_local global { ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr } { ptr @__tpstrtab_regmap_hw_read_done, { %struct.atomic_t, { ptr } } zeroinitializer, ptr @__SCK__tp_func_regmap_hw_read_done, ptr null, ptr @__traceiter_regmap_hw_read_done, ptr null, ptr null, ptr null }, section "__tracepoints", align 4
@__tracepoint_ptr_regmap_hw_read_done = internal constant ptr @__tracepoint_regmap_hw_read_done, section "__tracepoints_ptrs", align 4
@__tpstrtab_regmap_hw_write_start = internal constant [22 x i8] c"regmap_hw_write_start\00", section "__tracepoints_strings", align 1
@__SCK__tp_func_regmap_hw_write_start = dso_local global %struct.static_call_key { ptr @__traceiter_regmap_hw_write_start }, align 4
@__tracepoint_regmap_hw_write_start = dso_local global { ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr } { ptr @__tpstrtab_regmap_hw_write_start, { %struct.atomic_t, { ptr } } zeroinitializer, ptr @__SCK__tp_func_regmap_hw_write_start, ptr null, ptr @__traceiter_regmap_hw_write_start, ptr null, ptr null, ptr null }, section "__tracepoints", align 4
@__tracepoint_ptr_regmap_hw_write_start = internal constant ptr @__tracepoint_regmap_hw_write_start, section "__tracepoints_ptrs", align 4
@__tpstrtab_regmap_hw_write_done = internal constant [21 x i8] c"regmap_hw_write_done\00", section "__tracepoints_strings", align 1
@__SCK__tp_func_regmap_hw_write_done = dso_local global %struct.static_call_key { ptr @__traceiter_regmap_hw_write_done }, align 4
@__tracepoint_regmap_hw_write_done = dso_local global { ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr } { ptr @__tpstrtab_regmap_hw_write_done, { %struct.atomic_t, { ptr } } zeroinitializer, ptr @__SCK__tp_func_regmap_hw_write_done, ptr null, ptr @__traceiter_regmap_hw_write_done, ptr null, ptr null, ptr null }, section "__tracepoints", align 4
@__tracepoint_ptr_regmap_hw_write_done = internal constant ptr @__tracepoint_regmap_hw_write_done, section "__tracepoints_ptrs", align 4
@__tpstrtab_regcache_sync = internal constant [14 x i8] c"regcache_sync\00", section "__tracepoints_strings", align 1
@__SCK__tp_func_regcache_sync = dso_local global %struct.static_call_key { ptr @__traceiter_regcache_sync }, align 4
@__tracepoint_regcache_sync = dso_local global { ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr } { ptr @__tpstrtab_regcache_sync, { %struct.atomic_t, { ptr } } zeroinitializer, ptr @__SCK__tp_func_regcache_sync, ptr null, ptr @__traceiter_regcache_sync, ptr null, ptr null, ptr null }, section "__tracepoints", align 4
@__tracepoint_ptr_regcache_sync = internal constant ptr @__tracepoint_regcache_sync, section "__tracepoints_ptrs", align 4
@__tpstrtab_regmap_cache_only = internal constant [18 x i8] c"regmap_cache_only\00", section "__tracepoints_strings", align 1
@__SCK__tp_func_regmap_cache_only = dso_local global %struct.static_call_key { ptr @__traceiter_regmap_cache_only }, align 4
@__tracepoint_regmap_cache_only = dso_local global { ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr } { ptr @__tpstrtab_regmap_cache_only, { %struct.atomic_t, { ptr } } zeroinitializer, ptr @__SCK__tp_func_regmap_cache_only, ptr null, ptr @__traceiter_regmap_cache_only, ptr null, ptr null, ptr null }, section "__tracepoints", align 4
@__tracepoint_ptr_regmap_cache_only = internal constant ptr @__tracepoint_regmap_cache_only, section "__tracepoints_ptrs", align 4
@__tpstrtab_regmap_cache_bypass = internal constant [20 x i8] c"regmap_cache_bypass\00", section "__tracepoints_strings", align 1
@__SCK__tp_func_regmap_cache_bypass = dso_local global %struct.static_call_key { ptr @__traceiter_regmap_cache_bypass }, align 4
@__tracepoint_regmap_cache_bypass = dso_local global { ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr } { ptr @__tpstrtab_regmap_cache_bypass, { %struct.atomic_t, { ptr } } zeroinitializer, ptr @__SCK__tp_func_regmap_cache_bypass, ptr null, ptr @__traceiter_regmap_cache_bypass, ptr null, ptr null, ptr null }, section "__tracepoints", align 4
@__tracepoint_ptr_regmap_cache_bypass = internal constant ptr @__tracepoint_regmap_cache_bypass, section "__tracepoints_ptrs", align 4
@__tpstrtab_regmap_async_write_start = internal constant [25 x i8] c"regmap_async_write_start\00", section "__tracepoints_strings", align 1
@__SCK__tp_func_regmap_async_write_start = dso_local global %struct.static_call_key { ptr @__traceiter_regmap_async_write_start }, align 4
@__tracepoint_regmap_async_write_start = dso_local global { ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr } { ptr @__tpstrtab_regmap_async_write_start, { %struct.atomic_t, { ptr } } zeroinitializer, ptr @__SCK__tp_func_regmap_async_write_start, ptr null, ptr @__traceiter_regmap_async_write_start, ptr null, ptr null, ptr null }, section "__tracepoints", align 4
@__tracepoint_ptr_regmap_async_write_start = internal constant ptr @__tracepoint_regmap_async_write_start, section "__tracepoints_ptrs", align 4
@__tpstrtab_regmap_async_io_complete = internal constant [25 x i8] c"regmap_async_io_complete\00", section "__tracepoints_strings", align 1
@__SCK__tp_func_regmap_async_io_complete = dso_local global %struct.static_call_key { ptr @__traceiter_regmap_async_io_complete }, align 4
@__tracepoint_regmap_async_io_complete = dso_local global { ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr } { ptr @__tpstrtab_regmap_async_io_complete, { %struct.atomic_t, { ptr } } zeroinitializer, ptr @__SCK__tp_func_regmap_async_io_complete, ptr null, ptr @__traceiter_regmap_async_io_complete, ptr null, ptr null, ptr null }, section "__tracepoints", align 4
@__tracepoint_ptr_regmap_async_io_complete = internal constant ptr @__tracepoint_regmap_async_io_complete, section "__tracepoints_ptrs", align 4
@__tpstrtab_regmap_async_complete_start = internal constant [28 x i8] c"regmap_async_complete_start\00", section "__tracepoints_strings", align 1
@__SCK__tp_func_regmap_async_complete_start = dso_local global %struct.static_call_key { ptr @__traceiter_regmap_async_complete_start }, align 4
@__tracepoint_regmap_async_complete_start = dso_local global { ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr } { ptr @__tpstrtab_regmap_async_complete_start, { %struct.atomic_t, { ptr } } zeroinitializer, ptr @__SCK__tp_func_regmap_async_complete_start, ptr null, ptr @__traceiter_regmap_async_complete_start, ptr null, ptr null, ptr null }, section "__tracepoints", align 4
@__tracepoint_ptr_regmap_async_complete_start = internal constant ptr @__tracepoint_regmap_async_complete_start, section "__tracepoints_ptrs", align 4
@__tpstrtab_regmap_async_complete_done = internal constant [27 x i8] c"regmap_async_complete_done\00", section "__tracepoints_strings", align 1
@__SCK__tp_func_regmap_async_complete_done = dso_local global %struct.static_call_key { ptr @__traceiter_regmap_async_complete_done }, align 4
@__tracepoint_regmap_async_complete_done = dso_local global { ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr } { ptr @__tpstrtab_regmap_async_complete_done, { %struct.atomic_t, { ptr } } zeroinitializer, ptr @__SCK__tp_func_regmap_async_complete_done, ptr null, ptr @__traceiter_regmap_async_complete_done, ptr null, ptr null, ptr null }, section "__tracepoints", align 4
@__tracepoint_ptr_regmap_async_complete_done = internal constant ptr @__tracepoint_regmap_async_complete_done, section "__tracepoints_ptrs", align 4
@__tpstrtab_regcache_drop_region = internal constant [21 x i8] c"regcache_drop_region\00", section "__tracepoints_strings", align 1
@__SCK__tp_func_regcache_drop_region = dso_local global %struct.static_call_key { ptr @__traceiter_regcache_drop_region }, align 4
@__tracepoint_regcache_drop_region = dso_local global { ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr } { ptr @__tpstrtab_regcache_drop_region, { %struct.atomic_t, { ptr } } zeroinitializer, ptr @__SCK__tp_func_regcache_drop_region, ptr null, ptr @__traceiter_regcache_drop_region, ptr null, ptr null, ptr null }, section "__tracepoints", align 4
@__tracepoint_ptr_regcache_drop_region = internal constant ptr @__tracepoint_regcache_drop_region, section "__tracepoints_ptrs", align 4
@str__regmap__trace_system_name = internal constant { [7 x i8], [25 x i8] } { [7 x i8] c"regmap\00", [25 x i8] zeroinitializer }, align 32
@trace_event_fields_regmap_reg = internal global { [4 x %struct.trace_event_fields], [32 x i8] } { [4 x %struct.trace_event_fields] [%struct.trace_event_fields { ptr @.str.42, %union.anon.98 { %struct.anon.99 { ptr @.str.43, i32 4, i32 4, i32 0, i32 0 } } }, %struct.trace_event_fields { ptr @.str.44, %union.anon.98 { %struct.anon.99 { ptr @.str.45, i32 4, i32 4, i32 0, i32 0 } } }, %struct.trace_event_fields { ptr @.str.44, %union.anon.98 { %struct.anon.99 { ptr @.str.46, i32 4, i32 4, i32 0, i32 0 } } }, %struct.trace_event_fields zeroinitializer], [32 x i8] zeroinitializer }, align 32
@event_class_regmap_reg = internal global %struct.trace_event_class { ptr @str__regmap__trace_system_name, ptr @trace_event_raw_event_regmap_reg, ptr @perf_trace_regmap_reg, ptr @trace_event_reg, ptr @trace_event_fields_regmap_reg, ptr null, %struct.list_head { ptr getelementptr (i8, ptr @event_class_regmap_reg, i64 24), ptr getelementptr (i8, ptr @event_class_regmap_reg, i64 24) }, ptr @trace_event_raw_init }, section ".ref.data", align 4
@trace_event_type_funcs_regmap_reg = internal global { %struct.trace_event_functions, [16 x i8] } { %struct.trace_event_functions { ptr @trace_raw_output_regmap_reg, ptr null, ptr null, ptr null }, [16 x i8] zeroinitializer }, align 32
@print_fmt_regmap_reg = internal global { [84 x i8], [44 x i8] } { [84 x i8] c"\22%s reg=%x val=%x\22, __get_str(name), (unsigned int)REC->reg, (unsigned int)REC->val\00", [44 x i8] zeroinitializer }, align 32
@event_regmap_reg_write = internal global { %struct.trace_event_call, [52 x i8] } { %struct.trace_event_call { %struct.list_head zeroinitializer, ptr @event_class_regmap_reg, %union.anon.100 { ptr @__tracepoint_regmap_reg_write }, %struct.trace_event { %struct.hlist_node zeroinitializer, %struct.list_head zeroinitializer, i32 0, ptr @trace_event_type_funcs_regmap_reg }, ptr @print_fmt_regmap_reg, ptr null, %union.anon.101 zeroinitializer, ptr null, i32 16, i32 0, ptr null, ptr null, ptr null }, [52 x i8] zeroinitializer }, align 32
@__event_regmap_reg_write = internal global ptr @event_regmap_reg_write, section "_ftrace_events", align 4
@event_regmap_reg_read = internal global { %struct.trace_event_call, [52 x i8] } { %struct.trace_event_call { %struct.list_head zeroinitializer, ptr @event_class_regmap_reg, %union.anon.100 { ptr @__tracepoint_regmap_reg_read }, %struct.trace_event { %struct.hlist_node zeroinitializer, %struct.list_head zeroinitializer, i32 0, ptr @trace_event_type_funcs_regmap_reg }, ptr @print_fmt_regmap_reg, ptr null, %union.anon.101 zeroinitializer, ptr null, i32 16, i32 0, ptr null, ptr null, ptr null }, [52 x i8] zeroinitializer }, align 32
@__event_regmap_reg_read = internal global ptr @event_regmap_reg_read, section "_ftrace_events", align 4
@event_regmap_reg_read_cache = internal global { %struct.trace_event_call, [52 x i8] } { %struct.trace_event_call { %struct.list_head zeroinitializer, ptr @event_class_regmap_reg, %union.anon.100 { ptr @__tracepoint_regmap_reg_read_cache }, %struct.trace_event { %struct.hlist_node zeroinitializer, %struct.list_head zeroinitializer, i32 0, ptr @trace_event_type_funcs_regmap_reg }, ptr @print_fmt_regmap_reg, ptr null, %union.anon.101 zeroinitializer, ptr null, i32 16, i32 0, ptr null, ptr null, ptr null }, [52 x i8] zeroinitializer }, align 32
@__event_regmap_reg_read_cache = internal global ptr @event_regmap_reg_read_cache, section "_ftrace_events", align 4
@trace_event_fields_regmap_block = internal global { [4 x %struct.trace_event_fields], [32 x i8] } { [4 x %struct.trace_event_fields] [%struct.trace_event_fields { ptr @.str.42, %union.anon.98 { %struct.anon.99 { ptr @.str.43, i32 4, i32 4, i32 0, i32 0 } } }, %struct.trace_event_fields { ptr @.str.44, %union.anon.98 { %struct.anon.99 { ptr @.str.45, i32 4, i32 4, i32 0, i32 0 } } }, %struct.trace_event_fields { ptr @.str.48, %union.anon.98 { %struct.anon.99 { ptr @.str.49, i32 4, i32 4, i32 1, i32 0 } } }, %struct.trace_event_fields zeroinitializer], [32 x i8] zeroinitializer }, align 32
@event_class_regmap_block = internal global %struct.trace_event_class { ptr @str__regmap__trace_system_name, ptr @trace_event_raw_event_regmap_block, ptr @perf_trace_regmap_block, ptr @trace_event_reg, ptr @trace_event_fields_regmap_block, ptr null, %struct.list_head { ptr getelementptr (i8, ptr @event_class_regmap_block, i64 24), ptr getelementptr (i8, ptr @event_class_regmap_block, i64 24) }, ptr @trace_event_raw_init }, section ".ref.data", align 4
@trace_event_type_funcs_regmap_block = internal global { %struct.trace_event_functions, [16 x i8] } { %struct.trace_event_functions { ptr @trace_raw_output_regmap_block, ptr null, ptr null, ptr null }, [16 x i8] zeroinitializer }, align 32
@print_fmt_regmap_block = internal global { [79 x i8], [49 x i8] } { [79 x i8] c"\22%s reg=%x count=%d\22, __get_str(name), (unsigned int)REC->reg, (int)REC->count\00", [49 x i8] zeroinitializer }, align 32
@event_regmap_hw_read_start = internal global { %struct.trace_event_call, [52 x i8] } { %struct.trace_event_call { %struct.list_head zeroinitializer, ptr @event_class_regmap_block, %union.anon.100 { ptr @__tracepoint_regmap_hw_read_start }, %struct.trace_event { %struct.hlist_node zeroinitializer, %struct.list_head zeroinitializer, i32 0, ptr @trace_event_type_funcs_regmap_block }, ptr @print_fmt_regmap_block, ptr null, %union.anon.101 zeroinitializer, ptr null, i32 16, i32 0, ptr null, ptr null, ptr null }, [52 x i8] zeroinitializer }, align 32
@__event_regmap_hw_read_start = internal global ptr @event_regmap_hw_read_start, section "_ftrace_events", align 4
@event_regmap_hw_read_done = internal global { %struct.trace_event_call, [52 x i8] } { %struct.trace_event_call { %struct.list_head zeroinitializer, ptr @event_class_regmap_block, %union.anon.100 { ptr @__tracepoint_regmap_hw_read_done }, %struct.trace_event { %struct.hlist_node zeroinitializer, %struct.list_head zeroinitializer, i32 0, ptr @trace_event_type_funcs_regmap_block }, ptr @print_fmt_regmap_block, ptr null, %union.anon.101 zeroinitializer, ptr null, i32 16, i32 0, ptr null, ptr null, ptr null }, [52 x i8] zeroinitializer }, align 32
@__event_regmap_hw_read_done = internal global ptr @event_regmap_hw_read_done, section "_ftrace_events", align 4
@event_regmap_hw_write_start = internal global { %struct.trace_event_call, [52 x i8] } { %struct.trace_event_call { %struct.list_head zeroinitializer, ptr @event_class_regmap_block, %union.anon.100 { ptr @__tracepoint_regmap_hw_write_start }, %struct.trace_event { %struct.hlist_node zeroinitializer, %struct.list_head zeroinitializer, i32 0, ptr @trace_event_type_funcs_regmap_block }, ptr @print_fmt_regmap_block, ptr null, %union.anon.101 zeroinitializer, ptr null, i32 16, i32 0, ptr null, ptr null, ptr null }, [52 x i8] zeroinitializer }, align 32
@__event_regmap_hw_write_start = internal global ptr @event_regmap_hw_write_start, section "_ftrace_events", align 4
@event_regmap_hw_write_done = internal global { %struct.trace_event_call, [52 x i8] } { %struct.trace_event_call { %struct.list_head zeroinitializer, ptr @event_class_regmap_block, %union.anon.100 { ptr @__tracepoint_regmap_hw_write_done }, %struct.trace_event { %struct.hlist_node zeroinitializer, %struct.list_head zeroinitializer, i32 0, ptr @trace_event_type_funcs_regmap_block }, ptr @print_fmt_regmap_block, ptr null, %union.anon.101 zeroinitializer, ptr null, i32 16, i32 0, ptr null, ptr null, ptr null }, [52 x i8] zeroinitializer }, align 32
@__event_regmap_hw_write_done = internal global ptr @event_regmap_hw_write_done, section "_ftrace_events", align 4
@trace_event_fields_regcache_sync = internal global { [4 x %struct.trace_event_fields], [32 x i8] } { [4 x %struct.trace_event_fields] [%struct.trace_event_fields { ptr @.str.42, %union.anon.98 { %struct.anon.99 { ptr @.str.43, i32 4, i32 4, i32 0, i32 0 } } }, %struct.trace_event_fields { ptr @.str.42, %union.anon.98 { %struct.anon.99 { ptr @.str.51, i32 4, i32 4, i32 0, i32 0 } } }, %struct.trace_event_fields { ptr @.str.42, %union.anon.98 { %struct.anon.99 { ptr @.str.52, i32 4, i32 4, i32 0, i32 0 } } }, %struct.trace_event_fields zeroinitializer], [32 x i8] zeroinitializer }, align 32
@event_class_regcache_sync = internal global %struct.trace_event_class { ptr @str__regmap__trace_system_name, ptr @trace_event_raw_event_regcache_sync, ptr @perf_trace_regcache_sync, ptr @trace_event_reg, ptr @trace_event_fields_regcache_sync, ptr null, %struct.list_head { ptr getelementptr (i8, ptr @event_class_regcache_sync, i64 24), ptr getelementptr (i8, ptr @event_class_regcache_sync, i64 24) }, ptr @trace_event_raw_init }, section ".ref.data", align 4
@trace_event_type_funcs_regcache_sync = internal global { %struct.trace_event_functions, [16 x i8] } { %struct.trace_event_functions { ptr @trace_raw_output_regcache_sync, ptr null, ptr null, ptr null }, [16 x i8] zeroinitializer }, align 32
@print_fmt_regcache_sync = internal global { [76 x i8], [52 x i8] } { [76 x i8] c"\22%s type=%s status=%s\22, __get_str(name), __get_str(type), __get_str(status)\00", [52 x i8] zeroinitializer }, align 32
@event_regcache_sync = internal global { %struct.trace_event_call, [52 x i8] } { %struct.trace_event_call { %struct.list_head zeroinitializer, ptr @event_class_regcache_sync, %union.anon.100 { ptr @__tracepoint_regcache_sync }, %struct.trace_event { %struct.hlist_node zeroinitializer, %struct.list_head zeroinitializer, i32 0, ptr @trace_event_type_funcs_regcache_sync }, ptr @print_fmt_regcache_sync, ptr null, %union.anon.101 zeroinitializer, ptr null, i32 16, i32 0, ptr null, ptr null, ptr null }, [52 x i8] zeroinitializer }, align 32
@__event_regcache_sync = internal global ptr @event_regcache_sync, section "_ftrace_events", align 4
@trace_event_fields_regmap_bool = internal global { [3 x %struct.trace_event_fields], [56 x i8] } { [3 x %struct.trace_event_fields] [%struct.trace_event_fields { ptr @.str.42, %union.anon.98 { %struct.anon.99 { ptr @.str.43, i32 4, i32 4, i32 0, i32 0 } } }, %struct.trace_event_fields { ptr @.str.48, %union.anon.98 { %struct.anon.99 { ptr @.str.54, i32 4, i32 4, i32 1, i32 0 } } }, %struct.trace_event_fields zeroinitializer], [56 x i8] zeroinitializer }, align 32
@event_class_regmap_bool = internal global %struct.trace_event_class { ptr @str__regmap__trace_system_name, ptr @trace_event_raw_event_regmap_bool, ptr @perf_trace_regmap_bool, ptr @trace_event_reg, ptr @trace_event_fields_regmap_bool, ptr null, %struct.list_head { ptr getelementptr (i8, ptr @event_class_regmap_bool, i64 24), ptr getelementptr (i8, ptr @event_class_regmap_bool, i64 24) }, ptr @trace_event_raw_init }, section ".ref.data", align 4
@trace_event_type_funcs_regmap_bool = internal global { %struct.trace_event_functions, [16 x i8] } { %struct.trace_event_functions { ptr @trace_raw_output_regmap_bool, ptr null, ptr null, ptr null }, [16 x i8] zeroinitializer }, align 32
@print_fmt_regmap_bool = internal global { [46 x i8], [50 x i8] } { [46 x i8] c"\22%s flag=%d\22, __get_str(name), (int)REC->flag\00", [50 x i8] zeroinitializer }, align 32
@event_regmap_cache_only = internal global { %struct.trace_event_call, [52 x i8] } { %struct.trace_event_call { %struct.list_head zeroinitializer, ptr @event_class_regmap_bool, %union.anon.100 { ptr @__tracepoint_regmap_cache_only }, %struct.trace_event { %struct.hlist_node zeroinitializer, %struct.list_head zeroinitializer, i32 0, ptr @trace_event_type_funcs_regmap_bool }, ptr @print_fmt_regmap_bool, ptr null, %union.anon.101 zeroinitializer, ptr null, i32 16, i32 0, ptr null, ptr null, ptr null }, [52 x i8] zeroinitializer }, align 32
@__event_regmap_cache_only = internal global ptr @event_regmap_cache_only, section "_ftrace_events", align 4
@event_regmap_cache_bypass = internal global { %struct.trace_event_call, [52 x i8] } { %struct.trace_event_call { %struct.list_head zeroinitializer, ptr @event_class_regmap_bool, %union.anon.100 { ptr @__tracepoint_regmap_cache_bypass }, %struct.trace_event { %struct.hlist_node zeroinitializer, %struct.list_head zeroinitializer, i32 0, ptr @trace_event_type_funcs_regmap_bool }, ptr @print_fmt_regmap_bool, ptr null, %union.anon.101 zeroinitializer, ptr null, i32 16, i32 0, ptr null, ptr null, ptr null }, [52 x i8] zeroinitializer }, align 32
@__event_regmap_cache_bypass = internal global ptr @event_regmap_cache_bypass, section "_ftrace_events", align 4
@trace_event_fields_regmap_async = internal global { [2 x %struct.trace_event_fields], [48 x i8] } { [2 x %struct.trace_event_fields] [%struct.trace_event_fields { ptr @.str.42, %union.anon.98 { %struct.anon.99 { ptr @.str.43, i32 4, i32 4, i32 0, i32 0 } } }, %struct.trace_event_fields zeroinitializer], [48 x i8] zeroinitializer }, align 32
@event_class_regmap_async = internal global %struct.trace_event_class { ptr @str__regmap__trace_system_name, ptr @trace_event_raw_event_regmap_async, ptr @perf_trace_regmap_async, ptr @trace_event_reg, ptr @trace_event_fields_regmap_async, ptr null, %struct.list_head { ptr getelementptr (i8, ptr @event_class_regmap_async, i64 24), ptr getelementptr (i8, ptr @event_class_regmap_async, i64 24) }, ptr @trace_event_raw_init }, section ".ref.data", align 4
@event_regmap_async_write_start = internal global { %struct.trace_event_call, [52 x i8] } { %struct.trace_event_call { %struct.list_head zeroinitializer, ptr @event_class_regmap_block, %union.anon.100 { ptr @__tracepoint_regmap_async_write_start }, %struct.trace_event { %struct.hlist_node zeroinitializer, %struct.list_head zeroinitializer, i32 0, ptr @trace_event_type_funcs_regmap_block }, ptr @print_fmt_regmap_block, ptr null, %union.anon.101 zeroinitializer, ptr null, i32 16, i32 0, ptr null, ptr null, ptr null }, [52 x i8] zeroinitializer }, align 32
@__event_regmap_async_write_start = internal global ptr @event_regmap_async_write_start, section "_ftrace_events", align 4
@trace_event_type_funcs_regmap_async = internal global { %struct.trace_event_functions, [16 x i8] } { %struct.trace_event_functions { ptr @trace_raw_output_regmap_async, ptr null, ptr null, ptr null }, [16 x i8] zeroinitializer }, align 32
@print_fmt_regmap_async = internal global { [22 x i8], [42 x i8] } { [22 x i8] c"\22%s\22, __get_str(name)\00", [42 x i8] zeroinitializer }, align 32
@event_regmap_async_io_complete = internal global { %struct.trace_event_call, [52 x i8] } { %struct.trace_event_call { %struct.list_head zeroinitializer, ptr @event_class_regmap_async, %union.anon.100 { ptr @__tracepoint_regmap_async_io_complete }, %struct.trace_event { %struct.hlist_node zeroinitializer, %struct.list_head zeroinitializer, i32 0, ptr @trace_event_type_funcs_regmap_async }, ptr @print_fmt_regmap_async, ptr null, %union.anon.101 zeroinitializer, ptr null, i32 16, i32 0, ptr null, ptr null, ptr null }, [52 x i8] zeroinitializer }, align 32
@__event_regmap_async_io_complete = internal global ptr @event_regmap_async_io_complete, section "_ftrace_events", align 4
@event_regmap_async_complete_start = internal global { %struct.trace_event_call, [52 x i8] } { %struct.trace_event_call { %struct.list_head zeroinitializer, ptr @event_class_regmap_async, %union.anon.100 { ptr @__tracepoint_regmap_async_complete_start }, %struct.trace_event { %struct.hlist_node zeroinitializer, %struct.list_head zeroinitializer, i32 0, ptr @trace_event_type_funcs_regmap_async }, ptr @print_fmt_regmap_async, ptr null, %union.anon.101 zeroinitializer, ptr null, i32 16, i32 0, ptr null, ptr null, ptr null }, [52 x i8] zeroinitializer }, align 32
@__event_regmap_async_complete_start = internal global ptr @event_regmap_async_complete_start, section "_ftrace_events", align 4
@event_regmap_async_complete_done = internal global { %struct.trace_event_call, [52 x i8] } { %struct.trace_event_call { %struct.list_head zeroinitializer, ptr @event_class_regmap_async, %union.anon.100 { ptr @__tracepoint_regmap_async_complete_done }, %struct.trace_event { %struct.hlist_node zeroinitializer, %struct.list_head zeroinitializer, i32 0, ptr @trace_event_type_funcs_regmap_async }, ptr @print_fmt_regmap_async, ptr null, %union.anon.101 zeroinitializer, ptr null, i32 16, i32 0, ptr null, ptr null, ptr null }, [52 x i8] zeroinitializer }, align 32
@__event_regmap_async_complete_done = internal global ptr @event_regmap_async_complete_done, section "_ftrace_events", align 4
@trace_event_fields_regcache_drop_region = internal global { [4 x %struct.trace_event_fields], [32 x i8] } { [4 x %struct.trace_event_fields] [%struct.trace_event_fields { ptr @.str.42, %union.anon.98 { %struct.anon.99 { ptr @.str.43, i32 4, i32 4, i32 0, i32 0 } } }, %struct.trace_event_fields { ptr @.str.44, %union.anon.98 { %struct.anon.99 { ptr @.str.57, i32 4, i32 4, i32 0, i32 0 } } }, %struct.trace_event_fields { ptr @.str.44, %union.anon.98 { %struct.anon.99 { ptr @.str.58, i32 4, i32 4, i32 0, i32 0 } } }, %struct.trace_event_fields zeroinitializer], [32 x i8] zeroinitializer }, align 32
@event_class_regcache_drop_region = internal global %struct.trace_event_class { ptr @str__regmap__trace_system_name, ptr @trace_event_raw_event_regcache_drop_region, ptr @perf_trace_regcache_drop_region, ptr @trace_event_reg, ptr @trace_event_fields_regcache_drop_region, ptr null, %struct.list_head { ptr getelementptr (i8, ptr @event_class_regcache_drop_region, i64 24), ptr getelementptr (i8, ptr @event_class_regcache_drop_region, i64 24) }, ptr @trace_event_raw_init }, section ".ref.data", align 4
@trace_event_type_funcs_regcache_drop_region = internal global { %struct.trace_event_functions, [16 x i8] } { %struct.trace_event_functions { ptr @trace_raw_output_regcache_drop_region, ptr null, ptr null, ptr null }, [16 x i8] zeroinitializer }, align 32
@print_fmt_regcache_drop_region = internal global { [76 x i8], [52 x i8] } { [76 x i8] c"\22%s %u-%u\22, __get_str(name), (unsigned int)REC->from, (unsigned int)REC->to\00", [52 x i8] zeroinitializer }, align 32
@event_regcache_drop_region = internal global { %struct.trace_event_call, [52 x i8] } { %struct.trace_event_call { %struct.list_head zeroinitializer, ptr @event_class_regcache_drop_region, %union.anon.100 { ptr @__tracepoint_regcache_drop_region }, %struct.trace_event { %struct.hlist_node zeroinitializer, %struct.list_head zeroinitializer, i32 0, ptr @trace_event_type_funcs_regcache_drop_region }, ptr @print_fmt_regcache_drop_region, ptr null, %union.anon.101 zeroinitializer, ptr null, i32 16, i32 0, ptr null, ptr null, ptr null }, [52 x i8] zeroinitializer }, align 32
@__event_regcache_drop_region = internal global ptr @event_regcache_drop_region, section "_ftrace_events", align 4
@__bpf_trace_tp_map_regmap_reg_write = internal global %union.anon.102 { %struct.bpf_raw_event_map { ptr @__tracepoint_regmap_reg_write, ptr @__bpf_trace_regmap_reg, i32 3, i32 0, [16 x i8] undef } }, section "__bpf_raw_tp_map", align 32
@__bpf_trace_tp_map_regmap_reg_read = internal global %union.anon.103 { %struct.bpf_raw_event_map { ptr @__tracepoint_regmap_reg_read, ptr @__bpf_trace_regmap_reg, i32 3, i32 0, [16 x i8] undef } }, section "__bpf_raw_tp_map", align 32
@__bpf_trace_tp_map_regmap_reg_read_cache = internal global %union.anon.104 { %struct.bpf_raw_event_map { ptr @__tracepoint_regmap_reg_read_cache, ptr @__bpf_trace_regmap_reg, i32 3, i32 0, [16 x i8] undef } }, section "__bpf_raw_tp_map", align 32
@__bpf_trace_tp_map_regmap_hw_read_start = internal global %union.anon.105 { %struct.bpf_raw_event_map { ptr @__tracepoint_regmap_hw_read_start, ptr @__bpf_trace_regmap_block, i32 3, i32 0, [16 x i8] undef } }, section "__bpf_raw_tp_map", align 32
@__bpf_trace_tp_map_regmap_hw_read_done = internal global %union.anon.106 { %struct.bpf_raw_event_map { ptr @__tracepoint_regmap_hw_read_done, ptr @__bpf_trace_regmap_block, i32 3, i32 0, [16 x i8] undef } }, section "__bpf_raw_tp_map", align 32
@__bpf_trace_tp_map_regmap_hw_write_start = internal global %union.anon.107 { %struct.bpf_raw_event_map { ptr @__tracepoint_regmap_hw_write_start, ptr @__bpf_trace_regmap_block, i32 3, i32 0, [16 x i8] undef } }, section "__bpf_raw_tp_map", align 32
@__bpf_trace_tp_map_regmap_hw_write_done = internal global %union.anon.108 { %struct.bpf_raw_event_map { ptr @__tracepoint_regmap_hw_write_done, ptr @__bpf_trace_regmap_block, i32 3, i32 0, [16 x i8] undef } }, section "__bpf_raw_tp_map", align 32
@__bpf_trace_tp_map_regcache_sync = internal global %union.anon.109 { %struct.bpf_raw_event_map { ptr @__tracepoint_regcache_sync, ptr @__bpf_trace_regcache_sync, i32 3, i32 0, [16 x i8] undef } }, section "__bpf_raw_tp_map", align 32
@__bpf_trace_tp_map_regmap_cache_only = internal global %union.anon.110 { %struct.bpf_raw_event_map { ptr @__tracepoint_regmap_cache_only, ptr @__bpf_trace_regmap_bool, i32 2, i32 0, [16 x i8] undef } }, section "__bpf_raw_tp_map", align 32
@__bpf_trace_tp_map_regmap_cache_bypass = internal global %union.anon.111 { %struct.bpf_raw_event_map { ptr @__tracepoint_regmap_cache_bypass, ptr @__bpf_trace_regmap_bool, i32 2, i32 0, [16 x i8] undef } }, section "__bpf_raw_tp_map", align 32
@__bpf_trace_tp_map_regmap_async_write_start = internal global %union.anon.112 { %struct.bpf_raw_event_map { ptr @__tracepoint_regmap_async_write_start, ptr @__bpf_trace_regmap_block, i32 3, i32 0, [16 x i8] undef } }, section "__bpf_raw_tp_map", align 32
@__bpf_trace_tp_map_regmap_async_io_complete = internal global %union.anon.113 { %struct.bpf_raw_event_map { ptr @__tracepoint_regmap_async_io_complete, ptr @__bpf_trace_regmap_async, i32 1, i32 0, [16 x i8] undef } }, section "__bpf_raw_tp_map", align 32
@__bpf_trace_tp_map_regmap_async_complete_start = internal global %union.anon.114 { %struct.bpf_raw_event_map { ptr @__tracepoint_regmap_async_complete_start, ptr @__bpf_trace_regmap_async, i32 1, i32 0, [16 x i8] undef } }, section "__bpf_raw_tp_map", align 32
@__bpf_trace_tp_map_regmap_async_complete_done = internal global %union.anon.115 { %struct.bpf_raw_event_map { ptr @__tracepoint_regmap_async_complete_done, ptr @__bpf_trace_regmap_async, i32 1, i32 0, [16 x i8] undef } }, section "__bpf_raw_tp_map", align 32
@__bpf_trace_tp_map_regcache_drop_region = internal global %union.anon.116 { %struct.bpf_raw_event_map { ptr @__tracepoint_regcache_drop_region, ptr @__bpf_trace_regcache_drop_region, i32 3, i32 0, [16 x i8] undef } }, section "__bpf_raw_tp_map", align 32
@__kstrtab_regmap_reg_in_ranges = external dso_local constant [0 x i8], align 1
@__kstrtabns_regmap_reg_in_ranges = external dso_local constant [0 x i8], align 1
@__ksymtab_regmap_reg_in_ranges = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @regmap_reg_in_ranges to i32), ptr @__kstrtab_regmap_reg_in_ranges, ptr @__kstrtabns_regmap_reg_in_ranges }, section "___ksymtab_gpl+regmap_reg_in_ranges", align 4
@__kstrtab_regmap_check_range_table = external dso_local constant [0 x i8], align 1
@__kstrtabns_regmap_check_range_table = external dso_local constant [0 x i8], align 1
@__ksymtab_regmap_check_range_table = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @regmap_check_range_table to i32), ptr @__kstrtab_regmap_check_range_table, ptr @__kstrtabns_regmap_check_range_table }, section "___ksymtab_gpl+regmap_check_range_table", align 4
@.str = internal constant { [23 x i8], [41 x i8] } { [23 x i8] c"dev_get_regmap_release\00", [41 x i8] zeroinitializer }, align 32
@__kstrtab_regmap_attach_dev = external dso_local constant [0 x i8], align 1
@__kstrtabns_regmap_attach_dev = external dso_local constant [0 x i8], align 1
@__ksymtab_regmap_attach_dev = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @regmap_attach_dev to i32), ptr @__kstrtab_regmap_attach_dev, ptr @__kstrtabns_regmap_attach_dev }, section "___ksymtab_gpl+regmap_attach_dev", align 4
@.str.1 = internal constant { [11 x i8], [21 x i8] } { [11 x i8] c"big-endian\00", [21 x i8] zeroinitializer }, align 32
@.str.2 = internal constant { [14 x i8], [18 x i8] } { [14 x i8] c"little-endian\00", [18 x i8] zeroinitializer }, align 32
@.str.3 = internal constant { [14 x i8], [18 x i8] } { [14 x i8] c"native-endian\00", [18 x i8] zeroinitializer }, align 32
@__kstrtab_regmap_get_val_endian = external dso_local constant [0 x i8], align 1
@__kstrtabns_regmap_get_val_endian = external dso_local constant [0 x i8], align 1
@__ksymtab_regmap_get_val_endian = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @regmap_get_val_endian to i32), ptr @__kstrtab_regmap_get_val_endian, ptr @__kstrtabns_regmap_get_val_endian }, section "___ksymtab_gpl+regmap_get_val_endian", align 4
@__regmap_init.__key = internal global %struct.lock_class_key zeroinitializer, align 4
@.str.4 = internal constant { [19 x i8], [45 x i8] } { [19 x i8] c"&map->raw_spinlock\00", [45 x i8] zeroinitializer }, align 32
@__regmap_init.__key.5 = internal global %struct.lock_class_key zeroinitializer, align 4
@.str.6 = internal constant { [15 x i8], [17 x i8] } { [15 x i8] c"&map->spinlock\00", [17 x i8] zeroinitializer }, align 32
@__regmap_init.__key.7 = internal global %struct.lock_class_key zeroinitializer, align 4
@.str.8 = internal constant { [12 x i8], [20 x i8] } { [12 x i8] c"&map->mutex\00", [20 x i8] zeroinitializer }, align 32
@__regmap_init.__key.9 = internal global %struct.lock_class_key zeroinitializer, align 4
@.str.10 = internal constant { [17 x i8], [47 x i8] } { [17 x i8] c"&map->async_lock\00", [47 x i8] zeroinitializer }, align 32
@__regmap_init.__key.11 = internal global %struct.lock_class_key zeroinitializer, align 4
@.str.12 = internal constant { [18 x i8], [46 x i8] } { [18 x i8] c"&map->async_waitq\00", [46 x i8] zeroinitializer }, align 32
@__regmap_init._entry = internal constant %struct.pi_entry { ptr @.str.13, ptr @.str.14, ptr @.str.15, i32 1131, ptr @.str.16, ptr @.str.17 }, align 1
@.str.13 = internal constant { [27 x i8], [37 x i8] } { [27 x i8] c"Invalid range %d: %d < %d\0A\00", [37 x i8] zeroinitializer }, align 32
@.str.14 = internal constant { [14 x i8], [18 x i8] } { [14 x i8] c"__regmap_init\00", [18 x i8] zeroinitializer }, align 32
@.str.15 = internal constant { [29 x i8], [35 x i8] } { [29 x i8] c"drivers/base/regmap/regmap.c\00", [35 x i8] zeroinitializer }, align 32
@.str.16 = internal constant { [3 x i8], [29 x i8] } { [3 x i8] c"\013\00", [29 x i8] zeroinitializer }, align 32
@.str.17 = internal constant { [8 x i8], [24 x i8] } { [8 x i8] c"%s %s: \00", [24 x i8] zeroinitializer }, align 32
@__regmap_init._entry_ptr = internal global ptr @__regmap_init._entry, section ".printk_index", align 4
@__regmap_init._entry.18 = internal constant %struct.pi_entry { ptr @.str.19, ptr @.str.14, ptr @.str.15, i32 1137, ptr @.str.16, ptr @.str.17 }, align 1
@.str.19 = internal constant { [27 x i8], [37 x i8] } { [27 x i8] c"Invalid range %d: %d > %d\0A\00", [37 x i8] zeroinitializer }, align 32
@__regmap_init._entry_ptr.20 = internal global ptr @__regmap_init._entry.18, section ".printk_index", align 4
@__regmap_init._entry.21 = internal constant %struct.pi_entry { ptr @.str.22, ptr @.str.14, ptr @.str.15, i32 1143, ptr @.str.16, ptr @.str.17 }, align 1
@.str.22 = internal constant { [39 x i8], [57 x i8] } { [39 x i8] c"Invalid range %d: selector out of map\0A\00", [57 x i8] zeroinitializer }, align 32
@__regmap_init._entry_ptr.23 = internal global ptr @__regmap_init._entry.21, section ".printk_index", align 4
@__regmap_init._entry.24 = internal constant %struct.pi_entry { ptr @.str.25, ptr @.str.14, ptr @.str.15, i32 1149, ptr @.str.16, ptr @.str.17 }, align 1
@.str.25 = internal constant { [32 x i8], [32 x i8] } { [32 x i8] c"Invalid range %d: window_len 0\0A\00", [32 x i8] zeroinitializer }, align 32
@__regmap_init._entry_ptr.26 = internal global ptr @__regmap_init._entry.24, section ".printk_index", align 4
@__regmap_init._entry.27 = internal constant %struct.pi_entry { ptr @.str.28, ptr @.str.14, ptr @.str.15, i32 1169, ptr @.str.16, ptr @.str.17 }, align 1
@.str.28 = internal constant { [37 x i8], [59 x i8] } { [37 x i8] c"Range %d: selector for %d in window\0A\00", [59 x i8] zeroinitializer }, align 32
@__regmap_init._entry_ptr.29 = internal global ptr @__regmap_init._entry.27, section ".printk_index", align 4
@__regmap_init._entry.30 = internal constant %struct.pi_entry { ptr @.str.31, ptr @.str.14, ptr @.str.15, i32 1177, ptr @.str.16, ptr @.str.17 }, align 1
@.str.31 = internal constant { [35 x i8], [61 x i8] } { [35 x i8] c"Range %d: window for %d in window\0A\00", [61 x i8] zeroinitializer }, align 32
@__regmap_init._entry_ptr.32 = internal global ptr @__regmap_init._entry.30, section ".printk_index", align 4
@__regmap_init._entry.33 = internal constant %struct.pi_entry { ptr @.str.34, ptr @.str.14, ptr @.str.15, i32 1199, ptr @.str.16, ptr @.str.17 }, align 1
@.str.34 = internal constant { [24 x i8], [40 x i8] } { [24 x i8] c"Failed to add range %d\0A\00", [40 x i8] zeroinitializer }, align 32
@__regmap_init._entry_ptr.35 = internal global ptr @__regmap_init._entry.33, section ".printk_index", align 4
@__kstrtab___regmap_init = external dso_local constant [0 x i8], align 1
@__kstrtabns___regmap_init = external dso_local constant [0 x i8], align 1
@__ksymtab___regmap_init = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @__regmap_init to i32), ptr @__kstrtab___regmap_init, ptr @__kstrtabns___regmap_init }, section "___ksymtab_gpl+__regmap_init", align 4
@.str.36 = internal constant { [20 x i8], [44 x i8] } { [20 x i8] c"devm_regmap_release\00", [44 x i8] zeroinitializer }, align 32
@__kstrtab___devm_regmap_init = external dso_local constant [0 x i8], align 1
@__kstrtabns___devm_regmap_init = external dso_local constant [0 x i8], align 1
@__ksymtab___devm_regmap_init = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @__devm_regmap_init to i32), ptr @__kstrtab___devm_regmap_init, ptr @__kstrtabns___devm_regmap_init }, section "___ksymtab_gpl+__devm_regmap_init", align 4
@__kstrtab_devm_regmap_field_alloc = external dso_local constant [0 x i8], align 1
@__kstrtabns_devm_regmap_field_alloc = external dso_local constant [0 x i8], align 1
@__ksymtab_devm_regmap_field_alloc = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @devm_regmap_field_alloc to i32), ptr @__kstrtab_devm_regmap_field_alloc, ptr @__kstrtabns_devm_regmap_field_alloc }, section "___ksymtab_gpl+devm_regmap_field_alloc", align 4
@__kstrtab_regmap_field_bulk_alloc = external dso_local constant [0 x i8], align 1
@__kstrtabns_regmap_field_bulk_alloc = external dso_local constant [0 x i8], align 1
@__ksymtab_regmap_field_bulk_alloc = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @regmap_field_bulk_alloc to i32), ptr @__kstrtab_regmap_field_bulk_alloc, ptr @__kstrtabns_regmap_field_bulk_alloc }, section "___ksymtab_gpl+regmap_field_bulk_alloc", align 4
@__kstrtab_devm_regmap_field_bulk_alloc = external dso_local constant [0 x i8], align 1
@__kstrtabns_devm_regmap_field_bulk_alloc = external dso_local constant [0 x i8], align 1
@__ksymtab_devm_regmap_field_bulk_alloc = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @devm_regmap_field_bulk_alloc to i32), ptr @__kstrtab_devm_regmap_field_bulk_alloc, ptr @__kstrtabns_devm_regmap_field_bulk_alloc }, section "___ksymtab_gpl+devm_regmap_field_bulk_alloc", align 4
@__kstrtab_regmap_field_bulk_free = external dso_local constant [0 x i8], align 1
@__kstrtabns_regmap_field_bulk_free = external dso_local constant [0 x i8], align 1
@__ksymtab_regmap_field_bulk_free = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @regmap_field_bulk_free to i32), ptr @__kstrtab_regmap_field_bulk_free, ptr @__kstrtabns_regmap_field_bulk_free }, section "___ksymtab_gpl+regmap_field_bulk_free", align 4
@__kstrtab_devm_regmap_field_bulk_free = external dso_local constant [0 x i8], align 1
@__kstrtabns_devm_regmap_field_bulk_free = external dso_local constant [0 x i8], align 1
@__ksymtab_devm_regmap_field_bulk_free = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @devm_regmap_field_bulk_free to i32), ptr @__kstrtab_devm_regmap_field_bulk_free, ptr @__kstrtabns_devm_regmap_field_bulk_free }, section "___ksymtab_gpl+devm_regmap_field_bulk_free", align 4
@__kstrtab_devm_regmap_field_free = external dso_local constant [0 x i8], align 1
@__kstrtabns_devm_regmap_field_free = external dso_local constant [0 x i8], align 1
@__ksymtab_devm_regmap_field_free = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @devm_regmap_field_free to i32), ptr @__kstrtab_devm_regmap_field_free, ptr @__kstrtabns_devm_regmap_field_free }, section "___ksymtab_gpl+devm_regmap_field_free", align 4
@__kstrtab_regmap_field_alloc = external dso_local constant [0 x i8], align 1
@__kstrtabns_regmap_field_alloc = external dso_local constant [0 x i8], align 1
@__ksymtab_regmap_field_alloc = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @regmap_field_alloc to i32), ptr @__kstrtab_regmap_field_alloc, ptr @__kstrtabns_regmap_field_alloc }, section "___ksymtab_gpl+regmap_field_alloc", align 4
@__kstrtab_regmap_field_free = external dso_local constant [0 x i8], align 1
@__kstrtabns_regmap_field_free = external dso_local constant [0 x i8], align 1
@__ksymtab_regmap_field_free = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @regmap_field_free to i32), ptr @__kstrtab_regmap_field_free, ptr @__kstrtabns_regmap_field_free }, section "___ksymtab_gpl+regmap_field_free", align 4
@__kstrtab_regmap_reinit_cache = external dso_local constant [0 x i8], align 1
@__kstrtabns_regmap_reinit_cache = external dso_local constant [0 x i8], align 1
@__ksymtab_regmap_reinit_cache = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @regmap_reinit_cache to i32), ptr @__kstrtab_regmap_reinit_cache, ptr @__kstrtabns_regmap_reinit_cache }, section "___ksymtab_gpl+regmap_reinit_cache", align 4
@__kstrtab_regmap_exit = external dso_local constant [0 x i8], align 1
@__kstrtabns_regmap_exit = external dso_local constant [0 x i8], align 1
@__ksymtab_regmap_exit = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @regmap_exit to i32), ptr @__kstrtab_regmap_exit, ptr @__kstrtabns_regmap_exit }, section "___ksymtab_gpl+regmap_exit", align 4
@__kstrtab_dev_get_regmap = external dso_local constant [0 x i8], align 1
@__kstrtabns_dev_get_regmap = external dso_local constant [0 x i8], align 1
@__ksymtab_dev_get_regmap = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @dev_get_regmap to i32), ptr @__kstrtab_dev_get_regmap, ptr @__kstrtabns_dev_get_regmap }, section "___ksymtab_gpl+dev_get_regmap", align 4
@__kstrtab_regmap_get_device = external dso_local constant [0 x i8], align 1
@__kstrtabns_regmap_get_device = external dso_local constant [0 x i8], align 1
@__ksymtab_regmap_get_device = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @regmap_get_device to i32), ptr @__kstrtab_regmap_get_device, ptr @__kstrtabns_regmap_get_device }, section "___ksymtab_gpl+regmap_get_device", align 4
@__kstrtab_regmap_can_raw_write = external dso_local constant [0 x i8], align 1
@__kstrtabns_regmap_can_raw_write = external dso_local constant [0 x i8], align 1
@__ksymtab_regmap_can_raw_write = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @regmap_can_raw_write to i32), ptr @__kstrtab_regmap_can_raw_write, ptr @__kstrtabns_regmap_can_raw_write }, section "___ksymtab_gpl+regmap_can_raw_write", align 4
@__kstrtab_regmap_get_raw_read_max = external dso_local constant [0 x i8], align 1
@__kstrtabns_regmap_get_raw_read_max = external dso_local constant [0 x i8], align 1
@__ksymtab_regmap_get_raw_read_max = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @regmap_get_raw_read_max to i32), ptr @__kstrtab_regmap_get_raw_read_max, ptr @__kstrtabns_regmap_get_raw_read_max }, section "___ksymtab_gpl+regmap_get_raw_read_max", align 4
@__kstrtab_regmap_get_raw_write_max = external dso_local constant [0 x i8], align 1
@__kstrtabns_regmap_get_raw_write_max = external dso_local constant [0 x i8], align 1
@__ksymtab_regmap_get_raw_write_max = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @regmap_get_raw_write_max to i32), ptr @__kstrtab_regmap_get_raw_write_max, ptr @__kstrtabns_regmap_get_raw_write_max }, section "___ksymtab_gpl+regmap_get_raw_write_max", align 4
@_regmap_write._entry = internal constant { %struct.pi_entry, [40 x i8] } { %struct.pi_entry { ptr @.str.37, ptr @.str.38, ptr @.str.15, i32 1972, ptr @.str.39, ptr @.str.17 }, [40 x i8] zeroinitializer }, align 32
@.str.37 = internal constant { [10 x i8], [22 x i8] } { [10 x i8] c"%x <= %x\0A\00", [22 x i8] zeroinitializer }, align 32
@.str.38 = internal constant { [14 x i8], [18 x i8] } { [14 x i8] c"_regmap_write\00", [18 x i8] zeroinitializer }, align 32
@.str.39 = internal constant { [3 x i8], [29 x i8] } { [3 x i8] c"\016\00", [29 x i8] zeroinitializer }, align 32
@_regmap_write._entry_ptr = internal global ptr @_regmap_write._entry, section ".printk_index", align 4
@__kstrtab_regmap_write = external dso_local constant [0 x i8], align 1
@__kstrtabns_regmap_write = external dso_local constant [0 x i8], align 1
@__ksymtab_regmap_write = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @regmap_write to i32), ptr @__kstrtab_regmap_write, ptr @__kstrtabns_regmap_write }, section "___ksymtab_gpl+regmap_write", align 4
@__kstrtab_regmap_write_async = external dso_local constant [0 x i8], align 1
@__kstrtabns_regmap_write_async = external dso_local constant [0 x i8], align 1
@__ksymtab_regmap_write_async = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @regmap_write_async to i32), ptr @__kstrtab_regmap_write_async, ptr @__kstrtabns_regmap_write_async }, section "___ksymtab_gpl+regmap_write_async", align 4
@__kstrtab_regmap_raw_write = external dso_local constant [0 x i8], align 1
@__kstrtabns_regmap_raw_write = external dso_local constant [0 x i8], align 1
@__ksymtab_regmap_raw_write = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @regmap_raw_write to i32), ptr @__kstrtab_regmap_raw_write, ptr @__kstrtabns_regmap_raw_write }, section "___ksymtab_gpl+regmap_raw_write", align 4
@__kstrtab_regmap_noinc_write = external dso_local constant [0 x i8], align 1
@__kstrtabns_regmap_noinc_write = external dso_local constant [0 x i8], align 1
@__ksymtab_regmap_noinc_write = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @regmap_noinc_write to i32), ptr @__kstrtab_regmap_noinc_write, ptr @__kstrtabns_regmap_noinc_write }, section "___ksymtab_gpl+regmap_noinc_write", align 4
@__kstrtab_regmap_field_update_bits_base = external dso_local constant [0 x i8], align 1
@__kstrtabns_regmap_field_update_bits_base = external dso_local constant [0 x i8], align 1
@__ksymtab_regmap_field_update_bits_base = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @regmap_field_update_bits_base to i32), ptr @__kstrtab_regmap_field_update_bits_base, ptr @__kstrtabns_regmap_field_update_bits_base }, section "___ksymtab_gpl+regmap_field_update_bits_base", align 4
@__kstrtab_regmap_fields_update_bits_base = external dso_local constant [0 x i8], align 1
@__kstrtabns_regmap_fields_update_bits_base = external dso_local constant [0 x i8], align 1
@__ksymtab_regmap_fields_update_bits_base = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @regmap_fields_update_bits_base to i32), ptr @__kstrtab_regmap_fields_update_bits_base, ptr @__kstrtabns_regmap_fields_update_bits_base }, section "___ksymtab_gpl+regmap_fields_update_bits_base", align 4
@__kstrtab_regmap_bulk_write = external dso_local constant [0 x i8], align 1
@__kstrtabns_regmap_bulk_write = external dso_local constant [0 x i8], align 1
@__ksymtab_regmap_bulk_write = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @regmap_bulk_write to i32), ptr @__kstrtab_regmap_bulk_write, ptr @__kstrtabns_regmap_bulk_write }, section "___ksymtab_gpl+regmap_bulk_write", align 4
@__kstrtab_regmap_multi_reg_write = external dso_local constant [0 x i8], align 1
@__kstrtabns_regmap_multi_reg_write = external dso_local constant [0 x i8], align 1
@__ksymtab_regmap_multi_reg_write = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @regmap_multi_reg_write to i32), ptr @__kstrtab_regmap_multi_reg_write, ptr @__kstrtabns_regmap_multi_reg_write }, section "___ksymtab_gpl+regmap_multi_reg_write", align 4
@__kstrtab_regmap_multi_reg_write_bypassed = external dso_local constant [0 x i8], align 1
@__kstrtabns_regmap_multi_reg_write_bypassed = external dso_local constant [0 x i8], align 1
@__ksymtab_regmap_multi_reg_write_bypassed = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @regmap_multi_reg_write_bypassed to i32), ptr @__kstrtab_regmap_multi_reg_write_bypassed, ptr @__kstrtabns_regmap_multi_reg_write_bypassed }, section "___ksymtab_gpl+regmap_multi_reg_write_bypassed", align 4
@__kstrtab_regmap_raw_write_async = external dso_local constant [0 x i8], align 1
@__kstrtabns_regmap_raw_write_async = external dso_local constant [0 x i8], align 1
@__ksymtab_regmap_raw_write_async = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @regmap_raw_write_async to i32), ptr @__kstrtab_regmap_raw_write_async, ptr @__kstrtabns_regmap_raw_write_async }, section "___ksymtab_gpl+regmap_raw_write_async", align 4
@__kstrtab_regmap_read = external dso_local constant [0 x i8], align 1
@__kstrtabns_regmap_read = external dso_local constant [0 x i8], align 1
@__ksymtab_regmap_read = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @regmap_read to i32), ptr @__kstrtab_regmap_read, ptr @__kstrtabns_regmap_read }, section "___ksymtab_gpl+regmap_read", align 4
@__kstrtab_regmap_raw_read = external dso_local constant [0 x i8], align 1
@__kstrtabns_regmap_raw_read = external dso_local constant [0 x i8], align 1
@__ksymtab_regmap_raw_read = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @regmap_raw_read to i32), ptr @__kstrtab_regmap_raw_read, ptr @__kstrtabns_regmap_raw_read }, section "___ksymtab_gpl+regmap_raw_read", align 4
@__kstrtab_regmap_noinc_read = external dso_local constant [0 x i8], align 1
@__kstrtabns_regmap_noinc_read = external dso_local constant [0 x i8], align 1
@__ksymtab_regmap_noinc_read = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @regmap_noinc_read to i32), ptr @__kstrtab_regmap_noinc_read, ptr @__kstrtabns_regmap_noinc_read }, section "___ksymtab_gpl+regmap_noinc_read", align 4
@__kstrtab_regmap_field_read = external dso_local constant [0 x i8], align 1
@__kstrtabns_regmap_field_read = external dso_local constant [0 x i8], align 1
@__ksymtab_regmap_field_read = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @regmap_field_read to i32), ptr @__kstrtab_regmap_field_read, ptr @__kstrtabns_regmap_field_read }, section "___ksymtab_gpl+regmap_field_read", align 4
@__kstrtab_regmap_fields_read = external dso_local constant [0 x i8], align 1
@__kstrtabns_regmap_fields_read = external dso_local constant [0 x i8], align 1
@__ksymtab_regmap_fields_read = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @regmap_fields_read to i32), ptr @__kstrtab_regmap_fields_read, ptr @__kstrtabns_regmap_fields_read }, section "___ksymtab_gpl+regmap_fields_read", align 4
@__kstrtab_regmap_bulk_read = external dso_local constant [0 x i8], align 1
@__kstrtabns_regmap_bulk_read = external dso_local constant [0 x i8], align 1
@__ksymtab_regmap_bulk_read = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @regmap_bulk_read to i32), ptr @__kstrtab_regmap_bulk_read, ptr @__kstrtabns_regmap_bulk_read }, section "___ksymtab_gpl+regmap_bulk_read", align 4
@__kstrtab_regmap_update_bits_base = external dso_local constant [0 x i8], align 1
@__kstrtabns_regmap_update_bits_base = external dso_local constant [0 x i8], align 1
@__ksymtab_regmap_update_bits_base = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @regmap_update_bits_base to i32), ptr @__kstrtab_regmap_update_bits_base, ptr @__kstrtabns_regmap_update_bits_base }, section "___ksymtab_gpl+regmap_update_bits_base", align 4
@__kstrtab_regmap_test_bits = external dso_local constant [0 x i8], align 1
@__kstrtabns_regmap_test_bits = external dso_local constant [0 x i8], align 1
@__ksymtab_regmap_test_bits = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @regmap_test_bits to i32), ptr @__kstrtab_regmap_test_bits, ptr @__kstrtabns_regmap_test_bits }, section "___ksymtab_gpl+regmap_test_bits", align 4
@__kstrtab_regmap_async_complete_cb = external dso_local constant [0 x i8], align 1
@__kstrtabns_regmap_async_complete_cb = external dso_local constant [0 x i8], align 1
@__ksymtab_regmap_async_complete_cb = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @regmap_async_complete_cb to i32), ptr @__kstrtab_regmap_async_complete_cb, ptr @__kstrtabns_regmap_async_complete_cb }, section "___ksymtab_gpl+regmap_async_complete_cb", align 4
@__kstrtab_regmap_async_complete = external dso_local constant [0 x i8], align 1
@__kstrtabns_regmap_async_complete = external dso_local constant [0 x i8], align 1
@__ksymtab_regmap_async_complete = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @regmap_async_complete to i32), ptr @__kstrtab_regmap_async_complete, ptr @__kstrtabns_regmap_async_complete }, section "___ksymtab_gpl+regmap_async_complete", align 4
@regmap_register_patch.__already_done = internal unnamed_addr global i1 false, section ".data.once", align 1
@.str.40 = internal constant { [31 x i8], [33 x i8] } { [31 x i8] c"invalid registers number (%d)\0A\00", [33 x i8] zeroinitializer }, align 32
@__kstrtab_regmap_register_patch = external dso_local constant [0 x i8], align 1
@__kstrtabns_regmap_register_patch = external dso_local constant [0 x i8], align 1
@__ksymtab_regmap_register_patch = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @regmap_register_patch to i32), ptr @__kstrtab_regmap_register_patch, ptr @__kstrtabns_regmap_register_patch }, section "___ksymtab_gpl+regmap_register_patch", align 4
@__kstrtab_regmap_get_val_bytes = external dso_local constant [0 x i8], align 1
@__kstrtabns_regmap_get_val_bytes = external dso_local constant [0 x i8], align 1
@__ksymtab_regmap_get_val_bytes = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @regmap_get_val_bytes to i32), ptr @__kstrtab_regmap_get_val_bytes, ptr @__kstrtabns_regmap_get_val_bytes }, section "___ksymtab_gpl+regmap_get_val_bytes", align 4
@__kstrtab_regmap_get_max_register = external dso_local constant [0 x i8], align 1
@__kstrtabns_regmap_get_max_register = external dso_local constant [0 x i8], align 1
@__ksymtab_regmap_get_max_register = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @regmap_get_max_register to i32), ptr @__kstrtab_regmap_get_max_register, ptr @__kstrtabns_regmap_get_max_register }, section "___ksymtab_gpl+regmap_get_max_register", align 4
@__kstrtab_regmap_get_reg_stride = external dso_local constant [0 x i8], align 1
@__kstrtabns_regmap_get_reg_stride = external dso_local constant [0 x i8], align 1
@__ksymtab_regmap_get_reg_stride = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @regmap_get_reg_stride to i32), ptr @__kstrtab_regmap_get_reg_stride, ptr @__kstrtabns_regmap_get_reg_stride }, section "___ksymtab_gpl+regmap_get_reg_stride", align 4
@__kstrtab_regmap_parse_val = external dso_local constant [0 x i8], align 1
@__kstrtabns_regmap_parse_val = external dso_local constant [0 x i8], align 1
@__ksymtab_regmap_parse_val = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @regmap_parse_val to i32), ptr @__kstrtab_regmap_parse_val, ptr @__kstrtabns_regmap_parse_val }, section "___ksymtab_gpl+regmap_parse_val", align 4
@__initcall__kmod_regmap__331_3343_regmap_initcall2 = internal global ptr @regmap_initcall, section ".initcall2.init", align 4
@.str.41 = internal constant { [7 x i8], [25 x i8] } { [7 x i8] c"(null)\00", [25 x i8] zeroinitializer }, align 32
@.str.42 = internal constant { [18 x i8], [46 x i8] } { [18 x i8] c"__data_loc char[]\00", [46 x i8] zeroinitializer }, align 32
@.str.43 = internal constant { [5 x i8], [27 x i8] } { [5 x i8] c"name\00", [27 x i8] zeroinitializer }, align 32
@.str.44 = internal constant { [13 x i8], [19 x i8] } { [13 x i8] c"unsigned int\00", [19 x i8] zeroinitializer }, align 32
@.str.45 = internal constant { [4 x i8], [28 x i8] } { [4 x i8] c"reg\00", [28 x i8] zeroinitializer }, align 32
@.str.46 = internal constant { [4 x i8], [28 x i8] } { [4 x i8] c"val\00", [28 x i8] zeroinitializer }, align 32
@.str.47 = internal constant { [18 x i8], [46 x i8] } { [18 x i8] c"%s reg=%x val=%x\0A\00", [46 x i8] zeroinitializer }, align 32
@.str.48 = internal constant { [4 x i8], [28 x i8] } { [4 x i8] c"int\00", [28 x i8] zeroinitializer }, align 32
@.str.49 = internal constant { [6 x i8], [26 x i8] } { [6 x i8] c"count\00", [26 x i8] zeroinitializer }, align 32
@.str.50 = internal constant { [20 x i8], [44 x i8] } { [20 x i8] c"%s reg=%x count=%d\0A\00", [44 x i8] zeroinitializer }, align 32
@.str.51 = internal constant { [7 x i8], [25 x i8] } { [7 x i8] c"status\00", [25 x i8] zeroinitializer }, align 32
@.str.52 = internal constant { [5 x i8], [27 x i8] } { [5 x i8] c"type\00", [27 x i8] zeroinitializer }, align 32
@.str.53 = internal constant { [22 x i8], [42 x i8] } { [22 x i8] c"%s type=%s status=%s\0A\00", [42 x i8] zeroinitializer }, align 32
@.str.54 = internal constant { [5 x i8], [27 x i8] } { [5 x i8] c"flag\00", [27 x i8] zeroinitializer }, align 32
@.str.55 = internal constant { [12 x i8], [20 x i8] } { [12 x i8] c"%s flag=%d\0A\00", [20 x i8] zeroinitializer }, align 32
@.str.56 = internal constant { [4 x i8], [28 x i8] } { [4 x i8] c"%s\0A\00", [28 x i8] zeroinitializer }, align 32
@.str.57 = internal constant { [5 x i8], [27 x i8] } { [5 x i8] c"from\00", [27 x i8] zeroinitializer }, align 32
@.str.58 = internal constant { [3 x i8], [29 x i8] } { [3 x i8] c"to\00", [29 x i8] zeroinitializer }, align 32
@.str.59 = internal constant { [10 x i8], [22 x i8] } { [10 x i8] c"%s %u-%u\0A\00", [22 x i8] zeroinitializer }, align 32
@__per_cpu_offset = external dso_local local_unnamed_addr global [4 x i32], align 4
@kmalloc_caches = external dso_local local_unnamed_addr global [4 x [14 x ptr]], align 4
@.str.60 = internal constant { [28 x i8], [36 x i8] } { [28 x i8] c"drivers/base/regmap/trace.h\00", [36 x i8] zeroinitializer }, align 32
@trace_regmap_hw_write_start.__warned = internal unnamed_addr global i1 false, section ".data.unlikely", align 1
@.str.61 = internal constant { [41 x i8], [55 x i8] } { [41 x i8] c"suspicious rcu_dereference_check() usage\00", [55 x i8] zeroinitializer }, align 32
@__cpu_online_mask = external dso_local global %struct.cpumask, align 4
@nr_cpu_ids = external dso_local local_unnamed_addr global i32, align 4
@cpu_max_bits_warn.__already_done = internal unnamed_addr global i1 false, section ".data.once", align 1
@.str.62 = internal constant { [24 x i8], [40 x i8] } { [24 x i8] c"include/linux/cpumask.h\00", [40 x i8] zeroinitializer }, align 32
@trace_regmap_hw_write_done.__warned = internal unnamed_addr global i1 false, section ".data.unlikely", align 1
@trace_regmap_reg_write.__warned = internal unnamed_addr global i1 false, section ".data.unlikely", align 1
@_regmap_raw_write_impl._entry = internal constant { %struct.pi_entry, [40 x i8] } { %struct.pi_entry { ptr @.str.63, ptr @.str.64, ptr @.str.15, i32 1697, ptr @.str.16, ptr @.str.17 }, [40 x i8] zeroinitializer }, align 32
@.str.63 = internal constant { [42 x i8], [54 x i8] } { [42 x i8] c"Error in caching of register: %x ret: %d\0A\00", [54 x i8] zeroinitializer }, align 32
@.str.64 = internal constant { [23 x i8], [41 x i8] } { [23 x i8] c"_regmap_raw_write_impl\00", [41 x i8] zeroinitializer }, align 32
@_regmap_raw_write_impl._entry_ptr = internal global ptr @_regmap_raw_write_impl._entry, section ".printk_index", align 4
@_regmap_raw_write_impl.__UNIQUE_ID_ddebug329 = internal global { ptr, ptr, ptr, ptr, i8, i8, i8, i8, { { { %struct.atomic_t, { ptr } } } }, [4 x i8] } { ptr @.str.65, ptr @.str.64, ptr @.str.15, ptr @.str.66, i8 1, i8 -83, i8 0, i8 0, { { { %struct.atomic_t, { ptr } } } } zeroinitializer, [4 x i8] undef }, section "__dyndbg", align 8
@.str.65 = internal constant { [7 x i8], [25 x i8] } { [7 x i8] c"regmap\00", [25 x i8] zeroinitializer }, align 32
@.str.66 = internal constant { [23 x i8], [41 x i8] } { [23 x i8] c"Writing window %d/%zu\0A\00", [41 x i8] zeroinitializer }, align 32
@_regmap_raw_write_impl._entry.67 = internal constant { %struct.pi_entry, [40 x i8] } { %struct.pi_entry { ptr @.str.68, ptr @.str.64, ptr @.str.15, i32 1803, ptr @.str.16, ptr @.str.17 }, [40 x i8] zeroinitializer }, align 32
@.str.68 = internal constant { [30 x i8], [34 x i8] } { [30 x i8] c"Failed to schedule write: %d\0A\00", [34 x i8] zeroinitializer }, align 32
@_regmap_raw_write_impl._entry_ptr.69 = internal global ptr @_regmap_raw_write_impl._entry.67, section ".printk_index", align 4
@trace_regmap_async_write_start.__warned = internal unnamed_addr global i1 false, section ".data.unlikely", align 1
@arm_delay_ops = external dso_local local_unnamed_addr global %struct.arm_delay_ops, align 4
@_regmap_multi_reg_write._entry = internal constant { %struct.pi_entry, [40 x i8] } { %struct.pi_entry { ptr @.str.63, ptr @.str.70, ptr @.str.15, i32 2501, ptr @.str.16, ptr @.str.17 }, [40 x i8] zeroinitializer }, align 32
@.str.70 = internal constant { [24 x i8], [40 x i8] } { [24 x i8] c"_regmap_multi_reg_write\00", [40 x i8] zeroinitializer }, align 32
@_regmap_multi_reg_write._entry_ptr = internal global ptr @_regmap_multi_reg_write._entry, section ".printk_index", align 4
@_regmap_read._entry = internal constant { %struct.pi_entry, [40 x i8] } { %struct.pi_entry { ptr @.str.71, ptr @.str.72, ptr @.str.15, i32 2737, ptr @.str.39, ptr @.str.17 }, [40 x i8] zeroinitializer }, align 32
@.str.71 = internal constant { [10 x i8], [22 x i8] } { [10 x i8] c"%x => %x\0A\00", [22 x i8] zeroinitializer }, align 32
@.str.72 = internal constant { [13 x i8], [19 x i8] } { [13 x i8] c"_regmap_read\00", [19 x i8] zeroinitializer }, align 32
@_regmap_read._entry_ptr = internal global ptr @_regmap_read._entry, section ".printk_index", align 4
@trace_regmap_reg_read.__warned = internal unnamed_addr global i1 false, section ".data.unlikely", align 1
@trace_regmap_hw_read_start.__warned = internal unnamed_addr global i1 false, section ".data.unlikely", align 1
@trace_regmap_hw_read_done.__warned = internal unnamed_addr global i1 false, section ".data.unlikely", align 1
@trace_regmap_async_io_complete.__warned = internal unnamed_addr global i1 false, section ".data.unlikely", align 1
@trace_regmap_async_complete_start.__warned = internal unnamed_addr global i1 false, section ".data.unlikely", align 1
@trace_regmap_async_complete_done.__warned = internal unnamed_addr global i1 false, section ".data.unlikely", align 1
@__sancov_gen_cov_switch_values = internal global [4 x i64] [i64 2, i64 32, i64 1, i64 2]
@__sancov_gen_cov_switch_values.73 = internal global [11 x i64] [i64 9, i64 32, i64 2, i64 4, i64 7, i64 8, i64 10, i64 12, i64 16, i64 24, i64 32]
@__sancov_gen_cov_switch_values.74 = internal global [4 x i64] [i64 2, i64 32, i64 9, i64 17]
@__sancov_gen_cov_switch_values.75 = internal global [5 x i64] [i64 3, i64 32, i64 1, i64 2, i64 3]
@__sancov_gen_cov_switch_values.76 = internal global [5 x i64] [i64 3, i64 32, i64 1, i64 2, i64 3]
@__sancov_gen_cov_switch_values.77 = internal global [6 x i64] [i64 4, i64 32, i64 0, i64 1, i64 2, i64 3]
@__sancov_gen_cov_switch_values.78 = internal global [5 x i64] [i64 3, i64 32, i64 1, i64 2, i64 3]
@__sancov_gen_cov_switch_values.79 = internal global [5 x i64] [i64 3, i64 32, i64 1, i64 2, i64 3]
@__sancov_gen_cov_switch_values.80 = internal global [4 x i64] [i64 2, i64 32, i64 0, i64 4294966772]
@__sancov_gen_cov_switch_values.81 = internal global [5 x i64] [i64 3, i64 32, i64 1, i64 2, i64 4]
@__sancov_gen_cov_switch_values.82 = internal global [4 x i64] [i64 2, i64 32, i64 1, i64 2]
@__sancov_gen_cov_switch_values.83 = internal global [5 x i64] [i64 3, i64 32, i64 1, i64 2, i64 4]
@___asan_gen_.84 = private unnamed_addr constant [31 x i8] c"str__regmap__trace_system_name\00", align 1
@___asan_gen_.85 = private unnamed_addr constant [32 x i8] c"../include/trace/trace_events.h\00", align 1
@___asan_gen_.86 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.85, i32 36, i32 1 }
@___asan_gen_.87 = private unnamed_addr constant [30 x i8] c"trace_event_fields_regmap_reg\00", align 1
@___asan_gen_.90 = private unnamed_addr constant [34 x i8] c"trace_event_type_funcs_regmap_reg\00", align 1
@___asan_gen_.93 = private unnamed_addr constant [21 x i8] c"print_fmt_regmap_reg\00", align 1
@___asan_gen_.96 = private unnamed_addr constant [23 x i8] c"event_regmap_reg_write\00", align 1
@___asan_gen_.98 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.325, i32 40, i32 1 }
@___asan_gen_.99 = private unnamed_addr constant [22 x i8] c"event_regmap_reg_read\00", align 1
@___asan_gen_.101 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.325, i32 49, i32 1 }
@___asan_gen_.102 = private unnamed_addr constant [28 x i8] c"event_regmap_reg_read_cache\00", align 1
@___asan_gen_.104 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.325, i32 58, i32 1 }
@___asan_gen_.105 = private unnamed_addr constant [32 x i8] c"trace_event_fields_regmap_block\00", align 1
@___asan_gen_.108 = private unnamed_addr constant [36 x i8] c"trace_event_type_funcs_regmap_block\00", align 1
@___asan_gen_.111 = private unnamed_addr constant [23 x i8] c"print_fmt_regmap_block\00", align 1
@___asan_gen_.114 = private unnamed_addr constant [27 x i8] c"event_regmap_hw_read_start\00", align 1
@___asan_gen_.116 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.325, i32 90, i32 1 }
@___asan_gen_.117 = private unnamed_addr constant [26 x i8] c"event_regmap_hw_read_done\00", align 1
@___asan_gen_.119 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.325, i32 97, i32 1 }
@___asan_gen_.120 = private unnamed_addr constant [28 x i8] c"event_regmap_hw_write_start\00", align 1
@___asan_gen_.123 = private unnamed_addr constant [27 x i8] c"event_regmap_hw_write_done\00", align 1
@___asan_gen_.125 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.325, i32 111, i32 1 }
@___asan_gen_.126 = private unnamed_addr constant [33 x i8] c"trace_event_fields_regcache_sync\00", align 1
@___asan_gen_.129 = private unnamed_addr constant [37 x i8] c"trace_event_type_funcs_regcache_sync\00", align 1
@___asan_gen_.132 = private unnamed_addr constant [24 x i8] c"print_fmt_regcache_sync\00", align 1
@___asan_gen_.135 = private unnamed_addr constant [20 x i8] c"event_regcache_sync\00", align 1
@___asan_gen_.138 = private unnamed_addr constant [31 x i8] c"trace_event_fields_regmap_bool\00", align 1
@___asan_gen_.141 = private unnamed_addr constant [35 x i8] c"trace_event_type_funcs_regmap_bool\00", align 1
@___asan_gen_.144 = private unnamed_addr constant [22 x i8] c"print_fmt_regmap_bool\00", align 1
@___asan_gen_.147 = private unnamed_addr constant [24 x i8] c"event_regmap_cache_only\00", align 1
@___asan_gen_.149 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.325, i32 161, i32 1 }
@___asan_gen_.150 = private unnamed_addr constant [26 x i8] c"event_regmap_cache_bypass\00", align 1
@___asan_gen_.152 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.325, i32 169, i32 1 }
@___asan_gen_.153 = private unnamed_addr constant [32 x i8] c"trace_event_fields_regmap_async\00", align 1
@___asan_gen_.156 = private unnamed_addr constant [31 x i8] c"event_regmap_async_write_start\00", align 1
@___asan_gen_.158 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.325, i32 194, i32 1 }
@___asan_gen_.159 = private unnamed_addr constant [36 x i8] c"trace_event_type_funcs_regmap_async\00", align 1
@___asan_gen_.162 = private unnamed_addr constant [23 x i8] c"print_fmt_regmap_async\00", align 1
@___asan_gen_.165 = private unnamed_addr constant [31 x i8] c"event_regmap_async_io_complete\00", align 1
@___asan_gen_.167 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.325, i32 201, i32 1 }
@___asan_gen_.168 = private unnamed_addr constant [34 x i8] c"event_regmap_async_complete_start\00", align 1
@___asan_gen_.170 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.325, i32 209, i32 1 }
@___asan_gen_.171 = private unnamed_addr constant [33 x i8] c"event_regmap_async_complete_done\00", align 1
@___asan_gen_.173 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.325, i32 217, i32 1 }
@___asan_gen_.174 = private unnamed_addr constant [40 x i8] c"trace_event_fields_regcache_drop_region\00", align 1
@___asan_gen_.177 = private unnamed_addr constant [44 x i8] c"trace_event_type_funcs_regcache_drop_region\00", align 1
@___asan_gen_.180 = private unnamed_addr constant [31 x i8] c"print_fmt_regcache_drop_region\00", align 1
@___asan_gen_.183 = private unnamed_addr constant [27 x i8] c"event_regcache_drop_region\00", align 1
@___asan_gen_.188 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.364, i32 654, i32 6 }
@___asan_gen_.191 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.364, i32 705, i32 40 }
@___asan_gen_.194 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.364, i32 707, i32 45 }
@___asan_gen_.197 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.364, i32 709, i32 45 }
@___asan_gen_.200 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.364, i32 792, i32 5 }
@___asan_gen_.203 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.364, i32 798, i32 5 }
@___asan_gen_.206 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.364, i32 805, i32 4 }
@___asan_gen_.209 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.364, i32 863, i32 2 }
@___asan_gen_.212 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.364, i32 866, i32 2 }
@___asan_gen_.227 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.364, i32 1130, i32 4 }
@___asan_gen_.230 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.364, i32 1136, i32 4 }
@___asan_gen_.233 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.364, i32 1142, i32 4 }
@___asan_gen_.236 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.364, i32 1148, i32 4 }
@___asan_gen_.239 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.364, i32 1167, i32 5 }
@___asan_gen_.242 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.364, i32 1175, i32 5 }
@___asan_gen_.245 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.364, i32 1199, i32 4 }
@___asan_gen_.248 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.364, i32 1259, i32 8 }
@___asan_gen_.260 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.364, i32 1972, i32 4 }
@___asan_gen_.263 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.364, i32 3245, i32 6 }
@___asan_gen_.284 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.325, i32 16, i32 1 }
@___asan_gen_.293 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.325, i32 67, i32 1 }
@___asan_gen_.302 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.325, i32 118, i32 1 }
@___asan_gen_.308 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.325, i32 141, i32 1 }
@___asan_gen_.311 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.325, i32 177, i32 1 }
@___asan_gen_.320 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.325, i32 225, i32 1 }
@___asan_gen_.325 = private unnamed_addr constant [33 x i8] c"../drivers/base/regmap/./trace.h\00", align 1
@___asan_gen_.326 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.325, i32 104, i32 1 }
@___asan_gen_.328 = private unnamed_addr constant [27 x i8] c"../include/linux/cpumask.h\00", align 1
@___asan_gen_.329 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.328, i32 108, i32 2 }
@___asan_gen_.338 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.364, i32 1695, i32 5 }
@___asan_gen_.344 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.364, i32 1715, i32 4 }
@___asan_gen_.350 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.364, i32 1802, i32 4 }
@___asan_gen_.356 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.364, i32 2499, i32 5 }
@___asan_gen_.357 = private unnamed_addr constant [7 x i8] c"_entry\00", align 1
@___asan_gen_.363 = private unnamed_addr constant [17 x i8] c"<string literal>\00", align 1
@___asan_gen_.364 = private constant [32 x i8] c"../drivers/base/regmap/regmap.c\00", align 1
@___asan_gen_.365 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.364, i32 2737, i32 4 }
@llvm.compiler.used = appending global [226 x ptr] [ptr @__bpf_trace_tp_map_regcache_drop_region, ptr @__bpf_trace_tp_map_regcache_sync, ptr @__bpf_trace_tp_map_regmap_async_complete_done, ptr @__bpf_trace_tp_map_regmap_async_complete_start, ptr @__bpf_trace_tp_map_regmap_async_io_complete, ptr @__bpf_trace_tp_map_regmap_async_write_start, ptr @__bpf_trace_tp_map_regmap_cache_bypass, ptr @__bpf_trace_tp_map_regmap_cache_only, ptr @__bpf_trace_tp_map_regmap_hw_read_done, ptr @__bpf_trace_tp_map_regmap_hw_read_start, ptr @__bpf_trace_tp_map_regmap_hw_write_done, ptr @__bpf_trace_tp_map_regmap_hw_write_start, ptr @__bpf_trace_tp_map_regmap_reg_read, ptr @__bpf_trace_tp_map_regmap_reg_read_cache, ptr @__bpf_trace_tp_map_regmap_reg_write, ptr @__event_regcache_drop_region, ptr @__event_regcache_sync, ptr @__event_regmap_async_complete_done, ptr @__event_regmap_async_complete_start, ptr @__event_regmap_async_io_complete, ptr @__event_regmap_async_write_start, ptr @__event_regmap_cache_bypass, ptr @__event_regmap_cache_only, ptr @__event_regmap_hw_read_done, ptr @__event_regmap_hw_read_start, ptr @__event_regmap_hw_write_done, ptr @__event_regmap_hw_write_start, ptr @__event_regmap_reg_read, ptr @__event_regmap_reg_read_cache, ptr @__event_regmap_reg_write, ptr @__initcall__kmod_regmap__331_3343_regmap_initcall2, ptr @__ksymtab___devm_regmap_init, ptr @__ksymtab___regmap_init, ptr @__ksymtab_dev_get_regmap, ptr @__ksymtab_devm_regmap_field_alloc, ptr @__ksymtab_devm_regmap_field_bulk_alloc, ptr @__ksymtab_devm_regmap_field_bulk_free, ptr @__ksymtab_devm_regmap_field_free, ptr @__ksymtab_regmap_async_complete, ptr @__ksymtab_regmap_async_complete_cb, ptr @__ksymtab_regmap_attach_dev, ptr @__ksymtab_regmap_bulk_read, ptr @__ksymtab_regmap_bulk_write, ptr @__ksymtab_regmap_can_raw_write, ptr @__ksymtab_regmap_check_range_table, ptr @__ksymtab_regmap_exit, ptr @__ksymtab_regmap_field_alloc, ptr @__ksymtab_regmap_field_bulk_alloc, ptr @__ksymtab_regmap_field_bulk_free, ptr @__ksymtab_regmap_field_free, ptr @__ksymtab_regmap_field_read, ptr @__ksymtab_regmap_field_update_bits_base, ptr @__ksymtab_regmap_fields_read, ptr @__ksymtab_regmap_fields_update_bits_base, ptr @__ksymtab_regmap_get_device, ptr @__ksymtab_regmap_get_max_register, ptr @__ksymtab_regmap_get_raw_read_max, ptr @__ksymtab_regmap_get_raw_write_max, ptr @__ksymtab_regmap_get_reg_stride, ptr @__ksymtab_regmap_get_val_bytes, ptr @__ksymtab_regmap_get_val_endian, ptr @__ksymtab_regmap_multi_reg_write, ptr @__ksymtab_regmap_multi_reg_write_bypassed, ptr @__ksymtab_regmap_noinc_read, ptr @__ksymtab_regmap_noinc_write, ptr @__ksymtab_regmap_parse_val, ptr @__ksymtab_regmap_raw_read, ptr @__ksymtab_regmap_raw_write, ptr @__ksymtab_regmap_raw_write_async, ptr @__ksymtab_regmap_read, ptr @__ksymtab_regmap_reg_in_ranges, ptr @__ksymtab_regmap_register_patch, ptr @__ksymtab_regmap_reinit_cache, ptr @__ksymtab_regmap_test_bits, ptr @__ksymtab_regmap_update_bits_base, ptr @__ksymtab_regmap_write, ptr @__ksymtab_regmap_write_async, ptr @__regmap_init._entry, ptr @__regmap_init._entry.18, ptr @__regmap_init._entry.21, ptr @__regmap_init._entry.24, ptr @__regmap_init._entry.27, ptr @__regmap_init._entry.30, ptr @__regmap_init._entry.33, ptr @__regmap_init._entry_ptr, ptr @__regmap_init._entry_ptr.20, ptr @__regmap_init._entry_ptr.23, ptr @__regmap_init._entry_ptr.26, ptr @__regmap_init._entry_ptr.29, ptr @__regmap_init._entry_ptr.32, ptr @__regmap_init._entry_ptr.35, ptr @__tracepoint_ptr_regcache_drop_region, ptr @__tracepoint_ptr_regcache_sync, ptr @__tracepoint_ptr_regmap_async_complete_done, ptr @__tracepoint_ptr_regmap_async_complete_start, ptr @__tracepoint_ptr_regmap_async_io_complete, ptr @__tracepoint_ptr_regmap_async_write_start, ptr @__tracepoint_ptr_regmap_cache_bypass, ptr @__tracepoint_ptr_regmap_cache_only, ptr @__tracepoint_ptr_regmap_hw_read_done, ptr @__tracepoint_ptr_regmap_hw_read_start, ptr @__tracepoint_ptr_regmap_hw_write_done, ptr @__tracepoint_ptr_regmap_hw_write_start, ptr @__tracepoint_ptr_regmap_reg_read, ptr @__tracepoint_ptr_regmap_reg_read_cache, ptr @__tracepoint_ptr_regmap_reg_write, ptr @__tracepoint_regcache_drop_region, ptr @__tracepoint_regcache_sync, ptr @__tracepoint_regmap_async_complete_done, ptr @__tracepoint_regmap_async_complete_start, ptr @__tracepoint_regmap_async_io_complete, ptr @__tracepoint_regmap_async_write_start, ptr @__tracepoint_regmap_cache_bypass, ptr @__tracepoint_regmap_cache_only, ptr @__tracepoint_regmap_hw_read_done, ptr @__tracepoint_regmap_hw_read_start, ptr @__tracepoint_regmap_hw_write_done, ptr @__tracepoint_regmap_hw_write_start, ptr @__tracepoint_regmap_reg_read, ptr @__tracepoint_regmap_reg_read_cache, ptr @__tracepoint_regmap_reg_write, ptr @_regmap_multi_reg_write._entry, ptr @_regmap_multi_reg_write._entry_ptr, ptr @_regmap_raw_write_impl._entry, ptr @_regmap_raw_write_impl._entry.67, ptr @_regmap_raw_write_impl._entry_ptr, ptr @_regmap_raw_write_impl._entry_ptr.69, ptr @_regmap_read._entry, ptr @_regmap_read._entry_ptr, ptr @_regmap_write._entry, ptr @_regmap_write._entry_ptr, ptr @event_class_regcache_drop_region, ptr @event_class_regcache_sync, ptr @event_class_regmap_async, ptr @event_class_regmap_block, ptr @event_class_regmap_bool, ptr @event_class_regmap_reg, ptr @event_regcache_drop_region, ptr @event_regcache_sync, ptr @event_regmap_async_complete_done, ptr @event_regmap_async_complete_start, ptr @event_regmap_async_io_complete, ptr @event_regmap_async_write_start, ptr @event_regmap_cache_bypass, ptr @event_regmap_cache_only, ptr @event_regmap_hw_read_done, ptr @event_regmap_hw_read_start, ptr @event_regmap_hw_write_done, ptr @event_regmap_hw_write_start, ptr @event_regmap_reg_read, ptr @event_regmap_reg_read_cache, ptr @event_regmap_reg_write, ptr @str__regmap__trace_system_name, ptr @trace_event_fields_regmap_reg, ptr @trace_event_type_funcs_regmap_reg, ptr @print_fmt_regmap_reg, ptr @trace_event_fields_regmap_block, ptr @trace_event_type_funcs_regmap_block, ptr @print_fmt_regmap_block, ptr @trace_event_fields_regcache_sync, ptr @trace_event_type_funcs_regcache_sync, ptr @print_fmt_regcache_sync, ptr @trace_event_fields_regmap_bool, ptr @trace_event_type_funcs_regmap_bool, ptr @print_fmt_regmap_bool, ptr @trace_event_fields_regmap_async, ptr @trace_event_type_funcs_regmap_async, ptr @print_fmt_regmap_async, ptr @trace_event_fields_regcache_drop_region, ptr @trace_event_type_funcs_regcache_drop_region, ptr @print_fmt_regcache_drop_region, ptr @.str, ptr @.str.1, ptr @.str.2, ptr @.str.3, ptr @.str.4, ptr @.str.6, ptr @.str.8, ptr @.str.10, ptr @.str.12, ptr @.str.13, ptr @.str.14, ptr @.str.15, ptr @.str.16, ptr @.str.17, ptr @.str.19, ptr @.str.22, ptr @.str.25, ptr @.str.28, ptr @.str.31, ptr @.str.34, ptr @.str.36, ptr @.str.37, ptr @.str.38, ptr @.str.39, ptr @.str.40, ptr @.str.41, ptr @.str.42, ptr @.str.43, ptr @.str.44, ptr @.str.45, ptr @.str.46, ptr @.str.47, ptr @.str.48, ptr @.str.49, ptr @.str.50, ptr @.str.51, ptr @.str.52, ptr @.str.53, ptr @.str.54, ptr @.str.55, ptr @.str.56, ptr @.str.57, ptr @.str.58, ptr @.str.59, ptr @.str.60, ptr @.str.61, ptr @.str.62, ptr @.str.63, ptr @.str.64, ptr @.str.65, ptr @.str.66, ptr @.str.68, ptr @.str.70, ptr @.str.71, ptr @.str.72], section "llvm.metadata"
@0 = internal global [94 x { i32, i32, i32, i32, i32, i32, i32, i32 }] [{ i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @str__regmap__trace_system_name to i32), i32 7, i32 32, i32 ptrtoint (ptr @___asan_gen_.84 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.86 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @trace_event_fields_regmap_reg to i32), i32 96, i32 128, i32 ptrtoint (ptr @___asan_gen_.87 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.284 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @trace_event_type_funcs_regmap_reg to i32), i32 16, i32 32, i32 ptrtoint (ptr @___asan_gen_.90 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.284 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @print_fmt_regmap_reg to i32), i32 84, i32 128, i32 ptrtoint (ptr @___asan_gen_.93 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.284 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @event_regmap_reg_write to i32), i32 76, i32 128, i32 ptrtoint (ptr @___asan_gen_.96 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.98 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @event_regmap_reg_read to i32), i32 76, i32 128, i32 ptrtoint (ptr @___asan_gen_.99 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.101 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @event_regmap_reg_read_cache to i32), i32 76, i32 128, i32 ptrtoint (ptr @___asan_gen_.102 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.104 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @trace_event_fields_regmap_block to i32), i32 96, i32 128, i32 ptrtoint (ptr @___asan_gen_.105 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.293 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @trace_event_type_funcs_regmap_block to i32), i32 16, i32 32, i32 ptrtoint (ptr @___asan_gen_.108 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.293 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @print_fmt_regmap_block to i32), i32 79, i32 128, i32 ptrtoint (ptr @___asan_gen_.111 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.293 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @event_regmap_hw_read_start to i32), i32 76, i32 128, i32 ptrtoint (ptr @___asan_gen_.114 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.116 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @event_regmap_hw_read_done to i32), i32 76, i32 128, i32 ptrtoint (ptr @___asan_gen_.117 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.119 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @event_regmap_hw_write_start to i32), i32 76, i32 128, i32 ptrtoint (ptr @___asan_gen_.120 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.326 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @event_regmap_hw_write_done to i32), i32 76, i32 128, i32 ptrtoint (ptr @___asan_gen_.123 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.125 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @trace_event_fields_regcache_sync to i32), i32 96, i32 128, i32 ptrtoint (ptr @___asan_gen_.126 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.302 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @trace_event_type_funcs_regcache_sync to i32), i32 16, i32 32, i32 ptrtoint (ptr @___asan_gen_.129 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.302 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @print_fmt_regcache_sync to i32), i32 76, i32 128, i32 ptrtoint (ptr @___asan_gen_.132 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.302 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @event_regcache_sync to i32), i32 76, i32 128, i32 ptrtoint (ptr @___asan_gen_.135 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.302 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @trace_event_fields_regmap_bool to i32), i32 72, i32 128, i32 ptrtoint (ptr @___asan_gen_.138 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.308 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @trace_event_type_funcs_regmap_bool to i32), i32 16, i32 32, i32 ptrtoint (ptr @___asan_gen_.141 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.308 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @print_fmt_regmap_bool to i32), i32 46, i32 96, i32 ptrtoint (ptr @___asan_gen_.144 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.308 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @event_regmap_cache_only to i32), i32 76, i32 128, i32 ptrtoint (ptr @___asan_gen_.147 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.149 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @event_regmap_cache_bypass to i32), i32 76, i32 128, i32 ptrtoint (ptr @___asan_gen_.150 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.152 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @trace_event_fields_regmap_async to i32), i32 48, i32 96, i32 ptrtoint (ptr @___asan_gen_.153 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.311 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @event_regmap_async_write_start to i32), i32 76, i32 128, i32 ptrtoint (ptr @___asan_gen_.156 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.158 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @trace_event_type_funcs_regmap_async to i32), i32 16, i32 32, i32 ptrtoint (ptr @___asan_gen_.159 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.311 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @print_fmt_regmap_async to i32), i32 22, i32 64, i32 ptrtoint (ptr @___asan_gen_.162 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.311 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @event_regmap_async_io_complete to i32), i32 76, i32 128, i32 ptrtoint (ptr @___asan_gen_.165 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.167 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @event_regmap_async_complete_start to i32), i32 76, i32 128, i32 ptrtoint (ptr @___asan_gen_.168 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.170 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @event_regmap_async_complete_done to i32), i32 76, i32 128, i32 ptrtoint (ptr @___asan_gen_.171 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.173 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @trace_event_fields_regcache_drop_region to i32), i32 96, i32 128, i32 ptrtoint (ptr @___asan_gen_.174 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.320 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @trace_event_type_funcs_regcache_drop_region to i32), i32 16, i32 32, i32 ptrtoint (ptr @___asan_gen_.177 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.320 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @print_fmt_regcache_drop_region to i32), i32 76, i32 128, i32 ptrtoint (ptr @___asan_gen_.180 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.320 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @event_regcache_drop_region to i32), i32 76, i32 128, i32 ptrtoint (ptr @___asan_gen_.183 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.320 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str to i32), i32 23, i32 64, i32 ptrtoint (ptr @___asan_gen_.363 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.188 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.1 to i32), i32 11, i32 32, i32 ptrtoint (ptr @___asan_gen_.363 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.191 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.2 to i32), i32 14, i32 32, i32 ptrtoint (ptr @___asan_gen_.363 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.194 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.3 to i32), i32 14, i32 32, i32 ptrtoint (ptr @___asan_gen_.363 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.197 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.4 to i32), i32 19, i32 64, i32 ptrtoint (ptr @___asan_gen_.363 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.200 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.6 to i32), i32 15, i32 32, i32 ptrtoint (ptr @___asan_gen_.363 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.203 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.8 to i32), i32 12, i32 32, i32 ptrtoint (ptr @___asan_gen_.363 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.206 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.10 to i32), i32 17, i32 64, i32 ptrtoint (ptr @___asan_gen_.363 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.209 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.12 to i32), i32 18, i32 64, i32 ptrtoint (ptr @___asan_gen_.363 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.212 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.13 to i32), i32 27, i32 64, i32 ptrtoint (ptr @___asan_gen_.363 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.227 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.14 to i32), i32 14, i32 32, i32 ptrtoint (ptr @___asan_gen_.363 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.227 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.15 to i32), i32 29, i32 64, i32 ptrtoint (ptr @___asan_gen_.363 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.227 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.16 to i32), i32 3, i32 32, i32 ptrtoint (ptr @___asan_gen_.363 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.227 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.17 to i32), i32 8, i32 32, i32 ptrtoint (ptr @___asan_gen_.363 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.227 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.19 to i32), i32 27, i32 64, i32 ptrtoint (ptr @___asan_gen_.363 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.230 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.22 to i32), i32 39, i32 96, i32 ptrtoint (ptr @___asan_gen_.363 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.233 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.25 to i32), i32 32, i32 64, i32 ptrtoint (ptr @___asan_gen_.363 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.236 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.28 to i32), i32 37, i32 96, i32 ptrtoint (ptr @___asan_gen_.363 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.239 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.31 to i32), i32 35, i32 96, i32 ptrtoint (ptr @___asan_gen_.363 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.242 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.34 to i32), i32 24, i32 64, i32 ptrtoint (ptr @___asan_gen_.363 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.245 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.36 to i32), i32 20, i32 64, i32 ptrtoint (ptr @___asan_gen_.363 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.248 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @_regmap_write._entry to i32), i32 24, i32 64, i32 ptrtoint (ptr @___asan_gen_.357 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.260 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.37 to i32), i32 10, i32 32, i32 ptrtoint (ptr @___asan_gen_.363 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.260 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.38 to i32), i32 14, i32 32, i32 ptrtoint (ptr @___asan_gen_.363 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.260 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.39 to i32), i32 3, i32 32, i32 ptrtoint (ptr @___asan_gen_.363 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.260 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.40 to i32), i32 31, i32 64, i32 ptrtoint (ptr @___asan_gen_.363 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.263 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.41 to i32), i32 7, i32 32, i32 ptrtoint (ptr @___asan_gen_.363 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.284 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.42 to i32), i32 18, i32 64, i32 ptrtoint (ptr @___asan_gen_.363 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.284 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.43 to i32), i32 5, i32 32, i32 ptrtoint (ptr @___asan_gen_.363 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.284 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.44 to i32), i32 13, i32 32, i32 ptrtoint (ptr @___asan_gen_.363 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.284 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.45 to i32), i32 4, i32 32, i32 ptrtoint (ptr @___asan_gen_.363 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.284 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.46 to i32), i32 4, i32 32, i32 ptrtoint (ptr @___asan_gen_.363 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.284 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.47 to i32), i32 18, i32 64, i32 ptrtoint (ptr @___asan_gen_.363 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.284 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.48 to i32), i32 4, i32 32, i32 ptrtoint (ptr @___asan_gen_.363 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.293 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.49 to i32), i32 6, i32 32, i32 ptrtoint (ptr @___asan_gen_.363 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.293 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.50 to i32), i32 20, i32 64, i32 ptrtoint (ptr @___asan_gen_.363 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.293 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.51 to i32), i32 7, i32 32, i32 ptrtoint (ptr @___asan_gen_.363 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.302 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.52 to i32), i32 5, i32 32, i32 ptrtoint (ptr @___asan_gen_.363 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.302 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.53 to i32), i32 22, i32 64, i32 ptrtoint (ptr @___asan_gen_.363 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.302 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.54 to i32), i32 5, i32 32, i32 ptrtoint (ptr @___asan_gen_.363 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.308 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.55 to i32), i32 12, i32 32, i32 ptrtoint (ptr @___asan_gen_.363 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.308 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.56 to i32), i32 4, i32 32, i32 ptrtoint (ptr @___asan_gen_.363 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.311 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.57 to i32), i32 5, i32 32, i32 ptrtoint (ptr @___asan_gen_.363 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.320 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.58 to i32), i32 3, i32 32, i32 ptrtoint (ptr @___asan_gen_.363 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.320 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.59 to i32), i32 10, i32 32, i32 ptrtoint (ptr @___asan_gen_.363 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.320 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.60 to i32), i32 28, i32 64, i32 ptrtoint (ptr @___asan_gen_.363 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.326 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.61 to i32), i32 41, i32 96, i32 ptrtoint (ptr @___asan_gen_.363 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.326 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.62 to i32), i32 24, i32 64, i32 ptrtoint (ptr @___asan_gen_.363 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.329 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @_regmap_raw_write_impl._entry to i32), i32 24, i32 64, i32 ptrtoint (ptr @___asan_gen_.357 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.338 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.63 to i32), i32 42, i32 96, i32 ptrtoint (ptr @___asan_gen_.363 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.338 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.64 to i32), i32 23, i32 64, i32 ptrtoint (ptr @___asan_gen_.363 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.338 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.65 to i32), i32 7, i32 32, i32 ptrtoint (ptr @___asan_gen_.363 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.344 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.66 to i32), i32 23, i32 64, i32 ptrtoint (ptr @___asan_gen_.363 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.344 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @_regmap_raw_write_impl._entry.67 to i32), i32 24, i32 64, i32 ptrtoint (ptr @___asan_gen_.357 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.350 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.68 to i32), i32 30, i32 64, i32 ptrtoint (ptr @___asan_gen_.363 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.350 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @_regmap_multi_reg_write._entry to i32), i32 24, i32 64, i32 ptrtoint (ptr @___asan_gen_.357 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.356 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.70 to i32), i32 24, i32 64, i32 ptrtoint (ptr @___asan_gen_.363 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.356 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @_regmap_read._entry to i32), i32 24, i32 64, i32 ptrtoint (ptr @___asan_gen_.357 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.365 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.71 to i32), i32 10, i32 32, i32 ptrtoint (ptr @___asan_gen_.363 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.365 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.72 to i32), i32 13, i32 32, i32 ptrtoint (ptr @___asan_gen_.363 to i32), i32 ptrtoint (ptr @___asan_gen_.364 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.365 to i32), i32 -1 }]
@llvm.used = appending global [2 x ptr] [ptr @asan.module_ctor, ptr @asan.module_dtor], section "llvm.metadata"
@llvm.global_ctors = appending global [1 x { i32, ptr, ptr }] [{ i32, ptr, ptr } { i32 1, ptr @asan.module_ctor, ptr null }]
@llvm.global_dtors = appending global [1 x { i32, ptr, ptr }] [{ i32, ptr, ptr } { i32 1, ptr @asan.module_dtor, ptr null }]

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @__traceiter_regmap_reg_write(ptr nocapture readnone %__data, ptr noundef %map, i32 noundef %reg, i32 noundef %val) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load volatile ptr, ptr getelementptr inbounds ({ ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr }, ptr @__tracepoint_regmap_reg_write, i32 0, i32 7), align 4
  %tobool.not = icmp eq ptr %0, null
  br i1 %tobool.not, label %entry.if.end_crit_edge, label %entry.do.body2_crit_edge

entry.do.body2_crit_edge:                         ; preds = %entry
  br label %do.body2

entry.if.end_crit_edge:                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

do.body2:                                         ; preds = %do.body2.do.body2_crit_edge, %entry.do.body2_crit_edge
  %it_func_ptr.0 = phi ptr [ %incdec.ptr, %do.body2.do.body2_crit_edge ], [ %0, %entry.do.body2_crit_edge ]
  %1 = ptrtoint ptr %it_func_ptr.0 to i32
  call void @__asan_load4_noabort(i32 %1)
  %2 = load volatile ptr, ptr %it_func_ptr.0, align 4
  %data = getelementptr inbounds %struct.tracepoint_func, ptr %it_func_ptr.0, i32 0, i32 1
  %3 = ptrtoint ptr %data to i32
  call void @__asan_load4_noabort(i32 %3)
  %4 = load ptr, ptr %data, align 4
  tail call void %2(ptr noundef %4, ptr noundef %map, i32 noundef %reg, i32 noundef %val) #24
  %incdec.ptr = getelementptr %struct.tracepoint_func, ptr %it_func_ptr.0, i32 1
  %5 = ptrtoint ptr %incdec.ptr to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load ptr, ptr %incdec.ptr, align 4
  %tobool9.not = icmp eq ptr %6, null
  br i1 %tobool9.not, label %do.body2.if.end_crit_edge, label %do.body2.do.body2_crit_edge

do.body2.do.body2_crit_edge:                      ; preds = %do.body2
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.body2

do.body2.if.end_crit_edge:                        ; preds = %do.body2
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

if.end:                                           ; preds = %do.body2.if.end_crit_edge, %entry.if.end_crit_edge
  ret i32 0
}

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @__traceiter_regmap_reg_read(ptr nocapture readnone %__data, ptr noundef %map, i32 noundef %reg, i32 noundef %val) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load volatile ptr, ptr getelementptr inbounds ({ ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr }, ptr @__tracepoint_regmap_reg_read, i32 0, i32 7), align 4
  %tobool.not = icmp eq ptr %0, null
  br i1 %tobool.not, label %entry.if.end_crit_edge, label %entry.do.body2_crit_edge

entry.do.body2_crit_edge:                         ; preds = %entry
  br label %do.body2

entry.if.end_crit_edge:                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

do.body2:                                         ; preds = %do.body2.do.body2_crit_edge, %entry.do.body2_crit_edge
  %it_func_ptr.0 = phi ptr [ %incdec.ptr, %do.body2.do.body2_crit_edge ], [ %0, %entry.do.body2_crit_edge ]
  %1 = ptrtoint ptr %it_func_ptr.0 to i32
  call void @__asan_load4_noabort(i32 %1)
  %2 = load volatile ptr, ptr %it_func_ptr.0, align 4
  %data = getelementptr inbounds %struct.tracepoint_func, ptr %it_func_ptr.0, i32 0, i32 1
  %3 = ptrtoint ptr %data to i32
  call void @__asan_load4_noabort(i32 %3)
  %4 = load ptr, ptr %data, align 4
  tail call void %2(ptr noundef %4, ptr noundef %map, i32 noundef %reg, i32 noundef %val) #24
  %incdec.ptr = getelementptr %struct.tracepoint_func, ptr %it_func_ptr.0, i32 1
  %5 = ptrtoint ptr %incdec.ptr to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load ptr, ptr %incdec.ptr, align 4
  %tobool9.not = icmp eq ptr %6, null
  br i1 %tobool9.not, label %do.body2.if.end_crit_edge, label %do.body2.do.body2_crit_edge

do.body2.do.body2_crit_edge:                      ; preds = %do.body2
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.body2

do.body2.if.end_crit_edge:                        ; preds = %do.body2
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

if.end:                                           ; preds = %do.body2.if.end_crit_edge, %entry.if.end_crit_edge
  ret i32 0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @__traceiter_regmap_reg_read_cache(ptr nocapture readnone %__data, ptr noundef %map, i32 noundef %reg, i32 noundef %val) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load volatile ptr, ptr getelementptr inbounds ({ ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr }, ptr @__tracepoint_regmap_reg_read_cache, i32 0, i32 7), align 4
  %tobool.not = icmp eq ptr %0, null
  br i1 %tobool.not, label %entry.if.end_crit_edge, label %entry.do.body2_crit_edge

entry.do.body2_crit_edge:                         ; preds = %entry
  br label %do.body2

entry.if.end_crit_edge:                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

do.body2:                                         ; preds = %do.body2.do.body2_crit_edge, %entry.do.body2_crit_edge
  %it_func_ptr.0 = phi ptr [ %incdec.ptr, %do.body2.do.body2_crit_edge ], [ %0, %entry.do.body2_crit_edge ]
  %1 = ptrtoint ptr %it_func_ptr.0 to i32
  call void @__asan_load4_noabort(i32 %1)
  %2 = load volatile ptr, ptr %it_func_ptr.0, align 4
  %data = getelementptr inbounds %struct.tracepoint_func, ptr %it_func_ptr.0, i32 0, i32 1
  %3 = ptrtoint ptr %data to i32
  call void @__asan_load4_noabort(i32 %3)
  %4 = load ptr, ptr %data, align 4
  tail call void %2(ptr noundef %4, ptr noundef %map, i32 noundef %reg, i32 noundef %val) #24
  %incdec.ptr = getelementptr %struct.tracepoint_func, ptr %it_func_ptr.0, i32 1
  %5 = ptrtoint ptr %incdec.ptr to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load ptr, ptr %incdec.ptr, align 4
  %tobool9.not = icmp eq ptr %6, null
  br i1 %tobool9.not, label %do.body2.if.end_crit_edge, label %do.body2.do.body2_crit_edge

do.body2.do.body2_crit_edge:                      ; preds = %do.body2
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.body2

do.body2.if.end_crit_edge:                        ; preds = %do.body2
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

if.end:                                           ; preds = %do.body2.if.end_crit_edge, %entry.if.end_crit_edge
  ret i32 0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @__traceiter_regmap_hw_read_start(ptr nocapture readnone %__data, ptr noundef %map, i32 noundef %reg, i32 noundef %count) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load volatile ptr, ptr getelementptr inbounds ({ ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr }, ptr @__tracepoint_regmap_hw_read_start, i32 0, i32 7), align 4
  %tobool.not = icmp eq ptr %0, null
  br i1 %tobool.not, label %entry.if.end_crit_edge, label %entry.do.body2_crit_edge

entry.do.body2_crit_edge:                         ; preds = %entry
  br label %do.body2

entry.if.end_crit_edge:                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

do.body2:                                         ; preds = %do.body2.do.body2_crit_edge, %entry.do.body2_crit_edge
  %it_func_ptr.0 = phi ptr [ %incdec.ptr, %do.body2.do.body2_crit_edge ], [ %0, %entry.do.body2_crit_edge ]
  %1 = ptrtoint ptr %it_func_ptr.0 to i32
  call void @__asan_load4_noabort(i32 %1)
  %2 = load volatile ptr, ptr %it_func_ptr.0, align 4
  %data = getelementptr inbounds %struct.tracepoint_func, ptr %it_func_ptr.0, i32 0, i32 1
  %3 = ptrtoint ptr %data to i32
  call void @__asan_load4_noabort(i32 %3)
  %4 = load ptr, ptr %data, align 4
  tail call void %2(ptr noundef %4, ptr noundef %map, i32 noundef %reg, i32 noundef %count) #24
  %incdec.ptr = getelementptr %struct.tracepoint_func, ptr %it_func_ptr.0, i32 1
  %5 = ptrtoint ptr %incdec.ptr to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load ptr, ptr %incdec.ptr, align 4
  %tobool9.not = icmp eq ptr %6, null
  br i1 %tobool9.not, label %do.body2.if.end_crit_edge, label %do.body2.do.body2_crit_edge

do.body2.do.body2_crit_edge:                      ; preds = %do.body2
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.body2

do.body2.if.end_crit_edge:                        ; preds = %do.body2
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

if.end:                                           ; preds = %do.body2.if.end_crit_edge, %entry.if.end_crit_edge
  ret i32 0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @__traceiter_regmap_hw_read_done(ptr nocapture readnone %__data, ptr noundef %map, i32 noundef %reg, i32 noundef %count) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load volatile ptr, ptr getelementptr inbounds ({ ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr }, ptr @__tracepoint_regmap_hw_read_done, i32 0, i32 7), align 4
  %tobool.not = icmp eq ptr %0, null
  br i1 %tobool.not, label %entry.if.end_crit_edge, label %entry.do.body2_crit_edge

entry.do.body2_crit_edge:                         ; preds = %entry
  br label %do.body2

entry.if.end_crit_edge:                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

do.body2:                                         ; preds = %do.body2.do.body2_crit_edge, %entry.do.body2_crit_edge
  %it_func_ptr.0 = phi ptr [ %incdec.ptr, %do.body2.do.body2_crit_edge ], [ %0, %entry.do.body2_crit_edge ]
  %1 = ptrtoint ptr %it_func_ptr.0 to i32
  call void @__asan_load4_noabort(i32 %1)
  %2 = load volatile ptr, ptr %it_func_ptr.0, align 4
  %data = getelementptr inbounds %struct.tracepoint_func, ptr %it_func_ptr.0, i32 0, i32 1
  %3 = ptrtoint ptr %data to i32
  call void @__asan_load4_noabort(i32 %3)
  %4 = load ptr, ptr %data, align 4
  tail call void %2(ptr noundef %4, ptr noundef %map, i32 noundef %reg, i32 noundef %count) #24
  %incdec.ptr = getelementptr %struct.tracepoint_func, ptr %it_func_ptr.0, i32 1
  %5 = ptrtoint ptr %incdec.ptr to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load ptr, ptr %incdec.ptr, align 4
  %tobool9.not = icmp eq ptr %6, null
  br i1 %tobool9.not, label %do.body2.if.end_crit_edge, label %do.body2.do.body2_crit_edge

do.body2.do.body2_crit_edge:                      ; preds = %do.body2
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.body2

do.body2.if.end_crit_edge:                        ; preds = %do.body2
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

if.end:                                           ; preds = %do.body2.if.end_crit_edge, %entry.if.end_crit_edge
  ret i32 0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @__traceiter_regmap_hw_write_start(ptr nocapture readnone %__data, ptr noundef %map, i32 noundef %reg, i32 noundef %count) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load volatile ptr, ptr getelementptr inbounds ({ ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr }, ptr @__tracepoint_regmap_hw_write_start, i32 0, i32 7), align 4
  %tobool.not = icmp eq ptr %0, null
  br i1 %tobool.not, label %entry.if.end_crit_edge, label %entry.do.body2_crit_edge

entry.do.body2_crit_edge:                         ; preds = %entry
  br label %do.body2

entry.if.end_crit_edge:                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

do.body2:                                         ; preds = %do.body2.do.body2_crit_edge, %entry.do.body2_crit_edge
  %it_func_ptr.0 = phi ptr [ %incdec.ptr, %do.body2.do.body2_crit_edge ], [ %0, %entry.do.body2_crit_edge ]
  %1 = ptrtoint ptr %it_func_ptr.0 to i32
  call void @__asan_load4_noabort(i32 %1)
  %2 = load volatile ptr, ptr %it_func_ptr.0, align 4
  %data = getelementptr inbounds %struct.tracepoint_func, ptr %it_func_ptr.0, i32 0, i32 1
  %3 = ptrtoint ptr %data to i32
  call void @__asan_load4_noabort(i32 %3)
  %4 = load ptr, ptr %data, align 4
  tail call void %2(ptr noundef %4, ptr noundef %map, i32 noundef %reg, i32 noundef %count) #24
  %incdec.ptr = getelementptr %struct.tracepoint_func, ptr %it_func_ptr.0, i32 1
  %5 = ptrtoint ptr %incdec.ptr to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load ptr, ptr %incdec.ptr, align 4
  %tobool9.not = icmp eq ptr %6, null
  br i1 %tobool9.not, label %do.body2.if.end_crit_edge, label %do.body2.do.body2_crit_edge

do.body2.do.body2_crit_edge:                      ; preds = %do.body2
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.body2

do.body2.if.end_crit_edge:                        ; preds = %do.body2
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

if.end:                                           ; preds = %do.body2.if.end_crit_edge, %entry.if.end_crit_edge
  ret i32 0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @__traceiter_regmap_hw_write_done(ptr nocapture readnone %__data, ptr noundef %map, i32 noundef %reg, i32 noundef %count) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load volatile ptr, ptr getelementptr inbounds ({ ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr }, ptr @__tracepoint_regmap_hw_write_done, i32 0, i32 7), align 4
  %tobool.not = icmp eq ptr %0, null
  br i1 %tobool.not, label %entry.if.end_crit_edge, label %entry.do.body2_crit_edge

entry.do.body2_crit_edge:                         ; preds = %entry
  br label %do.body2

entry.if.end_crit_edge:                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

do.body2:                                         ; preds = %do.body2.do.body2_crit_edge, %entry.do.body2_crit_edge
  %it_func_ptr.0 = phi ptr [ %incdec.ptr, %do.body2.do.body2_crit_edge ], [ %0, %entry.do.body2_crit_edge ]
  %1 = ptrtoint ptr %it_func_ptr.0 to i32
  call void @__asan_load4_noabort(i32 %1)
  %2 = load volatile ptr, ptr %it_func_ptr.0, align 4
  %data = getelementptr inbounds %struct.tracepoint_func, ptr %it_func_ptr.0, i32 0, i32 1
  %3 = ptrtoint ptr %data to i32
  call void @__asan_load4_noabort(i32 %3)
  %4 = load ptr, ptr %data, align 4
  tail call void %2(ptr noundef %4, ptr noundef %map, i32 noundef %reg, i32 noundef %count) #24
  %incdec.ptr = getelementptr %struct.tracepoint_func, ptr %it_func_ptr.0, i32 1
  %5 = ptrtoint ptr %incdec.ptr to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load ptr, ptr %incdec.ptr, align 4
  %tobool9.not = icmp eq ptr %6, null
  br i1 %tobool9.not, label %do.body2.if.end_crit_edge, label %do.body2.do.body2_crit_edge

do.body2.do.body2_crit_edge:                      ; preds = %do.body2
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.body2

do.body2.if.end_crit_edge:                        ; preds = %do.body2
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

if.end:                                           ; preds = %do.body2.if.end_crit_edge, %entry.if.end_crit_edge
  ret i32 0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @__traceiter_regcache_sync(ptr nocapture readnone %__data, ptr noundef %map, ptr noundef %type, ptr noundef %status) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load volatile ptr, ptr getelementptr inbounds ({ ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr }, ptr @__tracepoint_regcache_sync, i32 0, i32 7), align 4
  %tobool.not = icmp eq ptr %0, null
  br i1 %tobool.not, label %entry.if.end_crit_edge, label %entry.do.body2_crit_edge

entry.do.body2_crit_edge:                         ; preds = %entry
  br label %do.body2

entry.if.end_crit_edge:                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

do.body2:                                         ; preds = %do.body2.do.body2_crit_edge, %entry.do.body2_crit_edge
  %it_func_ptr.0 = phi ptr [ %incdec.ptr, %do.body2.do.body2_crit_edge ], [ %0, %entry.do.body2_crit_edge ]
  %1 = ptrtoint ptr %it_func_ptr.0 to i32
  call void @__asan_load4_noabort(i32 %1)
  %2 = load volatile ptr, ptr %it_func_ptr.0, align 4
  %data = getelementptr inbounds %struct.tracepoint_func, ptr %it_func_ptr.0, i32 0, i32 1
  %3 = ptrtoint ptr %data to i32
  call void @__asan_load4_noabort(i32 %3)
  %4 = load ptr, ptr %data, align 4
  tail call void %2(ptr noundef %4, ptr noundef %map, ptr noundef %type, ptr noundef %status) #24
  %incdec.ptr = getelementptr %struct.tracepoint_func, ptr %it_func_ptr.0, i32 1
  %5 = ptrtoint ptr %incdec.ptr to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load ptr, ptr %incdec.ptr, align 4
  %tobool9.not = icmp eq ptr %6, null
  br i1 %tobool9.not, label %do.body2.if.end_crit_edge, label %do.body2.do.body2_crit_edge

do.body2.do.body2_crit_edge:                      ; preds = %do.body2
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.body2

do.body2.if.end_crit_edge:                        ; preds = %do.body2
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

if.end:                                           ; preds = %do.body2.if.end_crit_edge, %entry.if.end_crit_edge
  ret i32 0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @__traceiter_regmap_cache_only(ptr nocapture readnone %__data, ptr noundef %map, i1 noundef zeroext %flag) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load volatile ptr, ptr getelementptr inbounds ({ ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr }, ptr @__tracepoint_regmap_cache_only, i32 0, i32 7), align 4
  %tobool.not = icmp eq ptr %0, null
  br i1 %tobool.not, label %entry.if.end_crit_edge, label %entry.do.body2_crit_edge

entry.do.body2_crit_edge:                         ; preds = %entry
  br label %do.body2

entry.if.end_crit_edge:                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

do.body2:                                         ; preds = %do.body2.do.body2_crit_edge, %entry.do.body2_crit_edge
  %it_func_ptr.0 = phi ptr [ %incdec.ptr, %do.body2.do.body2_crit_edge ], [ %0, %entry.do.body2_crit_edge ]
  %1 = ptrtoint ptr %it_func_ptr.0 to i32
  call void @__asan_load4_noabort(i32 %1)
  %2 = load volatile ptr, ptr %it_func_ptr.0, align 4
  %data = getelementptr inbounds %struct.tracepoint_func, ptr %it_func_ptr.0, i32 0, i32 1
  %3 = ptrtoint ptr %data to i32
  call void @__asan_load4_noabort(i32 %3)
  %4 = load ptr, ptr %data, align 4
  tail call void %2(ptr noundef %4, ptr noundef %map, i1 noundef zeroext %flag) #24
  %incdec.ptr = getelementptr %struct.tracepoint_func, ptr %it_func_ptr.0, i32 1
  %5 = ptrtoint ptr %incdec.ptr to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load ptr, ptr %incdec.ptr, align 4
  %tobool10.not = icmp eq ptr %6, null
  br i1 %tobool10.not, label %do.body2.if.end_crit_edge, label %do.body2.do.body2_crit_edge

do.body2.do.body2_crit_edge:                      ; preds = %do.body2
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.body2

do.body2.if.end_crit_edge:                        ; preds = %do.body2
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

if.end:                                           ; preds = %do.body2.if.end_crit_edge, %entry.if.end_crit_edge
  ret i32 0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @__traceiter_regmap_cache_bypass(ptr nocapture readnone %__data, ptr noundef %map, i1 noundef zeroext %flag) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load volatile ptr, ptr getelementptr inbounds ({ ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr }, ptr @__tracepoint_regmap_cache_bypass, i32 0, i32 7), align 4
  %tobool.not = icmp eq ptr %0, null
  br i1 %tobool.not, label %entry.if.end_crit_edge, label %entry.do.body2_crit_edge

entry.do.body2_crit_edge:                         ; preds = %entry
  br label %do.body2

entry.if.end_crit_edge:                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

do.body2:                                         ; preds = %do.body2.do.body2_crit_edge, %entry.do.body2_crit_edge
  %it_func_ptr.0 = phi ptr [ %incdec.ptr, %do.body2.do.body2_crit_edge ], [ %0, %entry.do.body2_crit_edge ]
  %1 = ptrtoint ptr %it_func_ptr.0 to i32
  call void @__asan_load4_noabort(i32 %1)
  %2 = load volatile ptr, ptr %it_func_ptr.0, align 4
  %data = getelementptr inbounds %struct.tracepoint_func, ptr %it_func_ptr.0, i32 0, i32 1
  %3 = ptrtoint ptr %data to i32
  call void @__asan_load4_noabort(i32 %3)
  %4 = load ptr, ptr %data, align 4
  tail call void %2(ptr noundef %4, ptr noundef %map, i1 noundef zeroext %flag) #24
  %incdec.ptr = getelementptr %struct.tracepoint_func, ptr %it_func_ptr.0, i32 1
  %5 = ptrtoint ptr %incdec.ptr to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load ptr, ptr %incdec.ptr, align 4
  %tobool10.not = icmp eq ptr %6, null
  br i1 %tobool10.not, label %do.body2.if.end_crit_edge, label %do.body2.do.body2_crit_edge

do.body2.do.body2_crit_edge:                      ; preds = %do.body2
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.body2

do.body2.if.end_crit_edge:                        ; preds = %do.body2
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

if.end:                                           ; preds = %do.body2.if.end_crit_edge, %entry.if.end_crit_edge
  ret i32 0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @__traceiter_regmap_async_write_start(ptr nocapture readnone %__data, ptr noundef %map, i32 noundef %reg, i32 noundef %count) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load volatile ptr, ptr getelementptr inbounds ({ ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr }, ptr @__tracepoint_regmap_async_write_start, i32 0, i32 7), align 4
  %tobool.not = icmp eq ptr %0, null
  br i1 %tobool.not, label %entry.if.end_crit_edge, label %entry.do.body2_crit_edge

entry.do.body2_crit_edge:                         ; preds = %entry
  br label %do.body2

entry.if.end_crit_edge:                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

do.body2:                                         ; preds = %do.body2.do.body2_crit_edge, %entry.do.body2_crit_edge
  %it_func_ptr.0 = phi ptr [ %incdec.ptr, %do.body2.do.body2_crit_edge ], [ %0, %entry.do.body2_crit_edge ]
  %1 = ptrtoint ptr %it_func_ptr.0 to i32
  call void @__asan_load4_noabort(i32 %1)
  %2 = load volatile ptr, ptr %it_func_ptr.0, align 4
  %data = getelementptr inbounds %struct.tracepoint_func, ptr %it_func_ptr.0, i32 0, i32 1
  %3 = ptrtoint ptr %data to i32
  call void @__asan_load4_noabort(i32 %3)
  %4 = load ptr, ptr %data, align 4
  tail call void %2(ptr noundef %4, ptr noundef %map, i32 noundef %reg, i32 noundef %count) #24
  %incdec.ptr = getelementptr %struct.tracepoint_func, ptr %it_func_ptr.0, i32 1
  %5 = ptrtoint ptr %incdec.ptr to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load ptr, ptr %incdec.ptr, align 4
  %tobool9.not = icmp eq ptr %6, null
  br i1 %tobool9.not, label %do.body2.if.end_crit_edge, label %do.body2.do.body2_crit_edge

do.body2.do.body2_crit_edge:                      ; preds = %do.body2
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.body2

do.body2.if.end_crit_edge:                        ; preds = %do.body2
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

if.end:                                           ; preds = %do.body2.if.end_crit_edge, %entry.if.end_crit_edge
  ret i32 0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @__traceiter_regmap_async_io_complete(ptr nocapture readnone %__data, ptr noundef %map) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load volatile ptr, ptr getelementptr inbounds ({ ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr }, ptr @__tracepoint_regmap_async_io_complete, i32 0, i32 7), align 4
  %tobool.not = icmp eq ptr %0, null
  br i1 %tobool.not, label %entry.if.end_crit_edge, label %entry.do.body2_crit_edge

entry.do.body2_crit_edge:                         ; preds = %entry
  br label %do.body2

entry.if.end_crit_edge:                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

do.body2:                                         ; preds = %do.body2.do.body2_crit_edge, %entry.do.body2_crit_edge
  %it_func_ptr.0 = phi ptr [ %incdec.ptr, %do.body2.do.body2_crit_edge ], [ %0, %entry.do.body2_crit_edge ]
  %1 = ptrtoint ptr %it_func_ptr.0 to i32
  call void @__asan_load4_noabort(i32 %1)
  %2 = load volatile ptr, ptr %it_func_ptr.0, align 4
  %data = getelementptr inbounds %struct.tracepoint_func, ptr %it_func_ptr.0, i32 0, i32 1
  %3 = ptrtoint ptr %data to i32
  call void @__asan_load4_noabort(i32 %3)
  %4 = load ptr, ptr %data, align 4
  tail call void %2(ptr noundef %4, ptr noundef %map) #24
  %incdec.ptr = getelementptr %struct.tracepoint_func, ptr %it_func_ptr.0, i32 1
  %5 = ptrtoint ptr %incdec.ptr to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load ptr, ptr %incdec.ptr, align 4
  %tobool9.not = icmp eq ptr %6, null
  br i1 %tobool9.not, label %do.body2.if.end_crit_edge, label %do.body2.do.body2_crit_edge

do.body2.do.body2_crit_edge:                      ; preds = %do.body2
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.body2

do.body2.if.end_crit_edge:                        ; preds = %do.body2
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

if.end:                                           ; preds = %do.body2.if.end_crit_edge, %entry.if.end_crit_edge
  ret i32 0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @__traceiter_regmap_async_complete_start(ptr nocapture readnone %__data, ptr noundef %map) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load volatile ptr, ptr getelementptr inbounds ({ ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr }, ptr @__tracepoint_regmap_async_complete_start, i32 0, i32 7), align 4
  %tobool.not = icmp eq ptr %0, null
  br i1 %tobool.not, label %entry.if.end_crit_edge, label %entry.do.body2_crit_edge

entry.do.body2_crit_edge:                         ; preds = %entry
  br label %do.body2

entry.if.end_crit_edge:                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

do.body2:                                         ; preds = %do.body2.do.body2_crit_edge, %entry.do.body2_crit_edge
  %it_func_ptr.0 = phi ptr [ %incdec.ptr, %do.body2.do.body2_crit_edge ], [ %0, %entry.do.body2_crit_edge ]
  %1 = ptrtoint ptr %it_func_ptr.0 to i32
  call void @__asan_load4_noabort(i32 %1)
  %2 = load volatile ptr, ptr %it_func_ptr.0, align 4
  %data = getelementptr inbounds %struct.tracepoint_func, ptr %it_func_ptr.0, i32 0, i32 1
  %3 = ptrtoint ptr %data to i32
  call void @__asan_load4_noabort(i32 %3)
  %4 = load ptr, ptr %data, align 4
  tail call void %2(ptr noundef %4, ptr noundef %map) #24
  %incdec.ptr = getelementptr %struct.tracepoint_func, ptr %it_func_ptr.0, i32 1
  %5 = ptrtoint ptr %incdec.ptr to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load ptr, ptr %incdec.ptr, align 4
  %tobool9.not = icmp eq ptr %6, null
  br i1 %tobool9.not, label %do.body2.if.end_crit_edge, label %do.body2.do.body2_crit_edge

do.body2.do.body2_crit_edge:                      ; preds = %do.body2
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.body2

do.body2.if.end_crit_edge:                        ; preds = %do.body2
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

if.end:                                           ; preds = %do.body2.if.end_crit_edge, %entry.if.end_crit_edge
  ret i32 0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @__traceiter_regmap_async_complete_done(ptr nocapture readnone %__data, ptr noundef %map) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load volatile ptr, ptr getelementptr inbounds ({ ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr }, ptr @__tracepoint_regmap_async_complete_done, i32 0, i32 7), align 4
  %tobool.not = icmp eq ptr %0, null
  br i1 %tobool.not, label %entry.if.end_crit_edge, label %entry.do.body2_crit_edge

entry.do.body2_crit_edge:                         ; preds = %entry
  br label %do.body2

entry.if.end_crit_edge:                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

do.body2:                                         ; preds = %do.body2.do.body2_crit_edge, %entry.do.body2_crit_edge
  %it_func_ptr.0 = phi ptr [ %incdec.ptr, %do.body2.do.body2_crit_edge ], [ %0, %entry.do.body2_crit_edge ]
  %1 = ptrtoint ptr %it_func_ptr.0 to i32
  call void @__asan_load4_noabort(i32 %1)
  %2 = load volatile ptr, ptr %it_func_ptr.0, align 4
  %data = getelementptr inbounds %struct.tracepoint_func, ptr %it_func_ptr.0, i32 0, i32 1
  %3 = ptrtoint ptr %data to i32
  call void @__asan_load4_noabort(i32 %3)
  %4 = load ptr, ptr %data, align 4
  tail call void %2(ptr noundef %4, ptr noundef %map) #24
  %incdec.ptr = getelementptr %struct.tracepoint_func, ptr %it_func_ptr.0, i32 1
  %5 = ptrtoint ptr %incdec.ptr to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load ptr, ptr %incdec.ptr, align 4
  %tobool9.not = icmp eq ptr %6, null
  br i1 %tobool9.not, label %do.body2.if.end_crit_edge, label %do.body2.do.body2_crit_edge

do.body2.do.body2_crit_edge:                      ; preds = %do.body2
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.body2

do.body2.if.end_crit_edge:                        ; preds = %do.body2
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

if.end:                                           ; preds = %do.body2.if.end_crit_edge, %entry.if.end_crit_edge
  ret i32 0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @__traceiter_regcache_drop_region(ptr nocapture readnone %__data, ptr noundef %map, i32 noundef %from, i32 noundef %to) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load volatile ptr, ptr getelementptr inbounds ({ ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr }, ptr @__tracepoint_regcache_drop_region, i32 0, i32 7), align 4
  %tobool.not = icmp eq ptr %0, null
  br i1 %tobool.not, label %entry.if.end_crit_edge, label %entry.do.body2_crit_edge

entry.do.body2_crit_edge:                         ; preds = %entry
  br label %do.body2

entry.if.end_crit_edge:                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

do.body2:                                         ; preds = %do.body2.do.body2_crit_edge, %entry.do.body2_crit_edge
  %it_func_ptr.0 = phi ptr [ %incdec.ptr, %do.body2.do.body2_crit_edge ], [ %0, %entry.do.body2_crit_edge ]
  %1 = ptrtoint ptr %it_func_ptr.0 to i32
  call void @__asan_load4_noabort(i32 %1)
  %2 = load volatile ptr, ptr %it_func_ptr.0, align 4
  %data = getelementptr inbounds %struct.tracepoint_func, ptr %it_func_ptr.0, i32 0, i32 1
  %3 = ptrtoint ptr %data to i32
  call void @__asan_load4_noabort(i32 %3)
  %4 = load ptr, ptr %data, align 4
  tail call void %2(ptr noundef %4, ptr noundef %map, i32 noundef %from, i32 noundef %to) #24
  %incdec.ptr = getelementptr %struct.tracepoint_func, ptr %it_func_ptr.0, i32 1
  %5 = ptrtoint ptr %incdec.ptr to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load ptr, ptr %incdec.ptr, align 4
  %tobool9.not = icmp eq ptr %6, null
  br i1 %tobool9.not, label %do.body2.if.end_crit_edge, label %do.body2.do.body2_crit_edge

do.body2.do.body2_crit_edge:                      ; preds = %do.body2
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.body2

do.body2.if.end_crit_edge:                        ; preds = %do.body2
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

if.end:                                           ; preds = %do.body2.if.end_crit_edge, %entry.if.end_crit_edge
  ret i32 0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal void @trace_event_raw_event_regmap_reg(ptr noundef %__data, ptr nocapture noundef readonly %map, i32 noundef %reg, i32 noundef %val) #0 align 64 {
entry:
  %fbuffer = alloca %struct.trace_event_buffer, align 4
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %fbuffer) #24
  %flags.i = getelementptr inbounds %struct.trace_event_file, ptr %__data, i32 0, i32 7
  %0 = call ptr @memset(ptr %fbuffer, i32 255, i32 24)
  %1 = ptrtoint ptr %flags.i to i32
  call void @__asan_load4_noabort(i32 %1)
  %2 = load i32, ptr %flags.i, align 4
  %and.i = and i32 %2, 704
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i)
  %tobool.not.i = icmp eq i32 %and.i, 0
  br i1 %tobool.not.i, label %entry.if.end_crit_edge, label %if.end.i, !prof !386

entry.if.end_crit_edge:                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

if.end.i:                                         ; preds = %entry
  %and4.i = and i32 %2, 256
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and4.i)
  %tobool5.not.i = icmp eq i32 %and4.i, 0
  br i1 %tobool5.not.i, label %trace_trigger_soft_disabled.exit, label %if.end.i.if.end_crit_edge, !prof !387

if.end.i.if.end_crit_edge:                        ; preds = %if.end.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

trace_trigger_soft_disabled.exit:                 ; preds = %if.end.i
  %call.i = tail call zeroext i1 @__trace_trigger_soft_disabled(ptr noundef %__data) #24
  br i1 %call.i, label %trace_trigger_soft_disabled.exit.cleanup_crit_edge, label %trace_trigger_soft_disabled.exit.if.end_crit_edge

trace_trigger_soft_disabled.exit.if.end_crit_edge: ; preds = %trace_trigger_soft_disabled.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

trace_trigger_soft_disabled.exit.cleanup_crit_edge: ; preds = %trace_trigger_soft_disabled.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end:                                           ; preds = %trace_trigger_soft_disabled.exit.if.end_crit_edge, %if.end.i.if.end_crit_edge, %entry.if.end_crit_edge
  %dev.i.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 5
  %3 = ptrtoint ptr %dev.i.i to i32
  call void @__asan_load4_noabort(i32 %3)
  %4 = load ptr, ptr %dev.i.i, align 4
  %tobool.not.i.i = icmp eq ptr %4, null
  br i1 %tobool.not.i.i, label %regmap_name.exit.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.end
  %init_name.i.i.i = getelementptr inbounds %struct.device, ptr %4, i32 0, i32 3
  %5 = ptrtoint ptr %init_name.i.i.i to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load ptr, ptr %init_name.i.i.i, align 8
  %tobool.not.i.i.i = icmp eq ptr %6, null
  br i1 %tobool.not.i.i.i, label %regmap_name.exit.thread14.i, label %if.then.i.i.trace_event_get_offsets_regmap_reg.exit_crit_edge

if.then.i.i.trace_event_get_offsets_regmap_reg.exit_crit_edge: ; preds = %if.then.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %trace_event_get_offsets_regmap_reg.exit

regmap_name.exit.i:                               ; preds = %if.end
  %name.i.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 10
  %7 = ptrtoint ptr %name.i.i to i32
  call void @__asan_load4_noabort(i32 %7)
  %8 = load ptr, ptr %name.i.i, align 4
  %tobool.not.i27 = icmp eq ptr %8, null
  br i1 %tobool.not.i27, label %regmap_name.exit.i.trace_event_get_offsets_regmap_reg.exit_crit_edge, label %regmap_name.exit.i.return.sink.split.i9.i_crit_edge

regmap_name.exit.i.return.sink.split.i9.i_crit_edge: ; preds = %regmap_name.exit.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %return.sink.split.i9.i

regmap_name.exit.i.trace_event_get_offsets_regmap_reg.exit_crit_edge: ; preds = %regmap_name.exit.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %trace_event_get_offsets_regmap_reg.exit

regmap_name.exit.thread14.i:                      ; preds = %if.then.i.i
  %9 = ptrtoint ptr %4 to i32
  call void @__asan_load4_noabort(i32 %9)
  %10 = load ptr, ptr %4, align 4
  %tobool.not16.i = icmp eq ptr %10, null
  br i1 %tobool.not16.i, label %regmap_name.exit.thread14.i.trace_event_get_offsets_regmap_reg.exit_crit_edge, label %regmap_name.exit.thread14.i.return.sink.split.i9.i_crit_edge

regmap_name.exit.thread14.i.return.sink.split.i9.i_crit_edge: ; preds = %regmap_name.exit.thread14.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %return.sink.split.i9.i

regmap_name.exit.thread14.i.trace_event_get_offsets_regmap_reg.exit_crit_edge: ; preds = %regmap_name.exit.thread14.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %trace_event_get_offsets_regmap_reg.exit

return.sink.split.i9.i:                           ; preds = %regmap_name.exit.thread14.i.return.sink.split.i9.i_crit_edge, %regmap_name.exit.i.return.sink.split.i9.i_crit_edge
  %.sink.i8.i = phi ptr [ %name.i.i, %regmap_name.exit.i.return.sink.split.i9.i_crit_edge ], [ %4, %regmap_name.exit.thread14.i.return.sink.split.i9.i_crit_edge ]
  %11 = ptrtoint ptr %.sink.i8.i to i32
  call void @__asan_load4_noabort(i32 %11)
  %12 = load ptr, ptr %.sink.i8.i, align 4
  br label %trace_event_get_offsets_regmap_reg.exit

trace_event_get_offsets_regmap_reg.exit:          ; preds = %return.sink.split.i9.i, %regmap_name.exit.thread14.i.trace_event_get_offsets_regmap_reg.exit_crit_edge, %regmap_name.exit.i.trace_event_get_offsets_regmap_reg.exit_crit_edge, %if.then.i.i.trace_event_get_offsets_regmap_reg.exit_crit_edge
  %cond.i = phi ptr [ @.str.41, %regmap_name.exit.i.trace_event_get_offsets_regmap_reg.exit_crit_edge ], [ @.str.41, %regmap_name.exit.thread14.i.trace_event_get_offsets_regmap_reg.exit_crit_edge ], [ %12, %return.sink.split.i9.i ], [ %6, %if.then.i.i.trace_event_get_offsets_regmap_reg.exit_crit_edge ]
  %call3.i = tail call i32 @strlen(ptr noundef %cond.i) #27
  %add = add i32 %call3.i, 21
  %call3 = call ptr @trace_event_buffer_reserve(ptr noundef nonnull %fbuffer, ptr noundef %__data, i32 noundef %add) #24
  %tobool.not = icmp eq ptr %call3, null
  br i1 %tobool.not, label %trace_event_get_offsets_regmap_reg.exit.cleanup_crit_edge, label %if.end5

trace_event_get_offsets_regmap_reg.exit.cleanup_crit_edge: ; preds = %trace_event_get_offsets_regmap_reg.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end5:                                          ; preds = %trace_event_get_offsets_regmap_reg.exit
  %add.i = shl i32 %call3.i, 16
  %or.i = add i32 %add.i, 65556
  %__data_loc_name = getelementptr inbounds %struct.trace_event_raw_regmap_reg, ptr %call3, i32 0, i32 1
  %13 = ptrtoint ptr %__data_loc_name to i32
  call void @__asan_store4_noabort(i32 %13)
  store i32 %or.i, ptr %__data_loc_name, align 4
  %add.ptr = getelementptr i8, ptr %call3, i32 20
  %14 = ptrtoint ptr %dev.i.i to i32
  call void @__asan_load4_noabort(i32 %14)
  %15 = load ptr, ptr %dev.i.i, align 4
  %tobool.not.i28 = icmp eq ptr %15, null
  br i1 %tobool.not.i28, label %regmap_name.exit, label %if.then.i

if.then.i:                                        ; preds = %if.end5
  %init_name.i.i = getelementptr inbounds %struct.device, ptr %15, i32 0, i32 3
  %16 = ptrtoint ptr %init_name.i.i to i32
  call void @__asan_load4_noabort(i32 %16)
  %17 = load ptr, ptr %init_name.i.i, align 8
  %tobool.not.i.i29 = icmp eq ptr %17, null
  br i1 %tobool.not.i.i29, label %regmap_name.exit.thread46, label %if.then.i.cond.end_crit_edge

if.then.i.cond.end_crit_edge:                     ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %cond.end

regmap_name.exit:                                 ; preds = %if.end5
  %name.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 10
  %18 = ptrtoint ptr %name.i to i32
  call void @__asan_load4_noabort(i32 %18)
  %19 = load ptr, ptr %name.i, align 4
  %tobool8.not = icmp eq ptr %19, null
  br i1 %tobool8.not, label %regmap_name.exit.cond.end_crit_edge, label %regmap_name.exit.return.sink.split.i40_crit_edge

regmap_name.exit.return.sink.split.i40_crit_edge: ; preds = %regmap_name.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %return.sink.split.i40

regmap_name.exit.cond.end_crit_edge:              ; preds = %regmap_name.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %cond.end

regmap_name.exit.thread46:                        ; preds = %if.then.i
  %20 = ptrtoint ptr %15 to i32
  call void @__asan_load4_noabort(i32 %20)
  %21 = load ptr, ptr %15, align 4
  %tobool8.not48 = icmp eq ptr %21, null
  br i1 %tobool8.not48, label %regmap_name.exit.thread46.cond.end_crit_edge, label %regmap_name.exit.thread46.return.sink.split.i40_crit_edge

regmap_name.exit.thread46.return.sink.split.i40_crit_edge: ; preds = %regmap_name.exit.thread46
  call void @__sanitizer_cov_trace_pc() #26
  br label %return.sink.split.i40

regmap_name.exit.thread46.cond.end_crit_edge:     ; preds = %regmap_name.exit.thread46
  call void @__sanitizer_cov_trace_pc() #26
  br label %cond.end

return.sink.split.i40:                            ; preds = %regmap_name.exit.thread46.return.sink.split.i40_crit_edge, %regmap_name.exit.return.sink.split.i40_crit_edge
  %.sink.i39 = phi ptr [ %name.i, %regmap_name.exit.return.sink.split.i40_crit_edge ], [ %15, %regmap_name.exit.thread46.return.sink.split.i40_crit_edge ]
  %22 = ptrtoint ptr %.sink.i39 to i32
  call void @__asan_load4_noabort(i32 %22)
  %23 = load ptr, ptr %.sink.i39, align 4
  br label %cond.end

cond.end:                                         ; preds = %return.sink.split.i40, %regmap_name.exit.thread46.cond.end_crit_edge, %regmap_name.exit.cond.end_crit_edge, %if.then.i.cond.end_crit_edge
  %cond = phi ptr [ @.str.41, %regmap_name.exit.cond.end_crit_edge ], [ @.str.41, %regmap_name.exit.thread46.cond.end_crit_edge ], [ %23, %return.sink.split.i40 ], [ %17, %if.then.i.cond.end_crit_edge ]
  %call10 = call ptr @strcpy(ptr noundef %add.ptr, ptr noundef %cond) #28
  %reg11 = getelementptr inbounds %struct.trace_event_raw_regmap_reg, ptr %call3, i32 0, i32 2
  %24 = ptrtoint ptr %reg11 to i32
  call void @__asan_store4_noabort(i32 %24)
  store i32 %reg, ptr %reg11, align 4
  %val12 = getelementptr inbounds %struct.trace_event_raw_regmap_reg, ptr %call3, i32 0, i32 3
  %25 = ptrtoint ptr %val12 to i32
  call void @__asan_store4_noabort(i32 %25)
  store i32 %val, ptr %val12, align 4
  call void @trace_event_buffer_commit(ptr noundef nonnull %fbuffer) #24
  br label %cleanup

cleanup:                                          ; preds = %cond.end, %trace_event_get_offsets_regmap_reg.exit.cleanup_crit_edge, %trace_trigger_soft_disabled.exit.cleanup_crit_edge
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %fbuffer) #24
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal void @perf_trace_regmap_reg(ptr noundef %__data, ptr nocapture noundef readonly %map, i32 noundef %reg, i32 noundef %val) #0 align 64 {
entry:
  %__regs = alloca ptr, align 4
  %rctx = alloca i32, align 4
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %__regs) #24
  %0 = ptrtoint ptr %__regs to i32
  call void @__asan_store4_noabort(i32 %0)
  store ptr inttoptr (i32 -1 to ptr), ptr %__regs, align 4, !annotation !388
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %rctx) #24
  %1 = ptrtoint ptr %rctx to i32
  call void @__asan_store4_noabort(i32 %1)
  store i32 -1, ptr %rctx, align 4, !annotation !388
  %dev.i.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 5
  %2 = ptrtoint ptr %dev.i.i to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load ptr, ptr %dev.i.i, align 4
  %tobool.not.i.i = icmp eq ptr %3, null
  br i1 %tobool.not.i.i, label %regmap_name.exit.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %entry
  %init_name.i.i.i = getelementptr inbounds %struct.device, ptr %3, i32 0, i32 3
  %4 = ptrtoint ptr %init_name.i.i.i to i32
  call void @__asan_load4_noabort(i32 %4)
  %5 = load ptr, ptr %init_name.i.i.i, align 8
  %tobool.not.i.i.i = icmp eq ptr %5, null
  br i1 %tobool.not.i.i.i, label %regmap_name.exit.thread14.i, label %if.then.i.i.trace_event_get_offsets_regmap_reg.exit_crit_edge

if.then.i.i.trace_event_get_offsets_regmap_reg.exit_crit_edge: ; preds = %if.then.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %trace_event_get_offsets_regmap_reg.exit

regmap_name.exit.i:                               ; preds = %entry
  %name.i.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 10
  %6 = ptrtoint ptr %name.i.i to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load ptr, ptr %name.i.i, align 4
  %tobool.not.i = icmp eq ptr %7, null
  br i1 %tobool.not.i, label %regmap_name.exit.i.trace_event_get_offsets_regmap_reg.exit_crit_edge, label %regmap_name.exit.i.return.sink.split.i9.i_crit_edge

regmap_name.exit.i.return.sink.split.i9.i_crit_edge: ; preds = %regmap_name.exit.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %return.sink.split.i9.i

regmap_name.exit.i.trace_event_get_offsets_regmap_reg.exit_crit_edge: ; preds = %regmap_name.exit.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %trace_event_get_offsets_regmap_reg.exit

regmap_name.exit.thread14.i:                      ; preds = %if.then.i.i
  %8 = ptrtoint ptr %3 to i32
  call void @__asan_load4_noabort(i32 %8)
  %9 = load ptr, ptr %3, align 4
  %tobool.not16.i = icmp eq ptr %9, null
  br i1 %tobool.not16.i, label %regmap_name.exit.thread14.i.trace_event_get_offsets_regmap_reg.exit_crit_edge, label %regmap_name.exit.thread14.i.return.sink.split.i9.i_crit_edge

regmap_name.exit.thread14.i.return.sink.split.i9.i_crit_edge: ; preds = %regmap_name.exit.thread14.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %return.sink.split.i9.i

regmap_name.exit.thread14.i.trace_event_get_offsets_regmap_reg.exit_crit_edge: ; preds = %regmap_name.exit.thread14.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %trace_event_get_offsets_regmap_reg.exit

return.sink.split.i9.i:                           ; preds = %regmap_name.exit.thread14.i.return.sink.split.i9.i_crit_edge, %regmap_name.exit.i.return.sink.split.i9.i_crit_edge
  %.sink.i8.i = phi ptr [ %name.i.i, %regmap_name.exit.i.return.sink.split.i9.i_crit_edge ], [ %3, %regmap_name.exit.thread14.i.return.sink.split.i9.i_crit_edge ]
  %10 = ptrtoint ptr %.sink.i8.i to i32
  call void @__asan_load4_noabort(i32 %10)
  %11 = load ptr, ptr %.sink.i8.i, align 4
  br label %trace_event_get_offsets_regmap_reg.exit

trace_event_get_offsets_regmap_reg.exit:          ; preds = %return.sink.split.i9.i, %regmap_name.exit.thread14.i.trace_event_get_offsets_regmap_reg.exit_crit_edge, %regmap_name.exit.i.trace_event_get_offsets_regmap_reg.exit_crit_edge, %if.then.i.i.trace_event_get_offsets_regmap_reg.exit_crit_edge
  %cond.i = phi ptr [ @.str.41, %regmap_name.exit.i.trace_event_get_offsets_regmap_reg.exit_crit_edge ], [ @.str.41, %regmap_name.exit.thread14.i.trace_event_get_offsets_regmap_reg.exit_crit_edge ], [ %11, %return.sink.split.i9.i ], [ %5, %if.then.i.i.trace_event_get_offsets_regmap_reg.exit_crit_edge ]
  %call3.i = tail call i32 @strlen(ptr noundef %cond.i) #27
  %add.i = shl i32 %call3.i, 16
  %or.i = add i32 %add.i, 65556
  %perf_events = getelementptr inbounds %struct.trace_event_call, ptr %__data, i32 0, i32 10
  %12 = ptrtoint ptr %perf_events to i32
  call void @__asan_load4_noabort(i32 %12)
  %13 = load ptr, ptr %perf_events, align 4
  %14 = ptrtoint ptr %13 to i32
  %15 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i = and i32 %15, -16384
  %16 = inttoptr i32 %and.i to ptr
  %cpu = getelementptr inbounds %struct.thread_info, ptr %16, i32 0, i32 3
  %17 = ptrtoint ptr %cpu to i32
  call void @__asan_load4_noabort(i32 %17)
  %18 = load i32, ptr %cpu, align 4
  %arrayidx = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %18
  %19 = ptrtoint ptr %arrayidx to i32
  call void @__asan_load4_noabort(i32 %19)
  %20 = load i32, ptr %arrayidx, align 4
  %add = add i32 %20, %14
  %21 = inttoptr i32 %add to ptr
  %prog_array.i = getelementptr inbounds %struct.trace_event_call, ptr %__data, i32 0, i32 11
  %22 = ptrtoint ptr %prog_array.i to i32
  call void @__asan_load4_noabort(i32 %22)
  %23 = load volatile ptr, ptr %prog_array.i, align 4
  %tobool.i.not = icmp eq ptr %23, null
  br i1 %tobool.i.not, label %land.lhs.true7, label %trace_event_get_offsets_regmap_reg.exit.if.end_crit_edge

trace_event_get_offsets_regmap_reg.exit.if.end_crit_edge: ; preds = %trace_event_get_offsets_regmap_reg.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

land.lhs.true7:                                   ; preds = %trace_event_get_offsets_regmap_reg.exit
  %24 = ptrtoint ptr %21 to i32
  call void @__asan_load4_noabort(i32 %24)
  %25 = load volatile ptr, ptr %21, align 4
  %tobool.not.i51.not = icmp eq ptr %25, null
  br i1 %tobool.not.i51.not, label %land.lhs.true7.cleanup_crit_edge, label %land.lhs.true7.if.end_crit_edge

land.lhs.true7.if.end_crit_edge:                  ; preds = %land.lhs.true7
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

land.lhs.true7.cleanup_crit_edge:                 ; preds = %land.lhs.true7
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end:                                           ; preds = %land.lhs.true7.if.end_crit_edge, %trace_event_get_offsets_regmap_reg.exit.if.end_crit_edge
  %add12 = add i32 %call3.i, 32
  %and = and i32 %add12, -8
  %sub = add i32 %and, -4
  %call13 = call ptr @perf_trace_buf_alloc(i32 noundef %sub, ptr noundef nonnull %__regs, ptr noundef nonnull %rctx) #24
  %tobool14.not = icmp eq ptr %call13, null
  br i1 %tobool14.not, label %if.end.cleanup_crit_edge, label %if.end16

if.end.cleanup_crit_edge:                         ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end16:                                         ; preds = %if.end
  %26 = ptrtoint ptr %__regs to i32
  call void @__asan_load4_noabort(i32 %26)
  %27 = load ptr, ptr %__regs, align 4
  %28 = call ptr @llvm.returnaddress(i32 0) #24
  %29 = ptrtoint ptr %28 to i32
  %arrayidx.i = getelementptr [18 x i32], ptr %27, i32 0, i32 15
  %30 = ptrtoint ptr %arrayidx.i to i32
  call void @__asan_store4_noabort(i32 %30)
  store i32 %29, ptr %arrayidx.i, align 4
  %31 = call ptr @llvm.frameaddress.p0(i32 0) #24
  %32 = ptrtoint ptr %31 to i32
  %arrayidx2.i = getelementptr [18 x i32], ptr %27, i32 0, i32 11
  %33 = ptrtoint ptr %arrayidx2.i to i32
  call void @__asan_store4_noabort(i32 %33)
  store i32 %32, ptr %arrayidx2.i, align 4
  %34 = call i32 @llvm.read_register.i32(metadata !376) #24
  %arrayidx4.i = getelementptr [18 x i32], ptr %27, i32 0, i32 13
  %35 = ptrtoint ptr %arrayidx4.i to i32
  call void @__asan_store4_noabort(i32 %35)
  store i32 %34, ptr %arrayidx4.i, align 4
  %arrayidx6.i = getelementptr [18 x i32], ptr %27, i32 0, i32 16
  %36 = ptrtoint ptr %arrayidx6.i to i32
  call void @__asan_store4_noabort(i32 %36)
  store i32 19, ptr %arrayidx6.i, align 4
  %__data_loc_name = getelementptr inbounds %struct.trace_event_raw_regmap_reg, ptr %call13, i32 0, i32 1
  %37 = ptrtoint ptr %__data_loc_name to i32
  call void @__asan_store4_noabort(i32 %37)
  store i32 %or.i, ptr %__data_loc_name, align 4
  %add.ptr = getelementptr i8, ptr %call13, i32 20
  %38 = ptrtoint ptr %dev.i.i to i32
  call void @__asan_load4_noabort(i32 %38)
  %39 = load ptr, ptr %dev.i.i, align 4
  %tobool.not.i52 = icmp eq ptr %39, null
  br i1 %tobool.not.i52, label %regmap_name.exit, label %if.then.i

if.then.i:                                        ; preds = %if.end16
  %init_name.i.i = getelementptr inbounds %struct.device, ptr %39, i32 0, i32 3
  %40 = ptrtoint ptr %init_name.i.i to i32
  call void @__asan_load4_noabort(i32 %40)
  %41 = load ptr, ptr %init_name.i.i, align 8
  %tobool.not.i.i53 = icmp eq ptr %41, null
  br i1 %tobool.not.i.i53, label %regmap_name.exit.thread67, label %if.then.i.cond.end_crit_edge

if.then.i.cond.end_crit_edge:                     ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %cond.end

regmap_name.exit:                                 ; preds = %if.end16
  %name.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 10
  %42 = ptrtoint ptr %name.i to i32
  call void @__asan_load4_noabort(i32 %42)
  %43 = load ptr, ptr %name.i, align 4
  %tobool20.not = icmp eq ptr %43, null
  br i1 %tobool20.not, label %regmap_name.exit.cond.end_crit_edge, label %regmap_name.exit.return.sink.split.i62_crit_edge

regmap_name.exit.return.sink.split.i62_crit_edge: ; preds = %regmap_name.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %return.sink.split.i62

regmap_name.exit.cond.end_crit_edge:              ; preds = %regmap_name.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %cond.end

regmap_name.exit.thread67:                        ; preds = %if.then.i
  %44 = ptrtoint ptr %39 to i32
  call void @__asan_load4_noabort(i32 %44)
  %45 = load ptr, ptr %39, align 4
  %tobool20.not69 = icmp eq ptr %45, null
  br i1 %tobool20.not69, label %regmap_name.exit.thread67.cond.end_crit_edge, label %regmap_name.exit.thread67.return.sink.split.i62_crit_edge

regmap_name.exit.thread67.return.sink.split.i62_crit_edge: ; preds = %regmap_name.exit.thread67
  call void @__sanitizer_cov_trace_pc() #26
  br label %return.sink.split.i62

regmap_name.exit.thread67.cond.end_crit_edge:     ; preds = %regmap_name.exit.thread67
  call void @__sanitizer_cov_trace_pc() #26
  br label %cond.end

return.sink.split.i62:                            ; preds = %regmap_name.exit.thread67.return.sink.split.i62_crit_edge, %regmap_name.exit.return.sink.split.i62_crit_edge
  %.sink.i61 = phi ptr [ %name.i, %regmap_name.exit.return.sink.split.i62_crit_edge ], [ %39, %regmap_name.exit.thread67.return.sink.split.i62_crit_edge ]
  %46 = ptrtoint ptr %.sink.i61 to i32
  call void @__asan_load4_noabort(i32 %46)
  %47 = load ptr, ptr %.sink.i61, align 4
  br label %cond.end

cond.end:                                         ; preds = %return.sink.split.i62, %regmap_name.exit.thread67.cond.end_crit_edge, %regmap_name.exit.cond.end_crit_edge, %if.then.i.cond.end_crit_edge
  %cond = phi ptr [ @.str.41, %regmap_name.exit.cond.end_crit_edge ], [ @.str.41, %regmap_name.exit.thread67.cond.end_crit_edge ], [ %47, %return.sink.split.i62 ], [ %41, %if.then.i.cond.end_crit_edge ]
  %call22 = call ptr @strcpy(ptr noundef %add.ptr, ptr noundef %cond) #28
  %reg23 = getelementptr inbounds %struct.trace_event_raw_regmap_reg, ptr %call13, i32 0, i32 2
  %48 = ptrtoint ptr %reg23 to i32
  call void @__asan_store4_noabort(i32 %48)
  store i32 %reg, ptr %reg23, align 4
  %val24 = getelementptr inbounds %struct.trace_event_raw_regmap_reg, ptr %call13, i32 0, i32 3
  %49 = ptrtoint ptr %val24 to i32
  call void @__asan_store4_noabort(i32 %49)
  store i32 %val, ptr %val24, align 4
  %50 = ptrtoint ptr %rctx to i32
  call void @__asan_load4_noabort(i32 %50)
  %51 = load i32, ptr %rctx, align 4
  %52 = ptrtoint ptr %__regs to i32
  call void @__asan_load4_noabort(i32 %52)
  %53 = load ptr, ptr %__regs, align 4
  call void @perf_trace_run_bpf_submit(ptr noundef nonnull %call13, i32 noundef %sub, i32 noundef %51, ptr noundef %__data, i64 noundef 1, ptr noundef %53, ptr noundef %21, ptr noundef null) #24
  br label %cleanup

cleanup:                                          ; preds = %cond.end, %if.end.cleanup_crit_edge, %land.lhs.true7.cleanup_crit_edge
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %rctx) #24
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %__regs) #24
  ret void
}

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @trace_event_reg(ptr noundef, i32 noundef, ptr noundef) #2

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @trace_event_raw_init(ptr noundef) #2

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal void @trace_event_raw_event_regmap_block(ptr noundef %__data, ptr nocapture noundef readonly %map, i32 noundef %reg, i32 noundef %count) #0 align 64 {
entry:
  %fbuffer = alloca %struct.trace_event_buffer, align 4
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %fbuffer) #24
  %flags.i = getelementptr inbounds %struct.trace_event_file, ptr %__data, i32 0, i32 7
  %0 = call ptr @memset(ptr %fbuffer, i32 255, i32 24)
  %1 = ptrtoint ptr %flags.i to i32
  call void @__asan_load4_noabort(i32 %1)
  %2 = load i32, ptr %flags.i, align 4
  %and.i = and i32 %2, 704
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i)
  %tobool.not.i = icmp eq i32 %and.i, 0
  br i1 %tobool.not.i, label %entry.if.end_crit_edge, label %if.end.i, !prof !386

entry.if.end_crit_edge:                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

if.end.i:                                         ; preds = %entry
  %and4.i = and i32 %2, 256
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and4.i)
  %tobool5.not.i = icmp eq i32 %and4.i, 0
  br i1 %tobool5.not.i, label %trace_trigger_soft_disabled.exit, label %if.end.i.if.end_crit_edge, !prof !387

if.end.i.if.end_crit_edge:                        ; preds = %if.end.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

trace_trigger_soft_disabled.exit:                 ; preds = %if.end.i
  %call.i = tail call zeroext i1 @__trace_trigger_soft_disabled(ptr noundef %__data) #24
  br i1 %call.i, label %trace_trigger_soft_disabled.exit.cleanup_crit_edge, label %trace_trigger_soft_disabled.exit.if.end_crit_edge

trace_trigger_soft_disabled.exit.if.end_crit_edge: ; preds = %trace_trigger_soft_disabled.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

trace_trigger_soft_disabled.exit.cleanup_crit_edge: ; preds = %trace_trigger_soft_disabled.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end:                                           ; preds = %trace_trigger_soft_disabled.exit.if.end_crit_edge, %if.end.i.if.end_crit_edge, %entry.if.end_crit_edge
  %dev.i.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 5
  %3 = ptrtoint ptr %dev.i.i to i32
  call void @__asan_load4_noabort(i32 %3)
  %4 = load ptr, ptr %dev.i.i, align 4
  %tobool.not.i.i = icmp eq ptr %4, null
  br i1 %tobool.not.i.i, label %regmap_name.exit.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.end
  %init_name.i.i.i = getelementptr inbounds %struct.device, ptr %4, i32 0, i32 3
  %5 = ptrtoint ptr %init_name.i.i.i to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load ptr, ptr %init_name.i.i.i, align 8
  %tobool.not.i.i.i = icmp eq ptr %6, null
  br i1 %tobool.not.i.i.i, label %regmap_name.exit.thread14.i, label %if.then.i.i.trace_event_get_offsets_regmap_block.exit_crit_edge

if.then.i.i.trace_event_get_offsets_regmap_block.exit_crit_edge: ; preds = %if.then.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %trace_event_get_offsets_regmap_block.exit

regmap_name.exit.i:                               ; preds = %if.end
  %name.i.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 10
  %7 = ptrtoint ptr %name.i.i to i32
  call void @__asan_load4_noabort(i32 %7)
  %8 = load ptr, ptr %name.i.i, align 4
  %tobool.not.i27 = icmp eq ptr %8, null
  br i1 %tobool.not.i27, label %regmap_name.exit.i.trace_event_get_offsets_regmap_block.exit_crit_edge, label %regmap_name.exit.i.return.sink.split.i9.i_crit_edge

regmap_name.exit.i.return.sink.split.i9.i_crit_edge: ; preds = %regmap_name.exit.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %return.sink.split.i9.i

regmap_name.exit.i.trace_event_get_offsets_regmap_block.exit_crit_edge: ; preds = %regmap_name.exit.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %trace_event_get_offsets_regmap_block.exit

regmap_name.exit.thread14.i:                      ; preds = %if.then.i.i
  %9 = ptrtoint ptr %4 to i32
  call void @__asan_load4_noabort(i32 %9)
  %10 = load ptr, ptr %4, align 4
  %tobool.not16.i = icmp eq ptr %10, null
  br i1 %tobool.not16.i, label %regmap_name.exit.thread14.i.trace_event_get_offsets_regmap_block.exit_crit_edge, label %regmap_name.exit.thread14.i.return.sink.split.i9.i_crit_edge

regmap_name.exit.thread14.i.return.sink.split.i9.i_crit_edge: ; preds = %regmap_name.exit.thread14.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %return.sink.split.i9.i

regmap_name.exit.thread14.i.trace_event_get_offsets_regmap_block.exit_crit_edge: ; preds = %regmap_name.exit.thread14.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %trace_event_get_offsets_regmap_block.exit

return.sink.split.i9.i:                           ; preds = %regmap_name.exit.thread14.i.return.sink.split.i9.i_crit_edge, %regmap_name.exit.i.return.sink.split.i9.i_crit_edge
  %.sink.i8.i = phi ptr [ %name.i.i, %regmap_name.exit.i.return.sink.split.i9.i_crit_edge ], [ %4, %regmap_name.exit.thread14.i.return.sink.split.i9.i_crit_edge ]
  %11 = ptrtoint ptr %.sink.i8.i to i32
  call void @__asan_load4_noabort(i32 %11)
  %12 = load ptr, ptr %.sink.i8.i, align 4
  br label %trace_event_get_offsets_regmap_block.exit

trace_event_get_offsets_regmap_block.exit:        ; preds = %return.sink.split.i9.i, %regmap_name.exit.thread14.i.trace_event_get_offsets_regmap_block.exit_crit_edge, %regmap_name.exit.i.trace_event_get_offsets_regmap_block.exit_crit_edge, %if.then.i.i.trace_event_get_offsets_regmap_block.exit_crit_edge
  %cond.i = phi ptr [ @.str.41, %regmap_name.exit.i.trace_event_get_offsets_regmap_block.exit_crit_edge ], [ @.str.41, %regmap_name.exit.thread14.i.trace_event_get_offsets_regmap_block.exit_crit_edge ], [ %12, %return.sink.split.i9.i ], [ %6, %if.then.i.i.trace_event_get_offsets_regmap_block.exit_crit_edge ]
  %call3.i = tail call i32 @strlen(ptr noundef %cond.i) #27
  %add = add i32 %call3.i, 21
  %call3 = call ptr @trace_event_buffer_reserve(ptr noundef nonnull %fbuffer, ptr noundef %__data, i32 noundef %add) #24
  %tobool.not = icmp eq ptr %call3, null
  br i1 %tobool.not, label %trace_event_get_offsets_regmap_block.exit.cleanup_crit_edge, label %if.end5

trace_event_get_offsets_regmap_block.exit.cleanup_crit_edge: ; preds = %trace_event_get_offsets_regmap_block.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end5:                                          ; preds = %trace_event_get_offsets_regmap_block.exit
  %add.i = shl i32 %call3.i, 16
  %or.i = add i32 %add.i, 65556
  %__data_loc_name = getelementptr inbounds %struct.trace_event_raw_regmap_block, ptr %call3, i32 0, i32 1
  %13 = ptrtoint ptr %__data_loc_name to i32
  call void @__asan_store4_noabort(i32 %13)
  store i32 %or.i, ptr %__data_loc_name, align 4
  %add.ptr = getelementptr i8, ptr %call3, i32 20
  %14 = ptrtoint ptr %dev.i.i to i32
  call void @__asan_load4_noabort(i32 %14)
  %15 = load ptr, ptr %dev.i.i, align 4
  %tobool.not.i28 = icmp eq ptr %15, null
  br i1 %tobool.not.i28, label %regmap_name.exit, label %if.then.i

if.then.i:                                        ; preds = %if.end5
  %init_name.i.i = getelementptr inbounds %struct.device, ptr %15, i32 0, i32 3
  %16 = ptrtoint ptr %init_name.i.i to i32
  call void @__asan_load4_noabort(i32 %16)
  %17 = load ptr, ptr %init_name.i.i, align 8
  %tobool.not.i.i29 = icmp eq ptr %17, null
  br i1 %tobool.not.i.i29, label %regmap_name.exit.thread46, label %if.then.i.cond.end_crit_edge

if.then.i.cond.end_crit_edge:                     ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %cond.end

regmap_name.exit:                                 ; preds = %if.end5
  %name.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 10
  %18 = ptrtoint ptr %name.i to i32
  call void @__asan_load4_noabort(i32 %18)
  %19 = load ptr, ptr %name.i, align 4
  %tobool8.not = icmp eq ptr %19, null
  br i1 %tobool8.not, label %regmap_name.exit.cond.end_crit_edge, label %regmap_name.exit.return.sink.split.i40_crit_edge

regmap_name.exit.return.sink.split.i40_crit_edge: ; preds = %regmap_name.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %return.sink.split.i40

regmap_name.exit.cond.end_crit_edge:              ; preds = %regmap_name.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %cond.end

regmap_name.exit.thread46:                        ; preds = %if.then.i
  %20 = ptrtoint ptr %15 to i32
  call void @__asan_load4_noabort(i32 %20)
  %21 = load ptr, ptr %15, align 4
  %tobool8.not48 = icmp eq ptr %21, null
  br i1 %tobool8.not48, label %regmap_name.exit.thread46.cond.end_crit_edge, label %regmap_name.exit.thread46.return.sink.split.i40_crit_edge

regmap_name.exit.thread46.return.sink.split.i40_crit_edge: ; preds = %regmap_name.exit.thread46
  call void @__sanitizer_cov_trace_pc() #26
  br label %return.sink.split.i40

regmap_name.exit.thread46.cond.end_crit_edge:     ; preds = %regmap_name.exit.thread46
  call void @__sanitizer_cov_trace_pc() #26
  br label %cond.end

return.sink.split.i40:                            ; preds = %regmap_name.exit.thread46.return.sink.split.i40_crit_edge, %regmap_name.exit.return.sink.split.i40_crit_edge
  %.sink.i39 = phi ptr [ %name.i, %regmap_name.exit.return.sink.split.i40_crit_edge ], [ %15, %regmap_name.exit.thread46.return.sink.split.i40_crit_edge ]
  %22 = ptrtoint ptr %.sink.i39 to i32
  call void @__asan_load4_noabort(i32 %22)
  %23 = load ptr, ptr %.sink.i39, align 4
  br label %cond.end

cond.end:                                         ; preds = %return.sink.split.i40, %regmap_name.exit.thread46.cond.end_crit_edge, %regmap_name.exit.cond.end_crit_edge, %if.then.i.cond.end_crit_edge
  %cond = phi ptr [ @.str.41, %regmap_name.exit.cond.end_crit_edge ], [ @.str.41, %regmap_name.exit.thread46.cond.end_crit_edge ], [ %23, %return.sink.split.i40 ], [ %17, %if.then.i.cond.end_crit_edge ]
  %call10 = call ptr @strcpy(ptr noundef %add.ptr, ptr noundef %cond) #28
  %reg11 = getelementptr inbounds %struct.trace_event_raw_regmap_block, ptr %call3, i32 0, i32 2
  %24 = ptrtoint ptr %reg11 to i32
  call void @__asan_store4_noabort(i32 %24)
  store i32 %reg, ptr %reg11, align 4
  %count12 = getelementptr inbounds %struct.trace_event_raw_regmap_block, ptr %call3, i32 0, i32 3
  %25 = ptrtoint ptr %count12 to i32
  call void @__asan_store4_noabort(i32 %25)
  store i32 %count, ptr %count12, align 4
  call void @trace_event_buffer_commit(ptr noundef nonnull %fbuffer) #24
  br label %cleanup

cleanup:                                          ; preds = %cond.end, %trace_event_get_offsets_regmap_block.exit.cleanup_crit_edge, %trace_trigger_soft_disabled.exit.cleanup_crit_edge
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %fbuffer) #24
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal void @perf_trace_regmap_block(ptr noundef %__data, ptr nocapture noundef readonly %map, i32 noundef %reg, i32 noundef %count) #0 align 64 {
entry:
  %__regs = alloca ptr, align 4
  %rctx = alloca i32, align 4
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %__regs) #24
  %0 = ptrtoint ptr %__regs to i32
  call void @__asan_store4_noabort(i32 %0)
  store ptr inttoptr (i32 -1 to ptr), ptr %__regs, align 4, !annotation !388
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %rctx) #24
  %1 = ptrtoint ptr %rctx to i32
  call void @__asan_store4_noabort(i32 %1)
  store i32 -1, ptr %rctx, align 4, !annotation !388
  %dev.i.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 5
  %2 = ptrtoint ptr %dev.i.i to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load ptr, ptr %dev.i.i, align 4
  %tobool.not.i.i = icmp eq ptr %3, null
  br i1 %tobool.not.i.i, label %regmap_name.exit.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %entry
  %init_name.i.i.i = getelementptr inbounds %struct.device, ptr %3, i32 0, i32 3
  %4 = ptrtoint ptr %init_name.i.i.i to i32
  call void @__asan_load4_noabort(i32 %4)
  %5 = load ptr, ptr %init_name.i.i.i, align 8
  %tobool.not.i.i.i = icmp eq ptr %5, null
  br i1 %tobool.not.i.i.i, label %regmap_name.exit.thread14.i, label %if.then.i.i.trace_event_get_offsets_regmap_block.exit_crit_edge

if.then.i.i.trace_event_get_offsets_regmap_block.exit_crit_edge: ; preds = %if.then.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %trace_event_get_offsets_regmap_block.exit

regmap_name.exit.i:                               ; preds = %entry
  %name.i.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 10
  %6 = ptrtoint ptr %name.i.i to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load ptr, ptr %name.i.i, align 4
  %tobool.not.i = icmp eq ptr %7, null
  br i1 %tobool.not.i, label %regmap_name.exit.i.trace_event_get_offsets_regmap_block.exit_crit_edge, label %regmap_name.exit.i.return.sink.split.i9.i_crit_edge

regmap_name.exit.i.return.sink.split.i9.i_crit_edge: ; preds = %regmap_name.exit.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %return.sink.split.i9.i

regmap_name.exit.i.trace_event_get_offsets_regmap_block.exit_crit_edge: ; preds = %regmap_name.exit.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %trace_event_get_offsets_regmap_block.exit

regmap_name.exit.thread14.i:                      ; preds = %if.then.i.i
  %8 = ptrtoint ptr %3 to i32
  call void @__asan_load4_noabort(i32 %8)
  %9 = load ptr, ptr %3, align 4
  %tobool.not16.i = icmp eq ptr %9, null
  br i1 %tobool.not16.i, label %regmap_name.exit.thread14.i.trace_event_get_offsets_regmap_block.exit_crit_edge, label %regmap_name.exit.thread14.i.return.sink.split.i9.i_crit_edge

regmap_name.exit.thread14.i.return.sink.split.i9.i_crit_edge: ; preds = %regmap_name.exit.thread14.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %return.sink.split.i9.i

regmap_name.exit.thread14.i.trace_event_get_offsets_regmap_block.exit_crit_edge: ; preds = %regmap_name.exit.thread14.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %trace_event_get_offsets_regmap_block.exit

return.sink.split.i9.i:                           ; preds = %regmap_name.exit.thread14.i.return.sink.split.i9.i_crit_edge, %regmap_name.exit.i.return.sink.split.i9.i_crit_edge
  %.sink.i8.i = phi ptr [ %name.i.i, %regmap_name.exit.i.return.sink.split.i9.i_crit_edge ], [ %3, %regmap_name.exit.thread14.i.return.sink.split.i9.i_crit_edge ]
  %10 = ptrtoint ptr %.sink.i8.i to i32
  call void @__asan_load4_noabort(i32 %10)
  %11 = load ptr, ptr %.sink.i8.i, align 4
  br label %trace_event_get_offsets_regmap_block.exit

trace_event_get_offsets_regmap_block.exit:        ; preds = %return.sink.split.i9.i, %regmap_name.exit.thread14.i.trace_event_get_offsets_regmap_block.exit_crit_edge, %regmap_name.exit.i.trace_event_get_offsets_regmap_block.exit_crit_edge, %if.then.i.i.trace_event_get_offsets_regmap_block.exit_crit_edge
  %cond.i = phi ptr [ @.str.41, %regmap_name.exit.i.trace_event_get_offsets_regmap_block.exit_crit_edge ], [ @.str.41, %regmap_name.exit.thread14.i.trace_event_get_offsets_regmap_block.exit_crit_edge ], [ %11, %return.sink.split.i9.i ], [ %5, %if.then.i.i.trace_event_get_offsets_regmap_block.exit_crit_edge ]
  %call3.i = tail call i32 @strlen(ptr noundef %cond.i) #27
  %add.i = shl i32 %call3.i, 16
  %or.i = add i32 %add.i, 65556
  %perf_events = getelementptr inbounds %struct.trace_event_call, ptr %__data, i32 0, i32 10
  %12 = ptrtoint ptr %perf_events to i32
  call void @__asan_load4_noabort(i32 %12)
  %13 = load ptr, ptr %perf_events, align 4
  %14 = ptrtoint ptr %13 to i32
  %15 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i = and i32 %15, -16384
  %16 = inttoptr i32 %and.i to ptr
  %cpu = getelementptr inbounds %struct.thread_info, ptr %16, i32 0, i32 3
  %17 = ptrtoint ptr %cpu to i32
  call void @__asan_load4_noabort(i32 %17)
  %18 = load i32, ptr %cpu, align 4
  %arrayidx = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %18
  %19 = ptrtoint ptr %arrayidx to i32
  call void @__asan_load4_noabort(i32 %19)
  %20 = load i32, ptr %arrayidx, align 4
  %add = add i32 %20, %14
  %21 = inttoptr i32 %add to ptr
  %prog_array.i = getelementptr inbounds %struct.trace_event_call, ptr %__data, i32 0, i32 11
  %22 = ptrtoint ptr %prog_array.i to i32
  call void @__asan_load4_noabort(i32 %22)
  %23 = load volatile ptr, ptr %prog_array.i, align 4
  %tobool.i.not = icmp eq ptr %23, null
  br i1 %tobool.i.not, label %land.lhs.true7, label %trace_event_get_offsets_regmap_block.exit.if.end_crit_edge

trace_event_get_offsets_regmap_block.exit.if.end_crit_edge: ; preds = %trace_event_get_offsets_regmap_block.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

land.lhs.true7:                                   ; preds = %trace_event_get_offsets_regmap_block.exit
  %24 = ptrtoint ptr %21 to i32
  call void @__asan_load4_noabort(i32 %24)
  %25 = load volatile ptr, ptr %21, align 4
  %tobool.not.i51.not = icmp eq ptr %25, null
  br i1 %tobool.not.i51.not, label %land.lhs.true7.cleanup_crit_edge, label %land.lhs.true7.if.end_crit_edge

land.lhs.true7.if.end_crit_edge:                  ; preds = %land.lhs.true7
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

land.lhs.true7.cleanup_crit_edge:                 ; preds = %land.lhs.true7
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end:                                           ; preds = %land.lhs.true7.if.end_crit_edge, %trace_event_get_offsets_regmap_block.exit.if.end_crit_edge
  %add12 = add i32 %call3.i, 32
  %and = and i32 %add12, -8
  %sub = add i32 %and, -4
  %call13 = call ptr @perf_trace_buf_alloc(i32 noundef %sub, ptr noundef nonnull %__regs, ptr noundef nonnull %rctx) #24
  %tobool14.not = icmp eq ptr %call13, null
  br i1 %tobool14.not, label %if.end.cleanup_crit_edge, label %if.end16

if.end.cleanup_crit_edge:                         ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end16:                                         ; preds = %if.end
  %26 = ptrtoint ptr %__regs to i32
  call void @__asan_load4_noabort(i32 %26)
  %27 = load ptr, ptr %__regs, align 4
  %28 = call ptr @llvm.returnaddress(i32 0) #24
  %29 = ptrtoint ptr %28 to i32
  %arrayidx.i = getelementptr [18 x i32], ptr %27, i32 0, i32 15
  %30 = ptrtoint ptr %arrayidx.i to i32
  call void @__asan_store4_noabort(i32 %30)
  store i32 %29, ptr %arrayidx.i, align 4
  %31 = call ptr @llvm.frameaddress.p0(i32 0) #24
  %32 = ptrtoint ptr %31 to i32
  %arrayidx2.i = getelementptr [18 x i32], ptr %27, i32 0, i32 11
  %33 = ptrtoint ptr %arrayidx2.i to i32
  call void @__asan_store4_noabort(i32 %33)
  store i32 %32, ptr %arrayidx2.i, align 4
  %34 = call i32 @llvm.read_register.i32(metadata !376) #24
  %arrayidx4.i = getelementptr [18 x i32], ptr %27, i32 0, i32 13
  %35 = ptrtoint ptr %arrayidx4.i to i32
  call void @__asan_store4_noabort(i32 %35)
  store i32 %34, ptr %arrayidx4.i, align 4
  %arrayidx6.i = getelementptr [18 x i32], ptr %27, i32 0, i32 16
  %36 = ptrtoint ptr %arrayidx6.i to i32
  call void @__asan_store4_noabort(i32 %36)
  store i32 19, ptr %arrayidx6.i, align 4
  %__data_loc_name = getelementptr inbounds %struct.trace_event_raw_regmap_block, ptr %call13, i32 0, i32 1
  %37 = ptrtoint ptr %__data_loc_name to i32
  call void @__asan_store4_noabort(i32 %37)
  store i32 %or.i, ptr %__data_loc_name, align 4
  %add.ptr = getelementptr i8, ptr %call13, i32 20
  %38 = ptrtoint ptr %dev.i.i to i32
  call void @__asan_load4_noabort(i32 %38)
  %39 = load ptr, ptr %dev.i.i, align 4
  %tobool.not.i52 = icmp eq ptr %39, null
  br i1 %tobool.not.i52, label %regmap_name.exit, label %if.then.i

if.then.i:                                        ; preds = %if.end16
  %init_name.i.i = getelementptr inbounds %struct.device, ptr %39, i32 0, i32 3
  %40 = ptrtoint ptr %init_name.i.i to i32
  call void @__asan_load4_noabort(i32 %40)
  %41 = load ptr, ptr %init_name.i.i, align 8
  %tobool.not.i.i53 = icmp eq ptr %41, null
  br i1 %tobool.not.i.i53, label %regmap_name.exit.thread67, label %if.then.i.cond.end_crit_edge

if.then.i.cond.end_crit_edge:                     ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %cond.end

regmap_name.exit:                                 ; preds = %if.end16
  %name.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 10
  %42 = ptrtoint ptr %name.i to i32
  call void @__asan_load4_noabort(i32 %42)
  %43 = load ptr, ptr %name.i, align 4
  %tobool20.not = icmp eq ptr %43, null
  br i1 %tobool20.not, label %regmap_name.exit.cond.end_crit_edge, label %regmap_name.exit.return.sink.split.i62_crit_edge

regmap_name.exit.return.sink.split.i62_crit_edge: ; preds = %regmap_name.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %return.sink.split.i62

regmap_name.exit.cond.end_crit_edge:              ; preds = %regmap_name.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %cond.end

regmap_name.exit.thread67:                        ; preds = %if.then.i
  %44 = ptrtoint ptr %39 to i32
  call void @__asan_load4_noabort(i32 %44)
  %45 = load ptr, ptr %39, align 4
  %tobool20.not69 = icmp eq ptr %45, null
  br i1 %tobool20.not69, label %regmap_name.exit.thread67.cond.end_crit_edge, label %regmap_name.exit.thread67.return.sink.split.i62_crit_edge

regmap_name.exit.thread67.return.sink.split.i62_crit_edge: ; preds = %regmap_name.exit.thread67
  call void @__sanitizer_cov_trace_pc() #26
  br label %return.sink.split.i62

regmap_name.exit.thread67.cond.end_crit_edge:     ; preds = %regmap_name.exit.thread67
  call void @__sanitizer_cov_trace_pc() #26
  br label %cond.end

return.sink.split.i62:                            ; preds = %regmap_name.exit.thread67.return.sink.split.i62_crit_edge, %regmap_name.exit.return.sink.split.i62_crit_edge
  %.sink.i61 = phi ptr [ %name.i, %regmap_name.exit.return.sink.split.i62_crit_edge ], [ %39, %regmap_name.exit.thread67.return.sink.split.i62_crit_edge ]
  %46 = ptrtoint ptr %.sink.i61 to i32
  call void @__asan_load4_noabort(i32 %46)
  %47 = load ptr, ptr %.sink.i61, align 4
  br label %cond.end

cond.end:                                         ; preds = %return.sink.split.i62, %regmap_name.exit.thread67.cond.end_crit_edge, %regmap_name.exit.cond.end_crit_edge, %if.then.i.cond.end_crit_edge
  %cond = phi ptr [ @.str.41, %regmap_name.exit.cond.end_crit_edge ], [ @.str.41, %regmap_name.exit.thread67.cond.end_crit_edge ], [ %47, %return.sink.split.i62 ], [ %41, %if.then.i.cond.end_crit_edge ]
  %call22 = call ptr @strcpy(ptr noundef %add.ptr, ptr noundef %cond) #28
  %reg23 = getelementptr inbounds %struct.trace_event_raw_regmap_block, ptr %call13, i32 0, i32 2
  %48 = ptrtoint ptr %reg23 to i32
  call void @__asan_store4_noabort(i32 %48)
  store i32 %reg, ptr %reg23, align 4
  %count24 = getelementptr inbounds %struct.trace_event_raw_regmap_block, ptr %call13, i32 0, i32 3
  %49 = ptrtoint ptr %count24 to i32
  call void @__asan_store4_noabort(i32 %49)
  store i32 %count, ptr %count24, align 4
  %50 = ptrtoint ptr %rctx to i32
  call void @__asan_load4_noabort(i32 %50)
  %51 = load i32, ptr %rctx, align 4
  %52 = ptrtoint ptr %__regs to i32
  call void @__asan_load4_noabort(i32 %52)
  %53 = load ptr, ptr %__regs, align 4
  call void @perf_trace_run_bpf_submit(ptr noundef nonnull %call13, i32 noundef %sub, i32 noundef %51, ptr noundef %__data, i64 noundef 1, ptr noundef %53, ptr noundef %21, ptr noundef null) #24
  br label %cleanup

cleanup:                                          ; preds = %cond.end, %if.end.cleanup_crit_edge, %land.lhs.true7.cleanup_crit_edge
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %rctx) #24
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %__regs) #24
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal void @trace_event_raw_event_regcache_sync(ptr noundef %__data, ptr nocapture noundef readonly %map, ptr noundef readonly %type, ptr noundef readonly %status) #0 align 64 {
entry:
  %fbuffer = alloca %struct.trace_event_buffer, align 4
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %fbuffer) #24
  %flags.i = getelementptr inbounds %struct.trace_event_file, ptr %__data, i32 0, i32 7
  %0 = call ptr @memset(ptr %fbuffer, i32 255, i32 24)
  %1 = ptrtoint ptr %flags.i to i32
  call void @__asan_load4_noabort(i32 %1)
  %2 = load i32, ptr %flags.i, align 4
  %and.i = and i32 %2, 704
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i)
  %tobool.not.i = icmp eq i32 %and.i, 0
  br i1 %tobool.not.i, label %entry.if.end_crit_edge, label %if.end.i, !prof !386

entry.if.end_crit_edge:                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

if.end.i:                                         ; preds = %entry
  %and4.i = and i32 %2, 256
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and4.i)
  %tobool5.not.i = icmp eq i32 %and4.i, 0
  br i1 %tobool5.not.i, label %trace_trigger_soft_disabled.exit, label %if.end.i.if.end_crit_edge, !prof !387

if.end.i.if.end_crit_edge:                        ; preds = %if.end.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

trace_trigger_soft_disabled.exit:                 ; preds = %if.end.i
  %call.i = tail call zeroext i1 @__trace_trigger_soft_disabled(ptr noundef %__data) #24
  br i1 %call.i, label %trace_trigger_soft_disabled.exit.cleanup_crit_edge, label %trace_trigger_soft_disabled.exit.if.end_crit_edge

trace_trigger_soft_disabled.exit.if.end_crit_edge: ; preds = %trace_trigger_soft_disabled.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

trace_trigger_soft_disabled.exit.cleanup_crit_edge: ; preds = %trace_trigger_soft_disabled.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end:                                           ; preds = %trace_trigger_soft_disabled.exit.if.end_crit_edge, %if.end.i.if.end_crit_edge, %entry.if.end_crit_edge
  %dev.i.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 5
  %3 = ptrtoint ptr %dev.i.i to i32
  call void @__asan_load4_noabort(i32 %3)
  %4 = load ptr, ptr %dev.i.i, align 4
  %tobool.not.i.i = icmp eq ptr %4, null
  br i1 %tobool.not.i.i, label %regmap_name.exit.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.end
  %init_name.i.i.i = getelementptr inbounds %struct.device, ptr %4, i32 0, i32 3
  %5 = ptrtoint ptr %init_name.i.i.i to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load ptr, ptr %init_name.i.i.i, align 8
  %tobool.not.i.i.i = icmp eq ptr %6, null
  br i1 %tobool.not.i.i.i, label %regmap_name.exit.thread67.i, label %if.then.i.i.trace_event_get_offsets_regcache_sync.exit_crit_edge

if.then.i.i.trace_event_get_offsets_regcache_sync.exit_crit_edge: ; preds = %if.then.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %trace_event_get_offsets_regcache_sync.exit

regmap_name.exit.i:                               ; preds = %if.end
  %name.i.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 10
  %7 = ptrtoint ptr %name.i.i to i32
  call void @__asan_load4_noabort(i32 %7)
  %8 = load ptr, ptr %name.i.i, align 4
  %tobool.not.i51 = icmp eq ptr %8, null
  br i1 %tobool.not.i51, label %regmap_name.exit.i.trace_event_get_offsets_regcache_sync.exit_crit_edge, label %regmap_name.exit.i.return.sink.split.i62.i_crit_edge

regmap_name.exit.i.return.sink.split.i62.i_crit_edge: ; preds = %regmap_name.exit.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %return.sink.split.i62.i

regmap_name.exit.i.trace_event_get_offsets_regcache_sync.exit_crit_edge: ; preds = %regmap_name.exit.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %trace_event_get_offsets_regcache_sync.exit

regmap_name.exit.thread67.i:                      ; preds = %if.then.i.i
  %9 = ptrtoint ptr %4 to i32
  call void @__asan_load4_noabort(i32 %9)
  %10 = load ptr, ptr %4, align 4
  %tobool.not69.i = icmp eq ptr %10, null
  br i1 %tobool.not69.i, label %regmap_name.exit.thread67.i.trace_event_get_offsets_regcache_sync.exit_crit_edge, label %regmap_name.exit.thread67.i.return.sink.split.i62.i_crit_edge

regmap_name.exit.thread67.i.return.sink.split.i62.i_crit_edge: ; preds = %regmap_name.exit.thread67.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %return.sink.split.i62.i

regmap_name.exit.thread67.i.trace_event_get_offsets_regcache_sync.exit_crit_edge: ; preds = %regmap_name.exit.thread67.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %trace_event_get_offsets_regcache_sync.exit

return.sink.split.i62.i:                          ; preds = %regmap_name.exit.thread67.i.return.sink.split.i62.i_crit_edge, %regmap_name.exit.i.return.sink.split.i62.i_crit_edge
  %.sink.i61.i = phi ptr [ %name.i.i, %regmap_name.exit.i.return.sink.split.i62.i_crit_edge ], [ %4, %regmap_name.exit.thread67.i.return.sink.split.i62.i_crit_edge ]
  %11 = ptrtoint ptr %.sink.i61.i to i32
  call void @__asan_load4_noabort(i32 %11)
  %12 = load ptr, ptr %.sink.i61.i, align 4
  br label %trace_event_get_offsets_regcache_sync.exit

trace_event_get_offsets_regcache_sync.exit:       ; preds = %return.sink.split.i62.i, %regmap_name.exit.thread67.i.trace_event_get_offsets_regcache_sync.exit_crit_edge, %regmap_name.exit.i.trace_event_get_offsets_regcache_sync.exit_crit_edge, %if.then.i.i.trace_event_get_offsets_regcache_sync.exit_crit_edge
  %cond.i = phi ptr [ @.str.41, %regmap_name.exit.i.trace_event_get_offsets_regcache_sync.exit_crit_edge ], [ @.str.41, %regmap_name.exit.thread67.i.trace_event_get_offsets_regcache_sync.exit_crit_edge ], [ %12, %return.sink.split.i62.i ], [ %6, %if.then.i.i.trace_event_get_offsets_regcache_sync.exit_crit_edge ]
  %call3.i = tail call i32 @strlen(ptr noundef %cond.i) #27
  %add.i = add i32 %call3.i, 1
  %tobool7.not.i = icmp eq ptr %status, null
  %spec.select.i = select i1 %tobool7.not.i, ptr @.str.41, ptr %status
  %call12.i = tail call i32 @strlen(ptr noundef nonnull %spec.select.i) #27
  %add13.i = add i32 %call12.i, 1
  %tobool21.not.i = icmp eq ptr %type, null
  %cond25.i = select i1 %tobool21.not.i, ptr @.str.41, ptr %type
  %add20.i = add i32 %add13.i, %add.i
  %call26.i = tail call i32 @strlen(ptr noundef nonnull %cond25.i) #27
  %add27.i = add i32 %call26.i, 1
  %add34.i = add i32 %add20.i, 20
  %add = add i32 %add34.i, %add27.i
  %call3 = call ptr @trace_event_buffer_reserve(ptr noundef nonnull %fbuffer, ptr noundef %__data, i32 noundef %add) #24
  %tobool.not = icmp eq ptr %call3, null
  br i1 %tobool.not, label %trace_event_get_offsets_regcache_sync.exit.cleanup_crit_edge, label %if.end5

trace_event_get_offsets_regcache_sync.exit.cleanup_crit_edge: ; preds = %trace_event_get_offsets_regcache_sync.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end5:                                          ; preds = %trace_event_get_offsets_regcache_sync.exit
  %shl31.i = shl i32 %add27.i, 16
  %or33.i = or i32 %shl31.i, %add34.i
  %shl17.i = shl i32 %add13.i, 16
  %add15.i = add i32 %call3.i, 21
  %or19.i = or i32 %shl17.i, %add15.i
  %shl.i = shl i32 %add.i, 16
  %or.i = or i32 %shl.i, 20
  %__data_loc_name = getelementptr inbounds %struct.trace_event_raw_regcache_sync, ptr %call3, i32 0, i32 1
  %13 = ptrtoint ptr %__data_loc_name to i32
  call void @__asan_store4_noabort(i32 %13)
  store i32 %or.i, ptr %__data_loc_name, align 4
  %__data_loc_status = getelementptr inbounds %struct.trace_event_raw_regcache_sync, ptr %call3, i32 0, i32 2
  %14 = ptrtoint ptr %__data_loc_status to i32
  call void @__asan_store4_noabort(i32 %14)
  store i32 %or19.i, ptr %__data_loc_status, align 4
  %__data_loc_type = getelementptr inbounds %struct.trace_event_raw_regcache_sync, ptr %call3, i32 0, i32 3
  %15 = ptrtoint ptr %__data_loc_type to i32
  call void @__asan_store4_noabort(i32 %15)
  store i32 %or33.i, ptr %__data_loc_type, align 4
  %add.ptr = getelementptr i8, ptr %call3, i32 20
  %16 = ptrtoint ptr %dev.i.i to i32
  call void @__asan_load4_noabort(i32 %16)
  %17 = load ptr, ptr %dev.i.i, align 4
  %tobool.not.i52 = icmp eq ptr %17, null
  br i1 %tobool.not.i52, label %regmap_name.exit, label %if.then.i

if.then.i:                                        ; preds = %if.end5
  %init_name.i.i = getelementptr inbounds %struct.device, ptr %17, i32 0, i32 3
  %18 = ptrtoint ptr %init_name.i.i to i32
  call void @__asan_load4_noabort(i32 %18)
  %19 = load ptr, ptr %init_name.i.i, align 8
  %tobool.not.i.i53 = icmp eq ptr %19, null
  br i1 %tobool.not.i.i53, label %regmap_name.exit.thread70, label %if.then.i.cond.end_crit_edge

if.then.i.cond.end_crit_edge:                     ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %cond.end

regmap_name.exit:                                 ; preds = %if.end5
  %name.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 10
  %20 = ptrtoint ptr %name.i to i32
  call void @__asan_load4_noabort(i32 %20)
  %21 = load ptr, ptr %name.i, align 4
  %tobool10.not = icmp eq ptr %21, null
  br i1 %tobool10.not, label %regmap_name.exit.cond.end_crit_edge, label %regmap_name.exit.return.sink.split.i64_crit_edge

regmap_name.exit.return.sink.split.i64_crit_edge: ; preds = %regmap_name.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %return.sink.split.i64

regmap_name.exit.cond.end_crit_edge:              ; preds = %regmap_name.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %cond.end

regmap_name.exit.thread70:                        ; preds = %if.then.i
  %22 = ptrtoint ptr %17 to i32
  call void @__asan_load4_noabort(i32 %22)
  %23 = load ptr, ptr %17, align 4
  %tobool10.not72 = icmp eq ptr %23, null
  br i1 %tobool10.not72, label %regmap_name.exit.thread70.cond.end_crit_edge, label %regmap_name.exit.thread70.return.sink.split.i64_crit_edge

regmap_name.exit.thread70.return.sink.split.i64_crit_edge: ; preds = %regmap_name.exit.thread70
  call void @__sanitizer_cov_trace_pc() #26
  br label %return.sink.split.i64

regmap_name.exit.thread70.cond.end_crit_edge:     ; preds = %regmap_name.exit.thread70
  call void @__sanitizer_cov_trace_pc() #26
  br label %cond.end

return.sink.split.i64:                            ; preds = %regmap_name.exit.thread70.return.sink.split.i64_crit_edge, %regmap_name.exit.return.sink.split.i64_crit_edge
  %.sink.i63 = phi ptr [ %name.i, %regmap_name.exit.return.sink.split.i64_crit_edge ], [ %17, %regmap_name.exit.thread70.return.sink.split.i64_crit_edge ]
  %24 = ptrtoint ptr %.sink.i63 to i32
  call void @__asan_load4_noabort(i32 %24)
  %25 = load ptr, ptr %.sink.i63, align 4
  br label %cond.end

cond.end:                                         ; preds = %return.sink.split.i64, %regmap_name.exit.thread70.cond.end_crit_edge, %regmap_name.exit.cond.end_crit_edge, %if.then.i.cond.end_crit_edge
  %cond = phi ptr [ @.str.41, %regmap_name.exit.cond.end_crit_edge ], [ @.str.41, %regmap_name.exit.thread70.cond.end_crit_edge ], [ %25, %return.sink.split.i64 ], [ %19, %if.then.i.cond.end_crit_edge ]
  %call12 = call ptr @strcpy(ptr noundef %add.ptr, ptr noundef %cond) #28
  %26 = ptrtoint ptr %__data_loc_status to i32
  call void @__asan_load4_noabort(i32 %26)
  %27 = load i32, ptr %__data_loc_status, align 4
  %and14 = and i32 %27, 65535
  %add.ptr15 = getelementptr i8, ptr %call3, i32 %and14
  %call21 = call ptr @strcpy(ptr noundef %add.ptr15, ptr noundef nonnull %spec.select.i) #28
  %28 = ptrtoint ptr %__data_loc_type to i32
  call void @__asan_load4_noabort(i32 %28)
  %29 = load i32, ptr %__data_loc_type, align 4
  %and23 = and i32 %29, 65535
  %add.ptr24 = getelementptr i8, ptr %call3, i32 %and23
  %call30 = call ptr @strcpy(ptr noundef %add.ptr24, ptr noundef nonnull %cond25.i) #28
  call void @trace_event_buffer_commit(ptr noundef nonnull %fbuffer) #24
  br label %cleanup

cleanup:                                          ; preds = %cond.end, %trace_event_get_offsets_regcache_sync.exit.cleanup_crit_edge, %trace_trigger_soft_disabled.exit.cleanup_crit_edge
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %fbuffer) #24
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal void @perf_trace_regcache_sync(ptr noundef %__data, ptr nocapture noundef readonly %map, ptr noundef readonly %type, ptr noundef readonly %status) #0 align 64 {
entry:
  %__regs = alloca ptr, align 4
  %rctx = alloca i32, align 4
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %__regs) #24
  %0 = ptrtoint ptr %__regs to i32
  call void @__asan_store4_noabort(i32 %0)
  store ptr inttoptr (i32 -1 to ptr), ptr %__regs, align 4, !annotation !388
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %rctx) #24
  %1 = ptrtoint ptr %rctx to i32
  call void @__asan_store4_noabort(i32 %1)
  store i32 -1, ptr %rctx, align 4, !annotation !388
  %dev.i.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 5
  %2 = ptrtoint ptr %dev.i.i to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load ptr, ptr %dev.i.i, align 4
  %tobool.not.i.i = icmp eq ptr %3, null
  br i1 %tobool.not.i.i, label %regmap_name.exit.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %entry
  %init_name.i.i.i = getelementptr inbounds %struct.device, ptr %3, i32 0, i32 3
  %4 = ptrtoint ptr %init_name.i.i.i to i32
  call void @__asan_load4_noabort(i32 %4)
  %5 = load ptr, ptr %init_name.i.i.i, align 8
  %tobool.not.i.i.i = icmp eq ptr %5, null
  br i1 %tobool.not.i.i.i, label %regmap_name.exit.thread67.i, label %if.then.i.i.trace_event_get_offsets_regcache_sync.exit_crit_edge

if.then.i.i.trace_event_get_offsets_regcache_sync.exit_crit_edge: ; preds = %if.then.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %trace_event_get_offsets_regcache_sync.exit

regmap_name.exit.i:                               ; preds = %entry
  %name.i.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 10
  %6 = ptrtoint ptr %name.i.i to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load ptr, ptr %name.i.i, align 4
  %tobool.not.i = icmp eq ptr %7, null
  br i1 %tobool.not.i, label %regmap_name.exit.i.trace_event_get_offsets_regcache_sync.exit_crit_edge, label %regmap_name.exit.i.return.sink.split.i62.i_crit_edge

regmap_name.exit.i.return.sink.split.i62.i_crit_edge: ; preds = %regmap_name.exit.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %return.sink.split.i62.i

regmap_name.exit.i.trace_event_get_offsets_regcache_sync.exit_crit_edge: ; preds = %regmap_name.exit.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %trace_event_get_offsets_regcache_sync.exit

regmap_name.exit.thread67.i:                      ; preds = %if.then.i.i
  %8 = ptrtoint ptr %3 to i32
  call void @__asan_load4_noabort(i32 %8)
  %9 = load ptr, ptr %3, align 4
  %tobool.not69.i = icmp eq ptr %9, null
  br i1 %tobool.not69.i, label %regmap_name.exit.thread67.i.trace_event_get_offsets_regcache_sync.exit_crit_edge, label %regmap_name.exit.thread67.i.return.sink.split.i62.i_crit_edge

regmap_name.exit.thread67.i.return.sink.split.i62.i_crit_edge: ; preds = %regmap_name.exit.thread67.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %return.sink.split.i62.i

regmap_name.exit.thread67.i.trace_event_get_offsets_regcache_sync.exit_crit_edge: ; preds = %regmap_name.exit.thread67.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %trace_event_get_offsets_regcache_sync.exit

return.sink.split.i62.i:                          ; preds = %regmap_name.exit.thread67.i.return.sink.split.i62.i_crit_edge, %regmap_name.exit.i.return.sink.split.i62.i_crit_edge
  %.sink.i61.i = phi ptr [ %name.i.i, %regmap_name.exit.i.return.sink.split.i62.i_crit_edge ], [ %3, %regmap_name.exit.thread67.i.return.sink.split.i62.i_crit_edge ]
  %10 = ptrtoint ptr %.sink.i61.i to i32
  call void @__asan_load4_noabort(i32 %10)
  %11 = load ptr, ptr %.sink.i61.i, align 4
  br label %trace_event_get_offsets_regcache_sync.exit

trace_event_get_offsets_regcache_sync.exit:       ; preds = %return.sink.split.i62.i, %regmap_name.exit.thread67.i.trace_event_get_offsets_regcache_sync.exit_crit_edge, %regmap_name.exit.i.trace_event_get_offsets_regcache_sync.exit_crit_edge, %if.then.i.i.trace_event_get_offsets_regcache_sync.exit_crit_edge
  %cond.i = phi ptr [ @.str.41, %regmap_name.exit.i.trace_event_get_offsets_regcache_sync.exit_crit_edge ], [ @.str.41, %regmap_name.exit.thread67.i.trace_event_get_offsets_regcache_sync.exit_crit_edge ], [ %11, %return.sink.split.i62.i ], [ %5, %if.then.i.i.trace_event_get_offsets_regcache_sync.exit_crit_edge ]
  %call3.i = tail call i32 @strlen(ptr noundef %cond.i) #27
  %add.i = add i32 %call3.i, 1
  %shl.i = shl i32 %add.i, 16
  %or.i = or i32 %shl.i, 20
  %tobool7.not.i = icmp eq ptr %status, null
  %spec.select.i = select i1 %tobool7.not.i, ptr @.str.41, ptr %status
  %call12.i = tail call i32 @strlen(ptr noundef nonnull %spec.select.i) #27
  %add13.i = add i32 %call12.i, 1
  %add15.i = add i32 %call3.i, 21
  %shl17.i = shl i32 %add13.i, 16
  %or19.i = or i32 %shl17.i, %add15.i
  %tobool21.not.i = icmp eq ptr %type, null
  %cond25.i = select i1 %tobool21.not.i, ptr @.str.41, ptr %type
  %add20.i = add i32 %add13.i, %add.i
  %call26.i = tail call i32 @strlen(ptr noundef nonnull %cond25.i) #27
  %add27.i = add i32 %call26.i, 1
  %add29.i = add i32 %add20.i, 20
  %shl31.i = shl i32 %add27.i, 16
  %or33.i = or i32 %shl31.i, %add29.i
  %perf_events = getelementptr inbounds %struct.trace_event_call, ptr %__data, i32 0, i32 10
  %12 = ptrtoint ptr %perf_events to i32
  call void @__asan_load4_noabort(i32 %12)
  %13 = load ptr, ptr %perf_events, align 4
  %14 = ptrtoint ptr %13 to i32
  %15 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i = and i32 %15, -16384
  %16 = inttoptr i32 %and.i to ptr
  %cpu = getelementptr inbounds %struct.thread_info, ptr %16, i32 0, i32 3
  %17 = ptrtoint ptr %cpu to i32
  call void @__asan_load4_noabort(i32 %17)
  %18 = load i32, ptr %cpu, align 4
  %arrayidx = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %18
  %19 = ptrtoint ptr %arrayidx to i32
  call void @__asan_load4_noabort(i32 %19)
  %20 = load i32, ptr %arrayidx, align 4
  %add = add i32 %20, %14
  %21 = inttoptr i32 %add to ptr
  %prog_array.i = getelementptr inbounds %struct.trace_event_call, ptr %__data, i32 0, i32 11
  %22 = ptrtoint ptr %prog_array.i to i32
  call void @__asan_load4_noabort(i32 %22)
  %23 = load volatile ptr, ptr %prog_array.i, align 4
  %tobool.i.not = icmp eq ptr %23, null
  br i1 %tobool.i.not, label %land.lhs.true7, label %trace_event_get_offsets_regcache_sync.exit.if.end_crit_edge

trace_event_get_offsets_regcache_sync.exit.if.end_crit_edge: ; preds = %trace_event_get_offsets_regcache_sync.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

land.lhs.true7:                                   ; preds = %trace_event_get_offsets_regcache_sync.exit
  %24 = ptrtoint ptr %21 to i32
  call void @__asan_load4_noabort(i32 %24)
  %25 = load volatile ptr, ptr %21, align 4
  %tobool.not.i75.not = icmp eq ptr %25, null
  br i1 %tobool.not.i75.not, label %land.lhs.true7.cleanup_crit_edge, label %land.lhs.true7.if.end_crit_edge

land.lhs.true7.if.end_crit_edge:                  ; preds = %land.lhs.true7
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

land.lhs.true7.cleanup_crit_edge:                 ; preds = %land.lhs.true7
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end:                                           ; preds = %land.lhs.true7.if.end_crit_edge, %trace_event_get_offsets_regcache_sync.exit.if.end_crit_edge
  %add34.i = add i32 %add20.i, 31
  %add12 = add i32 %add34.i, %add27.i
  %and = and i32 %add12, -8
  %sub = add i32 %and, -4
  %call13 = call ptr @perf_trace_buf_alloc(i32 noundef %sub, ptr noundef nonnull %__regs, ptr noundef nonnull %rctx) #24
  %tobool14.not = icmp eq ptr %call13, null
  br i1 %tobool14.not, label %if.end.cleanup_crit_edge, label %if.end16

if.end.cleanup_crit_edge:                         ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end16:                                         ; preds = %if.end
  %26 = ptrtoint ptr %__regs to i32
  call void @__asan_load4_noabort(i32 %26)
  %27 = load ptr, ptr %__regs, align 4
  %28 = call ptr @llvm.returnaddress(i32 0) #24
  %29 = ptrtoint ptr %28 to i32
  %arrayidx.i = getelementptr [18 x i32], ptr %27, i32 0, i32 15
  %30 = ptrtoint ptr %arrayidx.i to i32
  call void @__asan_store4_noabort(i32 %30)
  store i32 %29, ptr %arrayidx.i, align 4
  %31 = call ptr @llvm.frameaddress.p0(i32 0) #24
  %32 = ptrtoint ptr %31 to i32
  %arrayidx2.i = getelementptr [18 x i32], ptr %27, i32 0, i32 11
  %33 = ptrtoint ptr %arrayidx2.i to i32
  call void @__asan_store4_noabort(i32 %33)
  store i32 %32, ptr %arrayidx2.i, align 4
  %34 = call i32 @llvm.read_register.i32(metadata !376) #24
  %arrayidx4.i = getelementptr [18 x i32], ptr %27, i32 0, i32 13
  %35 = ptrtoint ptr %arrayidx4.i to i32
  call void @__asan_store4_noabort(i32 %35)
  store i32 %34, ptr %arrayidx4.i, align 4
  %arrayidx6.i = getelementptr [18 x i32], ptr %27, i32 0, i32 16
  %36 = ptrtoint ptr %arrayidx6.i to i32
  call void @__asan_store4_noabort(i32 %36)
  store i32 19, ptr %arrayidx6.i, align 4
  %__data_loc_name = getelementptr inbounds %struct.trace_event_raw_regcache_sync, ptr %call13, i32 0, i32 1
  %37 = ptrtoint ptr %__data_loc_name to i32
  call void @__asan_store4_noabort(i32 %37)
  store i32 %or.i, ptr %__data_loc_name, align 4
  %__data_loc_status = getelementptr inbounds %struct.trace_event_raw_regcache_sync, ptr %call13, i32 0, i32 2
  %38 = ptrtoint ptr %__data_loc_status to i32
  call void @__asan_store4_noabort(i32 %38)
  store i32 %or19.i, ptr %__data_loc_status, align 4
  %__data_loc_type = getelementptr inbounds %struct.trace_event_raw_regcache_sync, ptr %call13, i32 0, i32 3
  %39 = ptrtoint ptr %__data_loc_type to i32
  call void @__asan_store4_noabort(i32 %39)
  store i32 %or33.i, ptr %__data_loc_type, align 4
  %add.ptr = getelementptr i8, ptr %call13, i32 20
  %40 = ptrtoint ptr %dev.i.i to i32
  call void @__asan_load4_noabort(i32 %40)
  %41 = load ptr, ptr %dev.i.i, align 4
  %tobool.not.i76 = icmp eq ptr %41, null
  br i1 %tobool.not.i76, label %regmap_name.exit, label %if.then.i

if.then.i:                                        ; preds = %if.end16
  %init_name.i.i = getelementptr inbounds %struct.device, ptr %41, i32 0, i32 3
  %42 = ptrtoint ptr %init_name.i.i to i32
  call void @__asan_load4_noabort(i32 %42)
  %43 = load ptr, ptr %init_name.i.i, align 8
  %tobool.not.i.i77 = icmp eq ptr %43, null
  br i1 %tobool.not.i.i77, label %regmap_name.exit.thread91, label %if.then.i.cond.end_crit_edge

if.then.i.cond.end_crit_edge:                     ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %cond.end

regmap_name.exit:                                 ; preds = %if.end16
  %name.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 10
  %44 = ptrtoint ptr %name.i to i32
  call void @__asan_load4_noabort(i32 %44)
  %45 = load ptr, ptr %name.i, align 4
  %tobool22.not = icmp eq ptr %45, null
  br i1 %tobool22.not, label %regmap_name.exit.cond.end_crit_edge, label %regmap_name.exit.return.sink.split.i86_crit_edge

regmap_name.exit.return.sink.split.i86_crit_edge: ; preds = %regmap_name.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %return.sink.split.i86

regmap_name.exit.cond.end_crit_edge:              ; preds = %regmap_name.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %cond.end

regmap_name.exit.thread91:                        ; preds = %if.then.i
  %46 = ptrtoint ptr %41 to i32
  call void @__asan_load4_noabort(i32 %46)
  %47 = load ptr, ptr %41, align 4
  %tobool22.not93 = icmp eq ptr %47, null
  br i1 %tobool22.not93, label %regmap_name.exit.thread91.cond.end_crit_edge, label %regmap_name.exit.thread91.return.sink.split.i86_crit_edge

regmap_name.exit.thread91.return.sink.split.i86_crit_edge: ; preds = %regmap_name.exit.thread91
  call void @__sanitizer_cov_trace_pc() #26
  br label %return.sink.split.i86

regmap_name.exit.thread91.cond.end_crit_edge:     ; preds = %regmap_name.exit.thread91
  call void @__sanitizer_cov_trace_pc() #26
  br label %cond.end

return.sink.split.i86:                            ; preds = %regmap_name.exit.thread91.return.sink.split.i86_crit_edge, %regmap_name.exit.return.sink.split.i86_crit_edge
  %.sink.i85 = phi ptr [ %name.i, %regmap_name.exit.return.sink.split.i86_crit_edge ], [ %41, %regmap_name.exit.thread91.return.sink.split.i86_crit_edge ]
  %48 = ptrtoint ptr %.sink.i85 to i32
  call void @__asan_load4_noabort(i32 %48)
  %49 = load ptr, ptr %.sink.i85, align 4
  br label %cond.end

cond.end:                                         ; preds = %return.sink.split.i86, %regmap_name.exit.thread91.cond.end_crit_edge, %regmap_name.exit.cond.end_crit_edge, %if.then.i.cond.end_crit_edge
  %cond = phi ptr [ @.str.41, %regmap_name.exit.cond.end_crit_edge ], [ @.str.41, %regmap_name.exit.thread91.cond.end_crit_edge ], [ %49, %return.sink.split.i86 ], [ %43, %if.then.i.cond.end_crit_edge ]
  %call24 = call ptr @strcpy(ptr noundef %add.ptr, ptr noundef %cond) #28
  %50 = ptrtoint ptr %__data_loc_status to i32
  call void @__asan_load4_noabort(i32 %50)
  %51 = load i32, ptr %__data_loc_status, align 4
  %and26 = and i32 %51, 65535
  %add.ptr27 = getelementptr i8, ptr %call13, i32 %and26
  %call33 = call ptr @strcpy(ptr noundef %add.ptr27, ptr noundef nonnull %spec.select.i) #28
  %52 = ptrtoint ptr %__data_loc_type to i32
  call void @__asan_load4_noabort(i32 %52)
  %53 = load i32, ptr %__data_loc_type, align 4
  %and35 = and i32 %53, 65535
  %add.ptr36 = getelementptr i8, ptr %call13, i32 %and35
  %call42 = call ptr @strcpy(ptr noundef %add.ptr36, ptr noundef nonnull %cond25.i) #28
  %54 = ptrtoint ptr %rctx to i32
  call void @__asan_load4_noabort(i32 %54)
  %55 = load i32, ptr %rctx, align 4
  %56 = ptrtoint ptr %__regs to i32
  call void @__asan_load4_noabort(i32 %56)
  %57 = load ptr, ptr %__regs, align 4
  call void @perf_trace_run_bpf_submit(ptr noundef nonnull %call13, i32 noundef %sub, i32 noundef %55, ptr noundef %__data, i64 noundef 1, ptr noundef %57, ptr noundef %21, ptr noundef null) #24
  br label %cleanup

cleanup:                                          ; preds = %cond.end, %if.end.cleanup_crit_edge, %land.lhs.true7.cleanup_crit_edge
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %rctx) #24
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %__regs) #24
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal void @trace_event_raw_event_regmap_bool(ptr noundef %__data, ptr nocapture noundef readonly %map, i1 noundef zeroext %flag) #0 align 64 {
entry:
  %fbuffer = alloca %struct.trace_event_buffer, align 4
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %fbuffer) #24
  %flags.i = getelementptr inbounds %struct.trace_event_file, ptr %__data, i32 0, i32 7
  %0 = call ptr @memset(ptr %fbuffer, i32 255, i32 24)
  %1 = ptrtoint ptr %flags.i to i32
  call void @__asan_load4_noabort(i32 %1)
  %2 = load i32, ptr %flags.i, align 4
  %and.i = and i32 %2, 704
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i)
  %tobool.not.i = icmp eq i32 %and.i, 0
  br i1 %tobool.not.i, label %entry.if.end_crit_edge, label %if.end.i, !prof !386

entry.if.end_crit_edge:                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

if.end.i:                                         ; preds = %entry
  %and4.i = and i32 %2, 256
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and4.i)
  %tobool5.not.i = icmp eq i32 %and4.i, 0
  br i1 %tobool5.not.i, label %trace_trigger_soft_disabled.exit, label %if.end.i.if.end_crit_edge, !prof !387

if.end.i.if.end_crit_edge:                        ; preds = %if.end.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

trace_trigger_soft_disabled.exit:                 ; preds = %if.end.i
  %call.i = tail call zeroext i1 @__trace_trigger_soft_disabled(ptr noundef %__data) #24
  br i1 %call.i, label %trace_trigger_soft_disabled.exit.cleanup_crit_edge, label %trace_trigger_soft_disabled.exit.if.end_crit_edge

trace_trigger_soft_disabled.exit.if.end_crit_edge: ; preds = %trace_trigger_soft_disabled.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

trace_trigger_soft_disabled.exit.cleanup_crit_edge: ; preds = %trace_trigger_soft_disabled.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end:                                           ; preds = %trace_trigger_soft_disabled.exit.if.end_crit_edge, %if.end.i.if.end_crit_edge, %entry.if.end_crit_edge
  %dev.i.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 5
  %3 = ptrtoint ptr %dev.i.i to i32
  call void @__asan_load4_noabort(i32 %3)
  %4 = load ptr, ptr %dev.i.i, align 4
  %tobool.not.i.i = icmp eq ptr %4, null
  br i1 %tobool.not.i.i, label %regmap_name.exit.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.end
  %init_name.i.i.i = getelementptr inbounds %struct.device, ptr %4, i32 0, i32 3
  %5 = ptrtoint ptr %init_name.i.i.i to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load ptr, ptr %init_name.i.i.i, align 8
  %tobool.not.i.i.i = icmp eq ptr %6, null
  br i1 %tobool.not.i.i.i, label %regmap_name.exit.thread14.i, label %if.then.i.i.trace_event_get_offsets_regmap_bool.exit_crit_edge

if.then.i.i.trace_event_get_offsets_regmap_bool.exit_crit_edge: ; preds = %if.then.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %trace_event_get_offsets_regmap_bool.exit

regmap_name.exit.i:                               ; preds = %if.end
  %name.i.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 10
  %7 = ptrtoint ptr %name.i.i to i32
  call void @__asan_load4_noabort(i32 %7)
  %8 = load ptr, ptr %name.i.i, align 4
  %tobool.not.i26 = icmp eq ptr %8, null
  br i1 %tobool.not.i26, label %regmap_name.exit.i.trace_event_get_offsets_regmap_bool.exit_crit_edge, label %regmap_name.exit.i.return.sink.split.i9.i_crit_edge

regmap_name.exit.i.return.sink.split.i9.i_crit_edge: ; preds = %regmap_name.exit.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %return.sink.split.i9.i

regmap_name.exit.i.trace_event_get_offsets_regmap_bool.exit_crit_edge: ; preds = %regmap_name.exit.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %trace_event_get_offsets_regmap_bool.exit

regmap_name.exit.thread14.i:                      ; preds = %if.then.i.i
  %9 = ptrtoint ptr %4 to i32
  call void @__asan_load4_noabort(i32 %9)
  %10 = load ptr, ptr %4, align 4
  %tobool.not16.i = icmp eq ptr %10, null
  br i1 %tobool.not16.i, label %regmap_name.exit.thread14.i.trace_event_get_offsets_regmap_bool.exit_crit_edge, label %regmap_name.exit.thread14.i.return.sink.split.i9.i_crit_edge

regmap_name.exit.thread14.i.return.sink.split.i9.i_crit_edge: ; preds = %regmap_name.exit.thread14.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %return.sink.split.i9.i

regmap_name.exit.thread14.i.trace_event_get_offsets_regmap_bool.exit_crit_edge: ; preds = %regmap_name.exit.thread14.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %trace_event_get_offsets_regmap_bool.exit

return.sink.split.i9.i:                           ; preds = %regmap_name.exit.thread14.i.return.sink.split.i9.i_crit_edge, %regmap_name.exit.i.return.sink.split.i9.i_crit_edge
  %.sink.i8.i = phi ptr [ %name.i.i, %regmap_name.exit.i.return.sink.split.i9.i_crit_edge ], [ %4, %regmap_name.exit.thread14.i.return.sink.split.i9.i_crit_edge ]
  %11 = ptrtoint ptr %.sink.i8.i to i32
  call void @__asan_load4_noabort(i32 %11)
  %12 = load ptr, ptr %.sink.i8.i, align 4
  br label %trace_event_get_offsets_regmap_bool.exit

trace_event_get_offsets_regmap_bool.exit:         ; preds = %return.sink.split.i9.i, %regmap_name.exit.thread14.i.trace_event_get_offsets_regmap_bool.exit_crit_edge, %regmap_name.exit.i.trace_event_get_offsets_regmap_bool.exit_crit_edge, %if.then.i.i.trace_event_get_offsets_regmap_bool.exit_crit_edge
  %cond.i = phi ptr [ @.str.41, %regmap_name.exit.i.trace_event_get_offsets_regmap_bool.exit_crit_edge ], [ @.str.41, %regmap_name.exit.thread14.i.trace_event_get_offsets_regmap_bool.exit_crit_edge ], [ %12, %return.sink.split.i9.i ], [ %6, %if.then.i.i.trace_event_get_offsets_regmap_bool.exit_crit_edge ]
  %call3.i = tail call i32 @strlen(ptr noundef %cond.i) #27
  %add = add i32 %call3.i, 17
  %call3 = call ptr @trace_event_buffer_reserve(ptr noundef nonnull %fbuffer, ptr noundef %__data, i32 noundef %add) #24
  %tobool4.not = icmp eq ptr %call3, null
  br i1 %tobool4.not, label %trace_event_get_offsets_regmap_bool.exit.cleanup_crit_edge, label %if.end6

trace_event_get_offsets_regmap_bool.exit.cleanup_crit_edge: ; preds = %trace_event_get_offsets_regmap_bool.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end6:                                          ; preds = %trace_event_get_offsets_regmap_bool.exit
  %add.i = shl i32 %call3.i, 16
  %or.i = add i32 %add.i, 65552
  %__data_loc_name = getelementptr inbounds %struct.trace_event_raw_regmap_bool, ptr %call3, i32 0, i32 1
  %13 = ptrtoint ptr %__data_loc_name to i32
  call void @__asan_store4_noabort(i32 %13)
  store i32 %or.i, ptr %__data_loc_name, align 4
  %add.ptr = getelementptr i8, ptr %call3, i32 16
  %14 = ptrtoint ptr %dev.i.i to i32
  call void @__asan_load4_noabort(i32 %14)
  %15 = load ptr, ptr %dev.i.i, align 4
  %tobool.not.i27 = icmp eq ptr %15, null
  br i1 %tobool.not.i27, label %regmap_name.exit, label %if.then.i

if.then.i:                                        ; preds = %if.end6
  %init_name.i.i = getelementptr inbounds %struct.device, ptr %15, i32 0, i32 3
  %16 = ptrtoint ptr %init_name.i.i to i32
  call void @__asan_load4_noabort(i32 %16)
  %17 = load ptr, ptr %init_name.i.i, align 8
  %tobool.not.i.i28 = icmp eq ptr %17, null
  br i1 %tobool.not.i.i28, label %regmap_name.exit.thread45, label %if.then.i.cond.end_crit_edge

if.then.i.cond.end_crit_edge:                     ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %cond.end

regmap_name.exit:                                 ; preds = %if.end6
  %name.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 10
  %18 = ptrtoint ptr %name.i to i32
  call void @__asan_load4_noabort(i32 %18)
  %19 = load ptr, ptr %name.i, align 4
  %tobool9.not = icmp eq ptr %19, null
  br i1 %tobool9.not, label %regmap_name.exit.cond.end_crit_edge, label %regmap_name.exit.return.sink.split.i39_crit_edge

regmap_name.exit.return.sink.split.i39_crit_edge: ; preds = %regmap_name.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %return.sink.split.i39

regmap_name.exit.cond.end_crit_edge:              ; preds = %regmap_name.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %cond.end

regmap_name.exit.thread45:                        ; preds = %if.then.i
  %20 = ptrtoint ptr %15 to i32
  call void @__asan_load4_noabort(i32 %20)
  %21 = load ptr, ptr %15, align 4
  %tobool9.not47 = icmp eq ptr %21, null
  br i1 %tobool9.not47, label %regmap_name.exit.thread45.cond.end_crit_edge, label %regmap_name.exit.thread45.return.sink.split.i39_crit_edge

regmap_name.exit.thread45.return.sink.split.i39_crit_edge: ; preds = %regmap_name.exit.thread45
  call void @__sanitizer_cov_trace_pc() #26
  br label %return.sink.split.i39

regmap_name.exit.thread45.cond.end_crit_edge:     ; preds = %regmap_name.exit.thread45
  call void @__sanitizer_cov_trace_pc() #26
  br label %cond.end

return.sink.split.i39:                            ; preds = %regmap_name.exit.thread45.return.sink.split.i39_crit_edge, %regmap_name.exit.return.sink.split.i39_crit_edge
  %.sink.i38 = phi ptr [ %name.i, %regmap_name.exit.return.sink.split.i39_crit_edge ], [ %15, %regmap_name.exit.thread45.return.sink.split.i39_crit_edge ]
  %22 = ptrtoint ptr %.sink.i38 to i32
  call void @__asan_load4_noabort(i32 %22)
  %23 = load ptr, ptr %.sink.i38, align 4
  br label %cond.end

cond.end:                                         ; preds = %return.sink.split.i39, %regmap_name.exit.thread45.cond.end_crit_edge, %regmap_name.exit.cond.end_crit_edge, %if.then.i.cond.end_crit_edge
  %cond = phi ptr [ @.str.41, %regmap_name.exit.cond.end_crit_edge ], [ @.str.41, %regmap_name.exit.thread45.cond.end_crit_edge ], [ %23, %return.sink.split.i39 ], [ %17, %if.then.i.cond.end_crit_edge ]
  %call11 = call ptr @strcpy(ptr noundef %add.ptr, ptr noundef %cond) #28
  %conv = zext i1 %flag to i32
  %flag13 = getelementptr inbounds %struct.trace_event_raw_regmap_bool, ptr %call3, i32 0, i32 2
  %24 = ptrtoint ptr %flag13 to i32
  call void @__asan_store4_noabort(i32 %24)
  store i32 %conv, ptr %flag13, align 4
  call void @trace_event_buffer_commit(ptr noundef nonnull %fbuffer) #24
  br label %cleanup

cleanup:                                          ; preds = %cond.end, %trace_event_get_offsets_regmap_bool.exit.cleanup_crit_edge, %trace_trigger_soft_disabled.exit.cleanup_crit_edge
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %fbuffer) #24
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal void @perf_trace_regmap_bool(ptr noundef %__data, ptr nocapture noundef readonly %map, i1 noundef zeroext %flag) #0 align 64 {
entry:
  %__regs = alloca ptr, align 4
  %rctx = alloca i32, align 4
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %__regs) #24
  %0 = ptrtoint ptr %__regs to i32
  call void @__asan_store4_noabort(i32 %0)
  store ptr inttoptr (i32 -1 to ptr), ptr %__regs, align 4, !annotation !388
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %rctx) #24
  %1 = ptrtoint ptr %rctx to i32
  call void @__asan_store4_noabort(i32 %1)
  store i32 -1, ptr %rctx, align 4, !annotation !388
  %dev.i.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 5
  %2 = ptrtoint ptr %dev.i.i to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load ptr, ptr %dev.i.i, align 4
  %tobool.not.i.i = icmp eq ptr %3, null
  br i1 %tobool.not.i.i, label %regmap_name.exit.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %entry
  %init_name.i.i.i = getelementptr inbounds %struct.device, ptr %3, i32 0, i32 3
  %4 = ptrtoint ptr %init_name.i.i.i to i32
  call void @__asan_load4_noabort(i32 %4)
  %5 = load ptr, ptr %init_name.i.i.i, align 8
  %tobool.not.i.i.i = icmp eq ptr %5, null
  br i1 %tobool.not.i.i.i, label %regmap_name.exit.thread14.i, label %if.then.i.i.trace_event_get_offsets_regmap_bool.exit_crit_edge

if.then.i.i.trace_event_get_offsets_regmap_bool.exit_crit_edge: ; preds = %if.then.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %trace_event_get_offsets_regmap_bool.exit

regmap_name.exit.i:                               ; preds = %entry
  %name.i.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 10
  %6 = ptrtoint ptr %name.i.i to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load ptr, ptr %name.i.i, align 4
  %tobool.not.i = icmp eq ptr %7, null
  br i1 %tobool.not.i, label %regmap_name.exit.i.trace_event_get_offsets_regmap_bool.exit_crit_edge, label %regmap_name.exit.i.return.sink.split.i9.i_crit_edge

regmap_name.exit.i.return.sink.split.i9.i_crit_edge: ; preds = %regmap_name.exit.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %return.sink.split.i9.i

regmap_name.exit.i.trace_event_get_offsets_regmap_bool.exit_crit_edge: ; preds = %regmap_name.exit.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %trace_event_get_offsets_regmap_bool.exit

regmap_name.exit.thread14.i:                      ; preds = %if.then.i.i
  %8 = ptrtoint ptr %3 to i32
  call void @__asan_load4_noabort(i32 %8)
  %9 = load ptr, ptr %3, align 4
  %tobool.not16.i = icmp eq ptr %9, null
  br i1 %tobool.not16.i, label %regmap_name.exit.thread14.i.trace_event_get_offsets_regmap_bool.exit_crit_edge, label %regmap_name.exit.thread14.i.return.sink.split.i9.i_crit_edge

regmap_name.exit.thread14.i.return.sink.split.i9.i_crit_edge: ; preds = %regmap_name.exit.thread14.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %return.sink.split.i9.i

regmap_name.exit.thread14.i.trace_event_get_offsets_regmap_bool.exit_crit_edge: ; preds = %regmap_name.exit.thread14.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %trace_event_get_offsets_regmap_bool.exit

return.sink.split.i9.i:                           ; preds = %regmap_name.exit.thread14.i.return.sink.split.i9.i_crit_edge, %regmap_name.exit.i.return.sink.split.i9.i_crit_edge
  %.sink.i8.i = phi ptr [ %name.i.i, %regmap_name.exit.i.return.sink.split.i9.i_crit_edge ], [ %3, %regmap_name.exit.thread14.i.return.sink.split.i9.i_crit_edge ]
  %10 = ptrtoint ptr %.sink.i8.i to i32
  call void @__asan_load4_noabort(i32 %10)
  %11 = load ptr, ptr %.sink.i8.i, align 4
  br label %trace_event_get_offsets_regmap_bool.exit

trace_event_get_offsets_regmap_bool.exit:         ; preds = %return.sink.split.i9.i, %regmap_name.exit.thread14.i.trace_event_get_offsets_regmap_bool.exit_crit_edge, %regmap_name.exit.i.trace_event_get_offsets_regmap_bool.exit_crit_edge, %if.then.i.i.trace_event_get_offsets_regmap_bool.exit_crit_edge
  %cond.i = phi ptr [ @.str.41, %regmap_name.exit.i.trace_event_get_offsets_regmap_bool.exit_crit_edge ], [ @.str.41, %regmap_name.exit.thread14.i.trace_event_get_offsets_regmap_bool.exit_crit_edge ], [ %11, %return.sink.split.i9.i ], [ %5, %if.then.i.i.trace_event_get_offsets_regmap_bool.exit_crit_edge ]
  %call3.i = tail call i32 @strlen(ptr noundef %cond.i) #27
  %add.i = shl i32 %call3.i, 16
  %or.i = add i32 %add.i, 65552
  %perf_events = getelementptr inbounds %struct.trace_event_call, ptr %__data, i32 0, i32 10
  %12 = ptrtoint ptr %perf_events to i32
  call void @__asan_load4_noabort(i32 %12)
  %13 = load ptr, ptr %perf_events, align 4
  %14 = ptrtoint ptr %13 to i32
  %15 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i = and i32 %15, -16384
  %16 = inttoptr i32 %and.i to ptr
  %cpu = getelementptr inbounds %struct.thread_info, ptr %16, i32 0, i32 3
  %17 = ptrtoint ptr %cpu to i32
  call void @__asan_load4_noabort(i32 %17)
  %18 = load i32, ptr %cpu, align 4
  %arrayidx = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %18
  %19 = ptrtoint ptr %arrayidx to i32
  call void @__asan_load4_noabort(i32 %19)
  %20 = load i32, ptr %arrayidx, align 4
  %add = add i32 %20, %14
  %21 = inttoptr i32 %add to ptr
  %prog_array.i = getelementptr inbounds %struct.trace_event_call, ptr %__data, i32 0, i32 11
  %22 = ptrtoint ptr %prog_array.i to i32
  call void @__asan_load4_noabort(i32 %22)
  %23 = load volatile ptr, ptr %prog_array.i, align 4
  %tobool.i.not = icmp eq ptr %23, null
  br i1 %tobool.i.not, label %land.lhs.true8, label %trace_event_get_offsets_regmap_bool.exit.if.end_crit_edge

trace_event_get_offsets_regmap_bool.exit.if.end_crit_edge: ; preds = %trace_event_get_offsets_regmap_bool.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

land.lhs.true8:                                   ; preds = %trace_event_get_offsets_regmap_bool.exit
  %24 = ptrtoint ptr %21 to i32
  call void @__asan_load4_noabort(i32 %24)
  %25 = load volatile ptr, ptr %21, align 4
  %tobool.not.i50.not = icmp eq ptr %25, null
  br i1 %tobool.not.i50.not, label %land.lhs.true8.cleanup_crit_edge, label %land.lhs.true8.if.end_crit_edge

land.lhs.true8.if.end_crit_edge:                  ; preds = %land.lhs.true8
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

land.lhs.true8.cleanup_crit_edge:                 ; preds = %land.lhs.true8
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end:                                           ; preds = %land.lhs.true8.if.end_crit_edge, %trace_event_get_offsets_regmap_bool.exit.if.end_crit_edge
  %add13 = add i32 %call3.i, 28
  %and = and i32 %add13, -8
  %sub = add i32 %and, -4
  %call14 = call ptr @perf_trace_buf_alloc(i32 noundef %sub, ptr noundef nonnull %__regs, ptr noundef nonnull %rctx) #24
  %tobool15.not = icmp eq ptr %call14, null
  br i1 %tobool15.not, label %if.end.cleanup_crit_edge, label %if.end17

if.end.cleanup_crit_edge:                         ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end17:                                         ; preds = %if.end
  %26 = ptrtoint ptr %__regs to i32
  call void @__asan_load4_noabort(i32 %26)
  %27 = load ptr, ptr %__regs, align 4
  %28 = call ptr @llvm.returnaddress(i32 0) #24
  %29 = ptrtoint ptr %28 to i32
  %arrayidx.i = getelementptr [18 x i32], ptr %27, i32 0, i32 15
  %30 = ptrtoint ptr %arrayidx.i to i32
  call void @__asan_store4_noabort(i32 %30)
  store i32 %29, ptr %arrayidx.i, align 4
  %31 = call ptr @llvm.frameaddress.p0(i32 0) #24
  %32 = ptrtoint ptr %31 to i32
  %arrayidx2.i = getelementptr [18 x i32], ptr %27, i32 0, i32 11
  %33 = ptrtoint ptr %arrayidx2.i to i32
  call void @__asan_store4_noabort(i32 %33)
  store i32 %32, ptr %arrayidx2.i, align 4
  %34 = call i32 @llvm.read_register.i32(metadata !376) #24
  %arrayidx4.i = getelementptr [18 x i32], ptr %27, i32 0, i32 13
  %35 = ptrtoint ptr %arrayidx4.i to i32
  call void @__asan_store4_noabort(i32 %35)
  store i32 %34, ptr %arrayidx4.i, align 4
  %arrayidx6.i = getelementptr [18 x i32], ptr %27, i32 0, i32 16
  %36 = ptrtoint ptr %arrayidx6.i to i32
  call void @__asan_store4_noabort(i32 %36)
  store i32 19, ptr %arrayidx6.i, align 4
  %__data_loc_name = getelementptr inbounds %struct.trace_event_raw_regmap_bool, ptr %call14, i32 0, i32 1
  %37 = ptrtoint ptr %__data_loc_name to i32
  call void @__asan_store4_noabort(i32 %37)
  store i32 %or.i, ptr %__data_loc_name, align 4
  %add.ptr = getelementptr i8, ptr %call14, i32 16
  %38 = ptrtoint ptr %dev.i.i to i32
  call void @__asan_load4_noabort(i32 %38)
  %39 = load ptr, ptr %dev.i.i, align 4
  %tobool.not.i51 = icmp eq ptr %39, null
  br i1 %tobool.not.i51, label %regmap_name.exit, label %if.then.i

if.then.i:                                        ; preds = %if.end17
  %init_name.i.i = getelementptr inbounds %struct.device, ptr %39, i32 0, i32 3
  %40 = ptrtoint ptr %init_name.i.i to i32
  call void @__asan_load4_noabort(i32 %40)
  %41 = load ptr, ptr %init_name.i.i, align 8
  %tobool.not.i.i52 = icmp eq ptr %41, null
  br i1 %tobool.not.i.i52, label %regmap_name.exit.thread66, label %if.then.i.cond.end_crit_edge

if.then.i.cond.end_crit_edge:                     ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %cond.end

regmap_name.exit:                                 ; preds = %if.end17
  %name.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 10
  %42 = ptrtoint ptr %name.i to i32
  call void @__asan_load4_noabort(i32 %42)
  %43 = load ptr, ptr %name.i, align 4
  %tobool21.not = icmp eq ptr %43, null
  br i1 %tobool21.not, label %regmap_name.exit.cond.end_crit_edge, label %regmap_name.exit.return.sink.split.i61_crit_edge

regmap_name.exit.return.sink.split.i61_crit_edge: ; preds = %regmap_name.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %return.sink.split.i61

regmap_name.exit.cond.end_crit_edge:              ; preds = %regmap_name.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %cond.end

regmap_name.exit.thread66:                        ; preds = %if.then.i
  %44 = ptrtoint ptr %39 to i32
  call void @__asan_load4_noabort(i32 %44)
  %45 = load ptr, ptr %39, align 4
  %tobool21.not68 = icmp eq ptr %45, null
  br i1 %tobool21.not68, label %regmap_name.exit.thread66.cond.end_crit_edge, label %regmap_name.exit.thread66.return.sink.split.i61_crit_edge

regmap_name.exit.thread66.return.sink.split.i61_crit_edge: ; preds = %regmap_name.exit.thread66
  call void @__sanitizer_cov_trace_pc() #26
  br label %return.sink.split.i61

regmap_name.exit.thread66.cond.end_crit_edge:     ; preds = %regmap_name.exit.thread66
  call void @__sanitizer_cov_trace_pc() #26
  br label %cond.end

return.sink.split.i61:                            ; preds = %regmap_name.exit.thread66.return.sink.split.i61_crit_edge, %regmap_name.exit.return.sink.split.i61_crit_edge
  %.sink.i60 = phi ptr [ %name.i, %regmap_name.exit.return.sink.split.i61_crit_edge ], [ %39, %regmap_name.exit.thread66.return.sink.split.i61_crit_edge ]
  %46 = ptrtoint ptr %.sink.i60 to i32
  call void @__asan_load4_noabort(i32 %46)
  %47 = load ptr, ptr %.sink.i60, align 4
  br label %cond.end

cond.end:                                         ; preds = %return.sink.split.i61, %regmap_name.exit.thread66.cond.end_crit_edge, %regmap_name.exit.cond.end_crit_edge, %if.then.i.cond.end_crit_edge
  %cond = phi ptr [ @.str.41, %regmap_name.exit.cond.end_crit_edge ], [ @.str.41, %regmap_name.exit.thread66.cond.end_crit_edge ], [ %47, %return.sink.split.i61 ], [ %41, %if.then.i.cond.end_crit_edge ]
  %call23 = call ptr @strcpy(ptr noundef %add.ptr, ptr noundef %cond) #28
  %conv = zext i1 %flag to i32
  %flag25 = getelementptr inbounds %struct.trace_event_raw_regmap_bool, ptr %call14, i32 0, i32 2
  %48 = ptrtoint ptr %flag25 to i32
  call void @__asan_store4_noabort(i32 %48)
  store i32 %conv, ptr %flag25, align 4
  %49 = ptrtoint ptr %rctx to i32
  call void @__asan_load4_noabort(i32 %49)
  %50 = load i32, ptr %rctx, align 4
  %51 = ptrtoint ptr %__regs to i32
  call void @__asan_load4_noabort(i32 %51)
  %52 = load ptr, ptr %__regs, align 4
  call void @perf_trace_run_bpf_submit(ptr noundef nonnull %call14, i32 noundef %sub, i32 noundef %50, ptr noundef %__data, i64 noundef 1, ptr noundef %52, ptr noundef %21, ptr noundef null) #24
  br label %cleanup

cleanup:                                          ; preds = %cond.end, %if.end.cleanup_crit_edge, %land.lhs.true8.cleanup_crit_edge
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %rctx) #24
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %__regs) #24
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal void @trace_event_raw_event_regmap_async(ptr noundef %__data, ptr nocapture noundef readonly %map) #0 align 64 {
entry:
  %fbuffer = alloca %struct.trace_event_buffer, align 4
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %fbuffer) #24
  %flags.i = getelementptr inbounds %struct.trace_event_file, ptr %__data, i32 0, i32 7
  %0 = call ptr @memset(ptr %fbuffer, i32 255, i32 24)
  %1 = ptrtoint ptr %flags.i to i32
  call void @__asan_load4_noabort(i32 %1)
  %2 = load i32, ptr %flags.i, align 4
  %and.i = and i32 %2, 704
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i)
  %tobool.not.i = icmp eq i32 %and.i, 0
  br i1 %tobool.not.i, label %entry.if.end_crit_edge, label %if.end.i, !prof !386

entry.if.end_crit_edge:                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

if.end.i:                                         ; preds = %entry
  %and4.i = and i32 %2, 256
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and4.i)
  %tobool5.not.i = icmp eq i32 %and4.i, 0
  br i1 %tobool5.not.i, label %trace_trigger_soft_disabled.exit, label %if.end.i.if.end_crit_edge, !prof !387

if.end.i.if.end_crit_edge:                        ; preds = %if.end.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

trace_trigger_soft_disabled.exit:                 ; preds = %if.end.i
  %call.i = tail call zeroext i1 @__trace_trigger_soft_disabled(ptr noundef %__data) #24
  br i1 %call.i, label %trace_trigger_soft_disabled.exit.cleanup_crit_edge, label %trace_trigger_soft_disabled.exit.if.end_crit_edge

trace_trigger_soft_disabled.exit.if.end_crit_edge: ; preds = %trace_trigger_soft_disabled.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

trace_trigger_soft_disabled.exit.cleanup_crit_edge: ; preds = %trace_trigger_soft_disabled.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end:                                           ; preds = %trace_trigger_soft_disabled.exit.if.end_crit_edge, %if.end.i.if.end_crit_edge, %entry.if.end_crit_edge
  %dev.i.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 5
  %3 = ptrtoint ptr %dev.i.i to i32
  call void @__asan_load4_noabort(i32 %3)
  %4 = load ptr, ptr %dev.i.i, align 4
  %tobool.not.i.i = icmp eq ptr %4, null
  br i1 %tobool.not.i.i, label %regmap_name.exit.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.end
  %init_name.i.i.i = getelementptr inbounds %struct.device, ptr %4, i32 0, i32 3
  %5 = ptrtoint ptr %init_name.i.i.i to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load ptr, ptr %init_name.i.i.i, align 8
  %tobool.not.i.i.i = icmp eq ptr %6, null
  br i1 %tobool.not.i.i.i, label %regmap_name.exit.thread25.i, label %if.then.i.i.trace_event_get_offsets_regmap_async.exit_crit_edge

if.then.i.i.trace_event_get_offsets_regmap_async.exit_crit_edge: ; preds = %if.then.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %trace_event_get_offsets_regmap_async.exit

regmap_name.exit.i:                               ; preds = %if.end
  %name.i.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 10
  %7 = ptrtoint ptr %name.i.i to i32
  call void @__asan_load4_noabort(i32 %7)
  %8 = load ptr, ptr %name.i.i, align 4
  %tobool.not.i21 = icmp eq ptr %8, null
  br i1 %tobool.not.i21, label %regmap_name.exit.i.trace_event_get_offsets_regmap_async.exit_crit_edge, label %regmap_name.exit.i.return.sink.split.i20.i_crit_edge

regmap_name.exit.i.return.sink.split.i20.i_crit_edge: ; preds = %regmap_name.exit.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %return.sink.split.i20.i

regmap_name.exit.i.trace_event_get_offsets_regmap_async.exit_crit_edge: ; preds = %regmap_name.exit.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %trace_event_get_offsets_regmap_async.exit

regmap_name.exit.thread25.i:                      ; preds = %if.then.i.i
  %9 = ptrtoint ptr %4 to i32
  call void @__asan_load4_noabort(i32 %9)
  %10 = load ptr, ptr %4, align 4
  %tobool.not27.i = icmp eq ptr %10, null
  br i1 %tobool.not27.i, label %regmap_name.exit.thread25.i.trace_event_get_offsets_regmap_async.exit_crit_edge, label %regmap_name.exit.thread25.i.return.sink.split.i20.i_crit_edge

regmap_name.exit.thread25.i.return.sink.split.i20.i_crit_edge: ; preds = %regmap_name.exit.thread25.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %return.sink.split.i20.i

regmap_name.exit.thread25.i.trace_event_get_offsets_regmap_async.exit_crit_edge: ; preds = %regmap_name.exit.thread25.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %trace_event_get_offsets_regmap_async.exit

return.sink.split.i20.i:                          ; preds = %regmap_name.exit.thread25.i.return.sink.split.i20.i_crit_edge, %regmap_name.exit.i.return.sink.split.i20.i_crit_edge
  %.sink.i19.i = phi ptr [ %name.i.i, %regmap_name.exit.i.return.sink.split.i20.i_crit_edge ], [ %4, %regmap_name.exit.thread25.i.return.sink.split.i20.i_crit_edge ]
  %11 = ptrtoint ptr %.sink.i19.i to i32
  call void @__asan_load4_noabort(i32 %11)
  %12 = load ptr, ptr %.sink.i19.i, align 4
  br label %trace_event_get_offsets_regmap_async.exit

trace_event_get_offsets_regmap_async.exit:        ; preds = %return.sink.split.i20.i, %regmap_name.exit.thread25.i.trace_event_get_offsets_regmap_async.exit_crit_edge, %regmap_name.exit.i.trace_event_get_offsets_regmap_async.exit_crit_edge, %if.then.i.i.trace_event_get_offsets_regmap_async.exit_crit_edge
  %cond.i = phi ptr [ @.str.41, %regmap_name.exit.i.trace_event_get_offsets_regmap_async.exit_crit_edge ], [ @.str.41, %regmap_name.exit.thread25.i.trace_event_get_offsets_regmap_async.exit_crit_edge ], [ %12, %return.sink.split.i20.i ], [ %6, %if.then.i.i.trace_event_get_offsets_regmap_async.exit_crit_edge ]
  %call3.i = tail call i32 @strlen(ptr noundef %cond.i) #27
  %add = add i32 %call3.i, 13
  %call3 = call ptr @trace_event_buffer_reserve(ptr noundef nonnull %fbuffer, ptr noundef %__data, i32 noundef %add) #24
  %tobool.not = icmp eq ptr %call3, null
  br i1 %tobool.not, label %trace_event_get_offsets_regmap_async.exit.cleanup_crit_edge, label %if.end5

trace_event_get_offsets_regmap_async.exit.cleanup_crit_edge: ; preds = %trace_event_get_offsets_regmap_async.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end5:                                          ; preds = %trace_event_get_offsets_regmap_async.exit
  %add.i = shl i32 %call3.i, 16
  %or.i = add i32 %add.i, 65548
  %__data_loc_name = getelementptr inbounds %struct.trace_event_raw_regmap_async, ptr %call3, i32 0, i32 1
  %13 = ptrtoint ptr %__data_loc_name to i32
  call void @__asan_store4_noabort(i32 %13)
  store i32 %or.i, ptr %__data_loc_name, align 4
  %add.ptr = getelementptr i8, ptr %call3, i32 12
  %14 = ptrtoint ptr %dev.i.i to i32
  call void @__asan_load4_noabort(i32 %14)
  %15 = load ptr, ptr %dev.i.i, align 4
  %tobool.not.i22 = icmp eq ptr %15, null
  br i1 %tobool.not.i22, label %regmap_name.exit, label %if.then.i

if.then.i:                                        ; preds = %if.end5
  %init_name.i.i = getelementptr inbounds %struct.device, ptr %15, i32 0, i32 3
  %16 = ptrtoint ptr %init_name.i.i to i32
  call void @__asan_load4_noabort(i32 %16)
  %17 = load ptr, ptr %init_name.i.i, align 8
  %tobool.not.i.i23 = icmp eq ptr %17, null
  br i1 %tobool.not.i.i23, label %regmap_name.exit.thread40, label %if.then.i.cond.end_crit_edge

if.then.i.cond.end_crit_edge:                     ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %cond.end

regmap_name.exit:                                 ; preds = %if.end5
  %name.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 10
  %18 = ptrtoint ptr %name.i to i32
  call void @__asan_load4_noabort(i32 %18)
  %19 = load ptr, ptr %name.i, align 4
  %tobool8.not = icmp eq ptr %19, null
  br i1 %tobool8.not, label %regmap_name.exit.cond.end_crit_edge, label %regmap_name.exit.return.sink.split.i34_crit_edge

regmap_name.exit.return.sink.split.i34_crit_edge: ; preds = %regmap_name.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %return.sink.split.i34

regmap_name.exit.cond.end_crit_edge:              ; preds = %regmap_name.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %cond.end

regmap_name.exit.thread40:                        ; preds = %if.then.i
  %20 = ptrtoint ptr %15 to i32
  call void @__asan_load4_noabort(i32 %20)
  %21 = load ptr, ptr %15, align 4
  %tobool8.not42 = icmp eq ptr %21, null
  br i1 %tobool8.not42, label %regmap_name.exit.thread40.cond.end_crit_edge, label %regmap_name.exit.thread40.return.sink.split.i34_crit_edge

regmap_name.exit.thread40.return.sink.split.i34_crit_edge: ; preds = %regmap_name.exit.thread40
  call void @__sanitizer_cov_trace_pc() #26
  br label %return.sink.split.i34

regmap_name.exit.thread40.cond.end_crit_edge:     ; preds = %regmap_name.exit.thread40
  call void @__sanitizer_cov_trace_pc() #26
  br label %cond.end

return.sink.split.i34:                            ; preds = %regmap_name.exit.thread40.return.sink.split.i34_crit_edge, %regmap_name.exit.return.sink.split.i34_crit_edge
  %.sink.i33 = phi ptr [ %name.i, %regmap_name.exit.return.sink.split.i34_crit_edge ], [ %15, %regmap_name.exit.thread40.return.sink.split.i34_crit_edge ]
  %22 = ptrtoint ptr %.sink.i33 to i32
  call void @__asan_load4_noabort(i32 %22)
  %23 = load ptr, ptr %.sink.i33, align 4
  br label %cond.end

cond.end:                                         ; preds = %return.sink.split.i34, %regmap_name.exit.thread40.cond.end_crit_edge, %regmap_name.exit.cond.end_crit_edge, %if.then.i.cond.end_crit_edge
  %cond = phi ptr [ @.str.41, %regmap_name.exit.cond.end_crit_edge ], [ @.str.41, %regmap_name.exit.thread40.cond.end_crit_edge ], [ %23, %return.sink.split.i34 ], [ %17, %if.then.i.cond.end_crit_edge ]
  %call10 = call ptr @strcpy(ptr noundef %add.ptr, ptr noundef %cond) #28
  call void @trace_event_buffer_commit(ptr noundef nonnull %fbuffer) #24
  br label %cleanup

cleanup:                                          ; preds = %cond.end, %trace_event_get_offsets_regmap_async.exit.cleanup_crit_edge, %trace_trigger_soft_disabled.exit.cleanup_crit_edge
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %fbuffer) #24
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal void @perf_trace_regmap_async(ptr noundef %__data, ptr nocapture noundef readonly %map) #0 align 64 {
entry:
  %__regs = alloca ptr, align 4
  %rctx = alloca i32, align 4
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %__regs) #24
  %0 = ptrtoint ptr %__regs to i32
  call void @__asan_store4_noabort(i32 %0)
  store ptr inttoptr (i32 -1 to ptr), ptr %__regs, align 4, !annotation !388
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %rctx) #24
  %1 = ptrtoint ptr %rctx to i32
  call void @__asan_store4_noabort(i32 %1)
  store i32 -1, ptr %rctx, align 4, !annotation !388
  %dev.i.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 5
  %2 = ptrtoint ptr %dev.i.i to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load ptr, ptr %dev.i.i, align 4
  %tobool.not.i.i = icmp eq ptr %3, null
  br i1 %tobool.not.i.i, label %regmap_name.exit.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %entry
  %init_name.i.i.i = getelementptr inbounds %struct.device, ptr %3, i32 0, i32 3
  %4 = ptrtoint ptr %init_name.i.i.i to i32
  call void @__asan_load4_noabort(i32 %4)
  %5 = load ptr, ptr %init_name.i.i.i, align 8
  %tobool.not.i.i.i = icmp eq ptr %5, null
  br i1 %tobool.not.i.i.i, label %regmap_name.exit.thread25.i, label %if.then.i.i.trace_event_get_offsets_regmap_async.exit_crit_edge

if.then.i.i.trace_event_get_offsets_regmap_async.exit_crit_edge: ; preds = %if.then.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %trace_event_get_offsets_regmap_async.exit

regmap_name.exit.i:                               ; preds = %entry
  %name.i.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 10
  %6 = ptrtoint ptr %name.i.i to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load ptr, ptr %name.i.i, align 4
  %tobool.not.i = icmp eq ptr %7, null
  br i1 %tobool.not.i, label %regmap_name.exit.i.trace_event_get_offsets_regmap_async.exit_crit_edge, label %regmap_name.exit.i.return.sink.split.i20.i_crit_edge

regmap_name.exit.i.return.sink.split.i20.i_crit_edge: ; preds = %regmap_name.exit.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %return.sink.split.i20.i

regmap_name.exit.i.trace_event_get_offsets_regmap_async.exit_crit_edge: ; preds = %regmap_name.exit.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %trace_event_get_offsets_regmap_async.exit

regmap_name.exit.thread25.i:                      ; preds = %if.then.i.i
  %8 = ptrtoint ptr %3 to i32
  call void @__asan_load4_noabort(i32 %8)
  %9 = load ptr, ptr %3, align 4
  %tobool.not27.i = icmp eq ptr %9, null
  br i1 %tobool.not27.i, label %regmap_name.exit.thread25.i.trace_event_get_offsets_regmap_async.exit_crit_edge, label %regmap_name.exit.thread25.i.return.sink.split.i20.i_crit_edge

regmap_name.exit.thread25.i.return.sink.split.i20.i_crit_edge: ; preds = %regmap_name.exit.thread25.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %return.sink.split.i20.i

regmap_name.exit.thread25.i.trace_event_get_offsets_regmap_async.exit_crit_edge: ; preds = %regmap_name.exit.thread25.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %trace_event_get_offsets_regmap_async.exit

return.sink.split.i20.i:                          ; preds = %regmap_name.exit.thread25.i.return.sink.split.i20.i_crit_edge, %regmap_name.exit.i.return.sink.split.i20.i_crit_edge
  %.sink.i19.i = phi ptr [ %name.i.i, %regmap_name.exit.i.return.sink.split.i20.i_crit_edge ], [ %3, %regmap_name.exit.thread25.i.return.sink.split.i20.i_crit_edge ]
  %10 = ptrtoint ptr %.sink.i19.i to i32
  call void @__asan_load4_noabort(i32 %10)
  %11 = load ptr, ptr %.sink.i19.i, align 4
  br label %trace_event_get_offsets_regmap_async.exit

trace_event_get_offsets_regmap_async.exit:        ; preds = %return.sink.split.i20.i, %regmap_name.exit.thread25.i.trace_event_get_offsets_regmap_async.exit_crit_edge, %regmap_name.exit.i.trace_event_get_offsets_regmap_async.exit_crit_edge, %if.then.i.i.trace_event_get_offsets_regmap_async.exit_crit_edge
  %cond.i = phi ptr [ @.str.41, %regmap_name.exit.i.trace_event_get_offsets_regmap_async.exit_crit_edge ], [ @.str.41, %regmap_name.exit.thread25.i.trace_event_get_offsets_regmap_async.exit_crit_edge ], [ %11, %return.sink.split.i20.i ], [ %5, %if.then.i.i.trace_event_get_offsets_regmap_async.exit_crit_edge ]
  %call3.i = tail call i32 @strlen(ptr noundef %cond.i) #27
  %add.i = shl i32 %call3.i, 16
  %or.i = add i32 %add.i, 65548
  %perf_events = getelementptr inbounds %struct.trace_event_call, ptr %__data, i32 0, i32 10
  %12 = ptrtoint ptr %perf_events to i32
  call void @__asan_load4_noabort(i32 %12)
  %13 = load ptr, ptr %perf_events, align 4
  %14 = ptrtoint ptr %13 to i32
  %15 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i = and i32 %15, -16384
  %16 = inttoptr i32 %and.i to ptr
  %cpu = getelementptr inbounds %struct.thread_info, ptr %16, i32 0, i32 3
  %17 = ptrtoint ptr %cpu to i32
  call void @__asan_load4_noabort(i32 %17)
  %18 = load i32, ptr %cpu, align 4
  %arrayidx = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %18
  %19 = ptrtoint ptr %arrayidx to i32
  call void @__asan_load4_noabort(i32 %19)
  %20 = load i32, ptr %arrayidx, align 4
  %add = add i32 %20, %14
  %21 = inttoptr i32 %add to ptr
  %prog_array.i = getelementptr inbounds %struct.trace_event_call, ptr %__data, i32 0, i32 11
  %22 = ptrtoint ptr %prog_array.i to i32
  call void @__asan_load4_noabort(i32 %22)
  %23 = load volatile ptr, ptr %prog_array.i, align 4
  %tobool.i.not = icmp eq ptr %23, null
  br i1 %tobool.i.not, label %land.lhs.true7, label %trace_event_get_offsets_regmap_async.exit.if.end_crit_edge

trace_event_get_offsets_regmap_async.exit.if.end_crit_edge: ; preds = %trace_event_get_offsets_regmap_async.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

land.lhs.true7:                                   ; preds = %trace_event_get_offsets_regmap_async.exit
  %24 = ptrtoint ptr %21 to i32
  call void @__asan_load4_noabort(i32 %24)
  %25 = load volatile ptr, ptr %21, align 4
  %tobool.not.i45.not = icmp eq ptr %25, null
  br i1 %tobool.not.i45.not, label %land.lhs.true7.cleanup_crit_edge, label %land.lhs.true7.if.end_crit_edge

land.lhs.true7.if.end_crit_edge:                  ; preds = %land.lhs.true7
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

land.lhs.true7.cleanup_crit_edge:                 ; preds = %land.lhs.true7
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end:                                           ; preds = %land.lhs.true7.if.end_crit_edge, %trace_event_get_offsets_regmap_async.exit.if.end_crit_edge
  %add12 = add i32 %call3.i, 24
  %and = and i32 %add12, -8
  %sub = add i32 %and, -4
  %call13 = call ptr @perf_trace_buf_alloc(i32 noundef %sub, ptr noundef nonnull %__regs, ptr noundef nonnull %rctx) #24
  %tobool14.not = icmp eq ptr %call13, null
  br i1 %tobool14.not, label %if.end.cleanup_crit_edge, label %if.end16

if.end.cleanup_crit_edge:                         ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end16:                                         ; preds = %if.end
  %26 = ptrtoint ptr %__regs to i32
  call void @__asan_load4_noabort(i32 %26)
  %27 = load ptr, ptr %__regs, align 4
  %28 = call ptr @llvm.returnaddress(i32 0) #24
  %29 = ptrtoint ptr %28 to i32
  %arrayidx.i = getelementptr [18 x i32], ptr %27, i32 0, i32 15
  %30 = ptrtoint ptr %arrayidx.i to i32
  call void @__asan_store4_noabort(i32 %30)
  store i32 %29, ptr %arrayidx.i, align 4
  %31 = call ptr @llvm.frameaddress.p0(i32 0) #24
  %32 = ptrtoint ptr %31 to i32
  %arrayidx2.i = getelementptr [18 x i32], ptr %27, i32 0, i32 11
  %33 = ptrtoint ptr %arrayidx2.i to i32
  call void @__asan_store4_noabort(i32 %33)
  store i32 %32, ptr %arrayidx2.i, align 4
  %34 = call i32 @llvm.read_register.i32(metadata !376) #24
  %arrayidx4.i = getelementptr [18 x i32], ptr %27, i32 0, i32 13
  %35 = ptrtoint ptr %arrayidx4.i to i32
  call void @__asan_store4_noabort(i32 %35)
  store i32 %34, ptr %arrayidx4.i, align 4
  %arrayidx6.i = getelementptr [18 x i32], ptr %27, i32 0, i32 16
  %36 = ptrtoint ptr %arrayidx6.i to i32
  call void @__asan_store4_noabort(i32 %36)
  store i32 19, ptr %arrayidx6.i, align 4
  %__data_loc_name = getelementptr inbounds %struct.trace_event_raw_regmap_async, ptr %call13, i32 0, i32 1
  %37 = ptrtoint ptr %__data_loc_name to i32
  call void @__asan_store4_noabort(i32 %37)
  store i32 %or.i, ptr %__data_loc_name, align 4
  %add.ptr = getelementptr i8, ptr %call13, i32 12
  %38 = ptrtoint ptr %dev.i.i to i32
  call void @__asan_load4_noabort(i32 %38)
  %39 = load ptr, ptr %dev.i.i, align 4
  %tobool.not.i46 = icmp eq ptr %39, null
  br i1 %tobool.not.i46, label %regmap_name.exit, label %if.then.i

if.then.i:                                        ; preds = %if.end16
  %init_name.i.i = getelementptr inbounds %struct.device, ptr %39, i32 0, i32 3
  %40 = ptrtoint ptr %init_name.i.i to i32
  call void @__asan_load4_noabort(i32 %40)
  %41 = load ptr, ptr %init_name.i.i, align 8
  %tobool.not.i.i47 = icmp eq ptr %41, null
  br i1 %tobool.not.i.i47, label %regmap_name.exit.thread61, label %if.then.i.cond.end_crit_edge

if.then.i.cond.end_crit_edge:                     ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %cond.end

regmap_name.exit:                                 ; preds = %if.end16
  %name.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 10
  %42 = ptrtoint ptr %name.i to i32
  call void @__asan_load4_noabort(i32 %42)
  %43 = load ptr, ptr %name.i, align 4
  %tobool20.not = icmp eq ptr %43, null
  br i1 %tobool20.not, label %regmap_name.exit.cond.end_crit_edge, label %regmap_name.exit.return.sink.split.i56_crit_edge

regmap_name.exit.return.sink.split.i56_crit_edge: ; preds = %regmap_name.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %return.sink.split.i56

regmap_name.exit.cond.end_crit_edge:              ; preds = %regmap_name.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %cond.end

regmap_name.exit.thread61:                        ; preds = %if.then.i
  %44 = ptrtoint ptr %39 to i32
  call void @__asan_load4_noabort(i32 %44)
  %45 = load ptr, ptr %39, align 4
  %tobool20.not63 = icmp eq ptr %45, null
  br i1 %tobool20.not63, label %regmap_name.exit.thread61.cond.end_crit_edge, label %regmap_name.exit.thread61.return.sink.split.i56_crit_edge

regmap_name.exit.thread61.return.sink.split.i56_crit_edge: ; preds = %regmap_name.exit.thread61
  call void @__sanitizer_cov_trace_pc() #26
  br label %return.sink.split.i56

regmap_name.exit.thread61.cond.end_crit_edge:     ; preds = %regmap_name.exit.thread61
  call void @__sanitizer_cov_trace_pc() #26
  br label %cond.end

return.sink.split.i56:                            ; preds = %regmap_name.exit.thread61.return.sink.split.i56_crit_edge, %regmap_name.exit.return.sink.split.i56_crit_edge
  %.sink.i55 = phi ptr [ %name.i, %regmap_name.exit.return.sink.split.i56_crit_edge ], [ %39, %regmap_name.exit.thread61.return.sink.split.i56_crit_edge ]
  %46 = ptrtoint ptr %.sink.i55 to i32
  call void @__asan_load4_noabort(i32 %46)
  %47 = load ptr, ptr %.sink.i55, align 4
  br label %cond.end

cond.end:                                         ; preds = %return.sink.split.i56, %regmap_name.exit.thread61.cond.end_crit_edge, %regmap_name.exit.cond.end_crit_edge, %if.then.i.cond.end_crit_edge
  %cond = phi ptr [ @.str.41, %regmap_name.exit.cond.end_crit_edge ], [ @.str.41, %regmap_name.exit.thread61.cond.end_crit_edge ], [ %47, %return.sink.split.i56 ], [ %41, %if.then.i.cond.end_crit_edge ]
  %call22 = call ptr @strcpy(ptr noundef %add.ptr, ptr noundef %cond) #28
  %48 = ptrtoint ptr %rctx to i32
  call void @__asan_load4_noabort(i32 %48)
  %49 = load i32, ptr %rctx, align 4
  %50 = ptrtoint ptr %__regs to i32
  call void @__asan_load4_noabort(i32 %50)
  %51 = load ptr, ptr %__regs, align 4
  call void @perf_trace_run_bpf_submit(ptr noundef nonnull %call13, i32 noundef %sub, i32 noundef %49, ptr noundef %__data, i64 noundef 1, ptr noundef %51, ptr noundef %21, ptr noundef null) #24
  br label %cleanup

cleanup:                                          ; preds = %cond.end, %if.end.cleanup_crit_edge, %land.lhs.true7.cleanup_crit_edge
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %rctx) #24
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %__regs) #24
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal void @trace_event_raw_event_regcache_drop_region(ptr noundef %__data, ptr nocapture noundef readonly %map, i32 noundef %from, i32 noundef %to) #0 align 64 {
entry:
  %fbuffer = alloca %struct.trace_event_buffer, align 4
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %fbuffer) #24
  %flags.i = getelementptr inbounds %struct.trace_event_file, ptr %__data, i32 0, i32 7
  %0 = call ptr @memset(ptr %fbuffer, i32 255, i32 24)
  %1 = ptrtoint ptr %flags.i to i32
  call void @__asan_load4_noabort(i32 %1)
  %2 = load i32, ptr %flags.i, align 4
  %and.i = and i32 %2, 704
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i)
  %tobool.not.i = icmp eq i32 %and.i, 0
  br i1 %tobool.not.i, label %entry.if.end_crit_edge, label %if.end.i, !prof !386

entry.if.end_crit_edge:                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

if.end.i:                                         ; preds = %entry
  %and4.i = and i32 %2, 256
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and4.i)
  %tobool5.not.i = icmp eq i32 %and4.i, 0
  br i1 %tobool5.not.i, label %trace_trigger_soft_disabled.exit, label %if.end.i.if.end_crit_edge, !prof !387

if.end.i.if.end_crit_edge:                        ; preds = %if.end.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

trace_trigger_soft_disabled.exit:                 ; preds = %if.end.i
  %call.i = tail call zeroext i1 @__trace_trigger_soft_disabled(ptr noundef %__data) #24
  br i1 %call.i, label %trace_trigger_soft_disabled.exit.cleanup_crit_edge, label %trace_trigger_soft_disabled.exit.if.end_crit_edge

trace_trigger_soft_disabled.exit.if.end_crit_edge: ; preds = %trace_trigger_soft_disabled.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

trace_trigger_soft_disabled.exit.cleanup_crit_edge: ; preds = %trace_trigger_soft_disabled.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end:                                           ; preds = %trace_trigger_soft_disabled.exit.if.end_crit_edge, %if.end.i.if.end_crit_edge, %entry.if.end_crit_edge
  %dev.i.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 5
  %3 = ptrtoint ptr %dev.i.i to i32
  call void @__asan_load4_noabort(i32 %3)
  %4 = load ptr, ptr %dev.i.i, align 4
  %tobool.not.i.i = icmp eq ptr %4, null
  br i1 %tobool.not.i.i, label %regmap_name.exit.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.end
  %init_name.i.i.i = getelementptr inbounds %struct.device, ptr %4, i32 0, i32 3
  %5 = ptrtoint ptr %init_name.i.i.i to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load ptr, ptr %init_name.i.i.i, align 8
  %tobool.not.i.i.i = icmp eq ptr %6, null
  br i1 %tobool.not.i.i.i, label %regmap_name.exit.thread14.i, label %if.then.i.i.trace_event_get_offsets_regcache_drop_region.exit_crit_edge

if.then.i.i.trace_event_get_offsets_regcache_drop_region.exit_crit_edge: ; preds = %if.then.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %trace_event_get_offsets_regcache_drop_region.exit

regmap_name.exit.i:                               ; preds = %if.end
  %name.i.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 10
  %7 = ptrtoint ptr %name.i.i to i32
  call void @__asan_load4_noabort(i32 %7)
  %8 = load ptr, ptr %name.i.i, align 4
  %tobool.not.i27 = icmp eq ptr %8, null
  br i1 %tobool.not.i27, label %regmap_name.exit.i.trace_event_get_offsets_regcache_drop_region.exit_crit_edge, label %regmap_name.exit.i.return.sink.split.i9.i_crit_edge

regmap_name.exit.i.return.sink.split.i9.i_crit_edge: ; preds = %regmap_name.exit.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %return.sink.split.i9.i

regmap_name.exit.i.trace_event_get_offsets_regcache_drop_region.exit_crit_edge: ; preds = %regmap_name.exit.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %trace_event_get_offsets_regcache_drop_region.exit

regmap_name.exit.thread14.i:                      ; preds = %if.then.i.i
  %9 = ptrtoint ptr %4 to i32
  call void @__asan_load4_noabort(i32 %9)
  %10 = load ptr, ptr %4, align 4
  %tobool.not16.i = icmp eq ptr %10, null
  br i1 %tobool.not16.i, label %regmap_name.exit.thread14.i.trace_event_get_offsets_regcache_drop_region.exit_crit_edge, label %regmap_name.exit.thread14.i.return.sink.split.i9.i_crit_edge

regmap_name.exit.thread14.i.return.sink.split.i9.i_crit_edge: ; preds = %regmap_name.exit.thread14.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %return.sink.split.i9.i

regmap_name.exit.thread14.i.trace_event_get_offsets_regcache_drop_region.exit_crit_edge: ; preds = %regmap_name.exit.thread14.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %trace_event_get_offsets_regcache_drop_region.exit

return.sink.split.i9.i:                           ; preds = %regmap_name.exit.thread14.i.return.sink.split.i9.i_crit_edge, %regmap_name.exit.i.return.sink.split.i9.i_crit_edge
  %.sink.i8.i = phi ptr [ %name.i.i, %regmap_name.exit.i.return.sink.split.i9.i_crit_edge ], [ %4, %regmap_name.exit.thread14.i.return.sink.split.i9.i_crit_edge ]
  %11 = ptrtoint ptr %.sink.i8.i to i32
  call void @__asan_load4_noabort(i32 %11)
  %12 = load ptr, ptr %.sink.i8.i, align 4
  br label %trace_event_get_offsets_regcache_drop_region.exit

trace_event_get_offsets_regcache_drop_region.exit: ; preds = %return.sink.split.i9.i, %regmap_name.exit.thread14.i.trace_event_get_offsets_regcache_drop_region.exit_crit_edge, %regmap_name.exit.i.trace_event_get_offsets_regcache_drop_region.exit_crit_edge, %if.then.i.i.trace_event_get_offsets_regcache_drop_region.exit_crit_edge
  %cond.i = phi ptr [ @.str.41, %regmap_name.exit.i.trace_event_get_offsets_regcache_drop_region.exit_crit_edge ], [ @.str.41, %regmap_name.exit.thread14.i.trace_event_get_offsets_regcache_drop_region.exit_crit_edge ], [ %12, %return.sink.split.i9.i ], [ %6, %if.then.i.i.trace_event_get_offsets_regcache_drop_region.exit_crit_edge ]
  %call3.i = tail call i32 @strlen(ptr noundef %cond.i) #27
  %add = add i32 %call3.i, 21
  %call3 = call ptr @trace_event_buffer_reserve(ptr noundef nonnull %fbuffer, ptr noundef %__data, i32 noundef %add) #24
  %tobool.not = icmp eq ptr %call3, null
  br i1 %tobool.not, label %trace_event_get_offsets_regcache_drop_region.exit.cleanup_crit_edge, label %if.end5

trace_event_get_offsets_regcache_drop_region.exit.cleanup_crit_edge: ; preds = %trace_event_get_offsets_regcache_drop_region.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end5:                                          ; preds = %trace_event_get_offsets_regcache_drop_region.exit
  %add.i = shl i32 %call3.i, 16
  %or.i = add i32 %add.i, 65556
  %__data_loc_name = getelementptr inbounds %struct.trace_event_raw_regcache_drop_region, ptr %call3, i32 0, i32 1
  %13 = ptrtoint ptr %__data_loc_name to i32
  call void @__asan_store4_noabort(i32 %13)
  store i32 %or.i, ptr %__data_loc_name, align 4
  %add.ptr = getelementptr i8, ptr %call3, i32 20
  %14 = ptrtoint ptr %dev.i.i to i32
  call void @__asan_load4_noabort(i32 %14)
  %15 = load ptr, ptr %dev.i.i, align 4
  %tobool.not.i28 = icmp eq ptr %15, null
  br i1 %tobool.not.i28, label %regmap_name.exit, label %if.then.i

if.then.i:                                        ; preds = %if.end5
  %init_name.i.i = getelementptr inbounds %struct.device, ptr %15, i32 0, i32 3
  %16 = ptrtoint ptr %init_name.i.i to i32
  call void @__asan_load4_noabort(i32 %16)
  %17 = load ptr, ptr %init_name.i.i, align 8
  %tobool.not.i.i29 = icmp eq ptr %17, null
  br i1 %tobool.not.i.i29, label %regmap_name.exit.thread46, label %if.then.i.cond.end_crit_edge

if.then.i.cond.end_crit_edge:                     ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %cond.end

regmap_name.exit:                                 ; preds = %if.end5
  %name.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 10
  %18 = ptrtoint ptr %name.i to i32
  call void @__asan_load4_noabort(i32 %18)
  %19 = load ptr, ptr %name.i, align 4
  %tobool8.not = icmp eq ptr %19, null
  br i1 %tobool8.not, label %regmap_name.exit.cond.end_crit_edge, label %regmap_name.exit.return.sink.split.i40_crit_edge

regmap_name.exit.return.sink.split.i40_crit_edge: ; preds = %regmap_name.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %return.sink.split.i40

regmap_name.exit.cond.end_crit_edge:              ; preds = %regmap_name.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %cond.end

regmap_name.exit.thread46:                        ; preds = %if.then.i
  %20 = ptrtoint ptr %15 to i32
  call void @__asan_load4_noabort(i32 %20)
  %21 = load ptr, ptr %15, align 4
  %tobool8.not48 = icmp eq ptr %21, null
  br i1 %tobool8.not48, label %regmap_name.exit.thread46.cond.end_crit_edge, label %regmap_name.exit.thread46.return.sink.split.i40_crit_edge

regmap_name.exit.thread46.return.sink.split.i40_crit_edge: ; preds = %regmap_name.exit.thread46
  call void @__sanitizer_cov_trace_pc() #26
  br label %return.sink.split.i40

regmap_name.exit.thread46.cond.end_crit_edge:     ; preds = %regmap_name.exit.thread46
  call void @__sanitizer_cov_trace_pc() #26
  br label %cond.end

return.sink.split.i40:                            ; preds = %regmap_name.exit.thread46.return.sink.split.i40_crit_edge, %regmap_name.exit.return.sink.split.i40_crit_edge
  %.sink.i39 = phi ptr [ %name.i, %regmap_name.exit.return.sink.split.i40_crit_edge ], [ %15, %regmap_name.exit.thread46.return.sink.split.i40_crit_edge ]
  %22 = ptrtoint ptr %.sink.i39 to i32
  call void @__asan_load4_noabort(i32 %22)
  %23 = load ptr, ptr %.sink.i39, align 4
  br label %cond.end

cond.end:                                         ; preds = %return.sink.split.i40, %regmap_name.exit.thread46.cond.end_crit_edge, %regmap_name.exit.cond.end_crit_edge, %if.then.i.cond.end_crit_edge
  %cond = phi ptr [ @.str.41, %regmap_name.exit.cond.end_crit_edge ], [ @.str.41, %regmap_name.exit.thread46.cond.end_crit_edge ], [ %23, %return.sink.split.i40 ], [ %17, %if.then.i.cond.end_crit_edge ]
  %call10 = call ptr @strcpy(ptr noundef %add.ptr, ptr noundef %cond) #28
  %from11 = getelementptr inbounds %struct.trace_event_raw_regcache_drop_region, ptr %call3, i32 0, i32 2
  %24 = ptrtoint ptr %from11 to i32
  call void @__asan_store4_noabort(i32 %24)
  store i32 %from, ptr %from11, align 4
  %to12 = getelementptr inbounds %struct.trace_event_raw_regcache_drop_region, ptr %call3, i32 0, i32 3
  %25 = ptrtoint ptr %to12 to i32
  call void @__asan_store4_noabort(i32 %25)
  store i32 %to, ptr %to12, align 4
  call void @trace_event_buffer_commit(ptr noundef nonnull %fbuffer) #24
  br label %cleanup

cleanup:                                          ; preds = %cond.end, %trace_event_get_offsets_regcache_drop_region.exit.cleanup_crit_edge, %trace_trigger_soft_disabled.exit.cleanup_crit_edge
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %fbuffer) #24
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal void @perf_trace_regcache_drop_region(ptr noundef %__data, ptr nocapture noundef readonly %map, i32 noundef %from, i32 noundef %to) #0 align 64 {
entry:
  %__regs = alloca ptr, align 4
  %rctx = alloca i32, align 4
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %__regs) #24
  %0 = ptrtoint ptr %__regs to i32
  call void @__asan_store4_noabort(i32 %0)
  store ptr inttoptr (i32 -1 to ptr), ptr %__regs, align 4, !annotation !388
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %rctx) #24
  %1 = ptrtoint ptr %rctx to i32
  call void @__asan_store4_noabort(i32 %1)
  store i32 -1, ptr %rctx, align 4, !annotation !388
  %dev.i.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 5
  %2 = ptrtoint ptr %dev.i.i to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load ptr, ptr %dev.i.i, align 4
  %tobool.not.i.i = icmp eq ptr %3, null
  br i1 %tobool.not.i.i, label %regmap_name.exit.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %entry
  %init_name.i.i.i = getelementptr inbounds %struct.device, ptr %3, i32 0, i32 3
  %4 = ptrtoint ptr %init_name.i.i.i to i32
  call void @__asan_load4_noabort(i32 %4)
  %5 = load ptr, ptr %init_name.i.i.i, align 8
  %tobool.not.i.i.i = icmp eq ptr %5, null
  br i1 %tobool.not.i.i.i, label %regmap_name.exit.thread14.i, label %if.then.i.i.trace_event_get_offsets_regcache_drop_region.exit_crit_edge

if.then.i.i.trace_event_get_offsets_regcache_drop_region.exit_crit_edge: ; preds = %if.then.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %trace_event_get_offsets_regcache_drop_region.exit

regmap_name.exit.i:                               ; preds = %entry
  %name.i.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 10
  %6 = ptrtoint ptr %name.i.i to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load ptr, ptr %name.i.i, align 4
  %tobool.not.i = icmp eq ptr %7, null
  br i1 %tobool.not.i, label %regmap_name.exit.i.trace_event_get_offsets_regcache_drop_region.exit_crit_edge, label %regmap_name.exit.i.return.sink.split.i9.i_crit_edge

regmap_name.exit.i.return.sink.split.i9.i_crit_edge: ; preds = %regmap_name.exit.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %return.sink.split.i9.i

regmap_name.exit.i.trace_event_get_offsets_regcache_drop_region.exit_crit_edge: ; preds = %regmap_name.exit.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %trace_event_get_offsets_regcache_drop_region.exit

regmap_name.exit.thread14.i:                      ; preds = %if.then.i.i
  %8 = ptrtoint ptr %3 to i32
  call void @__asan_load4_noabort(i32 %8)
  %9 = load ptr, ptr %3, align 4
  %tobool.not16.i = icmp eq ptr %9, null
  br i1 %tobool.not16.i, label %regmap_name.exit.thread14.i.trace_event_get_offsets_regcache_drop_region.exit_crit_edge, label %regmap_name.exit.thread14.i.return.sink.split.i9.i_crit_edge

regmap_name.exit.thread14.i.return.sink.split.i9.i_crit_edge: ; preds = %regmap_name.exit.thread14.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %return.sink.split.i9.i

regmap_name.exit.thread14.i.trace_event_get_offsets_regcache_drop_region.exit_crit_edge: ; preds = %regmap_name.exit.thread14.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %trace_event_get_offsets_regcache_drop_region.exit

return.sink.split.i9.i:                           ; preds = %regmap_name.exit.thread14.i.return.sink.split.i9.i_crit_edge, %regmap_name.exit.i.return.sink.split.i9.i_crit_edge
  %.sink.i8.i = phi ptr [ %name.i.i, %regmap_name.exit.i.return.sink.split.i9.i_crit_edge ], [ %3, %regmap_name.exit.thread14.i.return.sink.split.i9.i_crit_edge ]
  %10 = ptrtoint ptr %.sink.i8.i to i32
  call void @__asan_load4_noabort(i32 %10)
  %11 = load ptr, ptr %.sink.i8.i, align 4
  br label %trace_event_get_offsets_regcache_drop_region.exit

trace_event_get_offsets_regcache_drop_region.exit: ; preds = %return.sink.split.i9.i, %regmap_name.exit.thread14.i.trace_event_get_offsets_regcache_drop_region.exit_crit_edge, %regmap_name.exit.i.trace_event_get_offsets_regcache_drop_region.exit_crit_edge, %if.then.i.i.trace_event_get_offsets_regcache_drop_region.exit_crit_edge
  %cond.i = phi ptr [ @.str.41, %regmap_name.exit.i.trace_event_get_offsets_regcache_drop_region.exit_crit_edge ], [ @.str.41, %regmap_name.exit.thread14.i.trace_event_get_offsets_regcache_drop_region.exit_crit_edge ], [ %11, %return.sink.split.i9.i ], [ %5, %if.then.i.i.trace_event_get_offsets_regcache_drop_region.exit_crit_edge ]
  %call3.i = tail call i32 @strlen(ptr noundef %cond.i) #27
  %add.i = shl i32 %call3.i, 16
  %or.i = add i32 %add.i, 65556
  %perf_events = getelementptr inbounds %struct.trace_event_call, ptr %__data, i32 0, i32 10
  %12 = ptrtoint ptr %perf_events to i32
  call void @__asan_load4_noabort(i32 %12)
  %13 = load ptr, ptr %perf_events, align 4
  %14 = ptrtoint ptr %13 to i32
  %15 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i = and i32 %15, -16384
  %16 = inttoptr i32 %and.i to ptr
  %cpu = getelementptr inbounds %struct.thread_info, ptr %16, i32 0, i32 3
  %17 = ptrtoint ptr %cpu to i32
  call void @__asan_load4_noabort(i32 %17)
  %18 = load i32, ptr %cpu, align 4
  %arrayidx = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %18
  %19 = ptrtoint ptr %arrayidx to i32
  call void @__asan_load4_noabort(i32 %19)
  %20 = load i32, ptr %arrayidx, align 4
  %add = add i32 %20, %14
  %21 = inttoptr i32 %add to ptr
  %prog_array.i = getelementptr inbounds %struct.trace_event_call, ptr %__data, i32 0, i32 11
  %22 = ptrtoint ptr %prog_array.i to i32
  call void @__asan_load4_noabort(i32 %22)
  %23 = load volatile ptr, ptr %prog_array.i, align 4
  %tobool.i.not = icmp eq ptr %23, null
  br i1 %tobool.i.not, label %land.lhs.true7, label %trace_event_get_offsets_regcache_drop_region.exit.if.end_crit_edge

trace_event_get_offsets_regcache_drop_region.exit.if.end_crit_edge: ; preds = %trace_event_get_offsets_regcache_drop_region.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

land.lhs.true7:                                   ; preds = %trace_event_get_offsets_regcache_drop_region.exit
  %24 = ptrtoint ptr %21 to i32
  call void @__asan_load4_noabort(i32 %24)
  %25 = load volatile ptr, ptr %21, align 4
  %tobool.not.i51.not = icmp eq ptr %25, null
  br i1 %tobool.not.i51.not, label %land.lhs.true7.cleanup_crit_edge, label %land.lhs.true7.if.end_crit_edge

land.lhs.true7.if.end_crit_edge:                  ; preds = %land.lhs.true7
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

land.lhs.true7.cleanup_crit_edge:                 ; preds = %land.lhs.true7
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end:                                           ; preds = %land.lhs.true7.if.end_crit_edge, %trace_event_get_offsets_regcache_drop_region.exit.if.end_crit_edge
  %add12 = add i32 %call3.i, 32
  %and = and i32 %add12, -8
  %sub = add i32 %and, -4
  %call13 = call ptr @perf_trace_buf_alloc(i32 noundef %sub, ptr noundef nonnull %__regs, ptr noundef nonnull %rctx) #24
  %tobool14.not = icmp eq ptr %call13, null
  br i1 %tobool14.not, label %if.end.cleanup_crit_edge, label %if.end16

if.end.cleanup_crit_edge:                         ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end16:                                         ; preds = %if.end
  %26 = ptrtoint ptr %__regs to i32
  call void @__asan_load4_noabort(i32 %26)
  %27 = load ptr, ptr %__regs, align 4
  %28 = call ptr @llvm.returnaddress(i32 0) #24
  %29 = ptrtoint ptr %28 to i32
  %arrayidx.i = getelementptr [18 x i32], ptr %27, i32 0, i32 15
  %30 = ptrtoint ptr %arrayidx.i to i32
  call void @__asan_store4_noabort(i32 %30)
  store i32 %29, ptr %arrayidx.i, align 4
  %31 = call ptr @llvm.frameaddress.p0(i32 0) #24
  %32 = ptrtoint ptr %31 to i32
  %arrayidx2.i = getelementptr [18 x i32], ptr %27, i32 0, i32 11
  %33 = ptrtoint ptr %arrayidx2.i to i32
  call void @__asan_store4_noabort(i32 %33)
  store i32 %32, ptr %arrayidx2.i, align 4
  %34 = call i32 @llvm.read_register.i32(metadata !376) #24
  %arrayidx4.i = getelementptr [18 x i32], ptr %27, i32 0, i32 13
  %35 = ptrtoint ptr %arrayidx4.i to i32
  call void @__asan_store4_noabort(i32 %35)
  store i32 %34, ptr %arrayidx4.i, align 4
  %arrayidx6.i = getelementptr [18 x i32], ptr %27, i32 0, i32 16
  %36 = ptrtoint ptr %arrayidx6.i to i32
  call void @__asan_store4_noabort(i32 %36)
  store i32 19, ptr %arrayidx6.i, align 4
  %__data_loc_name = getelementptr inbounds %struct.trace_event_raw_regcache_drop_region, ptr %call13, i32 0, i32 1
  %37 = ptrtoint ptr %__data_loc_name to i32
  call void @__asan_store4_noabort(i32 %37)
  store i32 %or.i, ptr %__data_loc_name, align 4
  %add.ptr = getelementptr i8, ptr %call13, i32 20
  %38 = ptrtoint ptr %dev.i.i to i32
  call void @__asan_load4_noabort(i32 %38)
  %39 = load ptr, ptr %dev.i.i, align 4
  %tobool.not.i52 = icmp eq ptr %39, null
  br i1 %tobool.not.i52, label %regmap_name.exit, label %if.then.i

if.then.i:                                        ; preds = %if.end16
  %init_name.i.i = getelementptr inbounds %struct.device, ptr %39, i32 0, i32 3
  %40 = ptrtoint ptr %init_name.i.i to i32
  call void @__asan_load4_noabort(i32 %40)
  %41 = load ptr, ptr %init_name.i.i, align 8
  %tobool.not.i.i53 = icmp eq ptr %41, null
  br i1 %tobool.not.i.i53, label %regmap_name.exit.thread67, label %if.then.i.cond.end_crit_edge

if.then.i.cond.end_crit_edge:                     ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %cond.end

regmap_name.exit:                                 ; preds = %if.end16
  %name.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 10
  %42 = ptrtoint ptr %name.i to i32
  call void @__asan_load4_noabort(i32 %42)
  %43 = load ptr, ptr %name.i, align 4
  %tobool20.not = icmp eq ptr %43, null
  br i1 %tobool20.not, label %regmap_name.exit.cond.end_crit_edge, label %regmap_name.exit.return.sink.split.i62_crit_edge

regmap_name.exit.return.sink.split.i62_crit_edge: ; preds = %regmap_name.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %return.sink.split.i62

regmap_name.exit.cond.end_crit_edge:              ; preds = %regmap_name.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %cond.end

regmap_name.exit.thread67:                        ; preds = %if.then.i
  %44 = ptrtoint ptr %39 to i32
  call void @__asan_load4_noabort(i32 %44)
  %45 = load ptr, ptr %39, align 4
  %tobool20.not69 = icmp eq ptr %45, null
  br i1 %tobool20.not69, label %regmap_name.exit.thread67.cond.end_crit_edge, label %regmap_name.exit.thread67.return.sink.split.i62_crit_edge

regmap_name.exit.thread67.return.sink.split.i62_crit_edge: ; preds = %regmap_name.exit.thread67
  call void @__sanitizer_cov_trace_pc() #26
  br label %return.sink.split.i62

regmap_name.exit.thread67.cond.end_crit_edge:     ; preds = %regmap_name.exit.thread67
  call void @__sanitizer_cov_trace_pc() #26
  br label %cond.end

return.sink.split.i62:                            ; preds = %regmap_name.exit.thread67.return.sink.split.i62_crit_edge, %regmap_name.exit.return.sink.split.i62_crit_edge
  %.sink.i61 = phi ptr [ %name.i, %regmap_name.exit.return.sink.split.i62_crit_edge ], [ %39, %regmap_name.exit.thread67.return.sink.split.i62_crit_edge ]
  %46 = ptrtoint ptr %.sink.i61 to i32
  call void @__asan_load4_noabort(i32 %46)
  %47 = load ptr, ptr %.sink.i61, align 4
  br label %cond.end

cond.end:                                         ; preds = %return.sink.split.i62, %regmap_name.exit.thread67.cond.end_crit_edge, %regmap_name.exit.cond.end_crit_edge, %if.then.i.cond.end_crit_edge
  %cond = phi ptr [ @.str.41, %regmap_name.exit.cond.end_crit_edge ], [ @.str.41, %regmap_name.exit.thread67.cond.end_crit_edge ], [ %47, %return.sink.split.i62 ], [ %41, %if.then.i.cond.end_crit_edge ]
  %call22 = call ptr @strcpy(ptr noundef %add.ptr, ptr noundef %cond) #28
  %from23 = getelementptr inbounds %struct.trace_event_raw_regcache_drop_region, ptr %call13, i32 0, i32 2
  %48 = ptrtoint ptr %from23 to i32
  call void @__asan_store4_noabort(i32 %48)
  store i32 %from, ptr %from23, align 4
  %to24 = getelementptr inbounds %struct.trace_event_raw_regcache_drop_region, ptr %call13, i32 0, i32 3
  %49 = ptrtoint ptr %to24 to i32
  call void @__asan_store4_noabort(i32 %49)
  store i32 %to, ptr %to24, align 4
  %50 = ptrtoint ptr %rctx to i32
  call void @__asan_load4_noabort(i32 %50)
  %51 = load i32, ptr %rctx, align 4
  %52 = ptrtoint ptr %__regs to i32
  call void @__asan_load4_noabort(i32 %52)
  %53 = load ptr, ptr %__regs, align 4
  call void @perf_trace_run_bpf_submit(ptr noundef nonnull %call13, i32 noundef %sub, i32 noundef %51, ptr noundef %__data, i64 noundef 1, ptr noundef %53, ptr noundef %21, ptr noundef null) #24
  br label %cleanup

cleanup:                                          ; preds = %cond.end, %if.end.cleanup_crit_edge, %land.lhs.true7.cleanup_crit_edge
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %rctx) #24
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %__regs) #24
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal void @__bpf_trace_regmap_reg(ptr noundef %__data, ptr noundef %map, i32 noundef %reg, i32 noundef %val) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  %0 = ptrtoint ptr %map to i32
  %conv = zext i32 %0 to i64
  %conv4 = zext i32 %reg to i64
  %conv8 = zext i32 %val to i64
  tail call void @bpf_trace_run3(ptr noundef %__data, i64 noundef %conv, i64 noundef %conv4, i64 noundef %conv8) #24
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal void @__bpf_trace_regmap_block(ptr noundef %__data, ptr noundef %map, i32 noundef %reg, i32 noundef %count) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  %0 = ptrtoint ptr %map to i32
  %conv = zext i32 %0 to i64
  %conv4 = zext i32 %reg to i64
  %conv8 = zext i32 %count to i64
  tail call void @bpf_trace_run3(ptr noundef %__data, i64 noundef %conv, i64 noundef %conv4, i64 noundef %conv8) #24
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal void @__bpf_trace_regcache_sync(ptr noundef %__data, ptr noundef %map, ptr noundef %type, ptr noundef %status) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  %0 = ptrtoint ptr %map to i32
  %conv = zext i32 %0 to i64
  %1 = ptrtoint ptr %type to i32
  %conv4 = zext i32 %1 to i64
  %2 = ptrtoint ptr %status to i32
  %conv8 = zext i32 %2 to i64
  tail call void @bpf_trace_run3(ptr noundef %__data, i64 noundef %conv, i64 noundef %conv4, i64 noundef %conv8) #24
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal void @__bpf_trace_regmap_bool(ptr noundef %__data, ptr noundef %map, i1 noundef zeroext %flag) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  %0 = ptrtoint ptr %map to i32
  %conv = zext i32 %0 to i64
  %conv5 = zext i1 %flag to i64
  tail call void @bpf_trace_run2(ptr noundef %__data, i64 noundef %conv, i64 noundef %conv5) #24
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal void @__bpf_trace_regmap_async(ptr noundef %__data, ptr noundef %map) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  %0 = ptrtoint ptr %map to i32
  %conv = zext i32 %0 to i64
  tail call void @bpf_trace_run1(ptr noundef %__data, i64 noundef %conv) #24
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal void @__bpf_trace_regcache_drop_region(ptr noundef %__data, ptr noundef %map, i32 noundef %from, i32 noundef %to) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  %0 = ptrtoint ptr %map to i32
  %conv = zext i32 %0 to i64
  %conv4 = zext i32 %from to i64
  %conv8 = zext i32 %to to i64
  tail call void @bpf_trace_run3(ptr noundef %__data, i64 noundef %conv, i64 noundef %conv4, i64 noundef %conv8) #24
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind null_pointer_is_valid readonly sanitize_address sspstrong uwtable(sync)
define dso_local zeroext i1 @regmap_reg_in_ranges(i32 noundef %reg, ptr nocapture noundef readonly %ranges, i32 noundef %nranges) #3 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %nranges)
  %cmp4.not = icmp eq i32 %nranges, 0
  br i1 %cmp4.not, label %entry.cleanup_crit_edge, label %entry.for.body_crit_edge

entry.for.body_crit_edge:                         ; preds = %entry
  br label %for.body

entry.cleanup_crit_edge:                          ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

for.body:                                         ; preds = %for.inc.for.body_crit_edge, %entry.for.body_crit_edge
  %cmp8 = phi i1 [ %cmp, %for.inc.for.body_crit_edge ], [ true, %entry.for.body_crit_edge ]
  %i.07 = phi i32 [ %inc, %for.inc.for.body_crit_edge ], [ 0, %entry.for.body_crit_edge ]
  %r.05 = phi ptr [ %incdec.ptr, %for.inc.for.body_crit_edge ], [ %ranges, %entry.for.body_crit_edge ]
  %0 = ptrtoint ptr %r.05 to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load i32, ptr %r.05, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %1, i32 %reg)
  %cmp.not.i = icmp ugt i32 %1, %reg
  br i1 %cmp.not.i, label %for.body.for.inc_crit_edge, label %regmap_reg_in_range.exit

for.body.for.inc_crit_edge:                       ; preds = %for.body
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc

regmap_reg_in_range.exit:                         ; preds = %for.body
  %range_max.i = getelementptr inbounds %struct.regmap_range, ptr %r.05, i32 0, i32 1
  %2 = ptrtoint ptr %range_max.i to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load i32, ptr %range_max.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %3, i32 %reg)
  %cmp1.i.not = icmp ult i32 %3, %reg
  br i1 %cmp1.i.not, label %regmap_reg_in_range.exit.for.inc_crit_edge, label %regmap_reg_in_range.exit.cleanup_crit_edge

regmap_reg_in_range.exit.cleanup_crit_edge:       ; preds = %regmap_reg_in_range.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

regmap_reg_in_range.exit.for.inc_crit_edge:       ; preds = %regmap_reg_in_range.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc

for.inc:                                          ; preds = %regmap_reg_in_range.exit.for.inc_crit_edge, %for.body.for.inc_crit_edge
  %inc = add nuw i32 %i.07, 1
  %incdec.ptr = getelementptr %struct.regmap_range, ptr %r.05, i32 1
  call void @__sanitizer_cov_trace_cmp4(i32 %inc, i32 %nranges)
  %cmp = icmp ult i32 %inc, %nranges
  %exitcond.not = icmp eq i32 %inc, %nranges
  br i1 %exitcond.not, label %for.inc.cleanup_crit_edge, label %for.inc.for.body_crit_edge

for.inc.for.body_crit_edge:                       ; preds = %for.inc
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body

for.inc.cleanup_crit_edge:                        ; preds = %for.inc
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

cleanup:                                          ; preds = %for.inc.cleanup_crit_edge, %regmap_reg_in_range.exit.cleanup_crit_edge, %entry.cleanup_crit_edge
  %cmp.lcssa = phi i1 [ false, %entry.cleanup_crit_edge ], [ %cmp, %for.inc.cleanup_crit_edge ], [ %cmp8, %regmap_reg_in_range.exit.cleanup_crit_edge ]
  ret i1 %cmp.lcssa
}

; Function Attrs: nofree norecurse nosync nounwind null_pointer_is_valid readonly sanitize_address sspstrong uwtable(sync)
define dso_local zeroext i1 @regmap_check_range_table(ptr nocapture readnone %map, i32 noundef %reg, ptr nocapture noundef readonly %table) #3 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %n_no_ranges = getelementptr inbounds %struct.regmap_access_table, ptr %table, i32 0, i32 3
  %0 = ptrtoint ptr %n_no_ranges to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load i32, ptr %n_no_ranges, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %1)
  %cmp4.not.i = icmp eq i32 %1, 0
  br i1 %cmp4.not.i, label %entry.if.end_crit_edge, label %for.body.i.preheader

entry.if.end_crit_edge:                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

for.body.i.preheader:                             ; preds = %entry
  %no_ranges = getelementptr inbounds %struct.regmap_access_table, ptr %table, i32 0, i32 2
  %2 = ptrtoint ptr %no_ranges to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load ptr, ptr %no_ranges, align 4
  br label %for.body.i

for.body.i:                                       ; preds = %for.inc.i.for.body.i_crit_edge, %for.body.i.preheader
  %cmp8.i = phi i1 [ %cmp.i, %for.inc.i.for.body.i_crit_edge ], [ true, %for.body.i.preheader ]
  %i.07.i = phi i32 [ %inc.i, %for.inc.i.for.body.i_crit_edge ], [ 0, %for.body.i.preheader ]
  %r.05.i = phi ptr [ %incdec.ptr.i, %for.inc.i.for.body.i_crit_edge ], [ %3, %for.body.i.preheader ]
  %4 = ptrtoint ptr %r.05.i to i32
  call void @__asan_load4_noabort(i32 %4)
  %5 = load i32, ptr %r.05.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %5, i32 %reg)
  %cmp.not.i.i = icmp ugt i32 %5, %reg
  br i1 %cmp.not.i.i, label %for.body.i.for.inc.i_crit_edge, label %regmap_reg_in_range.exit.i

for.body.i.for.inc.i_crit_edge:                   ; preds = %for.body.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i

regmap_reg_in_range.exit.i:                       ; preds = %for.body.i
  %range_max.i.i = getelementptr inbounds %struct.regmap_range, ptr %r.05.i, i32 0, i32 1
  %6 = ptrtoint ptr %range_max.i.i to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load i32, ptr %range_max.i.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %7, i32 %reg)
  %cmp1.i.not.i = icmp ult i32 %7, %reg
  br i1 %cmp1.i.not.i, label %regmap_reg_in_range.exit.i.for.inc.i_crit_edge, label %regmap_reg_in_range.exit.i.regmap_reg_in_ranges.exit_crit_edge

regmap_reg_in_range.exit.i.regmap_reg_in_ranges.exit_crit_edge: ; preds = %regmap_reg_in_range.exit.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_reg_in_ranges.exit

regmap_reg_in_range.exit.i.for.inc.i_crit_edge:   ; preds = %regmap_reg_in_range.exit.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i

for.inc.i:                                        ; preds = %regmap_reg_in_range.exit.i.for.inc.i_crit_edge, %for.body.i.for.inc.i_crit_edge
  %inc.i = add nuw i32 %i.07.i, 1
  %incdec.ptr.i = getelementptr %struct.regmap_range, ptr %r.05.i, i32 1
  call void @__sanitizer_cov_trace_cmp4(i32 %inc.i, i32 %1)
  %cmp.i = icmp ult i32 %inc.i, %1
  %exitcond.not.i = icmp eq i32 %inc.i, %1
  br i1 %exitcond.not.i, label %for.inc.i.regmap_reg_in_ranges.exit_crit_edge, label %for.inc.i.for.body.i_crit_edge

for.inc.i.for.body.i_crit_edge:                   ; preds = %for.inc.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body.i

for.inc.i.regmap_reg_in_ranges.exit_crit_edge:    ; preds = %for.inc.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_reg_in_ranges.exit

regmap_reg_in_ranges.exit:                        ; preds = %for.inc.i.regmap_reg_in_ranges.exit_crit_edge, %regmap_reg_in_range.exit.i.regmap_reg_in_ranges.exit_crit_edge
  %cmp.lcssa.i = phi i1 [ %cmp.i, %for.inc.i.regmap_reg_in_ranges.exit_crit_edge ], [ %cmp8.i, %regmap_reg_in_range.exit.i.regmap_reg_in_ranges.exit_crit_edge ]
  br i1 %cmp.lcssa.i, label %regmap_reg_in_ranges.exit.return_crit_edge, label %regmap_reg_in_ranges.exit.if.end_crit_edge

regmap_reg_in_ranges.exit.if.end_crit_edge:       ; preds = %regmap_reg_in_ranges.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

regmap_reg_in_ranges.exit.return_crit_edge:       ; preds = %regmap_reg_in_ranges.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %return

if.end:                                           ; preds = %regmap_reg_in_ranges.exit.if.end_crit_edge, %entry.if.end_crit_edge
  %n_yes_ranges = getelementptr inbounds %struct.regmap_access_table, ptr %table, i32 0, i32 1
  %8 = ptrtoint ptr %n_yes_ranges to i32
  call void @__asan_load4_noabort(i32 %8)
  %9 = load i32, ptr %n_yes_ranges, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %9)
  %tobool.not = icmp eq i32 %9, 0
  br i1 %tobool.not, label %if.end.return_crit_edge, label %if.end2

if.end.return_crit_edge:                          ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #26
  br label %return

if.end2:                                          ; preds = %if.end
  %10 = ptrtoint ptr %table to i32
  call void @__asan_load4_noabort(i32 %10)
  %11 = load ptr, ptr %table, align 4
  br label %for.body.i15

for.body.i15:                                     ; preds = %for.inc.i23.for.body.i15_crit_edge, %if.end2
  %cmp8.i11 = phi i1 [ %cmp.i21, %for.inc.i23.for.body.i15_crit_edge ], [ true, %if.end2 ]
  %i.07.i12 = phi i32 [ %inc.i19, %for.inc.i23.for.body.i15_crit_edge ], [ 0, %if.end2 ]
  %r.05.i13 = phi ptr [ %incdec.ptr.i20, %for.inc.i23.for.body.i15_crit_edge ], [ %11, %if.end2 ]
  %12 = ptrtoint ptr %r.05.i13 to i32
  call void @__asan_load4_noabort(i32 %12)
  %13 = load i32, ptr %r.05.i13, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %13, i32 %reg)
  %cmp.not.i.i14 = icmp ugt i32 %13, %reg
  br i1 %cmp.not.i.i14, label %for.body.i15.for.inc.i23_crit_edge, label %regmap_reg_in_range.exit.i18

for.body.i15.for.inc.i23_crit_edge:               ; preds = %for.body.i15
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i23

regmap_reg_in_range.exit.i18:                     ; preds = %for.body.i15
  %range_max.i.i16 = getelementptr inbounds %struct.regmap_range, ptr %r.05.i13, i32 0, i32 1
  %14 = ptrtoint ptr %range_max.i.i16 to i32
  call void @__asan_load4_noabort(i32 %14)
  %15 = load i32, ptr %range_max.i.i16, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %15, i32 %reg)
  %cmp1.i.not.i17 = icmp ult i32 %15, %reg
  br i1 %cmp1.i.not.i17, label %regmap_reg_in_range.exit.i18.for.inc.i23_crit_edge, label %regmap_reg_in_range.exit.i18.return_crit_edge

regmap_reg_in_range.exit.i18.return_crit_edge:    ; preds = %regmap_reg_in_range.exit.i18
  call void @__sanitizer_cov_trace_pc() #26
  br label %return

regmap_reg_in_range.exit.i18.for.inc.i23_crit_edge: ; preds = %regmap_reg_in_range.exit.i18
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i23

for.inc.i23:                                      ; preds = %regmap_reg_in_range.exit.i18.for.inc.i23_crit_edge, %for.body.i15.for.inc.i23_crit_edge
  %inc.i19 = add nuw i32 %i.07.i12, 1
  %incdec.ptr.i20 = getelementptr %struct.regmap_range, ptr %r.05.i13, i32 1
  call void @__sanitizer_cov_trace_cmp4(i32 %inc.i19, i32 %9)
  %cmp.i21 = icmp ult i32 %inc.i19, %9
  %exitcond.not.i22 = icmp eq i32 %inc.i19, %9
  br i1 %exitcond.not.i22, label %for.inc.i23.return_crit_edge, label %for.inc.i23.for.body.i15_crit_edge

for.inc.i23.for.body.i15_crit_edge:               ; preds = %for.inc.i23
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body.i15

for.inc.i23.return_crit_edge:                     ; preds = %for.inc.i23
  call void @__sanitizer_cov_trace_pc() #26
  br label %return

return:                                           ; preds = %for.inc.i23.return_crit_edge, %regmap_reg_in_range.exit.i18.return_crit_edge, %if.end.return_crit_edge, %regmap_reg_in_ranges.exit.return_crit_edge
  %retval.0 = phi i1 [ false, %regmap_reg_in_ranges.exit.return_crit_edge ], [ true, %if.end.return_crit_edge ], [ %cmp8.i11, %regmap_reg_in_range.exit.i18.return_crit_edge ], [ %cmp.i21, %for.inc.i23.return_crit_edge ]
  ret i1 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local zeroext i1 @regmap_writeable(ptr nocapture noundef readonly %map, i32 noundef %reg) local_unnamed_addr #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %max_register = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 25
  %0 = ptrtoint ptr %max_register to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load i32, ptr %max_register, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %1)
  %tobool.not = icmp ne i32 %1, 0
  call void @__sanitizer_cov_trace_cmp4(i32 %1, i32 %reg)
  %cmp = icmp ult i32 %1, %reg
  %or.cond = and i1 %tobool.not, %cmp
  br i1 %or.cond, label %entry.return_crit_edge, label %if.end

entry.return_crit_edge:                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %return

if.end:                                           ; preds = %entry
  %writeable_reg = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 26
  %2 = ptrtoint ptr %writeable_reg to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load ptr, ptr %writeable_reg, align 4
  %tobool2.not = icmp eq ptr %3, null
  br i1 %tobool2.not, label %if.end5, label %if.then3

if.then3:                                         ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #26
  %dev = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 5
  %4 = ptrtoint ptr %dev to i32
  call void @__asan_load4_noabort(i32 %4)
  %5 = load ptr, ptr %dev, align 4
  %call = tail call zeroext i1 %3(ptr noundef %5, i32 noundef %reg) #24
  br label %return

if.end5:                                          ; preds = %if.end
  %wr_table = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 32
  %6 = ptrtoint ptr %wr_table to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load ptr, ptr %wr_table, align 4
  %tobool6.not = icmp eq ptr %7, null
  br i1 %tobool6.not, label %if.end5.return_crit_edge, label %if.then7

if.end5.return_crit_edge:                         ; preds = %if.end5
  call void @__sanitizer_cov_trace_pc() #26
  br label %return

if.then7:                                         ; preds = %if.end5
  %n_no_ranges.i = getelementptr inbounds %struct.regmap_access_table, ptr %7, i32 0, i32 3
  %8 = ptrtoint ptr %n_no_ranges.i to i32
  call void @__asan_load4_noabort(i32 %8)
  %9 = load i32, ptr %n_no_ranges.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %9)
  %cmp4.not.i.i = icmp eq i32 %9, 0
  br i1 %cmp4.not.i.i, label %if.then7.if.end.i_crit_edge, label %for.body.i.preheader.i

if.then7.if.end.i_crit_edge:                      ; preds = %if.then7
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end.i

for.body.i.preheader.i:                           ; preds = %if.then7
  %no_ranges.i = getelementptr inbounds %struct.regmap_access_table, ptr %7, i32 0, i32 2
  %10 = ptrtoint ptr %no_ranges.i to i32
  call void @__asan_load4_noabort(i32 %10)
  %11 = load ptr, ptr %no_ranges.i, align 4
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.inc.i.i.for.body.i.i_crit_edge, %for.body.i.preheader.i
  %cmp8.i.i = phi i1 [ %cmp.i.i, %for.inc.i.i.for.body.i.i_crit_edge ], [ true, %for.body.i.preheader.i ]
  %i.07.i.i = phi i32 [ %inc.i.i, %for.inc.i.i.for.body.i.i_crit_edge ], [ 0, %for.body.i.preheader.i ]
  %r.05.i.i = phi ptr [ %incdec.ptr.i.i, %for.inc.i.i.for.body.i.i_crit_edge ], [ %11, %for.body.i.preheader.i ]
  %12 = ptrtoint ptr %r.05.i.i to i32
  call void @__asan_load4_noabort(i32 %12)
  %13 = load i32, ptr %r.05.i.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %13, i32 %reg)
  %cmp.not.i.i.i = icmp ugt i32 %13, %reg
  br i1 %cmp.not.i.i.i, label %for.body.i.i.for.inc.i.i_crit_edge, label %regmap_reg_in_range.exit.i.i

for.body.i.i.for.inc.i.i_crit_edge:               ; preds = %for.body.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i.i

regmap_reg_in_range.exit.i.i:                     ; preds = %for.body.i.i
  %range_max.i.i.i = getelementptr inbounds %struct.regmap_range, ptr %r.05.i.i, i32 0, i32 1
  %14 = ptrtoint ptr %range_max.i.i.i to i32
  call void @__asan_load4_noabort(i32 %14)
  %15 = load i32, ptr %range_max.i.i.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %15, i32 %reg)
  %cmp1.i.not.i.i = icmp ult i32 %15, %reg
  br i1 %cmp1.i.not.i.i, label %regmap_reg_in_range.exit.i.i.for.inc.i.i_crit_edge, label %regmap_reg_in_range.exit.i.i.regmap_reg_in_ranges.exit.i_crit_edge

regmap_reg_in_range.exit.i.i.regmap_reg_in_ranges.exit.i_crit_edge: ; preds = %regmap_reg_in_range.exit.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_reg_in_ranges.exit.i

regmap_reg_in_range.exit.i.i.for.inc.i.i_crit_edge: ; preds = %regmap_reg_in_range.exit.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i.i

for.inc.i.i:                                      ; preds = %regmap_reg_in_range.exit.i.i.for.inc.i.i_crit_edge, %for.body.i.i.for.inc.i.i_crit_edge
  %inc.i.i = add nuw i32 %i.07.i.i, 1
  %incdec.ptr.i.i = getelementptr %struct.regmap_range, ptr %r.05.i.i, i32 1
  call void @__sanitizer_cov_trace_cmp4(i32 %inc.i.i, i32 %9)
  %cmp.i.i = icmp ult i32 %inc.i.i, %9
  %exitcond.not.i.i = icmp eq i32 %inc.i.i, %9
  br i1 %exitcond.not.i.i, label %for.inc.i.i.regmap_reg_in_ranges.exit.i_crit_edge, label %for.inc.i.i.for.body.i.i_crit_edge

for.inc.i.i.for.body.i.i_crit_edge:               ; preds = %for.inc.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body.i.i

for.inc.i.i.regmap_reg_in_ranges.exit.i_crit_edge: ; preds = %for.inc.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_reg_in_ranges.exit.i

regmap_reg_in_ranges.exit.i:                      ; preds = %for.inc.i.i.regmap_reg_in_ranges.exit.i_crit_edge, %regmap_reg_in_range.exit.i.i.regmap_reg_in_ranges.exit.i_crit_edge
  %cmp.lcssa.i.i = phi i1 [ %cmp.i.i, %for.inc.i.i.regmap_reg_in_ranges.exit.i_crit_edge ], [ %cmp8.i.i, %regmap_reg_in_range.exit.i.i.regmap_reg_in_ranges.exit.i_crit_edge ]
  br i1 %cmp.lcssa.i.i, label %regmap_reg_in_ranges.exit.i.return_crit_edge, label %regmap_reg_in_ranges.exit.i.if.end.i_crit_edge

regmap_reg_in_ranges.exit.i.if.end.i_crit_edge:   ; preds = %regmap_reg_in_ranges.exit.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end.i

regmap_reg_in_ranges.exit.i.return_crit_edge:     ; preds = %regmap_reg_in_ranges.exit.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %return

if.end.i:                                         ; preds = %regmap_reg_in_ranges.exit.i.if.end.i_crit_edge, %if.then7.if.end.i_crit_edge
  %n_yes_ranges.i = getelementptr inbounds %struct.regmap_access_table, ptr %7, i32 0, i32 1
  %16 = ptrtoint ptr %n_yes_ranges.i to i32
  call void @__asan_load4_noabort(i32 %16)
  %17 = load i32, ptr %n_yes_ranges.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %17)
  %tobool.not.i = icmp eq i32 %17, 0
  br i1 %tobool.not.i, label %if.end.i.return_crit_edge, label %if.end2.i

if.end.i.return_crit_edge:                        ; preds = %if.end.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %return

if.end2.i:                                        ; preds = %if.end.i
  %18 = ptrtoint ptr %7 to i32
  call void @__asan_load4_noabort(i32 %18)
  %19 = load ptr, ptr %7, align 4
  br label %for.body.i15.i

for.body.i15.i:                                   ; preds = %for.inc.i23.i.for.body.i15.i_crit_edge, %if.end2.i
  %cmp8.i11.i = phi i1 [ %cmp.i21.i, %for.inc.i23.i.for.body.i15.i_crit_edge ], [ true, %if.end2.i ]
  %i.07.i12.i = phi i32 [ %inc.i19.i, %for.inc.i23.i.for.body.i15.i_crit_edge ], [ 0, %if.end2.i ]
  %r.05.i13.i = phi ptr [ %incdec.ptr.i20.i, %for.inc.i23.i.for.body.i15.i_crit_edge ], [ %19, %if.end2.i ]
  %20 = ptrtoint ptr %r.05.i13.i to i32
  call void @__asan_load4_noabort(i32 %20)
  %21 = load i32, ptr %r.05.i13.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %21, i32 %reg)
  %cmp.not.i.i14.i = icmp ugt i32 %21, %reg
  br i1 %cmp.not.i.i14.i, label %for.body.i15.i.for.inc.i23.i_crit_edge, label %regmap_reg_in_range.exit.i18.i

for.body.i15.i.for.inc.i23.i_crit_edge:           ; preds = %for.body.i15.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i23.i

regmap_reg_in_range.exit.i18.i:                   ; preds = %for.body.i15.i
  %range_max.i.i16.i = getelementptr inbounds %struct.regmap_range, ptr %r.05.i13.i, i32 0, i32 1
  %22 = ptrtoint ptr %range_max.i.i16.i to i32
  call void @__asan_load4_noabort(i32 %22)
  %23 = load i32, ptr %range_max.i.i16.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %23, i32 %reg)
  %cmp1.i.not.i17.i = icmp ult i32 %23, %reg
  br i1 %cmp1.i.not.i17.i, label %regmap_reg_in_range.exit.i18.i.for.inc.i23.i_crit_edge, label %regmap_reg_in_range.exit.i18.i.return_crit_edge

regmap_reg_in_range.exit.i18.i.return_crit_edge:  ; preds = %regmap_reg_in_range.exit.i18.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %return

regmap_reg_in_range.exit.i18.i.for.inc.i23.i_crit_edge: ; preds = %regmap_reg_in_range.exit.i18.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i23.i

for.inc.i23.i:                                    ; preds = %regmap_reg_in_range.exit.i18.i.for.inc.i23.i_crit_edge, %for.body.i15.i.for.inc.i23.i_crit_edge
  %inc.i19.i = add nuw i32 %i.07.i12.i, 1
  %incdec.ptr.i20.i = getelementptr %struct.regmap_range, ptr %r.05.i13.i, i32 1
  call void @__sanitizer_cov_trace_cmp4(i32 %inc.i19.i, i32 %17)
  %cmp.i21.i = icmp ult i32 %inc.i19.i, %17
  %exitcond.not.i22.i = icmp eq i32 %inc.i19.i, %17
  br i1 %exitcond.not.i22.i, label %for.inc.i23.i.return_crit_edge, label %for.inc.i23.i.for.body.i15.i_crit_edge

for.inc.i23.i.for.body.i15.i_crit_edge:           ; preds = %for.inc.i23.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body.i15.i

for.inc.i23.i.return_crit_edge:                   ; preds = %for.inc.i23.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %return

return:                                           ; preds = %for.inc.i23.i.return_crit_edge, %regmap_reg_in_range.exit.i18.i.return_crit_edge, %if.end.i.return_crit_edge, %regmap_reg_in_ranges.exit.i.return_crit_edge, %if.end5.return_crit_edge, %if.then3, %entry.return_crit_edge
  %retval.0 = phi i1 [ %call, %if.then3 ], [ false, %entry.return_crit_edge ], [ true, %if.end5.return_crit_edge ], [ false, %regmap_reg_in_ranges.exit.i.return_crit_edge ], [ true, %if.end.i.return_crit_edge ], [ %cmp.i21.i, %for.inc.i23.i.return_crit_edge ], [ %cmp8.i11.i, %regmap_reg_in_range.exit.i18.i.return_crit_edge ]
  ret i1 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local zeroext i1 @regmap_cached(ptr noundef %map, i32 noundef %reg) local_unnamed_addr #0 align 64 {
entry:
  %val = alloca i32, align 4
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %val) #24
  %0 = ptrtoint ptr %val to i32
  call void @__asan_store4_noabort(i32 %0)
  store i32 -1, ptr %val, align 4, !annotation !388
  %cache_type = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 48
  %1 = ptrtoint ptr %cache_type to i32
  call void @__asan_load4_noabort(i32 %1)
  %2 = load i32, ptr %cache_type, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %2)
  %cmp = icmp eq i32 %2, 0
  br i1 %cmp, label %entry.cleanup_crit_edge, label %if.end

entry.cleanup_crit_edge:                          ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end:                                           ; preds = %entry
  %cache_ops = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 47
  %3 = ptrtoint ptr %cache_ops to i32
  call void @__asan_load4_noabort(i32 %3)
  %4 = load ptr, ptr %cache_ops, align 4
  %tobool.not = icmp eq ptr %4, null
  br i1 %tobool.not, label %if.end.cleanup_crit_edge, label %if.end2

if.end.cleanup_crit_edge:                         ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end2:                                          ; preds = %if.end
  %max_register = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 25
  %5 = ptrtoint ptr %max_register to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load i32, ptr %max_register, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %6)
  %tobool3.not = icmp ne i32 %6, 0
  call void @__sanitizer_cov_trace_cmp4(i32 %6, i32 %reg)
  %cmp5 = icmp ult i32 %6, %reg
  %or.cond = and i1 %tobool3.not, %cmp5
  br i1 %or.cond, label %if.end2.cleanup_crit_edge, label %if.end7

if.end2.cleanup_crit_edge:                        ; preds = %if.end2
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end7:                                          ; preds = %if.end2
  call void @__sanitizer_cov_trace_pc() #26
  %lock = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 1
  %7 = ptrtoint ptr %lock to i32
  call void @__asan_load4_noabort(i32 %7)
  %8 = load ptr, ptr %lock, align 4
  %lock_arg = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 3
  %9 = ptrtoint ptr %lock_arg to i32
  call void @__asan_load4_noabort(i32 %9)
  %10 = load ptr, ptr %lock_arg, align 4
  tail call void %8(ptr noundef %10) #24
  %call = call i32 @regcache_read(ptr noundef %map, i32 noundef %reg, ptr noundef nonnull %val) #24
  %unlock = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 2
  %11 = ptrtoint ptr %unlock to i32
  call void @__asan_load4_noabort(i32 %11)
  %12 = load ptr, ptr %unlock, align 4
  %13 = ptrtoint ptr %lock_arg to i32
  call void @__asan_load4_noabort(i32 %13)
  %14 = load ptr, ptr %lock_arg, align 4
  call void %12(ptr noundef %14) #24
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call)
  %tobool9.not = icmp eq i32 %call, 0
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.end2.cleanup_crit_edge, %if.end.cleanup_crit_edge, %entry.cleanup_crit_edge
  %retval.0 = phi i1 [ false, %entry.cleanup_crit_edge ], [ false, %if.end.cleanup_crit_edge ], [ false, %if.end2.cleanup_crit_edge ], [ %tobool9.not, %if.end7 ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %val) #24
  ret i1 %retval.0
}

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @regcache_read(ptr noundef, i32 noundef, ptr noundef) local_unnamed_addr #2

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local zeroext i1 @regmap_readable(ptr nocapture noundef readonly %map, i32 noundef %reg) local_unnamed_addr #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %reg_read = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 38
  %0 = ptrtoint ptr %reg_read to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %reg_read, align 4
  %tobool.not = icmp eq ptr %1, null
  br i1 %tobool.not, label %entry.return_crit_edge, label %if.end

entry.return_crit_edge:                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %return

if.end:                                           ; preds = %entry
  %max_register = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 25
  %2 = ptrtoint ptr %max_register to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load i32, ptr %max_register, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %3)
  %tobool1.not = icmp ne i32 %3, 0
  call void @__sanitizer_cov_trace_cmp4(i32 %3, i32 %reg)
  %cmp = icmp ult i32 %3, %reg
  %or.cond = and i1 %tobool1.not, %cmp
  br i1 %or.cond, label %if.end.return_crit_edge, label %if.end4

if.end.return_crit_edge:                          ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #26
  br label %return

if.end4:                                          ; preds = %if.end
  %format_write = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 7, i32 4
  %4 = ptrtoint ptr %format_write to i32
  call void @__asan_load4_noabort(i32 %4)
  %5 = load ptr, ptr %format_write, align 4
  %tobool5.not = icmp eq ptr %5, null
  br i1 %tobool5.not, label %if.end7, label %if.end4.return_crit_edge

if.end4.return_crit_edge:                         ; preds = %if.end4
  call void @__sanitizer_cov_trace_pc() #26
  br label %return

if.end7:                                          ; preds = %if.end4
  %readable_reg = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 27
  %6 = ptrtoint ptr %readable_reg to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load ptr, ptr %readable_reg, align 4
  %tobool8.not = icmp eq ptr %7, null
  br i1 %tobool8.not, label %if.end11, label %if.then9

if.then9:                                         ; preds = %if.end7
  call void @__sanitizer_cov_trace_pc() #26
  %dev = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 5
  %8 = ptrtoint ptr %dev to i32
  call void @__asan_load4_noabort(i32 %8)
  %9 = load ptr, ptr %dev, align 4
  %call = tail call zeroext i1 %7(ptr noundef %9, i32 noundef %reg) #24
  br label %return

if.end11:                                         ; preds = %if.end7
  %rd_table = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 33
  %10 = ptrtoint ptr %rd_table to i32
  call void @__asan_load4_noabort(i32 %10)
  %11 = load ptr, ptr %rd_table, align 4
  %tobool12.not = icmp eq ptr %11, null
  br i1 %tobool12.not, label %if.end11.return_crit_edge, label %if.then13

if.end11.return_crit_edge:                        ; preds = %if.end11
  call void @__sanitizer_cov_trace_pc() #26
  br label %return

if.then13:                                        ; preds = %if.end11
  %n_no_ranges.i = getelementptr inbounds %struct.regmap_access_table, ptr %11, i32 0, i32 3
  %12 = ptrtoint ptr %n_no_ranges.i to i32
  call void @__asan_load4_noabort(i32 %12)
  %13 = load i32, ptr %n_no_ranges.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %13)
  %cmp4.not.i.i = icmp eq i32 %13, 0
  br i1 %cmp4.not.i.i, label %if.then13.if.end.i_crit_edge, label %for.body.i.preheader.i

if.then13.if.end.i_crit_edge:                     ; preds = %if.then13
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end.i

for.body.i.preheader.i:                           ; preds = %if.then13
  %no_ranges.i = getelementptr inbounds %struct.regmap_access_table, ptr %11, i32 0, i32 2
  %14 = ptrtoint ptr %no_ranges.i to i32
  call void @__asan_load4_noabort(i32 %14)
  %15 = load ptr, ptr %no_ranges.i, align 4
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.inc.i.i.for.body.i.i_crit_edge, %for.body.i.preheader.i
  %cmp8.i.i = phi i1 [ %cmp.i.i, %for.inc.i.i.for.body.i.i_crit_edge ], [ true, %for.body.i.preheader.i ]
  %i.07.i.i = phi i32 [ %inc.i.i, %for.inc.i.i.for.body.i.i_crit_edge ], [ 0, %for.body.i.preheader.i ]
  %r.05.i.i = phi ptr [ %incdec.ptr.i.i, %for.inc.i.i.for.body.i.i_crit_edge ], [ %15, %for.body.i.preheader.i ]
  %16 = ptrtoint ptr %r.05.i.i to i32
  call void @__asan_load4_noabort(i32 %16)
  %17 = load i32, ptr %r.05.i.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %17, i32 %reg)
  %cmp.not.i.i.i = icmp ugt i32 %17, %reg
  br i1 %cmp.not.i.i.i, label %for.body.i.i.for.inc.i.i_crit_edge, label %regmap_reg_in_range.exit.i.i

for.body.i.i.for.inc.i.i_crit_edge:               ; preds = %for.body.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i.i

regmap_reg_in_range.exit.i.i:                     ; preds = %for.body.i.i
  %range_max.i.i.i = getelementptr inbounds %struct.regmap_range, ptr %r.05.i.i, i32 0, i32 1
  %18 = ptrtoint ptr %range_max.i.i.i to i32
  call void @__asan_load4_noabort(i32 %18)
  %19 = load i32, ptr %range_max.i.i.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %19, i32 %reg)
  %cmp1.i.not.i.i = icmp ult i32 %19, %reg
  br i1 %cmp1.i.not.i.i, label %regmap_reg_in_range.exit.i.i.for.inc.i.i_crit_edge, label %regmap_reg_in_range.exit.i.i.regmap_reg_in_ranges.exit.i_crit_edge

regmap_reg_in_range.exit.i.i.regmap_reg_in_ranges.exit.i_crit_edge: ; preds = %regmap_reg_in_range.exit.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_reg_in_ranges.exit.i

regmap_reg_in_range.exit.i.i.for.inc.i.i_crit_edge: ; preds = %regmap_reg_in_range.exit.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i.i

for.inc.i.i:                                      ; preds = %regmap_reg_in_range.exit.i.i.for.inc.i.i_crit_edge, %for.body.i.i.for.inc.i.i_crit_edge
  %inc.i.i = add nuw i32 %i.07.i.i, 1
  %incdec.ptr.i.i = getelementptr %struct.regmap_range, ptr %r.05.i.i, i32 1
  call void @__sanitizer_cov_trace_cmp4(i32 %inc.i.i, i32 %13)
  %cmp.i.i = icmp ult i32 %inc.i.i, %13
  %exitcond.not.i.i = icmp eq i32 %inc.i.i, %13
  br i1 %exitcond.not.i.i, label %for.inc.i.i.regmap_reg_in_ranges.exit.i_crit_edge, label %for.inc.i.i.for.body.i.i_crit_edge

for.inc.i.i.for.body.i.i_crit_edge:               ; preds = %for.inc.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body.i.i

for.inc.i.i.regmap_reg_in_ranges.exit.i_crit_edge: ; preds = %for.inc.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_reg_in_ranges.exit.i

regmap_reg_in_ranges.exit.i:                      ; preds = %for.inc.i.i.regmap_reg_in_ranges.exit.i_crit_edge, %regmap_reg_in_range.exit.i.i.regmap_reg_in_ranges.exit.i_crit_edge
  %cmp.lcssa.i.i = phi i1 [ %cmp.i.i, %for.inc.i.i.regmap_reg_in_ranges.exit.i_crit_edge ], [ %cmp8.i.i, %regmap_reg_in_range.exit.i.i.regmap_reg_in_ranges.exit.i_crit_edge ]
  br i1 %cmp.lcssa.i.i, label %regmap_reg_in_ranges.exit.i.return_crit_edge, label %regmap_reg_in_ranges.exit.i.if.end.i_crit_edge

regmap_reg_in_ranges.exit.i.if.end.i_crit_edge:   ; preds = %regmap_reg_in_ranges.exit.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end.i

regmap_reg_in_ranges.exit.i.return_crit_edge:     ; preds = %regmap_reg_in_ranges.exit.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %return

if.end.i:                                         ; preds = %regmap_reg_in_ranges.exit.i.if.end.i_crit_edge, %if.then13.if.end.i_crit_edge
  %n_yes_ranges.i = getelementptr inbounds %struct.regmap_access_table, ptr %11, i32 0, i32 1
  %20 = ptrtoint ptr %n_yes_ranges.i to i32
  call void @__asan_load4_noabort(i32 %20)
  %21 = load i32, ptr %n_yes_ranges.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %21)
  %tobool.not.i = icmp eq i32 %21, 0
  br i1 %tobool.not.i, label %if.end.i.return_crit_edge, label %if.end2.i

if.end.i.return_crit_edge:                        ; preds = %if.end.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %return

if.end2.i:                                        ; preds = %if.end.i
  %22 = ptrtoint ptr %11 to i32
  call void @__asan_load4_noabort(i32 %22)
  %23 = load ptr, ptr %11, align 4
  br label %for.body.i15.i

for.body.i15.i:                                   ; preds = %for.inc.i23.i.for.body.i15.i_crit_edge, %if.end2.i
  %cmp8.i11.i = phi i1 [ %cmp.i21.i, %for.inc.i23.i.for.body.i15.i_crit_edge ], [ true, %if.end2.i ]
  %i.07.i12.i = phi i32 [ %inc.i19.i, %for.inc.i23.i.for.body.i15.i_crit_edge ], [ 0, %if.end2.i ]
  %r.05.i13.i = phi ptr [ %incdec.ptr.i20.i, %for.inc.i23.i.for.body.i15.i_crit_edge ], [ %23, %if.end2.i ]
  %24 = ptrtoint ptr %r.05.i13.i to i32
  call void @__asan_load4_noabort(i32 %24)
  %25 = load i32, ptr %r.05.i13.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %25, i32 %reg)
  %cmp.not.i.i14.i = icmp ugt i32 %25, %reg
  br i1 %cmp.not.i.i14.i, label %for.body.i15.i.for.inc.i23.i_crit_edge, label %regmap_reg_in_range.exit.i18.i

for.body.i15.i.for.inc.i23.i_crit_edge:           ; preds = %for.body.i15.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i23.i

regmap_reg_in_range.exit.i18.i:                   ; preds = %for.body.i15.i
  %range_max.i.i16.i = getelementptr inbounds %struct.regmap_range, ptr %r.05.i13.i, i32 0, i32 1
  %26 = ptrtoint ptr %range_max.i.i16.i to i32
  call void @__asan_load4_noabort(i32 %26)
  %27 = load i32, ptr %range_max.i.i16.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %27, i32 %reg)
  %cmp1.i.not.i17.i = icmp ult i32 %27, %reg
  br i1 %cmp1.i.not.i17.i, label %regmap_reg_in_range.exit.i18.i.for.inc.i23.i_crit_edge, label %regmap_reg_in_range.exit.i18.i.return_crit_edge

regmap_reg_in_range.exit.i18.i.return_crit_edge:  ; preds = %regmap_reg_in_range.exit.i18.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %return

regmap_reg_in_range.exit.i18.i.for.inc.i23.i_crit_edge: ; preds = %regmap_reg_in_range.exit.i18.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i23.i

for.inc.i23.i:                                    ; preds = %regmap_reg_in_range.exit.i18.i.for.inc.i23.i_crit_edge, %for.body.i15.i.for.inc.i23.i_crit_edge
  %inc.i19.i = add nuw i32 %i.07.i12.i, 1
  %incdec.ptr.i20.i = getelementptr %struct.regmap_range, ptr %r.05.i13.i, i32 1
  call void @__sanitizer_cov_trace_cmp4(i32 %inc.i19.i, i32 %21)
  %cmp.i21.i = icmp ult i32 %inc.i19.i, %21
  %exitcond.not.i22.i = icmp eq i32 %inc.i19.i, %21
  br i1 %exitcond.not.i22.i, label %for.inc.i23.i.return_crit_edge, label %for.inc.i23.i.for.body.i15.i_crit_edge

for.inc.i23.i.for.body.i15.i_crit_edge:           ; preds = %for.inc.i23.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body.i15.i

for.inc.i23.i.return_crit_edge:                   ; preds = %for.inc.i23.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %return

return:                                           ; preds = %for.inc.i23.i.return_crit_edge, %regmap_reg_in_range.exit.i18.i.return_crit_edge, %if.end.i.return_crit_edge, %regmap_reg_in_ranges.exit.i.return_crit_edge, %if.end11.return_crit_edge, %if.then9, %if.end4.return_crit_edge, %if.end.return_crit_edge, %entry.return_crit_edge
  %retval.0 = phi i1 [ %call, %if.then9 ], [ false, %entry.return_crit_edge ], [ false, %if.end.return_crit_edge ], [ false, %if.end4.return_crit_edge ], [ true, %if.end11.return_crit_edge ], [ false, %regmap_reg_in_ranges.exit.i.return_crit_edge ], [ true, %if.end.i.return_crit_edge ], [ %cmp.i21.i, %for.inc.i23.i.return_crit_edge ], [ %cmp8.i11.i, %regmap_reg_in_range.exit.i18.i.return_crit_edge ]
  ret i1 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local zeroext i1 @regmap_volatile(ptr nocapture noundef readonly %map, i32 noundef %reg) local_unnamed_addr #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %format_write = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 7, i32 4
  %0 = ptrtoint ptr %format_write to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %format_write, align 4
  %tobool.not = icmp eq ptr %1, null
  br i1 %tobool.not, label %land.lhs.true, label %entry.if.end_crit_edge

entry.if.end_crit_edge:                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

land.lhs.true:                                    ; preds = %entry
  %reg_read.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 38
  %2 = ptrtoint ptr %reg_read.i to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load ptr, ptr %reg_read.i, align 4
  %tobool.not.i = icmp eq ptr %3, null
  br i1 %tobool.not.i, label %land.lhs.true.return_crit_edge, label %if.end.i

land.lhs.true.return_crit_edge:                   ; preds = %land.lhs.true
  call void @__sanitizer_cov_trace_pc() #26
  br label %return

if.end.i:                                         ; preds = %land.lhs.true
  %max_register.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 25
  %4 = ptrtoint ptr %max_register.i to i32
  call void @__asan_load4_noabort(i32 %4)
  %5 = load i32, ptr %max_register.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %5)
  %tobool1.not.i = icmp ne i32 %5, 0
  call void @__sanitizer_cov_trace_cmp4(i32 %5, i32 %reg)
  %cmp.i = icmp ult i32 %5, %reg
  %or.cond.i = and i1 %tobool1.not.i, %cmp.i
  br i1 %or.cond.i, label %if.end.i.return_crit_edge, label %if.end7.i

if.end.i.return_crit_edge:                        ; preds = %if.end.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %return

if.end7.i:                                        ; preds = %if.end.i
  %readable_reg.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 27
  %6 = ptrtoint ptr %readable_reg.i to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load ptr, ptr %readable_reg.i, align 4
  %tobool8.not.i = icmp eq ptr %7, null
  br i1 %tobool8.not.i, label %if.end11.i, label %if.then9.i

if.then9.i:                                       ; preds = %if.end7.i
  %dev.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 5
  %8 = ptrtoint ptr %dev.i to i32
  call void @__asan_load4_noabort(i32 %8)
  %9 = load ptr, ptr %dev.i, align 4
  %call.i = tail call zeroext i1 %7(ptr noundef %9, i32 noundef %reg) #24
  br i1 %call.i, label %if.then9.i.if.end_crit_edge, label %if.then9.i.return_crit_edge

if.then9.i.return_crit_edge:                      ; preds = %if.then9.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %return

if.then9.i.if.end_crit_edge:                      ; preds = %if.then9.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

if.end11.i:                                       ; preds = %if.end7.i
  %rd_table.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 33
  %10 = ptrtoint ptr %rd_table.i to i32
  call void @__asan_load4_noabort(i32 %10)
  %11 = load ptr, ptr %rd_table.i, align 4
  %tobool12.not.i = icmp eq ptr %11, null
  br i1 %tobool12.not.i, label %if.end11.i.if.end_crit_edge, label %if.then13.i

if.end11.i.if.end_crit_edge:                      ; preds = %if.end11.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

if.then13.i:                                      ; preds = %if.end11.i
  %n_no_ranges.i.i = getelementptr inbounds %struct.regmap_access_table, ptr %11, i32 0, i32 3
  %12 = ptrtoint ptr %n_no_ranges.i.i to i32
  call void @__asan_load4_noabort(i32 %12)
  %13 = load i32, ptr %n_no_ranges.i.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %13)
  %cmp4.not.i.i.i = icmp eq i32 %13, 0
  br i1 %cmp4.not.i.i.i, label %if.then13.i.if.end.i.i_crit_edge, label %for.body.i.preheader.i.i

if.then13.i.if.end.i.i_crit_edge:                 ; preds = %if.then13.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end.i.i

for.body.i.preheader.i.i:                         ; preds = %if.then13.i
  %no_ranges.i.i = getelementptr inbounds %struct.regmap_access_table, ptr %11, i32 0, i32 2
  %14 = ptrtoint ptr %no_ranges.i.i to i32
  call void @__asan_load4_noabort(i32 %14)
  %15 = load ptr, ptr %no_ranges.i.i, align 4
  br label %for.body.i.i.i

for.body.i.i.i:                                   ; preds = %for.inc.i.i.i.for.body.i.i.i_crit_edge, %for.body.i.preheader.i.i
  %cmp8.i.i.i = phi i1 [ %cmp.i.i.i, %for.inc.i.i.i.for.body.i.i.i_crit_edge ], [ true, %for.body.i.preheader.i.i ]
  %i.07.i.i.i = phi i32 [ %inc.i.i.i, %for.inc.i.i.i.for.body.i.i.i_crit_edge ], [ 0, %for.body.i.preheader.i.i ]
  %r.05.i.i.i = phi ptr [ %incdec.ptr.i.i.i, %for.inc.i.i.i.for.body.i.i.i_crit_edge ], [ %15, %for.body.i.preheader.i.i ]
  %16 = ptrtoint ptr %r.05.i.i.i to i32
  call void @__asan_load4_noabort(i32 %16)
  %17 = load i32, ptr %r.05.i.i.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %17, i32 %reg)
  %cmp.not.i.i.i.i = icmp ugt i32 %17, %reg
  br i1 %cmp.not.i.i.i.i, label %for.body.i.i.i.for.inc.i.i.i_crit_edge, label %regmap_reg_in_range.exit.i.i.i

for.body.i.i.i.for.inc.i.i.i_crit_edge:           ; preds = %for.body.i.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i.i.i

regmap_reg_in_range.exit.i.i.i:                   ; preds = %for.body.i.i.i
  %range_max.i.i.i.i = getelementptr inbounds %struct.regmap_range, ptr %r.05.i.i.i, i32 0, i32 1
  %18 = ptrtoint ptr %range_max.i.i.i.i to i32
  call void @__asan_load4_noabort(i32 %18)
  %19 = load i32, ptr %range_max.i.i.i.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %19, i32 %reg)
  %cmp1.i.not.i.i.i = icmp ult i32 %19, %reg
  br i1 %cmp1.i.not.i.i.i, label %regmap_reg_in_range.exit.i.i.i.for.inc.i.i.i_crit_edge, label %regmap_reg_in_range.exit.i.i.i.regmap_reg_in_ranges.exit.i.i_crit_edge

regmap_reg_in_range.exit.i.i.i.regmap_reg_in_ranges.exit.i.i_crit_edge: ; preds = %regmap_reg_in_range.exit.i.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_reg_in_ranges.exit.i.i

regmap_reg_in_range.exit.i.i.i.for.inc.i.i.i_crit_edge: ; preds = %regmap_reg_in_range.exit.i.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i.i.i

for.inc.i.i.i:                                    ; preds = %regmap_reg_in_range.exit.i.i.i.for.inc.i.i.i_crit_edge, %for.body.i.i.i.for.inc.i.i.i_crit_edge
  %inc.i.i.i = add nuw i32 %i.07.i.i.i, 1
  %incdec.ptr.i.i.i = getelementptr %struct.regmap_range, ptr %r.05.i.i.i, i32 1
  call void @__sanitizer_cov_trace_cmp4(i32 %inc.i.i.i, i32 %13)
  %cmp.i.i.i = icmp ult i32 %inc.i.i.i, %13
  %exitcond.not.i.i.i = icmp eq i32 %inc.i.i.i, %13
  br i1 %exitcond.not.i.i.i, label %for.inc.i.i.i.regmap_reg_in_ranges.exit.i.i_crit_edge, label %for.inc.i.i.i.for.body.i.i.i_crit_edge

for.inc.i.i.i.for.body.i.i.i_crit_edge:           ; preds = %for.inc.i.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body.i.i.i

for.inc.i.i.i.regmap_reg_in_ranges.exit.i.i_crit_edge: ; preds = %for.inc.i.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_reg_in_ranges.exit.i.i

regmap_reg_in_ranges.exit.i.i:                    ; preds = %for.inc.i.i.i.regmap_reg_in_ranges.exit.i.i_crit_edge, %regmap_reg_in_range.exit.i.i.i.regmap_reg_in_ranges.exit.i.i_crit_edge
  %cmp.lcssa.i.i.i = phi i1 [ %cmp.i.i.i, %for.inc.i.i.i.regmap_reg_in_ranges.exit.i.i_crit_edge ], [ %cmp8.i.i.i, %regmap_reg_in_range.exit.i.i.i.regmap_reg_in_ranges.exit.i.i_crit_edge ]
  br i1 %cmp.lcssa.i.i.i, label %regmap_reg_in_ranges.exit.i.i.return_crit_edge, label %regmap_reg_in_ranges.exit.i.i.if.end.i.i_crit_edge

regmap_reg_in_ranges.exit.i.i.if.end.i.i_crit_edge: ; preds = %regmap_reg_in_ranges.exit.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end.i.i

regmap_reg_in_ranges.exit.i.i.return_crit_edge:   ; preds = %regmap_reg_in_ranges.exit.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %return

if.end.i.i:                                       ; preds = %regmap_reg_in_ranges.exit.i.i.if.end.i.i_crit_edge, %if.then13.i.if.end.i.i_crit_edge
  %n_yes_ranges.i.i = getelementptr inbounds %struct.regmap_access_table, ptr %11, i32 0, i32 1
  %20 = ptrtoint ptr %n_yes_ranges.i.i to i32
  call void @__asan_load4_noabort(i32 %20)
  %21 = load i32, ptr %n_yes_ranges.i.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %21)
  %tobool.not.i.i = icmp eq i32 %21, 0
  br i1 %tobool.not.i.i, label %if.end.i.i.if.end_crit_edge, label %if.end2.i.i

if.end.i.i.if.end_crit_edge:                      ; preds = %if.end.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

if.end2.i.i:                                      ; preds = %if.end.i.i
  %22 = ptrtoint ptr %11 to i32
  call void @__asan_load4_noabort(i32 %22)
  %23 = load ptr, ptr %11, align 4
  br label %for.body.i15.i.i

for.body.i15.i.i:                                 ; preds = %for.inc.i23.i.i.for.body.i15.i.i_crit_edge, %if.end2.i.i
  %cmp8.i11.i.i = phi i1 [ %cmp.i21.i.i, %for.inc.i23.i.i.for.body.i15.i.i_crit_edge ], [ true, %if.end2.i.i ]
  %i.07.i12.i.i = phi i32 [ %inc.i19.i.i, %for.inc.i23.i.i.for.body.i15.i.i_crit_edge ], [ 0, %if.end2.i.i ]
  %r.05.i13.i.i = phi ptr [ %incdec.ptr.i20.i.i, %for.inc.i23.i.i.for.body.i15.i.i_crit_edge ], [ %23, %if.end2.i.i ]
  %24 = ptrtoint ptr %r.05.i13.i.i to i32
  call void @__asan_load4_noabort(i32 %24)
  %25 = load i32, ptr %r.05.i13.i.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %25, i32 %reg)
  %cmp.not.i.i14.i.i = icmp ugt i32 %25, %reg
  br i1 %cmp.not.i.i14.i.i, label %for.body.i15.i.i.for.inc.i23.i.i_crit_edge, label %regmap_reg_in_range.exit.i18.i.i

for.body.i15.i.i.for.inc.i23.i.i_crit_edge:       ; preds = %for.body.i15.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i23.i.i

regmap_reg_in_range.exit.i18.i.i:                 ; preds = %for.body.i15.i.i
  %range_max.i.i16.i.i = getelementptr inbounds %struct.regmap_range, ptr %r.05.i13.i.i, i32 0, i32 1
  %26 = ptrtoint ptr %range_max.i.i16.i.i to i32
  call void @__asan_load4_noabort(i32 %26)
  %27 = load i32, ptr %range_max.i.i16.i.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %27, i32 %reg)
  %cmp1.i.not.i17.i.i = icmp ult i32 %27, %reg
  br i1 %cmp1.i.not.i17.i.i, label %regmap_reg_in_range.exit.i18.i.i.for.inc.i23.i.i_crit_edge, label %regmap_reg_in_range.exit.i18.i.i.regmap_readable.exit_crit_edge

regmap_reg_in_range.exit.i18.i.i.regmap_readable.exit_crit_edge: ; preds = %regmap_reg_in_range.exit.i18.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_readable.exit

regmap_reg_in_range.exit.i18.i.i.for.inc.i23.i.i_crit_edge: ; preds = %regmap_reg_in_range.exit.i18.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i23.i.i

for.inc.i23.i.i:                                  ; preds = %regmap_reg_in_range.exit.i18.i.i.for.inc.i23.i.i_crit_edge, %for.body.i15.i.i.for.inc.i23.i.i_crit_edge
  %inc.i19.i.i = add nuw i32 %i.07.i12.i.i, 1
  %incdec.ptr.i20.i.i = getelementptr %struct.regmap_range, ptr %r.05.i13.i.i, i32 1
  call void @__sanitizer_cov_trace_cmp4(i32 %inc.i19.i.i, i32 %21)
  %cmp.i21.i.i = icmp ult i32 %inc.i19.i.i, %21
  %exitcond.not.i22.i.i = icmp eq i32 %inc.i19.i.i, %21
  br i1 %exitcond.not.i22.i.i, label %for.inc.i23.i.i.regmap_readable.exit_crit_edge, label %for.inc.i23.i.i.for.body.i15.i.i_crit_edge

for.inc.i23.i.i.for.body.i15.i.i_crit_edge:       ; preds = %for.inc.i23.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body.i15.i.i

for.inc.i23.i.i.regmap_readable.exit_crit_edge:   ; preds = %for.inc.i23.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_readable.exit

regmap_readable.exit:                             ; preds = %for.inc.i23.i.i.regmap_readable.exit_crit_edge, %regmap_reg_in_range.exit.i18.i.i.regmap_readable.exit_crit_edge
  %retval.0.i = phi i1 [ %cmp.i21.i.i, %for.inc.i23.i.i.regmap_readable.exit_crit_edge ], [ %cmp8.i11.i.i, %regmap_reg_in_range.exit.i18.i.i.regmap_readable.exit_crit_edge ]
  br i1 %retval.0.i, label %regmap_readable.exit.if.end_crit_edge, label %regmap_readable.exit.return_crit_edge

regmap_readable.exit.return_crit_edge:            ; preds = %regmap_readable.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %return

regmap_readable.exit.if.end_crit_edge:            ; preds = %regmap_readable.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

if.end:                                           ; preds = %regmap_readable.exit.if.end_crit_edge, %if.end.i.i.if.end_crit_edge, %if.end11.i.if.end_crit_edge, %if.then9.i.if.end_crit_edge, %entry.if.end_crit_edge
  %volatile_reg = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 28
  %28 = ptrtoint ptr %volatile_reg to i32
  call void @__asan_load4_noabort(i32 %28)
  %29 = load ptr, ptr %volatile_reg, align 4
  %tobool1.not = icmp eq ptr %29, null
  br i1 %tobool1.not, label %if.end5, label %if.then2

if.then2:                                         ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #26
  %dev = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 5
  %30 = ptrtoint ptr %dev to i32
  call void @__asan_load4_noabort(i32 %30)
  %31 = load ptr, ptr %dev, align 4
  %call4 = tail call zeroext i1 %29(ptr noundef %31, i32 noundef %reg) #24
  br label %return

if.end5:                                          ; preds = %if.end
  %volatile_table = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 34
  %32 = ptrtoint ptr %volatile_table to i32
  call void @__asan_load4_noabort(i32 %32)
  %33 = load ptr, ptr %volatile_table, align 4
  %tobool6.not = icmp eq ptr %33, null
  br i1 %tobool6.not, label %if.end10, label %if.then7

if.then7:                                         ; preds = %if.end5
  %n_no_ranges.i = getelementptr inbounds %struct.regmap_access_table, ptr %33, i32 0, i32 3
  %34 = ptrtoint ptr %n_no_ranges.i to i32
  call void @__asan_load4_noabort(i32 %34)
  %35 = load i32, ptr %n_no_ranges.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %35)
  %cmp4.not.i.i = icmp eq i32 %35, 0
  br i1 %cmp4.not.i.i, label %if.then7.if.end.i25_crit_edge, label %for.body.i.preheader.i

if.then7.if.end.i25_crit_edge:                    ; preds = %if.then7
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end.i25

for.body.i.preheader.i:                           ; preds = %if.then7
  %no_ranges.i = getelementptr inbounds %struct.regmap_access_table, ptr %33, i32 0, i32 2
  %36 = ptrtoint ptr %no_ranges.i to i32
  call void @__asan_load4_noabort(i32 %36)
  %37 = load ptr, ptr %no_ranges.i, align 4
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.inc.i.i.for.body.i.i_crit_edge, %for.body.i.preheader.i
  %cmp8.i.i = phi i1 [ %cmp.i.i, %for.inc.i.i.for.body.i.i_crit_edge ], [ true, %for.body.i.preheader.i ]
  %i.07.i.i = phi i32 [ %inc.i.i, %for.inc.i.i.for.body.i.i_crit_edge ], [ 0, %for.body.i.preheader.i ]
  %r.05.i.i = phi ptr [ %incdec.ptr.i.i, %for.inc.i.i.for.body.i.i_crit_edge ], [ %37, %for.body.i.preheader.i ]
  %38 = ptrtoint ptr %r.05.i.i to i32
  call void @__asan_load4_noabort(i32 %38)
  %39 = load i32, ptr %r.05.i.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %39, i32 %reg)
  %cmp.not.i.i.i = icmp ugt i32 %39, %reg
  br i1 %cmp.not.i.i.i, label %for.body.i.i.for.inc.i.i_crit_edge, label %regmap_reg_in_range.exit.i.i

for.body.i.i.for.inc.i.i_crit_edge:               ; preds = %for.body.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i.i

regmap_reg_in_range.exit.i.i:                     ; preds = %for.body.i.i
  %range_max.i.i.i = getelementptr inbounds %struct.regmap_range, ptr %r.05.i.i, i32 0, i32 1
  %40 = ptrtoint ptr %range_max.i.i.i to i32
  call void @__asan_load4_noabort(i32 %40)
  %41 = load i32, ptr %range_max.i.i.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %41, i32 %reg)
  %cmp1.i.not.i.i = icmp ult i32 %41, %reg
  br i1 %cmp1.i.not.i.i, label %regmap_reg_in_range.exit.i.i.for.inc.i.i_crit_edge, label %regmap_reg_in_range.exit.i.i.regmap_reg_in_ranges.exit.i_crit_edge

regmap_reg_in_range.exit.i.i.regmap_reg_in_ranges.exit.i_crit_edge: ; preds = %regmap_reg_in_range.exit.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_reg_in_ranges.exit.i

regmap_reg_in_range.exit.i.i.for.inc.i.i_crit_edge: ; preds = %regmap_reg_in_range.exit.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i.i

for.inc.i.i:                                      ; preds = %regmap_reg_in_range.exit.i.i.for.inc.i.i_crit_edge, %for.body.i.i.for.inc.i.i_crit_edge
  %inc.i.i = add nuw i32 %i.07.i.i, 1
  %incdec.ptr.i.i = getelementptr %struct.regmap_range, ptr %r.05.i.i, i32 1
  call void @__sanitizer_cov_trace_cmp4(i32 %inc.i.i, i32 %35)
  %cmp.i.i = icmp ult i32 %inc.i.i, %35
  %exitcond.not.i.i = icmp eq i32 %inc.i.i, %35
  br i1 %exitcond.not.i.i, label %for.inc.i.i.regmap_reg_in_ranges.exit.i_crit_edge, label %for.inc.i.i.for.body.i.i_crit_edge

for.inc.i.i.for.body.i.i_crit_edge:               ; preds = %for.inc.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body.i.i

for.inc.i.i.regmap_reg_in_ranges.exit.i_crit_edge: ; preds = %for.inc.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_reg_in_ranges.exit.i

regmap_reg_in_ranges.exit.i:                      ; preds = %for.inc.i.i.regmap_reg_in_ranges.exit.i_crit_edge, %regmap_reg_in_range.exit.i.i.regmap_reg_in_ranges.exit.i_crit_edge
  %cmp.lcssa.i.i = phi i1 [ %cmp.i.i, %for.inc.i.i.regmap_reg_in_ranges.exit.i_crit_edge ], [ %cmp8.i.i, %regmap_reg_in_range.exit.i.i.regmap_reg_in_ranges.exit.i_crit_edge ]
  br i1 %cmp.lcssa.i.i, label %regmap_reg_in_ranges.exit.i.return_crit_edge, label %regmap_reg_in_ranges.exit.i.if.end.i25_crit_edge

regmap_reg_in_ranges.exit.i.if.end.i25_crit_edge: ; preds = %regmap_reg_in_ranges.exit.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end.i25

regmap_reg_in_ranges.exit.i.return_crit_edge:     ; preds = %regmap_reg_in_ranges.exit.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %return

if.end.i25:                                       ; preds = %regmap_reg_in_ranges.exit.i.if.end.i25_crit_edge, %if.then7.if.end.i25_crit_edge
  %n_yes_ranges.i = getelementptr inbounds %struct.regmap_access_table, ptr %33, i32 0, i32 1
  %42 = ptrtoint ptr %n_yes_ranges.i to i32
  call void @__asan_load4_noabort(i32 %42)
  %43 = load i32, ptr %n_yes_ranges.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %43)
  %tobool.not.i24 = icmp eq i32 %43, 0
  br i1 %tobool.not.i24, label %if.end.i25.return_crit_edge, label %if.end2.i

if.end.i25.return_crit_edge:                      ; preds = %if.end.i25
  call void @__sanitizer_cov_trace_pc() #26
  br label %return

if.end2.i:                                        ; preds = %if.end.i25
  %44 = ptrtoint ptr %33 to i32
  call void @__asan_load4_noabort(i32 %44)
  %45 = load ptr, ptr %33, align 4
  br label %for.body.i15.i

for.body.i15.i:                                   ; preds = %for.inc.i23.i.for.body.i15.i_crit_edge, %if.end2.i
  %cmp8.i11.i = phi i1 [ %cmp.i21.i, %for.inc.i23.i.for.body.i15.i_crit_edge ], [ true, %if.end2.i ]
  %i.07.i12.i = phi i32 [ %inc.i19.i, %for.inc.i23.i.for.body.i15.i_crit_edge ], [ 0, %if.end2.i ]
  %r.05.i13.i = phi ptr [ %incdec.ptr.i20.i, %for.inc.i23.i.for.body.i15.i_crit_edge ], [ %45, %if.end2.i ]
  %46 = ptrtoint ptr %r.05.i13.i to i32
  call void @__asan_load4_noabort(i32 %46)
  %47 = load i32, ptr %r.05.i13.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %47, i32 %reg)
  %cmp.not.i.i14.i = icmp ugt i32 %47, %reg
  br i1 %cmp.not.i.i14.i, label %for.body.i15.i.for.inc.i23.i_crit_edge, label %regmap_reg_in_range.exit.i18.i

for.body.i15.i.for.inc.i23.i_crit_edge:           ; preds = %for.body.i15.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i23.i

regmap_reg_in_range.exit.i18.i:                   ; preds = %for.body.i15.i
  %range_max.i.i16.i = getelementptr inbounds %struct.regmap_range, ptr %r.05.i13.i, i32 0, i32 1
  %48 = ptrtoint ptr %range_max.i.i16.i to i32
  call void @__asan_load4_noabort(i32 %48)
  %49 = load i32, ptr %range_max.i.i16.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %49, i32 %reg)
  %cmp1.i.not.i17.i = icmp ult i32 %49, %reg
  br i1 %cmp1.i.not.i17.i, label %regmap_reg_in_range.exit.i18.i.for.inc.i23.i_crit_edge, label %regmap_reg_in_range.exit.i18.i.return_crit_edge

regmap_reg_in_range.exit.i18.i.return_crit_edge:  ; preds = %regmap_reg_in_range.exit.i18.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %return

regmap_reg_in_range.exit.i18.i.for.inc.i23.i_crit_edge: ; preds = %regmap_reg_in_range.exit.i18.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i23.i

for.inc.i23.i:                                    ; preds = %regmap_reg_in_range.exit.i18.i.for.inc.i23.i_crit_edge, %for.body.i15.i.for.inc.i23.i_crit_edge
  %inc.i19.i = add nuw i32 %i.07.i12.i, 1
  %incdec.ptr.i20.i = getelementptr %struct.regmap_range, ptr %r.05.i13.i, i32 1
  call void @__sanitizer_cov_trace_cmp4(i32 %inc.i19.i, i32 %43)
  %cmp.i21.i = icmp ult i32 %inc.i19.i, %43
  %exitcond.not.i22.i = icmp eq i32 %inc.i19.i, %43
  br i1 %exitcond.not.i22.i, label %for.inc.i23.i.return_crit_edge, label %for.inc.i23.i.for.body.i15.i_crit_edge

for.inc.i23.i.for.body.i15.i_crit_edge:           ; preds = %for.inc.i23.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body.i15.i

for.inc.i23.i.return_crit_edge:                   ; preds = %for.inc.i23.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %return

if.end10:                                         ; preds = %if.end5
  call void @__sanitizer_cov_trace_pc() #26
  %cache_ops = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 47
  %50 = ptrtoint ptr %cache_ops to i32
  call void @__asan_load4_noabort(i32 %50)
  %51 = load ptr, ptr %cache_ops, align 4
  %tobool11.not = icmp eq ptr %51, null
  br label %return

return:                                           ; preds = %if.end10, %for.inc.i23.i.return_crit_edge, %regmap_reg_in_range.exit.i18.i.return_crit_edge, %if.end.i25.return_crit_edge, %regmap_reg_in_ranges.exit.i.return_crit_edge, %if.then2, %regmap_readable.exit.return_crit_edge, %regmap_reg_in_ranges.exit.i.i.return_crit_edge, %if.then9.i.return_crit_edge, %if.end.i.return_crit_edge, %land.lhs.true.return_crit_edge
  %retval.0 = phi i1 [ %call4, %if.then2 ], [ false, %regmap_readable.exit.return_crit_edge ], [ %tobool11.not, %if.end10 ], [ false, %if.then9.i.return_crit_edge ], [ false, %regmap_reg_in_ranges.exit.i.return_crit_edge ], [ true, %if.end.i25.return_crit_edge ], [ false, %land.lhs.true.return_crit_edge ], [ false, %if.end.i.return_crit_edge ], [ false, %regmap_reg_in_ranges.exit.i.i.return_crit_edge ], [ %cmp.i21.i, %for.inc.i23.i.return_crit_edge ], [ %cmp8.i11.i, %regmap_reg_in_range.exit.i18.i.return_crit_edge ]
  ret i1 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local zeroext i1 @regmap_precious(ptr nocapture noundef readonly %map, i32 noundef %reg) local_unnamed_addr #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %reg_read.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 38
  %0 = ptrtoint ptr %reg_read.i to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %reg_read.i, align 4
  %tobool.not.i = icmp eq ptr %1, null
  br i1 %tobool.not.i, label %entry.return_crit_edge, label %if.end.i

entry.return_crit_edge:                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %return

if.end.i:                                         ; preds = %entry
  %max_register.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 25
  %2 = ptrtoint ptr %max_register.i to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load i32, ptr %max_register.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %3)
  %tobool1.not.i = icmp ne i32 %3, 0
  call void @__sanitizer_cov_trace_cmp4(i32 %3, i32 %reg)
  %cmp.i = icmp ult i32 %3, %reg
  %or.cond.i = and i1 %tobool1.not.i, %cmp.i
  br i1 %or.cond.i, label %if.end.i.return_crit_edge, label %if.end4.i

if.end.i.return_crit_edge:                        ; preds = %if.end.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %return

if.end4.i:                                        ; preds = %if.end.i
  %format_write.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 7, i32 4
  %4 = ptrtoint ptr %format_write.i to i32
  call void @__asan_load4_noabort(i32 %4)
  %5 = load ptr, ptr %format_write.i, align 4
  %tobool5.not.i = icmp eq ptr %5, null
  br i1 %tobool5.not.i, label %if.end7.i, label %if.end4.i.return_crit_edge

if.end4.i.return_crit_edge:                       ; preds = %if.end4.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %return

if.end7.i:                                        ; preds = %if.end4.i
  %readable_reg.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 27
  %6 = ptrtoint ptr %readable_reg.i to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load ptr, ptr %readable_reg.i, align 4
  %tobool8.not.i = icmp eq ptr %7, null
  br i1 %tobool8.not.i, label %if.end11.i, label %if.then9.i

if.then9.i:                                       ; preds = %if.end7.i
  %dev.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 5
  %8 = ptrtoint ptr %dev.i to i32
  call void @__asan_load4_noabort(i32 %8)
  %9 = load ptr, ptr %dev.i, align 4
  %call.i = tail call zeroext i1 %7(ptr noundef %9, i32 noundef %reg) #24
  br i1 %call.i, label %if.then9.i.if.end_crit_edge, label %if.then9.i.return_crit_edge

if.then9.i.return_crit_edge:                      ; preds = %if.then9.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %return

if.then9.i.if.end_crit_edge:                      ; preds = %if.then9.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

if.end11.i:                                       ; preds = %if.end7.i
  %rd_table.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 33
  %10 = ptrtoint ptr %rd_table.i to i32
  call void @__asan_load4_noabort(i32 %10)
  %11 = load ptr, ptr %rd_table.i, align 4
  %tobool12.not.i = icmp eq ptr %11, null
  br i1 %tobool12.not.i, label %if.end11.i.if.end_crit_edge, label %if.then13.i

if.end11.i.if.end_crit_edge:                      ; preds = %if.end11.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

if.then13.i:                                      ; preds = %if.end11.i
  %n_no_ranges.i.i = getelementptr inbounds %struct.regmap_access_table, ptr %11, i32 0, i32 3
  %12 = ptrtoint ptr %n_no_ranges.i.i to i32
  call void @__asan_load4_noabort(i32 %12)
  %13 = load i32, ptr %n_no_ranges.i.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %13)
  %cmp4.not.i.i.i = icmp eq i32 %13, 0
  br i1 %cmp4.not.i.i.i, label %if.then13.i.if.end.i.i_crit_edge, label %for.body.i.preheader.i.i

if.then13.i.if.end.i.i_crit_edge:                 ; preds = %if.then13.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end.i.i

for.body.i.preheader.i.i:                         ; preds = %if.then13.i
  %no_ranges.i.i = getelementptr inbounds %struct.regmap_access_table, ptr %11, i32 0, i32 2
  %14 = ptrtoint ptr %no_ranges.i.i to i32
  call void @__asan_load4_noabort(i32 %14)
  %15 = load ptr, ptr %no_ranges.i.i, align 4
  br label %for.body.i.i.i

for.body.i.i.i:                                   ; preds = %for.inc.i.i.i.for.body.i.i.i_crit_edge, %for.body.i.preheader.i.i
  %cmp8.i.i.i = phi i1 [ %cmp.i.i.i, %for.inc.i.i.i.for.body.i.i.i_crit_edge ], [ true, %for.body.i.preheader.i.i ]
  %i.07.i.i.i = phi i32 [ %inc.i.i.i, %for.inc.i.i.i.for.body.i.i.i_crit_edge ], [ 0, %for.body.i.preheader.i.i ]
  %r.05.i.i.i = phi ptr [ %incdec.ptr.i.i.i, %for.inc.i.i.i.for.body.i.i.i_crit_edge ], [ %15, %for.body.i.preheader.i.i ]
  %16 = ptrtoint ptr %r.05.i.i.i to i32
  call void @__asan_load4_noabort(i32 %16)
  %17 = load i32, ptr %r.05.i.i.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %17, i32 %reg)
  %cmp.not.i.i.i.i = icmp ugt i32 %17, %reg
  br i1 %cmp.not.i.i.i.i, label %for.body.i.i.i.for.inc.i.i.i_crit_edge, label %regmap_reg_in_range.exit.i.i.i

for.body.i.i.i.for.inc.i.i.i_crit_edge:           ; preds = %for.body.i.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i.i.i

regmap_reg_in_range.exit.i.i.i:                   ; preds = %for.body.i.i.i
  %range_max.i.i.i.i = getelementptr inbounds %struct.regmap_range, ptr %r.05.i.i.i, i32 0, i32 1
  %18 = ptrtoint ptr %range_max.i.i.i.i to i32
  call void @__asan_load4_noabort(i32 %18)
  %19 = load i32, ptr %range_max.i.i.i.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %19, i32 %reg)
  %cmp1.i.not.i.i.i = icmp ult i32 %19, %reg
  br i1 %cmp1.i.not.i.i.i, label %regmap_reg_in_range.exit.i.i.i.for.inc.i.i.i_crit_edge, label %regmap_reg_in_range.exit.i.i.i.regmap_reg_in_ranges.exit.i.i_crit_edge

regmap_reg_in_range.exit.i.i.i.regmap_reg_in_ranges.exit.i.i_crit_edge: ; preds = %regmap_reg_in_range.exit.i.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_reg_in_ranges.exit.i.i

regmap_reg_in_range.exit.i.i.i.for.inc.i.i.i_crit_edge: ; preds = %regmap_reg_in_range.exit.i.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i.i.i

for.inc.i.i.i:                                    ; preds = %regmap_reg_in_range.exit.i.i.i.for.inc.i.i.i_crit_edge, %for.body.i.i.i.for.inc.i.i.i_crit_edge
  %inc.i.i.i = add nuw i32 %i.07.i.i.i, 1
  %incdec.ptr.i.i.i = getelementptr %struct.regmap_range, ptr %r.05.i.i.i, i32 1
  call void @__sanitizer_cov_trace_cmp4(i32 %inc.i.i.i, i32 %13)
  %cmp.i.i.i = icmp ult i32 %inc.i.i.i, %13
  %exitcond.not.i.i.i = icmp eq i32 %inc.i.i.i, %13
  br i1 %exitcond.not.i.i.i, label %for.inc.i.i.i.regmap_reg_in_ranges.exit.i.i_crit_edge, label %for.inc.i.i.i.for.body.i.i.i_crit_edge

for.inc.i.i.i.for.body.i.i.i_crit_edge:           ; preds = %for.inc.i.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body.i.i.i

for.inc.i.i.i.regmap_reg_in_ranges.exit.i.i_crit_edge: ; preds = %for.inc.i.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_reg_in_ranges.exit.i.i

regmap_reg_in_ranges.exit.i.i:                    ; preds = %for.inc.i.i.i.regmap_reg_in_ranges.exit.i.i_crit_edge, %regmap_reg_in_range.exit.i.i.i.regmap_reg_in_ranges.exit.i.i_crit_edge
  %cmp.lcssa.i.i.i = phi i1 [ %cmp.i.i.i, %for.inc.i.i.i.regmap_reg_in_ranges.exit.i.i_crit_edge ], [ %cmp8.i.i.i, %regmap_reg_in_range.exit.i.i.i.regmap_reg_in_ranges.exit.i.i_crit_edge ]
  br i1 %cmp.lcssa.i.i.i, label %regmap_reg_in_ranges.exit.i.i.return_crit_edge, label %regmap_reg_in_ranges.exit.i.i.if.end.i.i_crit_edge

regmap_reg_in_ranges.exit.i.i.if.end.i.i_crit_edge: ; preds = %regmap_reg_in_ranges.exit.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end.i.i

regmap_reg_in_ranges.exit.i.i.return_crit_edge:   ; preds = %regmap_reg_in_ranges.exit.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %return

if.end.i.i:                                       ; preds = %regmap_reg_in_ranges.exit.i.i.if.end.i.i_crit_edge, %if.then13.i.if.end.i.i_crit_edge
  %n_yes_ranges.i.i = getelementptr inbounds %struct.regmap_access_table, ptr %11, i32 0, i32 1
  %20 = ptrtoint ptr %n_yes_ranges.i.i to i32
  call void @__asan_load4_noabort(i32 %20)
  %21 = load i32, ptr %n_yes_ranges.i.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %21)
  %tobool.not.i.i = icmp eq i32 %21, 0
  br i1 %tobool.not.i.i, label %if.end.i.i.if.end_crit_edge, label %if.end2.i.i

if.end.i.i.if.end_crit_edge:                      ; preds = %if.end.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

if.end2.i.i:                                      ; preds = %if.end.i.i
  %22 = ptrtoint ptr %11 to i32
  call void @__asan_load4_noabort(i32 %22)
  %23 = load ptr, ptr %11, align 4
  br label %for.body.i15.i.i

for.body.i15.i.i:                                 ; preds = %for.inc.i23.i.i.for.body.i15.i.i_crit_edge, %if.end2.i.i
  %cmp8.i11.i.i = phi i1 [ %cmp.i21.i.i, %for.inc.i23.i.i.for.body.i15.i.i_crit_edge ], [ true, %if.end2.i.i ]
  %i.07.i12.i.i = phi i32 [ %inc.i19.i.i, %for.inc.i23.i.i.for.body.i15.i.i_crit_edge ], [ 0, %if.end2.i.i ]
  %r.05.i13.i.i = phi ptr [ %incdec.ptr.i20.i.i, %for.inc.i23.i.i.for.body.i15.i.i_crit_edge ], [ %23, %if.end2.i.i ]
  %24 = ptrtoint ptr %r.05.i13.i.i to i32
  call void @__asan_load4_noabort(i32 %24)
  %25 = load i32, ptr %r.05.i13.i.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %25, i32 %reg)
  %cmp.not.i.i14.i.i = icmp ugt i32 %25, %reg
  br i1 %cmp.not.i.i14.i.i, label %for.body.i15.i.i.for.inc.i23.i.i_crit_edge, label %regmap_reg_in_range.exit.i18.i.i

for.body.i15.i.i.for.inc.i23.i.i_crit_edge:       ; preds = %for.body.i15.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i23.i.i

regmap_reg_in_range.exit.i18.i.i:                 ; preds = %for.body.i15.i.i
  %range_max.i.i16.i.i = getelementptr inbounds %struct.regmap_range, ptr %r.05.i13.i.i, i32 0, i32 1
  %26 = ptrtoint ptr %range_max.i.i16.i.i to i32
  call void @__asan_load4_noabort(i32 %26)
  %27 = load i32, ptr %range_max.i.i16.i.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %27, i32 %reg)
  %cmp1.i.not.i17.i.i = icmp ult i32 %27, %reg
  br i1 %cmp1.i.not.i17.i.i, label %regmap_reg_in_range.exit.i18.i.i.for.inc.i23.i.i_crit_edge, label %regmap_reg_in_range.exit.i18.i.i.regmap_readable.exit_crit_edge

regmap_reg_in_range.exit.i18.i.i.regmap_readable.exit_crit_edge: ; preds = %regmap_reg_in_range.exit.i18.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_readable.exit

regmap_reg_in_range.exit.i18.i.i.for.inc.i23.i.i_crit_edge: ; preds = %regmap_reg_in_range.exit.i18.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i23.i.i

for.inc.i23.i.i:                                  ; preds = %regmap_reg_in_range.exit.i18.i.i.for.inc.i23.i.i_crit_edge, %for.body.i15.i.i.for.inc.i23.i.i_crit_edge
  %inc.i19.i.i = add nuw i32 %i.07.i12.i.i, 1
  %incdec.ptr.i20.i.i = getelementptr %struct.regmap_range, ptr %r.05.i13.i.i, i32 1
  call void @__sanitizer_cov_trace_cmp4(i32 %inc.i19.i.i, i32 %21)
  %cmp.i21.i.i = icmp ult i32 %inc.i19.i.i, %21
  %exitcond.not.i22.i.i = icmp eq i32 %inc.i19.i.i, %21
  br i1 %exitcond.not.i22.i.i, label %for.inc.i23.i.i.regmap_readable.exit_crit_edge, label %for.inc.i23.i.i.for.body.i15.i.i_crit_edge

for.inc.i23.i.i.for.body.i15.i.i_crit_edge:       ; preds = %for.inc.i23.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body.i15.i.i

for.inc.i23.i.i.regmap_readable.exit_crit_edge:   ; preds = %for.inc.i23.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_readable.exit

regmap_readable.exit:                             ; preds = %for.inc.i23.i.i.regmap_readable.exit_crit_edge, %regmap_reg_in_range.exit.i18.i.i.regmap_readable.exit_crit_edge
  %retval.0.i = phi i1 [ %cmp.i21.i.i, %for.inc.i23.i.i.regmap_readable.exit_crit_edge ], [ %cmp8.i11.i.i, %regmap_reg_in_range.exit.i18.i.i.regmap_readable.exit_crit_edge ]
  br i1 %retval.0.i, label %regmap_readable.exit.if.end_crit_edge, label %regmap_readable.exit.return_crit_edge

regmap_readable.exit.return_crit_edge:            ; preds = %regmap_readable.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %return

regmap_readable.exit.if.end_crit_edge:            ; preds = %regmap_readable.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

if.end:                                           ; preds = %regmap_readable.exit.if.end_crit_edge, %if.end.i.i.if.end_crit_edge, %if.end11.i.if.end_crit_edge, %if.then9.i.if.end_crit_edge
  %precious_reg = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 29
  %28 = ptrtoint ptr %precious_reg to i32
  call void @__asan_load4_noabort(i32 %28)
  %29 = load ptr, ptr %precious_reg, align 4
  %tobool.not = icmp eq ptr %29, null
  br i1 %tobool.not, label %if.end4, label %if.then1

if.then1:                                         ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #26
  %dev = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 5
  %30 = ptrtoint ptr %dev to i32
  call void @__asan_load4_noabort(i32 %30)
  %31 = load ptr, ptr %dev, align 4
  %call3 = tail call zeroext i1 %29(ptr noundef %31, i32 noundef %reg) #24
  br label %return

if.end4:                                          ; preds = %if.end
  %precious_table = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 35
  %32 = ptrtoint ptr %precious_table to i32
  call void @__asan_load4_noabort(i32 %32)
  %33 = load ptr, ptr %precious_table, align 4
  %tobool5.not = icmp eq ptr %33, null
  br i1 %tobool5.not, label %if.end4.return_crit_edge, label %if.then6

if.end4.return_crit_edge:                         ; preds = %if.end4
  call void @__sanitizer_cov_trace_pc() #26
  br label %return

if.then6:                                         ; preds = %if.end4
  %n_no_ranges.i = getelementptr inbounds %struct.regmap_access_table, ptr %33, i32 0, i32 3
  %34 = ptrtoint ptr %n_no_ranges.i to i32
  call void @__asan_load4_noabort(i32 %34)
  %35 = load i32, ptr %n_no_ranges.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %35)
  %cmp4.not.i.i = icmp eq i32 %35, 0
  br i1 %cmp4.not.i.i, label %if.then6.if.end.i20_crit_edge, label %for.body.i.preheader.i

if.then6.if.end.i20_crit_edge:                    ; preds = %if.then6
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end.i20

for.body.i.preheader.i:                           ; preds = %if.then6
  %no_ranges.i = getelementptr inbounds %struct.regmap_access_table, ptr %33, i32 0, i32 2
  %36 = ptrtoint ptr %no_ranges.i to i32
  call void @__asan_load4_noabort(i32 %36)
  %37 = load ptr, ptr %no_ranges.i, align 4
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.inc.i.i.for.body.i.i_crit_edge, %for.body.i.preheader.i
  %cmp8.i.i = phi i1 [ %cmp.i.i, %for.inc.i.i.for.body.i.i_crit_edge ], [ true, %for.body.i.preheader.i ]
  %i.07.i.i = phi i32 [ %inc.i.i, %for.inc.i.i.for.body.i.i_crit_edge ], [ 0, %for.body.i.preheader.i ]
  %r.05.i.i = phi ptr [ %incdec.ptr.i.i, %for.inc.i.i.for.body.i.i_crit_edge ], [ %37, %for.body.i.preheader.i ]
  %38 = ptrtoint ptr %r.05.i.i to i32
  call void @__asan_load4_noabort(i32 %38)
  %39 = load i32, ptr %r.05.i.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %39, i32 %reg)
  %cmp.not.i.i.i = icmp ugt i32 %39, %reg
  br i1 %cmp.not.i.i.i, label %for.body.i.i.for.inc.i.i_crit_edge, label %regmap_reg_in_range.exit.i.i

for.body.i.i.for.inc.i.i_crit_edge:               ; preds = %for.body.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i.i

regmap_reg_in_range.exit.i.i:                     ; preds = %for.body.i.i
  %range_max.i.i.i = getelementptr inbounds %struct.regmap_range, ptr %r.05.i.i, i32 0, i32 1
  %40 = ptrtoint ptr %range_max.i.i.i to i32
  call void @__asan_load4_noabort(i32 %40)
  %41 = load i32, ptr %range_max.i.i.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %41, i32 %reg)
  %cmp1.i.not.i.i = icmp ult i32 %41, %reg
  br i1 %cmp1.i.not.i.i, label %regmap_reg_in_range.exit.i.i.for.inc.i.i_crit_edge, label %regmap_reg_in_range.exit.i.i.regmap_reg_in_ranges.exit.i_crit_edge

regmap_reg_in_range.exit.i.i.regmap_reg_in_ranges.exit.i_crit_edge: ; preds = %regmap_reg_in_range.exit.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_reg_in_ranges.exit.i

regmap_reg_in_range.exit.i.i.for.inc.i.i_crit_edge: ; preds = %regmap_reg_in_range.exit.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i.i

for.inc.i.i:                                      ; preds = %regmap_reg_in_range.exit.i.i.for.inc.i.i_crit_edge, %for.body.i.i.for.inc.i.i_crit_edge
  %inc.i.i = add nuw i32 %i.07.i.i, 1
  %incdec.ptr.i.i = getelementptr %struct.regmap_range, ptr %r.05.i.i, i32 1
  call void @__sanitizer_cov_trace_cmp4(i32 %inc.i.i, i32 %35)
  %cmp.i.i = icmp ult i32 %inc.i.i, %35
  %exitcond.not.i.i = icmp eq i32 %inc.i.i, %35
  br i1 %exitcond.not.i.i, label %for.inc.i.i.regmap_reg_in_ranges.exit.i_crit_edge, label %for.inc.i.i.for.body.i.i_crit_edge

for.inc.i.i.for.body.i.i_crit_edge:               ; preds = %for.inc.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body.i.i

for.inc.i.i.regmap_reg_in_ranges.exit.i_crit_edge: ; preds = %for.inc.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_reg_in_ranges.exit.i

regmap_reg_in_ranges.exit.i:                      ; preds = %for.inc.i.i.regmap_reg_in_ranges.exit.i_crit_edge, %regmap_reg_in_range.exit.i.i.regmap_reg_in_ranges.exit.i_crit_edge
  %cmp.lcssa.i.i = phi i1 [ %cmp.i.i, %for.inc.i.i.regmap_reg_in_ranges.exit.i_crit_edge ], [ %cmp8.i.i, %regmap_reg_in_range.exit.i.i.regmap_reg_in_ranges.exit.i_crit_edge ]
  br i1 %cmp.lcssa.i.i, label %regmap_reg_in_ranges.exit.i.return_crit_edge, label %regmap_reg_in_ranges.exit.i.if.end.i20_crit_edge

regmap_reg_in_ranges.exit.i.if.end.i20_crit_edge: ; preds = %regmap_reg_in_ranges.exit.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end.i20

regmap_reg_in_ranges.exit.i.return_crit_edge:     ; preds = %regmap_reg_in_ranges.exit.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %return

if.end.i20:                                       ; preds = %regmap_reg_in_ranges.exit.i.if.end.i20_crit_edge, %if.then6.if.end.i20_crit_edge
  %n_yes_ranges.i = getelementptr inbounds %struct.regmap_access_table, ptr %33, i32 0, i32 1
  %42 = ptrtoint ptr %n_yes_ranges.i to i32
  call void @__asan_load4_noabort(i32 %42)
  %43 = load i32, ptr %n_yes_ranges.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %43)
  %tobool.not.i19 = icmp eq i32 %43, 0
  br i1 %tobool.not.i19, label %if.end.i20.return_crit_edge, label %if.end2.i

if.end.i20.return_crit_edge:                      ; preds = %if.end.i20
  call void @__sanitizer_cov_trace_pc() #26
  br label %return

if.end2.i:                                        ; preds = %if.end.i20
  %44 = ptrtoint ptr %33 to i32
  call void @__asan_load4_noabort(i32 %44)
  %45 = load ptr, ptr %33, align 4
  br label %for.body.i15.i

for.body.i15.i:                                   ; preds = %for.inc.i23.i.for.body.i15.i_crit_edge, %if.end2.i
  %cmp8.i11.i = phi i1 [ %cmp.i21.i, %for.inc.i23.i.for.body.i15.i_crit_edge ], [ true, %if.end2.i ]
  %i.07.i12.i = phi i32 [ %inc.i19.i, %for.inc.i23.i.for.body.i15.i_crit_edge ], [ 0, %if.end2.i ]
  %r.05.i13.i = phi ptr [ %incdec.ptr.i20.i, %for.inc.i23.i.for.body.i15.i_crit_edge ], [ %45, %if.end2.i ]
  %46 = ptrtoint ptr %r.05.i13.i to i32
  call void @__asan_load4_noabort(i32 %46)
  %47 = load i32, ptr %r.05.i13.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %47, i32 %reg)
  %cmp.not.i.i14.i = icmp ugt i32 %47, %reg
  br i1 %cmp.not.i.i14.i, label %for.body.i15.i.for.inc.i23.i_crit_edge, label %regmap_reg_in_range.exit.i18.i

for.body.i15.i.for.inc.i23.i_crit_edge:           ; preds = %for.body.i15.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i23.i

regmap_reg_in_range.exit.i18.i:                   ; preds = %for.body.i15.i
  %range_max.i.i16.i = getelementptr inbounds %struct.regmap_range, ptr %r.05.i13.i, i32 0, i32 1
  %48 = ptrtoint ptr %range_max.i.i16.i to i32
  call void @__asan_load4_noabort(i32 %48)
  %49 = load i32, ptr %range_max.i.i16.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %49, i32 %reg)
  %cmp1.i.not.i17.i = icmp ult i32 %49, %reg
  br i1 %cmp1.i.not.i17.i, label %regmap_reg_in_range.exit.i18.i.for.inc.i23.i_crit_edge, label %regmap_reg_in_range.exit.i18.i.return_crit_edge

regmap_reg_in_range.exit.i18.i.return_crit_edge:  ; preds = %regmap_reg_in_range.exit.i18.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %return

regmap_reg_in_range.exit.i18.i.for.inc.i23.i_crit_edge: ; preds = %regmap_reg_in_range.exit.i18.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i23.i

for.inc.i23.i:                                    ; preds = %regmap_reg_in_range.exit.i18.i.for.inc.i23.i_crit_edge, %for.body.i15.i.for.inc.i23.i_crit_edge
  %inc.i19.i = add nuw i32 %i.07.i12.i, 1
  %incdec.ptr.i20.i = getelementptr %struct.regmap_range, ptr %r.05.i13.i, i32 1
  call void @__sanitizer_cov_trace_cmp4(i32 %inc.i19.i, i32 %43)
  %cmp.i21.i = icmp ult i32 %inc.i19.i, %43
  %exitcond.not.i22.i = icmp eq i32 %inc.i19.i, %43
  br i1 %exitcond.not.i22.i, label %for.inc.i23.i.return_crit_edge, label %for.inc.i23.i.for.body.i15.i_crit_edge

for.inc.i23.i.for.body.i15.i_crit_edge:           ; preds = %for.inc.i23.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body.i15.i

for.inc.i23.i.return_crit_edge:                   ; preds = %for.inc.i23.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %return

return:                                           ; preds = %for.inc.i23.i.return_crit_edge, %regmap_reg_in_range.exit.i18.i.return_crit_edge, %if.end.i20.return_crit_edge, %regmap_reg_in_ranges.exit.i.return_crit_edge, %if.end4.return_crit_edge, %if.then1, %regmap_readable.exit.return_crit_edge, %regmap_reg_in_ranges.exit.i.i.return_crit_edge, %if.then9.i.return_crit_edge, %if.end4.i.return_crit_edge, %if.end.i.return_crit_edge, %entry.return_crit_edge
  %retval.0 = phi i1 [ %call3, %if.then1 ], [ false, %regmap_readable.exit.return_crit_edge ], [ false, %if.end4.return_crit_edge ], [ false, %if.then9.i.return_crit_edge ], [ false, %regmap_reg_in_ranges.exit.i.return_crit_edge ], [ true, %if.end.i20.return_crit_edge ], [ false, %entry.return_crit_edge ], [ false, %if.end.i.return_crit_edge ], [ false, %if.end4.i.return_crit_edge ], [ false, %regmap_reg_in_ranges.exit.i.i.return_crit_edge ], [ %cmp.i21.i, %for.inc.i23.i.return_crit_edge ], [ %cmp8.i11.i, %regmap_reg_in_range.exit.i18.i.return_crit_edge ]
  ret i1 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local zeroext i1 @regmap_writeable_noinc(ptr nocapture noundef readonly %map, i32 noundef %reg) local_unnamed_addr #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %writeable_noinc_reg = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 30
  %0 = ptrtoint ptr %writeable_noinc_reg to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %writeable_noinc_reg, align 4
  %tobool.not = icmp eq ptr %1, null
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  %dev = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 5
  %2 = ptrtoint ptr %dev to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load ptr, ptr %dev, align 4
  %call = tail call zeroext i1 %1(ptr noundef %3, i32 noundef %reg) #24
  br label %return

if.end:                                           ; preds = %entry
  %wr_noinc_table = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 36
  %4 = ptrtoint ptr %wr_noinc_table to i32
  call void @__asan_load4_noabort(i32 %4)
  %5 = load ptr, ptr %wr_noinc_table, align 4
  %tobool2.not = icmp eq ptr %5, null
  br i1 %tobool2.not, label %if.end.return_crit_edge, label %if.then3

if.end.return_crit_edge:                          ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #26
  br label %return

if.then3:                                         ; preds = %if.end
  %n_no_ranges.i = getelementptr inbounds %struct.regmap_access_table, ptr %5, i32 0, i32 3
  %6 = ptrtoint ptr %n_no_ranges.i to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load i32, ptr %n_no_ranges.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %7)
  %cmp4.not.i.i = icmp eq i32 %7, 0
  br i1 %cmp4.not.i.i, label %if.then3.if.end.i_crit_edge, label %for.body.i.preheader.i

if.then3.if.end.i_crit_edge:                      ; preds = %if.then3
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end.i

for.body.i.preheader.i:                           ; preds = %if.then3
  %no_ranges.i = getelementptr inbounds %struct.regmap_access_table, ptr %5, i32 0, i32 2
  %8 = ptrtoint ptr %no_ranges.i to i32
  call void @__asan_load4_noabort(i32 %8)
  %9 = load ptr, ptr %no_ranges.i, align 4
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.inc.i.i.for.body.i.i_crit_edge, %for.body.i.preheader.i
  %cmp8.i.i = phi i1 [ %cmp.i.i, %for.inc.i.i.for.body.i.i_crit_edge ], [ true, %for.body.i.preheader.i ]
  %i.07.i.i = phi i32 [ %inc.i.i, %for.inc.i.i.for.body.i.i_crit_edge ], [ 0, %for.body.i.preheader.i ]
  %r.05.i.i = phi ptr [ %incdec.ptr.i.i, %for.inc.i.i.for.body.i.i_crit_edge ], [ %9, %for.body.i.preheader.i ]
  %10 = ptrtoint ptr %r.05.i.i to i32
  call void @__asan_load4_noabort(i32 %10)
  %11 = load i32, ptr %r.05.i.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %11, i32 %reg)
  %cmp.not.i.i.i = icmp ugt i32 %11, %reg
  br i1 %cmp.not.i.i.i, label %for.body.i.i.for.inc.i.i_crit_edge, label %regmap_reg_in_range.exit.i.i

for.body.i.i.for.inc.i.i_crit_edge:               ; preds = %for.body.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i.i

regmap_reg_in_range.exit.i.i:                     ; preds = %for.body.i.i
  %range_max.i.i.i = getelementptr inbounds %struct.regmap_range, ptr %r.05.i.i, i32 0, i32 1
  %12 = ptrtoint ptr %range_max.i.i.i to i32
  call void @__asan_load4_noabort(i32 %12)
  %13 = load i32, ptr %range_max.i.i.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %13, i32 %reg)
  %cmp1.i.not.i.i = icmp ult i32 %13, %reg
  br i1 %cmp1.i.not.i.i, label %regmap_reg_in_range.exit.i.i.for.inc.i.i_crit_edge, label %regmap_reg_in_range.exit.i.i.regmap_reg_in_ranges.exit.i_crit_edge

regmap_reg_in_range.exit.i.i.regmap_reg_in_ranges.exit.i_crit_edge: ; preds = %regmap_reg_in_range.exit.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_reg_in_ranges.exit.i

regmap_reg_in_range.exit.i.i.for.inc.i.i_crit_edge: ; preds = %regmap_reg_in_range.exit.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i.i

for.inc.i.i:                                      ; preds = %regmap_reg_in_range.exit.i.i.for.inc.i.i_crit_edge, %for.body.i.i.for.inc.i.i_crit_edge
  %inc.i.i = add nuw i32 %i.07.i.i, 1
  %incdec.ptr.i.i = getelementptr %struct.regmap_range, ptr %r.05.i.i, i32 1
  call void @__sanitizer_cov_trace_cmp4(i32 %inc.i.i, i32 %7)
  %cmp.i.i = icmp ult i32 %inc.i.i, %7
  %exitcond.not.i.i = icmp eq i32 %inc.i.i, %7
  br i1 %exitcond.not.i.i, label %for.inc.i.i.regmap_reg_in_ranges.exit.i_crit_edge, label %for.inc.i.i.for.body.i.i_crit_edge

for.inc.i.i.for.body.i.i_crit_edge:               ; preds = %for.inc.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body.i.i

for.inc.i.i.regmap_reg_in_ranges.exit.i_crit_edge: ; preds = %for.inc.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_reg_in_ranges.exit.i

regmap_reg_in_ranges.exit.i:                      ; preds = %for.inc.i.i.regmap_reg_in_ranges.exit.i_crit_edge, %regmap_reg_in_range.exit.i.i.regmap_reg_in_ranges.exit.i_crit_edge
  %cmp.lcssa.i.i = phi i1 [ %cmp.i.i, %for.inc.i.i.regmap_reg_in_ranges.exit.i_crit_edge ], [ %cmp8.i.i, %regmap_reg_in_range.exit.i.i.regmap_reg_in_ranges.exit.i_crit_edge ]
  br i1 %cmp.lcssa.i.i, label %regmap_reg_in_ranges.exit.i.return_crit_edge, label %regmap_reg_in_ranges.exit.i.if.end.i_crit_edge

regmap_reg_in_ranges.exit.i.if.end.i_crit_edge:   ; preds = %regmap_reg_in_ranges.exit.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end.i

regmap_reg_in_ranges.exit.i.return_crit_edge:     ; preds = %regmap_reg_in_ranges.exit.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %return

if.end.i:                                         ; preds = %regmap_reg_in_ranges.exit.i.if.end.i_crit_edge, %if.then3.if.end.i_crit_edge
  %n_yes_ranges.i = getelementptr inbounds %struct.regmap_access_table, ptr %5, i32 0, i32 1
  %14 = ptrtoint ptr %n_yes_ranges.i to i32
  call void @__asan_load4_noabort(i32 %14)
  %15 = load i32, ptr %n_yes_ranges.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %15)
  %tobool.not.i = icmp eq i32 %15, 0
  br i1 %tobool.not.i, label %if.end.i.return_crit_edge, label %if.end2.i

if.end.i.return_crit_edge:                        ; preds = %if.end.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %return

if.end2.i:                                        ; preds = %if.end.i
  %16 = ptrtoint ptr %5 to i32
  call void @__asan_load4_noabort(i32 %16)
  %17 = load ptr, ptr %5, align 4
  br label %for.body.i15.i

for.body.i15.i:                                   ; preds = %for.inc.i23.i.for.body.i15.i_crit_edge, %if.end2.i
  %cmp8.i11.i = phi i1 [ %cmp.i21.i, %for.inc.i23.i.for.body.i15.i_crit_edge ], [ true, %if.end2.i ]
  %i.07.i12.i = phi i32 [ %inc.i19.i, %for.inc.i23.i.for.body.i15.i_crit_edge ], [ 0, %if.end2.i ]
  %r.05.i13.i = phi ptr [ %incdec.ptr.i20.i, %for.inc.i23.i.for.body.i15.i_crit_edge ], [ %17, %if.end2.i ]
  %18 = ptrtoint ptr %r.05.i13.i to i32
  call void @__asan_load4_noabort(i32 %18)
  %19 = load i32, ptr %r.05.i13.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %19, i32 %reg)
  %cmp.not.i.i14.i = icmp ugt i32 %19, %reg
  br i1 %cmp.not.i.i14.i, label %for.body.i15.i.for.inc.i23.i_crit_edge, label %regmap_reg_in_range.exit.i18.i

for.body.i15.i.for.inc.i23.i_crit_edge:           ; preds = %for.body.i15.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i23.i

regmap_reg_in_range.exit.i18.i:                   ; preds = %for.body.i15.i
  %range_max.i.i16.i = getelementptr inbounds %struct.regmap_range, ptr %r.05.i13.i, i32 0, i32 1
  %20 = ptrtoint ptr %range_max.i.i16.i to i32
  call void @__asan_load4_noabort(i32 %20)
  %21 = load i32, ptr %range_max.i.i16.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %21, i32 %reg)
  %cmp1.i.not.i17.i = icmp ult i32 %21, %reg
  br i1 %cmp1.i.not.i17.i, label %regmap_reg_in_range.exit.i18.i.for.inc.i23.i_crit_edge, label %regmap_reg_in_range.exit.i18.i.return_crit_edge

regmap_reg_in_range.exit.i18.i.return_crit_edge:  ; preds = %regmap_reg_in_range.exit.i18.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %return

regmap_reg_in_range.exit.i18.i.for.inc.i23.i_crit_edge: ; preds = %regmap_reg_in_range.exit.i18.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i23.i

for.inc.i23.i:                                    ; preds = %regmap_reg_in_range.exit.i18.i.for.inc.i23.i_crit_edge, %for.body.i15.i.for.inc.i23.i_crit_edge
  %inc.i19.i = add nuw i32 %i.07.i12.i, 1
  %incdec.ptr.i20.i = getelementptr %struct.regmap_range, ptr %r.05.i13.i, i32 1
  call void @__sanitizer_cov_trace_cmp4(i32 %inc.i19.i, i32 %15)
  %cmp.i21.i = icmp ult i32 %inc.i19.i, %15
  %exitcond.not.i22.i = icmp eq i32 %inc.i19.i, %15
  br i1 %exitcond.not.i22.i, label %for.inc.i23.i.return_crit_edge, label %for.inc.i23.i.for.body.i15.i_crit_edge

for.inc.i23.i.for.body.i15.i_crit_edge:           ; preds = %for.inc.i23.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body.i15.i

for.inc.i23.i.return_crit_edge:                   ; preds = %for.inc.i23.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %return

return:                                           ; preds = %for.inc.i23.i.return_crit_edge, %regmap_reg_in_range.exit.i18.i.return_crit_edge, %if.end.i.return_crit_edge, %regmap_reg_in_ranges.exit.i.return_crit_edge, %if.end.return_crit_edge, %if.then
  %retval.0 = phi i1 [ %call, %if.then ], [ true, %if.end.return_crit_edge ], [ false, %regmap_reg_in_ranges.exit.i.return_crit_edge ], [ true, %if.end.i.return_crit_edge ], [ %cmp.i21.i, %for.inc.i23.i.return_crit_edge ], [ %cmp8.i11.i, %regmap_reg_in_range.exit.i18.i.return_crit_edge ]
  ret i1 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local zeroext i1 @regmap_readable_noinc(ptr nocapture noundef readonly %map, i32 noundef %reg) local_unnamed_addr #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %readable_noinc_reg = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 31
  %0 = ptrtoint ptr %readable_noinc_reg to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %readable_noinc_reg, align 4
  %tobool.not = icmp eq ptr %1, null
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  %dev = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 5
  %2 = ptrtoint ptr %dev to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load ptr, ptr %dev, align 4
  %call = tail call zeroext i1 %1(ptr noundef %3, i32 noundef %reg) #24
  br label %return

if.end:                                           ; preds = %entry
  %rd_noinc_table = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 37
  %4 = ptrtoint ptr %rd_noinc_table to i32
  call void @__asan_load4_noabort(i32 %4)
  %5 = load ptr, ptr %rd_noinc_table, align 4
  %tobool2.not = icmp eq ptr %5, null
  br i1 %tobool2.not, label %if.end.return_crit_edge, label %if.then3

if.end.return_crit_edge:                          ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #26
  br label %return

if.then3:                                         ; preds = %if.end
  %n_no_ranges.i = getelementptr inbounds %struct.regmap_access_table, ptr %5, i32 0, i32 3
  %6 = ptrtoint ptr %n_no_ranges.i to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load i32, ptr %n_no_ranges.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %7)
  %cmp4.not.i.i = icmp eq i32 %7, 0
  br i1 %cmp4.not.i.i, label %if.then3.if.end.i_crit_edge, label %for.body.i.preheader.i

if.then3.if.end.i_crit_edge:                      ; preds = %if.then3
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end.i

for.body.i.preheader.i:                           ; preds = %if.then3
  %no_ranges.i = getelementptr inbounds %struct.regmap_access_table, ptr %5, i32 0, i32 2
  %8 = ptrtoint ptr %no_ranges.i to i32
  call void @__asan_load4_noabort(i32 %8)
  %9 = load ptr, ptr %no_ranges.i, align 4
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.inc.i.i.for.body.i.i_crit_edge, %for.body.i.preheader.i
  %cmp8.i.i = phi i1 [ %cmp.i.i, %for.inc.i.i.for.body.i.i_crit_edge ], [ true, %for.body.i.preheader.i ]
  %i.07.i.i = phi i32 [ %inc.i.i, %for.inc.i.i.for.body.i.i_crit_edge ], [ 0, %for.body.i.preheader.i ]
  %r.05.i.i = phi ptr [ %incdec.ptr.i.i, %for.inc.i.i.for.body.i.i_crit_edge ], [ %9, %for.body.i.preheader.i ]
  %10 = ptrtoint ptr %r.05.i.i to i32
  call void @__asan_load4_noabort(i32 %10)
  %11 = load i32, ptr %r.05.i.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %11, i32 %reg)
  %cmp.not.i.i.i = icmp ugt i32 %11, %reg
  br i1 %cmp.not.i.i.i, label %for.body.i.i.for.inc.i.i_crit_edge, label %regmap_reg_in_range.exit.i.i

for.body.i.i.for.inc.i.i_crit_edge:               ; preds = %for.body.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i.i

regmap_reg_in_range.exit.i.i:                     ; preds = %for.body.i.i
  %range_max.i.i.i = getelementptr inbounds %struct.regmap_range, ptr %r.05.i.i, i32 0, i32 1
  %12 = ptrtoint ptr %range_max.i.i.i to i32
  call void @__asan_load4_noabort(i32 %12)
  %13 = load i32, ptr %range_max.i.i.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %13, i32 %reg)
  %cmp1.i.not.i.i = icmp ult i32 %13, %reg
  br i1 %cmp1.i.not.i.i, label %regmap_reg_in_range.exit.i.i.for.inc.i.i_crit_edge, label %regmap_reg_in_range.exit.i.i.regmap_reg_in_ranges.exit.i_crit_edge

regmap_reg_in_range.exit.i.i.regmap_reg_in_ranges.exit.i_crit_edge: ; preds = %regmap_reg_in_range.exit.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_reg_in_ranges.exit.i

regmap_reg_in_range.exit.i.i.for.inc.i.i_crit_edge: ; preds = %regmap_reg_in_range.exit.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i.i

for.inc.i.i:                                      ; preds = %regmap_reg_in_range.exit.i.i.for.inc.i.i_crit_edge, %for.body.i.i.for.inc.i.i_crit_edge
  %inc.i.i = add nuw i32 %i.07.i.i, 1
  %incdec.ptr.i.i = getelementptr %struct.regmap_range, ptr %r.05.i.i, i32 1
  call void @__sanitizer_cov_trace_cmp4(i32 %inc.i.i, i32 %7)
  %cmp.i.i = icmp ult i32 %inc.i.i, %7
  %exitcond.not.i.i = icmp eq i32 %inc.i.i, %7
  br i1 %exitcond.not.i.i, label %for.inc.i.i.regmap_reg_in_ranges.exit.i_crit_edge, label %for.inc.i.i.for.body.i.i_crit_edge

for.inc.i.i.for.body.i.i_crit_edge:               ; preds = %for.inc.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body.i.i

for.inc.i.i.regmap_reg_in_ranges.exit.i_crit_edge: ; preds = %for.inc.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_reg_in_ranges.exit.i

regmap_reg_in_ranges.exit.i:                      ; preds = %for.inc.i.i.regmap_reg_in_ranges.exit.i_crit_edge, %regmap_reg_in_range.exit.i.i.regmap_reg_in_ranges.exit.i_crit_edge
  %cmp.lcssa.i.i = phi i1 [ %cmp.i.i, %for.inc.i.i.regmap_reg_in_ranges.exit.i_crit_edge ], [ %cmp8.i.i, %regmap_reg_in_range.exit.i.i.regmap_reg_in_ranges.exit.i_crit_edge ]
  br i1 %cmp.lcssa.i.i, label %regmap_reg_in_ranges.exit.i.return_crit_edge, label %regmap_reg_in_ranges.exit.i.if.end.i_crit_edge

regmap_reg_in_ranges.exit.i.if.end.i_crit_edge:   ; preds = %regmap_reg_in_ranges.exit.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end.i

regmap_reg_in_ranges.exit.i.return_crit_edge:     ; preds = %regmap_reg_in_ranges.exit.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %return

if.end.i:                                         ; preds = %regmap_reg_in_ranges.exit.i.if.end.i_crit_edge, %if.then3.if.end.i_crit_edge
  %n_yes_ranges.i = getelementptr inbounds %struct.regmap_access_table, ptr %5, i32 0, i32 1
  %14 = ptrtoint ptr %n_yes_ranges.i to i32
  call void @__asan_load4_noabort(i32 %14)
  %15 = load i32, ptr %n_yes_ranges.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %15)
  %tobool.not.i = icmp eq i32 %15, 0
  br i1 %tobool.not.i, label %if.end.i.return_crit_edge, label %if.end2.i

if.end.i.return_crit_edge:                        ; preds = %if.end.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %return

if.end2.i:                                        ; preds = %if.end.i
  %16 = ptrtoint ptr %5 to i32
  call void @__asan_load4_noabort(i32 %16)
  %17 = load ptr, ptr %5, align 4
  br label %for.body.i15.i

for.body.i15.i:                                   ; preds = %for.inc.i23.i.for.body.i15.i_crit_edge, %if.end2.i
  %cmp8.i11.i = phi i1 [ %cmp.i21.i, %for.inc.i23.i.for.body.i15.i_crit_edge ], [ true, %if.end2.i ]
  %i.07.i12.i = phi i32 [ %inc.i19.i, %for.inc.i23.i.for.body.i15.i_crit_edge ], [ 0, %if.end2.i ]
  %r.05.i13.i = phi ptr [ %incdec.ptr.i20.i, %for.inc.i23.i.for.body.i15.i_crit_edge ], [ %17, %if.end2.i ]
  %18 = ptrtoint ptr %r.05.i13.i to i32
  call void @__asan_load4_noabort(i32 %18)
  %19 = load i32, ptr %r.05.i13.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %19, i32 %reg)
  %cmp.not.i.i14.i = icmp ugt i32 %19, %reg
  br i1 %cmp.not.i.i14.i, label %for.body.i15.i.for.inc.i23.i_crit_edge, label %regmap_reg_in_range.exit.i18.i

for.body.i15.i.for.inc.i23.i_crit_edge:           ; preds = %for.body.i15.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i23.i

regmap_reg_in_range.exit.i18.i:                   ; preds = %for.body.i15.i
  %range_max.i.i16.i = getelementptr inbounds %struct.regmap_range, ptr %r.05.i13.i, i32 0, i32 1
  %20 = ptrtoint ptr %range_max.i.i16.i to i32
  call void @__asan_load4_noabort(i32 %20)
  %21 = load i32, ptr %range_max.i.i16.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %21, i32 %reg)
  %cmp1.i.not.i17.i = icmp ult i32 %21, %reg
  br i1 %cmp1.i.not.i17.i, label %regmap_reg_in_range.exit.i18.i.for.inc.i23.i_crit_edge, label %regmap_reg_in_range.exit.i18.i.return_crit_edge

regmap_reg_in_range.exit.i18.i.return_crit_edge:  ; preds = %regmap_reg_in_range.exit.i18.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %return

regmap_reg_in_range.exit.i18.i.for.inc.i23.i_crit_edge: ; preds = %regmap_reg_in_range.exit.i18.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i23.i

for.inc.i23.i:                                    ; preds = %regmap_reg_in_range.exit.i18.i.for.inc.i23.i_crit_edge, %for.body.i15.i.for.inc.i23.i_crit_edge
  %inc.i19.i = add nuw i32 %i.07.i12.i, 1
  %incdec.ptr.i20.i = getelementptr %struct.regmap_range, ptr %r.05.i13.i, i32 1
  call void @__sanitizer_cov_trace_cmp4(i32 %inc.i19.i, i32 %15)
  %cmp.i21.i = icmp ult i32 %inc.i19.i, %15
  %exitcond.not.i22.i = icmp eq i32 %inc.i19.i, %15
  br i1 %exitcond.not.i22.i, label %for.inc.i23.i.return_crit_edge, label %for.inc.i23.i.for.body.i15.i_crit_edge

for.inc.i23.i.for.body.i15.i_crit_edge:           ; preds = %for.inc.i23.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body.i15.i

for.inc.i23.i.return_crit_edge:                   ; preds = %for.inc.i23.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %return

return:                                           ; preds = %for.inc.i23.i.return_crit_edge, %regmap_reg_in_range.exit.i18.i.return_crit_edge, %if.end.i.return_crit_edge, %regmap_reg_in_ranges.exit.i.return_crit_edge, %if.end.return_crit_edge, %if.then
  %retval.0 = phi i1 [ %call, %if.then ], [ true, %if.end.return_crit_edge ], [ false, %regmap_reg_in_ranges.exit.i.return_crit_edge ], [ true, %if.end.i.return_crit_edge ], [ %cmp.i21.i, %for.inc.i23.i.return_crit_edge ], [ %cmp8.i11.i, %regmap_reg_in_range.exit.i18.i.return_crit_edge ]
  ret i1 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @regmap_attach_dev(ptr noundef %dev, ptr noundef %map, ptr nocapture noundef readonly %config) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %dev1 = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 5
  %0 = ptrtoint ptr %dev1 to i32
  call void @__asan_store4_noabort(i32 %0)
  store ptr %dev, ptr %dev1, align 4
  %1 = ptrtoint ptr %config to i32
  call void @__asan_load4_noabort(i32 %1)
  %2 = load ptr, ptr %config, align 4
  %tobool.not.i = icmp eq ptr %2, null
  br i1 %tobool.not.i, label %entry.if.end_crit_edge, label %if.then.i

entry.if.end_crit_edge:                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

if.then.i:                                        ; preds = %entry
  %call.i = tail call ptr @kstrdup_const(ptr noundef nonnull %2, i32 noundef 3264) #24
  %tobool3.not.i = icmp eq ptr %call.i, null
  br i1 %tobool3.not.i, label %if.then.i.cleanup_crit_edge, label %cleanup.thread.i

if.then.i.cleanup_crit_edge:                      ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

cleanup.thread.i:                                 ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #26
  %name5.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 10
  %3 = ptrtoint ptr %name5.i to i32
  call void @__asan_load4_noabort(i32 %3)
  %4 = load ptr, ptr %name5.i, align 4
  tail call void @kfree_const(ptr noundef %4) #24
  %5 = ptrtoint ptr %name5.i to i32
  call void @__asan_store4_noabort(i32 %5)
  store ptr %call.i, ptr %name5.i, align 4
  br label %if.end

if.end:                                           ; preds = %cleanup.thread.i, %entry.if.end_crit_edge
  tail call void @regmap_debugfs_exit(ptr noundef %map) #24
  tail call void @regmap_debugfs_init(ptr noundef %map) #24
  %call2 = tail call noalias ptr @__devres_alloc_node(ptr noundef nonnull @dev_get_regmap_release, i32 noundef 4, i32 noundef 3264, i32 noundef -1, ptr noundef nonnull @.str) #24
  %tobool3.not = icmp eq ptr %call2, null
  br i1 %tobool3.not, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #26
  tail call void @regmap_debugfs_exit(ptr noundef %map) #24
  br label %cleanup

if.end5:                                          ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #26
  %6 = ptrtoint ptr %call2 to i32
  call void @__asan_store4_noabort(i32 %6)
  store ptr %map, ptr %call2, align 4
  tail call void @devres_add(ptr noundef %dev, ptr noundef nonnull %call2) #24
  br label %cleanup

cleanup:                                          ; preds = %if.end5, %if.then4, %if.then.i.cleanup_crit_edge
  %retval.0 = phi i32 [ 0, %if.end5 ], [ -12, %if.then4 ], [ -12, %if.then.i.cleanup_crit_edge ]
  ret i32 %retval.0
}

; Function Attrs: null_pointer_is_valid
declare dso_local void @regmap_debugfs_exit(ptr noundef) local_unnamed_addr #2

; Function Attrs: null_pointer_is_valid
declare dso_local void @regmap_debugfs_init(ptr noundef) local_unnamed_addr #2

; Function Attrs: null_pointer_is_valid
declare dso_local noalias ptr @__devres_alloc_node(ptr noundef, i32 noundef, i32 noundef, i32 noundef, ptr noundef) local_unnamed_addr #2

; Function Attrs: mustprogress nofree norecurse nosync nounwind null_pointer_is_valid readnone sanitize_address sspstrong willreturn uwtable(sync)
define internal void @dev_get_regmap_release(ptr nocapture noundef %dev, ptr nocapture noundef %res) #4 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  ret void
}

; Function Attrs: null_pointer_is_valid
declare dso_local void @devres_add(ptr noundef, ptr noundef) local_unnamed_addr #2

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @regmap_get_val_endian(ptr noundef %dev, ptr noundef readonly %bus, ptr nocapture noundef readonly %config) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %tobool.not = icmp eq ptr %dev, null
  br i1 %tobool.not, label %entry.cond.end_crit_edge, label %cond.true

entry.cond.end_crit_edge:                         ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %cond.end

cond.true:                                        ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  %call = tail call ptr @dev_fwnode(ptr noundef nonnull %dev) #24
  br label %cond.end

cond.end:                                         ; preds = %cond.true, %entry.cond.end_crit_edge
  %cond = phi ptr [ %call, %cond.true ], [ null, %entry.cond.end_crit_edge ]
  %val_format_endian = getelementptr inbounds %struct.regmap_config, ptr %config, i32 0, i32 39
  %0 = ptrtoint ptr %val_format_endian to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load i32, ptr %val_format_endian, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %1)
  %cmp.not = icmp eq i32 %1, 0
  br i1 %cmp.not, label %if.end, label %cond.end.cleanup_crit_edge

cond.end.cleanup_crit_edge:                       ; preds = %cond.end
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end:                                           ; preds = %cond.end
  %call.i = tail call zeroext i1 @fwnode_property_present(ptr noundef %cond, ptr noundef nonnull @.str.1) #24
  br i1 %call.i, label %if.end.cleanup_crit_edge, label %if.else

if.end.cleanup_crit_edge:                         ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.else:                                          ; preds = %if.end
  %call.i36 = tail call zeroext i1 @fwnode_property_present(ptr noundef %cond, ptr noundef nonnull @.str.2) #24
  br i1 %call.i36, label %if.else.cleanup_crit_edge, label %if.end10

if.else.cleanup_crit_edge:                        ; preds = %if.else
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end10:                                         ; preds = %if.else
  %call.i37 = tail call zeroext i1 @fwnode_property_present(ptr noundef %cond, ptr noundef nonnull @.str.3) #24
  br i1 %call.i37, label %if.end10.cleanup_crit_edge, label %if.end13

if.end10.cleanup_crit_edge:                       ; preds = %if.end10
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end13:                                         ; preds = %if.end10
  %tobool14.not = icmp eq ptr %bus, null
  br i1 %tobool14.not, label %if.end13.if.end18.thread_crit_edge, label %if.end18

if.end13.if.end18.thread_crit_edge:               ; preds = %if.end13
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end18.thread

if.end18:                                         ; preds = %if.end13
  %val_format_endian_default = getelementptr inbounds %struct.regmap_bus, ptr %bus, i32 0, i32 12
  %2 = ptrtoint ptr %val_format_endian_default to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load i32, ptr %val_format_endian_default, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %3)
  %cmp19.not = icmp eq i32 %3, 0
  br i1 %cmp19.not, label %if.end18.if.end18.thread_crit_edge, label %if.end18.cleanup_crit_edge

if.end18.cleanup_crit_edge:                       ; preds = %if.end18
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end18.if.end18.thread_crit_edge:               ; preds = %if.end18
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end18.thread

if.end18.thread:                                  ; preds = %if.end18.if.end18.thread_crit_edge, %if.end13.if.end18.thread_crit_edge
  br label %cleanup

cleanup:                                          ; preds = %if.end18.thread, %if.end18.cleanup_crit_edge, %if.end10.cleanup_crit_edge, %if.else.cleanup_crit_edge, %if.end.cleanup_crit_edge, %cond.end.cleanup_crit_edge
  %retval.0 = phi i32 [ %1, %cond.end.cleanup_crit_edge ], [ 3, %if.end10.cleanup_crit_edge ], [ 1, %if.end18.thread ], [ %3, %if.end18.cleanup_crit_edge ], [ 2, %if.else.cleanup_crit_edge ], [ 1, %if.end.cleanup_crit_edge ]
  ret i32 %retval.0
}

; Function Attrs: null_pointer_is_valid
declare dso_local ptr @dev_fwnode(ptr noundef) local_unnamed_addr #2

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local ptr @__regmap_init(ptr noundef %dev, ptr noundef %bus, ptr noundef %bus_context, ptr noundef %config, ptr noundef %lock_key, ptr noundef %lock_name) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %tobool.not = icmp eq ptr %config, null
  br i1 %tobool.not, label %entry.err_crit_edge, label %if.end

entry.err_crit_edge:                              ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %err

if.end:                                           ; preds = %entry
  call void @__asan_load4_noabort(i32 ptrtoint (ptr getelementptr inbounds ([4 x [14 x ptr]], ptr @kmalloc_caches, i32 0, i32 0, i32 10) to i32))
  %0 = load ptr, ptr getelementptr inbounds ([4 x [14 x ptr]], ptr @kmalloc_caches, i32 0, i32 0, i32 10), align 4
  %call7.i.i = tail call noalias align 8 ptr @kmem_cache_alloc_trace(ptr noundef %0, i32 noundef 3520, i32 noundef 576) #29
  %cmp = icmp eq ptr %call7.i.i, null
  br i1 %cmp, label %if.end.err_crit_edge, label %if.end2

if.end.err_crit_edge:                             ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #26
  br label %err

if.end2:                                          ; preds = %if.end
  %1 = ptrtoint ptr %config to i32
  call void @__asan_load4_noabort(i32 %1)
  %2 = load ptr, ptr %config, align 4
  %tobool.not.i = icmp eq ptr %2, null
  br i1 %tobool.not.i, label %if.end2.if.end6_crit_edge, label %if.then.i

if.end2.if.end6_crit_edge:                        ; preds = %if.end2
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end6

if.then.i:                                        ; preds = %if.end2
  %call.i = tail call ptr @kstrdup_const(ptr noundef nonnull %2, i32 noundef 3264) #24
  %tobool3.not.i = icmp eq ptr %call.i, null
  br i1 %tobool3.not.i, label %if.then.i.err_map_crit_edge, label %cleanup.thread.i

if.then.i.err_map_crit_edge:                      ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %err_map

cleanup.thread.i:                                 ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #26
  %name5.i = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 10
  %3 = ptrtoint ptr %name5.i to i32
  call void @__asan_load4_noabort(i32 %3)
  %4 = load ptr, ptr %name5.i, align 8
  tail call void @kfree_const(ptr noundef %4) #24
  %5 = ptrtoint ptr %name5.i to i32
  call void @__asan_store4_noabort(i32 %5)
  store ptr %call.i, ptr %name5.i, align 8
  br label %if.end6

if.end6:                                          ; preds = %cleanup.thread.i, %if.end2.if.end6_crit_edge
  %disable_locking = getelementptr inbounds %struct.regmap_config, ptr %config, i32 0, i32 11
  %6 = ptrtoint ptr %disable_locking to i32
  call void @__asan_load1_noabort(i32 %6)
  %7 = load i8, ptr %disable_locking, align 4, !range !389
  call void @__sanitizer_cov_trace_const_cmp1(i8 0, i8 %7)
  %tobool7.not = icmp eq i8 %7, 0
  br i1 %tobool7.not, label %if.else, label %if.then8

if.then8:                                         ; preds = %if.end6
  call void @__sanitizer_cov_trace_pc() #26
  %unlock = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 2
  %8 = ptrtoint ptr %unlock to i32
  call void @__asan_store4_noabort(i32 %8)
  store ptr @regmap_lock_unlock_none, ptr %unlock, align 8
  %lock = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 1
  %9 = ptrtoint ptr %lock to i32
  call void @__asan_store4_noabort(i32 %9)
  store ptr @regmap_lock_unlock_none, ptr %lock, align 4
  %can_sleep = getelementptr inbounds %struct.regmap_config, ptr %config, i32 0, i32 46
  %10 = ptrtoint ptr %can_sleep to i32
  call void @__asan_load1_noabort(i32 %10)
  %11 = load i8, ptr %can_sleep, align 4, !range !389
  %can_sleep10 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 71
  %12 = ptrtoint ptr %can_sleep10 to i32
  call void @__asan_store1_noabort(i32 %12)
  store i8 %11, ptr %can_sleep10, align 4
  %debugfs_disable.i = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 17
  %13 = ptrtoint ptr %debugfs_disable.i to i32
  call void @__asan_store1_noabort(i32 %13)
  store i8 1, ptr %debugfs_disable.i, align 4
  br label %if.end89

if.else:                                          ; preds = %if.end6
  %lock11 = getelementptr inbounds %struct.regmap_config, ptr %config, i32 0, i32 12
  %14 = ptrtoint ptr %lock11 to i32
  call void @__asan_load4_noabort(i32 %14)
  %15 = load ptr, ptr %lock11, align 4
  %tobool12.not = icmp eq ptr %15, null
  br i1 %tobool12.not, label %if.else.if.else25_crit_edge, label %land.lhs.true

if.else.if.else25_crit_edge:                      ; preds = %if.else
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.else25

land.lhs.true:                                    ; preds = %if.else
  %unlock13 = getelementptr inbounds %struct.regmap_config, ptr %config, i32 0, i32 13
  %16 = ptrtoint ptr %unlock13 to i32
  call void @__asan_load4_noabort(i32 %16)
  %17 = load ptr, ptr %unlock13, align 4
  %tobool14.not = icmp eq ptr %17, null
  br i1 %tobool14.not, label %land.lhs.true.if.else25_crit_edge, label %if.then15

land.lhs.true.if.else25_crit_edge:                ; preds = %land.lhs.true
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.else25

if.then15:                                        ; preds = %land.lhs.true
  call void @__sanitizer_cov_trace_pc() #26
  %lock17 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 1
  %18 = ptrtoint ptr %lock17 to i32
  call void @__asan_store4_noabort(i32 %18)
  store ptr %15, ptr %lock17, align 4
  %unlock19 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 2
  %19 = ptrtoint ptr %unlock19 to i32
  call void @__asan_store4_noabort(i32 %19)
  store ptr %17, ptr %unlock19, align 8
  %lock_arg = getelementptr inbounds %struct.regmap_config, ptr %config, i32 0, i32 14
  %20 = ptrtoint ptr %lock_arg to i32
  call void @__asan_load4_noabort(i32 %20)
  %21 = load ptr, ptr %lock_arg, align 4
  %lock_arg20 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 3
  %22 = ptrtoint ptr %lock_arg20 to i32
  call void @__asan_store4_noabort(i32 %22)
  store ptr %21, ptr %lock_arg20, align 4
  %can_sleep21 = getelementptr inbounds %struct.regmap_config, ptr %config, i32 0, i32 46
  %23 = ptrtoint ptr %can_sleep21 to i32
  call void @__asan_load1_noabort(i32 %23)
  %24 = load i8, ptr %can_sleep21, align 4, !range !389
  %can_sleep23 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 71
  %25 = ptrtoint ptr %can_sleep23 to i32
  call void @__asan_store1_noabort(i32 %25)
  store i8 %24, ptr %can_sleep23, align 4
  br label %if.end89

if.else25:                                        ; preds = %land.lhs.true.if.else25_crit_edge, %if.else.if.else25_crit_edge
  %use_hwlock = getelementptr inbounds %struct.regmap_config, ptr %config, i32 0, i32 42
  %26 = ptrtoint ptr %use_hwlock to i32
  call void @__asan_load1_noabort(i32 %26)
  %27 = load i8, ptr %use_hwlock, align 4, !range !389
  call void @__sanitizer_cov_trace_const_cmp1(i8 0, i8 %27)
  %tobool26.not = icmp eq i8 %27, 0
  br i1 %tobool26.not, label %if.else41, label %if.then27

if.then27:                                        ; preds = %if.else25
  %hwlock_id = getelementptr inbounds %struct.regmap_config, ptr %config, i32 0, i32 44
  %28 = ptrtoint ptr %hwlock_id to i32
  call void @__asan_load4_noabort(i32 %28)
  %29 = load i32, ptr %hwlock_id, align 4
  %call28 = tail call ptr @hwspin_lock_request_specific(i32 noundef %29) #24
  %hwlock = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 70
  %30 = ptrtoint ptr %hwlock to i32
  call void @__asan_store4_noabort(i32 %30)
  store ptr %call28, ptr %hwlock, align 8
  %tobool30.not = icmp eq ptr %call28, null
  br i1 %tobool30.not, label %if.then27.err_name_crit_edge, label %if.end32

if.then27.err_name_crit_edge:                     ; preds = %if.then27
  call void @__sanitizer_cov_trace_pc() #26
  br label %err_name

if.end32:                                         ; preds = %if.then27
  %hwlock_mode = getelementptr inbounds %struct.regmap_config, ptr %config, i32 0, i32 45
  %31 = ptrtoint ptr %hwlock_mode to i32
  call void @__asan_load4_noabort(i32 %31)
  %32 = load i32, ptr %hwlock_mode, align 4
  %33 = zext i32 %32 to i64
  call void @__sanitizer_cov_trace_switch(i64 %33, ptr @__sancov_gen_cov_switch_values)
  switch i32 %32, label %sw.default [
    i32 1, label %if.end32.sw.epilog_crit_edge
    i32 2, label %sw.bb35
  ]

if.end32.sw.epilog_crit_edge:                     ; preds = %if.end32
  call void @__sanitizer_cov_trace_pc() #26
  br label %sw.epilog

sw.bb35:                                          ; preds = %if.end32
  call void @__sanitizer_cov_trace_pc() #26
  br label %sw.epilog

sw.default:                                       ; preds = %if.end32
  call void @__sanitizer_cov_trace_pc() #26
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb35, %if.end32.sw.epilog_crit_edge
  %regmap_lock_hwlock.sink = phi ptr [ @regmap_lock_hwlock, %sw.default ], [ @regmap_lock_hwlock_irq, %sw.bb35 ], [ @regmap_lock_hwlock_irqsave, %if.end32.sw.epilog_crit_edge ]
  %regmap_unlock_hwlock.sink = phi ptr [ @regmap_unlock_hwlock, %sw.default ], [ @regmap_unlock_hwlock_irq, %sw.bb35 ], [ @regmap_unlock_hwlock_irqrestore, %if.end32.sw.epilog_crit_edge ]
  %lock38 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 1
  %34 = ptrtoint ptr %lock38 to i32
  call void @__asan_store4_noabort(i32 %34)
  store ptr %regmap_lock_hwlock.sink, ptr %lock38, align 4
  %unlock39 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 2
  %35 = ptrtoint ptr %unlock39 to i32
  call void @__asan_store4_noabort(i32 %35)
  store ptr %regmap_unlock_hwlock.sink, ptr %unlock39, align 8
  %lock_arg40 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 3
  %36 = ptrtoint ptr %lock_arg40 to i32
  call void @__asan_store4_noabort(i32 %36)
  store ptr %call7.i.i, ptr %lock_arg40, align 4
  br label %if.end89

if.else41:                                        ; preds = %if.else25
  %tobool42.not = icmp eq ptr %bus, null
  br i1 %tobool42.not, label %if.else41.lor.lhs.false_crit_edge, label %land.lhs.true43

if.else41.lor.lhs.false_crit_edge:                ; preds = %if.else41
  call void @__sanitizer_cov_trace_pc() #26
  br label %lor.lhs.false

land.lhs.true43:                                  ; preds = %if.else41
  %37 = ptrtoint ptr %bus to i32
  call void @__asan_load1_noabort(i32 %37)
  %38 = load i8, ptr %bus, align 4, !range !389
  call void @__sanitizer_cov_trace_const_cmp1(i8 0, i8 %38)
  %tobool44.not = icmp eq i8 %38, 0
  br i1 %tobool44.not, label %land.lhs.true43.lor.lhs.false_crit_edge, label %land.lhs.true43.if.then47_crit_edge

land.lhs.true43.if.then47_crit_edge:              ; preds = %land.lhs.true43
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.then47

land.lhs.true43.lor.lhs.false_crit_edge:          ; preds = %land.lhs.true43
  call void @__sanitizer_cov_trace_pc() #26
  br label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true43.lor.lhs.false_crit_edge, %if.else41.lor.lhs.false_crit_edge
  %fast_io45 = getelementptr inbounds %struct.regmap_config, ptr %config, i32 0, i32 18
  %39 = ptrtoint ptr %fast_io45 to i32
  call void @__asan_load1_noabort(i32 %39)
  %40 = load i8, ptr %fast_io45, align 4, !range !389
  call void @__sanitizer_cov_trace_const_cmp1(i8 0, i8 %40)
  %tobool46.not = icmp eq i8 %40, 0
  br i1 %tobool46.not, label %do.body74, label %lor.lhs.false.if.then47_crit_edge

lor.lhs.false.if.then47_crit_edge:                ; preds = %lor.lhs.false
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.then47

if.then47:                                        ; preds = %lor.lhs.false.if.then47_crit_edge, %land.lhs.true43.if.then47_crit_edge
  %use_raw_spinlock = getelementptr inbounds %struct.regmap_config, ptr %config, i32 0, i32 43
  %41 = ptrtoint ptr %use_raw_spinlock to i32
  call void @__asan_load1_noabort(i32 %41)
  %42 = load i8, ptr %use_raw_spinlock, align 1, !range !389
  call void @__sanitizer_cov_trace_const_cmp1(i8 0, i8 %42)
  %tobool48.not = icmp eq i8 %42, 0
  br i1 %tobool48.not, label %do.body58, label %do.body

do.body:                                          ; preds = %if.then47
  call void @__sanitizer_cov_trace_pc() #26
  tail call void @__raw_spin_lock_init(ptr noundef nonnull %call7.i.i, ptr noundef nonnull @.str.4, ptr noundef nonnull @__regmap_init.__key, i16 noundef signext 2) #24
  %lock50 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 1
  %43 = ptrtoint ptr %lock50 to i32
  call void @__asan_store4_noabort(i32 %43)
  store ptr @regmap_lock_raw_spinlock, ptr %lock50, align 4
  %unlock51 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 2
  %44 = ptrtoint ptr %unlock51 to i32
  call void @__asan_store4_noabort(i32 %44)
  store ptr @regmap_unlock_raw_spinlock, ptr %unlock51, align 8
  %dep_map = getelementptr inbounds %struct.raw_spinlock, ptr %call7.i.i, i32 0, i32 4
  %wait_type_inner = getelementptr inbounds %struct.raw_spinlock, ptr %call7.i.i, i32 0, i32 4, i32 4
  br label %if.end85

do.body58:                                        ; preds = %if.then47
  call void @__sanitizer_cov_trace_pc() #26
  tail call void @__raw_spin_lock_init(ptr noundef nonnull %call7.i.i, ptr noundef nonnull @.str.6, ptr noundef nonnull @__regmap_init.__key.5, i16 noundef signext 3) #24
  %lock62 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 1
  %45 = ptrtoint ptr %lock62 to i32
  call void @__asan_store4_noabort(i32 %45)
  store ptr @regmap_lock_spinlock, ptr %lock62, align 4
  %unlock63 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 2
  %46 = ptrtoint ptr %unlock63 to i32
  call void @__asan_store4_noabort(i32 %46)
  store ptr @regmap_unlock_spinlock, ptr %unlock63, align 8
  %dep_map65 = getelementptr inbounds %struct.anon.4, ptr %call7.i.i, i32 0, i32 1
  %wait_type_inner68 = getelementptr inbounds %struct.anon.4, ptr %call7.i.i, i32 0, i32 1, i32 4
  br label %if.end85

do.body74:                                        ; preds = %lor.lhs.false
  call void @__sanitizer_cov_trace_pc() #26
  tail call void @__mutex_init(ptr noundef nonnull %call7.i.i, ptr noundef nonnull @.str.8, ptr noundef nonnull @__regmap_init.__key.7) #24
  %lock77 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 1
  %47 = ptrtoint ptr %lock77 to i32
  call void @__asan_store4_noabort(i32 %47)
  store ptr @regmap_lock_mutex, ptr %lock77, align 4
  %unlock78 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 2
  %48 = ptrtoint ptr %unlock78 to i32
  call void @__asan_store4_noabort(i32 %48)
  store ptr @regmap_unlock_mutex, ptr %unlock78, align 8
  %can_sleep79 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 71
  %49 = ptrtoint ptr %can_sleep79 to i32
  call void @__asan_store1_noabort(i32 %49)
  store i8 1, ptr %can_sleep79, align 4
  %dep_map80 = getelementptr inbounds %struct.mutex, ptr %call7.i.i, i32 0, i32 5
  %wait_type_inner82 = getelementptr inbounds %struct.mutex, ptr %call7.i.i, i32 0, i32 5, i32 4
  br label %if.end85

if.end85:                                         ; preds = %do.body74, %do.body58, %do.body
  %wait_type_inner.sink = phi ptr [ %wait_type_inner, %do.body ], [ %wait_type_inner68, %do.body58 ], [ %wait_type_inner82, %do.body74 ]
  %dep_map.sink = phi ptr [ %dep_map, %do.body ], [ %dep_map65, %do.body58 ], [ %dep_map80, %do.body74 ]
  %50 = ptrtoint ptr %wait_type_inner.sink to i32
  call void @__asan_load1_noabort(i32 %50)
  %51 = load i8, ptr %wait_type_inner.sink, align 1
  tail call void @lockdep_init_map_type(ptr noundef %dep_map.sink, ptr noundef %lock_name, ptr noundef %lock_key, i32 noundef 0, i8 noundef zeroext %51, i8 noundef zeroext 0, i8 noundef zeroext 0) #24
  %lock_arg86 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 3
  %52 = ptrtoint ptr %lock_arg86 to i32
  call void @__asan_store4_noabort(i32 %52)
  store ptr %call7.i.i, ptr %lock_arg86, align 4
  br label %if.end89

if.end89:                                         ; preds = %if.end85, %sw.epilog, %if.then15, %if.then8
  %tobool90.not = icmp eq ptr %bus, null
  br i1 %tobool90.not, label %if.end89.lor.lhs.false94_crit_edge, label %land.lhs.true91

if.end89.lor.lhs.false94_crit_edge:               ; preds = %if.end89
  call void @__sanitizer_cov_trace_pc() #26
  br label %lor.lhs.false94

land.lhs.true91:                                  ; preds = %if.end89
  %53 = ptrtoint ptr %bus to i32
  call void @__asan_load1_noabort(i32 %53)
  %54 = load i8, ptr %bus, align 4, !range !389
  call void @__sanitizer_cov_trace_const_cmp1(i8 0, i8 %54)
  %tobool93.not = icmp eq i8 %54, 0
  br i1 %tobool93.not, label %land.lhs.true91.lor.lhs.false94_crit_edge, label %land.lhs.true91.if.end100_crit_edge

land.lhs.true91.if.end100_crit_edge:              ; preds = %land.lhs.true91
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end100

land.lhs.true91.lor.lhs.false94_crit_edge:        ; preds = %land.lhs.true91
  call void @__sanitizer_cov_trace_pc() #26
  br label %lor.lhs.false94

lor.lhs.false94:                                  ; preds = %land.lhs.true91.lor.lhs.false94_crit_edge, %if.end89.lor.lhs.false94_crit_edge
  %fast_io95 = getelementptr inbounds %struct.regmap_config, ptr %config, i32 0, i32 18
  %55 = ptrtoint ptr %fast_io95 to i32
  call void @__asan_load1_noabort(i32 %55)
  %56 = load i8, ptr %fast_io95, align 4, !range !389
  call void @__sanitizer_cov_trace_const_cmp1(i8 0, i8 %56)
  %tobool96.not = icmp eq i8 %56, 0
  %spec.select1125 = select i1 %tobool96.not, i32 3264, i32 2592
  br label %if.end100

if.end100:                                        ; preds = %lor.lhs.false94, %land.lhs.true91.if.end100_crit_edge
  %.sink1123 = phi i32 [ 2592, %land.lhs.true91.if.end100_crit_edge ], [ %spec.select1125, %lor.lhs.false94 ]
  %alloc_flags99 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 4
  %57 = ptrtoint ptr %alloc_flags99 to i32
  call void @__asan_store4_noabort(i32 %57)
  store i32 %.sink1123, ptr %alloc_flags99, align 8
  %reg_bits = getelementptr inbounds %struct.regmap_config, ptr %config, i32 0, i32 1
  %58 = ptrtoint ptr %reg_bits to i32
  call void @__asan_load4_noabort(i32 %58)
  %59 = load i32, ptr %reg_bits, align 4
  %sub = add i32 %59, 7
  %div = sdiv i32 %sub, 8
  %format = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 7
  %reg_bytes = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 7, i32 1
  %60 = ptrtoint ptr %reg_bytes to i32
  call void @__asan_store4_noabort(i32 %60)
  store i32 %div, ptr %reg_bytes, align 8
  %pad_bits = getelementptr inbounds %struct.regmap_config, ptr %config, i32 0, i32 3
  %61 = ptrtoint ptr %pad_bits to i32
  call void @__asan_load4_noabort(i32 %61)
  %62 = load i32, ptr %pad_bits, align 4
  %.frozen = freeze i32 %62
  %div101 = sdiv i32 %.frozen, 8
  %pad_bytes = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 7, i32 2
  %63 = ptrtoint ptr %pad_bytes to i32
  call void @__asan_store4_noabort(i32 %63)
  store i32 %div101, ptr %pad_bytes, align 4
  %val_bits = getelementptr inbounds %struct.regmap_config, ptr %config, i32 0, i32 4
  %64 = ptrtoint ptr %val_bits to i32
  call void @__asan_load4_noabort(i32 %64)
  %65 = load i32, ptr %val_bits, align 4
  %sub104 = add i32 %65, 7
  %div105 = sdiv i32 %sub104, 8
  %val_bytes = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 7, i32 3
  %66 = ptrtoint ptr %val_bytes to i32
  call void @__asan_store4_noabort(i32 %66)
  store i32 %div105, ptr %val_bytes, align 8
  %add111 = add i32 %sub, %62
  %sub113 = add i32 %add111, %65
  %div114 = sdiv i32 %sub113, 8
  %67 = ptrtoint ptr %format to i32
  call void @__asan_store4_noabort(i32 %67)
  store i32 %div114, ptr %format, align 4
  %68 = mul i32 %div101, 8
  %rem.decomposed = sub i32 %.frozen, %68
  %reg_shift = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 44
  %69 = ptrtoint ptr %reg_shift to i32
  call void @__asan_store4_noabort(i32 %69)
  store i32 %rem.decomposed, ptr %reg_shift, align 4
  %reg_stride = getelementptr inbounds %struct.regmap_config, ptr %config, i32 0, i32 2
  %70 = ptrtoint ptr %reg_stride to i32
  call void @__asan_load4_noabort(i32 %70)
  %71 = load i32, ptr %reg_stride, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %71)
  %tobool117.not = icmp eq i32 %71, 0
  %.sink = select i1 %tobool117.not, i32 1, i32 %71
  %72 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 45
  %73 = ptrtoint ptr %72 to i32
  call void @__asan_store4_noabort(i32 %73)
  store i32 %.sink, ptr %72, align 8
  %74 = tail call i32 @llvm.ctpop.i32(i32 %.sink) #24, !range !390
  call void @__sanitizer_cov_trace_const_cmp4(i32 1, i32 %74)
  %75 = icmp eq i32 %74, 1
  %76 = tail call i32 @llvm.ctlz.i32(i32 %.sink, i1 true) #24, !range !390
  %sub.i.op.i = xor i32 %76, 31
  %.sink1124 = select i1 %75, i32 %sub.i.op.i, i32 -1
  %reg_stride_order139 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 46
  %77 = ptrtoint ptr %reg_stride_order139 to i32
  call void @__asan_store4_noabort(i32 %77)
  store i32 %.sink1124, ptr %reg_stride_order139, align 4
  %use_single_read = getelementptr inbounds %struct.regmap_config, ptr %config, i32 0, i32 34
  %78 = ptrtoint ptr %use_single_read to i32
  call void @__asan_load1_noabort(i32 %78)
  %79 = load i8, ptr %use_single_read, align 1, !range !389
  call void @__sanitizer_cov_trace_const_cmp1(i8 0, i8 %79)
  %tobool141.not = icmp ne i8 %79, 0
  %brmerge = or i1 %tobool90.not, %tobool141.not
  br i1 %brmerge, label %if.end100.lor.end_crit_edge, label %lor.rhs

if.end100.lor.end_crit_edge:                      ; preds = %if.end100
  call void @__sanitizer_cov_trace_pc() #26
  br label %lor.end

lor.rhs:                                          ; preds = %if.end100
  call void @__sanitizer_cov_trace_pc() #26
  %read = getelementptr inbounds %struct.regmap_bus, ptr %bus, i32 0, i32 6
  %80 = ptrtoint ptr %read to i32
  call void @__asan_load4_noabort(i32 %80)
  %81 = load ptr, ptr %read, align 4
  %tobool145.not = icmp eq ptr %81, null
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.end100.lor.end_crit_edge
  %82 = phi i1 [ true, %if.end100.lor.end_crit_edge ], [ %tobool145.not, %lor.rhs ]
  %use_single_read146 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 63
  %frombool147 = zext i1 %82 to i8
  %83 = ptrtoint ptr %use_single_read146 to i32
  call void @__asan_store1_noabort(i32 %83)
  store i8 %frombool147, ptr %use_single_read146, align 4
  %use_single_write = getelementptr inbounds %struct.regmap_config, ptr %config, i32 0, i32 35
  %84 = ptrtoint ptr %use_single_write to i32
  call void @__asan_load1_noabort(i32 %84)
  %85 = load i8, ptr %use_single_write, align 2, !range !389
  call void @__sanitizer_cov_trace_const_cmp1(i8 0, i8 %85)
  %tobool148.not = icmp ne i8 %85, 0
  %brmerge932 = or i1 %tobool90.not, %tobool148.not
  br i1 %brmerge932, label %lor.end.lor.end155_crit_edge, label %lor.rhs152

lor.end.lor.end155_crit_edge:                     ; preds = %lor.end
  call void @__sanitizer_cov_trace_pc() #26
  br label %lor.end155

lor.rhs152:                                       ; preds = %lor.end
  call void @__sanitizer_cov_trace_pc() #26
  %write = getelementptr inbounds %struct.regmap_bus, ptr %bus, i32 0, i32 1
  %86 = ptrtoint ptr %write to i32
  call void @__asan_load4_noabort(i32 %86)
  %87 = load ptr, ptr %write, align 4
  %tobool153.not = icmp eq ptr %87, null
  br label %lor.end155

lor.end155:                                       ; preds = %lor.rhs152, %lor.end.lor.end155_crit_edge
  %88 = phi i1 [ true, %lor.end.lor.end155_crit_edge ], [ %tobool153.not, %lor.rhs152 ]
  %use_single_write156 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 64
  %frombool157 = zext i1 %88 to i8
  %89 = ptrtoint ptr %use_single_write156 to i32
  call void @__asan_store1_noabort(i32 %89)
  store i8 %frombool157, ptr %use_single_write156, align 1
  %can_multi_write = getelementptr inbounds %struct.regmap_config, ptr %config, i32 0, i32 37
  %90 = ptrtoint ptr %can_multi_write to i32
  call void @__asan_load1_noabort(i32 %90)
  %91 = load i8, ptr %can_multi_write, align 4, !range !389
  call void @__sanitizer_cov_trace_const_cmp1(i8 0, i8 %91)
  %tobool158.not = icmp eq i8 %91, 0
  %brmerge933 = or i1 %tobool90.not, %tobool158.not
  br i1 %brmerge933, label %lor.end155.land.end_crit_edge, label %land.rhs

lor.end155.land.end_crit_edge:                    ; preds = %lor.end155
  call void @__sanitizer_cov_trace_pc() #26
  br label %land.end

land.rhs:                                         ; preds = %lor.end155
  call void @__sanitizer_cov_trace_pc() #26
  %write162 = getelementptr inbounds %struct.regmap_bus, ptr %bus, i32 0, i32 1
  %92 = ptrtoint ptr %write162 to i32
  call void @__asan_load4_noabort(i32 %92)
  %93 = load ptr, ptr %write162, align 4
  %tobool163 = icmp ne ptr %93, null
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.end155.land.end_crit_edge
  %94 = phi i1 [ false, %lor.end155.land.end_crit_edge ], [ %tobool163, %land.rhs ]
  %can_multi_write164 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 65
  %frombool165 = zext i1 %94 to i8
  %95 = ptrtoint ptr %can_multi_write164 to i32
  call void @__asan_store1_noabort(i32 %95)
  store i8 %frombool165, ptr %can_multi_write164, align 2
  br i1 %tobool90.not, label %land.end.if.end170_crit_edge, label %if.then167

land.end.if.end170_crit_edge:                     ; preds = %land.end
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end170

if.then167:                                       ; preds = %land.end
  call void @__sanitizer_cov_trace_pc() #26
  %max_raw_read = getelementptr inbounds %struct.regmap_bus, ptr %bus, i32 0, i32 13
  %96 = ptrtoint ptr %max_raw_read to i32
  call void @__asan_load4_noabort(i32 %96)
  %97 = load i32, ptr %max_raw_read, align 4
  %max_raw_read168 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 66
  %98 = ptrtoint ptr %max_raw_read168 to i32
  call void @__asan_store4_noabort(i32 %98)
  store i32 %97, ptr %max_raw_read168, align 8
  %max_raw_write = getelementptr inbounds %struct.regmap_bus, ptr %bus, i32 0, i32 14
  %99 = ptrtoint ptr %max_raw_write to i32
  call void @__asan_load4_noabort(i32 %99)
  %100 = load i32, ptr %max_raw_write, align 4
  %max_raw_write169 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 67
  %101 = ptrtoint ptr %max_raw_write169 to i32
  call void @__asan_store4_noabort(i32 %101)
  store i32 %100, ptr %max_raw_write169, align 4
  br label %if.end170

if.end170:                                        ; preds = %if.then167, %land.end.if.end170_crit_edge
  %dev171 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 5
  %102 = ptrtoint ptr %dev171 to i32
  call void @__asan_store4_noabort(i32 %102)
  store ptr %dev, ptr %dev171, align 4
  %bus172 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 8
  %103 = ptrtoint ptr %bus172 to i32
  call void @__asan_store4_noabort(i32 %103)
  store ptr %bus, ptr %bus172, align 8
  %bus_context173 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 9
  %104 = ptrtoint ptr %bus_context173 to i32
  call void @__asan_store4_noabort(i32 %104)
  store ptr %bus_context, ptr %bus_context173, align 4
  %max_register = getelementptr inbounds %struct.regmap_config, ptr %config, i32 0, i32 19
  %105 = ptrtoint ptr %max_register to i32
  call void @__asan_load4_noabort(i32 %105)
  %106 = load i32, ptr %max_register, align 4
  %max_register174 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 25
  %107 = ptrtoint ptr %max_register174 to i32
  call void @__asan_store4_noabort(i32 %107)
  store i32 %106, ptr %max_register174, align 8
  %wr_table = getelementptr inbounds %struct.regmap_config, ptr %config, i32 0, i32 20
  %108 = ptrtoint ptr %wr_table to i32
  call void @__asan_load4_noabort(i32 %108)
  %109 = load ptr, ptr %wr_table, align 4
  %wr_table175 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 32
  %110 = ptrtoint ptr %wr_table175 to i32
  call void @__asan_store4_noabort(i32 %110)
  store ptr %109, ptr %wr_table175, align 4
  %rd_table = getelementptr inbounds %struct.regmap_config, ptr %config, i32 0, i32 21
  %111 = ptrtoint ptr %rd_table to i32
  call void @__asan_load4_noabort(i32 %111)
  %112 = load ptr, ptr %rd_table, align 4
  %rd_table176 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 33
  %113 = ptrtoint ptr %rd_table176 to i32
  call void @__asan_store4_noabort(i32 %113)
  store ptr %112, ptr %rd_table176, align 8
  %volatile_table = getelementptr inbounds %struct.regmap_config, ptr %config, i32 0, i32 22
  %114 = ptrtoint ptr %volatile_table to i32
  call void @__asan_load4_noabort(i32 %114)
  %115 = load ptr, ptr %volatile_table, align 4
  %volatile_table177 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 34
  %116 = ptrtoint ptr %volatile_table177 to i32
  call void @__asan_store4_noabort(i32 %116)
  store ptr %115, ptr %volatile_table177, align 4
  %precious_table = getelementptr inbounds %struct.regmap_config, ptr %config, i32 0, i32 23
  %117 = ptrtoint ptr %precious_table to i32
  call void @__asan_load4_noabort(i32 %117)
  %118 = load ptr, ptr %precious_table, align 4
  %precious_table178 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 35
  %119 = ptrtoint ptr %precious_table178 to i32
  call void @__asan_store4_noabort(i32 %119)
  store ptr %118, ptr %precious_table178, align 8
  %wr_noinc_table = getelementptr inbounds %struct.regmap_config, ptr %config, i32 0, i32 24
  %120 = ptrtoint ptr %wr_noinc_table to i32
  call void @__asan_load4_noabort(i32 %120)
  %121 = load ptr, ptr %wr_noinc_table, align 4
  %wr_noinc_table179 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 36
  %122 = ptrtoint ptr %wr_noinc_table179 to i32
  call void @__asan_store4_noabort(i32 %122)
  store ptr %121, ptr %wr_noinc_table179, align 4
  %rd_noinc_table = getelementptr inbounds %struct.regmap_config, ptr %config, i32 0, i32 25
  %123 = ptrtoint ptr %rd_noinc_table to i32
  call void @__asan_load4_noabort(i32 %123)
  %124 = load ptr, ptr %rd_noinc_table, align 4
  %rd_noinc_table180 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 37
  %125 = ptrtoint ptr %rd_noinc_table180 to i32
  call void @__asan_store4_noabort(i32 %125)
  store ptr %124, ptr %rd_noinc_table180, align 8
  %writeable_reg = getelementptr inbounds %struct.regmap_config, ptr %config, i32 0, i32 5
  %126 = ptrtoint ptr %writeable_reg to i32
  call void @__asan_load4_noabort(i32 %126)
  %127 = load ptr, ptr %writeable_reg, align 4
  %writeable_reg181 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 26
  %128 = ptrtoint ptr %writeable_reg181 to i32
  call void @__asan_store4_noabort(i32 %128)
  store ptr %127, ptr %writeable_reg181, align 4
  %readable_reg = getelementptr inbounds %struct.regmap_config, ptr %config, i32 0, i32 6
  %129 = ptrtoint ptr %readable_reg to i32
  call void @__asan_load4_noabort(i32 %129)
  %130 = load ptr, ptr %readable_reg, align 4
  %readable_reg182 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 27
  %131 = ptrtoint ptr %readable_reg182 to i32
  call void @__asan_store4_noabort(i32 %131)
  store ptr %130, ptr %readable_reg182, align 8
  %volatile_reg = getelementptr inbounds %struct.regmap_config, ptr %config, i32 0, i32 7
  %132 = ptrtoint ptr %volatile_reg to i32
  call void @__asan_load4_noabort(i32 %132)
  %133 = load ptr, ptr %volatile_reg, align 4
  %volatile_reg183 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 28
  %134 = ptrtoint ptr %volatile_reg183 to i32
  call void @__asan_store4_noabort(i32 %134)
  store ptr %133, ptr %volatile_reg183, align 4
  %precious_reg = getelementptr inbounds %struct.regmap_config, ptr %config, i32 0, i32 8
  %135 = ptrtoint ptr %precious_reg to i32
  call void @__asan_load4_noabort(i32 %135)
  %136 = load ptr, ptr %precious_reg, align 4
  %precious_reg184 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 29
  %137 = ptrtoint ptr %precious_reg184 to i32
  call void @__asan_store4_noabort(i32 %137)
  store ptr %136, ptr %precious_reg184, align 8
  %writeable_noinc_reg = getelementptr inbounds %struct.regmap_config, ptr %config, i32 0, i32 9
  %138 = ptrtoint ptr %writeable_noinc_reg to i32
  call void @__asan_load4_noabort(i32 %138)
  %139 = load ptr, ptr %writeable_noinc_reg, align 4
  %writeable_noinc_reg185 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 30
  %140 = ptrtoint ptr %writeable_noinc_reg185 to i32
  call void @__asan_store4_noabort(i32 %140)
  store ptr %139, ptr %writeable_noinc_reg185, align 4
  %readable_noinc_reg = getelementptr inbounds %struct.regmap_config, ptr %config, i32 0, i32 10
  %141 = ptrtoint ptr %readable_noinc_reg to i32
  call void @__asan_load4_noabort(i32 %141)
  %142 = load ptr, ptr %readable_noinc_reg, align 4
  %readable_noinc_reg186 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 31
  %143 = ptrtoint ptr %readable_noinc_reg186 to i32
  call void @__asan_store4_noabort(i32 %143)
  store ptr %142, ptr %readable_noinc_reg186, align 8
  %cache_type = getelementptr inbounds %struct.regmap_config, ptr %config, i32 0, i32 28
  %144 = ptrtoint ptr %cache_type to i32
  call void @__asan_load4_noabort(i32 %144)
  %145 = load i32, ptr %cache_type, align 4
  %cache_type187 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 48
  %146 = ptrtoint ptr %cache_type187 to i32
  call void @__asan_store4_noabort(i32 %146)
  store i32 %145, ptr %cache_type187, align 4
  %async_lock = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 12
  tail call void @__raw_spin_lock_init(ptr noundef %async_lock, ptr noundef nonnull @.str.10, ptr noundef nonnull @__regmap_init.__key.9, i16 noundef signext 3) #24
  %async_list = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 14
  %147 = ptrtoint ptr %async_list to i32
  call void @__asan_store4_noabort(i32 %147)
  store volatile ptr %async_list, ptr %async_list, align 8
  %prev.i = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 14, i32 1
  %148 = ptrtoint ptr %prev.i to i32
  call void @__asan_store4_noabort(i32 %148)
  store ptr %async_list, ptr %prev.i, align 4
  %async_free = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 15
  %149 = ptrtoint ptr %async_free to i32
  call void @__asan_store4_noabort(i32 %149)
  store volatile ptr %async_free, ptr %async_free, align 8
  %prev.i934 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 15, i32 1
  %150 = ptrtoint ptr %prev.i934 to i32
  call void @__asan_store4_noabort(i32 %150)
  store ptr %async_free, ptr %prev.i934, align 4
  %async_waitq = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 13
  tail call void @__init_waitqueue_head(ptr noundef %async_waitq, ptr noundef nonnull @.str.12, ptr noundef nonnull @__regmap_init.__key.11) #24
  %read_flag_mask = getelementptr inbounds %struct.regmap_config, ptr %config, i32 0, i32 31
  %151 = ptrtoint ptr %read_flag_mask to i32
  call void @__asan_load4_noabort(i32 %151)
  %152 = load i32, ptr %read_flag_mask, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %152)
  %tobool195.not = icmp eq i32 %152, 0
  br i1 %tobool195.not, label %lor.lhs.false196, label %if.end170.if.then201_crit_edge

if.end170.if.then201_crit_edge:                   ; preds = %if.end170
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.then201

lor.lhs.false196:                                 ; preds = %if.end170
  %write_flag_mask = getelementptr inbounds %struct.regmap_config, ptr %config, i32 0, i32 32
  %153 = ptrtoint ptr %write_flag_mask to i32
  call void @__asan_load4_noabort(i32 %153)
  %154 = load i32, ptr %write_flag_mask, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %154)
  %tobool197.not = icmp eq i32 %154, 0
  br i1 %tobool197.not, label %lor.lhs.false198, label %lor.lhs.false196.if.then201_crit_edge

lor.lhs.false196.if.then201_crit_edge:            ; preds = %lor.lhs.false196
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.then201

lor.lhs.false198:                                 ; preds = %lor.lhs.false196
  %zero_flag_mask = getelementptr inbounds %struct.regmap_config, ptr %config, i32 0, i32 33
  %155 = ptrtoint ptr %zero_flag_mask to i32
  call void @__asan_load1_noabort(i32 %155)
  %156 = load i8, ptr %zero_flag_mask, align 4, !range !389
  call void @__sanitizer_cov_trace_const_cmp1(i8 0, i8 %156)
  %tobool199.not = icmp eq i8 %156, 0
  br i1 %tobool199.not, label %if.else206, label %lor.lhs.false198.if.then201_crit_edge

lor.lhs.false198.if.then201_crit_edge:            ; preds = %lor.lhs.false198
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.then201

if.then201:                                       ; preds = %lor.lhs.false198.if.then201_crit_edge, %lor.lhs.false196.if.then201_crit_edge, %if.end170.if.then201_crit_edge
  %read_flag_mask203 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 42
  %157 = ptrtoint ptr %read_flag_mask203 to i32
  call void @__asan_store4_noabort(i32 %157)
  store i32 %152, ptr %read_flag_mask203, align 4
  %write_flag_mask204 = getelementptr inbounds %struct.regmap_config, ptr %config, i32 0, i32 32
  %158 = ptrtoint ptr %write_flag_mask204 to i32
  call void @__asan_load4_noabort(i32 %158)
  %159 = load i32, ptr %write_flag_mask204, align 4
  %write_flag_mask205 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 43
  %160 = ptrtoint ptr %write_flag_mask205 to i32
  call void @__asan_store4_noabort(i32 %160)
  store i32 %159, ptr %write_flag_mask205, align 8
  br i1 %tobool90.not, label %if.then201.if.then215_crit_edge, label %if.then201.if.else219_crit_edge

if.then201.if.else219_crit_edge:                  ; preds = %if.then201
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.else219

if.then201.if.then215_crit_edge:                  ; preds = %if.then201
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.then215

if.else206:                                       ; preds = %lor.lhs.false198
  br i1 %tobool90.not, label %if.else206.if.then215_crit_edge, label %if.then208

if.else206.if.then215_crit_edge:                  ; preds = %if.else206
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.then215

if.then208:                                       ; preds = %if.else206
  call void @__sanitizer_cov_trace_pc() #26
  %read_flag_mask209 = getelementptr inbounds %struct.regmap_bus, ptr %bus, i32 0, i32 10
  %161 = ptrtoint ptr %read_flag_mask209 to i32
  call void @__asan_load1_noabort(i32 %161)
  %162 = load i8, ptr %read_flag_mask209, align 4
  %conv210 = zext i8 %162 to i32
  %read_flag_mask211 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 42
  %163 = ptrtoint ptr %read_flag_mask211 to i32
  call void @__asan_store4_noabort(i32 %163)
  store i32 %conv210, ptr %read_flag_mask211, align 4
  br label %if.else219

if.then215:                                       ; preds = %if.else206.if.then215_crit_edge, %if.then201.if.then215_crit_edge
  %reg_read = getelementptr inbounds %struct.regmap_config, ptr %config, i32 0, i32 15
  %164 = ptrtoint ptr %reg_read to i32
  call void @__asan_load4_noabort(i32 %164)
  %165 = load ptr, ptr %reg_read, align 4
  %reg_read216 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 38
  %166 = ptrtoint ptr %reg_read216 to i32
  call void @__asan_store4_noabort(i32 %166)
  store ptr %165, ptr %reg_read216, align 4
  %reg_write = getelementptr inbounds %struct.regmap_config, ptr %config, i32 0, i32 16
  %167 = ptrtoint ptr %reg_write to i32
  call void @__asan_load4_noabort(i32 %167)
  %168 = load ptr, ptr %reg_write, align 4
  %reg_write217 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 39
  %169 = ptrtoint ptr %reg_write217 to i32
  call void @__asan_store4_noabort(i32 %169)
  store ptr %168, ptr %reg_write217, align 8
  %reg_update_bits = getelementptr inbounds %struct.regmap_config, ptr %config, i32 0, i32 17
  %170 = ptrtoint ptr %reg_update_bits to i32
  call void @__asan_load4_noabort(i32 %170)
  %171 = load ptr, ptr %reg_update_bits, align 4
  %reg_update_bits218 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 40
  %172 = ptrtoint ptr %reg_update_bits218 to i32
  call void @__asan_store4_noabort(i32 %172)
  store ptr %171, ptr %reg_update_bits218, align 4
  %defer_caching = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 41
  %173 = ptrtoint ptr %defer_caching to i32
  call void @__asan_store1_noabort(i32 %173)
  store i8 0, ptr %defer_caching, align 8
  br label %skip_format_initialization

if.else219:                                       ; preds = %if.then208, %if.then201.if.else219_crit_edge
  %read220 = getelementptr inbounds %struct.regmap_bus, ptr %bus, i32 0, i32 6
  %174 = ptrtoint ptr %read220 to i32
  call void @__asan_load4_noabort(i32 %174)
  %175 = load ptr, ptr %read220, align 4
  %tobool221.not = icmp eq ptr %175, null
  br i1 %tobool221.not, label %if.else219.if.then225_crit_edge, label %lor.lhs.false222

if.else219.if.then225_crit_edge:                  ; preds = %if.else219
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.then225

lor.lhs.false222:                                 ; preds = %if.else219
  %write223 = getelementptr inbounds %struct.regmap_bus, ptr %bus, i32 0, i32 1
  %176 = ptrtoint ptr %write223 to i32
  call void @__asan_load4_noabort(i32 %176)
  %177 = load ptr, ptr %write223, align 4
  %tobool224.not = icmp eq ptr %177, null
  br i1 %tobool224.not, label %lor.lhs.false222.if.then225_crit_edge, label %if.else231

lor.lhs.false222.if.then225_crit_edge:            ; preds = %lor.lhs.false222
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.then225

if.then225:                                       ; preds = %lor.lhs.false222.if.then225_crit_edge, %if.else219.if.then225_crit_edge
  %reg_read226 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 38
  %178 = ptrtoint ptr %reg_read226 to i32
  call void @__asan_store4_noabort(i32 %178)
  store ptr @_regmap_bus_reg_read, ptr %reg_read226, align 4
  %reg_write227 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 39
  %179 = ptrtoint ptr %reg_write227 to i32
  call void @__asan_store4_noabort(i32 %179)
  store ptr @_regmap_bus_reg_write, ptr %reg_write227, align 8
  %reg_update_bits228 = getelementptr inbounds %struct.regmap_bus, ptr %bus, i32 0, i32 5
  %180 = ptrtoint ptr %reg_update_bits228 to i32
  call void @__asan_load4_noabort(i32 %180)
  %181 = load ptr, ptr %reg_update_bits228, align 4
  %reg_update_bits229 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 40
  %182 = ptrtoint ptr %reg_update_bits229 to i32
  call void @__asan_store4_noabort(i32 %182)
  store ptr %181, ptr %reg_update_bits229, align 4
  %defer_caching230 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 41
  %183 = ptrtoint ptr %defer_caching230 to i32
  call void @__asan_store1_noabort(i32 %183)
  store i8 0, ptr %defer_caching230, align 8
  br label %skip_format_initialization

if.else231:                                       ; preds = %lor.lhs.false222
  %reg_read232 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 38
  %184 = ptrtoint ptr %reg_read232 to i32
  call void @__asan_store4_noabort(i32 %184)
  store ptr @_regmap_bus_read, ptr %reg_read232, align 4
  %reg_update_bits233 = getelementptr inbounds %struct.regmap_bus, ptr %bus, i32 0, i32 5
  %185 = ptrtoint ptr %reg_update_bits233 to i32
  call void @__asan_load4_noabort(i32 %185)
  %186 = load ptr, ptr %reg_update_bits233, align 4
  %reg_update_bits234 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 40
  %187 = ptrtoint ptr %reg_update_bits234 to i32
  call void @__asan_store4_noabort(i32 %187)
  store ptr %186, ptr %reg_update_bits234, align 4
  %reg_format_endian.i = getelementptr inbounds %struct.regmap_config, ptr %config, i32 0, i32 38
  %188 = ptrtoint ptr %reg_format_endian.i to i32
  call void @__asan_load4_noabort(i32 %188)
  %189 = load i32, ptr %reg_format_endian.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %189)
  %cmp.not.i935 = icmp eq i32 %189, 0
  br i1 %cmp.not.i935, label %if.end4.i, label %if.else231.regmap_get_reg_endian.exit_crit_edge

if.else231.regmap_get_reg_endian.exit_crit_edge:  ; preds = %if.else231
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_get_reg_endian.exit

if.end4.i:                                        ; preds = %if.else231
  call void @__sanitizer_cov_trace_pc() #26
  %reg_format_endian_default.i = getelementptr inbounds %struct.regmap_bus, ptr %bus, i32 0, i32 11
  %190 = ptrtoint ptr %reg_format_endian_default.i to i32
  call void @__asan_load4_noabort(i32 %190)
  %191 = load i32, ptr %reg_format_endian_default.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %191)
  %cmp5.not.i = icmp eq i32 %191, 0
  %spec.select = select i1 %cmp5.not.i, i32 1, i32 %191
  br label %regmap_get_reg_endian.exit

regmap_get_reg_endian.exit:                       ; preds = %if.end4.i, %if.else231.regmap_get_reg_endian.exit_crit_edge
  %retval.0.i = phi i32 [ %189, %if.else231.regmap_get_reg_endian.exit_crit_edge ], [ %spec.select, %if.end4.i ]
  %tobool.not.i937 = icmp eq ptr %dev, null
  br i1 %tobool.not.i937, label %regmap_get_reg_endian.exit.cond.end.i_crit_edge, label %cond.true.i

regmap_get_reg_endian.exit.cond.end.i_crit_edge:  ; preds = %regmap_get_reg_endian.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %cond.end.i

cond.true.i:                                      ; preds = %regmap_get_reg_endian.exit
  call void @__sanitizer_cov_trace_pc() #26
  %call.i938 = tail call ptr @dev_fwnode(ptr noundef nonnull %dev) #24
  br label %cond.end.i

cond.end.i:                                       ; preds = %cond.true.i, %regmap_get_reg_endian.exit.cond.end.i_crit_edge
  %cond.i = phi ptr [ %call.i938, %cond.true.i ], [ null, %regmap_get_reg_endian.exit.cond.end.i_crit_edge ]
  %val_format_endian.i = getelementptr inbounds %struct.regmap_config, ptr %config, i32 0, i32 39
  %192 = ptrtoint ptr %val_format_endian.i to i32
  call void @__asan_load4_noabort(i32 %192)
  %193 = load i32, ptr %val_format_endian.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %193)
  %cmp.not.i939 = icmp eq i32 %193, 0
  br i1 %cmp.not.i939, label %if.end.i940, label %cond.end.i.regmap_get_val_endian.exit_crit_edge

cond.end.i.regmap_get_val_endian.exit_crit_edge:  ; preds = %cond.end.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_get_val_endian.exit

if.end.i940:                                      ; preds = %cond.end.i
  %call.i.i = tail call zeroext i1 @fwnode_property_present(ptr noundef %cond.i, ptr noundef nonnull @.str.1) #24
  br i1 %call.i.i, label %if.end.i940.regmap_get_val_endian.exit_crit_edge, label %if.else.i

if.end.i940.regmap_get_val_endian.exit_crit_edge: ; preds = %if.end.i940
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_get_val_endian.exit

if.else.i:                                        ; preds = %if.end.i940
  %call.i36.i = tail call zeroext i1 @fwnode_property_present(ptr noundef %cond.i, ptr noundef nonnull @.str.2) #24
  br i1 %call.i36.i, label %if.else.i.regmap_get_val_endian.exit_crit_edge, label %if.end10.i

if.else.i.regmap_get_val_endian.exit_crit_edge:   ; preds = %if.else.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_get_val_endian.exit

if.end10.i:                                       ; preds = %if.else.i
  %call.i37.i = tail call zeroext i1 @fwnode_property_present(ptr noundef %cond.i, ptr noundef nonnull @.str.3) #24
  br i1 %call.i37.i, label %if.end10.i.regmap_get_val_endian.exit_crit_edge, label %if.end18.i

if.end10.i.regmap_get_val_endian.exit_crit_edge:  ; preds = %if.end10.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_get_val_endian.exit

if.end18.i:                                       ; preds = %if.end10.i
  call void @__sanitizer_cov_trace_pc() #26
  %val_format_endian_default.i = getelementptr inbounds %struct.regmap_bus, ptr %bus, i32 0, i32 12
  %194 = ptrtoint ptr %val_format_endian_default.i to i32
  call void @__asan_load4_noabort(i32 %194)
  %195 = load i32, ptr %val_format_endian_default.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %195)
  %cmp19.not.i = icmp eq i32 %195, 0
  %spec.select1004 = select i1 %cmp19.not.i, i32 1, i32 %195
  br label %regmap_get_val_endian.exit

regmap_get_val_endian.exit:                       ; preds = %if.end18.i, %if.end10.i.regmap_get_val_endian.exit_crit_edge, %if.else.i.regmap_get_val_endian.exit_crit_edge, %if.end.i940.regmap_get_val_endian.exit_crit_edge, %cond.end.i.regmap_get_val_endian.exit_crit_edge
  %retval.0.i941 = phi i32 [ %193, %cond.end.i.regmap_get_val_endian.exit_crit_edge ], [ 3, %if.end10.i.regmap_get_val_endian.exit_crit_edge ], [ 2, %if.else.i.regmap_get_val_endian.exit_crit_edge ], [ 1, %if.end.i940.regmap_get_val_endian.exit_crit_edge ], [ %spec.select1004, %if.end18.i ]
  %196 = ptrtoint ptr %reg_bits to i32
  call void @__asan_load4_noabort(i32 %196)
  %197 = load i32, ptr %reg_bits, align 4
  %198 = ptrtoint ptr %reg_shift to i32
  call void @__asan_load4_noabort(i32 %198)
  %199 = load i32, ptr %reg_shift, align 4
  %add241 = add i32 %199, %197
  %200 = zext i32 %add241 to i64
  call void @__sanitizer_cov_trace_switch(i64 %200, ptr @__sancov_gen_cov_switch_values.73)
  switch i32 %add241, label %regmap_get_val_endian.exit.err_hwlock_crit_edge [
    i32 2, label %sw.bb242
    i32 4, label %sw.bb248
    i32 7, label %sw.bb255
    i32 10, label %sw.bb265
    i32 12, label %sw.bb272
    i32 8, label %sw.bb279
    i32 16, label %sw.bb281
    i32 24, label %sw.bb293
    i32 32, label %sw.bb300
  ]

regmap_get_val_endian.exit.err_hwlock_crit_edge:  ; preds = %regmap_get_val_endian.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %err_hwlock

sw.bb242:                                         ; preds = %regmap_get_val_endian.exit
  %201 = ptrtoint ptr %val_bits to i32
  call void @__asan_load4_noabort(i32 %201)
  %202 = load i32, ptr %val_bits, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 6, i32 %202)
  %cond594 = icmp eq i32 %202, 6
  br i1 %cond594, label %sw.bb244, label %sw.bb242.err_hwlock_crit_edge

sw.bb242.err_hwlock_crit_edge:                    ; preds = %sw.bb242
  call void @__sanitizer_cov_trace_pc() #26
  br label %err_hwlock

sw.bb244:                                         ; preds = %sw.bb242
  call void @__sanitizer_cov_trace_pc() #26
  %format_write = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 7, i32 4
  %203 = ptrtoint ptr %format_write to i32
  call void @__asan_store4_noabort(i32 %203)
  store ptr @regmap_format_2_6_write, ptr %format_write, align 4
  br label %sw.epilog313

sw.bb248:                                         ; preds = %regmap_get_val_endian.exit
  %204 = ptrtoint ptr %val_bits to i32
  call void @__asan_load4_noabort(i32 %204)
  %205 = load i32, ptr %val_bits, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 12, i32 %205)
  %cond593 = icmp eq i32 %205, 12
  br i1 %cond593, label %sw.bb250, label %sw.bb248.err_hwlock_crit_edge

sw.bb248.err_hwlock_crit_edge:                    ; preds = %sw.bb248
  call void @__sanitizer_cov_trace_pc() #26
  br label %err_hwlock

sw.bb250:                                         ; preds = %sw.bb248
  call void @__sanitizer_cov_trace_pc() #26
  %format_write252 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 7, i32 4
  %206 = ptrtoint ptr %format_write252 to i32
  call void @__asan_store4_noabort(i32 %206)
  store ptr @regmap_format_4_12_write, ptr %format_write252, align 4
  br label %sw.epilog313

sw.bb255:                                         ; preds = %regmap_get_val_endian.exit
  %207 = ptrtoint ptr %val_bits to i32
  call void @__asan_load4_noabort(i32 %207)
  %208 = load i32, ptr %val_bits, align 4
  %209 = zext i32 %208 to i64
  call void @__sanitizer_cov_trace_switch(i64 %209, ptr @__sancov_gen_cov_switch_values.74)
  switch i32 %208, label %sw.bb255.err_hwlock_crit_edge [
    i32 9, label %sw.bb257
    i32 17, label %sw.bb260
  ]

sw.bb255.err_hwlock_crit_edge:                    ; preds = %sw.bb255
  call void @__sanitizer_cov_trace_pc() #26
  br label %err_hwlock

sw.bb257:                                         ; preds = %sw.bb255
  call void @__sanitizer_cov_trace_pc() #26
  %format_write259 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 7, i32 4
  %210 = ptrtoint ptr %format_write259 to i32
  call void @__asan_store4_noabort(i32 %210)
  store ptr @regmap_format_7_9_write, ptr %format_write259, align 4
  br label %sw.epilog313

sw.bb260:                                         ; preds = %sw.bb255
  call void @__sanitizer_cov_trace_pc() #26
  %format_write262 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 7, i32 4
  %211 = ptrtoint ptr %format_write262 to i32
  call void @__asan_store4_noabort(i32 %211)
  store ptr @regmap_format_7_17_write, ptr %format_write262, align 4
  br label %sw.epilog313

sw.bb265:                                         ; preds = %regmap_get_val_endian.exit
  %212 = ptrtoint ptr %val_bits to i32
  call void @__asan_load4_noabort(i32 %212)
  %213 = load i32, ptr %val_bits, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 14, i32 %213)
  %cond592 = icmp eq i32 %213, 14
  br i1 %cond592, label %sw.bb267, label %sw.bb265.err_hwlock_crit_edge

sw.bb265.err_hwlock_crit_edge:                    ; preds = %sw.bb265
  call void @__sanitizer_cov_trace_pc() #26
  br label %err_hwlock

sw.bb267:                                         ; preds = %sw.bb265
  call void @__sanitizer_cov_trace_pc() #26
  %format_write269 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 7, i32 4
  %214 = ptrtoint ptr %format_write269 to i32
  call void @__asan_store4_noabort(i32 %214)
  store ptr @regmap_format_10_14_write, ptr %format_write269, align 4
  br label %sw.epilog313

sw.bb272:                                         ; preds = %regmap_get_val_endian.exit
  %215 = ptrtoint ptr %val_bits to i32
  call void @__asan_load4_noabort(i32 %215)
  %216 = load i32, ptr %val_bits, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 20, i32 %216)
  %cond591 = icmp eq i32 %216, 20
  br i1 %cond591, label %sw.bb274, label %sw.bb272.err_hwlock_crit_edge

sw.bb272.err_hwlock_crit_edge:                    ; preds = %sw.bb272
  call void @__sanitizer_cov_trace_pc() #26
  br label %err_hwlock

sw.bb274:                                         ; preds = %sw.bb272
  call void @__sanitizer_cov_trace_pc() #26
  %format_write276 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 7, i32 4
  %217 = ptrtoint ptr %format_write276 to i32
  call void @__asan_store4_noabort(i32 %217)
  store ptr @regmap_format_12_20_write, ptr %format_write276, align 4
  br label %sw.epilog313

sw.bb279:                                         ; preds = %regmap_get_val_endian.exit
  call void @__sanitizer_cov_trace_pc() #26
  %format_reg = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 7, i32 5
  %218 = ptrtoint ptr %format_reg to i32
  call void @__asan_store4_noabort(i32 %218)
  store ptr @regmap_format_8, ptr %format_reg, align 8
  br label %sw.epilog313

sw.bb281:                                         ; preds = %regmap_get_val_endian.exit
  %219 = zext i32 %retval.0.i to i64
  call void @__sanitizer_cov_trace_switch(i64 %219, ptr @__sancov_gen_cov_switch_values.75)
  switch i32 %retval.0.i, label %sw.bb281.err_hwlock_crit_edge [
    i32 1, label %sw.bb282
    i32 2, label %sw.bb285
    i32 3, label %sw.bb288
  ]

sw.bb281.err_hwlock_crit_edge:                    ; preds = %sw.bb281
  call void @__sanitizer_cov_trace_pc() #26
  br label %err_hwlock

sw.bb282:                                         ; preds = %sw.bb281
  call void @__sanitizer_cov_trace_pc() #26
  %format_reg284 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 7, i32 5
  %220 = ptrtoint ptr %format_reg284 to i32
  call void @__asan_store4_noabort(i32 %220)
  store ptr @regmap_format_16_be, ptr %format_reg284, align 8
  br label %sw.epilog313

sw.bb285:                                         ; preds = %sw.bb281
  call void @__sanitizer_cov_trace_pc() #26
  %format_reg287 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 7, i32 5
  %221 = ptrtoint ptr %format_reg287 to i32
  call void @__asan_store4_noabort(i32 %221)
  store ptr @regmap_format_16_le, ptr %format_reg287, align 8
  br label %sw.epilog313

sw.bb288:                                         ; preds = %sw.bb281
  call void @__sanitizer_cov_trace_pc() #26
  %format_reg290 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 7, i32 5
  %222 = ptrtoint ptr %format_reg290 to i32
  call void @__asan_store4_noabort(i32 %222)
  store ptr @regmap_format_16_native, ptr %format_reg290, align 8
  br label %sw.epilog313

sw.bb293:                                         ; preds = %regmap_get_val_endian.exit
  call void @__sanitizer_cov_trace_const_cmp4(i32 1, i32 %retval.0.i)
  %cmp294.not = icmp eq i32 %retval.0.i, 1
  br i1 %cmp294.not, label %if.end297, label %sw.bb293.err_hwlock_crit_edge

sw.bb293.err_hwlock_crit_edge:                    ; preds = %sw.bb293
  call void @__sanitizer_cov_trace_pc() #26
  br label %err_hwlock

if.end297:                                        ; preds = %sw.bb293
  call void @__sanitizer_cov_trace_pc() #26
  %format_reg299 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 7, i32 5
  %223 = ptrtoint ptr %format_reg299 to i32
  call void @__asan_store4_noabort(i32 %223)
  store ptr @regmap_format_24, ptr %format_reg299, align 8
  br label %sw.epilog313

sw.bb300:                                         ; preds = %regmap_get_val_endian.exit
  %224 = zext i32 %retval.0.i to i64
  call void @__sanitizer_cov_trace_switch(i64 %224, ptr @__sancov_gen_cov_switch_values.76)
  switch i32 %retval.0.i, label %sw.bb300.err_hwlock_crit_edge [
    i32 1, label %sw.bb301
    i32 2, label %sw.bb304
    i32 3, label %sw.bb307
  ]

sw.bb300.err_hwlock_crit_edge:                    ; preds = %sw.bb300
  call void @__sanitizer_cov_trace_pc() #26
  br label %err_hwlock

sw.bb301:                                         ; preds = %sw.bb300
  call void @__sanitizer_cov_trace_pc() #26
  %format_reg303 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 7, i32 5
  %225 = ptrtoint ptr %format_reg303 to i32
  call void @__asan_store4_noabort(i32 %225)
  store ptr @regmap_format_32_be, ptr %format_reg303, align 8
  br label %sw.epilog313

sw.bb304:                                         ; preds = %sw.bb300
  call void @__sanitizer_cov_trace_pc() #26
  %format_reg306 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 7, i32 5
  %226 = ptrtoint ptr %format_reg306 to i32
  call void @__asan_store4_noabort(i32 %226)
  store ptr @regmap_format_32_le, ptr %format_reg306, align 8
  br label %sw.epilog313

sw.bb307:                                         ; preds = %sw.bb300
  call void @__sanitizer_cov_trace_pc() #26
  %format_reg309 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 7, i32 5
  %227 = ptrtoint ptr %format_reg309 to i32
  call void @__asan_store4_noabort(i32 %227)
  store ptr @regmap_format_32_native, ptr %format_reg309, align 8
  br label %sw.epilog313

sw.epilog313:                                     ; preds = %sw.bb307, %sw.bb304, %sw.bb301, %if.end297, %sw.bb288, %sw.bb285, %sw.bb282, %sw.bb279, %sw.bb274, %sw.bb267, %sw.bb260, %sw.bb257, %sw.bb250, %sw.bb244
  call void @__sanitizer_cov_trace_const_cmp4(i32 3, i32 %retval.0.i941)
  %cmp314 = icmp eq i32 %retval.0.i941, 3
  br i1 %cmp314, label %if.then316, label %sw.epilog313.if.end318_crit_edge

sw.epilog313.if.end318_crit_edge:                 ; preds = %sw.epilog313
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end318

if.then316:                                       ; preds = %sw.epilog313
  call void @__sanitizer_cov_trace_pc() #26
  %parse_inplace = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 7, i32 8
  %228 = ptrtoint ptr %parse_inplace to i32
  call void @__asan_store4_noabort(i32 %228)
  store ptr @regmap_parse_inplace_noop, ptr %parse_inplace, align 4
  br label %if.end318

if.end318:                                        ; preds = %if.then316, %sw.epilog313.if.end318_crit_edge
  %229 = ptrtoint ptr %val_bits to i32
  call void @__asan_load4_noabort(i32 %229)
  %230 = load i32, ptr %val_bits, align 4
  %231 = add i32 %230, -8
  %232 = tail call i32 @llvm.fshl.i32(i32 %231, i32 %231, i32 29)
  %233 = zext i32 %232 to i64
  call void @__sanitizer_cov_trace_switch(i64 %233, ptr @__sancov_gen_cov_switch_values.77)
  switch i32 %232, label %if.end318.sw.epilog378_crit_edge [
    i32 0, label %sw.bb320
    i32 1, label %sw.bb325
    i32 2, label %sw.bb347
    i32 3, label %sw.bb356
  ]

if.end318.sw.epilog378_crit_edge:                 ; preds = %if.end318
  call void @__sanitizer_cov_trace_pc() #26
  br label %sw.epilog378

sw.bb320:                                         ; preds = %if.end318
  call void @__sanitizer_cov_trace_pc() #26
  %format_val = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 7, i32 6
  %234 = ptrtoint ptr %format_val to i32
  call void @__asan_store4_noabort(i32 %234)
  store ptr @regmap_format_8, ptr %format_val, align 4
  %parse_val = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 7, i32 7
  %235 = ptrtoint ptr %parse_val to i32
  call void @__asan_store4_noabort(i32 %235)
  store ptr @regmap_parse_8, ptr %parse_val, align 8
  %parse_inplace324 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 7, i32 8
  %236 = ptrtoint ptr %parse_inplace324 to i32
  call void @__asan_store4_noabort(i32 %236)
  store ptr @regmap_parse_inplace_noop, ptr %parse_inplace324, align 4
  br label %sw.epilog378

sw.bb325:                                         ; preds = %if.end318
  %237 = zext i32 %retval.0.i941 to i64
  call void @__sanitizer_cov_trace_switch(i64 %237, ptr @__sancov_gen_cov_switch_values.78)
  switch i32 %retval.0.i941, label %sw.bb325.err_hwlock_crit_edge [
    i32 1, label %sw.bb326
    i32 2, label %sw.bb333
    i32 3, label %sw.bb340
  ]

sw.bb325.err_hwlock_crit_edge:                    ; preds = %sw.bb325
  call void @__sanitizer_cov_trace_pc() #26
  br label %err_hwlock

sw.bb326:                                         ; preds = %sw.bb325
  call void @__sanitizer_cov_trace_pc() #26
  %format_val328 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 7, i32 6
  %238 = ptrtoint ptr %format_val328 to i32
  call void @__asan_store4_noabort(i32 %238)
  store ptr @regmap_format_16_be, ptr %format_val328, align 4
  %parse_val330 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 7, i32 7
  %239 = ptrtoint ptr %parse_val330 to i32
  call void @__asan_store4_noabort(i32 %239)
  store ptr @regmap_parse_16_be, ptr %parse_val330, align 8
  %parse_inplace332 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 7, i32 8
  %240 = ptrtoint ptr %parse_inplace332 to i32
  call void @__asan_store4_noabort(i32 %240)
  store ptr @regmap_parse_16_be_inplace, ptr %parse_inplace332, align 4
  br label %sw.epilog378

sw.bb333:                                         ; preds = %sw.bb325
  call void @__sanitizer_cov_trace_pc() #26
  %format_val335 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 7, i32 6
  %241 = ptrtoint ptr %format_val335 to i32
  call void @__asan_store4_noabort(i32 %241)
  store ptr @regmap_format_16_le, ptr %format_val335, align 4
  %parse_val337 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 7, i32 7
  %242 = ptrtoint ptr %parse_val337 to i32
  call void @__asan_store4_noabort(i32 %242)
  store ptr @regmap_parse_16_le, ptr %parse_val337, align 8
  %parse_inplace339 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 7, i32 8
  %243 = ptrtoint ptr %parse_inplace339 to i32
  call void @__asan_store4_noabort(i32 %243)
  store ptr @regmap_parse_16_le_inplace, ptr %parse_inplace339, align 4
  br label %sw.epilog378

sw.bb340:                                         ; preds = %sw.bb325
  call void @__sanitizer_cov_trace_pc() #26
  %format_val342 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 7, i32 6
  %244 = ptrtoint ptr %format_val342 to i32
  call void @__asan_store4_noabort(i32 %244)
  store ptr @regmap_format_16_native, ptr %format_val342, align 4
  %parse_val344 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 7, i32 7
  %245 = ptrtoint ptr %parse_val344 to i32
  call void @__asan_store4_noabort(i32 %245)
  store ptr @regmap_parse_16_native, ptr %parse_val344, align 8
  br label %sw.epilog378

sw.bb347:                                         ; preds = %if.end318
  call void @__sanitizer_cov_trace_const_cmp4(i32 1, i32 %retval.0.i941)
  %cmp348.not = icmp eq i32 %retval.0.i941, 1
  br i1 %cmp348.not, label %if.end351, label %sw.bb347.err_hwlock_crit_edge

sw.bb347.err_hwlock_crit_edge:                    ; preds = %sw.bb347
  call void @__sanitizer_cov_trace_pc() #26
  br label %err_hwlock

if.end351:                                        ; preds = %sw.bb347
  call void @__sanitizer_cov_trace_pc() #26
  %format_val353 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 7, i32 6
  %246 = ptrtoint ptr %format_val353 to i32
  call void @__asan_store4_noabort(i32 %246)
  store ptr @regmap_format_24, ptr %format_val353, align 4
  %parse_val355 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 7, i32 7
  %247 = ptrtoint ptr %parse_val355 to i32
  call void @__asan_store4_noabort(i32 %247)
  store ptr @regmap_parse_24, ptr %parse_val355, align 8
  br label %sw.epilog378

sw.bb356:                                         ; preds = %if.end318
  %248 = zext i32 %retval.0.i941 to i64
  call void @__sanitizer_cov_trace_switch(i64 %248, ptr @__sancov_gen_cov_switch_values.79)
  switch i32 %retval.0.i941, label %sw.bb356.err_hwlock_crit_edge [
    i32 1, label %sw.bb357
    i32 2, label %sw.bb364
    i32 3, label %sw.bb371
  ]

sw.bb356.err_hwlock_crit_edge:                    ; preds = %sw.bb356
  call void @__sanitizer_cov_trace_pc() #26
  br label %err_hwlock

sw.bb357:                                         ; preds = %sw.bb356
  call void @__sanitizer_cov_trace_pc() #26
  %format_val359 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 7, i32 6
  %249 = ptrtoint ptr %format_val359 to i32
  call void @__asan_store4_noabort(i32 %249)
  store ptr @regmap_format_32_be, ptr %format_val359, align 4
  %parse_val361 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 7, i32 7
  %250 = ptrtoint ptr %parse_val361 to i32
  call void @__asan_store4_noabort(i32 %250)
  store ptr @regmap_parse_32_be, ptr %parse_val361, align 8
  %parse_inplace363 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 7, i32 8
  %251 = ptrtoint ptr %parse_inplace363 to i32
  call void @__asan_store4_noabort(i32 %251)
  store ptr @regmap_parse_32_be_inplace, ptr %parse_inplace363, align 4
  br label %sw.epilog378

sw.bb364:                                         ; preds = %sw.bb356
  call void @__sanitizer_cov_trace_pc() #26
  %format_val366 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 7, i32 6
  %252 = ptrtoint ptr %format_val366 to i32
  call void @__asan_store4_noabort(i32 %252)
  store ptr @regmap_format_32_le, ptr %format_val366, align 4
  %parse_val368 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 7, i32 7
  %253 = ptrtoint ptr %parse_val368 to i32
  call void @__asan_store4_noabort(i32 %253)
  store ptr @regmap_parse_32_le, ptr %parse_val368, align 8
  %parse_inplace370 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 7, i32 8
  %254 = ptrtoint ptr %parse_inplace370 to i32
  call void @__asan_store4_noabort(i32 %254)
  store ptr @regmap_parse_32_le_inplace, ptr %parse_inplace370, align 4
  br label %sw.epilog378

sw.bb371:                                         ; preds = %sw.bb356
  call void @__sanitizer_cov_trace_pc() #26
  %format_val373 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 7, i32 6
  %255 = ptrtoint ptr %format_val373 to i32
  call void @__asan_store4_noabort(i32 %255)
  store ptr @regmap_format_32_native, ptr %format_val373, align 4
  %parse_val375 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 7, i32 7
  %256 = ptrtoint ptr %parse_val375 to i32
  call void @__asan_store4_noabort(i32 %256)
  store ptr @regmap_parse_32_native, ptr %parse_val375, align 8
  br label %sw.epilog378

sw.epilog378:                                     ; preds = %sw.bb371, %sw.bb364, %sw.bb357, %if.end351, %sw.bb340, %sw.bb333, %sw.bb326, %sw.bb320, %if.end318.sw.epilog378_crit_edge
  %format_write380 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 7, i32 4
  %257 = ptrtoint ptr %format_write380 to i32
  call void @__asan_load4_noabort(i32 %257)
  %258 = load ptr, ptr %format_write380, align 4
  %tobool381.not = icmp eq ptr %258, null
  br i1 %tobool381.not, label %sw.epilog378.land.lhs.true395_crit_edge, label %if.then382

sw.epilog378.land.lhs.true395_crit_edge:          ; preds = %sw.epilog378
  call void @__sanitizer_cov_trace_pc() #26
  br label %land.lhs.true395

if.then382:                                       ; preds = %sw.epilog378
  call void @__sanitizer_cov_trace_const_cmp4(i32 1, i32 %retval.0.i)
  %cmp383.not = icmp eq i32 %retval.0.i, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 1, i32 %retval.0.i941)
  %cmp386.not = icmp eq i32 %retval.0.i941, 1
  %or.cond = select i1 %cmp383.not, i1 %cmp386.not, i1 false
  br i1 %or.cond, label %if.end391, label %if.then382.err_hwlock_crit_edge

if.then382.err_hwlock_crit_edge:                  ; preds = %if.then382
  call void @__sanitizer_cov_trace_pc() #26
  br label %err_hwlock

if.end391:                                        ; preds = %if.then382
  %259 = ptrtoint ptr %use_single_write156 to i32
  call void @__asan_store1_noabort(i32 %259)
  store i8 1, ptr %use_single_write156, align 1
  %260 = ptrtoint ptr %format_write380 to i32
  call void @__asan_load4_noabort(i32 %260)
  %.pr = load ptr, ptr %format_write380, align 4
  %tobool394.not = icmp eq ptr %.pr, null
  br i1 %tobool394.not, label %if.end391.land.lhs.true395_crit_edge, label %if.end391.if.end8.i.i_crit_edge

if.end391.if.end8.i.i_crit_edge:                  ; preds = %if.end391
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end8.i.i

if.end391.land.lhs.true395_crit_edge:             ; preds = %if.end391
  call void @__sanitizer_cov_trace_pc() #26
  br label %land.lhs.true395

land.lhs.true395:                                 ; preds = %if.end391.land.lhs.true395_crit_edge, %sw.epilog378.land.lhs.true395_crit_edge
  %format_reg397 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 7, i32 5
  %261 = ptrtoint ptr %format_reg397 to i32
  call void @__asan_load4_noabort(i32 %261)
  %262 = load ptr, ptr %format_reg397, align 8
  %tobool398.not = icmp eq ptr %262, null
  br i1 %tobool398.not, label %land.lhs.true395.err_hwlock_crit_edge, label %land.lhs.true399

land.lhs.true395.err_hwlock_crit_edge:            ; preds = %land.lhs.true395
  call void @__sanitizer_cov_trace_pc() #26
  br label %err_hwlock

land.lhs.true399:                                 ; preds = %land.lhs.true395
  %format_val401 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 7, i32 6
  %263 = ptrtoint ptr %format_val401 to i32
  call void @__asan_load4_noabort(i32 %263)
  %264 = load ptr, ptr %format_val401, align 4
  %tobool402.not = icmp eq ptr %264, null
  br i1 %tobool402.not, label %land.lhs.true399.err_hwlock_crit_edge, label %land.lhs.true399.if.end8.i.i_crit_edge

land.lhs.true399.if.end8.i.i_crit_edge:           ; preds = %land.lhs.true399
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end8.i.i

land.lhs.true399.err_hwlock_crit_edge:            ; preds = %land.lhs.true399
  call void @__sanitizer_cov_trace_pc() #26
  br label %err_hwlock

if.end8.i.i:                                      ; preds = %land.lhs.true399.if.end8.i.i_crit_edge, %if.end391.if.end8.i.i_crit_edge
  %265 = ptrtoint ptr %format to i32
  call void @__asan_load4_noabort(i32 %265)
  %266 = load i32, ptr %format, align 4
  %call9.i.i = tail call noalias align 128 ptr @__kmalloc(i32 noundef %266, i32 noundef 3520) #30
  %work_buf = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 6
  %267 = ptrtoint ptr %work_buf to i32
  call void @__asan_store4_noabort(i32 %267)
  store ptr %call9.i.i, ptr %work_buf, align 8
  %cmp409 = icmp eq ptr %call9.i.i, null
  br i1 %cmp409, label %if.end8.i.i.err_hwlock_crit_edge, label %if.end412

if.end8.i.i.err_hwlock_crit_edge:                 ; preds = %if.end8.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %err_hwlock

if.end412:                                        ; preds = %if.end8.i.i
  %268 = ptrtoint ptr %format_write380 to i32
  call void @__asan_load4_noabort(i32 %268)
  %269 = load ptr, ptr %format_write380, align 4
  %tobool415.not = icmp eq ptr %269, null
  br i1 %tobool415.not, label %if.else419, label %if.then416

if.then416:                                       ; preds = %if.end412
  call void @__sanitizer_cov_trace_pc() #26
  %defer_caching417 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 41
  %270 = ptrtoint ptr %defer_caching417 to i32
  call void @__asan_store1_noabort(i32 %270)
  store i8 0, ptr %defer_caching417, align 8
  %reg_write418 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 39
  %271 = ptrtoint ptr %reg_write418 to i32
  call void @__asan_store4_noabort(i32 %271)
  store ptr @_regmap_bus_formatted_write, ptr %reg_write418, align 8
  br label %skip_format_initialization

if.else419:                                       ; preds = %if.end412
  %format_val421 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 7, i32 6
  %272 = ptrtoint ptr %format_val421 to i32
  call void @__asan_load4_noabort(i32 %272)
  %273 = load ptr, ptr %format_val421, align 4
  %tobool422.not = icmp eq ptr %273, null
  br i1 %tobool422.not, label %if.else419.skip_format_initialization_crit_edge, label %if.then423

if.else419.skip_format_initialization_crit_edge:  ; preds = %if.else419
  call void @__sanitizer_cov_trace_pc() #26
  br label %skip_format_initialization

if.then423:                                       ; preds = %if.else419
  call void @__sanitizer_cov_trace_pc() #26
  %defer_caching424 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 41
  %274 = ptrtoint ptr %defer_caching424 to i32
  call void @__asan_store1_noabort(i32 %274)
  store i8 1, ptr %defer_caching424, align 8
  %reg_write425 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 39
  %275 = ptrtoint ptr %reg_write425 to i32
  call void @__asan_store4_noabort(i32 %275)
  store ptr @_regmap_bus_raw_write, ptr %reg_write425, align 8
  br label %skip_format_initialization

skip_format_initialization:                       ; preds = %if.then423, %if.else419.skip_format_initialization_crit_edge, %if.then416, %if.then225, %if.then215
  %range_tree = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 68
  %276 = ptrtoint ptr %range_tree to i32
  call void @__asan_store4_noabort(i32 %276)
  store ptr null, ptr %range_tree, align 8
  %num_ranges = getelementptr inbounds %struct.regmap_config, ptr %config, i32 0, i32 41
  %277 = ptrtoint ptr %num_ranges to i32
  call void @__asan_load4_noabort(i32 %277)
  %278 = load i32, ptr %num_ranges, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %278)
  %cmp4281042.not = icmp eq i32 %278, 0
  br i1 %cmp4281042.not, label %skip_format_initialization.for.end561_crit_edge, label %for.body.lr.ph

skip_format_initialization.for.end561_crit_edge:  ; preds = %skip_format_initialization
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.end561

for.body.lr.ph:                                   ; preds = %skip_format_initialization
  %ranges = getelementptr inbounds %struct.regmap_config, ptr %config, i32 0, i32 40
  %selector_work_buf = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 69
  br label %for.body

for.body:                                         ; preds = %for.inc559.for.body_crit_edge, %for.body.lr.ph
  %i.01043 = phi i32 [ 0, %for.body.lr.ph ], [ %inc560, %for.inc559.for.body_crit_edge ]
  %279 = ptrtoint ptr %ranges to i32
  call void @__asan_load4_noabort(i32 %279)
  %280 = load ptr, ptr %ranges, align 4
  %arrayidx = getelementptr %struct.regmap_range_cfg, ptr %280, i32 %i.01043
  %range_max = getelementptr %struct.regmap_range_cfg, ptr %280, i32 %i.01043, i32 2
  %281 = ptrtoint ptr %range_max to i32
  call void @__asan_load4_noabort(i32 %281)
  %282 = load i32, ptr %range_max, align 4
  %range_min = getelementptr %struct.regmap_range_cfg, ptr %280, i32 %i.01043, i32 1
  %283 = ptrtoint ptr %range_min to i32
  call void @__asan_load4_noabort(i32 %283)
  %284 = load i32, ptr %range_min, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %282, i32 %284)
  %cmp430 = icmp ult i32 %282, %284
  br i1 %cmp430, label %do.end435, label %if.end439

do.end435:                                        ; preds = %for.body
  call void @__sanitizer_cov_trace_pc() #26
  %285 = ptrtoint ptr %dev171 to i32
  call void @__asan_load4_noabort(i32 %285)
  %286 = load ptr, ptr %dev171, align 4
  tail call void (ptr, ptr, ...) @_dev_err(ptr noundef %286, ptr noundef nonnull @.str.13, i32 noundef %i.01043, i32 noundef %282, i32 noundef %284) #31
  br label %err_range

if.end439:                                        ; preds = %for.body
  %287 = ptrtoint ptr %max_register174 to i32
  call void @__asan_load4_noabort(i32 %287)
  %288 = load i32, ptr %max_register174, align 8
  call void @__sanitizer_cov_trace_cmp4(i32 %282, i32 %288)
  %cmp442 = icmp ugt i32 %282, %288
  br i1 %cmp442, label %do.end447, label %if.end451

do.end447:                                        ; preds = %if.end439
  call void @__sanitizer_cov_trace_pc() #26
  %289 = ptrtoint ptr %dev171 to i32
  call void @__asan_load4_noabort(i32 %289)
  %290 = load ptr, ptr %dev171, align 4
  tail call void (ptr, ptr, ...) @_dev_err(ptr noundef %290, ptr noundef nonnull @.str.19, i32 noundef %i.01043, i32 noundef %282, i32 noundef %288) #31
  br label %err_range

if.end451:                                        ; preds = %if.end439
  %selector_reg = getelementptr %struct.regmap_range_cfg, ptr %280, i32 %i.01043, i32 3
  %291 = ptrtoint ptr %selector_reg to i32
  call void @__asan_load4_noabort(i32 %291)
  %292 = load i32, ptr %selector_reg, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %292, i32 %288)
  %cmp453 = icmp ugt i32 %292, %288
  br i1 %cmp453, label %do.end458, label %if.end460

do.end458:                                        ; preds = %if.end451
  call void @__sanitizer_cov_trace_pc() #26
  %293 = ptrtoint ptr %dev171 to i32
  call void @__asan_load4_noabort(i32 %293)
  %294 = load ptr, ptr %dev171, align 4
  tail call void (ptr, ptr, ...) @_dev_err(ptr noundef %294, ptr noundef nonnull @.str.22, i32 noundef %i.01043) #31
  br label %err_range

if.end460:                                        ; preds = %if.end451
  %window_len = getelementptr %struct.regmap_range_cfg, ptr %280, i32 %i.01043, i32 7
  %295 = ptrtoint ptr %window_len to i32
  call void @__asan_load4_noabort(i32 %295)
  %296 = load i32, ptr %window_len, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %296)
  %cmp461 = icmp eq i32 %296, 0
  br i1 %cmp461, label %do.end466, label %for.cond469.preheader

for.cond469.preheader:                            ; preds = %if.end460
  %297 = ptrtoint ptr %num_ranges to i32
  call void @__asan_load4_noabort(i32 %297)
  %298 = load i32, ptr %num_ranges, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %298)
  %cmp4711039.not = icmp eq i32 %298, 0
  br i1 %cmp4711039.not, label %for.cond469.preheader.for.end_crit_edge, label %for.body473.lr.ph

for.cond469.preheader.for.end_crit_edge:          ; preds = %for.cond469.preheader
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.end

for.body473.lr.ph:                                ; preds = %for.cond469.preheader
  %299 = ptrtoint ptr %ranges to i32
  call void @__asan_load4_noabort(i32 %299)
  %300 = load ptr, ptr %ranges, align 4
  br label %for.body473

do.end466:                                        ; preds = %if.end460
  call void @__sanitizer_cov_trace_pc() #26
  %301 = ptrtoint ptr %dev171 to i32
  call void @__asan_load4_noabort(i32 %301)
  %302 = load ptr, ptr %dev171, align 4
  tail call void (ptr, ptr, ...) @_dev_err(ptr noundef %302, ptr noundef nonnull @.str.25, i32 noundef %i.01043) #31
  br label %err_range

for.body473:                                      ; preds = %for.inc.for.body473_crit_edge, %for.body473.lr.ph
  %j.01040 = phi i32 [ 0, %for.body473.lr.ph ], [ %inc, %for.inc.for.body473_crit_edge ]
  %selector_reg476 = getelementptr %struct.regmap_range_cfg, ptr %300, i32 %j.01040, i32 3
  %303 = ptrtoint ptr %selector_reg476 to i32
  call void @__asan_load4_noabort(i32 %303)
  %304 = load i32, ptr %selector_reg476, align 4
  %window_start = getelementptr %struct.regmap_range_cfg, ptr %300, i32 %j.01040, i32 6
  %305 = ptrtoint ptr %window_start to i32
  call void @__asan_load4_noabort(i32 %305)
  %306 = load i32, ptr %window_start, align 4
  %window_len481 = getelementptr %struct.regmap_range_cfg, ptr %300, i32 %j.01040, i32 7
  %307 = ptrtoint ptr %window_len481 to i32
  call void @__asan_load4_noabort(i32 %307)
  %308 = load i32, ptr %window_len481, align 4
  %add482 = add i32 %306, -1
  %sub483 = add i32 %add482, %308
  call void @__sanitizer_cov_trace_cmp4(i32 %j.01040, i32 %i.01043)
  %cmp484 = icmp eq i32 %j.01040, %i.01043
  br i1 %cmp484, label %for.body473.for.inc_crit_edge, label %if.end487

for.body473.for.inc_crit_edge:                    ; preds = %for.body473
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc

if.end487:                                        ; preds = %for.body473
  %309 = ptrtoint ptr %range_min to i32
  call void @__asan_load4_noabort(i32 %309)
  %310 = load i32, ptr %range_min, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %310, i32 %304)
  %cmp489.not = icmp ugt i32 %310, %304
  br i1 %cmp489.not, label %if.end487.if.end500_crit_edge, label %land.lhs.true491

if.end487.if.end500_crit_edge:                    ; preds = %if.end487
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end500

land.lhs.true491:                                 ; preds = %if.end487
  %311 = ptrtoint ptr %range_max to i32
  call void @__asan_load4_noabort(i32 %311)
  %312 = load i32, ptr %range_max, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %304, i32 %312)
  %cmp493.not = icmp ugt i32 %304, %312
  br i1 %cmp493.not, label %land.lhs.true491.if.end500_crit_edge, label %do.end498

land.lhs.true491.if.end500_crit_edge:             ; preds = %land.lhs.true491
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end500

do.end498:                                        ; preds = %land.lhs.true491
  call void @__sanitizer_cov_trace_pc() #26
  %313 = ptrtoint ptr %dev171 to i32
  call void @__asan_load4_noabort(i32 %313)
  %314 = load ptr, ptr %dev171, align 4
  tail call void (ptr, ptr, ...) @_dev_err(ptr noundef %314, ptr noundef nonnull @.str.28, i32 noundef %i.01043, i32 noundef %j.01040) #31
  br label %err_range

if.end500:                                        ; preds = %land.lhs.true491.if.end500_crit_edge, %if.end487.if.end500_crit_edge
  call void @__sanitizer_cov_trace_cmp4(i32 %sub483, i32 %310)
  %cmp502 = icmp ult i32 %sub483, %310
  br i1 %cmp502, label %if.end500.for.inc_crit_edge, label %lor.lhs.false504

if.end500.for.inc_crit_edge:                      ; preds = %if.end500
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc

lor.lhs.false504:                                 ; preds = %if.end500
  %315 = ptrtoint ptr %range_max to i32
  call void @__asan_load4_noabort(i32 %315)
  %316 = load i32, ptr %range_max, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %306, i32 %316)
  %cmp506 = icmp ugt i32 %306, %316
  br i1 %cmp506, label %lor.lhs.false504.for.inc_crit_edge, label %do.end511

lor.lhs.false504.for.inc_crit_edge:               ; preds = %lor.lhs.false504
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc

do.end511:                                        ; preds = %lor.lhs.false504
  call void @__sanitizer_cov_trace_pc() #26
  %317 = ptrtoint ptr %dev171 to i32
  call void @__asan_load4_noabort(i32 %317)
  %318 = load ptr, ptr %dev171, align 4
  tail call void (ptr, ptr, ...) @_dev_err(ptr noundef %318, ptr noundef nonnull @.str.31, i32 noundef %i.01043, i32 noundef %j.01040) #31
  br label %err_range

for.inc:                                          ; preds = %lor.lhs.false504.for.inc_crit_edge, %if.end500.for.inc_crit_edge, %for.body473.for.inc_crit_edge
  %inc = add nuw i32 %j.01040, 1
  %exitcond.not = icmp eq i32 %inc, %298
  br i1 %exitcond.not, label %for.inc.for.end_crit_edge, label %for.inc.for.body473_crit_edge

for.inc.for.body473_crit_edge:                    ; preds = %for.inc
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body473

for.inc.for.end_crit_edge:                        ; preds = %for.inc
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.end

for.end:                                          ; preds = %for.inc.for.end_crit_edge, %for.cond469.preheader.for.end_crit_edge
  call void @__asan_load4_noabort(i32 ptrtoint (ptr getelementptr inbounds ([4 x [14 x ptr]], ptr @kmalloc_caches, i32 0, i32 0, i32 7) to i32))
  %319 = load ptr, ptr getelementptr inbounds ([4 x [14 x ptr]], ptr @kmalloc_caches, i32 0, i32 0, i32 7), align 4
  %call7.i.i949 = tail call noalias align 8 ptr @kmem_cache_alloc_trace(ptr noundef %319, i32 noundef 3520, i32 noundef 48) #29
  %cmp517 = icmp eq ptr %call7.i.i949, null
  br i1 %cmp517, label %for.end.err_range_crit_edge, label %if.end520

for.end.err_range_crit_edge:                      ; preds = %for.end
  call void @__sanitizer_cov_trace_pc() #26
  br label %err_range

if.end520:                                        ; preds = %for.end
  %map521 = getelementptr inbounds %struct.regmap_range_node, ptr %call7.i.i949, i32 0, i32 2
  %320 = ptrtoint ptr %map521 to i32
  call void @__asan_store4_noabort(i32 %320)
  store ptr %call7.i.i, ptr %map521, align 8
  %321 = ptrtoint ptr %arrayidx to i32
  call void @__asan_load4_noabort(i32 %321)
  %322 = load ptr, ptr %arrayidx, align 4
  %name522 = getelementptr inbounds %struct.regmap_range_node, ptr %call7.i.i949, i32 0, i32 1
  %323 = ptrtoint ptr %name522 to i32
  call void @__asan_store4_noabort(i32 %323)
  store ptr %322, ptr %name522, align 4
  %324 = ptrtoint ptr %range_min to i32
  call void @__asan_load4_noabort(i32 %324)
  %325 = load i32, ptr %range_min, align 4
  %range_min524 = getelementptr inbounds %struct.regmap_range_node, ptr %call7.i.i949, i32 0, i32 3
  %326 = ptrtoint ptr %range_min524 to i32
  call void @__asan_store4_noabort(i32 %326)
  store i32 %325, ptr %range_min524, align 4
  %327 = ptrtoint ptr %range_max to i32
  call void @__asan_load4_noabort(i32 %327)
  %328 = load i32, ptr %range_max, align 4
  %range_max526 = getelementptr inbounds %struct.regmap_range_node, ptr %call7.i.i949, i32 0, i32 4
  %329 = ptrtoint ptr %range_max526 to i32
  call void @__asan_store4_noabort(i32 %329)
  store i32 %328, ptr %range_max526, align 8
  %330 = ptrtoint ptr %selector_reg to i32
  call void @__asan_load4_noabort(i32 %330)
  %331 = load i32, ptr %selector_reg, align 4
  %selector_reg528 = getelementptr inbounds %struct.regmap_range_node, ptr %call7.i.i949, i32 0, i32 5
  %332 = ptrtoint ptr %selector_reg528 to i32
  call void @__asan_store4_noabort(i32 %332)
  store i32 %331, ptr %selector_reg528, align 4
  %selector_mask = getelementptr %struct.regmap_range_cfg, ptr %280, i32 %i.01043, i32 4
  %333 = ptrtoint ptr %selector_mask to i32
  call void @__asan_load4_noabort(i32 %333)
  %334 = load i32, ptr %selector_mask, align 4
  %selector_mask529 = getelementptr inbounds %struct.regmap_range_node, ptr %call7.i.i949, i32 0, i32 6
  %335 = ptrtoint ptr %selector_mask529 to i32
  call void @__asan_store4_noabort(i32 %335)
  store i32 %334, ptr %selector_mask529, align 8
  %selector_shift = getelementptr %struct.regmap_range_cfg, ptr %280, i32 %i.01043, i32 5
  %336 = ptrtoint ptr %selector_shift to i32
  call void @__asan_load4_noabort(i32 %336)
  %337 = load i32, ptr %selector_shift, align 4
  %selector_shift530 = getelementptr inbounds %struct.regmap_range_node, ptr %call7.i.i949, i32 0, i32 7
  %338 = ptrtoint ptr %selector_shift530 to i32
  call void @__asan_store4_noabort(i32 %338)
  store i32 %337, ptr %selector_shift530, align 4
  %window_start531 = getelementptr %struct.regmap_range_cfg, ptr %280, i32 %i.01043, i32 6
  %339 = ptrtoint ptr %window_start531 to i32
  call void @__asan_load4_noabort(i32 %339)
  %340 = load i32, ptr %window_start531, align 4
  %window_start532 = getelementptr inbounds %struct.regmap_range_node, ptr %call7.i.i949, i32 0, i32 8
  %341 = ptrtoint ptr %window_start532 to i32
  call void @__asan_store4_noabort(i32 %341)
  store i32 %340, ptr %window_start532, align 8
  %342 = ptrtoint ptr %window_len to i32
  call void @__asan_load4_noabort(i32 %342)
  %343 = load i32, ptr %window_len, align 4
  %window_len534 = getelementptr inbounds %struct.regmap_range_node, ptr %call7.i.i949, i32 0, i32 9
  %344 = ptrtoint ptr %window_len534 to i32
  call void @__asan_store4_noabort(i32 %344)
  store i32 %343, ptr %window_len534, align 4
  %345 = ptrtoint ptr %range_tree to i32
  call void @__asan_load4_noabort(i32 %345)
  %346 = load ptr, ptr %range_tree, align 8
  %tobool.not26.i = icmp eq ptr %346, null
  br i1 %tobool.not26.i, label %if.end520.if.end541_crit_edge, label %if.end520.while.body.i_crit_edge

if.end520.while.body.i_crit_edge:                 ; preds = %if.end520
  br label %while.body.i

if.end520.if.end541_crit_edge:                    ; preds = %if.end520
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end541

while.body.i:                                     ; preds = %while.cond.backedge.i.while.body.i_crit_edge, %if.end520.while.body.i_crit_edge
  %347 = phi ptr [ %353, %while.cond.backedge.i.while.body.i_crit_edge ], [ %346, %if.end520.while.body.i_crit_edge ]
  %range_min.i = getelementptr inbounds %struct.regmap_range_node, ptr %347, i32 0, i32 3
  %348 = ptrtoint ptr %range_min.i to i32
  call void @__asan_load4_noabort(i32 %348)
  %349 = load i32, ptr %range_min.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %328, i32 %349)
  %cmp.i = icmp ult i32 %328, %349
  br i1 %cmp.i, label %if.then.i951, label %cleanup.i

if.then.i951:                                     ; preds = %while.body.i
  call void @__sanitizer_cov_trace_pc() #26
  %rb_left.i = getelementptr inbounds %struct.rb_node, ptr %347, i32 0, i32 2
  br label %while.cond.backedge.i

cleanup.i:                                        ; preds = %while.body.i
  %range_max2.i = getelementptr inbounds %struct.regmap_range_node, ptr %347, i32 0, i32 4
  %350 = ptrtoint ptr %range_max2.i to i32
  call void @__asan_load4_noabort(i32 %350)
  %351 = load i32, ptr %range_max2.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %325, i32 %351)
  %cmp3.i = icmp ugt i32 %325, %351
  %rb_right.i = getelementptr inbounds %struct.rb_node, ptr %347, i32 0, i32 1
  br i1 %cmp3.i, label %cleanup.i.while.cond.backedge.i_crit_edge, label %do.end539

cleanup.i.while.cond.backedge.i_crit_edge:        ; preds = %cleanup.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %while.cond.backedge.i

while.cond.backedge.i:                            ; preds = %cleanup.i.while.cond.backedge.i_crit_edge, %if.then.i951
  %new.0.be.i = phi ptr [ %rb_right.i, %cleanup.i.while.cond.backedge.i_crit_edge ], [ %rb_left.i, %if.then.i951 ]
  %352 = ptrtoint ptr %new.0.be.i to i32
  call void @__asan_load4_noabort(i32 %352)
  %353 = load ptr, ptr %new.0.be.i, align 4
  %tobool.not.i952 = icmp eq ptr %353, null
  br i1 %tobool.not.i952, label %while.cond.backedge.i.if.end541_crit_edge, label %while.cond.backedge.i.while.body.i_crit_edge

while.cond.backedge.i.while.body.i_crit_edge:     ; preds = %while.cond.backedge.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %while.body.i

while.cond.backedge.i.if.end541_crit_edge:        ; preds = %while.cond.backedge.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end541

do.end539:                                        ; preds = %cleanup.i
  call void @__sanitizer_cov_trace_pc() #26
  %354 = ptrtoint ptr %dev171 to i32
  call void @__asan_load4_noabort(i32 %354)
  %355 = load ptr, ptr %dev171, align 4
  tail call void (ptr, ptr, ...) @_dev_err(ptr noundef %355, ptr noundef nonnull @.str.34, i32 noundef %i.01043) #31
  tail call void @kfree(ptr noundef nonnull %call7.i.i949) #24
  br label %err_range

if.end541:                                        ; preds = %while.cond.backedge.i.if.end541_crit_edge, %if.end520.if.end541_crit_edge
  %new.0.lcssa.i = phi ptr [ %range_tree, %if.end520.if.end541_crit_edge ], [ %new.0.be.i, %while.cond.backedge.i.if.end541_crit_edge ]
  %parent.0.lcssa.i = phi ptr [ null, %if.end520.if.end541_crit_edge ], [ %347, %while.cond.backedge.i.if.end541_crit_edge ]
  %356 = ptrtoint ptr %parent.0.lcssa.i to i32
  %357 = ptrtoint ptr %call7.i.i949 to i32
  call void @__asan_store4_noabort(i32 %357)
  store i32 %356, ptr %call7.i.i949, align 8
  %rb_right.i.i = getelementptr inbounds %struct.rb_node, ptr %call7.i.i949, i32 0, i32 1
  %358 = ptrtoint ptr %rb_right.i.i to i32
  call void @__asan_store4_noabort(i32 %358)
  store ptr null, ptr %rb_right.i.i, align 4
  %rb_left.i.i = getelementptr inbounds %struct.rb_node, ptr %call7.i.i949, i32 0, i32 2
  %359 = ptrtoint ptr %rb_left.i.i to i32
  call void @__asan_store4_noabort(i32 %359)
  store ptr null, ptr %rb_left.i.i, align 8
  %360 = ptrtoint ptr %new.0.lcssa.i to i32
  call void @__asan_store4_noabort(i32 %360)
  store ptr %call7.i.i949, ptr %new.0.lcssa.i, align 4
  tail call void @rb_insert_color(ptr noundef nonnull %call7.i.i949, ptr noundef %range_tree) #24
  %361 = ptrtoint ptr %selector_work_buf to i32
  call void @__asan_load4_noabort(i32 %361)
  %362 = load ptr, ptr %selector_work_buf, align 4
  %cmp542 = icmp eq ptr %362, null
  br i1 %cmp542, label %if.end8.i.i982, label %if.end541.for.inc559_crit_edge

if.end541.for.inc559_crit_edge:                   ; preds = %if.end541
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc559

if.end8.i.i982:                                   ; preds = %if.end541
  %363 = ptrtoint ptr %format to i32
  call void @__asan_load4_noabort(i32 %363)
  %364 = load i32, ptr %format, align 4
  %call9.i.i981 = tail call noalias align 128 ptr @__kmalloc(i32 noundef %364, i32 noundef 3520) #30
  %365 = ptrtoint ptr %selector_work_buf to i32
  call void @__asan_store4_noabort(i32 %365)
  store ptr %call9.i.i981, ptr %selector_work_buf, align 4
  %cmp550 = icmp eq ptr %call9.i.i981, null
  br i1 %cmp550, label %if.end8.i.i982.err_range_crit_edge, label %if.end8.i.i982.for.inc559_crit_edge

if.end8.i.i982.for.inc559_crit_edge:              ; preds = %if.end8.i.i982
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc559

if.end8.i.i982.err_range_crit_edge:               ; preds = %if.end8.i.i982
  call void @__sanitizer_cov_trace_pc() #26
  br label %err_range

for.inc559:                                       ; preds = %if.end8.i.i982.for.inc559_crit_edge, %if.end541.for.inc559_crit_edge
  %inc560 = add nuw i32 %i.01043, 1
  %366 = ptrtoint ptr %num_ranges to i32
  call void @__asan_load4_noabort(i32 %366)
  %367 = load i32, ptr %num_ranges, align 4
  %cmp428 = icmp ult i32 %inc560, %367
  br i1 %cmp428, label %for.inc559.for.body_crit_edge, label %for.inc559.for.end561_crit_edge

for.inc559.for.end561_crit_edge:                  ; preds = %for.inc559
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.end561

for.inc559.for.body_crit_edge:                    ; preds = %for.inc559
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body

for.end561:                                       ; preds = %for.inc559.for.end561_crit_edge, %skip_format_initialization.for.end561_crit_edge
  %call562 = tail call i32 @regcache_init(ptr noundef nonnull %call7.i.i, ptr noundef %config) #24
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call562)
  %cmp563.not = icmp eq i32 %call562, 0
  br i1 %cmp563.not, label %if.end566, label %for.end561.err_range_crit_edge

for.end561.err_range_crit_edge:                   ; preds = %for.end561
  call void @__sanitizer_cov_trace_pc() #26
  br label %err_range

if.end566:                                        ; preds = %for.end561
  %tobool567.not = icmp eq ptr %dev, null
  br i1 %tobool567.not, label %if.else574, label %if.then568

if.then568:                                       ; preds = %if.end566
  %call569 = tail call i32 @regmap_attach_dev(ptr noundef nonnull %dev, ptr noundef nonnull %call7.i.i, ptr noundef %config)
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call569)
  %cmp570.not = icmp eq i32 %call569, 0
  br i1 %cmp570.not, label %if.then568.cleanup585_crit_edge, label %err_regcache

if.then568.cleanup585_crit_edge:                  ; preds = %if.then568
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup585

if.else574:                                       ; preds = %if.end566
  call void @__sanitizer_cov_trace_pc() #26
  tail call void @regmap_debugfs_init(ptr noundef nonnull %call7.i.i) #24
  br label %cleanup585

err_regcache:                                     ; preds = %if.then568
  call void @__sanitizer_cov_trace_pc() #26
  tail call void @regcache_exit(ptr noundef nonnull %call7.i.i) #24
  br label %err_range

err_range:                                        ; preds = %err_regcache, %for.end561.err_range_crit_edge, %if.end8.i.i982.err_range_crit_edge, %do.end539, %for.end.err_range_crit_edge, %do.end511, %do.end498, %do.end466, %do.end458, %do.end447, %do.end435
  %ret.2 = phi i32 [ %call562, %for.end561.err_range_crit_edge ], [ %call569, %err_regcache ], [ -22, %do.end498 ], [ -22, %do.end511 ], [ -22, %do.end539 ], [ -22, %do.end466 ], [ -22, %do.end458 ], [ -22, %do.end447 ], [ -22, %do.end435 ], [ -12, %for.end.err_range_crit_edge ], [ -12, %if.end8.i.i982.err_range_crit_edge ]
  %call.i986 = tail call ptr @rb_first(ptr noundef %range_tree) #24
  %tobool.not9.i = icmp eq ptr %call.i986, null
  br i1 %tobool.not9.i, label %err_range.regmap_range_exit.exit_crit_edge, label %err_range.while.body.i988_crit_edge

err_range.while.body.i988_crit_edge:              ; preds = %err_range
  br label %while.body.i988

err_range.regmap_range_exit.exit_crit_edge:       ; preds = %err_range
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_range_exit.exit

while.body.i988:                                  ; preds = %while.body.i988.while.body.i988_crit_edge, %err_range.while.body.i988_crit_edge
  %next.010.i = phi ptr [ %call1.i, %while.body.i988.while.body.i988_crit_edge ], [ %call.i986, %err_range.while.body.i988_crit_edge ]
  %call1.i = tail call ptr @rb_next(ptr noundef nonnull %next.010.i) #24
  tail call void @rb_erase(ptr noundef nonnull %next.010.i, ptr noundef %range_tree) #24
  tail call void @kfree(ptr noundef nonnull %next.010.i) #24
  %tobool.not.i987 = icmp eq ptr %call1.i, null
  br i1 %tobool.not.i987, label %while.body.i988.regmap_range_exit.exit_crit_edge, label %while.body.i988.while.body.i988_crit_edge

while.body.i988.while.body.i988_crit_edge:        ; preds = %while.body.i988
  call void @__sanitizer_cov_trace_pc() #26
  br label %while.body.i988

while.body.i988.regmap_range_exit.exit_crit_edge: ; preds = %while.body.i988
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_range_exit.exit

regmap_range_exit.exit:                           ; preds = %while.body.i988.regmap_range_exit.exit_crit_edge, %err_range.regmap_range_exit.exit_crit_edge
  %selector_work_buf.i = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 69
  %368 = ptrtoint ptr %selector_work_buf.i to i32
  call void @__asan_load4_noabort(i32 %368)
  %369 = load ptr, ptr %selector_work_buf.i, align 4
  tail call void @kfree(ptr noundef %369) #24
  %work_buf576 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 6
  %370 = ptrtoint ptr %work_buf576 to i32
  call void @__asan_load4_noabort(i32 %370)
  %371 = load ptr, ptr %work_buf576, align 8
  tail call void @kfree(ptr noundef %371) #24
  br label %err_hwlock

err_hwlock:                                       ; preds = %regmap_range_exit.exit, %if.end8.i.i.err_hwlock_crit_edge, %land.lhs.true399.err_hwlock_crit_edge, %land.lhs.true395.err_hwlock_crit_edge, %if.then382.err_hwlock_crit_edge, %sw.bb356.err_hwlock_crit_edge, %sw.bb347.err_hwlock_crit_edge, %sw.bb325.err_hwlock_crit_edge, %sw.bb300.err_hwlock_crit_edge, %sw.bb293.err_hwlock_crit_edge, %sw.bb281.err_hwlock_crit_edge, %sw.bb272.err_hwlock_crit_edge, %sw.bb265.err_hwlock_crit_edge, %sw.bb255.err_hwlock_crit_edge, %sw.bb248.err_hwlock_crit_edge, %sw.bb242.err_hwlock_crit_edge, %regmap_get_val_endian.exit.err_hwlock_crit_edge
  %ret.3 = phi i32 [ -22, %regmap_get_val_endian.exit.err_hwlock_crit_edge ], [ -22, %sw.bb300.err_hwlock_crit_edge ], [ -22, %if.then382.err_hwlock_crit_edge ], [ %ret.2, %regmap_range_exit.exit ], [ -22, %land.lhs.true399.err_hwlock_crit_edge ], [ -22, %land.lhs.true395.err_hwlock_crit_edge ], [ -22, %sw.bb356.err_hwlock_crit_edge ], [ -22, %sw.bb347.err_hwlock_crit_edge ], [ -22, %sw.bb325.err_hwlock_crit_edge ], [ -22, %sw.bb293.err_hwlock_crit_edge ], [ -22, %sw.bb281.err_hwlock_crit_edge ], [ -22, %sw.bb272.err_hwlock_crit_edge ], [ -22, %sw.bb265.err_hwlock_crit_edge ], [ -22, %sw.bb255.err_hwlock_crit_edge ], [ -22, %sw.bb248.err_hwlock_crit_edge ], [ -22, %sw.bb242.err_hwlock_crit_edge ], [ -12, %if.end8.i.i.err_hwlock_crit_edge ]
  %hwlock577 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 70
  %372 = ptrtoint ptr %hwlock577 to i32
  call void @__asan_load4_noabort(i32 %372)
  %373 = load ptr, ptr %hwlock577, align 8
  %tobool578.not = icmp eq ptr %373, null
  br i1 %tobool578.not, label %err_hwlock.err_name_crit_edge, label %if.then579

err_hwlock.err_name_crit_edge:                    ; preds = %err_hwlock
  call void @__sanitizer_cov_trace_pc() #26
  br label %err_name

if.then579:                                       ; preds = %err_hwlock
  call void @__sanitizer_cov_trace_pc() #26
  %call581 = tail call i32 @hwspin_lock_free(ptr noundef nonnull %373) #24
  br label %err_name

err_name:                                         ; preds = %if.then579, %err_hwlock.err_name_crit_edge, %if.then27.err_name_crit_edge
  %ret.4 = phi i32 [ %ret.3, %if.then579 ], [ %ret.3, %err_hwlock.err_name_crit_edge ], [ -6, %if.then27.err_name_crit_edge ]
  %name583 = getelementptr inbounds %struct.regmap, ptr %call7.i.i, i32 0, i32 10
  %374 = ptrtoint ptr %name583 to i32
  call void @__asan_load4_noabort(i32 %374)
  %375 = load ptr, ptr %name583, align 8
  tail call void @kfree_const(ptr noundef %375) #24
  br label %err_map

err_map:                                          ; preds = %err_name, %if.then.i.err_map_crit_edge
  %ret.5 = phi i32 [ %ret.4, %err_name ], [ -12, %if.then.i.err_map_crit_edge ]
  tail call void @kfree(ptr noundef nonnull %call7.i.i) #24
  br label %err

err:                                              ; preds = %err_map, %if.end.err_crit_edge, %entry.err_crit_edge
  %ret.6 = phi i32 [ %ret.5, %err_map ], [ -22, %entry.err_crit_edge ], [ -12, %if.end.err_crit_edge ]
  %376 = inttoptr i32 %ret.6 to ptr
  br label %cleanup585

cleanup585:                                       ; preds = %err, %if.else574, %if.then568.cleanup585_crit_edge
  %retval.0 = phi ptr [ %376, %err ], [ %call7.i.i, %if.then568.cleanup585_crit_edge ], [ %call7.i.i, %if.else574 ]
  ret ptr %retval.0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind null_pointer_is_valid readnone sanitize_address sspstrong willreturn uwtable(sync)
define internal void @regmap_lock_unlock_none(ptr nocapture noundef %__map) #4 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  ret void
}

; Function Attrs: null_pointer_is_valid
declare dso_local ptr @hwspin_lock_request_specific(i32 noundef) local_unnamed_addr #2

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal void @regmap_lock_hwlock_irqsave(ptr noundef %__map) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %hwlock = getelementptr inbounds %struct.regmap, ptr %__map, i32 0, i32 70
  %0 = ptrtoint ptr %hwlock to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %hwlock, align 4
  %spinlock_flags = getelementptr inbounds %struct.anon, ptr %__map, i32 0, i32 1
  %call.i = tail call i32 @__hwspin_lock_timeout(ptr noundef %1, i32 noundef -1, i32 noundef 1, ptr noundef %spinlock_flags) #24
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal void @regmap_unlock_hwlock_irqrestore(ptr noundef %__map) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %hwlock = getelementptr inbounds %struct.regmap, ptr %__map, i32 0, i32 70
  %0 = ptrtoint ptr %hwlock to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %hwlock, align 4
  %spinlock_flags = getelementptr inbounds %struct.anon, ptr %__map, i32 0, i32 1
  tail call void @__hwspin_unlock(ptr noundef %1, i32 noundef 1, ptr noundef %spinlock_flags) #24
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal void @regmap_lock_hwlock_irq(ptr nocapture noundef readonly %__map) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %hwlock = getelementptr inbounds %struct.regmap, ptr %__map, i32 0, i32 70
  %0 = ptrtoint ptr %hwlock to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %hwlock, align 4
  %call.i = tail call i32 @__hwspin_lock_timeout(ptr noundef %1, i32 noundef -1, i32 noundef 2, ptr noundef null) #24
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal void @regmap_unlock_hwlock_irq(ptr nocapture noundef readonly %__map) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %hwlock = getelementptr inbounds %struct.regmap, ptr %__map, i32 0, i32 70
  %0 = ptrtoint ptr %hwlock to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %hwlock, align 4
  tail call void @__hwspin_unlock(ptr noundef %1, i32 noundef 2, ptr noundef null) #24
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal void @regmap_lock_hwlock(ptr nocapture noundef readonly %__map) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %hwlock = getelementptr inbounds %struct.regmap, ptr %__map, i32 0, i32 70
  %0 = ptrtoint ptr %hwlock to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %hwlock, align 4
  %call.i = tail call i32 @__hwspin_lock_timeout(ptr noundef %1, i32 noundef -1, i32 noundef 0, ptr noundef null) #24
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal void @regmap_unlock_hwlock(ptr nocapture noundef readonly %__map) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %hwlock = getelementptr inbounds %struct.regmap, ptr %__map, i32 0, i32 70
  %0 = ptrtoint ptr %hwlock to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %hwlock, align 4
  tail call void @__hwspin_unlock(ptr noundef %1, i32 noundef 0, ptr noundef null) #24
  ret void
}

; Function Attrs: null_pointer_is_valid
declare dso_local void @__raw_spin_lock_init(ptr noundef, ptr noundef, ptr noundef, i16 noundef signext) local_unnamed_addr #2

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal void @regmap_lock_raw_spinlock(ptr noundef %__map) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %call = tail call i32 @_raw_spin_lock_irqsave(ptr noundef %__map) #24
  %raw_spinlock_flags = getelementptr inbounds %struct.anon.5, ptr %__map, i32 0, i32 1
  %0 = ptrtoint ptr %raw_spinlock_flags to i32
  call void @__asan_store4_noabort(i32 %0)
  store i32 %call, ptr %raw_spinlock_flags, align 4
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal void @regmap_unlock_raw_spinlock(ptr noundef %__map) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %raw_spinlock_flags = getelementptr inbounds %struct.anon.5, ptr %__map, i32 0, i32 1
  %0 = ptrtoint ptr %raw_spinlock_flags to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load i32, ptr %raw_spinlock_flags, align 4
  tail call void @_raw_spin_unlock_irqrestore(ptr noundef %__map, i32 noundef %1) #24
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal void @regmap_lock_spinlock(ptr noundef %__map) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %call2 = tail call i32 @_raw_spin_lock_irqsave(ptr noundef %__map) #24
  %spinlock_flags = getelementptr inbounds %struct.anon, ptr %__map, i32 0, i32 1
  %0 = ptrtoint ptr %spinlock_flags to i32
  call void @__asan_store4_noabort(i32 %0)
  store i32 %call2, ptr %spinlock_flags, align 4
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal void @regmap_unlock_spinlock(ptr noundef %__map) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %spinlock_flags = getelementptr inbounds %struct.anon, ptr %__map, i32 0, i32 1
  %0 = ptrtoint ptr %spinlock_flags to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load i32, ptr %spinlock_flags, align 4
  tail call void @_raw_spin_unlock_irqrestore(ptr noundef %__map, i32 noundef %1) #24
  ret void
}

; Function Attrs: null_pointer_is_valid
declare dso_local void @__mutex_init(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #2

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal void @regmap_lock_mutex(ptr noundef %__map) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  tail call void @mutex_lock_nested(ptr noundef %__map, i32 noundef 0) #24
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal void @regmap_unlock_mutex(ptr noundef %__map) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  tail call void @mutex_unlock(ptr noundef %__map) #24
  ret void
}

; Function Attrs: null_pointer_is_valid
declare dso_local void @__init_waitqueue_head(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #2

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal i32 @_regmap_bus_reg_read(ptr nocapture noundef readonly %context, i32 noundef %reg, ptr noundef %val) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %bus = getelementptr inbounds %struct.regmap, ptr %context, i32 0, i32 8
  %0 = ptrtoint ptr %bus to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %bus, align 4
  %reg_read = getelementptr inbounds %struct.regmap_bus, ptr %1, i32 0, i32 7
  %2 = ptrtoint ptr %reg_read to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load ptr, ptr %reg_read, align 4
  %bus_context = getelementptr inbounds %struct.regmap, ptr %context, i32 0, i32 9
  %4 = ptrtoint ptr %bus_context to i32
  call void @__asan_load4_noabort(i32 %4)
  %5 = load ptr, ptr %bus_context, align 4
  %call = tail call i32 %3(ptr noundef %5, i32 noundef %reg, ptr noundef %val) #24
  ret i32 %call
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal i32 @_regmap_bus_reg_write(ptr nocapture noundef readonly %context, i32 noundef %reg, i32 noundef %val) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %bus = getelementptr inbounds %struct.regmap, ptr %context, i32 0, i32 8
  %0 = ptrtoint ptr %bus to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %bus, align 4
  %reg_write = getelementptr inbounds %struct.regmap_bus, ptr %1, i32 0, i32 4
  %2 = ptrtoint ptr %reg_write to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load ptr, ptr %reg_write, align 4
  %bus_context = getelementptr inbounds %struct.regmap, ptr %context, i32 0, i32 9
  %4 = ptrtoint ptr %bus_context to i32
  call void @__asan_load4_noabort(i32 %4)
  %5 = load ptr, ptr %bus_context, align 4
  %call = tail call i32 %3(ptr noundef %5, i32 noundef %reg, i32 noundef %val) #24
  ret i32 %call
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal i32 @_regmap_bus_read(ptr noundef %context, i32 noundef %reg, ptr nocapture noundef writeonly %val) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %work_buf = getelementptr inbounds %struct.regmap, ptr %context, i32 0, i32 6
  %0 = ptrtoint ptr %work_buf to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %work_buf, align 4
  %reg_bytes = getelementptr inbounds %struct.regmap, ptr %context, i32 0, i32 7, i32 1
  %2 = ptrtoint ptr %reg_bytes to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load i32, ptr %reg_bytes, align 4
  %add.ptr = getelementptr i8, ptr %1, i32 %3
  %pad_bytes = getelementptr inbounds %struct.regmap, ptr %context, i32 0, i32 7, i32 2
  %4 = ptrtoint ptr %pad_bytes to i32
  call void @__asan_load4_noabort(i32 %4)
  %5 = load i32, ptr %pad_bytes, align 4
  %add.ptr2 = getelementptr i8, ptr %add.ptr, i32 %5
  %parse_val = getelementptr inbounds %struct.regmap, ptr %context, i32 0, i32 7, i32 7
  %6 = ptrtoint ptr %parse_val to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load ptr, ptr %parse_val, align 4
  %tobool.not = icmp eq ptr %7, null
  br i1 %tobool.not, label %entry.cleanup_crit_edge, label %if.end

entry.cleanup_crit_edge:                          ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end:                                           ; preds = %entry
  %val_bytes = getelementptr inbounds %struct.regmap, ptr %context, i32 0, i32 7, i32 3
  %8 = ptrtoint ptr %val_bytes to i32
  call void @__asan_load4_noabort(i32 %8)
  %9 = load i32, ptr %val_bytes, align 4
  %call = tail call fastcc i32 @_regmap_raw_read(ptr noundef %context, i32 noundef %reg, ptr noundef %add.ptr2, i32 noundef %9, i1 noundef zeroext false)
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call)
  %cmp = icmp eq i32 %call, 0
  br i1 %cmp, label %if.then5, label %if.end.cleanup_crit_edge

if.end.cleanup_crit_edge:                         ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.then5:                                         ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #26
  %10 = ptrtoint ptr %parse_val to i32
  call void @__asan_load4_noabort(i32 %10)
  %11 = load ptr, ptr %parse_val, align 4
  %call8 = tail call i32 %11(ptr noundef %add.ptr2) #24
  %12 = ptrtoint ptr %val to i32
  call void @__asan_store4_noabort(i32 %12)
  store i32 %call8, ptr %val, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.then5, %if.end.cleanup_crit_edge, %entry.cleanup_crit_edge
  %retval.0 = phi i32 [ -22, %entry.cleanup_crit_edge ], [ 0, %if.then5 ], [ %call, %if.end.cleanup_crit_edge ]
  ret i32 %retval.0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind null_pointer_is_valid sanitize_address sspstrong willreturn uwtable(sync)
define internal void @regmap_format_2_6_write(ptr nocapture noundef readonly %map, i32 noundef %reg, i32 noundef %val) #5 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %work_buf = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 6
  %0 = ptrtoint ptr %work_buf to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %work_buf, align 4
  %shl = shl i32 %reg, 6
  %or = or i32 %shl, %val
  %conv = trunc i32 %or to i8
  %2 = ptrtoint ptr %1 to i32
  call void @__asan_store1_noabort(i32 %2)
  store i8 %conv, ptr %1, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind null_pointer_is_valid sanitize_address sspstrong willreturn uwtable(sync)
define internal void @regmap_format_4_12_write(ptr nocapture noundef readonly %map, i32 noundef %reg, i32 noundef %val) #5 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %work_buf = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 6
  %0 = ptrtoint ptr %work_buf to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %work_buf, align 4
  %shl = shl i32 %reg, 12
  %or = or i32 %shl, %val
  %conv = trunc i32 %or to i16
  %2 = ptrtoint ptr %1 to i32
  call void @__asan_store2_noabort(i32 %2)
  store i16 %conv, ptr %1, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind null_pointer_is_valid sanitize_address sspstrong willreturn uwtable(sync)
define internal void @regmap_format_7_9_write(ptr nocapture noundef readonly %map, i32 noundef %reg, i32 noundef %val) #5 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %work_buf = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 6
  %0 = ptrtoint ptr %work_buf to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %work_buf, align 4
  %shl = shl i32 %reg, 9
  %or = or i32 %shl, %val
  %conv = trunc i32 %or to i16
  %2 = ptrtoint ptr %1 to i32
  call void @__asan_store2_noabort(i32 %2)
  store i16 %conv, ptr %1, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind null_pointer_is_valid sanitize_address sspstrong willreturn uwtable(sync)
define internal void @regmap_format_7_17_write(ptr nocapture noundef readonly %map, i32 noundef %reg, i32 noundef %val) #5 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %work_buf = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 6
  %0 = ptrtoint ptr %work_buf to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %work_buf, align 4
  %conv = trunc i32 %val to i8
  %arrayidx = getelementptr i8, ptr %1, i32 2
  %2 = ptrtoint ptr %arrayidx to i32
  call void @__asan_store1_noabort(i32 %2)
  store i8 %conv, ptr %arrayidx, align 1
  %shr = lshr i32 %val, 8
  %conv1 = trunc i32 %shr to i8
  %arrayidx2 = getelementptr i8, ptr %1, i32 1
  %3 = ptrtoint ptr %arrayidx2 to i32
  call void @__asan_store1_noabort(i32 %3)
  store i8 %conv1, ptr %arrayidx2, align 1
  %shr3 = lshr i32 %val, 16
  %shl = shl i32 %reg, 1
  %or = or i32 %shr3, %shl
  %conv4 = trunc i32 %or to i8
  %4 = ptrtoint ptr %1 to i32
  call void @__asan_store1_noabort(i32 %4)
  store i8 %conv4, ptr %1, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind null_pointer_is_valid sanitize_address sspstrong willreturn uwtable(sync)
define internal void @regmap_format_10_14_write(ptr nocapture noundef readonly %map, i32 noundef %reg, i32 noundef %val) #5 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %work_buf = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 6
  %0 = ptrtoint ptr %work_buf to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %work_buf, align 4
  %conv = trunc i32 %val to i8
  %arrayidx = getelementptr i8, ptr %1, i32 2
  %2 = ptrtoint ptr %arrayidx to i32
  call void @__asan_store1_noabort(i32 %2)
  store i8 %conv, ptr %arrayidx, align 1
  %shr = lshr i32 %val, 8
  %shl = shl i32 %reg, 6
  %or = or i32 %shr, %shl
  %conv1 = trunc i32 %or to i8
  %arrayidx2 = getelementptr i8, ptr %1, i32 1
  %3 = ptrtoint ptr %arrayidx2 to i32
  call void @__asan_store1_noabort(i32 %3)
  store i8 %conv1, ptr %arrayidx2, align 1
  %shr3 = lshr i32 %reg, 2
  %conv4 = trunc i32 %shr3 to i8
  %4 = ptrtoint ptr %1 to i32
  call void @__asan_store1_noabort(i32 %4)
  store i8 %conv4, ptr %1, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind null_pointer_is_valid sanitize_address sspstrong willreturn uwtable(sync)
define internal void @regmap_format_12_20_write(ptr nocapture noundef readonly %map, i32 noundef %reg, i32 noundef %val) #5 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %work_buf = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 6
  %0 = ptrtoint ptr %work_buf to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %work_buf, align 4
  %shr = lshr i32 %reg, 4
  %conv = trunc i32 %shr to i8
  %2 = ptrtoint ptr %1 to i32
  call void @__asan_store1_noabort(i32 %2)
  store i8 %conv, ptr %1, align 1
  %shl = shl i32 %reg, 4
  %shr1 = lshr i32 %val, 16
  %or = or i32 %shr1, %shl
  %conv2 = trunc i32 %or to i8
  %arrayidx3 = getelementptr i8, ptr %1, i32 1
  %3 = ptrtoint ptr %arrayidx3 to i32
  call void @__asan_store1_noabort(i32 %3)
  store i8 %conv2, ptr %arrayidx3, align 1
  %shr4 = lshr i32 %val, 8
  %conv5 = trunc i32 %shr4 to i8
  %arrayidx6 = getelementptr i8, ptr %1, i32 2
  %4 = ptrtoint ptr %arrayidx6 to i32
  call void @__asan_store1_noabort(i32 %4)
  store i8 %conv5, ptr %arrayidx6, align 1
  %conv7 = trunc i32 %val to i8
  %arrayidx8 = getelementptr i8, ptr %1, i32 3
  %5 = ptrtoint ptr %arrayidx8 to i32
  call void @__asan_store1_noabort(i32 %5)
  store i8 %conv7, ptr %arrayidx8, align 1
  ret void
}

; Function Attrs: argmemonly mustprogress nofree norecurse nosync nounwind null_pointer_is_valid sanitize_address sspstrong willreturn writeonly uwtable(sync)
define internal void @regmap_format_8(ptr nocapture noundef writeonly %buf, i32 noundef %val, i32 noundef %shift) #6 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %shl = shl i32 %val, %shift
  %conv = trunc i32 %shl to i8
  %0 = ptrtoint ptr %buf to i32
  call void @__asan_store1_noabort(i32 %0)
  store i8 %conv, ptr %buf, align 1
  ret void
}

; Function Attrs: argmemonly mustprogress nofree norecurse nosync nounwind null_pointer_is_valid sanitize_address sspstrong willreturn writeonly uwtable(sync)
define internal void @regmap_format_16_be(ptr nocapture noundef writeonly %buf, i32 noundef %val, i32 noundef %shift) #6 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %shl = shl i32 %val, %shift
  %conv = trunc i32 %shl to i16
  %0 = ptrtoint ptr %buf to i32
  call void @__asan_storeN_noabort(i32 %0, i32 2)
  store i16 %conv, ptr %buf, align 1
  ret void
}

; Function Attrs: argmemonly mustprogress nofree nosync nounwind null_pointer_is_valid sanitize_address sspstrong willreturn writeonly uwtable(sync)
define internal void @regmap_format_16_le(ptr nocapture noundef writeonly %buf, i32 noundef %val, i32 noundef %shift) #7 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %shl = shl i32 %val, %shift
  %conv = trunc i32 %shl to i16
  %0 = tail call i16 @llvm.bswap.i16(i16 %conv) #24
  %1 = ptrtoint ptr %buf to i32
  call void @__asan_storeN_noabort(i32 %1, i32 2)
  store i16 %0, ptr %buf, align 1
  ret void
}

; Function Attrs: argmemonly mustprogress nofree norecurse nosync nounwind null_pointer_is_valid sanitize_address sspstrong willreturn writeonly uwtable(sync)
define internal void @regmap_format_16_native(ptr nocapture noundef writeonly %buf, i32 noundef %val, i32 noundef %shift) #6 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %shl = shl i32 %val, %shift
  %conv = trunc i32 %shl to i16
  %0 = ptrtoint ptr %buf to i32
  call void @__asan_storeN_noabort(i32 %0, i32 2)
  store i16 %conv, ptr %buf, align 1
  ret void
}

; Function Attrs: argmemonly mustprogress nofree norecurse nosync nounwind null_pointer_is_valid sanitize_address sspstrong willreturn writeonly uwtable(sync)
define internal void @regmap_format_24(ptr nocapture noundef writeonly %buf, i32 noundef %val, i32 noundef %shift) #6 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %shl = shl i32 %val, %shift
  %shr = lshr i32 %shl, 16
  %conv = trunc i32 %shr to i8
  %0 = ptrtoint ptr %buf to i32
  call void @__asan_store1_noabort(i32 %0)
  store i8 %conv, ptr %buf, align 1
  %shr1 = lshr i32 %shl, 8
  %conv2 = trunc i32 %shr1 to i8
  %arrayidx3 = getelementptr i8, ptr %buf, i32 1
  %1 = ptrtoint ptr %arrayidx3 to i32
  call void @__asan_store1_noabort(i32 %1)
  store i8 %conv2, ptr %arrayidx3, align 1
  %conv4 = trunc i32 %shl to i8
  %arrayidx5 = getelementptr i8, ptr %buf, i32 2
  %2 = ptrtoint ptr %arrayidx5 to i32
  call void @__asan_store1_noabort(i32 %2)
  store i8 %conv4, ptr %arrayidx5, align 1
  ret void
}

; Function Attrs: argmemonly mustprogress nofree norecurse nosync nounwind null_pointer_is_valid sanitize_address sspstrong willreturn writeonly uwtable(sync)
define internal void @regmap_format_32_be(ptr nocapture noundef writeonly %buf, i32 noundef %val, i32 noundef %shift) #6 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %shl = shl i32 %val, %shift
  %0 = ptrtoint ptr %buf to i32
  call void @__asan_storeN_noabort(i32 %0, i32 4)
  store i32 %shl, ptr %buf, align 1
  ret void
}

; Function Attrs: argmemonly mustprogress nofree nosync nounwind null_pointer_is_valid sanitize_address sspstrong willreturn writeonly uwtable(sync)
define internal void @regmap_format_32_le(ptr nocapture noundef writeonly %buf, i32 noundef %val, i32 noundef %shift) #7 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %shl = shl i32 %val, %shift
  %0 = tail call i32 @llvm.bswap.i32(i32 %shl) #24
  %1 = ptrtoint ptr %buf to i32
  call void @__asan_storeN_noabort(i32 %1, i32 4)
  store i32 %0, ptr %buf, align 1
  ret void
}

; Function Attrs: argmemonly mustprogress nofree norecurse nosync nounwind null_pointer_is_valid sanitize_address sspstrong willreturn writeonly uwtable(sync)
define internal void @regmap_format_32_native(ptr nocapture noundef writeonly %buf, i32 noundef %val, i32 noundef %shift) #6 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %shl = shl i32 %val, %shift
  %0 = ptrtoint ptr %buf to i32
  call void @__asan_storeN_noabort(i32 %0, i32 4)
  store i32 %shl, ptr %buf, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind null_pointer_is_valid readnone sanitize_address sspstrong willreturn uwtable(sync)
define internal void @regmap_parse_inplace_noop(ptr nocapture noundef %buf) #4 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  ret void
}

; Function Attrs: argmemonly mustprogress nofree norecurse nosync nounwind null_pointer_is_valid readonly sanitize_address sspstrong willreturn uwtable(sync)
define internal i32 @regmap_parse_8(ptr nocapture noundef readonly %buf) #8 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = ptrtoint ptr %buf to i32
  call void @__asan_load1_noabort(i32 %0)
  %1 = load i8, ptr %buf, align 1
  %conv = zext i8 %1 to i32
  ret i32 %conv
}

; Function Attrs: argmemonly mustprogress nofree norecurse nosync nounwind null_pointer_is_valid readonly sanitize_address sspstrong willreturn uwtable(sync)
define internal i32 @regmap_parse_16_be(ptr nocapture noundef readonly %buf) #8 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = ptrtoint ptr %buf to i32
  call void @__asan_loadN_noabort(i32 %0, i32 2)
  %1 = load i16, ptr %buf, align 1
  %conv = zext i16 %1 to i32
  ret i32 %conv
}

; Function Attrs: argmemonly mustprogress nofree norecurse nosync nounwind null_pointer_is_valid sanitize_address sspstrong willreturn uwtable(sync)
define internal void @regmap_parse_16_be_inplace(ptr nocapture noundef %buf) #9 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  ret void
}

; Function Attrs: argmemonly mustprogress nofree nosync nounwind null_pointer_is_valid readonly sanitize_address sspstrong willreturn uwtable(sync)
define internal i32 @regmap_parse_16_le(ptr nocapture noundef readonly %buf) #10 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = ptrtoint ptr %buf to i32
  call void @__asan_loadN_noabort(i32 %0, i32 2)
  %1 = load i16, ptr %buf, align 1
  %2 = tail call i16 @llvm.bswap.i16(i16 %1) #24
  %conv = zext i16 %2 to i32
  ret i32 %conv
}

; Function Attrs: argmemonly mustprogress nofree nosync nounwind null_pointer_is_valid sanitize_address sspstrong willreturn uwtable(sync)
define internal void @regmap_parse_16_le_inplace(ptr nocapture noundef %buf) #11 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = ptrtoint ptr %buf to i32
  call void @__asan_loadN_noabort(i32 %0, i32 2)
  %1 = load i16, ptr %buf, align 1
  %2 = tail call i16 @llvm.bswap.i16(i16 %1) #24
  %3 = ptrtoint ptr %buf to i32
  call void @__asan_storeN_noabort(i32 %3, i32 2)
  store i16 %2, ptr %buf, align 1
  ret void
}

; Function Attrs: argmemonly mustprogress nofree norecurse nosync nounwind null_pointer_is_valid readonly sanitize_address sspstrong willreturn uwtable(sync)
define internal i32 @regmap_parse_16_native(ptr nocapture noundef readonly %buf) #8 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = ptrtoint ptr %buf to i32
  call void @__asan_loadN_noabort(i32 %0, i32 2)
  %v.0.copyload = load i16, ptr %buf, align 1
  %conv = zext i16 %v.0.copyload to i32
  ret i32 %conv
}

; Function Attrs: argmemonly mustprogress nofree norecurse nosync nounwind null_pointer_is_valid readonly sanitize_address sspstrong willreturn uwtable(sync)
define internal i32 @regmap_parse_24(ptr nocapture noundef readonly %buf) #8 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %arrayidx = getelementptr i8, ptr %buf, i32 2
  %0 = ptrtoint ptr %arrayidx to i32
  call void @__asan_load1_noabort(i32 %0)
  %1 = load i8, ptr %arrayidx, align 1
  %conv = zext i8 %1 to i32
  %arrayidx1 = getelementptr i8, ptr %buf, i32 1
  %2 = ptrtoint ptr %arrayidx1 to i32
  call void @__asan_load1_noabort(i32 %2)
  %3 = load i8, ptr %arrayidx1, align 1
  %conv2 = zext i8 %3 to i32
  %shl = shl nuw nsw i32 %conv2, 8
  %or = or i32 %shl, %conv
  %4 = ptrtoint ptr %buf to i32
  call void @__asan_load1_noabort(i32 %4)
  %5 = load i8, ptr %buf, align 1
  %conv4 = zext i8 %5 to i32
  %shl5 = shl nuw nsw i32 %conv4, 16
  %or6 = or i32 %or, %shl5
  ret i32 %or6
}

; Function Attrs: argmemonly mustprogress nofree norecurse nosync nounwind null_pointer_is_valid readonly sanitize_address sspstrong willreturn uwtable(sync)
define internal i32 @regmap_parse_32_be(ptr nocapture noundef readonly %buf) #8 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = ptrtoint ptr %buf to i32
  call void @__asan_loadN_noabort(i32 %0, i32 4)
  %1 = load i32, ptr %buf, align 1
  ret i32 %1
}

; Function Attrs: argmemonly mustprogress nofree norecurse nosync nounwind null_pointer_is_valid sanitize_address sspstrong willreturn uwtable(sync)
define internal void @regmap_parse_32_be_inplace(ptr nocapture noundef %buf) #9 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  ret void
}

; Function Attrs: argmemonly mustprogress nofree nosync nounwind null_pointer_is_valid readonly sanitize_address sspstrong willreturn uwtable(sync)
define internal i32 @regmap_parse_32_le(ptr nocapture noundef readonly %buf) #10 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = ptrtoint ptr %buf to i32
  call void @__asan_loadN_noabort(i32 %0, i32 4)
  %1 = load i32, ptr %buf, align 1
  %2 = tail call i32 @llvm.bswap.i32(i32 %1) #24
  ret i32 %2
}

; Function Attrs: argmemonly mustprogress nofree nosync nounwind null_pointer_is_valid sanitize_address sspstrong willreturn uwtable(sync)
define internal void @regmap_parse_32_le_inplace(ptr nocapture noundef %buf) #11 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = ptrtoint ptr %buf to i32
  call void @__asan_loadN_noabort(i32 %0, i32 4)
  %1 = load i32, ptr %buf, align 1
  %2 = tail call i32 @llvm.bswap.i32(i32 %1) #24
  %3 = ptrtoint ptr %buf to i32
  call void @__asan_storeN_noabort(i32 %3, i32 4)
  store i32 %2, ptr %buf, align 1
  ret void
}

; Function Attrs: argmemonly mustprogress nofree norecurse nosync nounwind null_pointer_is_valid readonly sanitize_address sspstrong willreturn uwtable(sync)
define internal i32 @regmap_parse_32_native(ptr nocapture noundef readonly %buf) #8 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = ptrtoint ptr %buf to i32
  call void @__asan_loadN_noabort(i32 %0, i32 4)
  %v.0.copyload = load i32, ptr %buf, align 1
  ret i32 %v.0.copyload
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal i32 @_regmap_bus_formatted_write(ptr noundef %context, i32 noundef %reg, i32 noundef %val) #0 align 64 {
entry:
  %reg.addr = alloca i32, align 4
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = ptrtoint ptr %reg.addr to i32
  call void @__asan_store4_noabort(i32 %0)
  store i32 %reg, ptr %reg.addr, align 4
  %bus = getelementptr inbounds %struct.regmap, ptr %context, i32 0, i32 8
  %1 = ptrtoint ptr %bus to i32
  call void @__asan_load4_noabort(i32 %1)
  %2 = load ptr, ptr %bus, align 4
  %tobool.not = icmp eq ptr %2, null
  br i1 %tobool.not, label %entry.do.end_crit_edge, label %lor.rhs

entry.do.end_crit_edge:                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.end

lor.rhs:                                          ; preds = %entry
  %format_write = getelementptr inbounds %struct.regmap, ptr %context, i32 0, i32 7, i32 4
  %3 = ptrtoint ptr %format_write to i32
  call void @__asan_load4_noabort(i32 %3)
  %4 = load ptr, ptr %format_write, align 4
  %tobool1.not = icmp eq ptr %4, null
  br i1 %tobool1.not, label %lor.rhs.do.end_crit_edge, label %lor.rhs.if.end_crit_edge, !prof !387

lor.rhs.if.end_crit_edge:                         ; preds = %lor.rhs
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

lor.rhs.do.end_crit_edge:                         ; preds = %lor.rhs
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.end

do.end:                                           ; preds = %lor.rhs.do.end_crit_edge, %entry.do.end_crit_edge
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.15, i32 noundef 1899, i32 noundef 9, ptr noundef null) #24
  br label %if.end

if.end:                                           ; preds = %do.end, %lor.rhs.if.end_crit_edge
  %range_tree.i = getelementptr inbounds %struct.regmap, ptr %context, i32 0, i32 68
  %5 = ptrtoint ptr %range_tree.i to i32
  call void @__asan_load4_noabort(i32 %5)
  %node.015.i = load ptr, ptr %range_tree.i, align 4
  %tobool.not16.i = icmp eq ptr %node.015.i, null
  br i1 %tobool.not16.i, label %if.end.if.end27_crit_edge, label %if.end.while.body.i_crit_edge

if.end.while.body.i_crit_edge:                    ; preds = %if.end
  br label %while.body.i

if.end.if.end27_crit_edge:                        ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end27

while.body.i:                                     ; preds = %cleanup.i.while.body.i_crit_edge, %if.end.while.body.i_crit_edge
  %node.017.i = phi ptr [ %node.0.i, %cleanup.i.while.body.i_crit_edge ], [ %node.015.i, %if.end.while.body.i_crit_edge ]
  %range_min.i = getelementptr inbounds %struct.regmap_range_node, ptr %node.017.i, i32 0, i32 3
  %6 = ptrtoint ptr %range_min.i to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load i32, ptr %range_min.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %7, i32 %reg)
  %cmp.i = icmp ugt i32 %7, %reg
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %while.body.i
  call void @__sanitizer_cov_trace_pc() #26
  %rb_left.i = getelementptr inbounds %struct.rb_node, ptr %node.017.i, i32 0, i32 2
  br label %cleanup.i

if.else.i:                                        ; preds = %while.body.i
  %range_max.i = getelementptr inbounds %struct.regmap_range_node, ptr %node.017.i, i32 0, i32 4
  %8 = ptrtoint ptr %range_max.i to i32
  call void @__asan_load4_noabort(i32 %8)
  %9 = load i32, ptr %range_max.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %9, i32 %reg)
  %cmp1.i = icmp ult i32 %9, %reg
  br i1 %cmp1.i, label %if.then2.i, label %if.then23

if.then2.i:                                       ; preds = %if.else.i
  call void @__sanitizer_cov_trace_pc() #26
  %rb_right.i = getelementptr inbounds %struct.rb_node, ptr %node.017.i, i32 0, i32 1
  br label %cleanup.i

cleanup.i:                                        ; preds = %if.then2.i, %if.then.i
  %node.1.in.i = phi ptr [ %rb_left.i, %if.then.i ], [ %rb_right.i, %if.then2.i ]
  %10 = ptrtoint ptr %node.1.in.i to i32
  call void @__asan_load4_noabort(i32 %10)
  %node.0.i = load ptr, ptr %node.1.in.i, align 4
  %tobool.not.i = icmp eq ptr %node.0.i, null
  br i1 %tobool.not.i, label %cleanup.i.if.end27_crit_edge, label %cleanup.i.while.body.i_crit_edge

cleanup.i.while.body.i_crit_edge:                 ; preds = %cleanup.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %while.body.i

cleanup.i.if.end27_crit_edge:                     ; preds = %cleanup.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end27

if.then23:                                        ; preds = %if.else.i
  %call24 = call fastcc i32 @_regmap_select_page(ptr noundef %context, ptr noundef nonnull %reg.addr, ptr noundef nonnull %node.017.i, i32 noundef 1)
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call24)
  %cmp.not = icmp eq i32 %call24, 0
  br i1 %cmp.not, label %if.then23.if.end27_crit_edge, label %if.then23.cleanup_crit_edge

if.then23.cleanup_crit_edge:                      ; preds = %if.then23
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.then23.if.end27_crit_edge:                     ; preds = %if.then23
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end27

if.end27:                                         ; preds = %if.then23.if.end27_crit_edge, %cleanup.i.if.end27_crit_edge, %if.end.if.end27_crit_edge
  %format28 = getelementptr inbounds %struct.regmap, ptr %context, i32 0, i32 7
  %format_write29 = getelementptr inbounds %struct.regmap, ptr %context, i32 0, i32 7, i32 4
  %11 = ptrtoint ptr %format_write29 to i32
  call void @__asan_load4_noabort(i32 %11)
  %12 = load ptr, ptr %format_write29, align 4
  %13 = ptrtoint ptr %reg.addr to i32
  call void @__asan_load4_noabort(i32 %13)
  %14 = load i32, ptr %reg.addr, align 4
  tail call void %12(ptr noundef %context, i32 noundef %14, i32 noundef %val) #24
  tail call fastcc void @trace_regmap_hw_write_start(ptr noundef %context, i32 noundef %14, i32 noundef 1)
  %15 = ptrtoint ptr %bus to i32
  call void @__asan_load4_noabort(i32 %15)
  %16 = load ptr, ptr %bus, align 4
  %write = getelementptr inbounds %struct.regmap_bus, ptr %16, i32 0, i32 1
  %17 = ptrtoint ptr %write to i32
  call void @__asan_load4_noabort(i32 %17)
  %18 = load ptr, ptr %write, align 4
  %bus_context = getelementptr inbounds %struct.regmap, ptr %context, i32 0, i32 9
  %19 = ptrtoint ptr %bus_context to i32
  call void @__asan_load4_noabort(i32 %19)
  %20 = load ptr, ptr %bus_context, align 4
  %work_buf = getelementptr inbounds %struct.regmap, ptr %context, i32 0, i32 6
  %21 = ptrtoint ptr %work_buf to i32
  call void @__asan_load4_noabort(i32 %21)
  %22 = load ptr, ptr %work_buf, align 4
  %23 = ptrtoint ptr %format28 to i32
  call void @__asan_load4_noabort(i32 %23)
  %24 = load i32, ptr %format28, align 4
  %call32 = tail call i32 %18(ptr noundef %20, ptr noundef %22, i32 noundef %24) #24
  tail call fastcc void @trace_regmap_hw_write_done(ptr noundef %context, i32 noundef %14, i32 noundef 1)
  br label %cleanup

cleanup:                                          ; preds = %if.end27, %if.then23.cleanup_crit_edge
  %retval.0 = phi i32 [ %call32, %if.end27 ], [ %call24, %if.then23.cleanup_crit_edge ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal i32 @_regmap_bus_raw_write(ptr noundef %context, i32 noundef %reg, i32 noundef %val) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %bus = getelementptr inbounds %struct.regmap, ptr %context, i32 0, i32 8
  %0 = ptrtoint ptr %bus to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %bus, align 4
  %tobool.not = icmp eq ptr %1, null
  br i1 %tobool.not, label %entry.do.end_crit_edge, label %lor.rhs

entry.do.end_crit_edge:                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.end

lor.rhs:                                          ; preds = %entry
  %format_val = getelementptr inbounds %struct.regmap, ptr %context, i32 0, i32 7, i32 6
  %2 = ptrtoint ptr %format_val to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load ptr, ptr %format_val, align 4
  %tobool1.not = icmp eq ptr %3, null
  br i1 %tobool1.not, label %lor.rhs.do.end_crit_edge, label %lor.rhs.if.end_crit_edge, !prof !387

lor.rhs.if.end_crit_edge:                         ; preds = %lor.rhs
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

lor.rhs.do.end_crit_edge:                         ; preds = %lor.rhs
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.end

do.end:                                           ; preds = %lor.rhs.do.end_crit_edge, %entry.do.end_crit_edge
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.15, i32 noundef 1933, i32 noundef 9, ptr noundef null) #24
  br label %if.end

if.end:                                           ; preds = %do.end, %lor.rhs.if.end_crit_edge
  %format_val23 = getelementptr inbounds %struct.regmap, ptr %context, i32 0, i32 7, i32 6
  %4 = ptrtoint ptr %format_val23 to i32
  call void @__asan_load4_noabort(i32 %4)
  %5 = load ptr, ptr %format_val23, align 4
  %work_buf = getelementptr inbounds %struct.regmap, ptr %context, i32 0, i32 6
  %6 = ptrtoint ptr %work_buf to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load ptr, ptr %work_buf, align 4
  %reg_bytes = getelementptr inbounds %struct.regmap, ptr %context, i32 0, i32 7, i32 1
  %8 = ptrtoint ptr %reg_bytes to i32
  call void @__asan_load4_noabort(i32 %8)
  %9 = load i32, ptr %reg_bytes, align 4
  %add.ptr = getelementptr i8, ptr %7, i32 %9
  %pad_bytes = getelementptr inbounds %struct.regmap, ptr %context, i32 0, i32 7, i32 2
  %10 = ptrtoint ptr %pad_bytes to i32
  call void @__asan_load4_noabort(i32 %10)
  %11 = load i32, ptr %pad_bytes, align 4
  %add.ptr26 = getelementptr i8, ptr %add.ptr, i32 %11
  tail call void %5(ptr noundef %add.ptr26, i32 noundef %val, i32 noundef 0) #24
  %12 = ptrtoint ptr %work_buf to i32
  call void @__asan_load4_noabort(i32 %12)
  %13 = load ptr, ptr %work_buf, align 4
  %14 = ptrtoint ptr %reg_bytes to i32
  call void @__asan_load4_noabort(i32 %14)
  %15 = load i32, ptr %reg_bytes, align 4
  %add.ptr30 = getelementptr i8, ptr %13, i32 %15
  %16 = ptrtoint ptr %pad_bytes to i32
  call void @__asan_load4_noabort(i32 %16)
  %17 = load i32, ptr %pad_bytes, align 4
  %add.ptr33 = getelementptr i8, ptr %add.ptr30, i32 %17
  %val_bytes = getelementptr inbounds %struct.regmap, ptr %context, i32 0, i32 7, i32 3
  %18 = ptrtoint ptr %val_bytes to i32
  call void @__asan_load4_noabort(i32 %18)
  %19 = load i32, ptr %val_bytes, align 4
  %call = tail call fastcc i32 @_regmap_raw_write_impl(ptr noundef %context, i32 noundef %reg, ptr noundef %add.ptr33, i32 noundef %19, i1 noundef zeroext false)
  ret i32 %call
}

; Function Attrs: cold null_pointer_is_valid
declare dso_local void @_dev_err(ptr noundef, ptr noundef, ...) local_unnamed_addr #12

; Function Attrs: null_pointer_is_valid
declare dso_local void @kfree(ptr noundef) local_unnamed_addr #2

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @regcache_init(ptr noundef, ptr noundef) local_unnamed_addr #2

; Function Attrs: null_pointer_is_valid
declare dso_local void @regcache_exit(ptr noundef) local_unnamed_addr #2

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @hwspin_lock_free(ptr noundef) local_unnamed_addr #2

; Function Attrs: null_pointer_is_valid
declare dso_local void @kfree_const(ptr noundef) local_unnamed_addr #2

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local ptr @__devm_regmap_init(ptr noundef %dev, ptr noundef %bus, ptr noundef %bus_context, ptr noundef %config, ptr noundef %lock_key, ptr noundef %lock_name) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %call = tail call noalias ptr @__devres_alloc_node(ptr noundef nonnull @devm_regmap_release, i32 noundef 4, i32 noundef 3264, i32 noundef -1, ptr noundef nonnull @.str.36) #24
  %tobool.not = icmp eq ptr %call, null
  br i1 %tobool.not, label %entry.cleanup_crit_edge, label %if.end

entry.cleanup_crit_edge:                          ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end:                                           ; preds = %entry
  %call2 = tail call ptr @__regmap_init(ptr noundef %dev, ptr noundef %bus, ptr noundef %bus_context, ptr noundef %config, ptr noundef %lock_key, ptr noundef %lock_name)
  %cmp.i = icmp ugt ptr %call2, inttoptr (i32 -4096 to ptr)
  br i1 %cmp.i, label %if.else, label %if.then4

if.then4:                                         ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #26
  %0 = ptrtoint ptr %call to i32
  call void @__asan_store4_noabort(i32 %0)
  store ptr %call2, ptr %call, align 4
  tail call void @devres_add(ptr noundef %dev, ptr noundef nonnull %call) #24
  br label %cleanup

if.else:                                          ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #26
  tail call void @devres_free(ptr noundef nonnull %call) #24
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then4, %entry.cleanup_crit_edge
  %retval.0 = phi ptr [ %call2, %if.else ], [ %call2, %if.then4 ], [ inttoptr (i32 -12 to ptr), %entry.cleanup_crit_edge ]
  ret ptr %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal void @devm_regmap_release(ptr nocapture noundef readnone %dev, ptr nocapture noundef readonly %res) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = ptrtoint ptr %res to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %res, align 4
  tail call void @regmap_exit(ptr noundef %1)
  ret void
}

; Function Attrs: null_pointer_is_valid
declare dso_local void @devres_free(ptr noundef) local_unnamed_addr #2

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local ptr @devm_regmap_field_alloc(ptr noundef %dev, ptr noundef %regmap, [5 x i32] %reg_field.coerce) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %call.i = tail call noalias ptr @devm_kmalloc(ptr noundef %dev, i32 noundef 24, i32 noundef 3520) #24
  %tobool.not = icmp eq ptr %call.i, null
  br i1 %tobool.not, label %entry.cleanup_crit_edge, label %if.end

entry.cleanup_crit_edge:                          ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end:                                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  %reg_field.coerce.fca.0.extract.i = extractvalue [5 x i32] %reg_field.coerce, 0
  %reg_field.coerce.fca.1.extract.i = extractvalue [5 x i32] %reg_field.coerce, 1
  %reg_field.coerce.fca.2.extract.i = extractvalue [5 x i32] %reg_field.coerce, 2
  %reg_field.coerce.fca.3.extract.i = extractvalue [5 x i32] %reg_field.coerce, 3
  %reg_field.coerce.fca.4.extract.i = extractvalue [5 x i32] %reg_field.coerce, 4
  %0 = ptrtoint ptr %call.i to i32
  call void @__asan_store4_noabort(i32 %0)
  store ptr %regmap, ptr %call.i, align 4
  %reg2.i = getelementptr inbounds %struct.regmap_field, ptr %call.i, i32 0, i32 3
  %1 = ptrtoint ptr %reg2.i to i32
  call void @__asan_store4_noabort(i32 %1)
  store i32 %reg_field.coerce.fca.0.extract.i, ptr %reg2.i, align 4
  %shift.i = getelementptr inbounds %struct.regmap_field, ptr %call.i, i32 0, i32 2
  %2 = ptrtoint ptr %shift.i to i32
  call void @__asan_store4_noabort(i32 %2)
  store i32 %reg_field.coerce.fca.1.extract.i, ptr %shift.i, align 4
  %shl.neg.i = shl nsw i32 -1, %reg_field.coerce.fca.1.extract.i
  %sub4.i = sub i32 31, %reg_field.coerce.fca.2.extract.i
  %shr.i = lshr i32 -1, %sub4.i
  %and.i = and i32 %shr.i, %shl.neg.i
  %mask.i = getelementptr inbounds %struct.regmap_field, ptr %call.i, i32 0, i32 1
  %3 = ptrtoint ptr %mask.i to i32
  call void @__asan_store4_noabort(i32 %3)
  store i32 %and.i, ptr %mask.i, align 4
  %id_size6.i = getelementptr inbounds %struct.regmap_field, ptr %call.i, i32 0, i32 4
  %4 = ptrtoint ptr %id_size6.i to i32
  call void @__asan_store4_noabort(i32 %4)
  store i32 %reg_field.coerce.fca.3.extract.i, ptr %id_size6.i, align 4
  %id_offset7.i = getelementptr inbounds %struct.regmap_field, ptr %call.i, i32 0, i32 5
  %5 = ptrtoint ptr %id_offset7.i to i32
  call void @__asan_store4_noabort(i32 %5)
  store i32 %reg_field.coerce.fca.4.extract.i, ptr %id_offset7.i, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry.cleanup_crit_edge
  %retval.0 = phi ptr [ %call.i, %if.end ], [ inttoptr (i32 -12 to ptr), %entry.cleanup_crit_edge ]
  ret ptr %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @regmap_field_bulk_alloc(ptr noundef %regmap, ptr nocapture noundef writeonly %rm_field, ptr nocapture noundef readonly %reg_field, i32 noundef %num_fields) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = tail call { i32, i1 } @llvm.umul.with.overflow.i32(i32 %num_fields, i32 24) #24
  %1 = extractvalue { i32, i1 } %0, 1
  br i1 %1, label %entry.cleanup_crit_edge, label %if.end7.i.i, !prof !387

entry.cleanup_crit_edge:                          ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end7.i.i:                                      ; preds = %entry
  %2 = extractvalue { i32, i1 } %0, 0
  %call8.i.i = tail call noalias align 128 ptr @__kmalloc(i32 noundef %2, i32 noundef 3520) #30
  %tobool.not = icmp eq ptr %call8.i.i, null
  br i1 %tobool.not, label %if.end7.i.i.cleanup_crit_edge, label %for.cond.preheader

if.end7.i.i.cleanup_crit_edge:                    ; preds = %if.end7.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

for.cond.preheader:                               ; preds = %if.end7.i.i
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %num_fields)
  %cmp23.not = icmp eq i32 %num_fields, 0
  br i1 %cmp23.not, label %for.cond.preheader.cleanup_crit_edge, label %for.cond.preheader.for.body_crit_edge

for.cond.preheader.for.body_crit_edge:            ; preds = %for.cond.preheader
  br label %for.body

for.cond.preheader.cleanup_crit_edge:             ; preds = %for.cond.preheader
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

for.body:                                         ; preds = %for.body.for.body_crit_edge, %for.cond.preheader.for.body_crit_edge
  %i.024 = phi i32 [ %inc, %for.body.for.body_crit_edge ], [ 0, %for.cond.preheader.for.body_crit_edge ]
  %arrayidx = getelementptr %struct.regmap_field, ptr %call8.i.i, i32 %i.024
  %arrayidx1 = getelementptr %struct.reg_field, ptr %reg_field, i32 %i.024
  %3 = ptrtoint ptr %arrayidx1 to i32
  call void @__asan_load4_noabort(i32 %3)
  %.unpack = load i32, ptr %arrayidx1, align 4
  %.elt13 = getelementptr inbounds [5 x i32], ptr %arrayidx1, i32 0, i32 1
  %4 = ptrtoint ptr %.elt13 to i32
  call void @__asan_load4_noabort(i32 %4)
  %.unpack14 = load i32, ptr %.elt13, align 4
  %.elt15 = getelementptr inbounds [5 x i32], ptr %arrayidx1, i32 0, i32 2
  %5 = ptrtoint ptr %.elt15 to i32
  call void @__asan_load4_noabort(i32 %5)
  %.unpack16 = load i32, ptr %.elt15, align 4
  %.elt17 = getelementptr inbounds [5 x i32], ptr %arrayidx1, i32 0, i32 3
  %6 = ptrtoint ptr %.elt17 to i32
  call void @__asan_load4_noabort(i32 %6)
  %.unpack18 = load i32, ptr %.elt17, align 4
  %.elt19 = getelementptr inbounds [5 x i32], ptr %arrayidx1, i32 0, i32 4
  %7 = ptrtoint ptr %.elt19 to i32
  call void @__asan_load4_noabort(i32 %7)
  %.unpack20 = load i32, ptr %.elt19, align 4
  %8 = ptrtoint ptr %arrayidx to i32
  call void @__asan_store4_noabort(i32 %8)
  store ptr %regmap, ptr %arrayidx, align 8
  %reg2.i = getelementptr %struct.regmap_field, ptr %call8.i.i, i32 %i.024, i32 3
  %9 = ptrtoint ptr %reg2.i to i32
  call void @__asan_store4_noabort(i32 %9)
  store i32 %.unpack, ptr %reg2.i, align 4
  %shift.i = getelementptr %struct.regmap_field, ptr %call8.i.i, i32 %i.024, i32 2
  %10 = ptrtoint ptr %shift.i to i32
  call void @__asan_store4_noabort(i32 %10)
  store i32 %.unpack14, ptr %shift.i, align 8
  %shl.neg.i = shl nsw i32 -1, %.unpack14
  %sub4.i = sub i32 31, %.unpack16
  %shr.i = lshr i32 -1, %sub4.i
  %and.i = and i32 %shr.i, %shl.neg.i
  %mask.i = getelementptr %struct.regmap_field, ptr %call8.i.i, i32 %i.024, i32 1
  %11 = ptrtoint ptr %mask.i to i32
  call void @__asan_store4_noabort(i32 %11)
  store i32 %and.i, ptr %mask.i, align 4
  %id_size6.i = getelementptr %struct.regmap_field, ptr %call8.i.i, i32 %i.024, i32 4
  %12 = ptrtoint ptr %id_size6.i to i32
  call void @__asan_store4_noabort(i32 %12)
  store i32 %.unpack18, ptr %id_size6.i, align 8
  %id_offset7.i = getelementptr %struct.regmap_field, ptr %call8.i.i, i32 %i.024, i32 5
  %13 = ptrtoint ptr %id_offset7.i to i32
  call void @__asan_store4_noabort(i32 %13)
  store i32 %.unpack20, ptr %id_offset7.i, align 4
  %arrayidx3 = getelementptr ptr, ptr %rm_field, i32 %i.024
  %14 = ptrtoint ptr %arrayidx3 to i32
  call void @__asan_store4_noabort(i32 %14)
  store ptr %arrayidx, ptr %arrayidx3, align 4
  %inc = add nuw nsw i32 %i.024, 1
  %exitcond.not = icmp eq i32 %inc, %num_fields
  br i1 %exitcond.not, label %for.body.cleanup_crit_edge, label %for.body.for.body_crit_edge

for.body.for.body_crit_edge:                      ; preds = %for.body
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body

for.body.cleanup_crit_edge:                       ; preds = %for.body
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

cleanup:                                          ; preds = %for.body.cleanup_crit_edge, %for.cond.preheader.cleanup_crit_edge, %if.end7.i.i.cleanup_crit_edge, %entry.cleanup_crit_edge
  %retval.0 = phi i32 [ -12, %if.end7.i.i.cleanup_crit_edge ], [ -12, %entry.cleanup_crit_edge ], [ 0, %for.cond.preheader.cleanup_crit_edge ], [ 0, %for.body.cleanup_crit_edge ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @devm_regmap_field_bulk_alloc(ptr noundef %dev, ptr noundef %regmap, ptr nocapture noundef writeonly %rm_field, ptr nocapture noundef readonly %reg_field, i32 noundef %num_fields) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = tail call { i32, i1 } @llvm.umul.with.overflow.i32(i32 %num_fields, i32 24) #24
  %1 = extractvalue { i32, i1 } %0, 1
  br i1 %1, label %entry.cleanup_crit_edge, label %devm_kcalloc.exit, !prof !387

entry.cleanup_crit_edge:                          ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

devm_kcalloc.exit:                                ; preds = %entry
  %2 = extractvalue { i32, i1 } %0, 0
  %call5.i.i = tail call noalias ptr @devm_kmalloc(ptr noundef %dev, i32 noundef %2, i32 noundef 3520) #24
  %tobool.not = icmp eq ptr %call5.i.i, null
  br i1 %tobool.not, label %devm_kcalloc.exit.cleanup_crit_edge, label %for.cond.preheader

devm_kcalloc.exit.cleanup_crit_edge:              ; preds = %devm_kcalloc.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

for.cond.preheader:                               ; preds = %devm_kcalloc.exit
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %num_fields)
  %cmp23.not = icmp eq i32 %num_fields, 0
  br i1 %cmp23.not, label %for.cond.preheader.cleanup_crit_edge, label %for.cond.preheader.for.body_crit_edge

for.cond.preheader.for.body_crit_edge:            ; preds = %for.cond.preheader
  br label %for.body

for.cond.preheader.cleanup_crit_edge:             ; preds = %for.cond.preheader
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

for.body:                                         ; preds = %for.body.for.body_crit_edge, %for.cond.preheader.for.body_crit_edge
  %i.024 = phi i32 [ %inc, %for.body.for.body_crit_edge ], [ 0, %for.cond.preheader.for.body_crit_edge ]
  %arrayidx = getelementptr %struct.regmap_field, ptr %call5.i.i, i32 %i.024
  %arrayidx1 = getelementptr %struct.reg_field, ptr %reg_field, i32 %i.024
  %3 = ptrtoint ptr %arrayidx1 to i32
  call void @__asan_load4_noabort(i32 %3)
  %.unpack = load i32, ptr %arrayidx1, align 4
  %.elt13 = getelementptr inbounds [5 x i32], ptr %arrayidx1, i32 0, i32 1
  %4 = ptrtoint ptr %.elt13 to i32
  call void @__asan_load4_noabort(i32 %4)
  %.unpack14 = load i32, ptr %.elt13, align 4
  %.elt15 = getelementptr inbounds [5 x i32], ptr %arrayidx1, i32 0, i32 2
  %5 = ptrtoint ptr %.elt15 to i32
  call void @__asan_load4_noabort(i32 %5)
  %.unpack16 = load i32, ptr %.elt15, align 4
  %.elt17 = getelementptr inbounds [5 x i32], ptr %arrayidx1, i32 0, i32 3
  %6 = ptrtoint ptr %.elt17 to i32
  call void @__asan_load4_noabort(i32 %6)
  %.unpack18 = load i32, ptr %.elt17, align 4
  %.elt19 = getelementptr inbounds [5 x i32], ptr %arrayidx1, i32 0, i32 4
  %7 = ptrtoint ptr %.elt19 to i32
  call void @__asan_load4_noabort(i32 %7)
  %.unpack20 = load i32, ptr %.elt19, align 4
  %8 = ptrtoint ptr %arrayidx to i32
  call void @__asan_store4_noabort(i32 %8)
  store ptr %regmap, ptr %arrayidx, align 4
  %reg2.i = getelementptr %struct.regmap_field, ptr %call5.i.i, i32 %i.024, i32 3
  %9 = ptrtoint ptr %reg2.i to i32
  call void @__asan_store4_noabort(i32 %9)
  store i32 %.unpack, ptr %reg2.i, align 4
  %shift.i = getelementptr %struct.regmap_field, ptr %call5.i.i, i32 %i.024, i32 2
  %10 = ptrtoint ptr %shift.i to i32
  call void @__asan_store4_noabort(i32 %10)
  store i32 %.unpack14, ptr %shift.i, align 4
  %shl.neg.i = shl nsw i32 -1, %.unpack14
  %sub4.i = sub i32 31, %.unpack16
  %shr.i = lshr i32 -1, %sub4.i
  %and.i = and i32 %shr.i, %shl.neg.i
  %mask.i = getelementptr %struct.regmap_field, ptr %call5.i.i, i32 %i.024, i32 1
  %11 = ptrtoint ptr %mask.i to i32
  call void @__asan_store4_noabort(i32 %11)
  store i32 %and.i, ptr %mask.i, align 4
  %id_size6.i = getelementptr %struct.regmap_field, ptr %call5.i.i, i32 %i.024, i32 4
  %12 = ptrtoint ptr %id_size6.i to i32
  call void @__asan_store4_noabort(i32 %12)
  store i32 %.unpack18, ptr %id_size6.i, align 4
  %id_offset7.i = getelementptr %struct.regmap_field, ptr %call5.i.i, i32 %i.024, i32 5
  %13 = ptrtoint ptr %id_offset7.i to i32
  call void @__asan_store4_noabort(i32 %13)
  store i32 %.unpack20, ptr %id_offset7.i, align 4
  %arrayidx3 = getelementptr ptr, ptr %rm_field, i32 %i.024
  %14 = ptrtoint ptr %arrayidx3 to i32
  call void @__asan_store4_noabort(i32 %14)
  store ptr %arrayidx, ptr %arrayidx3, align 4
  %inc = add nuw nsw i32 %i.024, 1
  %exitcond.not = icmp eq i32 %inc, %num_fields
  br i1 %exitcond.not, label %for.body.cleanup_crit_edge, label %for.body.for.body_crit_edge

for.body.for.body_crit_edge:                      ; preds = %for.body
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body

for.body.cleanup_crit_edge:                       ; preds = %for.body
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

cleanup:                                          ; preds = %for.body.cleanup_crit_edge, %for.cond.preheader.cleanup_crit_edge, %devm_kcalloc.exit.cleanup_crit_edge, %entry.cleanup_crit_edge
  %retval.0 = phi i32 [ -12, %devm_kcalloc.exit.cleanup_crit_edge ], [ -12, %entry.cleanup_crit_edge ], [ 0, %for.cond.preheader.cleanup_crit_edge ], [ 0, %for.body.cleanup_crit_edge ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local void @regmap_field_bulk_free(ptr noundef %field) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  tail call void @kfree(ptr noundef %field) #24
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local void @devm_regmap_field_bulk_free(ptr noundef %dev, ptr noundef %field) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  tail call void @devm_kfree(ptr noundef %dev, ptr noundef %field) #24
  ret void
}

; Function Attrs: null_pointer_is_valid
declare dso_local void @devm_kfree(ptr noundef, ptr noundef) local_unnamed_addr #2

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local void @devm_regmap_field_free(ptr noundef %dev, ptr noundef %field) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  tail call void @devm_kfree(ptr noundef %dev, ptr noundef %field) #24
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local ptr @regmap_field_alloc(ptr noundef %regmap, [5 x i32] %reg_field.coerce) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  call void @__asan_load4_noabort(i32 ptrtoint (ptr getelementptr inbounds ([4 x [14 x ptr]], ptr @kmalloc_caches, i32 0, i32 0, i32 7) to i32))
  %0 = load ptr, ptr getelementptr inbounds ([4 x [14 x ptr]], ptr @kmalloc_caches, i32 0, i32 0, i32 7), align 4
  %call7.i.i = tail call noalias align 8 ptr @kmem_cache_alloc_trace(ptr noundef %0, i32 noundef 3520, i32 noundef 24) #29
  %tobool.not = icmp eq ptr %call7.i.i, null
  br i1 %tobool.not, label %entry.cleanup_crit_edge, label %if.end

entry.cleanup_crit_edge:                          ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end:                                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  %reg_field.coerce.fca.0.extract.i = extractvalue [5 x i32] %reg_field.coerce, 0
  %reg_field.coerce.fca.1.extract.i = extractvalue [5 x i32] %reg_field.coerce, 1
  %reg_field.coerce.fca.2.extract.i = extractvalue [5 x i32] %reg_field.coerce, 2
  %reg_field.coerce.fca.3.extract.i = extractvalue [5 x i32] %reg_field.coerce, 3
  %reg_field.coerce.fca.4.extract.i = extractvalue [5 x i32] %reg_field.coerce, 4
  %1 = ptrtoint ptr %call7.i.i to i32
  call void @__asan_store4_noabort(i32 %1)
  store ptr %regmap, ptr %call7.i.i, align 8
  %reg2.i = getelementptr inbounds %struct.regmap_field, ptr %call7.i.i, i32 0, i32 3
  %2 = ptrtoint ptr %reg2.i to i32
  call void @__asan_store4_noabort(i32 %2)
  store i32 %reg_field.coerce.fca.0.extract.i, ptr %reg2.i, align 4
  %shift.i = getelementptr inbounds %struct.regmap_field, ptr %call7.i.i, i32 0, i32 2
  %3 = ptrtoint ptr %shift.i to i32
  call void @__asan_store4_noabort(i32 %3)
  store i32 %reg_field.coerce.fca.1.extract.i, ptr %shift.i, align 8
  %shl.neg.i = shl nsw i32 -1, %reg_field.coerce.fca.1.extract.i
  %sub4.i = sub i32 31, %reg_field.coerce.fca.2.extract.i
  %shr.i = lshr i32 -1, %sub4.i
  %and.i = and i32 %shr.i, %shl.neg.i
  %mask.i = getelementptr inbounds %struct.regmap_field, ptr %call7.i.i, i32 0, i32 1
  %4 = ptrtoint ptr %mask.i to i32
  call void @__asan_store4_noabort(i32 %4)
  store i32 %and.i, ptr %mask.i, align 4
  %id_size6.i = getelementptr inbounds %struct.regmap_field, ptr %call7.i.i, i32 0, i32 4
  %5 = ptrtoint ptr %id_size6.i to i32
  call void @__asan_store4_noabort(i32 %5)
  store i32 %reg_field.coerce.fca.3.extract.i, ptr %id_size6.i, align 8
  %id_offset7.i = getelementptr inbounds %struct.regmap_field, ptr %call7.i.i, i32 0, i32 5
  %6 = ptrtoint ptr %id_offset7.i to i32
  call void @__asan_store4_noabort(i32 %6)
  store i32 %reg_field.coerce.fca.4.extract.i, ptr %id_offset7.i, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry.cleanup_crit_edge
  %retval.0 = phi ptr [ %call7.i.i, %if.end ], [ inttoptr (i32 -12 to ptr), %entry.cleanup_crit_edge ]
  ret ptr %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local void @regmap_field_free(ptr noundef %field) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  tail call void @kfree(ptr noundef %field) #24
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @regmap_reinit_cache(ptr noundef %map, ptr noundef %config) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  tail call void @regcache_exit(ptr noundef %map) #24
  tail call void @regmap_debugfs_exit(ptr noundef %map) #24
  %max_register = getelementptr inbounds %struct.regmap_config, ptr %config, i32 0, i32 19
  %0 = ptrtoint ptr %max_register to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load i32, ptr %max_register, align 4
  %max_register1 = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 25
  %2 = ptrtoint ptr %max_register1 to i32
  call void @__asan_store4_noabort(i32 %2)
  store i32 %1, ptr %max_register1, align 4
  %writeable_reg = getelementptr inbounds %struct.regmap_config, ptr %config, i32 0, i32 5
  %3 = ptrtoint ptr %writeable_reg to i32
  call void @__asan_load4_noabort(i32 %3)
  %4 = load ptr, ptr %writeable_reg, align 4
  %writeable_reg2 = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 26
  %5 = ptrtoint ptr %writeable_reg2 to i32
  call void @__asan_store4_noabort(i32 %5)
  store ptr %4, ptr %writeable_reg2, align 4
  %readable_reg = getelementptr inbounds %struct.regmap_config, ptr %config, i32 0, i32 6
  %6 = ptrtoint ptr %readable_reg to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load ptr, ptr %readable_reg, align 4
  %readable_reg3 = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 27
  %8 = ptrtoint ptr %readable_reg3 to i32
  call void @__asan_store4_noabort(i32 %8)
  store ptr %7, ptr %readable_reg3, align 4
  %volatile_reg = getelementptr inbounds %struct.regmap_config, ptr %config, i32 0, i32 7
  %9 = ptrtoint ptr %volatile_reg to i32
  call void @__asan_load4_noabort(i32 %9)
  %10 = load ptr, ptr %volatile_reg, align 4
  %volatile_reg4 = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 28
  %11 = ptrtoint ptr %volatile_reg4 to i32
  call void @__asan_store4_noabort(i32 %11)
  store ptr %10, ptr %volatile_reg4, align 4
  %precious_reg = getelementptr inbounds %struct.regmap_config, ptr %config, i32 0, i32 8
  %12 = ptrtoint ptr %precious_reg to i32
  call void @__asan_load4_noabort(i32 %12)
  %13 = load ptr, ptr %precious_reg, align 4
  %precious_reg5 = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 29
  %14 = ptrtoint ptr %precious_reg5 to i32
  call void @__asan_store4_noabort(i32 %14)
  store ptr %13, ptr %precious_reg5, align 4
  %writeable_noinc_reg = getelementptr inbounds %struct.regmap_config, ptr %config, i32 0, i32 9
  %15 = ptrtoint ptr %writeable_noinc_reg to i32
  call void @__asan_load4_noabort(i32 %15)
  %16 = load ptr, ptr %writeable_noinc_reg, align 4
  %writeable_noinc_reg6 = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 30
  %17 = ptrtoint ptr %writeable_noinc_reg6 to i32
  call void @__asan_store4_noabort(i32 %17)
  store ptr %16, ptr %writeable_noinc_reg6, align 4
  %readable_noinc_reg = getelementptr inbounds %struct.regmap_config, ptr %config, i32 0, i32 10
  %18 = ptrtoint ptr %readable_noinc_reg to i32
  call void @__asan_load4_noabort(i32 %18)
  %19 = load ptr, ptr %readable_noinc_reg, align 4
  %readable_noinc_reg7 = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 31
  %20 = ptrtoint ptr %readable_noinc_reg7 to i32
  call void @__asan_store4_noabort(i32 %20)
  store ptr %19, ptr %readable_noinc_reg7, align 4
  %cache_type = getelementptr inbounds %struct.regmap_config, ptr %config, i32 0, i32 28
  %21 = ptrtoint ptr %cache_type to i32
  call void @__asan_load4_noabort(i32 %21)
  %22 = load i32, ptr %cache_type, align 4
  %cache_type8 = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 48
  %23 = ptrtoint ptr %cache_type8 to i32
  call void @__asan_store4_noabort(i32 %23)
  store i32 %22, ptr %cache_type8, align 4
  %24 = ptrtoint ptr %config to i32
  call void @__asan_load4_noabort(i32 %24)
  %25 = load ptr, ptr %config, align 4
  %tobool.not.i = icmp eq ptr %25, null
  br i1 %tobool.not.i, label %entry.if.end_crit_edge, label %if.then.i

entry.if.end_crit_edge:                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

if.then.i:                                        ; preds = %entry
  %call.i = tail call ptr @kstrdup_const(ptr noundef nonnull %25, i32 noundef 3264) #24
  %tobool3.not.i = icmp eq ptr %call.i, null
  br i1 %tobool3.not.i, label %if.then.i.cleanup_crit_edge, label %cleanup.thread.i

if.then.i.cleanup_crit_edge:                      ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

cleanup.thread.i:                                 ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #26
  %name5.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 10
  %26 = ptrtoint ptr %name5.i to i32
  call void @__asan_load4_noabort(i32 %26)
  %27 = load ptr, ptr %name5.i, align 4
  tail call void @kfree_const(ptr noundef %27) #24
  %28 = ptrtoint ptr %name5.i to i32
  call void @__asan_store4_noabort(i32 %28)
  store ptr %call.i, ptr %name5.i, align 4
  br label %if.end

if.end:                                           ; preds = %cleanup.thread.i, %entry.if.end_crit_edge
  tail call void @regmap_debugfs_init(ptr noundef %map) #24
  %cache_bypass = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 54
  %29 = ptrtoint ptr %cache_bypass to i32
  call void @__asan_store1_noabort(i32 %29)
  store i8 0, ptr %cache_bypass, align 1
  %cache_only = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 53
  %30 = ptrtoint ptr %cache_only to i32
  call void @__asan_store1_noabort(i32 %30)
  store i8 0, ptr %cache_only, align 4
  %call9 = tail call i32 @regcache_init(ptr noundef %map, ptr noundef %config) #24
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then.i.cleanup_crit_edge
  %retval.0 = phi i32 [ %call9, %if.end ], [ -12, %if.then.i.cleanup_crit_edge ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local void @regmap_exit(ptr noundef %map) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  tail call void @regcache_exit(ptr noundef %map) #24
  tail call void @regmap_debugfs_exit(ptr noundef %map) #24
  %range_tree.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 68
  %call.i = tail call ptr @rb_first(ptr noundef %range_tree.i) #24
  %tobool.not9.i = icmp eq ptr %call.i, null
  br i1 %tobool.not9.i, label %entry.regmap_range_exit.exit_crit_edge, label %entry.while.body.i_crit_edge

entry.while.body.i_crit_edge:                     ; preds = %entry
  br label %while.body.i

entry.regmap_range_exit.exit_crit_edge:           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_range_exit.exit

while.body.i:                                     ; preds = %while.body.i.while.body.i_crit_edge, %entry.while.body.i_crit_edge
  %next.010.i = phi ptr [ %call1.i, %while.body.i.while.body.i_crit_edge ], [ %call.i, %entry.while.body.i_crit_edge ]
  %call1.i = tail call ptr @rb_next(ptr noundef nonnull %next.010.i) #24
  tail call void @rb_erase(ptr noundef nonnull %next.010.i, ptr noundef %range_tree.i) #24
  tail call void @kfree(ptr noundef nonnull %next.010.i) #24
  %tobool.not.i = icmp eq ptr %call1.i, null
  br i1 %tobool.not.i, label %while.body.i.regmap_range_exit.exit_crit_edge, label %while.body.i.while.body.i_crit_edge

while.body.i.while.body.i_crit_edge:              ; preds = %while.body.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %while.body.i

while.body.i.regmap_range_exit.exit_crit_edge:    ; preds = %while.body.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_range_exit.exit

regmap_range_exit.exit:                           ; preds = %while.body.i.regmap_range_exit.exit_crit_edge, %entry.regmap_range_exit.exit_crit_edge
  %selector_work_buf.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 69
  %0 = ptrtoint ptr %selector_work_buf.i to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %selector_work_buf.i, align 4
  tail call void @kfree(ptr noundef %1) #24
  %bus = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 8
  %2 = ptrtoint ptr %bus to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load ptr, ptr %bus, align 4
  %tobool.not = icmp eq ptr %3, null
  br i1 %tobool.not, label %regmap_range_exit.exit.if.end_crit_edge, label %land.lhs.true

regmap_range_exit.exit.if.end_crit_edge:          ; preds = %regmap_range_exit.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

land.lhs.true:                                    ; preds = %regmap_range_exit.exit
  %free_context = getelementptr inbounds %struct.regmap_bus, ptr %3, i32 0, i32 8
  %4 = ptrtoint ptr %free_context to i32
  call void @__asan_load4_noabort(i32 %4)
  %5 = load ptr, ptr %free_context, align 4
  %tobool2.not = icmp eq ptr %5, null
  br i1 %tobool2.not, label %land.lhs.true.if.end_crit_edge, label %if.then

land.lhs.true.if.end_crit_edge:                   ; preds = %land.lhs.true
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

if.then:                                          ; preds = %land.lhs.true
  call void @__sanitizer_cov_trace_pc() #26
  %bus_context = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 9
  %6 = ptrtoint ptr %bus_context to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load ptr, ptr %bus_context, align 4
  tail call void %5(ptr noundef %7) #24
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true.if.end_crit_edge, %regmap_range_exit.exit.if.end_crit_edge
  %work_buf = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 6
  %8 = ptrtoint ptr %work_buf to i32
  call void @__asan_load4_noabort(i32 %8)
  %9 = load ptr, ptr %work_buf, align 4
  tail call void @kfree(ptr noundef %9) #24
  %async_free = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 15
  %10 = ptrtoint ptr %async_free to i32
  call void @__asan_load4_noabort(i32 %10)
  %11 = load volatile ptr, ptr %async_free, align 4
  %cmp.i.not53 = icmp eq ptr %11, %async_free
  br i1 %cmp.i.not53, label %if.end.while.end_crit_edge, label %if.end.while.body_crit_edge

if.end.while.body_crit_edge:                      ; preds = %if.end
  br label %while.body

if.end.while.end_crit_edge:                       ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #26
  br label %while.end

while.body:                                       ; preds = %list_del.exit.while.body_crit_edge, %if.end.while.body_crit_edge
  %12 = ptrtoint ptr %async_free to i32
  call void @__asan_load4_noabort(i32 %12)
  %13 = load volatile ptr, ptr %async_free, align 4
  %cmp.not = icmp eq ptr %13, %async_free
  %spec.select = select i1 %cmp.not, ptr null, ptr %13
  %call.i.i = tail call zeroext i1 @__list_del_entry_valid(ptr noundef %spec.select) #24
  br i1 %call.i.i, label %if.end.i.i, label %while.body.list_del.exit_crit_edge

while.body.list_del.exit_crit_edge:               ; preds = %while.body
  call void @__sanitizer_cov_trace_pc() #26
  br label %list_del.exit

if.end.i.i:                                       ; preds = %while.body
  call void @__sanitizer_cov_trace_pc() #26
  %prev.i.i = getelementptr inbounds %struct.list_head, ptr %spec.select, i32 0, i32 1
  %14 = ptrtoint ptr %prev.i.i to i32
  call void @__asan_load4_noabort(i32 %14)
  %15 = load ptr, ptr %prev.i.i, align 4
  %16 = ptrtoint ptr %spec.select to i32
  call void @__asan_load4_noabort(i32 %16)
  %17 = load ptr, ptr %spec.select, align 4
  %prev1.i.i.i = getelementptr inbounds %struct.list_head, ptr %17, i32 0, i32 1
  %18 = ptrtoint ptr %prev1.i.i.i to i32
  call void @__asan_store4_noabort(i32 %18)
  store ptr %15, ptr %prev1.i.i.i, align 4
  %19 = ptrtoint ptr %15 to i32
  call void @__asan_store4_noabort(i32 %19)
  store volatile ptr %17, ptr %15, align 4
  br label %list_del.exit

list_del.exit:                                    ; preds = %if.end.i.i, %while.body.list_del.exit_crit_edge
  %20 = ptrtoint ptr %spec.select to i32
  call void @__asan_store4_noabort(i32 %20)
  store ptr inttoptr (i32 256 to ptr), ptr %spec.select, align 4
  %prev.i = getelementptr inbounds %struct.list_head, ptr %spec.select, i32 0, i32 1
  %21 = ptrtoint ptr %prev.i to i32
  call void @__asan_store4_noabort(i32 %21)
  store ptr inttoptr (i32 290 to ptr), ptr %prev.i, align 4
  %work_buf9 = getelementptr inbounds %struct.regmap_async, ptr %spec.select, i32 0, i32 2
  %22 = ptrtoint ptr %work_buf9 to i32
  call void @__asan_load4_noabort(i32 %22)
  %23 = load ptr, ptr %work_buf9, align 4
  tail call void @kfree(ptr noundef %23) #24
  tail call void @kfree(ptr noundef %spec.select) #24
  %24 = ptrtoint ptr %async_free to i32
  call void @__asan_load4_noabort(i32 %24)
  %25 = load volatile ptr, ptr %async_free, align 4
  %cmp.i.not = icmp eq ptr %25, %async_free
  br i1 %cmp.i.not, label %list_del.exit.while.end_crit_edge, label %list_del.exit.while.body_crit_edge

list_del.exit.while.body_crit_edge:               ; preds = %list_del.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %while.body

list_del.exit.while.end_crit_edge:                ; preds = %list_del.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %while.end

while.end:                                        ; preds = %list_del.exit.while.end_crit_edge, %if.end.while.end_crit_edge
  %hwlock = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 70
  %26 = ptrtoint ptr %hwlock to i32
  call void @__asan_load4_noabort(i32 %26)
  %27 = load ptr, ptr %hwlock, align 4
  %tobool10.not = icmp eq ptr %27, null
  br i1 %tobool10.not, label %while.end.if.end14_crit_edge, label %if.then11

while.end.if.end14_crit_edge:                     ; preds = %while.end
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end14

if.then11:                                        ; preds = %while.end
  call void @__sanitizer_cov_trace_pc() #26
  %call13 = tail call i32 @hwspin_lock_free(ptr noundef nonnull %27) #24
  br label %if.end14

if.end14:                                         ; preds = %if.then11, %while.end.if.end14_crit_edge
  %lock = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 1
  %28 = ptrtoint ptr %lock to i32
  call void @__asan_load4_noabort(i32 %28)
  %29 = load ptr, ptr %lock, align 4
  %cmp15 = icmp eq ptr %29, @regmap_lock_mutex
  br i1 %cmp15, label %if.then16, label %if.end14.if.end17_crit_edge

if.end14.if.end17_crit_edge:                      ; preds = %if.end14
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end17

if.then16:                                        ; preds = %if.end14
  call void @__sanitizer_cov_trace_pc() #26
  tail call void @mutex_destroy(ptr noundef %map) #24
  br label %if.end17

if.end17:                                         ; preds = %if.then16, %if.end14.if.end17_crit_edge
  %name = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 10
  %30 = ptrtoint ptr %name to i32
  call void @__asan_load4_noabort(i32 %30)
  %31 = load ptr, ptr %name, align 4
  tail call void @kfree_const(ptr noundef %31) #24
  %patch = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 61
  %32 = ptrtoint ptr %patch to i32
  call void @__asan_load4_noabort(i32 %32)
  %33 = load ptr, ptr %patch, align 4
  tail call void @kfree(ptr noundef %33) #24
  %34 = ptrtoint ptr %bus to i32
  call void @__asan_load4_noabort(i32 %34)
  %35 = load ptr, ptr %bus, align 4
  %tobool19.not = icmp eq ptr %35, null
  br i1 %tobool19.not, label %if.end17.if.end25_crit_edge, label %land.lhs.true20

if.end17.if.end25_crit_edge:                      ; preds = %if.end17
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end25

land.lhs.true20:                                  ; preds = %if.end17
  %free_on_exit = getelementptr inbounds %struct.regmap_bus, ptr %35, i32 0, i32 15
  %36 = ptrtoint ptr %free_on_exit to i32
  call void @__asan_load1_noabort(i32 %36)
  %37 = load i8, ptr %free_on_exit, align 4, !range !389
  call void @__sanitizer_cov_trace_const_cmp1(i8 0, i8 %37)
  %tobool22.not = icmp eq i8 %37, 0
  br i1 %tobool22.not, label %land.lhs.true20.if.end25_crit_edge, label %if.then23

land.lhs.true20.if.end25_crit_edge:               ; preds = %land.lhs.true20
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end25

if.then23:                                        ; preds = %land.lhs.true20
  call void @__sanitizer_cov_trace_pc() #26
  tail call void @kfree(ptr noundef nonnull %35) #24
  br label %if.end25

if.end25:                                         ; preds = %if.then23, %land.lhs.true20.if.end25_crit_edge, %if.end17.if.end25_crit_edge
  tail call void @kfree(ptr noundef %map) #24
  ret void
}

; Function Attrs: null_pointer_is_valid
declare dso_local void @mutex_destroy(ptr noundef) local_unnamed_addr #2

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local ptr @dev_get_regmap(ptr noundef %dev, ptr noundef %name) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %call = tail call ptr @devres_find(ptr noundef %dev, ptr noundef nonnull @dev_get_regmap_release, ptr noundef nonnull @dev_get_regmap_match, ptr noundef %name) #24
  %tobool.not = icmp eq ptr %call, null
  br i1 %tobool.not, label %entry.cleanup_crit_edge, label %if.end

entry.cleanup_crit_edge:                          ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end:                                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  %0 = ptrtoint ptr %call to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %call, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry.cleanup_crit_edge
  %retval.0 = phi ptr [ %1, %if.end ], [ null, %entry.cleanup_crit_edge ]
  ret ptr %retval.0
}

; Function Attrs: null_pointer_is_valid
declare dso_local ptr @devres_find(ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #2

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal i32 @dev_get_regmap_match(ptr nocapture noundef readnone %dev, ptr noundef readonly %res, ptr noundef readonly %data) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %tobool.not = icmp eq ptr %res, null
  br i1 %tobool.not, label %entry.do.end_crit_edge, label %lor.lhs.false

entry.do.end_crit_edge:                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.end

lor.lhs.false:                                    ; preds = %entry
  %0 = ptrtoint ptr %res to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %res, align 4
  %tobool1.not = icmp eq ptr %1, null
  br i1 %tobool1.not, label %lor.lhs.false.do.end_crit_edge, label %if.end25

lor.lhs.false.do.end_crit_edge:                   ; preds = %lor.lhs.false
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.end

do.end:                                           ; preds = %lor.lhs.false.do.end_crit_edge, %entry.do.end_crit_edge
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.15, i32 noundef 1549, i32 noundef 9, ptr noundef null) #24
  br label %cleanup

if.end25:                                         ; preds = %lor.lhs.false
  %tobool26.not = icmp eq ptr %data, null
  br i1 %tobool26.not, label %if.end25.cleanup_crit_edge, label %if.then27

if.end25.cleanup_crit_edge:                       ; preds = %if.end25
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.then27:                                        ; preds = %if.end25
  call void @__sanitizer_cov_trace_pc() #26
  %name = getelementptr inbounds %struct.regmap, ptr %1, i32 0, i32 10
  %2 = ptrtoint ptr %name to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load ptr, ptr %name, align 4
  %call = tail call i32 @strcmp(ptr noundef %3, ptr noundef nonnull %data) #28
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call)
  %tobool28.not = icmp eq i32 %call, 0
  %lnot.ext30 = zext i1 %tobool28.not to i32
  br label %cleanup

cleanup:                                          ; preds = %if.then27, %if.end25.cleanup_crit_edge, %do.end
  %retval.0 = phi i32 [ %lnot.ext30, %if.then27 ], [ 0, %do.end ], [ 1, %if.end25.cleanup_crit_edge ]
  ret i32 %retval.0
}

; Function Attrs: argmemonly mustprogress nofree norecurse nosync nounwind null_pointer_is_valid readonly sanitize_address sspstrong willreturn uwtable(sync)
define dso_local ptr @regmap_get_device(ptr nocapture noundef readonly %map) #8 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %dev = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 5
  %0 = ptrtoint ptr %dev to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %dev, align 4
  ret ptr %1
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind null_pointer_is_valid readonly sanitize_address sspstrong willreturn uwtable(sync)
define dso_local zeroext i1 @regmap_can_raw_write(ptr nocapture noundef readonly %map) #13 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %bus = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 8
  %0 = ptrtoint ptr %bus to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %bus, align 4
  %tobool.not = icmp eq ptr %1, null
  br i1 %tobool.not, label %entry.land.end_crit_edge, label %land.lhs.true

entry.land.end_crit_edge:                         ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %land.end

land.lhs.true:                                    ; preds = %entry
  %write = getelementptr inbounds %struct.regmap_bus, ptr %1, i32 0, i32 1
  %2 = ptrtoint ptr %write to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load ptr, ptr %write, align 4
  %tobool2.not = icmp eq ptr %3, null
  br i1 %tobool2.not, label %land.lhs.true.land.end_crit_edge, label %land.lhs.true3

land.lhs.true.land.end_crit_edge:                 ; preds = %land.lhs.true
  call void @__sanitizer_cov_trace_pc() #26
  br label %land.end

land.lhs.true3:                                   ; preds = %land.lhs.true
  %format_val = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 7, i32 6
  %4 = ptrtoint ptr %format_val to i32
  call void @__asan_load4_noabort(i32 %4)
  %5 = load ptr, ptr %format_val, align 4
  %tobool4.not = icmp eq ptr %5, null
  br i1 %tobool4.not, label %land.lhs.true3.land.end_crit_edge, label %land.rhs

land.lhs.true3.land.end_crit_edge:                ; preds = %land.lhs.true3
  call void @__sanitizer_cov_trace_pc() #26
  br label %land.end

land.rhs:                                         ; preds = %land.lhs.true3
  call void @__sanitizer_cov_trace_pc() #26
  %format_reg = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 7, i32 5
  %6 = ptrtoint ptr %format_reg to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load ptr, ptr %format_reg, align 4
  %tobool6 = icmp ne ptr %7, null
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true3.land.end_crit_edge, %land.lhs.true.land.end_crit_edge, %entry.land.end_crit_edge
  %8 = phi i1 [ false, %land.lhs.true3.land.end_crit_edge ], [ false, %land.lhs.true.land.end_crit_edge ], [ false, %entry.land.end_crit_edge ], [ %tobool6, %land.rhs ]
  ret i1 %8
}

; Function Attrs: argmemonly mustprogress nofree norecurse nosync nounwind null_pointer_is_valid readonly sanitize_address sspstrong willreturn uwtable(sync)
define dso_local i32 @regmap_get_raw_read_max(ptr nocapture noundef readonly %map) #8 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %max_raw_read = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 66
  %0 = ptrtoint ptr %max_raw_read to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load i32, ptr %max_raw_read, align 4
  ret i32 %1
}

; Function Attrs: argmemonly mustprogress nofree norecurse nosync nounwind null_pointer_is_valid readonly sanitize_address sspstrong willreturn uwtable(sync)
define dso_local i32 @regmap_get_raw_write_max(ptr nocapture noundef readonly %map) #8 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %max_raw_write = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 67
  %0 = ptrtoint ptr %max_raw_write to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load i32, ptr %max_raw_write, align 4
  ret i32 %1
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @_regmap_write(ptr noundef %map, i32 noundef %reg, i32 noundef %val) local_unnamed_addr #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %bus.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 8
  %0 = ptrtoint ptr %bus.i to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %bus.i, align 4
  %tobool.not.i = icmp eq ptr %1, null
  br i1 %tobool.not.i, label %cond.false.i, label %entry._regmap_map_get_context.exit_crit_edge

entry._regmap_map_get_context.exit_crit_edge:     ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %_regmap_map_get_context.exit

cond.false.i:                                     ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  %bus_context.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 9
  %2 = ptrtoint ptr %bus_context.i to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load ptr, ptr %bus_context.i, align 4
  br label %_regmap_map_get_context.exit

_regmap_map_get_context.exit:                     ; preds = %cond.false.i, %entry._regmap_map_get_context.exit_crit_edge
  %cond.i = phi ptr [ %3, %cond.false.i ], [ %map, %entry._regmap_map_get_context.exit_crit_edge ]
  %max_register.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 25
  %4 = ptrtoint ptr %max_register.i to i32
  call void @__asan_load4_noabort(i32 %4)
  %5 = load i32, ptr %max_register.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %5)
  %tobool.not.i39 = icmp ne i32 %5, 0
  call void @__sanitizer_cov_trace_cmp4(i32 %5, i32 %reg)
  %cmp.i = icmp ult i32 %5, %reg
  %or.cond.i = and i1 %tobool.not.i39, %cmp.i
  br i1 %or.cond.i, label %_regmap_map_get_context.exit.cleanup_crit_edge, label %if.end.i

_regmap_map_get_context.exit.cleanup_crit_edge:   ; preds = %_regmap_map_get_context.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end.i:                                         ; preds = %_regmap_map_get_context.exit
  %writeable_reg.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 26
  %6 = ptrtoint ptr %writeable_reg.i to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load ptr, ptr %writeable_reg.i, align 4
  %tobool2.not.i = icmp eq ptr %7, null
  br i1 %tobool2.not.i, label %if.end5.i, label %if.then3.i

if.then3.i:                                       ; preds = %if.end.i
  %dev.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 5
  %8 = ptrtoint ptr %dev.i to i32
  call void @__asan_load4_noabort(i32 %8)
  %9 = load ptr, ptr %dev.i, align 4
  %call.i = tail call zeroext i1 %7(ptr noundef %9, i32 noundef %reg) #24
  br i1 %call.i, label %if.then3.i.if.end_crit_edge, label %if.then3.i.cleanup_crit_edge

if.then3.i.cleanup_crit_edge:                     ; preds = %if.then3.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.then3.i.if.end_crit_edge:                      ; preds = %if.then3.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

if.end5.i:                                        ; preds = %if.end.i
  %wr_table.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 32
  %10 = ptrtoint ptr %wr_table.i to i32
  call void @__asan_load4_noabort(i32 %10)
  %11 = load ptr, ptr %wr_table.i, align 4
  %tobool6.not.i = icmp eq ptr %11, null
  br i1 %tobool6.not.i, label %if.end5.i.if.end_crit_edge, label %if.then7.i

if.end5.i.if.end_crit_edge:                       ; preds = %if.end5.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

if.then7.i:                                       ; preds = %if.end5.i
  %n_no_ranges.i.i = getelementptr inbounds %struct.regmap_access_table, ptr %11, i32 0, i32 3
  %12 = ptrtoint ptr %n_no_ranges.i.i to i32
  call void @__asan_load4_noabort(i32 %12)
  %13 = load i32, ptr %n_no_ranges.i.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %13)
  %cmp4.not.i.i.i = icmp eq i32 %13, 0
  br i1 %cmp4.not.i.i.i, label %if.then7.i.if.end.i.i_crit_edge, label %for.body.i.preheader.i.i

if.then7.i.if.end.i.i_crit_edge:                  ; preds = %if.then7.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end.i.i

for.body.i.preheader.i.i:                         ; preds = %if.then7.i
  %no_ranges.i.i = getelementptr inbounds %struct.regmap_access_table, ptr %11, i32 0, i32 2
  %14 = ptrtoint ptr %no_ranges.i.i to i32
  call void @__asan_load4_noabort(i32 %14)
  %15 = load ptr, ptr %no_ranges.i.i, align 4
  br label %for.body.i.i.i

for.body.i.i.i:                                   ; preds = %for.inc.i.i.i.for.body.i.i.i_crit_edge, %for.body.i.preheader.i.i
  %cmp8.i.i.i = phi i1 [ %cmp.i.i.i, %for.inc.i.i.i.for.body.i.i.i_crit_edge ], [ true, %for.body.i.preheader.i.i ]
  %i.07.i.i.i = phi i32 [ %inc.i.i.i, %for.inc.i.i.i.for.body.i.i.i_crit_edge ], [ 0, %for.body.i.preheader.i.i ]
  %r.05.i.i.i = phi ptr [ %incdec.ptr.i.i.i, %for.inc.i.i.i.for.body.i.i.i_crit_edge ], [ %15, %for.body.i.preheader.i.i ]
  %16 = ptrtoint ptr %r.05.i.i.i to i32
  call void @__asan_load4_noabort(i32 %16)
  %17 = load i32, ptr %r.05.i.i.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %17, i32 %reg)
  %cmp.not.i.i.i.i = icmp ugt i32 %17, %reg
  br i1 %cmp.not.i.i.i.i, label %for.body.i.i.i.for.inc.i.i.i_crit_edge, label %regmap_reg_in_range.exit.i.i.i

for.body.i.i.i.for.inc.i.i.i_crit_edge:           ; preds = %for.body.i.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i.i.i

regmap_reg_in_range.exit.i.i.i:                   ; preds = %for.body.i.i.i
  %range_max.i.i.i.i = getelementptr inbounds %struct.regmap_range, ptr %r.05.i.i.i, i32 0, i32 1
  %18 = ptrtoint ptr %range_max.i.i.i.i to i32
  call void @__asan_load4_noabort(i32 %18)
  %19 = load i32, ptr %range_max.i.i.i.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %19, i32 %reg)
  %cmp1.i.not.i.i.i = icmp ult i32 %19, %reg
  br i1 %cmp1.i.not.i.i.i, label %regmap_reg_in_range.exit.i.i.i.for.inc.i.i.i_crit_edge, label %regmap_reg_in_range.exit.i.i.i.regmap_reg_in_ranges.exit.i.i_crit_edge

regmap_reg_in_range.exit.i.i.i.regmap_reg_in_ranges.exit.i.i_crit_edge: ; preds = %regmap_reg_in_range.exit.i.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_reg_in_ranges.exit.i.i

regmap_reg_in_range.exit.i.i.i.for.inc.i.i.i_crit_edge: ; preds = %regmap_reg_in_range.exit.i.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i.i.i

for.inc.i.i.i:                                    ; preds = %regmap_reg_in_range.exit.i.i.i.for.inc.i.i.i_crit_edge, %for.body.i.i.i.for.inc.i.i.i_crit_edge
  %inc.i.i.i = add nuw i32 %i.07.i.i.i, 1
  %incdec.ptr.i.i.i = getelementptr %struct.regmap_range, ptr %r.05.i.i.i, i32 1
  call void @__sanitizer_cov_trace_cmp4(i32 %inc.i.i.i, i32 %13)
  %cmp.i.i.i = icmp ult i32 %inc.i.i.i, %13
  %exitcond.not.i.i.i = icmp eq i32 %inc.i.i.i, %13
  br i1 %exitcond.not.i.i.i, label %for.inc.i.i.i.regmap_reg_in_ranges.exit.i.i_crit_edge, label %for.inc.i.i.i.for.body.i.i.i_crit_edge

for.inc.i.i.i.for.body.i.i.i_crit_edge:           ; preds = %for.inc.i.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body.i.i.i

for.inc.i.i.i.regmap_reg_in_ranges.exit.i.i_crit_edge: ; preds = %for.inc.i.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_reg_in_ranges.exit.i.i

regmap_reg_in_ranges.exit.i.i:                    ; preds = %for.inc.i.i.i.regmap_reg_in_ranges.exit.i.i_crit_edge, %regmap_reg_in_range.exit.i.i.i.regmap_reg_in_ranges.exit.i.i_crit_edge
  %cmp.lcssa.i.i.i = phi i1 [ %cmp.i.i.i, %for.inc.i.i.i.regmap_reg_in_ranges.exit.i.i_crit_edge ], [ %cmp8.i.i.i, %regmap_reg_in_range.exit.i.i.i.regmap_reg_in_ranges.exit.i.i_crit_edge ]
  br i1 %cmp.lcssa.i.i.i, label %regmap_reg_in_ranges.exit.i.i.cleanup_crit_edge, label %regmap_reg_in_ranges.exit.i.i.if.end.i.i_crit_edge

regmap_reg_in_ranges.exit.i.i.if.end.i.i_crit_edge: ; preds = %regmap_reg_in_ranges.exit.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end.i.i

regmap_reg_in_ranges.exit.i.i.cleanup_crit_edge:  ; preds = %regmap_reg_in_ranges.exit.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end.i.i:                                       ; preds = %regmap_reg_in_ranges.exit.i.i.if.end.i.i_crit_edge, %if.then7.i.if.end.i.i_crit_edge
  %n_yes_ranges.i.i = getelementptr inbounds %struct.regmap_access_table, ptr %11, i32 0, i32 1
  %20 = ptrtoint ptr %n_yes_ranges.i.i to i32
  call void @__asan_load4_noabort(i32 %20)
  %21 = load i32, ptr %n_yes_ranges.i.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %21)
  %tobool.not.i.i = icmp eq i32 %21, 0
  br i1 %tobool.not.i.i, label %if.end.i.i.if.end_crit_edge, label %if.end2.i.i

if.end.i.i.if.end_crit_edge:                      ; preds = %if.end.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

if.end2.i.i:                                      ; preds = %if.end.i.i
  %22 = ptrtoint ptr %11 to i32
  call void @__asan_load4_noabort(i32 %22)
  %23 = load ptr, ptr %11, align 4
  br label %for.body.i15.i.i

for.body.i15.i.i:                                 ; preds = %for.inc.i23.i.i.for.body.i15.i.i_crit_edge, %if.end2.i.i
  %cmp8.i11.i.i = phi i1 [ %cmp.i21.i.i, %for.inc.i23.i.i.for.body.i15.i.i_crit_edge ], [ true, %if.end2.i.i ]
  %i.07.i12.i.i = phi i32 [ %inc.i19.i.i, %for.inc.i23.i.i.for.body.i15.i.i_crit_edge ], [ 0, %if.end2.i.i ]
  %r.05.i13.i.i = phi ptr [ %incdec.ptr.i20.i.i, %for.inc.i23.i.i.for.body.i15.i.i_crit_edge ], [ %23, %if.end2.i.i ]
  %24 = ptrtoint ptr %r.05.i13.i.i to i32
  call void @__asan_load4_noabort(i32 %24)
  %25 = load i32, ptr %r.05.i13.i.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %25, i32 %reg)
  %cmp.not.i.i14.i.i = icmp ugt i32 %25, %reg
  br i1 %cmp.not.i.i14.i.i, label %for.body.i15.i.i.for.inc.i23.i.i_crit_edge, label %regmap_reg_in_range.exit.i18.i.i

for.body.i15.i.i.for.inc.i23.i.i_crit_edge:       ; preds = %for.body.i15.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i23.i.i

regmap_reg_in_range.exit.i18.i.i:                 ; preds = %for.body.i15.i.i
  %range_max.i.i16.i.i = getelementptr inbounds %struct.regmap_range, ptr %r.05.i13.i.i, i32 0, i32 1
  %26 = ptrtoint ptr %range_max.i.i16.i.i to i32
  call void @__asan_load4_noabort(i32 %26)
  %27 = load i32, ptr %range_max.i.i16.i.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %27, i32 %reg)
  %cmp1.i.not.i17.i.i = icmp ult i32 %27, %reg
  br i1 %cmp1.i.not.i17.i.i, label %regmap_reg_in_range.exit.i18.i.i.for.inc.i23.i.i_crit_edge, label %regmap_reg_in_range.exit.i18.i.i.regmap_writeable.exit_crit_edge

regmap_reg_in_range.exit.i18.i.i.regmap_writeable.exit_crit_edge: ; preds = %regmap_reg_in_range.exit.i18.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_writeable.exit

regmap_reg_in_range.exit.i18.i.i.for.inc.i23.i.i_crit_edge: ; preds = %regmap_reg_in_range.exit.i18.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i23.i.i

for.inc.i23.i.i:                                  ; preds = %regmap_reg_in_range.exit.i18.i.i.for.inc.i23.i.i_crit_edge, %for.body.i15.i.i.for.inc.i23.i.i_crit_edge
  %inc.i19.i.i = add nuw i32 %i.07.i12.i.i, 1
  %incdec.ptr.i20.i.i = getelementptr %struct.regmap_range, ptr %r.05.i13.i.i, i32 1
  call void @__sanitizer_cov_trace_cmp4(i32 %inc.i19.i.i, i32 %21)
  %cmp.i21.i.i = icmp ult i32 %inc.i19.i.i, %21
  %exitcond.not.i22.i.i = icmp eq i32 %inc.i19.i.i, %21
  br i1 %exitcond.not.i22.i.i, label %for.inc.i23.i.i.regmap_writeable.exit_crit_edge, label %for.inc.i23.i.i.for.body.i15.i.i_crit_edge

for.inc.i23.i.i.for.body.i15.i.i_crit_edge:       ; preds = %for.inc.i23.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body.i15.i.i

for.inc.i23.i.i.regmap_writeable.exit_crit_edge:  ; preds = %for.inc.i23.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_writeable.exit

regmap_writeable.exit:                            ; preds = %for.inc.i23.i.i.regmap_writeable.exit_crit_edge, %regmap_reg_in_range.exit.i18.i.i.regmap_writeable.exit_crit_edge
  %retval.0.i = phi i1 [ %cmp.i21.i.i, %for.inc.i23.i.i.regmap_writeable.exit_crit_edge ], [ %cmp8.i11.i.i, %regmap_reg_in_range.exit.i18.i.i.regmap_writeable.exit_crit_edge ]
  br i1 %retval.0.i, label %regmap_writeable.exit.if.end_crit_edge, label %regmap_writeable.exit.cleanup_crit_edge

regmap_writeable.exit.cleanup_crit_edge:          ; preds = %regmap_writeable.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

regmap_writeable.exit.if.end_crit_edge:           ; preds = %regmap_writeable.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

if.end:                                           ; preds = %regmap_writeable.exit.if.end_crit_edge, %if.end.i.i.if.end_crit_edge, %if.end5.i.if.end_crit_edge, %if.then3.i.if.end_crit_edge
  %cache_bypass = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 54
  %28 = ptrtoint ptr %cache_bypass to i32
  call void @__asan_load1_noabort(i32 %28)
  %29 = load i8, ptr %cache_bypass, align 1, !range !389
  call void @__sanitizer_cov_trace_const_cmp1(i8 0, i8 %29)
  %tobool.not = icmp eq i8 %29, 0
  br i1 %tobool.not, label %land.lhs.true, label %if.end.if.end10_crit_edge

if.end.if.end10_crit_edge:                        ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end10

land.lhs.true:                                    ; preds = %if.end
  %defer_caching = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 41
  %30 = ptrtoint ptr %defer_caching to i32
  call void @__asan_load1_noabort(i32 %30)
  %31 = load i8, ptr %defer_caching, align 4, !range !389
  call void @__sanitizer_cov_trace_const_cmp1(i8 0, i8 %31)
  %tobool2.not = icmp eq i8 %31, 0
  br i1 %tobool2.not, label %if.then3, label %land.lhs.true.if.end10_crit_edge

land.lhs.true.if.end10_crit_edge:                 ; preds = %land.lhs.true
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end10

if.then3:                                         ; preds = %land.lhs.true
  %call4 = tail call i32 @regcache_write(ptr noundef %map, i32 noundef %reg, i32 noundef %val) #24
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call4)
  %cmp.not = icmp eq i32 %call4, 0
  br i1 %cmp.not, label %if.end6, label %if.then3.cleanup_crit_edge

if.then3.cleanup_crit_edge:                       ; preds = %if.then3
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end6:                                          ; preds = %if.then3
  %cache_only = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 53
  %32 = ptrtoint ptr %cache_only to i32
  call void @__asan_load1_noabort(i32 %32)
  %33 = load i8, ptr %cache_only, align 4, !range !389
  call void @__sanitizer_cov_trace_const_cmp1(i8 0, i8 %33)
  %tobool7.not = icmp eq i8 %33, 0
  br i1 %tobool7.not, label %if.end6.if.end10_crit_edge, label %if.then8

if.end6.if.end10_crit_edge:                       ; preds = %if.end6
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end10

if.then8:                                         ; preds = %if.end6
  call void @__sanitizer_cov_trace_pc() #26
  %cache_dirty = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 59
  %34 = ptrtoint ptr %cache_dirty to i32
  call void @__asan_store1_noabort(i32 %34)
  store i8 1, ptr %cache_dirty, align 4
  br label %cleanup

if.end10:                                         ; preds = %if.end6.if.end10_crit_edge, %land.lhs.true.if.end10_crit_edge, %if.end.if.end10_crit_edge
  %reg_write = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 39
  %35 = ptrtoint ptr %reg_write to i32
  call void @__asan_load4_noabort(i32 %35)
  %36 = load ptr, ptr %reg_write, align 4
  %call11 = tail call i32 %36(ptr noundef %cond.i, i32 noundef %reg, i32 noundef %val) #24
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call11)
  %cmp12 = icmp eq i32 %call11, 0
  br i1 %cmp12, label %if.then13, label %if.end10.cleanup_crit_edge

if.end10.cleanup_crit_edge:                       ; preds = %if.end10
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.then13:                                        ; preds = %if.end10
  call void @__sanitizer_cov_trace_pc() #26
  tail call fastcc void @trace_regmap_reg_write(ptr noundef %map, i32 noundef %reg, i32 noundef %val)
  br label %cleanup

cleanup:                                          ; preds = %if.then13, %if.end10.cleanup_crit_edge, %if.then8, %if.then3.cleanup_crit_edge, %regmap_writeable.exit.cleanup_crit_edge, %regmap_reg_in_ranges.exit.i.i.cleanup_crit_edge, %if.then3.i.cleanup_crit_edge, %_regmap_map_get_context.exit.cleanup_crit_edge
  %retval.0 = phi i32 [ 0, %if.then8 ], [ -5, %regmap_writeable.exit.cleanup_crit_edge ], [ %call4, %if.then3.cleanup_crit_edge ], [ 0, %if.then13 ], [ %call11, %if.end10.cleanup_crit_edge ], [ -5, %if.then3.i.cleanup_crit_edge ], [ -5, %_regmap_map_get_context.exit.cleanup_crit_edge ], [ -5, %regmap_reg_in_ranges.exit.i.i.cleanup_crit_edge ]
  ret i32 %retval.0
}

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @regcache_write(ptr noundef, i32 noundef, i32 noundef) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal fastcc void @trace_regmap_reg_write(ptr noundef %map, i32 noundef %reg, i32 noundef %val) unnamed_addr #14 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  callbr void asm sideeffect "1:\0A\09nop\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr getelementptr inbounds ({ ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr }, ptr @__tracepoint_regmap_reg_write, i32 0, i32 1, i32 0, i32 0), ptr blockaddress(@trace_regmap_reg_write, %do.body)) #24
          to label %if.end48 [label %do.body], !srcloc !391

do.body:                                          ; preds = %entry
  %0 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i = and i32 %0, -16384
  %1 = inttoptr i32 %and.i to ptr
  %cpu = getelementptr inbounds %struct.thread_info, ptr %1, i32 0, i32 3
  %2 = ptrtoint ptr %cpu to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load i32, ptr %cpu, align 4
  call void @__asan_load4_noabort(i32 ptrtoint (ptr @nr_cpu_ids to i32))
  %4 = load i32, ptr @nr_cpu_ids, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %4, i32 %3)
  %cmp.not.i.i.i.i = icmp ugt i32 %4, %3
  br i1 %cmp.not.i.i.i.i, label %do.body.cpu_online.exit_crit_edge, label %land.rhs.i.i.i.i

do.body.cpu_online.exit_crit_edge:                ; preds = %do.body
  call void @__sanitizer_cov_trace_pc() #26
  br label %cpu_online.exit

land.rhs.i.i.i.i:                                 ; preds = %do.body
  %.b37.i.i.i.i = load i1, ptr @cpu_max_bits_warn.__already_done, align 1
  br i1 %.b37.i.i.i.i, label %land.rhs.i.i.i.i.cpu_online.exit_crit_edge, label %if.then.i.i.i.i, !prof !386

land.rhs.i.i.i.i.cpu_online.exit_crit_edge:       ; preds = %land.rhs.i.i.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %cpu_online.exit

if.then.i.i.i.i:                                  ; preds = %land.rhs.i.i.i.i
  call void @__sanitizer_cov_trace_pc() #26
  store i1 true, ptr @cpu_max_bits_warn.__already_done, align 1
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.62, i32 noundef 108, i32 noundef 9, ptr noundef null) #24
  br label %cpu_online.exit

cpu_online.exit:                                  ; preds = %if.then.i.i.i.i, %land.rhs.i.i.i.i.cpu_online.exit_crit_edge, %do.body.cpu_online.exit_crit_edge
  %div1.i.i.i = lshr i32 %3, 5
  %arrayidx.i.i.i = getelementptr i32, ptr @__cpu_online_mask, i32 %div1.i.i.i
  %5 = ptrtoint ptr %arrayidx.i.i.i to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load volatile i32, ptr %arrayidx.i.i.i, align 4
  %and.i.i.i75 = and i32 %3, 31
  %7 = shl nuw i32 1, %and.i.i.i75
  %8 = and i32 %6, %7
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %8)
  %tobool.i.not = icmp eq i32 %8, 0
  br i1 %tobool.i.not, label %cpu_online.exit.if.end69_crit_edge, label %if.end31

cpu_online.exit.if.end69_crit_edge:               ; preds = %cpu_online.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end69

if.end31:                                         ; preds = %cpu_online.exit
  %9 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i.i.i = and i32 %9, -16384
  %10 = inttoptr i32 %and.i.i.i to ptr
  %preempt_count.i.i = getelementptr inbounds %struct.thread_info, ptr %10, i32 0, i32 1
  %11 = ptrtoint ptr %preempt_count.i.i to i32
  call void @__asan_load4_noabort(i32 %11)
  %12 = load volatile i32, ptr %preempt_count.i.i, align 4
  %add.i = add i32 %12, 1
  store volatile i32 %add.i, ptr %preempt_count.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !392
  %13 = load volatile ptr, ptr getelementptr inbounds ({ ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr }, ptr @__tracepoint_regmap_reg_write, i32 0, i32 7), align 4
  %tobool.not.i = icmp eq ptr %13, null
  br i1 %tobool.not.i, label %if.end48.critedge, label %if.end31.do.body2.i_crit_edge

if.end31.do.body2.i_crit_edge:                    ; preds = %if.end31
  br label %do.body2.i

do.body2.i:                                       ; preds = %do.body2.i.do.body2.i_crit_edge, %if.end31.do.body2.i_crit_edge
  %it_func_ptr.0.i = phi ptr [ %incdec.ptr.i, %do.body2.i.do.body2.i_crit_edge ], [ %13, %if.end31.do.body2.i_crit_edge ]
  %14 = ptrtoint ptr %it_func_ptr.0.i to i32
  call void @__asan_load4_noabort(i32 %14)
  %15 = load volatile ptr, ptr %it_func_ptr.0.i, align 4
  %data.i = getelementptr inbounds %struct.tracepoint_func, ptr %it_func_ptr.0.i, i32 0, i32 1
  %16 = ptrtoint ptr %data.i to i32
  call void @__asan_load4_noabort(i32 %16)
  %17 = load ptr, ptr %data.i, align 4
  tail call void %15(ptr noundef %17, ptr noundef %map, i32 noundef %reg, i32 noundef %val) #24
  %incdec.ptr.i = getelementptr %struct.tracepoint_func, ptr %it_func_ptr.0.i, i32 1
  %18 = ptrtoint ptr %incdec.ptr.i to i32
  call void @__asan_load4_noabort(i32 %18)
  %19 = load ptr, ptr %incdec.ptr.i, align 4
  %tobool9.not.i = icmp eq ptr %19, null
  br i1 %tobool9.not.i, label %cleanup, label %do.body2.i.do.body2.i_crit_edge

do.body2.i.do.body2.i_crit_edge:                  ; preds = %do.body2.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.body2.i

cleanup:                                          ; preds = %do.body2.i
  call void @__sanitizer_cov_trace_pc() #26
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !393
  br label %if.end48.sink.split

if.end48.critedge:                                ; preds = %if.end31
  call void @__sanitizer_cov_trace_pc() #26
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !393
  br label %if.end48.sink.split

if.end48.sink.split:                              ; preds = %if.end48.critedge, %cleanup
  %20 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i.i.i73.c = and i32 %20, -16384
  %21 = inttoptr i32 %and.i.i.i73.c to ptr
  %preempt_count.i.i74.c = getelementptr inbounds %struct.thread_info, ptr %21, i32 0, i32 1
  %22 = ptrtoint ptr %preempt_count.i.i74.c to i32
  call void @__asan_load4_noabort(i32 %22)
  %23 = load volatile i32, ptr %preempt_count.i.i74.c, align 4
  %sub.i = add i32 %23, -1
  store volatile i32 %sub.i, ptr %preempt_count.i.i74.c, align 4
  br label %if.end48

if.end48:                                         ; preds = %if.end48.sink.split, %entry
  %24 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i76 = and i32 %24, -16384
  %25 = inttoptr i32 %and.i76 to ptr
  %cpu50 = getelementptr inbounds %struct.thread_info, ptr %25, i32 0, i32 3
  %26 = ptrtoint ptr %cpu50 to i32
  call void @__asan_load4_noabort(i32 %26)
  %27 = load i32, ptr %cpu50, align 4
  call void @__asan_load4_noabort(i32 ptrtoint (ptr @nr_cpu_ids to i32))
  %28 = load i32, ptr @nr_cpu_ids, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %28, i32 %27)
  %cmp.not.i.i.i.i77 = icmp ugt i32 %28, %27
  br i1 %cmp.not.i.i.i.i77, label %if.end48.cpu_online.exit85_crit_edge, label %land.rhs.i.i.i.i79

if.end48.cpu_online.exit85_crit_edge:             ; preds = %if.end48
  call void @__sanitizer_cov_trace_pc() #26
  br label %cpu_online.exit85

land.rhs.i.i.i.i79:                               ; preds = %if.end48
  %.b37.i.i.i.i78 = load i1, ptr @cpu_max_bits_warn.__already_done, align 1
  br i1 %.b37.i.i.i.i78, label %land.rhs.i.i.i.i79.cpu_online.exit85_crit_edge, label %if.then.i.i.i.i80, !prof !386

land.rhs.i.i.i.i79.cpu_online.exit85_crit_edge:   ; preds = %land.rhs.i.i.i.i79
  call void @__sanitizer_cov_trace_pc() #26
  br label %cpu_online.exit85

if.then.i.i.i.i80:                                ; preds = %land.rhs.i.i.i.i79
  call void @__sanitizer_cov_trace_pc() #26
  store i1 true, ptr @cpu_max_bits_warn.__already_done, align 1
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.62, i32 noundef 108, i32 noundef 9, ptr noundef null) #24
  br label %cpu_online.exit85

cpu_online.exit85:                                ; preds = %if.then.i.i.i.i80, %land.rhs.i.i.i.i79.cpu_online.exit85_crit_edge, %if.end48.cpu_online.exit85_crit_edge
  %div1.i.i.i81 = lshr i32 %27, 5
  %arrayidx.i.i.i82 = getelementptr i32, ptr @__cpu_online_mask, i32 %div1.i.i.i81
  %29 = ptrtoint ptr %arrayidx.i.i.i82 to i32
  call void @__asan_load4_noabort(i32 %29)
  %30 = load volatile i32, ptr %arrayidx.i.i.i82, align 4
  %and.i.i.i83 = and i32 %27, 31
  %31 = shl nuw i32 1, %and.i.i.i83
  %32 = and i32 %30, %31
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %32)
  %tobool.i84.not = icmp eq i32 %32, 0
  br i1 %tobool.i84.not, label %cpu_online.exit85.if.end69_crit_edge, label %if.then52

cpu_online.exit85.if.end69_crit_edge:             ; preds = %cpu_online.exit85
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end69

if.then52:                                        ; preds = %cpu_online.exit85
  %33 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i.i.i.i = and i32 %33, -16384
  %34 = inttoptr i32 %and.i.i.i.i to ptr
  %preempt_count.i.i.i = getelementptr inbounds %struct.thread_info, ptr %34, i32 0, i32 1
  %35 = ptrtoint ptr %preempt_count.i.i.i to i32
  call void @__asan_load4_noabort(i32 %35)
  %36 = load volatile i32, ptr %preempt_count.i.i.i, align 4
  %add.i.i = add i32 %36, 1
  store volatile i32 %add.i.i, ptr %preempt_count.i.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !394
  %37 = load volatile ptr, ptr getelementptr inbounds ({ ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr }, ptr @__tracepoint_regmap_reg_write, i32 0, i32 7), align 4
  %call58 = tail call i32 @rcu_read_lock_sched_held() #24
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call58)
  %tobool59.not = icmp eq i32 %call58, 0
  br i1 %tobool59.not, label %land.lhs.true, label %if.then52.do.end67_crit_edge

if.then52.do.end67_crit_edge:                     ; preds = %if.then52
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.end67

land.lhs.true:                                    ; preds = %if.then52
  %call60 = tail call i32 @debug_lockdep_rcu_enabled() #24
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call60)
  %tobool61.not = icmp eq i32 %call60, 0
  br i1 %tobool61.not, label %land.lhs.true.do.end67_crit_edge, label %land.lhs.true62

land.lhs.true.do.end67_crit_edge:                 ; preds = %land.lhs.true
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.end67

land.lhs.true62:                                  ; preds = %land.lhs.true
  %.b72 = load i1, ptr @trace_regmap_reg_write.__warned, align 1
  br i1 %.b72, label %land.lhs.true62.do.end67_crit_edge, label %if.then64

land.lhs.true62.do.end67_crit_edge:               ; preds = %land.lhs.true62
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.end67

if.then64:                                        ; preds = %land.lhs.true62
  call void @__sanitizer_cov_trace_pc() #26
  store i1 true, ptr @trace_regmap_reg_write.__warned, align 1
  tail call void @lockdep_rcu_suspicious(ptr noundef nonnull @.str.60, i32 noundef 47, ptr noundef nonnull @.str.61) #24
  br label %do.end67

do.end67:                                         ; preds = %if.then64, %land.lhs.true62.do.end67_crit_edge, %land.lhs.true.do.end67_crit_edge, %if.then52.do.end67_crit_edge
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !395
  %38 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i.i.i.i86 = and i32 %38, -16384
  %39 = inttoptr i32 %and.i.i.i.i86 to ptr
  %preempt_count.i.i.i87 = getelementptr inbounds %struct.thread_info, ptr %39, i32 0, i32 1
  %40 = ptrtoint ptr %preempt_count.i.i.i87 to i32
  call void @__asan_load4_noabort(i32 %40)
  %41 = load volatile i32, ptr %preempt_count.i.i.i87, align 4
  %sub.i.i = add i32 %41, -1
  store volatile i32 %sub.i.i, ptr %preempt_count.i.i.i87, align 4
  br label %if.end69

if.end69:                                         ; preds = %do.end67, %cpu_online.exit85.if.end69_crit_edge, %cpu_online.exit.if.end69_crit_edge
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @regmap_write(ptr noundef %map, i32 noundef %reg, i32 noundef %val) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %reg_stride = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 45
  %0 = ptrtoint ptr %reg_stride to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load i32, ptr %reg_stride, align 4
  %sub = add i32 %1, -1
  %and = and i32 %sub, %reg
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and)
  %cmp = icmp eq i32 %and, 0
  br i1 %cmp, label %if.end, label %entry.cleanup_crit_edge

entry.cleanup_crit_edge:                          ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end:                                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  %lock = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 1
  %2 = ptrtoint ptr %lock to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load ptr, ptr %lock, align 4
  %lock_arg = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 3
  %4 = ptrtoint ptr %lock_arg to i32
  call void @__asan_load4_noabort(i32 %4)
  %5 = load ptr, ptr %lock_arg, align 4
  tail call void %3(ptr noundef %5) #24
  %call = tail call i32 @_regmap_write(ptr noundef %map, i32 noundef %reg, i32 noundef %val)
  %unlock = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 2
  %6 = ptrtoint ptr %unlock to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load ptr, ptr %unlock, align 4
  %8 = ptrtoint ptr %lock_arg to i32
  call void @__asan_load4_noabort(i32 %8)
  %9 = load ptr, ptr %lock_arg, align 4
  tail call void %7(ptr noundef %9) #24
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry.cleanup_crit_edge
  %retval.0 = phi i32 [ %call, %if.end ], [ -22, %entry.cleanup_crit_edge ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @regmap_write_async(ptr noundef %map, i32 noundef %reg, i32 noundef %val) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %reg_stride = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 45
  %0 = ptrtoint ptr %reg_stride to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load i32, ptr %reg_stride, align 4
  %sub = add i32 %1, -1
  %and = and i32 %sub, %reg
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and)
  %cmp = icmp eq i32 %and, 0
  br i1 %cmp, label %if.end, label %entry.cleanup_crit_edge

entry.cleanup_crit_edge:                          ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end:                                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  %lock = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 1
  %2 = ptrtoint ptr %lock to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load ptr, ptr %lock, align 4
  %lock_arg = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 3
  %4 = ptrtoint ptr %lock_arg to i32
  call void @__asan_load4_noabort(i32 %4)
  %5 = load ptr, ptr %lock_arg, align 4
  tail call void %3(ptr noundef %5) #24
  %async = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 11
  %6 = ptrtoint ptr %async to i32
  call void @__asan_store1_noabort(i32 %6)
  store i8 1, ptr %async, align 4
  %call = tail call i32 @_regmap_write(ptr noundef %map, i32 noundef %reg, i32 noundef %val)
  %7 = ptrtoint ptr %async to i32
  call void @__asan_store1_noabort(i32 %7)
  store i8 0, ptr %async, align 4
  %unlock = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 2
  %8 = ptrtoint ptr %unlock to i32
  call void @__asan_load4_noabort(i32 %8)
  %9 = load ptr, ptr %unlock, align 4
  %10 = ptrtoint ptr %lock_arg to i32
  call void @__asan_load4_noabort(i32 %10)
  %11 = load ptr, ptr %lock_arg, align 4
  tail call void %9(ptr noundef %11) #24
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry.cleanup_crit_edge
  %retval.0 = phi i32 [ %call, %if.end ], [ -22, %entry.cleanup_crit_edge ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @_regmap_raw_write(ptr noundef %map, i32 noundef %reg, ptr noundef %val, i32 noundef %val_len, i1 noundef zeroext %noinc) local_unnamed_addr #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %val_bytes1 = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 7, i32 3
  %0 = ptrtoint ptr %val_bytes1 to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load i32, ptr %val_bytes1, align 4
  %div = udiv i32 %val_len, %1
  call void @__sanitizer_cov_trace_cmp4(i32 %1, i32 %val_len)
  %tobool.not = icmp ugt i32 %1, %val_len
  br i1 %tobool.not, label %entry.cleanup_crit_edge, label %if.end

entry.cleanup_crit_edge:                          ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end:                                           ; preds = %entry
  %use_single_write = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 64
  %2 = ptrtoint ptr %use_single_write to i32
  call void @__asan_load1_noabort(i32 %2)
  %3 = load i8, ptr %use_single_write, align 1, !range !389
  call void @__sanitizer_cov_trace_const_cmp1(i8 0, i8 %3)
  %tobool2.not = icmp eq i8 %3, 0
  br i1 %tobool2.not, label %if.else, label %if.end.if.end10_crit_edge

if.end.if.end10_crit_edge:                        ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end10

if.else:                                          ; preds = %if.end
  %max_raw_write = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 67
  %4 = ptrtoint ptr %max_raw_write to i32
  call void @__asan_load4_noabort(i32 %4)
  %5 = load i32, ptr %max_raw_write, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %5)
  %tobool4.not = icmp ne i32 %5, 0
  call void @__sanitizer_cov_trace_cmp4(i32 %5, i32 %val_len)
  %cmp = icmp ult i32 %5, %val_len
  %or.cond = and i1 %tobool4.not, %cmp
  br i1 %or.cond, label %if.then6, label %if.else.for.body.lr.ph_crit_edge

if.else.for.body.lr.ph_crit_edge:                 ; preds = %if.else
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body.lr.ph

if.then6:                                         ; preds = %if.else
  call void @__sanitizer_cov_trace_pc() #26
  %div8 = udiv i32 %5, %1
  br label %if.end10

if.end10:                                         ; preds = %if.then6, %if.end.if.end10_crit_edge
  %chunk_regs.0 = phi i32 [ %div8, %if.then6 ], [ 1, %if.end.if.end10_crit_edge ]
  %div11 = udiv i32 %div, %chunk_regs.0
  call void @__sanitizer_cov_trace_cmp4(i32 %chunk_regs.0, i32 %div)
  %cmp1260.not = icmp ugt i32 %chunk_regs.0, %div
  br i1 %cmp1260.not, label %if.end10.for.end_crit_edge, label %if.end10.for.body.lr.ph_crit_edge

if.end10.for.body.lr.ph_crit_edge:                ; preds = %if.end10
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body.lr.ph

if.end10.for.end_crit_edge:                       ; preds = %if.end10
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.end

for.body.lr.ph:                                   ; preds = %if.end10.for.body.lr.ph_crit_edge, %if.else.for.body.lr.ph_crit_edge
  %div1174 = phi i32 [ %div11, %if.end10.for.body.lr.ph_crit_edge ], [ 1, %if.else.for.body.lr.ph_crit_edge ]
  %chunk_regs.073 = phi i32 [ %chunk_regs.0, %if.end10.for.body.lr.ph_crit_edge ], [ %div, %if.else.for.body.lr.ph_crit_edge ]
  %mul75 = mul i32 %chunk_regs.073, %1
  %reg_stride_order.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 46
  %reg_stride.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 45
  %umax = call i32 @llvm.umax.i32(i32 %div1174, i32 1)
  br label %for.body

for.body:                                         ; preds = %regmap_get_offset.exit.for.body_crit_edge, %for.body.lr.ph
  %i.064 = phi i32 [ 0, %for.body.lr.ph ], [ %inc, %regmap_get_offset.exit.for.body_crit_edge ]
  %val_len.addr.063 = phi i32 [ %val_len, %for.body.lr.ph ], [ %sub, %regmap_get_offset.exit.for.body_crit_edge ]
  %val.addr.062 = phi ptr [ %val, %for.body.lr.ph ], [ %add.ptr, %regmap_get_offset.exit.for.body_crit_edge ]
  %reg.addr.061 = phi i32 [ %reg, %for.body.lr.ph ], [ %add, %regmap_get_offset.exit.for.body_crit_edge ]
  %call = tail call fastcc i32 @_regmap_raw_write_impl(ptr noundef %map, i32 noundef %reg.addr.061, ptr noundef %val.addr.062, i32 noundef %mul75, i1 noundef zeroext %noinc)
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call)
  %tobool14.not = icmp eq i32 %call, 0
  br i1 %tobool14.not, label %if.end16, label %for.body.cleanup_crit_edge

for.body.cleanup_crit_edge:                       ; preds = %for.body
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end16:                                         ; preds = %for.body
  %6 = ptrtoint ptr %reg_stride_order.i to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load i32, ptr %reg_stride_order.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %7)
  %cmp.i = icmp sgt i32 %7, -1
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.end16
  call void @__sanitizer_cov_trace_pc() #26
  %shl.i = shl i32 %chunk_regs.073, %7
  br label %regmap_get_offset.exit

if.else.i:                                        ; preds = %if.end16
  call void @__sanitizer_cov_trace_pc() #26
  %8 = ptrtoint ptr %reg_stride.i to i32
  call void @__asan_load4_noabort(i32 %8)
  %9 = load i32, ptr %reg_stride.i, align 4
  %mul.i = mul i32 %9, %chunk_regs.073
  br label %regmap_get_offset.exit

regmap_get_offset.exit:                           ; preds = %if.else.i, %if.then.i
  %retval.0.i = phi i32 [ %shl.i, %if.then.i ], [ %mul.i, %if.else.i ]
  %add = add i32 %retval.0.i, %reg.addr.061
  %add.ptr = getelementptr i8, ptr %val.addr.062, i32 %mul75
  %sub = sub i32 %val_len.addr.063, %mul75
  %inc = add nuw i32 %i.064, 1
  %exitcond.not = icmp eq i32 %inc, %umax
  br i1 %exitcond.not, label %regmap_get_offset.exit.for.end_crit_edge, label %regmap_get_offset.exit.for.body_crit_edge

regmap_get_offset.exit.for.body_crit_edge:        ; preds = %regmap_get_offset.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body

regmap_get_offset.exit.for.end_crit_edge:         ; preds = %regmap_get_offset.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.end

for.end:                                          ; preds = %regmap_get_offset.exit.for.end_crit_edge, %if.end10.for.end_crit_edge
  %reg.addr.0.lcssa = phi i32 [ %reg, %if.end10.for.end_crit_edge ], [ %add, %regmap_get_offset.exit.for.end_crit_edge ]
  %val.addr.0.lcssa = phi ptr [ %val, %if.end10.for.end_crit_edge ], [ %add.ptr, %regmap_get_offset.exit.for.end_crit_edge ]
  %val_len.addr.0.lcssa = phi i32 [ %val_len, %if.end10.for.end_crit_edge ], [ %sub, %regmap_get_offset.exit.for.end_crit_edge ]
  %ret.0.lcssa = phi i32 [ -1, %if.end10.for.end_crit_edge ], [ 0, %regmap_get_offset.exit.for.end_crit_edge ]
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %val_len.addr.0.lcssa)
  %tobool18.not = icmp eq i32 %val_len.addr.0.lcssa, 0
  br i1 %tobool18.not, label %for.end.cleanup_crit_edge, label %if.then19

for.end.cleanup_crit_edge:                        ; preds = %for.end
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.then19:                                        ; preds = %for.end
  call void @__sanitizer_cov_trace_pc() #26
  %call21 = tail call fastcc i32 @_regmap_raw_write_impl(ptr noundef %map, i32 noundef %reg.addr.0.lcssa, ptr noundef %val.addr.0.lcssa, i32 noundef %val_len.addr.0.lcssa, i1 noundef zeroext %noinc)
  br label %cleanup

cleanup:                                          ; preds = %if.then19, %for.end.cleanup_crit_edge, %for.body.cleanup_crit_edge, %entry.cleanup_crit_edge
  %retval.0 = phi i32 [ -22, %entry.cleanup_crit_edge ], [ %call21, %if.then19 ], [ %ret.0.lcssa, %for.end.cleanup_crit_edge ], [ %call, %for.body.cleanup_crit_edge ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal fastcc i32 @_regmap_raw_write_impl(ptr noundef %map, i32 noundef %reg, ptr noundef %val, i32 noundef %val_len, i1 noundef zeroext %noinc) unnamed_addr #0 align 64 {
entry:
  %reg.addr = alloca i32, align 4
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = ptrtoint ptr %reg.addr to i32
  call void @__asan_store4_noabort(i32 %0)
  store i32 %reg, ptr %reg.addr, align 4
  %work_buf = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 6
  %1 = ptrtoint ptr %work_buf to i32
  call void @__asan_load4_noabort(i32 %1)
  %2 = load ptr, ptr %work_buf, align 4
  %format = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 7
  %reg_bytes = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 7, i32 1
  %3 = ptrtoint ptr %reg_bytes to i32
  call void @__asan_load4_noabort(i32 %3)
  %4 = load i32, ptr %reg_bytes, align 4
  %add.ptr = getelementptr i8, ptr %2, i32 %4
  %pad_bytes = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 7, i32 2
  %5 = ptrtoint ptr %pad_bytes to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load i32, ptr %pad_bytes, align 4
  %add.ptr2 = getelementptr i8, ptr %add.ptr, i32 %6
  %bus = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 8
  %7 = ptrtoint ptr %bus to i32
  call void @__asan_load4_noabort(i32 %7)
  %8 = load ptr, ptr %bus, align 4
  %tobool.not = icmp eq ptr %8, null
  br i1 %tobool.not, label %do.end, label %entry.if.end_crit_edge, !prof !387

entry.if.end_crit_edge:                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

do.end:                                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.15, i32 noundef 1671, i32 noundef 9, ptr noundef null) #24
  br label %if.end

if.end:                                           ; preds = %do.end, %entry.if.end_crit_edge
  %writeable_noinc_reg.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 30
  %9 = ptrtoint ptr %writeable_noinc_reg.i to i32
  call void @__asan_load4_noabort(i32 %9)
  %10 = load ptr, ptr %writeable_noinc_reg.i, align 4
  %tobool.not.i = icmp eq ptr %10, null
  br i1 %tobool.not.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %if.end
  %dev.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 5
  %11 = ptrtoint ptr %dev.i to i32
  call void @__asan_load4_noabort(i32 %11)
  %12 = load ptr, ptr %dev.i, align 4
  %call.i = tail call zeroext i1 %10(ptr noundef %12, i32 noundef %reg) #24
  br i1 %call.i, label %if.then.i.if.end30_crit_edge, label %if.then.i.for.cond.preheader_crit_edge

if.then.i.for.cond.preheader_crit_edge:           ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.cond.preheader

if.then.i.if.end30_crit_edge:                     ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end30

if.end.i:                                         ; preds = %if.end
  %wr_noinc_table.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 36
  %13 = ptrtoint ptr %wr_noinc_table.i to i32
  call void @__asan_load4_noabort(i32 %13)
  %14 = load ptr, ptr %wr_noinc_table.i, align 4
  %tobool2.not.i = icmp eq ptr %14, null
  br i1 %tobool2.not.i, label %if.end.i.if.end30_crit_edge, label %if.then3.i

if.end.i.if.end30_crit_edge:                      ; preds = %if.end.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end30

if.then3.i:                                       ; preds = %if.end.i
  %n_no_ranges.i.i = getelementptr inbounds %struct.regmap_access_table, ptr %14, i32 0, i32 3
  %15 = ptrtoint ptr %n_no_ranges.i.i to i32
  call void @__asan_load4_noabort(i32 %15)
  %16 = load i32, ptr %n_no_ranges.i.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %16)
  %cmp4.not.i.i.i = icmp eq i32 %16, 0
  br i1 %cmp4.not.i.i.i, label %if.then3.i.if.end.i.i_crit_edge, label %for.body.i.preheader.i.i

if.then3.i.if.end.i.i_crit_edge:                  ; preds = %if.then3.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end.i.i

for.body.i.preheader.i.i:                         ; preds = %if.then3.i
  %no_ranges.i.i = getelementptr inbounds %struct.regmap_access_table, ptr %14, i32 0, i32 2
  %17 = ptrtoint ptr %no_ranges.i.i to i32
  call void @__asan_load4_noabort(i32 %17)
  %18 = load ptr, ptr %no_ranges.i.i, align 4
  br label %for.body.i.i.i

for.body.i.i.i:                                   ; preds = %for.inc.i.i.i.for.body.i.i.i_crit_edge, %for.body.i.preheader.i.i
  %cmp8.i.i.i = phi i1 [ %cmp.i.i.i, %for.inc.i.i.i.for.body.i.i.i_crit_edge ], [ true, %for.body.i.preheader.i.i ]
  %i.07.i.i.i = phi i32 [ %inc.i.i.i, %for.inc.i.i.i.for.body.i.i.i_crit_edge ], [ 0, %for.body.i.preheader.i.i ]
  %r.05.i.i.i = phi ptr [ %incdec.ptr.i.i.i, %for.inc.i.i.i.for.body.i.i.i_crit_edge ], [ %18, %for.body.i.preheader.i.i ]
  %19 = ptrtoint ptr %r.05.i.i.i to i32
  call void @__asan_load4_noabort(i32 %19)
  %20 = load i32, ptr %r.05.i.i.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %20, i32 %reg)
  %cmp.not.i.i.i.i = icmp ugt i32 %20, %reg
  br i1 %cmp.not.i.i.i.i, label %for.body.i.i.i.for.inc.i.i.i_crit_edge, label %regmap_reg_in_range.exit.i.i.i

for.body.i.i.i.for.inc.i.i.i_crit_edge:           ; preds = %for.body.i.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i.i.i

regmap_reg_in_range.exit.i.i.i:                   ; preds = %for.body.i.i.i
  %range_max.i.i.i.i = getelementptr inbounds %struct.regmap_range, ptr %r.05.i.i.i, i32 0, i32 1
  %21 = ptrtoint ptr %range_max.i.i.i.i to i32
  call void @__asan_load4_noabort(i32 %21)
  %22 = load i32, ptr %range_max.i.i.i.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %22, i32 %reg)
  %cmp1.i.not.i.i.i = icmp ult i32 %22, %reg
  br i1 %cmp1.i.not.i.i.i, label %regmap_reg_in_range.exit.i.i.i.for.inc.i.i.i_crit_edge, label %regmap_reg_in_range.exit.i.i.i.regmap_reg_in_ranges.exit.i.i_crit_edge

regmap_reg_in_range.exit.i.i.i.regmap_reg_in_ranges.exit.i.i_crit_edge: ; preds = %regmap_reg_in_range.exit.i.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_reg_in_ranges.exit.i.i

regmap_reg_in_range.exit.i.i.i.for.inc.i.i.i_crit_edge: ; preds = %regmap_reg_in_range.exit.i.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i.i.i

for.inc.i.i.i:                                    ; preds = %regmap_reg_in_range.exit.i.i.i.for.inc.i.i.i_crit_edge, %for.body.i.i.i.for.inc.i.i.i_crit_edge
  %inc.i.i.i = add nuw i32 %i.07.i.i.i, 1
  %incdec.ptr.i.i.i = getelementptr %struct.regmap_range, ptr %r.05.i.i.i, i32 1
  call void @__sanitizer_cov_trace_cmp4(i32 %inc.i.i.i, i32 %16)
  %cmp.i.i.i = icmp ult i32 %inc.i.i.i, %16
  %exitcond.not.i.i.i = icmp eq i32 %inc.i.i.i, %16
  br i1 %exitcond.not.i.i.i, label %for.inc.i.i.i.regmap_reg_in_ranges.exit.i.i_crit_edge, label %for.inc.i.i.i.for.body.i.i.i_crit_edge

for.inc.i.i.i.for.body.i.i.i_crit_edge:           ; preds = %for.inc.i.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body.i.i.i

for.inc.i.i.i.regmap_reg_in_ranges.exit.i.i_crit_edge: ; preds = %for.inc.i.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_reg_in_ranges.exit.i.i

regmap_reg_in_ranges.exit.i.i:                    ; preds = %for.inc.i.i.i.regmap_reg_in_ranges.exit.i.i_crit_edge, %regmap_reg_in_range.exit.i.i.i.regmap_reg_in_ranges.exit.i.i_crit_edge
  %cmp.lcssa.i.i.i = phi i1 [ %cmp.i.i.i, %for.inc.i.i.i.regmap_reg_in_ranges.exit.i.i_crit_edge ], [ %cmp8.i.i.i, %regmap_reg_in_range.exit.i.i.i.regmap_reg_in_ranges.exit.i.i_crit_edge ]
  br i1 %cmp.lcssa.i.i.i, label %regmap_reg_in_ranges.exit.i.i.for.cond.preheader_crit_edge, label %regmap_reg_in_ranges.exit.i.i.if.end.i.i_crit_edge

regmap_reg_in_ranges.exit.i.i.if.end.i.i_crit_edge: ; preds = %regmap_reg_in_ranges.exit.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end.i.i

regmap_reg_in_ranges.exit.i.i.for.cond.preheader_crit_edge: ; preds = %regmap_reg_in_ranges.exit.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.cond.preheader

if.end.i.i:                                       ; preds = %regmap_reg_in_ranges.exit.i.i.if.end.i.i_crit_edge, %if.then3.i.if.end.i.i_crit_edge
  %n_yes_ranges.i.i = getelementptr inbounds %struct.regmap_access_table, ptr %14, i32 0, i32 1
  %23 = ptrtoint ptr %n_yes_ranges.i.i to i32
  call void @__asan_load4_noabort(i32 %23)
  %24 = load i32, ptr %n_yes_ranges.i.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %24)
  %tobool.not.i.i = icmp eq i32 %24, 0
  br i1 %tobool.not.i.i, label %if.end.i.i.if.end30_crit_edge, label %if.end2.i.i

if.end.i.i.if.end30_crit_edge:                    ; preds = %if.end.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end30

if.end2.i.i:                                      ; preds = %if.end.i.i
  %25 = ptrtoint ptr %14 to i32
  call void @__asan_load4_noabort(i32 %25)
  %26 = load ptr, ptr %14, align 4
  br label %for.body.i15.i.i

for.body.i15.i.i:                                 ; preds = %for.inc.i23.i.i.for.body.i15.i.i_crit_edge, %if.end2.i.i
  %cmp8.i11.i.i = phi i1 [ %cmp.i21.i.i, %for.inc.i23.i.i.for.body.i15.i.i_crit_edge ], [ true, %if.end2.i.i ]
  %i.07.i12.i.i = phi i32 [ %inc.i19.i.i, %for.inc.i23.i.i.for.body.i15.i.i_crit_edge ], [ 0, %if.end2.i.i ]
  %r.05.i13.i.i = phi ptr [ %incdec.ptr.i20.i.i, %for.inc.i23.i.i.for.body.i15.i.i_crit_edge ], [ %26, %if.end2.i.i ]
  %27 = ptrtoint ptr %r.05.i13.i.i to i32
  call void @__asan_load4_noabort(i32 %27)
  %28 = load i32, ptr %r.05.i13.i.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %28, i32 %reg)
  %cmp.not.i.i14.i.i = icmp ugt i32 %28, %reg
  br i1 %cmp.not.i.i14.i.i, label %for.body.i15.i.i.for.inc.i23.i.i_crit_edge, label %regmap_reg_in_range.exit.i18.i.i

for.body.i15.i.i.for.inc.i23.i.i_crit_edge:       ; preds = %for.body.i15.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i23.i.i

regmap_reg_in_range.exit.i18.i.i:                 ; preds = %for.body.i15.i.i
  %range_max.i.i16.i.i = getelementptr inbounds %struct.regmap_range, ptr %r.05.i13.i.i, i32 0, i32 1
  %29 = ptrtoint ptr %range_max.i.i16.i.i to i32
  call void @__asan_load4_noabort(i32 %29)
  %30 = load i32, ptr %range_max.i.i16.i.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %30, i32 %reg)
  %cmp1.i.not.i17.i.i = icmp ult i32 %30, %reg
  br i1 %cmp1.i.not.i17.i.i, label %regmap_reg_in_range.exit.i18.i.i.for.inc.i23.i.i_crit_edge, label %regmap_reg_in_range.exit.i18.i.i.regmap_writeable_noinc.exit_crit_edge

regmap_reg_in_range.exit.i18.i.i.regmap_writeable_noinc.exit_crit_edge: ; preds = %regmap_reg_in_range.exit.i18.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_writeable_noinc.exit

regmap_reg_in_range.exit.i18.i.i.for.inc.i23.i.i_crit_edge: ; preds = %regmap_reg_in_range.exit.i18.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i23.i.i

for.inc.i23.i.i:                                  ; preds = %regmap_reg_in_range.exit.i18.i.i.for.inc.i23.i.i_crit_edge, %for.body.i15.i.i.for.inc.i23.i.i_crit_edge
  %inc.i19.i.i = add nuw i32 %i.07.i12.i.i, 1
  %incdec.ptr.i20.i.i = getelementptr %struct.regmap_range, ptr %r.05.i13.i.i, i32 1
  call void @__sanitizer_cov_trace_cmp4(i32 %inc.i19.i.i, i32 %24)
  %cmp.i21.i.i = icmp ult i32 %inc.i19.i.i, %24
  %exitcond.not.i22.i.i = icmp eq i32 %inc.i19.i.i, %24
  br i1 %exitcond.not.i22.i.i, label %for.inc.i23.i.i.regmap_writeable_noinc.exit_crit_edge, label %for.inc.i23.i.i.for.body.i15.i.i_crit_edge

for.inc.i23.i.i.for.body.i15.i.i_crit_edge:       ; preds = %for.inc.i23.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body.i15.i.i

for.inc.i23.i.i.regmap_writeable_noinc.exit_crit_edge: ; preds = %for.inc.i23.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_writeable_noinc.exit

regmap_writeable_noinc.exit:                      ; preds = %for.inc.i23.i.i.regmap_writeable_noinc.exit_crit_edge, %regmap_reg_in_range.exit.i18.i.i.regmap_writeable_noinc.exit_crit_edge
  %retval.0.i555 = phi i1 [ %cmp.i21.i.i, %for.inc.i23.i.i.regmap_writeable_noinc.exit_crit_edge ], [ %cmp8.i11.i.i, %regmap_reg_in_range.exit.i18.i.i.regmap_writeable_noinc.exit_crit_edge ]
  br i1 %retval.0.i555, label %regmap_writeable_noinc.exit.if.end30_crit_edge, label %regmap_writeable_noinc.exit.for.cond.preheader_crit_edge

regmap_writeable_noinc.exit.for.cond.preheader_crit_edge: ; preds = %regmap_writeable_noinc.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.cond.preheader

regmap_writeable_noinc.exit.if.end30_crit_edge:   ; preds = %regmap_writeable_noinc.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end30

for.cond.preheader:                               ; preds = %regmap_writeable_noinc.exit.for.cond.preheader_crit_edge, %regmap_reg_in_ranges.exit.i.i.for.cond.preheader_crit_edge, %if.then.i.for.cond.preheader_crit_edge
  %val_bytes = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 7, i32 3
  %31 = ptrtoint ptr %val_bytes to i32
  call void @__asan_load4_noabort(i32 %31)
  %32 = load i32, ptr %val_bytes, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %32, i32 %val_len)
  %cmp743.not = icmp ugt i32 %32, %val_len
  br i1 %cmp743.not, label %for.cond.preheader.if.end30_crit_edge, label %for.body.lr.ph

for.cond.preheader.if.end30_crit_edge:            ; preds = %for.cond.preheader
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end30

for.body.lr.ph:                                   ; preds = %for.cond.preheader
  %reg_stride_order.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 46
  %reg_stride.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 45
  %max_register.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 25
  %writeable_reg.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 26
  %dev.i562 = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 5
  %wr_table.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 32
  %wr_noinc_table.i607 = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 36
  br label %for.body

for.body:                                         ; preds = %for.inc.critedge.for.body_crit_edge, %for.body.lr.ph
  %i.0744 = phi i32 [ 0, %for.body.lr.ph ], [ %inc, %for.inc.critedge.for.body_crit_edge ]
  %33 = ptrtoint ptr %reg_stride_order.i to i32
  call void @__asan_load4_noabort(i32 %33)
  %34 = load i32, ptr %reg_stride_order.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %34)
  %cmp.i = icmp sgt i32 %34, -1
  br i1 %cmp.i, label %if.then.i556, label %if.else.i

if.then.i556:                                     ; preds = %for.body
  call void @__sanitizer_cov_trace_pc() #26
  %shl.i = shl i32 %i.0744, %34
  br label %regmap_get_offset.exit

if.else.i:                                        ; preds = %for.body
  call void @__sanitizer_cov_trace_pc() #26
  %35 = ptrtoint ptr %reg_stride.i to i32
  call void @__asan_load4_noabort(i32 %35)
  %36 = load i32, ptr %reg_stride.i, align 4
  %mul.i = mul i32 %36, %i.0744
  br label %regmap_get_offset.exit

regmap_get_offset.exit:                           ; preds = %if.else.i, %if.then.i556
  %retval.0.i557 = phi i32 [ %shl.i, %if.then.i556 ], [ %mul.i, %if.else.i ]
  %add = add i32 %retval.0.i557, %reg
  %37 = ptrtoint ptr %max_register.i to i32
  call void @__asan_load4_noabort(i32 %37)
  %38 = load i32, ptr %max_register.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %38)
  %tobool.not.i558 = icmp ne i32 %38, 0
  call void @__sanitizer_cov_trace_cmp4(i32 %38, i32 %add)
  %cmp.i559 = icmp ult i32 %38, %add
  %or.cond.i = and i1 %tobool.not.i558, %cmp.i559
  br i1 %or.cond.i, label %regmap_get_offset.exit.cleanup355_crit_edge, label %if.end.i561

regmap_get_offset.exit.cleanup355_crit_edge:      ; preds = %regmap_get_offset.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup355

if.end.i561:                                      ; preds = %regmap_get_offset.exit
  %39 = ptrtoint ptr %writeable_reg.i to i32
  call void @__asan_load4_noabort(i32 %39)
  %40 = load ptr, ptr %writeable_reg.i, align 4
  %tobool2.not.i560 = icmp eq ptr %40, null
  br i1 %tobool2.not.i560, label %if.end5.i, label %if.then3.i564

if.then3.i564:                                    ; preds = %if.end.i561
  %41 = ptrtoint ptr %dev.i562 to i32
  call void @__asan_load4_noabort(i32 %41)
  %42 = load ptr, ptr %dev.i562, align 4
  %call.i563 = tail call zeroext i1 %40(ptr noundef %42, i32 noundef %add) #24
  br i1 %call.i563, label %if.then3.i564.lor.lhs.false_crit_edge, label %if.then3.i564.cleanup355_crit_edge

if.then3.i564.cleanup355_crit_edge:               ; preds = %if.then3.i564
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup355

if.then3.i564.lor.lhs.false_crit_edge:            ; preds = %if.then3.i564
  call void @__sanitizer_cov_trace_pc() #26
  br label %lor.lhs.false

if.end5.i:                                        ; preds = %if.end.i561
  %43 = ptrtoint ptr %wr_table.i to i32
  call void @__asan_load4_noabort(i32 %43)
  %44 = load ptr, ptr %wr_table.i, align 4
  %tobool6.not.i = icmp eq ptr %44, null
  br i1 %tobool6.not.i, label %if.end5.i.lor.lhs.false_crit_edge, label %if.then7.i

if.end5.i.lor.lhs.false_crit_edge:                ; preds = %if.end5.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %lor.lhs.false

if.then7.i:                                       ; preds = %if.end5.i
  %n_no_ranges.i.i565 = getelementptr inbounds %struct.regmap_access_table, ptr %44, i32 0, i32 3
  %45 = ptrtoint ptr %n_no_ranges.i.i565 to i32
  call void @__asan_load4_noabort(i32 %45)
  %46 = load i32, ptr %n_no_ranges.i.i565, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %46)
  %cmp4.not.i.i.i566 = icmp eq i32 %46, 0
  br i1 %cmp4.not.i.i.i566, label %if.then7.i.if.end.i.i586_crit_edge, label %for.body.i.preheader.i.i568

if.then7.i.if.end.i.i586_crit_edge:               ; preds = %if.then7.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end.i.i586

for.body.i.preheader.i.i568:                      ; preds = %if.then7.i
  %no_ranges.i.i567 = getelementptr inbounds %struct.regmap_access_table, ptr %44, i32 0, i32 2
  %47 = ptrtoint ptr %no_ranges.i.i567 to i32
  call void @__asan_load4_noabort(i32 %47)
  %48 = load ptr, ptr %no_ranges.i.i567, align 4
  br label %for.body.i.i.i573

for.body.i.i.i573:                                ; preds = %for.inc.i.i.i581.for.body.i.i.i573_crit_edge, %for.body.i.preheader.i.i568
  %cmp8.i.i.i569 = phi i1 [ %cmp.i.i.i579, %for.inc.i.i.i581.for.body.i.i.i573_crit_edge ], [ true, %for.body.i.preheader.i.i568 ]
  %i.07.i.i.i570 = phi i32 [ %inc.i.i.i577, %for.inc.i.i.i581.for.body.i.i.i573_crit_edge ], [ 0, %for.body.i.preheader.i.i568 ]
  %r.05.i.i.i571 = phi ptr [ %incdec.ptr.i.i.i578, %for.inc.i.i.i581.for.body.i.i.i573_crit_edge ], [ %48, %for.body.i.preheader.i.i568 ]
  %49 = ptrtoint ptr %r.05.i.i.i571 to i32
  call void @__asan_load4_noabort(i32 %49)
  %50 = load i32, ptr %r.05.i.i.i571, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %50, i32 %add)
  %cmp.not.i.i.i.i572 = icmp ugt i32 %50, %add
  br i1 %cmp.not.i.i.i.i572, label %for.body.i.i.i573.for.inc.i.i.i581_crit_edge, label %regmap_reg_in_range.exit.i.i.i576

for.body.i.i.i573.for.inc.i.i.i581_crit_edge:     ; preds = %for.body.i.i.i573
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i.i.i581

regmap_reg_in_range.exit.i.i.i576:                ; preds = %for.body.i.i.i573
  %range_max.i.i.i.i574 = getelementptr inbounds %struct.regmap_range, ptr %r.05.i.i.i571, i32 0, i32 1
  %51 = ptrtoint ptr %range_max.i.i.i.i574 to i32
  call void @__asan_load4_noabort(i32 %51)
  %52 = load i32, ptr %range_max.i.i.i.i574, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %52, i32 %add)
  %cmp1.i.not.i.i.i575 = icmp ult i32 %52, %add
  br i1 %cmp1.i.not.i.i.i575, label %regmap_reg_in_range.exit.i.i.i576.for.inc.i.i.i581_crit_edge, label %regmap_reg_in_range.exit.i.i.i576.regmap_reg_in_ranges.exit.i.i583_crit_edge

regmap_reg_in_range.exit.i.i.i576.regmap_reg_in_ranges.exit.i.i583_crit_edge: ; preds = %regmap_reg_in_range.exit.i.i.i576
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_reg_in_ranges.exit.i.i583

regmap_reg_in_range.exit.i.i.i576.for.inc.i.i.i581_crit_edge: ; preds = %regmap_reg_in_range.exit.i.i.i576
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i.i.i581

for.inc.i.i.i581:                                 ; preds = %regmap_reg_in_range.exit.i.i.i576.for.inc.i.i.i581_crit_edge, %for.body.i.i.i573.for.inc.i.i.i581_crit_edge
  %inc.i.i.i577 = add nuw i32 %i.07.i.i.i570, 1
  %incdec.ptr.i.i.i578 = getelementptr %struct.regmap_range, ptr %r.05.i.i.i571, i32 1
  call void @__sanitizer_cov_trace_cmp4(i32 %inc.i.i.i577, i32 %46)
  %cmp.i.i.i579 = icmp ult i32 %inc.i.i.i577, %46
  %exitcond.not.i.i.i580 = icmp eq i32 %inc.i.i.i577, %46
  br i1 %exitcond.not.i.i.i580, label %for.inc.i.i.i581.regmap_reg_in_ranges.exit.i.i583_crit_edge, label %for.inc.i.i.i581.for.body.i.i.i573_crit_edge

for.inc.i.i.i581.for.body.i.i.i573_crit_edge:     ; preds = %for.inc.i.i.i581
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body.i.i.i573

for.inc.i.i.i581.regmap_reg_in_ranges.exit.i.i583_crit_edge: ; preds = %for.inc.i.i.i581
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_reg_in_ranges.exit.i.i583

regmap_reg_in_ranges.exit.i.i583:                 ; preds = %for.inc.i.i.i581.regmap_reg_in_ranges.exit.i.i583_crit_edge, %regmap_reg_in_range.exit.i.i.i576.regmap_reg_in_ranges.exit.i.i583_crit_edge
  %cmp.lcssa.i.i.i582 = phi i1 [ %cmp.i.i.i579, %for.inc.i.i.i581.regmap_reg_in_ranges.exit.i.i583_crit_edge ], [ %cmp8.i.i.i569, %regmap_reg_in_range.exit.i.i.i576.regmap_reg_in_ranges.exit.i.i583_crit_edge ]
  br i1 %cmp.lcssa.i.i.i582, label %regmap_reg_in_ranges.exit.i.i583.cleanup355_crit_edge, label %regmap_reg_in_ranges.exit.i.i583.if.end.i.i586_crit_edge

regmap_reg_in_ranges.exit.i.i583.if.end.i.i586_crit_edge: ; preds = %regmap_reg_in_ranges.exit.i.i583
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end.i.i586

regmap_reg_in_ranges.exit.i.i583.cleanup355_crit_edge: ; preds = %regmap_reg_in_ranges.exit.i.i583
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup355

if.end.i.i586:                                    ; preds = %regmap_reg_in_ranges.exit.i.i583.if.end.i.i586_crit_edge, %if.then7.i.if.end.i.i586_crit_edge
  %n_yes_ranges.i.i584 = getelementptr inbounds %struct.regmap_access_table, ptr %44, i32 0, i32 1
  %53 = ptrtoint ptr %n_yes_ranges.i.i584 to i32
  call void @__asan_load4_noabort(i32 %53)
  %54 = load i32, ptr %n_yes_ranges.i.i584, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %54)
  %tobool.not.i.i585 = icmp eq i32 %54, 0
  br i1 %tobool.not.i.i585, label %if.end.i.i586.lor.lhs.false_crit_edge, label %if.end2.i.i587

if.end.i.i586.lor.lhs.false_crit_edge:            ; preds = %if.end.i.i586
  call void @__sanitizer_cov_trace_pc() #26
  br label %lor.lhs.false

if.end2.i.i587:                                   ; preds = %if.end.i.i586
  %55 = ptrtoint ptr %44 to i32
  call void @__asan_load4_noabort(i32 %55)
  %56 = load ptr, ptr %44, align 4
  br label %for.body.i15.i.i592

for.body.i15.i.i592:                              ; preds = %for.inc.i23.i.i600.for.body.i15.i.i592_crit_edge, %if.end2.i.i587
  %cmp8.i11.i.i588 = phi i1 [ %cmp.i21.i.i598, %for.inc.i23.i.i600.for.body.i15.i.i592_crit_edge ], [ true, %if.end2.i.i587 ]
  %i.07.i12.i.i589 = phi i32 [ %inc.i19.i.i596, %for.inc.i23.i.i600.for.body.i15.i.i592_crit_edge ], [ 0, %if.end2.i.i587 ]
  %r.05.i13.i.i590 = phi ptr [ %incdec.ptr.i20.i.i597, %for.inc.i23.i.i600.for.body.i15.i.i592_crit_edge ], [ %56, %if.end2.i.i587 ]
  %57 = ptrtoint ptr %r.05.i13.i.i590 to i32
  call void @__asan_load4_noabort(i32 %57)
  %58 = load i32, ptr %r.05.i13.i.i590, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %58, i32 %add)
  %cmp.not.i.i14.i.i591 = icmp ugt i32 %58, %add
  br i1 %cmp.not.i.i14.i.i591, label %for.body.i15.i.i592.for.inc.i23.i.i600_crit_edge, label %regmap_reg_in_range.exit.i18.i.i595

for.body.i15.i.i592.for.inc.i23.i.i600_crit_edge: ; preds = %for.body.i15.i.i592
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i23.i.i600

regmap_reg_in_range.exit.i18.i.i595:              ; preds = %for.body.i15.i.i592
  %range_max.i.i16.i.i593 = getelementptr inbounds %struct.regmap_range, ptr %r.05.i13.i.i590, i32 0, i32 1
  %59 = ptrtoint ptr %range_max.i.i16.i.i593 to i32
  call void @__asan_load4_noabort(i32 %59)
  %60 = load i32, ptr %range_max.i.i16.i.i593, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %60, i32 %add)
  %cmp1.i.not.i17.i.i594 = icmp ult i32 %60, %add
  br i1 %cmp1.i.not.i17.i.i594, label %regmap_reg_in_range.exit.i18.i.i595.for.inc.i23.i.i600_crit_edge, label %regmap_reg_in_range.exit.i18.i.i595.regmap_writeable.exit_crit_edge

regmap_reg_in_range.exit.i18.i.i595.regmap_writeable.exit_crit_edge: ; preds = %regmap_reg_in_range.exit.i18.i.i595
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_writeable.exit

regmap_reg_in_range.exit.i18.i.i595.for.inc.i23.i.i600_crit_edge: ; preds = %regmap_reg_in_range.exit.i18.i.i595
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i23.i.i600

for.inc.i23.i.i600:                               ; preds = %regmap_reg_in_range.exit.i18.i.i595.for.inc.i23.i.i600_crit_edge, %for.body.i15.i.i592.for.inc.i23.i.i600_crit_edge
  %inc.i19.i.i596 = add nuw i32 %i.07.i12.i.i589, 1
  %incdec.ptr.i20.i.i597 = getelementptr %struct.regmap_range, ptr %r.05.i13.i.i590, i32 1
  call void @__sanitizer_cov_trace_cmp4(i32 %inc.i19.i.i596, i32 %54)
  %cmp.i21.i.i598 = icmp ult i32 %inc.i19.i.i596, %54
  %exitcond.not.i22.i.i599 = icmp eq i32 %inc.i19.i.i596, %54
  br i1 %exitcond.not.i22.i.i599, label %for.inc.i23.i.i600.regmap_writeable.exit_crit_edge, label %for.inc.i23.i.i600.for.body.i15.i.i592_crit_edge

for.inc.i23.i.i600.for.body.i15.i.i592_crit_edge: ; preds = %for.inc.i23.i.i600
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body.i15.i.i592

for.inc.i23.i.i600.regmap_writeable.exit_crit_edge: ; preds = %for.inc.i23.i.i600
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_writeable.exit

regmap_writeable.exit:                            ; preds = %for.inc.i23.i.i600.regmap_writeable.exit_crit_edge, %regmap_reg_in_range.exit.i18.i.i595.regmap_writeable.exit_crit_edge
  %retval.0.i601 = phi i1 [ %cmp.i21.i.i598, %for.inc.i23.i.i600.regmap_writeable.exit_crit_edge ], [ %cmp8.i11.i.i588, %regmap_reg_in_range.exit.i18.i.i595.regmap_writeable.exit_crit_edge ]
  br i1 %retval.0.i601, label %regmap_writeable.exit.lor.lhs.false_crit_edge, label %regmap_writeable.exit.cleanup355_crit_edge

regmap_writeable.exit.cleanup355_crit_edge:       ; preds = %regmap_writeable.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup355

regmap_writeable.exit.lor.lhs.false_crit_edge:    ; preds = %regmap_writeable.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %lor.lhs.false

lor.lhs.false:                                    ; preds = %regmap_writeable.exit.lor.lhs.false_crit_edge, %if.end.i.i586.lor.lhs.false_crit_edge, %if.end5.i.lor.lhs.false_crit_edge, %if.then3.i564.lor.lhs.false_crit_edge
  %61 = ptrtoint ptr %writeable_noinc_reg.i to i32
  call void @__asan_load4_noabort(i32 %61)
  %62 = load ptr, ptr %writeable_noinc_reg.i, align 4
  %tobool.not.i603 = icmp eq ptr %62, null
  br i1 %tobool.not.i603, label %if.end.i609, label %if.then.i606

if.then.i606:                                     ; preds = %lor.lhs.false
  %63 = ptrtoint ptr %dev.i562 to i32
  call void @__asan_load4_noabort(i32 %63)
  %64 = load ptr, ptr %dev.i562, align 4
  %call.i605 = tail call zeroext i1 %62(ptr noundef %64, i32 noundef %add) #24
  br i1 %call.i605, label %if.then.i606.cleanup355_crit_edge, label %if.then.i606.for.inc.critedge_crit_edge

if.then.i606.for.inc.critedge_crit_edge:          ; preds = %if.then.i606
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.critedge

if.then.i606.cleanup355_crit_edge:                ; preds = %if.then.i606
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup355

if.end.i609:                                      ; preds = %lor.lhs.false
  %65 = ptrtoint ptr %wr_noinc_table.i607 to i32
  call void @__asan_load4_noabort(i32 %65)
  %66 = load ptr, ptr %wr_noinc_table.i607, align 4
  %tobool2.not.i608 = icmp eq ptr %66, null
  br i1 %tobool2.not.i608, label %if.end.i609.cleanup355_crit_edge, label %if.then3.i612

if.end.i609.cleanup355_crit_edge:                 ; preds = %if.end.i609
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup355

if.then3.i612:                                    ; preds = %if.end.i609
  %n_no_ranges.i.i610 = getelementptr inbounds %struct.regmap_access_table, ptr %66, i32 0, i32 3
  %67 = ptrtoint ptr %n_no_ranges.i.i610 to i32
  call void @__asan_load4_noabort(i32 %67)
  %68 = load i32, ptr %n_no_ranges.i.i610, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %68)
  %cmp4.not.i.i.i611 = icmp eq i32 %68, 0
  br i1 %cmp4.not.i.i.i611, label %if.then3.i612.if.end.i.i632_crit_edge, label %for.body.i.preheader.i.i614

if.then3.i612.if.end.i.i632_crit_edge:            ; preds = %if.then3.i612
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end.i.i632

for.body.i.preheader.i.i614:                      ; preds = %if.then3.i612
  %no_ranges.i.i613 = getelementptr inbounds %struct.regmap_access_table, ptr %66, i32 0, i32 2
  %69 = ptrtoint ptr %no_ranges.i.i613 to i32
  call void @__asan_load4_noabort(i32 %69)
  %70 = load ptr, ptr %no_ranges.i.i613, align 4
  br label %for.body.i.i.i619

for.body.i.i.i619:                                ; preds = %for.inc.i.i.i627.for.body.i.i.i619_crit_edge, %for.body.i.preheader.i.i614
  %cmp8.i.i.i615 = phi i1 [ %cmp.i.i.i625, %for.inc.i.i.i627.for.body.i.i.i619_crit_edge ], [ true, %for.body.i.preheader.i.i614 ]
  %i.07.i.i.i616 = phi i32 [ %inc.i.i.i623, %for.inc.i.i.i627.for.body.i.i.i619_crit_edge ], [ 0, %for.body.i.preheader.i.i614 ]
  %r.05.i.i.i617 = phi ptr [ %incdec.ptr.i.i.i624, %for.inc.i.i.i627.for.body.i.i.i619_crit_edge ], [ %70, %for.body.i.preheader.i.i614 ]
  %71 = ptrtoint ptr %r.05.i.i.i617 to i32
  call void @__asan_load4_noabort(i32 %71)
  %72 = load i32, ptr %r.05.i.i.i617, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %72, i32 %add)
  %cmp.not.i.i.i.i618 = icmp ugt i32 %72, %add
  br i1 %cmp.not.i.i.i.i618, label %for.body.i.i.i619.for.inc.i.i.i627_crit_edge, label %regmap_reg_in_range.exit.i.i.i622

for.body.i.i.i619.for.inc.i.i.i627_crit_edge:     ; preds = %for.body.i.i.i619
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i.i.i627

regmap_reg_in_range.exit.i.i.i622:                ; preds = %for.body.i.i.i619
  %range_max.i.i.i.i620 = getelementptr inbounds %struct.regmap_range, ptr %r.05.i.i.i617, i32 0, i32 1
  %73 = ptrtoint ptr %range_max.i.i.i.i620 to i32
  call void @__asan_load4_noabort(i32 %73)
  %74 = load i32, ptr %range_max.i.i.i.i620, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %74, i32 %add)
  %cmp1.i.not.i.i.i621 = icmp ult i32 %74, %add
  br i1 %cmp1.i.not.i.i.i621, label %regmap_reg_in_range.exit.i.i.i622.for.inc.i.i.i627_crit_edge, label %regmap_reg_in_range.exit.i.i.i622.regmap_reg_in_ranges.exit.i.i629_crit_edge

regmap_reg_in_range.exit.i.i.i622.regmap_reg_in_ranges.exit.i.i629_crit_edge: ; preds = %regmap_reg_in_range.exit.i.i.i622
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_reg_in_ranges.exit.i.i629

regmap_reg_in_range.exit.i.i.i622.for.inc.i.i.i627_crit_edge: ; preds = %regmap_reg_in_range.exit.i.i.i622
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i.i.i627

for.inc.i.i.i627:                                 ; preds = %regmap_reg_in_range.exit.i.i.i622.for.inc.i.i.i627_crit_edge, %for.body.i.i.i619.for.inc.i.i.i627_crit_edge
  %inc.i.i.i623 = add nuw i32 %i.07.i.i.i616, 1
  %incdec.ptr.i.i.i624 = getelementptr %struct.regmap_range, ptr %r.05.i.i.i617, i32 1
  call void @__sanitizer_cov_trace_cmp4(i32 %inc.i.i.i623, i32 %68)
  %cmp.i.i.i625 = icmp ult i32 %inc.i.i.i623, %68
  %exitcond.not.i.i.i626 = icmp eq i32 %inc.i.i.i623, %68
  br i1 %exitcond.not.i.i.i626, label %for.inc.i.i.i627.regmap_reg_in_ranges.exit.i.i629_crit_edge, label %for.inc.i.i.i627.for.body.i.i.i619_crit_edge

for.inc.i.i.i627.for.body.i.i.i619_crit_edge:     ; preds = %for.inc.i.i.i627
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body.i.i.i619

for.inc.i.i.i627.regmap_reg_in_ranges.exit.i.i629_crit_edge: ; preds = %for.inc.i.i.i627
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_reg_in_ranges.exit.i.i629

regmap_reg_in_ranges.exit.i.i629:                 ; preds = %for.inc.i.i.i627.regmap_reg_in_ranges.exit.i.i629_crit_edge, %regmap_reg_in_range.exit.i.i.i622.regmap_reg_in_ranges.exit.i.i629_crit_edge
  %cmp.lcssa.i.i.i628 = phi i1 [ %cmp.i.i.i625, %for.inc.i.i.i627.regmap_reg_in_ranges.exit.i.i629_crit_edge ], [ %cmp8.i.i.i615, %regmap_reg_in_range.exit.i.i.i622.regmap_reg_in_ranges.exit.i.i629_crit_edge ]
  br i1 %cmp.lcssa.i.i.i628, label %regmap_reg_in_ranges.exit.i.i629.for.inc.critedge_crit_edge, label %regmap_reg_in_ranges.exit.i.i629.if.end.i.i632_crit_edge

regmap_reg_in_ranges.exit.i.i629.if.end.i.i632_crit_edge: ; preds = %regmap_reg_in_ranges.exit.i.i629
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end.i.i632

regmap_reg_in_ranges.exit.i.i629.for.inc.critedge_crit_edge: ; preds = %regmap_reg_in_ranges.exit.i.i629
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.critedge

if.end.i.i632:                                    ; preds = %regmap_reg_in_ranges.exit.i.i629.if.end.i.i632_crit_edge, %if.then3.i612.if.end.i.i632_crit_edge
  %n_yes_ranges.i.i630 = getelementptr inbounds %struct.regmap_access_table, ptr %66, i32 0, i32 1
  %75 = ptrtoint ptr %n_yes_ranges.i.i630 to i32
  call void @__asan_load4_noabort(i32 %75)
  %76 = load i32, ptr %n_yes_ranges.i.i630, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %76)
  %tobool.not.i.i631 = icmp eq i32 %76, 0
  br i1 %tobool.not.i.i631, label %if.end.i.i632.cleanup355_crit_edge, label %if.end2.i.i633

if.end.i.i632.cleanup355_crit_edge:               ; preds = %if.end.i.i632
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup355

if.end2.i.i633:                                   ; preds = %if.end.i.i632
  %77 = ptrtoint ptr %66 to i32
  call void @__asan_load4_noabort(i32 %77)
  %78 = load ptr, ptr %66, align 4
  br label %for.body.i15.i.i638

for.body.i15.i.i638:                              ; preds = %for.inc.i23.i.i646.for.body.i15.i.i638_crit_edge, %if.end2.i.i633
  %cmp8.i11.i.i634 = phi i1 [ %cmp.i21.i.i644, %for.inc.i23.i.i646.for.body.i15.i.i638_crit_edge ], [ true, %if.end2.i.i633 ]
  %i.07.i12.i.i635 = phi i32 [ %inc.i19.i.i642, %for.inc.i23.i.i646.for.body.i15.i.i638_crit_edge ], [ 0, %if.end2.i.i633 ]
  %r.05.i13.i.i636 = phi ptr [ %incdec.ptr.i20.i.i643, %for.inc.i23.i.i646.for.body.i15.i.i638_crit_edge ], [ %78, %if.end2.i.i633 ]
  %79 = ptrtoint ptr %r.05.i13.i.i636 to i32
  call void @__asan_load4_noabort(i32 %79)
  %80 = load i32, ptr %r.05.i13.i.i636, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %80, i32 %add)
  %cmp.not.i.i14.i.i637 = icmp ugt i32 %80, %add
  br i1 %cmp.not.i.i14.i.i637, label %for.body.i15.i.i638.for.inc.i23.i.i646_crit_edge, label %regmap_reg_in_range.exit.i18.i.i641

for.body.i15.i.i638.for.inc.i23.i.i646_crit_edge: ; preds = %for.body.i15.i.i638
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i23.i.i646

regmap_reg_in_range.exit.i18.i.i641:              ; preds = %for.body.i15.i.i638
  %range_max.i.i16.i.i639 = getelementptr inbounds %struct.regmap_range, ptr %r.05.i13.i.i636, i32 0, i32 1
  %81 = ptrtoint ptr %range_max.i.i16.i.i639 to i32
  call void @__asan_load4_noabort(i32 %81)
  %82 = load i32, ptr %range_max.i.i16.i.i639, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %82, i32 %add)
  %cmp1.i.not.i17.i.i640 = icmp ult i32 %82, %add
  br i1 %cmp1.i.not.i17.i.i640, label %regmap_reg_in_range.exit.i18.i.i641.for.inc.i23.i.i646_crit_edge, label %regmap_reg_in_range.exit.i18.i.i641.regmap_writeable_noinc.exit648_crit_edge

regmap_reg_in_range.exit.i18.i.i641.regmap_writeable_noinc.exit648_crit_edge: ; preds = %regmap_reg_in_range.exit.i18.i.i641
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_writeable_noinc.exit648

regmap_reg_in_range.exit.i18.i.i641.for.inc.i23.i.i646_crit_edge: ; preds = %regmap_reg_in_range.exit.i18.i.i641
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i23.i.i646

for.inc.i23.i.i646:                               ; preds = %regmap_reg_in_range.exit.i18.i.i641.for.inc.i23.i.i646_crit_edge, %for.body.i15.i.i638.for.inc.i23.i.i646_crit_edge
  %inc.i19.i.i642 = add nuw i32 %i.07.i12.i.i635, 1
  %incdec.ptr.i20.i.i643 = getelementptr %struct.regmap_range, ptr %r.05.i13.i.i636, i32 1
  call void @__sanitizer_cov_trace_cmp4(i32 %inc.i19.i.i642, i32 %76)
  %cmp.i21.i.i644 = icmp ult i32 %inc.i19.i.i642, %76
  %exitcond.not.i22.i.i645 = icmp eq i32 %inc.i19.i.i642, %76
  br i1 %exitcond.not.i22.i.i645, label %for.inc.i23.i.i646.regmap_writeable_noinc.exit648_crit_edge, label %for.inc.i23.i.i646.for.body.i15.i.i638_crit_edge

for.inc.i23.i.i646.for.body.i15.i.i638_crit_edge: ; preds = %for.inc.i23.i.i646
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body.i15.i.i638

for.inc.i23.i.i646.regmap_writeable_noinc.exit648_crit_edge: ; preds = %for.inc.i23.i.i646
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_writeable_noinc.exit648

regmap_writeable_noinc.exit648:                   ; preds = %for.inc.i23.i.i646.regmap_writeable_noinc.exit648_crit_edge, %regmap_reg_in_range.exit.i18.i.i641.regmap_writeable_noinc.exit648_crit_edge
  %retval.0.i647 = phi i1 [ %cmp.i21.i.i644, %for.inc.i23.i.i646.regmap_writeable_noinc.exit648_crit_edge ], [ %cmp8.i11.i.i634, %regmap_reg_in_range.exit.i18.i.i641.regmap_writeable_noinc.exit648_crit_edge ]
  br i1 %retval.0.i647, label %regmap_writeable_noinc.exit648.cleanup355_crit_edge, label %regmap_writeable_noinc.exit648.for.inc.critedge_crit_edge

regmap_writeable_noinc.exit648.for.inc.critedge_crit_edge: ; preds = %regmap_writeable_noinc.exit648
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.critedge

regmap_writeable_noinc.exit648.cleanup355_crit_edge: ; preds = %regmap_writeable_noinc.exit648
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup355

for.inc.critedge:                                 ; preds = %regmap_writeable_noinc.exit648.for.inc.critedge_crit_edge, %regmap_reg_in_ranges.exit.i.i629.for.inc.critedge_crit_edge, %if.then.i606.for.inc.critedge_crit_edge
  %inc = add nuw i32 %i.0744, 1
  %83 = ptrtoint ptr %val_bytes to i32
  call void @__asan_load4_noabort(i32 %83)
  %84 = load i32, ptr %val_bytes, align 4
  %div = udiv i32 %val_len, %84
  %cmp = icmp ult i32 %inc, %div
  br i1 %cmp, label %for.inc.critedge.for.body_crit_edge, label %for.inc.critedge.if.end30_crit_edge

for.inc.critedge.if.end30_crit_edge:              ; preds = %for.inc.critedge
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end30

for.inc.critedge.for.body_crit_edge:              ; preds = %for.inc.critedge
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body

if.end30:                                         ; preds = %for.inc.critedge.if.end30_crit_edge, %for.cond.preheader.if.end30_crit_edge, %regmap_writeable_noinc.exit.if.end30_crit_edge, %if.end.i.i.if.end30_crit_edge, %if.end.i.if.end30_crit_edge, %if.then.i.if.end30_crit_edge
  %cache_bypass = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 54
  %85 = ptrtoint ptr %cache_bypass to i32
  call void @__asan_load1_noabort(i32 %85)
  %86 = load i8, ptr %cache_bypass, align 1, !range !389
  call void @__sanitizer_cov_trace_const_cmp1(i8 0, i8 %86)
  %tobool31.not = icmp eq i8 %86, 0
  br i1 %tobool31.not, label %land.lhs.true, label %if.end30.if.end67_crit_edge

if.end30.if.end67_crit_edge:                      ; preds = %if.end30
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end67

land.lhs.true:                                    ; preds = %if.end30
  %parse_val = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 7, i32 7
  %87 = ptrtoint ptr %parse_val to i32
  call void @__asan_load4_noabort(i32 %87)
  %88 = load ptr, ptr %parse_val, align 4
  %tobool33.not = icmp eq ptr %88, null
  br i1 %tobool33.not, label %land.lhs.true.if.end67_crit_edge, label %if.then34

land.lhs.true.if.end67_crit_edge:                 ; preds = %land.lhs.true
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end67

if.then34:                                        ; preds = %land.lhs.true
  %val_bytes37 = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 7, i32 3
  %89 = ptrtoint ptr %val_bytes37 to i32
  call void @__asan_load4_noabort(i32 %89)
  %90 = load i32, ptr %val_bytes37, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %90, i32 %val_len)
  %cmp40746.not = icmp ugt i32 %90, %val_len
  br i1 %cmp40746.not, label %if.then34.for.end59_crit_edge, label %for.body41.lr.ph

if.then34.for.end59_crit_edge:                    ; preds = %if.then34
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.end59

for.body41.lr.ph:                                 ; preds = %if.then34
  %div39 = udiv i32 %val_len, %90
  %reg_stride_order.i649 = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 46
  %reg_stride.i653 = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 45
  %umax = call i32 @llvm.umax.i32(i32 %div39, i32 1)
  br label %for.body41

for.body41:                                       ; preds = %for.inc57.for.body41_crit_edge, %for.body41.lr.ph
  %i.1747 = phi i32 [ 0, %for.body41.lr.ph ], [ %inc58, %for.inc57.for.body41_crit_edge ]
  %91 = ptrtoint ptr %parse_val to i32
  call void @__asan_load4_noabort(i32 %91)
  %92 = load ptr, ptr %parse_val, align 4
  %mul = mul i32 %i.1747, %90
  %add.ptr44 = getelementptr i8, ptr %val, i32 %mul
  %call45 = tail call i32 %92(ptr noundef %add.ptr44) #24
  %93 = ptrtoint ptr %reg_stride_order.i649 to i32
  call void @__asan_load4_noabort(i32 %93)
  %94 = load i32, ptr %reg_stride_order.i649, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %94)
  %cmp.i650 = icmp sgt i32 %94, -1
  br i1 %cmp.i650, label %if.then.i652, label %if.else.i655

if.then.i652:                                     ; preds = %for.body41
  call void @__sanitizer_cov_trace_pc() #26
  %shl.i651 = shl i32 %i.1747, %94
  br label %regmap_get_offset.exit657

if.else.i655:                                     ; preds = %for.body41
  call void @__sanitizer_cov_trace_pc() #26
  %95 = ptrtoint ptr %reg_stride.i653 to i32
  call void @__asan_load4_noabort(i32 %95)
  %96 = load i32, ptr %reg_stride.i653, align 4
  %mul.i654 = mul i32 %96, %i.1747
  br label %regmap_get_offset.exit657

regmap_get_offset.exit657:                        ; preds = %if.else.i655, %if.then.i652
  %retval.0.i656 = phi i32 [ %shl.i651, %if.then.i652 ], [ %mul.i654, %if.else.i655 ]
  %add47 = add i32 %retval.0.i656, %reg
  %call48 = tail call i32 @regcache_write(ptr noundef %map, i32 noundef %add47, i32 noundef %call45) #24
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call48)
  %tobool49.not = icmp eq i32 %call48, 0
  br i1 %tobool49.not, label %for.inc57, label %do.end53

do.end53:                                         ; preds = %regmap_get_offset.exit657
  %dev = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 5
  %97 = ptrtoint ptr %dev to i32
  call void @__asan_load4_noabort(i32 %97)
  %98 = load ptr, ptr %dev, align 4
  %99 = ptrtoint ptr %reg_stride_order.i649 to i32
  call void @__asan_load4_noabort(i32 %99)
  %100 = load i32, ptr %reg_stride_order.i649, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %100)
  %cmp.i659 = icmp sgt i32 %100, -1
  br i1 %cmp.i659, label %if.then.i661, label %if.else.i664

if.then.i661:                                     ; preds = %do.end53
  call void @__sanitizer_cov_trace_pc() #26
  %shl.i660 = shl i32 %i.1747, %100
  br label %regmap_get_offset.exit666

if.else.i664:                                     ; preds = %do.end53
  call void @__sanitizer_cov_trace_pc() #26
  %101 = ptrtoint ptr %reg_stride.i653 to i32
  call void @__asan_load4_noabort(i32 %101)
  %102 = load i32, ptr %reg_stride.i653, align 4
  %mul.i663 = mul i32 %102, %i.1747
  br label %regmap_get_offset.exit666

regmap_get_offset.exit666:                        ; preds = %if.else.i664, %if.then.i661
  %retval.0.i665 = phi i32 [ %shl.i660, %if.then.i661 ], [ %mul.i663, %if.else.i664 ]
  %add55 = add i32 %retval.0.i665, %reg
  tail call void (ptr, ptr, ...) @_dev_err(ptr noundef %98, ptr noundef nonnull @.str.63, i32 noundef %add55, i32 noundef %call48) #31
  br label %cleanup355

for.inc57:                                        ; preds = %regmap_get_offset.exit657
  %inc58 = add nuw i32 %i.1747, 1
  %exitcond.not = icmp eq i32 %inc58, %umax
  br i1 %exitcond.not, label %for.inc57.for.end59_crit_edge, label %for.inc57.for.body41_crit_edge

for.inc57.for.body41_crit_edge:                   ; preds = %for.inc57
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body41

for.inc57.for.end59_crit_edge:                    ; preds = %for.inc57
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.end59

for.end59:                                        ; preds = %for.inc57.for.end59_crit_edge, %if.then34.for.end59_crit_edge
  %cache_only = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 53
  %103 = ptrtoint ptr %cache_only to i32
  call void @__asan_load1_noabort(i32 %103)
  %104 = load i8, ptr %cache_only, align 4, !range !389
  call void @__sanitizer_cov_trace_const_cmp1(i8 0, i8 %104)
  %tobool60.not = icmp eq i8 %104, 0
  br i1 %tobool60.not, label %for.end59.if.end67_crit_edge, label %if.then61

for.end59.if.end67_crit_edge:                     ; preds = %for.end59
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end67

if.then61:                                        ; preds = %for.end59
  call void @__sanitizer_cov_trace_pc() #26
  %cache_dirty = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 59
  %105 = ptrtoint ptr %cache_dirty to i32
  call void @__asan_store1_noabort(i32 %105)
  store i8 1, ptr %cache_dirty, align 4
  br label %cleanup355

if.end67:                                         ; preds = %for.end59.if.end67_crit_edge, %land.lhs.true.if.end67_crit_edge, %if.end30.if.end67_crit_edge
  %range_tree.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 68
  %106 = ptrtoint ptr %range_tree.i to i32
  call void @__asan_load4_noabort(i32 %106)
  %node.015.i = load ptr, ptr %range_tree.i, align 4
  %tobool.not16.i = icmp eq ptr %node.015.i, null
  br i1 %tobool.not16.i, label %if.end67.if.end130_crit_edge, label %if.end67.while.body.i_crit_edge

if.end67.while.body.i_crit_edge:                  ; preds = %if.end67
  br label %while.body.i

if.end67.if.end130_crit_edge:                     ; preds = %if.end67
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end130

while.body.i:                                     ; preds = %cleanup.i.while.body.i_crit_edge, %if.end67.while.body.i_crit_edge
  %node.017.i = phi ptr [ %node.0.i, %cleanup.i.while.body.i_crit_edge ], [ %node.015.i, %if.end67.while.body.i_crit_edge ]
  %range_min.i = getelementptr inbounds %struct.regmap_range_node, ptr %node.017.i, i32 0, i32 3
  %107 = ptrtoint ptr %range_min.i to i32
  call void @__asan_load4_noabort(i32 %107)
  %108 = load i32, ptr %range_min.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %108, i32 %reg)
  %cmp.i667 = icmp ugt i32 %108, %reg
  br i1 %cmp.i667, label %if.then.i668, label %if.else.i669

if.then.i668:                                     ; preds = %while.body.i
  call void @__sanitizer_cov_trace_pc() #26
  %rb_left.i = getelementptr inbounds %struct.rb_node, ptr %node.017.i, i32 0, i32 2
  br label %cleanup.i

if.else.i669:                                     ; preds = %while.body.i
  %range_max.i = getelementptr inbounds %struct.regmap_range_node, ptr %node.017.i, i32 0, i32 4
  %109 = ptrtoint ptr %range_max.i to i32
  call void @__asan_load4_noabort(i32 %109)
  %110 = load i32, ptr %range_max.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %110, i32 %reg)
  %cmp1.i = icmp ult i32 %110, %reg
  br i1 %cmp1.i, label %if.then2.i, label %if.then70

if.then2.i:                                       ; preds = %if.else.i669
  call void @__sanitizer_cov_trace_pc() #26
  %rb_right.i = getelementptr inbounds %struct.rb_node, ptr %node.017.i, i32 0, i32 1
  br label %cleanup.i

cleanup.i:                                        ; preds = %if.then2.i, %if.then.i668
  %node.1.in.i = phi ptr [ %rb_left.i, %if.then.i668 ], [ %rb_right.i, %if.then2.i ]
  %111 = ptrtoint ptr %node.1.in.i to i32
  call void @__asan_load4_noabort(i32 %111)
  %node.0.i = load ptr, ptr %node.1.in.i, align 4
  %tobool.not.i670 = icmp eq ptr %node.0.i, null
  br i1 %tobool.not.i670, label %cleanup.i.if.end130_crit_edge, label %cleanup.i.while.body.i_crit_edge

cleanup.i.while.body.i_crit_edge:                 ; preds = %cleanup.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %while.body.i

cleanup.i.if.end130_crit_edge:                    ; preds = %cleanup.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end130

if.then70:                                        ; preds = %if.else.i669
  %range_min.i.le = getelementptr inbounds %struct.regmap_range_node, ptr %node.017.i, i32 0, i32 3
  %val_bytes72 = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 7, i32 3
  %112 = ptrtoint ptr %val_bytes72 to i32
  call void @__asan_load4_noabort(i32 %112)
  %113 = load i32, ptr %val_bytes72, align 4
  %div73 = udiv i32 %val_len, %113
  %114 = ptrtoint ptr %range_min.i.le to i32
  call void @__asan_load4_noabort(i32 %114)
  %115 = load i32, ptr %range_min.i.le, align 4
  %sub = sub i32 %reg, %115
  %window_len = getelementptr inbounds %struct.regmap_range_node, ptr %node.017.i, i32 0, i32 9
  %116 = ptrtoint ptr %window_len to i32
  call void @__asan_load4_noabort(i32 %116)
  %117 = load i32, ptr %window_len, align 4
  %rem = urem i32 %sub, %117
  %sub75 = sub i32 %117, %rem
  %118 = ptrtoint ptr %reg.addr to i32
  call void @__asan_load4_noabort(i32 %118)
  %reg.addr.promoted = load i32, ptr %reg.addr, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %div73, i32 %sub75)
  %cmp76750 = icmp sgt i32 %div73, %sub75
  br i1 %cmp76750, label %do.body77.lr.ph, label %if.then70.cleanup125_crit_edge

if.then70.cleanup125_crit_edge:                   ; preds = %if.then70
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup125

do.body77.lr.ph:                                  ; preds = %if.then70
  %dev89 = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 5
  br label %do.body77

do.body77:                                        ; preds = %if.end103.do.body77_crit_edge, %do.body77.lr.ph
  %val.addr.0756 = phi ptr [ %val, %do.body77.lr.ph ], [ %add.ptr109, %if.end103.do.body77_crit_edge ]
  %val_len.addr.0755 = phi i32 [ %val_len, %do.body77.lr.ph ], [ %sub113, %if.end103.do.body77_crit_edge ]
  %win_residue.0753 = phi i32 [ %sub75, %do.body77.lr.ph ], [ %sub119, %if.end103.do.body77_crit_edge ]
  %val_num.0752 = phi i32 [ %div73, %do.body77.lr.ph ], [ %sub105, %if.end103.do.body77_crit_edge ]
  %add104748751 = phi i32 [ %reg.addr.promoted, %do.body77.lr.ph ], [ %add104, %if.end103.do.body77_crit_edge ]
  callbr void asm sideeffect "1:\0A\09nop\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr getelementptr inbounds ({ ptr, ptr, ptr, ptr, i8, i8, i8, i8, { { { %struct.atomic_t, { ptr } } } }, [4 x i8] }, ptr @_regmap_raw_write_impl.__UNIQUE_ID_ddebug329, i32 0, i32 8, i32 0, i32 0, i32 0, i32 0), ptr blockaddress(@_regmap_raw_write_impl, %if.then88)) #24
          to label %do.end95 [label %if.then88], !srcloc !391

if.then88:                                        ; preds = %do.body77
  call void @__sanitizer_cov_trace_pc() #26
  %119 = ptrtoint ptr %dev89 to i32
  call void @__asan_load4_noabort(i32 %119)
  %120 = load ptr, ptr %dev89, align 4
  %121 = ptrtoint ptr %val_bytes72 to i32
  call void @__asan_load4_noabort(i32 %121)
  %122 = load i32, ptr %val_bytes72, align 4
  %div92 = udiv i32 %val_len.addr.0755, %122
  tail call void (ptr, ptr, ptr, ...) @__dynamic_dev_dbg(ptr noundef nonnull @_regmap_raw_write_impl.__UNIQUE_ID_ddebug329, ptr noundef %120, ptr noundef nonnull @.str.66, i32 noundef %win_residue.0753, i32 noundef %div92) #24
  br label %do.end95

do.end95:                                         ; preds = %if.then88, %do.body77
  %123 = ptrtoint ptr %val_bytes72 to i32
  call void @__asan_load4_noabort(i32 %123)
  %124 = load i32, ptr %val_bytes72, align 4
  %mul98 = mul i32 %124, %win_residue.0753
  %call100 = tail call fastcc i32 @_regmap_raw_write_impl(ptr noundef %map, i32 noundef %add104748751, ptr noundef %val.addr.0756, i32 noundef %mul98, i1 noundef zeroext %noinc)
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call100)
  %cmp101.not = icmp eq i32 %call100, 0
  br i1 %cmp101.not, label %if.end103, label %cleanup355.loopexit

if.end103:                                        ; preds = %do.end95
  %add104 = add i32 %add104748751, %win_residue.0753
  %sub105 = sub i32 %val_num.0752, %win_residue.0753
  %125 = ptrtoint ptr %val_bytes72 to i32
  call void @__asan_load4_noabort(i32 %125)
  %126 = load i32, ptr %val_bytes72, align 4
  %mul108 = mul i32 %126, %win_residue.0753
  %add.ptr109 = getelementptr i8, ptr %val.addr.0756, i32 %mul108
  %sub113 = sub i32 %val_len.addr.0755, %mul108
  %127 = ptrtoint ptr %range_min.i.le to i32
  call void @__asan_load4_noabort(i32 %127)
  %128 = load i32, ptr %range_min.i.le, align 4
  %sub115 = sub i32 %add104, %128
  %129 = ptrtoint ptr %window_len to i32
  call void @__asan_load4_noabort(i32 %129)
  %130 = load i32, ptr %window_len, align 4
  %rem117 = urem i32 %sub115, %130
  %sub119 = sub i32 %130, %rem117
  %cmp76 = icmp sgt i32 %sub105, %sub119
  br i1 %cmp76, label %if.end103.do.body77_crit_edge, label %if.end103.cleanup125_crit_edge

if.end103.cleanup125_crit_edge:                   ; preds = %if.end103
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup125

if.end103.do.body77_crit_edge:                    ; preds = %if.end103
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.body77

cleanup125:                                       ; preds = %if.end103.cleanup125_crit_edge, %if.then70.cleanup125_crit_edge
  %add104748.lcssa = phi i32 [ %reg.addr.promoted, %if.then70.cleanup125_crit_edge ], [ %add104, %if.end103.cleanup125_crit_edge ]
  %val_num.0.lcssa = phi i32 [ %div73, %if.then70.cleanup125_crit_edge ], [ %sub105, %if.end103.cleanup125_crit_edge ]
  %val_len.addr.0.lcssa = phi i32 [ %val_len, %if.then70.cleanup125_crit_edge ], [ %sub113, %if.end103.cleanup125_crit_edge ]
  %val.addr.0.lcssa = phi ptr [ %val, %if.then70.cleanup125_crit_edge ], [ %add.ptr109, %if.end103.cleanup125_crit_edge ]
  %131 = ptrtoint ptr %reg.addr to i32
  call void @__asan_store4_noabort(i32 %131)
  store i32 %add104748.lcssa, ptr %reg.addr, align 4
  %spec.select = select i1 %noinc, i32 1, i32 %val_num.0.lcssa
  %call121 = call fastcc i32 @_regmap_select_page(ptr noundef %map, ptr noundef nonnull %reg.addr, ptr noundef nonnull %node.017.i, i32 noundef %spec.select)
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call121)
  %cmp122.not = icmp eq i32 %call121, 0
  br i1 %cmp122.not, label %cleanup125.if.end130_crit_edge, label %cleanup125.cleanup355_crit_edge

cleanup125.cleanup355_crit_edge:                  ; preds = %cleanup125
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup355

cleanup125.if.end130_crit_edge:                   ; preds = %cleanup125
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end130

if.end130:                                        ; preds = %cleanup125.if.end130_crit_edge, %cleanup.i.if.end130_crit_edge, %if.end67.if.end130_crit_edge
  %val_len.addr.1 = phi i32 [ %val_len.addr.0.lcssa, %cleanup125.if.end130_crit_edge ], [ %val_len, %if.end67.if.end130_crit_edge ], [ %val_len, %cleanup.i.if.end130_crit_edge ]
  %val.addr.1 = phi ptr [ %val.addr.0.lcssa, %cleanup125.if.end130_crit_edge ], [ %val, %if.end67.if.end130_crit_edge ], [ %val, %cleanup.i.if.end130_crit_edge ]
  %format_reg = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 7, i32 5
  %132 = ptrtoint ptr %format_reg to i32
  call void @__asan_load4_noabort(i32 %132)
  %133 = load ptr, ptr %format_reg, align 4
  %134 = ptrtoint ptr %work_buf to i32
  call void @__asan_load4_noabort(i32 %134)
  %135 = load ptr, ptr %work_buf, align 4
  %136 = ptrtoint ptr %reg.addr to i32
  call void @__asan_load4_noabort(i32 %136)
  %137 = load i32, ptr %reg.addr, align 4
  %reg_shift = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 44
  %138 = ptrtoint ptr %reg_shift to i32
  call void @__asan_load4_noabort(i32 %138)
  %139 = load i32, ptr %reg_shift, align 4
  tail call void %133(ptr noundef %135, i32 noundef %137, i32 noundef %139) #24
  %140 = ptrtoint ptr %reg_bytes to i32
  call void @__asan_load4_noabort(i32 %140)
  %141 = load i32, ptr %reg_bytes, align 4
  %write_flag_mask = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 43
  %142 = ptrtoint ptr %write_flag_mask to i32
  call void @__asan_load4_noabort(i32 %142)
  %143 = load i32, ptr %write_flag_mask, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %143)
  %tobool.not.i671 = icmp eq i32 %143, 0
  br i1 %tobool.not.i671, label %if.end130.regmap_set_work_buf_flag_mask.exit_crit_edge, label %lor.lhs.false.i

if.end130.regmap_set_work_buf_flag_mask.exit_crit_edge: ; preds = %if.end130
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_set_work_buf_flag_mask.exit

lor.lhs.false.i:                                  ; preds = %if.end130
  %144 = ptrtoint ptr %work_buf to i32
  call void @__asan_load4_noabort(i32 %144)
  %145 = load ptr, ptr %work_buf, align 4
  %tobool1.not.i = icmp ne ptr %145, null
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %141)
  %cmp10.i = icmp sgt i32 %141, 0
  %or.cond.i672 = and i1 %cmp10.i, %tobool1.not.i
  br i1 %or.cond.i672, label %lor.lhs.false.i.for.body.i_crit_edge, label %lor.lhs.false.i.regmap_set_work_buf_flag_mask.exit_crit_edge

lor.lhs.false.i.regmap_set_work_buf_flag_mask.exit_crit_edge: ; preds = %lor.lhs.false.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_set_work_buf_flag_mask.exit

lor.lhs.false.i.for.body.i_crit_edge:             ; preds = %lor.lhs.false.i
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i.for.body.i_crit_edge, %lor.lhs.false.i.for.body.i_crit_edge
  %i.011.i = phi i32 [ %inc.i, %for.body.i.for.body.i_crit_edge ], [ 0, %lor.lhs.false.i.for.body.i_crit_edge ]
  %mul.i673 = shl i32 %i.011.i, 3
  %shr.i = lshr i32 %143, %mul.i673
  %arrayidx.i = getelementptr i8, ptr %145, i32 %i.011.i
  %146 = ptrtoint ptr %arrayidx.i to i32
  call void @__asan_load1_noabort(i32 %146)
  %147 = load i8, ptr %arrayidx.i, align 1
  %148 = trunc i32 %shr.i to i8
  %conv3.i = or i8 %147, %148
  store i8 %conv3.i, ptr %arrayidx.i, align 1
  %inc.i = add nuw nsw i32 %i.011.i, 1
  %exitcond.not.i = icmp eq i32 %inc.i, %141
  br i1 %exitcond.not.i, label %for.body.i.regmap_set_work_buf_flag_mask.exit_crit_edge, label %for.body.i.for.body.i_crit_edge

for.body.i.for.body.i_crit_edge:                  ; preds = %for.body.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body.i

for.body.i.regmap_set_work_buf_flag_mask.exit_crit_edge: ; preds = %for.body.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_set_work_buf_flag_mask.exit

regmap_set_work_buf_flag_mask.exit:               ; preds = %for.body.i.regmap_set_work_buf_flag_mask.exit_crit_edge, %lor.lhs.false.i.regmap_set_work_buf_flag_mask.exit_crit_edge, %if.end130.regmap_set_work_buf_flag_mask.exit_crit_edge
  %cmp135.not = icmp eq ptr %val.addr.1, %add.ptr2
  br i1 %cmp135.not, label %regmap_set_work_buf_flag_mask.exit.if.end143_crit_edge, label %land.lhs.true136

regmap_set_work_buf_flag_mask.exit.if.end143_crit_edge: ; preds = %regmap_set_work_buf_flag_mask.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end143

land.lhs.true136:                                 ; preds = %regmap_set_work_buf_flag_mask.exit
  %val_bytes138 = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 7, i32 3
  %149 = ptrtoint ptr %val_bytes138 to i32
  call void @__asan_load4_noabort(i32 %149)
  %150 = load i32, ptr %val_bytes138, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %val_len.addr.1, i32 %150)
  %cmp139 = icmp eq i32 %val_len.addr.1, %150
  br i1 %cmp139, label %if.then140, label %land.lhs.true136.if.end143_crit_edge

land.lhs.true136.if.end143_crit_edge:             ; preds = %land.lhs.true136
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end143

if.then140:                                       ; preds = %land.lhs.true136
  call void @__sanitizer_cov_trace_pc() #26
  %151 = call ptr @memcpy(ptr %add.ptr2, ptr %val.addr.1, i32 %val_len.addr.1)
  br label %if.end143

if.end143:                                        ; preds = %if.then140, %land.lhs.true136.if.end143_crit_edge, %regmap_set_work_buf_flag_mask.exit.if.end143_crit_edge
  %val.addr.2 = phi ptr [ %add.ptr2, %if.then140 ], [ %val.addr.1, %land.lhs.true136.if.end143_crit_edge ], [ %add.ptr2, %regmap_set_work_buf_flag_mask.exit.if.end143_crit_edge ]
  %async = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 11
  %152 = ptrtoint ptr %async to i32
  call void @__asan_load1_noabort(i32 %152)
  %153 = load i8, ptr %async, align 4, !range !389
  call void @__sanitizer_cov_trace_const_cmp1(i8 0, i8 %153)
  %tobool144.not = icmp eq i8 %153, 0
  br i1 %tobool144.not, label %if.end143.if.end269_crit_edge, label %land.lhs.true145

if.end143.if.end269_crit_edge:                    ; preds = %if.end143
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end269

land.lhs.true145:                                 ; preds = %if.end143
  %154 = ptrtoint ptr %bus to i32
  call void @__asan_load4_noabort(i32 %154)
  %155 = load ptr, ptr %bus, align 4
  %async_write = getelementptr inbounds %struct.regmap_bus, ptr %155, i32 0, i32 3
  %156 = ptrtoint ptr %async_write to i32
  call void @__asan_load4_noabort(i32 %156)
  %157 = load ptr, ptr %async_write, align 4
  %tobool147.not = icmp eq ptr %157, null
  br i1 %tobool147.not, label %land.lhs.true145.if.end269_crit_edge, label %if.then148

land.lhs.true145.if.end269_crit_edge:             ; preds = %land.lhs.true145
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end269

if.then148:                                       ; preds = %land.lhs.true145
  tail call fastcc void @trace_regmap_async_write_start(ptr noundef %map, i32 noundef %137, i32 noundef %val_len.addr.1)
  %async_lock = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 12
  %call155 = tail call i32 @_raw_spin_lock_irqsave(ptr noundef %async_lock) #24
  %async_free = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 15
  %158 = ptrtoint ptr %async_free to i32
  call void @__asan_load4_noabort(i32 %158)
  %159 = load volatile ptr, ptr %async_free, align 4
  %cmp165.not = icmp eq ptr %159, %async_free
  %tobool173.not735 = icmp eq ptr %159, null
  %tobool173.not = or i1 %cmp165.not, %tobool173.not735
  br i1 %tobool173.not, label %if.then178.critedge, label %if.then174

if.then174:                                       ; preds = %if.then148
  %call.i.i = tail call zeroext i1 @__list_del_entry_valid(ptr noundef nonnull %159) #24
  br i1 %call.i.i, label %if.end.i.i675, label %if.then174.list_del.exit_crit_edge

if.then174.list_del.exit_crit_edge:               ; preds = %if.then174
  call void @__sanitizer_cov_trace_pc() #26
  br label %list_del.exit

if.end.i.i675:                                    ; preds = %if.then174
  call void @__sanitizer_cov_trace_pc() #26
  %prev.i.i = getelementptr inbounds %struct.list_head, ptr %159, i32 0, i32 1
  %160 = ptrtoint ptr %prev.i.i to i32
  call void @__asan_load4_noabort(i32 %160)
  %161 = load ptr, ptr %prev.i.i, align 4
  %162 = ptrtoint ptr %159 to i32
  call void @__asan_load4_noabort(i32 %162)
  %163 = load ptr, ptr %159, align 4
  %prev1.i.i.i = getelementptr inbounds %struct.list_head, ptr %163, i32 0, i32 1
  %164 = ptrtoint ptr %prev1.i.i.i to i32
  call void @__asan_store4_noabort(i32 %164)
  store ptr %161, ptr %prev1.i.i.i, align 4
  %165 = ptrtoint ptr %161 to i32
  call void @__asan_store4_noabort(i32 %165)
  store volatile ptr %163, ptr %161, align 4
  br label %list_del.exit

list_del.exit:                                    ; preds = %if.end.i.i675, %if.then174.list_del.exit_crit_edge
  %166 = ptrtoint ptr %159 to i32
  call void @__asan_store4_noabort(i32 %166)
  store ptr inttoptr (i32 256 to ptr), ptr %159, align 4
  %prev.i = getelementptr inbounds %struct.list_head, ptr %159, i32 0, i32 1
  %167 = ptrtoint ptr %prev.i to i32
  call void @__asan_store4_noabort(i32 %167)
  store ptr inttoptr (i32 290 to ptr), ptr %prev.i, align 4
  tail call void @_raw_spin_unlock_irqrestore(ptr noundef %async_lock, i32 noundef %call155) #24
  br label %if.end191

if.then178.critedge:                              ; preds = %if.then148
  tail call void @_raw_spin_unlock_irqrestore(ptr noundef %async_lock, i32 noundef %call155) #24
  %168 = ptrtoint ptr %bus to i32
  call void @__asan_load4_noabort(i32 %168)
  %169 = load ptr, ptr %bus, align 4
  %async_alloc = getelementptr inbounds %struct.regmap_bus, ptr %169, i32 0, i32 9
  %170 = ptrtoint ptr %async_alloc to i32
  call void @__asan_load4_noabort(i32 %170)
  %171 = load ptr, ptr %async_alloc, align 4
  %call180 = tail call ptr %171() #24
  %tobool181.not = icmp eq ptr %call180, null
  br i1 %tobool181.not, label %if.then178.critedge.cleanup355_crit_edge, label %if.end8.i.i

if.then178.critedge.cleanup355_crit_edge:         ; preds = %if.then178.critedge
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup355

if.end8.i.i:                                      ; preds = %if.then178.critedge
  %172 = ptrtoint ptr %format to i32
  call void @__asan_load4_noabort(i32 %172)
  %173 = load i32, ptr %format, align 4
  %call9.i.i = tail call noalias align 128 ptr @__kmalloc(i32 noundef %173, i32 noundef 3521) #30
  %work_buf186 = getelementptr inbounds %struct.regmap_async, ptr %call180, i32 0, i32 2
  %174 = ptrtoint ptr %work_buf186 to i32
  call void @__asan_store4_noabort(i32 %174)
  store ptr %call9.i.i, ptr %work_buf186, align 4
  %tobool188.not = icmp eq ptr %call9.i.i, null
  br i1 %tobool188.not, label %if.then189, label %if.end8.i.i.if.end191_crit_edge

if.end8.i.i.if.end191_crit_edge:                  ; preds = %if.end8.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end191

if.then189:                                       ; preds = %if.end8.i.i
  call void @__sanitizer_cov_trace_pc() #26
  tail call void @kfree(ptr noundef nonnull %call180) #24
  br label %cleanup355

if.end191:                                        ; preds = %if.end8.i.i.if.end191_crit_edge, %list_del.exit
  %async149.0 = phi ptr [ %call180, %if.end8.i.i.if.end191_crit_edge ], [ %159, %list_del.exit ]
  %map192 = getelementptr inbounds %struct.regmap_async, ptr %async149.0, i32 0, i32 1
  %175 = ptrtoint ptr %map192 to i32
  call void @__asan_store4_noabort(i32 %175)
  store ptr %map, ptr %map192, align 4
  %work_buf193 = getelementptr inbounds %struct.regmap_async, ptr %async149.0, i32 0, i32 2
  %176 = ptrtoint ptr %work_buf193 to i32
  call void @__asan_load4_noabort(i32 %176)
  %177 = load ptr, ptr %work_buf193, align 4
  %178 = ptrtoint ptr %work_buf to i32
  call void @__asan_load4_noabort(i32 %178)
  %179 = load ptr, ptr %work_buf, align 4
  %180 = ptrtoint ptr %pad_bytes to i32
  call void @__asan_load4_noabort(i32 %180)
  %181 = load i32, ptr %pad_bytes, align 4
  %182 = ptrtoint ptr %reg_bytes to i32
  call void @__asan_load4_noabort(i32 %182)
  %183 = load i32, ptr %reg_bytes, align 4
  %add199 = add i32 %183, %181
  %val_bytes201 = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 7, i32 3
  %184 = ptrtoint ptr %val_bytes201 to i32
  call void @__asan_load4_noabort(i32 %184)
  %185 = load i32, ptr %val_bytes201, align 4
  %add202 = add i32 %add199, %185
  %186 = call ptr @memcpy(ptr %177, ptr %179, i32 %add202)
  %call212 = tail call i32 @_raw_spin_lock_irqsave(ptr noundef %async_lock) #24
  %async_list = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 14
  %prev.i678 = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 14, i32 1
  %187 = ptrtoint ptr %prev.i678 to i32
  call void @__asan_load4_noabort(i32 %187)
  %188 = load ptr, ptr %prev.i678, align 4
  %call.i.i679 = tail call zeroext i1 @__list_add_valid(ptr noundef nonnull %async149.0, ptr noundef %188, ptr noundef %async_list) #24
  br i1 %call.i.i679, label %if.end.i.i680, label %if.end191.list_add_tail.exit_crit_edge

if.end191.list_add_tail.exit_crit_edge:           ; preds = %if.end191
  call void @__sanitizer_cov_trace_pc() #26
  br label %list_add_tail.exit

if.end.i.i680:                                    ; preds = %if.end191
  call void @__sanitizer_cov_trace_pc() #26
  %189 = ptrtoint ptr %prev.i678 to i32
  call void @__asan_store4_noabort(i32 %189)
  store ptr %async149.0, ptr %prev.i678, align 4
  %190 = ptrtoint ptr %async149.0 to i32
  call void @__asan_store4_noabort(i32 %190)
  store ptr %async_list, ptr %async149.0, align 4
  %prev3.i.i = getelementptr inbounds %struct.list_head, ptr %async149.0, i32 0, i32 1
  %191 = ptrtoint ptr %prev3.i.i to i32
  call void @__asan_store4_noabort(i32 %191)
  store ptr %188, ptr %prev3.i.i, align 4
  %192 = ptrtoint ptr %188 to i32
  call void @__asan_store4_noabort(i32 %192)
  store volatile ptr %async149.0, ptr %188, align 4
  br label %list_add_tail.exit

list_add_tail.exit:                               ; preds = %if.end.i.i680, %if.end191.list_add_tail.exit_crit_edge
  tail call void @_raw_spin_unlock_irqrestore(ptr noundef %async_lock, i32 noundef %call212) #24
  %cmp219.not = icmp eq ptr %val.addr.2, %add.ptr2
  %193 = ptrtoint ptr %bus to i32
  call void @__asan_load4_noabort(i32 %193)
  %194 = load ptr, ptr %bus, align 4
  %async_write232 = getelementptr inbounds %struct.regmap_bus, ptr %194, i32 0, i32 3
  %195 = ptrtoint ptr %async_write232 to i32
  call void @__asan_load4_noabort(i32 %195)
  %196 = load ptr, ptr %async_write232, align 4
  %bus_context233 = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 9
  %197 = ptrtoint ptr %bus_context233 to i32
  call void @__asan_load4_noabort(i32 %197)
  %198 = load ptr, ptr %bus_context233, align 4
  %199 = ptrtoint ptr %work_buf193 to i32
  call void @__asan_load4_noabort(i32 %199)
  %200 = load ptr, ptr %work_buf193, align 4
  %201 = ptrtoint ptr %reg_bytes to i32
  call void @__asan_load4_noabort(i32 %201)
  %202 = load i32, ptr %reg_bytes, align 4
  %203 = ptrtoint ptr %pad_bytes to i32
  call void @__asan_load4_noabort(i32 %203)
  %204 = load i32, ptr %pad_bytes, align 4
  br i1 %cmp219.not, label %if.else, label %if.then221

if.then221:                                       ; preds = %list_add_tail.exit
  call void @__sanitizer_cov_trace_pc() #26
  %add229 = add i32 %204, %202
  %call230 = tail call i32 %196(ptr noundef %198, ptr noundef %200, i32 noundef %add229, ptr noundef %val.addr.2, i32 noundef %val_len.addr.1, ptr noundef nonnull %async149.0) #24
  br label %if.end242

if.else:                                          ; preds = %list_add_tail.exit
  call void @__sanitizer_cov_trace_pc() #26
  %add239 = add i32 %202, %val_len.addr.1
  %add240 = add i32 %add239, %204
  %call241 = tail call i32 %196(ptr noundef %198, ptr noundef %200, i32 noundef %add240, ptr noundef null, i32 noundef 0, ptr noundef nonnull %async149.0) #24
  br label %if.end242

if.end242:                                        ; preds = %if.else, %if.then221
  %ret.0 = phi i32 [ %call230, %if.then221 ], [ %call241, %if.else ]
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %ret.0)
  %cmp243.not = icmp eq i32 %ret.0, 0
  br i1 %cmp243.not, label %if.end242.cleanup355_crit_edge, label %do.end248

if.end242.cleanup355_crit_edge:                   ; preds = %if.end242
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup355

do.end248:                                        ; preds = %if.end242
  call void @__sanitizer_cov_trace_pc() #26
  %dev249 = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 5
  %205 = ptrtoint ptr %dev249 to i32
  call void @__asan_load4_noabort(i32 %205)
  %206 = load ptr, ptr %dev249, align 4
  tail call void (ptr, ptr, ...) @_dev_err(ptr noundef %206, ptr noundef nonnull @.str.68, i32 noundef %ret.0) #31
  %call259 = tail call i32 @_raw_spin_lock_irqsave(ptr noundef %async_lock) #24
  tail call fastcc void @list_move(ptr noundef nonnull %async149.0, ptr noundef %async_free)
  tail call void @_raw_spin_unlock_irqrestore(ptr noundef %async_lock, i32 noundef %call259) #24
  br label %cleanup355

if.end269:                                        ; preds = %land.lhs.true145.if.end269_crit_edge, %if.end143.if.end269_crit_edge
  %val_bytes271 = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 7, i32 3
  %207 = ptrtoint ptr %val_bytes271 to i32
  call void @__asan_load4_noabort(i32 %207)
  %208 = load i32, ptr %val_bytes271, align 4
  %div272 = udiv i32 %val_len.addr.1, %208
  tail call fastcc void @trace_regmap_hw_write_start(ptr noundef %map, i32 noundef %137, i32 noundef %div272)
  %cmp273 = icmp eq ptr %val.addr.2, %add.ptr2
  %209 = ptrtoint ptr %bus to i32
  call void @__asan_load4_noabort(i32 %209)
  %210 = load ptr, ptr %bus, align 4
  br i1 %cmp273, label %if.then275, label %if.else286

if.then275:                                       ; preds = %if.end269
  call void @__sanitizer_cov_trace_pc() #26
  %write = getelementptr inbounds %struct.regmap_bus, ptr %210, i32 0, i32 1
  %211 = ptrtoint ptr %write to i32
  call void @__asan_load4_noabort(i32 %211)
  %212 = load ptr, ptr %write, align 4
  %bus_context277 = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 9
  %213 = ptrtoint ptr %bus_context277 to i32
  call void @__asan_load4_noabort(i32 %213)
  %214 = load ptr, ptr %bus_context277, align 4
  %215 = ptrtoint ptr %work_buf to i32
  call void @__asan_load4_noabort(i32 %215)
  %216 = load ptr, ptr %work_buf, align 4
  %217 = ptrtoint ptr %reg_bytes to i32
  call void @__asan_load4_noabort(i32 %217)
  %218 = load i32, ptr %reg_bytes, align 4
  %219 = ptrtoint ptr %pad_bytes to i32
  call void @__asan_load4_noabort(i32 %219)
  %220 = load i32, ptr %pad_bytes, align 4
  %add283 = add i32 %218, %val_len.addr.1
  %add284 = add i32 %add283, %220
  %call285 = tail call i32 %212(ptr noundef %214, ptr noundef %216, i32 noundef %add284) #24
  br label %if.end302

if.else286:                                       ; preds = %if.end269
  %gather_write = getelementptr inbounds %struct.regmap_bus, ptr %210, i32 0, i32 2
  %221 = ptrtoint ptr %gather_write to i32
  call void @__asan_load4_noabort(i32 %221)
  %222 = load ptr, ptr %gather_write, align 4
  %tobool288.not = icmp eq ptr %222, null
  br i1 %tobool288.not, label %if.else286.if.then305_crit_edge, label %if.then289

if.else286.if.then305_crit_edge:                  ; preds = %if.else286
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.then305

if.then289:                                       ; preds = %if.else286
  call void @__sanitizer_cov_trace_pc() #26
  %bus_context292 = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 9
  %223 = ptrtoint ptr %bus_context292 to i32
  call void @__asan_load4_noabort(i32 %223)
  %224 = load ptr, ptr %bus_context292, align 4
  %225 = ptrtoint ptr %work_buf to i32
  call void @__asan_load4_noabort(i32 %225)
  %226 = load ptr, ptr %work_buf, align 4
  %227 = ptrtoint ptr %reg_bytes to i32
  call void @__asan_load4_noabort(i32 %227)
  %228 = load i32, ptr %reg_bytes, align 4
  %229 = ptrtoint ptr %pad_bytes to i32
  call void @__asan_load4_noabort(i32 %229)
  %230 = load i32, ptr %pad_bytes, align 4
  %add298 = add i32 %230, %228
  %call299 = tail call i32 %222(ptr noundef %224, ptr noundef %226, i32 noundef %add298, ptr noundef %val.addr.2, i32 noundef %val_len.addr.1) #24
  br label %if.end302

if.end302:                                        ; preds = %if.then289, %if.then275
  %ret.1 = phi i32 [ %call285, %if.then275 ], [ %call299, %if.then289 ]
  %231 = zext i32 %ret.1 to i64
  call void @__sanitizer_cov_trace_switch(i64 %231, ptr @__sancov_gen_cov_switch_values.80)
  switch i32 %ret.1, label %land.lhs.true332 [
    i32 -524, label %if.end302.if.then305_crit_edge
    i32 0, label %if.end302.if.end351_crit_edge
  ]

if.end302.if.end351_crit_edge:                    ; preds = %if.end302
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end351

if.end302.if.then305_crit_edge:                   ; preds = %if.end302
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.then305

if.then305:                                       ; preds = %if.end302.if.then305_crit_edge, %if.else286.if.then305_crit_edge
  %232 = ptrtoint ptr %reg_bytes to i32
  call void @__asan_load4_noabort(i32 %232)
  %233 = load i32, ptr %reg_bytes, align 4
  %234 = ptrtoint ptr %pad_bytes to i32
  call void @__asan_load4_noabort(i32 %234)
  %235 = load i32, ptr %pad_bytes, align 4
  %add310 = add i32 %233, %val_len.addr.1
  %add311 = add i32 %add310, %235
  %call9.i.i709 = tail call noalias align 128 ptr @__kmalloc(i32 noundef %add311, i32 noundef 3520) #30
  %tobool313.not = icmp eq ptr %call9.i.i709, null
  br i1 %tobool313.not, label %if.then305.cleanup355_crit_edge, label %if.end315

if.then305.cleanup355_crit_edge:                  ; preds = %if.then305
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup355

if.end315:                                        ; preds = %if.then305
  call void @__sanitizer_cov_trace_pc() #26
  %236 = ptrtoint ptr %work_buf to i32
  call void @__asan_load4_noabort(i32 %236)
  %237 = load ptr, ptr %work_buf, align 4
  %238 = ptrtoint ptr %reg_bytes to i32
  call void @__asan_load4_noabort(i32 %238)
  %239 = load i32, ptr %reg_bytes, align 4
  %240 = call ptr @memcpy(ptr %call9.i.i709, ptr %237, i32 %239)
  %add.ptr321 = getelementptr i8, ptr %call9.i.i709, i32 %239
  %241 = ptrtoint ptr %pad_bytes to i32
  call void @__asan_load4_noabort(i32 %241)
  %242 = load i32, ptr %pad_bytes, align 4
  %add.ptr324 = getelementptr i8, ptr %add.ptr321, i32 %242
  %243 = call ptr @memcpy(ptr %add.ptr324, ptr %val.addr.2, i32 %val_len.addr.1)
  %244 = ptrtoint ptr %bus to i32
  call void @__asan_load4_noabort(i32 %244)
  %245 = load ptr, ptr %bus, align 4
  %write326 = getelementptr inbounds %struct.regmap_bus, ptr %245, i32 0, i32 1
  %246 = ptrtoint ptr %write326 to i32
  call void @__asan_load4_noabort(i32 %246)
  %247 = load ptr, ptr %write326, align 4
  %bus_context327 = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 9
  %248 = ptrtoint ptr %bus_context327 to i32
  call void @__asan_load4_noabort(i32 %248)
  %249 = load ptr, ptr %bus_context327, align 4
  %call328 = tail call i32 %247(ptr noundef %249, ptr noundef nonnull %call9.i.i709, i32 noundef %add311) #24
  tail call void @kfree(ptr noundef nonnull %call9.i.i709) #24
  br label %if.end351

land.lhs.true332:                                 ; preds = %if.end302
  %250 = ptrtoint ptr %cache_bypass to i32
  call void @__asan_load1_noabort(i32 %250)
  %251 = load i8, ptr %cache_bypass, align 1, !range !389
  call void @__sanitizer_cov_trace_const_cmp1(i8 0, i8 %251)
  %tobool334.not = icmp eq i8 %251, 0
  br i1 %tobool334.not, label %land.lhs.true335, label %land.lhs.true332.if.end351_crit_edge

land.lhs.true332.if.end351_crit_edge:             ; preds = %land.lhs.true332
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end351

land.lhs.true335:                                 ; preds = %land.lhs.true332
  %parse_val337 = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 7, i32 7
  %252 = ptrtoint ptr %parse_val337 to i32
  call void @__asan_load4_noabort(i32 %252)
  %253 = load ptr, ptr %parse_val337, align 4
  %tobool338.not = icmp eq ptr %253, null
  br i1 %tobool338.not, label %land.lhs.true335.if.end351_crit_edge, label %if.then339

land.lhs.true335.if.end351_crit_edge:             ; preds = %land.lhs.true335
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end351

if.then339:                                       ; preds = %land.lhs.true335
  %cache_ops = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 47
  %254 = ptrtoint ptr %cache_ops to i32
  call void @__asan_load4_noabort(i32 %254)
  %255 = load ptr, ptr %cache_ops, align 4
  %tobool340.not = icmp eq ptr %255, null
  br i1 %tobool340.not, label %if.then339.if.end351_crit_edge, label %land.lhs.true341

if.then339.if.end351_crit_edge:                   ; preds = %if.then339
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end351

land.lhs.true341:                                 ; preds = %if.then339
  %drop = getelementptr inbounds %struct.regcache_ops, ptr %255, i32 0, i32 8
  %256 = ptrtoint ptr %drop to i32
  call void @__asan_load4_noabort(i32 %256)
  %257 = load ptr, ptr %drop, align 4
  %tobool343.not = icmp eq ptr %257, null
  br i1 %tobool343.not, label %land.lhs.true341.if.end351_crit_edge, label %if.then344

land.lhs.true341.if.end351_crit_edge:             ; preds = %land.lhs.true341
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end351

if.then344:                                       ; preds = %land.lhs.true341
  call void @__sanitizer_cov_trace_pc() #26
  %add347 = add i32 %137, 1
  %call348 = tail call i32 %257(ptr noundef %map, i32 noundef %137, i32 noundef %add347) #24
  br label %if.end351

if.end351:                                        ; preds = %if.then344, %land.lhs.true341.if.end351_crit_edge, %if.then339.if.end351_crit_edge, %land.lhs.true335.if.end351_crit_edge, %land.lhs.true332.if.end351_crit_edge, %if.end315, %if.end302.if.end351_crit_edge
  %ret.2 = phi i32 [ %call328, %if.end315 ], [ %ret.1, %land.lhs.true332.if.end351_crit_edge ], [ %ret.1, %if.then344 ], [ %ret.1, %land.lhs.true341.if.end351_crit_edge ], [ %ret.1, %if.then339.if.end351_crit_edge ], [ %ret.1, %land.lhs.true335.if.end351_crit_edge ], [ %ret.1, %if.end302.if.end351_crit_edge ]
  %258 = ptrtoint ptr %val_bytes271 to i32
  call void @__asan_load4_noabort(i32 %258)
  %259 = load i32, ptr %val_bytes271, align 4
  %div354 = udiv i32 %val_len.addr.1, %259
  tail call fastcc void @trace_regmap_hw_write_done(ptr noundef %map, i32 noundef %137, i32 noundef %div354)
  br label %cleanup355

cleanup355.loopexit:                              ; preds = %do.end95
  call void @__sanitizer_cov_trace_pc() #26
  %260 = ptrtoint ptr %reg.addr to i32
  call void @__asan_store4_noabort(i32 %260)
  store i32 %add104748751, ptr %reg.addr, align 4
  br label %cleanup355

cleanup355:                                       ; preds = %cleanup355.loopexit, %if.end351, %if.then305.cleanup355_crit_edge, %do.end248, %if.end242.cleanup355_crit_edge, %if.then189, %if.then178.critedge.cleanup355_crit_edge, %cleanup125.cleanup355_crit_edge, %if.then61, %regmap_get_offset.exit666, %regmap_writeable_noinc.exit648.cleanup355_crit_edge, %if.end.i.i632.cleanup355_crit_edge, %if.end.i609.cleanup355_crit_edge, %if.then.i606.cleanup355_crit_edge, %regmap_writeable.exit.cleanup355_crit_edge, %regmap_reg_in_ranges.exit.i.i583.cleanup355_crit_edge, %if.then3.i564.cleanup355_crit_edge, %regmap_get_offset.exit.cleanup355_crit_edge
  %retval.7 = phi i32 [ %ret.2, %if.end351 ], [ %call121, %cleanup125.cleanup355_crit_edge ], [ -12, %if.then189 ], [ -12, %if.then178.critedge.cleanup355_crit_edge ], [ %ret.0, %do.end248 ], [ 0, %if.end242.cleanup355_crit_edge ], [ -12, %if.then305.cleanup355_crit_edge ], [ %call48, %regmap_get_offset.exit666 ], [ 0, %if.then61 ], [ %call100, %cleanup355.loopexit ], [ -22, %regmap_writeable.exit.cleanup355_crit_edge ], [ -22, %regmap_writeable_noinc.exit648.cleanup355_crit_edge ], [ -22, %if.then3.i564.cleanup355_crit_edge ], [ -22, %if.then.i606.cleanup355_crit_edge ], [ -22, %regmap_get_offset.exit.cleanup355_crit_edge ], [ -22, %regmap_reg_in_ranges.exit.i.i583.cleanup355_crit_edge ], [ -22, %if.end.i609.cleanup355_crit_edge ], [ -22, %if.end.i.i632.cleanup355_crit_edge ]
  ret i32 %retval.7
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @regmap_raw_write(ptr noundef %map, i32 noundef %reg, ptr noundef %val, i32 noundef %val_len) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %bus.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 8
  %0 = ptrtoint ptr %bus.i to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %bus.i, align 4
  %tobool.not.i = icmp eq ptr %1, null
  br i1 %tobool.not.i, label %entry.cleanup_crit_edge, label %land.lhs.true.i

entry.cleanup_crit_edge:                          ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

land.lhs.true.i:                                  ; preds = %entry
  %write.i = getelementptr inbounds %struct.regmap_bus, ptr %1, i32 0, i32 1
  %2 = ptrtoint ptr %write.i to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load ptr, ptr %write.i, align 4
  %tobool2.not.i = icmp eq ptr %3, null
  br i1 %tobool2.not.i, label %land.lhs.true.i.cleanup_crit_edge, label %land.lhs.true3.i

land.lhs.true.i.cleanup_crit_edge:                ; preds = %land.lhs.true.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

land.lhs.true3.i:                                 ; preds = %land.lhs.true.i
  %format_val.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 7, i32 6
  %4 = ptrtoint ptr %format_val.i to i32
  call void @__asan_load4_noabort(i32 %4)
  %5 = load ptr, ptr %format_val.i, align 4
  %tobool4.not.i = icmp eq ptr %5, null
  br i1 %tobool4.not.i, label %land.lhs.true3.i.cleanup_crit_edge, label %regmap_can_raw_write.exit

land.lhs.true3.i.cleanup_crit_edge:               ; preds = %land.lhs.true3.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

regmap_can_raw_write.exit:                        ; preds = %land.lhs.true3.i
  %format_reg.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 7, i32 5
  %6 = ptrtoint ptr %format_reg.i to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load ptr, ptr %format_reg.i, align 4
  %tobool6.i.not = icmp eq ptr %7, null
  br i1 %tobool6.i.not, label %regmap_can_raw_write.exit.cleanup_crit_edge, label %if.end

regmap_can_raw_write.exit.cleanup_crit_edge:      ; preds = %regmap_can_raw_write.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end:                                           ; preds = %regmap_can_raw_write.exit
  %val_bytes = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 7, i32 3
  %8 = ptrtoint ptr %val_bytes to i32
  call void @__asan_load4_noabort(i32 %8)
  %9 = load i32, ptr %val_bytes, align 4
  %rem = urem i32 %val_len, %9
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %rem)
  %tobool.not = icmp eq i32 %rem, 0
  br i1 %tobool.not, label %if.end2, label %if.end.cleanup_crit_edge

if.end.cleanup_crit_edge:                         ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end2:                                          ; preds = %if.end
  %lock = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 1
  %10 = ptrtoint ptr %lock to i32
  call void @__asan_load4_noabort(i32 %10)
  %11 = load ptr, ptr %lock, align 4
  %lock_arg = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 3
  %12 = ptrtoint ptr %lock_arg to i32
  call void @__asan_load4_noabort(i32 %12)
  %13 = load ptr, ptr %lock_arg, align 4
  tail call void %11(ptr noundef %13) #24
  %14 = ptrtoint ptr %val_bytes to i32
  call void @__asan_load4_noabort(i32 %14)
  %15 = load i32, ptr %val_bytes, align 4
  %div.i = udiv i32 %val_len, %15
  call void @__sanitizer_cov_trace_cmp4(i32 %15, i32 %val_len)
  %tobool.not.i12 = icmp ugt i32 %15, %val_len
  br i1 %tobool.not.i12, label %if.end2._regmap_raw_write.exit_crit_edge, label %if.end.i

if.end2._regmap_raw_write.exit_crit_edge:         ; preds = %if.end2
  call void @__sanitizer_cov_trace_pc() #26
  br label %_regmap_raw_write.exit

if.end.i:                                         ; preds = %if.end2
  %use_single_write.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 64
  %16 = ptrtoint ptr %use_single_write.i to i32
  call void @__asan_load1_noabort(i32 %16)
  %17 = load i8, ptr %use_single_write.i, align 1, !range !389
  call void @__sanitizer_cov_trace_const_cmp1(i8 0, i8 %17)
  %tobool2.not.i13 = icmp eq i8 %17, 0
  br i1 %tobool2.not.i13, label %if.else.i, label %if.end.i.if.end10.i_crit_edge

if.end.i.if.end10.i_crit_edge:                    ; preds = %if.end.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end10.i

if.else.i:                                        ; preds = %if.end.i
  %max_raw_write.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 67
  %18 = ptrtoint ptr %max_raw_write.i to i32
  call void @__asan_load4_noabort(i32 %18)
  %19 = load i32, ptr %max_raw_write.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %19)
  %tobool4.not.i14 = icmp ne i32 %19, 0
  call void @__sanitizer_cov_trace_cmp4(i32 %19, i32 %val_len)
  %cmp.i = icmp ult i32 %19, %val_len
  %or.cond.i = and i1 %tobool4.not.i14, %cmp.i
  br i1 %or.cond.i, label %if.then6.i, label %if.else.i.for.body.lr.ph.i_crit_edge

if.else.i.for.body.lr.ph.i_crit_edge:             ; preds = %if.else.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body.lr.ph.i

if.then6.i:                                       ; preds = %if.else.i
  call void @__sanitizer_cov_trace_pc() #26
  %div8.i = udiv i32 %19, %15
  br label %if.end10.i

if.end10.i:                                       ; preds = %if.then6.i, %if.end.i.if.end10.i_crit_edge
  %chunk_regs.0.i = phi i32 [ %div8.i, %if.then6.i ], [ 1, %if.end.i.if.end10.i_crit_edge ]
  %div11.i = udiv i32 %div.i, %chunk_regs.0.i
  call void @__sanitizer_cov_trace_cmp4(i32 %chunk_regs.0.i, i32 %div.i)
  %cmp1260.not.i = icmp ugt i32 %chunk_regs.0.i, %div.i
  br i1 %cmp1260.not.i, label %if.end10.i.for.end.i_crit_edge, label %if.end10.i.for.body.lr.ph.i_crit_edge

if.end10.i.for.body.lr.ph.i_crit_edge:            ; preds = %if.end10.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body.lr.ph.i

if.end10.i.for.end.i_crit_edge:                   ; preds = %if.end10.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.end.i

for.body.lr.ph.i:                                 ; preds = %if.end10.i.for.body.lr.ph.i_crit_edge, %if.else.i.for.body.lr.ph.i_crit_edge
  %div1174.i = phi i32 [ %div11.i, %if.end10.i.for.body.lr.ph.i_crit_edge ], [ 1, %if.else.i.for.body.lr.ph.i_crit_edge ]
  %chunk_regs.073.i = phi i32 [ %chunk_regs.0.i, %if.end10.i.for.body.lr.ph.i_crit_edge ], [ %div.i, %if.else.i.for.body.lr.ph.i_crit_edge ]
  %mul75.i = mul i32 %chunk_regs.073.i, %15
  %reg_stride_order.i.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 46
  %reg_stride.i.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 45
  %umax.i = tail call i32 @llvm.umax.i32(i32 %div1174.i, i32 1) #24
  %20 = mul i32 %mul75.i, %umax.i
  %21 = sub i32 %val_len, %20
  br label %for.body.i

for.body.i:                                       ; preds = %regmap_get_offset.exit.i.for.body.i_crit_edge, %for.body.lr.ph.i
  %i.064.i = phi i32 [ 0, %for.body.lr.ph.i ], [ %inc.i, %regmap_get_offset.exit.i.for.body.i_crit_edge ]
  %val.addr.062.i = phi ptr [ %val, %for.body.lr.ph.i ], [ %add.ptr.i, %regmap_get_offset.exit.i.for.body.i_crit_edge ]
  %reg.addr.061.i = phi i32 [ %reg, %for.body.lr.ph.i ], [ %add.i, %regmap_get_offset.exit.i.for.body.i_crit_edge ]
  %call.i = tail call fastcc i32 @_regmap_raw_write_impl(ptr noundef %map, i32 noundef %reg.addr.061.i, ptr noundef %val.addr.062.i, i32 noundef %mul75.i, i1 noundef zeroext false) #24
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call.i)
  %tobool14.not.i = icmp eq i32 %call.i, 0
  br i1 %tobool14.not.i, label %if.end16.i, label %for.body.i._regmap_raw_write.exit_crit_edge

for.body.i._regmap_raw_write.exit_crit_edge:      ; preds = %for.body.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %_regmap_raw_write.exit

if.end16.i:                                       ; preds = %for.body.i
  %22 = ptrtoint ptr %reg_stride_order.i.i to i32
  call void @__asan_load4_noabort(i32 %22)
  %23 = load i32, ptr %reg_stride_order.i.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %23)
  %cmp.i.i = icmp sgt i32 %23, -1
  br i1 %cmp.i.i, label %if.then.i.i, label %if.else.i.i

if.then.i.i:                                      ; preds = %if.end16.i
  call void @__sanitizer_cov_trace_pc() #26
  %shl.i.i = shl i32 %chunk_regs.073.i, %23
  br label %regmap_get_offset.exit.i

if.else.i.i:                                      ; preds = %if.end16.i
  call void @__sanitizer_cov_trace_pc() #26
  %24 = ptrtoint ptr %reg_stride.i.i to i32
  call void @__asan_load4_noabort(i32 %24)
  %25 = load i32, ptr %reg_stride.i.i, align 4
  %mul.i.i = mul i32 %25, %chunk_regs.073.i
  br label %regmap_get_offset.exit.i

regmap_get_offset.exit.i:                         ; preds = %if.else.i.i, %if.then.i.i
  %retval.0.i.i = phi i32 [ %shl.i.i, %if.then.i.i ], [ %mul.i.i, %if.else.i.i ]
  %add.i = add i32 %retval.0.i.i, %reg.addr.061.i
  %add.ptr.i = getelementptr i8, ptr %val.addr.062.i, i32 %mul75.i
  %inc.i = add nuw i32 %i.064.i, 1
  %exitcond.not.i = icmp eq i32 %inc.i, %umax.i
  br i1 %exitcond.not.i, label %regmap_get_offset.exit.i.for.end.i_crit_edge, label %regmap_get_offset.exit.i.for.body.i_crit_edge

regmap_get_offset.exit.i.for.body.i_crit_edge:    ; preds = %regmap_get_offset.exit.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body.i

regmap_get_offset.exit.i.for.end.i_crit_edge:     ; preds = %regmap_get_offset.exit.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.end.i

for.end.i:                                        ; preds = %regmap_get_offset.exit.i.for.end.i_crit_edge, %if.end10.i.for.end.i_crit_edge
  %reg.addr.0.lcssa.i = phi i32 [ %reg, %if.end10.i.for.end.i_crit_edge ], [ %add.i, %regmap_get_offset.exit.i.for.end.i_crit_edge ]
  %val.addr.0.lcssa.i = phi ptr [ %val, %if.end10.i.for.end.i_crit_edge ], [ %add.ptr.i, %regmap_get_offset.exit.i.for.end.i_crit_edge ]
  %val_len.addr.0.lcssa.i = phi i32 [ %val_len, %if.end10.i.for.end.i_crit_edge ], [ %21, %regmap_get_offset.exit.i.for.end.i_crit_edge ]
  %ret.0.lcssa.i = phi i32 [ -1, %if.end10.i.for.end.i_crit_edge ], [ 0, %regmap_get_offset.exit.i.for.end.i_crit_edge ]
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %val_len.addr.0.lcssa.i)
  %tobool18.not.i = icmp eq i32 %val_len.addr.0.lcssa.i, 0
  br i1 %tobool18.not.i, label %for.end.i._regmap_raw_write.exit_crit_edge, label %if.then19.i

for.end.i._regmap_raw_write.exit_crit_edge:       ; preds = %for.end.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %_regmap_raw_write.exit

if.then19.i:                                      ; preds = %for.end.i
  call void @__sanitizer_cov_trace_pc() #26
  %call21.i = tail call fastcc i32 @_regmap_raw_write_impl(ptr noundef %map, i32 noundef %reg.addr.0.lcssa.i, ptr noundef %val.addr.0.lcssa.i, i32 noundef %val_len.addr.0.lcssa.i, i1 noundef zeroext false) #24
  br label %_regmap_raw_write.exit

_regmap_raw_write.exit:                           ; preds = %if.then19.i, %for.end.i._regmap_raw_write.exit_crit_edge, %for.body.i._regmap_raw_write.exit_crit_edge, %if.end2._regmap_raw_write.exit_crit_edge
  %retval.0.i = phi i32 [ -22, %if.end2._regmap_raw_write.exit_crit_edge ], [ %call21.i, %if.then19.i ], [ %ret.0.lcssa.i, %for.end.i._regmap_raw_write.exit_crit_edge ], [ %call.i, %for.body.i._regmap_raw_write.exit_crit_edge ]
  %unlock = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 2
  %26 = ptrtoint ptr %unlock to i32
  call void @__asan_load4_noabort(i32 %26)
  %27 = load ptr, ptr %unlock, align 4
  %28 = ptrtoint ptr %lock_arg to i32
  call void @__asan_load4_noabort(i32 %28)
  %29 = load ptr, ptr %lock_arg, align 4
  tail call void %27(ptr noundef %29) #24
  br label %cleanup

cleanup:                                          ; preds = %_regmap_raw_write.exit, %if.end.cleanup_crit_edge, %regmap_can_raw_write.exit.cleanup_crit_edge, %land.lhs.true3.i.cleanup_crit_edge, %land.lhs.true.i.cleanup_crit_edge, %entry.cleanup_crit_edge
  %retval.0 = phi i32 [ %retval.0.i, %_regmap_raw_write.exit ], [ -22, %regmap_can_raw_write.exit.cleanup_crit_edge ], [ -22, %if.end.cleanup_crit_edge ], [ -22, %land.lhs.true3.i.cleanup_crit_edge ], [ -22, %land.lhs.true.i.cleanup_crit_edge ], [ -22, %entry.cleanup_crit_edge ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @regmap_noinc_write(ptr noundef %map, i32 noundef %reg, ptr noundef %val, i32 noundef %val_len) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %bus = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 8
  %0 = ptrtoint ptr %bus to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %bus, align 4
  %tobool.not = icmp eq ptr %1, null
  br i1 %tobool.not, label %entry.cleanup_crit_edge, label %if.end

entry.cleanup_crit_edge:                          ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end:                                           ; preds = %entry
  %write = getelementptr inbounds %struct.regmap_bus, ptr %1, i32 0, i32 1
  %2 = ptrtoint ptr %write to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load ptr, ptr %write, align 4
  %tobool2.not = icmp eq ptr %3, null
  br i1 %tobool2.not, label %if.end.cleanup_crit_edge, label %if.end4

if.end.cleanup_crit_edge:                         ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %val_bytes = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 7, i32 3
  %4 = ptrtoint ptr %val_bytes to i32
  call void @__asan_load4_noabort(i32 %4)
  %5 = load i32, ptr %val_bytes, align 4
  %rem = urem i32 %val_len, %5
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %rem)
  %tobool5.not = icmp eq i32 %rem, 0
  br i1 %tobool5.not, label %if.end7, label %if.end4.cleanup_crit_edge

if.end4.cleanup_crit_edge:                        ; preds = %if.end4
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %reg_stride = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 45
  %6 = ptrtoint ptr %reg_stride to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load i32, ptr %reg_stride, align 4
  %sub = add i32 %7, -1
  %and = and i32 %sub, %reg
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and)
  %cmp = icmp ne i32 %and, 0
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %val_len)
  %cmp10 = icmp eq i32 %val_len, 0
  %or.cond56 = or i1 %cmp10, %cmp
  br i1 %or.cond56, label %if.end7.cleanup_crit_edge, label %if.end12

if.end7.cleanup_crit_edge:                        ; preds = %if.end7
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end12:                                         ; preds = %if.end7
  %lock = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 1
  %8 = ptrtoint ptr %lock to i32
  call void @__asan_load4_noabort(i32 %8)
  %9 = load ptr, ptr %lock, align 4
  %lock_arg = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 3
  %10 = ptrtoint ptr %lock_arg to i32
  call void @__asan_load4_noabort(i32 %10)
  %11 = load ptr, ptr %lock_arg, align 4
  tail call void %9(ptr noundef %11) #24
  %call = tail call zeroext i1 @regmap_volatile(ptr noundef %map, i32 noundef %reg)
  br i1 %call, label %lor.lhs.false, label %if.end12.out_unlock_crit_edge

if.end12.out_unlock_crit_edge:                    ; preds = %if.end12
  call void @__sanitizer_cov_trace_pc() #26
  br label %out_unlock

lor.lhs.false:                                    ; preds = %if.end12
  %writeable_noinc_reg.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 30
  %12 = ptrtoint ptr %writeable_noinc_reg.i to i32
  call void @__asan_load4_noabort(i32 %12)
  %13 = load ptr, ptr %writeable_noinc_reg.i, align 4
  %tobool.not.i = icmp eq ptr %13, null
  br i1 %tobool.not.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %lor.lhs.false
  %dev.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 5
  %14 = ptrtoint ptr %dev.i to i32
  call void @__asan_load4_noabort(i32 %14)
  %15 = load ptr, ptr %dev.i, align 4
  %call.i = tail call zeroext i1 %13(ptr noundef %15, i32 noundef %reg) #24
  br i1 %call.i, label %if.then.i.while.body.lr.ph_crit_edge, label %if.then.i.out_unlock_crit_edge

if.then.i.out_unlock_crit_edge:                   ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %out_unlock

if.then.i.while.body.lr.ph_crit_edge:             ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %while.body.lr.ph

if.end.i:                                         ; preds = %lor.lhs.false
  %wr_noinc_table.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 36
  %16 = ptrtoint ptr %wr_noinc_table.i to i32
  call void @__asan_load4_noabort(i32 %16)
  %17 = load ptr, ptr %wr_noinc_table.i, align 4
  %tobool2.not.i = icmp eq ptr %17, null
  br i1 %tobool2.not.i, label %if.end.i.while.body.lr.ph_crit_edge, label %if.then3.i

if.end.i.while.body.lr.ph_crit_edge:              ; preds = %if.end.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %while.body.lr.ph

if.then3.i:                                       ; preds = %if.end.i
  %n_no_ranges.i.i = getelementptr inbounds %struct.regmap_access_table, ptr %17, i32 0, i32 3
  %18 = ptrtoint ptr %n_no_ranges.i.i to i32
  call void @__asan_load4_noabort(i32 %18)
  %19 = load i32, ptr %n_no_ranges.i.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %19)
  %cmp4.not.i.i.i = icmp eq i32 %19, 0
  br i1 %cmp4.not.i.i.i, label %if.then3.i.if.end.i.i_crit_edge, label %for.body.i.preheader.i.i

if.then3.i.if.end.i.i_crit_edge:                  ; preds = %if.then3.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end.i.i

for.body.i.preheader.i.i:                         ; preds = %if.then3.i
  %no_ranges.i.i = getelementptr inbounds %struct.regmap_access_table, ptr %17, i32 0, i32 2
  %20 = ptrtoint ptr %no_ranges.i.i to i32
  call void @__asan_load4_noabort(i32 %20)
  %21 = load ptr, ptr %no_ranges.i.i, align 4
  br label %for.body.i.i.i

for.body.i.i.i:                                   ; preds = %for.inc.i.i.i.for.body.i.i.i_crit_edge, %for.body.i.preheader.i.i
  %cmp8.i.i.i = phi i1 [ %cmp.i.i.i, %for.inc.i.i.i.for.body.i.i.i_crit_edge ], [ true, %for.body.i.preheader.i.i ]
  %i.07.i.i.i = phi i32 [ %inc.i.i.i, %for.inc.i.i.i.for.body.i.i.i_crit_edge ], [ 0, %for.body.i.preheader.i.i ]
  %r.05.i.i.i = phi ptr [ %incdec.ptr.i.i.i, %for.inc.i.i.i.for.body.i.i.i_crit_edge ], [ %21, %for.body.i.preheader.i.i ]
  %22 = ptrtoint ptr %r.05.i.i.i to i32
  call void @__asan_load4_noabort(i32 %22)
  %23 = load i32, ptr %r.05.i.i.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %23, i32 %reg)
  %cmp.not.i.i.i.i = icmp ugt i32 %23, %reg
  br i1 %cmp.not.i.i.i.i, label %for.body.i.i.i.for.inc.i.i.i_crit_edge, label %regmap_reg_in_range.exit.i.i.i

for.body.i.i.i.for.inc.i.i.i_crit_edge:           ; preds = %for.body.i.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i.i.i

regmap_reg_in_range.exit.i.i.i:                   ; preds = %for.body.i.i.i
  %range_max.i.i.i.i = getelementptr inbounds %struct.regmap_range, ptr %r.05.i.i.i, i32 0, i32 1
  %24 = ptrtoint ptr %range_max.i.i.i.i to i32
  call void @__asan_load4_noabort(i32 %24)
  %25 = load i32, ptr %range_max.i.i.i.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %25, i32 %reg)
  %cmp1.i.not.i.i.i = icmp ult i32 %25, %reg
  br i1 %cmp1.i.not.i.i.i, label %regmap_reg_in_range.exit.i.i.i.for.inc.i.i.i_crit_edge, label %regmap_reg_in_range.exit.i.i.i.regmap_reg_in_ranges.exit.i.i_crit_edge

regmap_reg_in_range.exit.i.i.i.regmap_reg_in_ranges.exit.i.i_crit_edge: ; preds = %regmap_reg_in_range.exit.i.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_reg_in_ranges.exit.i.i

regmap_reg_in_range.exit.i.i.i.for.inc.i.i.i_crit_edge: ; preds = %regmap_reg_in_range.exit.i.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i.i.i

for.inc.i.i.i:                                    ; preds = %regmap_reg_in_range.exit.i.i.i.for.inc.i.i.i_crit_edge, %for.body.i.i.i.for.inc.i.i.i_crit_edge
  %inc.i.i.i = add nuw i32 %i.07.i.i.i, 1
  %incdec.ptr.i.i.i = getelementptr %struct.regmap_range, ptr %r.05.i.i.i, i32 1
  call void @__sanitizer_cov_trace_cmp4(i32 %inc.i.i.i, i32 %19)
  %cmp.i.i.i = icmp ult i32 %inc.i.i.i, %19
  %exitcond.not.i.i.i = icmp eq i32 %inc.i.i.i, %19
  br i1 %exitcond.not.i.i.i, label %for.inc.i.i.i.regmap_reg_in_ranges.exit.i.i_crit_edge, label %for.inc.i.i.i.for.body.i.i.i_crit_edge

for.inc.i.i.i.for.body.i.i.i_crit_edge:           ; preds = %for.inc.i.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body.i.i.i

for.inc.i.i.i.regmap_reg_in_ranges.exit.i.i_crit_edge: ; preds = %for.inc.i.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_reg_in_ranges.exit.i.i

regmap_reg_in_ranges.exit.i.i:                    ; preds = %for.inc.i.i.i.regmap_reg_in_ranges.exit.i.i_crit_edge, %regmap_reg_in_range.exit.i.i.i.regmap_reg_in_ranges.exit.i.i_crit_edge
  %cmp.lcssa.i.i.i = phi i1 [ %cmp.i.i.i, %for.inc.i.i.i.regmap_reg_in_ranges.exit.i.i_crit_edge ], [ %cmp8.i.i.i, %regmap_reg_in_range.exit.i.i.i.regmap_reg_in_ranges.exit.i.i_crit_edge ]
  br i1 %cmp.lcssa.i.i.i, label %regmap_reg_in_ranges.exit.i.i.out_unlock_crit_edge, label %regmap_reg_in_ranges.exit.i.i.if.end.i.i_crit_edge

regmap_reg_in_ranges.exit.i.i.if.end.i.i_crit_edge: ; preds = %regmap_reg_in_ranges.exit.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end.i.i

regmap_reg_in_ranges.exit.i.i.out_unlock_crit_edge: ; preds = %regmap_reg_in_ranges.exit.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %out_unlock

if.end.i.i:                                       ; preds = %regmap_reg_in_ranges.exit.i.i.if.end.i.i_crit_edge, %if.then3.i.if.end.i.i_crit_edge
  %n_yes_ranges.i.i = getelementptr inbounds %struct.regmap_access_table, ptr %17, i32 0, i32 1
  %26 = ptrtoint ptr %n_yes_ranges.i.i to i32
  call void @__asan_load4_noabort(i32 %26)
  %27 = load i32, ptr %n_yes_ranges.i.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %27)
  %tobool.not.i.i = icmp eq i32 %27, 0
  br i1 %tobool.not.i.i, label %if.end.i.i.while.body.lr.ph_crit_edge, label %if.end2.i.i

if.end.i.i.while.body.lr.ph_crit_edge:            ; preds = %if.end.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %while.body.lr.ph

if.end2.i.i:                                      ; preds = %if.end.i.i
  %28 = ptrtoint ptr %17 to i32
  call void @__asan_load4_noabort(i32 %28)
  %29 = load ptr, ptr %17, align 4
  br label %for.body.i15.i.i

for.body.i15.i.i:                                 ; preds = %for.inc.i23.i.i.for.body.i15.i.i_crit_edge, %if.end2.i.i
  %cmp8.i11.i.i = phi i1 [ %cmp.i21.i.i, %for.inc.i23.i.i.for.body.i15.i.i_crit_edge ], [ true, %if.end2.i.i ]
  %i.07.i12.i.i = phi i32 [ %inc.i19.i.i, %for.inc.i23.i.i.for.body.i15.i.i_crit_edge ], [ 0, %if.end2.i.i ]
  %r.05.i13.i.i = phi ptr [ %incdec.ptr.i20.i.i, %for.inc.i23.i.i.for.body.i15.i.i_crit_edge ], [ %29, %if.end2.i.i ]
  %30 = ptrtoint ptr %r.05.i13.i.i to i32
  call void @__asan_load4_noabort(i32 %30)
  %31 = load i32, ptr %r.05.i13.i.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %31, i32 %reg)
  %cmp.not.i.i14.i.i = icmp ugt i32 %31, %reg
  br i1 %cmp.not.i.i14.i.i, label %for.body.i15.i.i.for.inc.i23.i.i_crit_edge, label %regmap_reg_in_range.exit.i18.i.i

for.body.i15.i.i.for.inc.i23.i.i_crit_edge:       ; preds = %for.body.i15.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i23.i.i

regmap_reg_in_range.exit.i18.i.i:                 ; preds = %for.body.i15.i.i
  %range_max.i.i16.i.i = getelementptr inbounds %struct.regmap_range, ptr %r.05.i13.i.i, i32 0, i32 1
  %32 = ptrtoint ptr %range_max.i.i16.i.i to i32
  call void @__asan_load4_noabort(i32 %32)
  %33 = load i32, ptr %range_max.i.i16.i.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %33, i32 %reg)
  %cmp1.i.not.i17.i.i = icmp ult i32 %33, %reg
  br i1 %cmp1.i.not.i17.i.i, label %regmap_reg_in_range.exit.i18.i.i.for.inc.i23.i.i_crit_edge, label %regmap_reg_in_range.exit.i18.i.i.regmap_writeable_noinc.exit_crit_edge

regmap_reg_in_range.exit.i18.i.i.regmap_writeable_noinc.exit_crit_edge: ; preds = %regmap_reg_in_range.exit.i18.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_writeable_noinc.exit

regmap_reg_in_range.exit.i18.i.i.for.inc.i23.i.i_crit_edge: ; preds = %regmap_reg_in_range.exit.i18.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i23.i.i

for.inc.i23.i.i:                                  ; preds = %regmap_reg_in_range.exit.i18.i.i.for.inc.i23.i.i_crit_edge, %for.body.i15.i.i.for.inc.i23.i.i_crit_edge
  %inc.i19.i.i = add nuw i32 %i.07.i12.i.i, 1
  %incdec.ptr.i20.i.i = getelementptr %struct.regmap_range, ptr %r.05.i13.i.i, i32 1
  call void @__sanitizer_cov_trace_cmp4(i32 %inc.i19.i.i, i32 %27)
  %cmp.i21.i.i = icmp ult i32 %inc.i19.i.i, %27
  %exitcond.not.i22.i.i = icmp eq i32 %inc.i19.i.i, %27
  br i1 %exitcond.not.i22.i.i, label %for.inc.i23.i.i.regmap_writeable_noinc.exit_crit_edge, label %for.inc.i23.i.i.for.body.i15.i.i_crit_edge

for.inc.i23.i.i.for.body.i15.i.i_crit_edge:       ; preds = %for.inc.i23.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body.i15.i.i

for.inc.i23.i.i.regmap_writeable_noinc.exit_crit_edge: ; preds = %for.inc.i23.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_writeable_noinc.exit

regmap_writeable_noinc.exit:                      ; preds = %for.inc.i23.i.i.regmap_writeable_noinc.exit_crit_edge, %regmap_reg_in_range.exit.i18.i.i.regmap_writeable_noinc.exit_crit_edge
  %retval.0.i = phi i1 [ %cmp.i21.i.i, %for.inc.i23.i.i.regmap_writeable_noinc.exit_crit_edge ], [ %cmp8.i11.i.i, %regmap_reg_in_range.exit.i18.i.i.regmap_writeable_noinc.exit_crit_edge ]
  br i1 %retval.0.i, label %regmap_writeable_noinc.exit.while.body.lr.ph_crit_edge, label %regmap_writeable_noinc.exit.out_unlock_crit_edge

regmap_writeable_noinc.exit.out_unlock_crit_edge: ; preds = %regmap_writeable_noinc.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %out_unlock

regmap_writeable_noinc.exit.while.body.lr.ph_crit_edge: ; preds = %regmap_writeable_noinc.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %regmap_writeable_noinc.exit.while.body.lr.ph_crit_edge, %if.end.i.i.while.body.lr.ph_crit_edge, %if.end.i.while.body.lr.ph_crit_edge, %if.then.i.while.body.lr.ph_crit_edge
  %max_raw_write = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 67
  %use_single_write.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 64
  %reg_stride_order.i.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 46
  br label %while.body

while.body:                                       ; preds = %if.end26.while.body_crit_edge, %while.body.lr.ph
  %val_len.addr.084 = phi i32 [ %val_len, %while.body.lr.ph ], [ %sub27, %if.end26.while.body_crit_edge ]
  %val.addr.080 = phi ptr [ %val, %while.body.lr.ph ], [ %add.ptr, %if.end26.while.body_crit_edge ]
  %34 = ptrtoint ptr %max_raw_write to i32
  call void @__asan_load4_noabort(i32 %34)
  %35 = load i32, ptr %max_raw_write, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %35)
  %tobool17.not = icmp ne i32 %35, 0
  call void @__sanitizer_cov_trace_cmp4(i32 %35, i32 %val_len.addr.084)
  %cmp19 = icmp ult i32 %35, %val_len.addr.084
  %or.cond = select i1 %tobool17.not, i1 %cmp19, i1 false
  %write_len.0 = select i1 %or.cond, i32 %35, i32 %val_len.addr.084
  %36 = ptrtoint ptr %val_bytes to i32
  call void @__asan_load4_noabort(i32 %36)
  %37 = load i32, ptr %val_bytes, align 4
  %div.i = udiv i32 %write_len.0, %37
  call void @__sanitizer_cov_trace_cmp4(i32 %37, i32 %write_len.0)
  %tobool.not.i57 = icmp ugt i32 %37, %write_len.0
  br i1 %tobool.not.i57, label %while.body.out_unlock_crit_edge, label %if.end.i59

while.body.out_unlock_crit_edge:                  ; preds = %while.body
  call void @__sanitizer_cov_trace_pc() #26
  br label %out_unlock

if.end.i59:                                       ; preds = %while.body
  %38 = ptrtoint ptr %use_single_write.i to i32
  call void @__asan_load1_noabort(i32 %38)
  %39 = load i8, ptr %use_single_write.i, align 1, !range !389
  call void @__sanitizer_cov_trace_const_cmp1(i8 0, i8 %39)
  %tobool2.not.i58 = icmp eq i8 %39, 0
  br i1 %tobool2.not.i58, label %if.else.i, label %if.end.i59.if.end10.i_crit_edge

if.end.i59.if.end10.i_crit_edge:                  ; preds = %if.end.i59
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end10.i

if.else.i:                                        ; preds = %if.end.i59
  call void @__sanitizer_cov_trace_cmp4(i32 %35, i32 %write_len.0)
  %cmp.i = icmp ult i32 %35, %write_len.0
  %or.cond.i = and i1 %tobool17.not, %cmp.i
  br i1 %or.cond.i, label %if.then6.i, label %if.else.i.for.body.lr.ph.i_crit_edge

if.else.i.for.body.lr.ph.i_crit_edge:             ; preds = %if.else.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body.lr.ph.i

if.then6.i:                                       ; preds = %if.else.i
  call void @__sanitizer_cov_trace_pc() #26
  %div8.i = udiv i32 %35, %37
  br label %if.end10.i

if.end10.i:                                       ; preds = %if.then6.i, %if.end.i59.if.end10.i_crit_edge
  %chunk_regs.0.i = phi i32 [ %div8.i, %if.then6.i ], [ 1, %if.end.i59.if.end10.i_crit_edge ]
  %div11.i = udiv i32 %div.i, %chunk_regs.0.i
  call void @__sanitizer_cov_trace_cmp4(i32 %chunk_regs.0.i, i32 %div.i)
  %cmp1260.not.i = icmp ugt i32 %chunk_regs.0.i, %div.i
  br i1 %cmp1260.not.i, label %if.end10.i._regmap_raw_write.exit_crit_edge, label %if.end10.i.for.body.lr.ph.i_crit_edge

if.end10.i.for.body.lr.ph.i_crit_edge:            ; preds = %if.end10.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body.lr.ph.i

if.end10.i._regmap_raw_write.exit_crit_edge:      ; preds = %if.end10.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %_regmap_raw_write.exit

for.body.lr.ph.i:                                 ; preds = %if.end10.i.for.body.lr.ph.i_crit_edge, %if.else.i.for.body.lr.ph.i_crit_edge
  %div1174.i = phi i32 [ %div11.i, %if.end10.i.for.body.lr.ph.i_crit_edge ], [ 1, %if.else.i.for.body.lr.ph.i_crit_edge ]
  %chunk_regs.073.i = phi i32 [ %chunk_regs.0.i, %if.end10.i.for.body.lr.ph.i_crit_edge ], [ %div.i, %if.else.i.for.body.lr.ph.i_crit_edge ]
  %mul75.i = mul i32 %chunk_regs.073.i, %37
  %umax.i = tail call i32 @llvm.umax.i32(i32 %div1174.i, i32 1) #24
  %40 = mul i32 %mul75.i, %umax.i
  %41 = sub i32 %write_len.0, %40
  br label %for.body.i

for.body.i:                                       ; preds = %regmap_get_offset.exit.i.for.body.i_crit_edge, %for.body.lr.ph.i
  %i.064.i = phi i32 [ 0, %for.body.lr.ph.i ], [ %inc.i, %regmap_get_offset.exit.i.for.body.i_crit_edge ]
  %val.addr.062.i = phi ptr [ %val.addr.080, %for.body.lr.ph.i ], [ %add.ptr.i, %regmap_get_offset.exit.i.for.body.i_crit_edge ]
  %reg.addr.061.i = phi i32 [ %reg, %for.body.lr.ph.i ], [ %add.i, %regmap_get_offset.exit.i.for.body.i_crit_edge ]
  %call.i60 = tail call fastcc i32 @_regmap_raw_write_impl(ptr noundef %map, i32 noundef %reg.addr.061.i, ptr noundef %val.addr.062.i, i32 noundef %mul75.i, i1 noundef zeroext true) #24
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call.i60)
  %tobool14.not.i = icmp eq i32 %call.i60, 0
  br i1 %tobool14.not.i, label %if.end16.i, label %for.body.i.out_unlock_crit_edge

for.body.i.out_unlock_crit_edge:                  ; preds = %for.body.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %out_unlock

if.end16.i:                                       ; preds = %for.body.i
  %42 = ptrtoint ptr %reg_stride_order.i.i to i32
  call void @__asan_load4_noabort(i32 %42)
  %43 = load i32, ptr %reg_stride_order.i.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %43)
  %cmp.i.i = icmp sgt i32 %43, -1
  br i1 %cmp.i.i, label %if.then.i.i, label %if.else.i.i

if.then.i.i:                                      ; preds = %if.end16.i
  call void @__sanitizer_cov_trace_pc() #26
  %shl.i.i = shl i32 %chunk_regs.073.i, %43
  br label %regmap_get_offset.exit.i

if.else.i.i:                                      ; preds = %if.end16.i
  call void @__sanitizer_cov_trace_pc() #26
  %44 = ptrtoint ptr %reg_stride to i32
  call void @__asan_load4_noabort(i32 %44)
  %45 = load i32, ptr %reg_stride, align 4
  %mul.i.i = mul i32 %45, %chunk_regs.073.i
  br label %regmap_get_offset.exit.i

regmap_get_offset.exit.i:                         ; preds = %if.else.i.i, %if.then.i.i
  %retval.0.i.i = phi i32 [ %shl.i.i, %if.then.i.i ], [ %mul.i.i, %if.else.i.i ]
  %add.i = add i32 %retval.0.i.i, %reg.addr.061.i
  %add.ptr.i = getelementptr i8, ptr %val.addr.062.i, i32 %mul75.i
  %inc.i = add nuw i32 %i.064.i, 1
  %exitcond.not.i = icmp eq i32 %inc.i, %umax.i
  br i1 %exitcond.not.i, label %for.end.i, label %regmap_get_offset.exit.i.for.body.i_crit_edge

regmap_get_offset.exit.i.for.body.i_crit_edge:    ; preds = %regmap_get_offset.exit.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body.i

for.end.i:                                        ; preds = %regmap_get_offset.exit.i
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %41)
  %tobool18.not.i = icmp eq i32 %41, 0
  br i1 %tobool18.not.i, label %for.end.i.if.end26_crit_edge, label %for.end.i._regmap_raw_write.exit_crit_edge

for.end.i._regmap_raw_write.exit_crit_edge:       ; preds = %for.end.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %_regmap_raw_write.exit

for.end.i.if.end26_crit_edge:                     ; preds = %for.end.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end26

_regmap_raw_write.exit:                           ; preds = %for.end.i._regmap_raw_write.exit_crit_edge, %if.end10.i._regmap_raw_write.exit_crit_edge
  %val_len.addr.0.lcssa.i70 = phi i32 [ %41, %for.end.i._regmap_raw_write.exit_crit_edge ], [ %write_len.0, %if.end10.i._regmap_raw_write.exit_crit_edge ]
  %val.addr.0.lcssa.i69 = phi ptr [ %add.ptr.i, %for.end.i._regmap_raw_write.exit_crit_edge ], [ %val.addr.080, %if.end10.i._regmap_raw_write.exit_crit_edge ]
  %reg.addr.0.lcssa.i68 = phi i32 [ %add.i, %for.end.i._regmap_raw_write.exit_crit_edge ], [ %reg, %if.end10.i._regmap_raw_write.exit_crit_edge ]
  %call21.i = tail call fastcc i32 @_regmap_raw_write_impl(ptr noundef %map, i32 noundef %reg.addr.0.lcssa.i68, ptr noundef %val.addr.0.lcssa.i69, i32 noundef %val_len.addr.0.lcssa.i70, i1 noundef zeroext true) #24
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call21.i)
  %tobool24.not = icmp eq i32 %call21.i, 0
  br i1 %tobool24.not, label %_regmap_raw_write.exit.if.end26_crit_edge, label %_regmap_raw_write.exit.out_unlock_crit_edge

_regmap_raw_write.exit.out_unlock_crit_edge:      ; preds = %_regmap_raw_write.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %out_unlock

_regmap_raw_write.exit.if.end26_crit_edge:        ; preds = %_regmap_raw_write.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end26

if.end26:                                         ; preds = %_regmap_raw_write.exit.if.end26_crit_edge, %for.end.i.if.end26_crit_edge
  %add.ptr = getelementptr i8, ptr %val.addr.080, i32 %write_len.0
  %sub27 = sub i32 %val_len.addr.084, %write_len.0
  %tobool16.not = icmp eq i32 %sub27, 0
  br i1 %tobool16.not, label %if.end26.out_unlock_crit_edge, label %if.end26.while.body_crit_edge

if.end26.while.body_crit_edge:                    ; preds = %if.end26
  call void @__sanitizer_cov_trace_pc() #26
  br label %while.body

if.end26.out_unlock_crit_edge:                    ; preds = %if.end26
  call void @__sanitizer_cov_trace_pc() #26
  br label %out_unlock

out_unlock:                                       ; preds = %if.end26.out_unlock_crit_edge, %_regmap_raw_write.exit.out_unlock_crit_edge, %for.body.i.out_unlock_crit_edge, %while.body.out_unlock_crit_edge, %regmap_writeable_noinc.exit.out_unlock_crit_edge, %regmap_reg_in_ranges.exit.i.i.out_unlock_crit_edge, %if.then.i.out_unlock_crit_edge, %if.end12.out_unlock_crit_edge
  %ret.1 = phi i32 [ -22, %regmap_writeable_noinc.exit.out_unlock_crit_edge ], [ -22, %if.end12.out_unlock_crit_edge ], [ -22, %if.then.i.out_unlock_crit_edge ], [ -22, %regmap_reg_in_ranges.exit.i.i.out_unlock_crit_edge ], [ %call.i60, %for.body.i.out_unlock_crit_edge ], [ %call21.i, %_regmap_raw_write.exit.out_unlock_crit_edge ], [ 0, %if.end26.out_unlock_crit_edge ], [ -22, %while.body.out_unlock_crit_edge ]
  %unlock = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 2
  %46 = ptrtoint ptr %unlock to i32
  call void @__asan_load4_noabort(i32 %46)
  %47 = load ptr, ptr %unlock, align 4
  %48 = ptrtoint ptr %lock_arg to i32
  call void @__asan_load4_noabort(i32 %48)
  %49 = load ptr, ptr %lock_arg, align 4
  tail call void %47(ptr noundef %49) #24
  br label %cleanup

cleanup:                                          ; preds = %out_unlock, %if.end7.cleanup_crit_edge, %if.end4.cleanup_crit_edge, %if.end.cleanup_crit_edge, %entry.cleanup_crit_edge
  %retval.0 = phi i32 [ %ret.1, %out_unlock ], [ -22, %entry.cleanup_crit_edge ], [ -524, %if.end.cleanup_crit_edge ], [ -22, %if.end4.cleanup_crit_edge ], [ -22, %if.end7.cleanup_crit_edge ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @regmap_field_update_bits_base(ptr nocapture noundef readonly %field, i32 noundef %mask, i32 noundef %val, ptr noundef %change, i1 noundef zeroext %async, i1 noundef zeroext %force) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %shift = getelementptr inbounds %struct.regmap_field, ptr %field, i32 0, i32 2
  %0 = ptrtoint ptr %shift to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load i32, ptr %shift, align 4
  %shl = shl i32 %mask, %1
  %mask2 = getelementptr inbounds %struct.regmap_field, ptr %field, i32 0, i32 1
  %2 = ptrtoint ptr %mask2 to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load i32, ptr %mask2, align 4
  %and = and i32 %shl, %3
  %4 = ptrtoint ptr %field to i32
  call void @__asan_load4_noabort(i32 %4)
  %5 = load ptr, ptr %field, align 4
  %reg = getelementptr inbounds %struct.regmap_field, ptr %field, i32 0, i32 3
  %6 = ptrtoint ptr %reg to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load i32, ptr %reg, align 4
  %shl4 = shl i32 %val, %1
  %call = tail call i32 @regmap_update_bits_base(ptr noundef %5, i32 noundef %7, i32 noundef %and, i32 noundef %shl4, ptr noundef %change, i1 noundef zeroext %async, i1 noundef zeroext %force)
  ret i32 %call
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @regmap_update_bits_base(ptr noundef %map, i32 noundef %reg, i32 noundef %mask, i32 noundef %val, ptr noundef writeonly %change, i1 noundef zeroext %async, i1 noundef zeroext %force) #0 align 64 {
entry:
  %orig.i = alloca i32, align 4
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %frombool = zext i1 %async to i8
  %lock = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 1
  %0 = ptrtoint ptr %lock to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %lock, align 4
  %lock_arg = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 3
  %2 = ptrtoint ptr %lock_arg to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load ptr, ptr %lock_arg, align 4
  tail call void %1(ptr noundef %3) #24
  %async2 = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 11
  %4 = ptrtoint ptr %async2 to i32
  call void @__asan_store1_noabort(i32 %4)
  store i8 %frombool, ptr %async2, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %orig.i) #24
  %5 = ptrtoint ptr %orig.i to i32
  call void @__asan_store4_noabort(i32 %5)
  store i32 -1, ptr %orig.i, align 4, !annotation !388
  %tobool.not.i = icmp eq ptr %change, null
  br i1 %tobool.not.i, label %entry.if.end.i_crit_edge, label %if.then.i

entry.if.end.i_crit_edge:                         ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end.i

if.then.i:                                        ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  %6 = ptrtoint ptr %change to i32
  call void @__asan_store1_noabort(i32 %6)
  store i8 0, ptr %change, align 1
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %entry.if.end.i_crit_edge
  %call.i = tail call zeroext i1 @regmap_volatile(ptr noundef %map, i32 noundef %reg) #24
  br i1 %call.i, label %land.lhs.true.i, label %if.end.i.if.else.i_crit_edge

if.end.i.if.else.i_crit_edge:                     ; preds = %if.end.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.else.i

land.lhs.true.i:                                  ; preds = %if.end.i
  %reg_update_bits.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 40
  %7 = ptrtoint ptr %reg_update_bits.i to i32
  call void @__asan_load4_noabort(i32 %7)
  %8 = load ptr, ptr %reg_update_bits.i, align 4
  %tobool1.not.i = icmp eq ptr %8, null
  br i1 %tobool1.not.i, label %land.lhs.true.i.if.else.i_crit_edge, label %if.then2.i

land.lhs.true.i.if.else.i_crit_edge:              ; preds = %land.lhs.true.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.else.i

if.then2.i:                                       ; preds = %land.lhs.true.i
  %bus_context.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 9
  %9 = ptrtoint ptr %bus_context.i to i32
  call void @__asan_load4_noabort(i32 %9)
  %10 = load ptr, ptr %bus_context.i, align 4
  %call4.i = tail call i32 %8(ptr noundef %10, i32 noundef %reg, i32 noundef %mask, i32 noundef %val) #24
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call4.i)
  %cmp.i = icmp ne i32 %call4.i, 0
  %brmerge.i = or i1 %tobool.not.i, %cmp.i
  br i1 %brmerge.i, label %if.then2.i._regmap_update_bits.exit_crit_edge, label %if.then2.i.cleanup.sink.split.i_crit_edge

if.then2.i.cleanup.sink.split.i_crit_edge:        ; preds = %if.then2.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup.sink.split.i

if.then2.i._regmap_update_bits.exit_crit_edge:    ; preds = %if.then2.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %_regmap_update_bits.exit

if.else.i:                                        ; preds = %land.lhs.true.i.if.else.i_crit_edge, %if.end.i.if.else.i_crit_edge
  %call9.i = call fastcc i32 @_regmap_read(ptr noundef %map, i32 noundef %reg, ptr noundef nonnull %orig.i) #24
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call9.i)
  %cmp10.not.i = icmp eq i32 %call9.i, 0
  br i1 %cmp10.not.i, label %if.end12.i, label %if.else.i._regmap_update_bits.exit_crit_edge

if.else.i._regmap_update_bits.exit_crit_edge:     ; preds = %if.else.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %_regmap_update_bits.exit

if.end12.i:                                       ; preds = %if.else.i
  %11 = ptrtoint ptr %orig.i to i32
  call void @__asan_load4_noabort(i32 %11)
  %12 = load i32, ptr %orig.i, align 4
  %neg.i = xor i32 %mask, -1
  %and.i = and i32 %12, %neg.i
  %and13.i = and i32 %val, %mask
  %or.i = or i32 %and.i, %and13.i
  %force_write.not.i = xor i1 %force, true
  call void @__sanitizer_cov_trace_cmp4(i32 %or.i, i32 %12)
  %cmp15.not.i = icmp eq i32 %or.i, %12
  %or.cond.i = select i1 %force_write.not.i, i1 %cmp15.not.i, i1 false
  br i1 %or.cond.i, label %if.end12.i._regmap_update_bits.exit_crit_edge, label %if.then16.i

if.end12.i._regmap_update_bits.exit_crit_edge:    ; preds = %if.end12.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %_regmap_update_bits.exit

if.then16.i:                                      ; preds = %if.end12.i
  %call17.i = call i32 @_regmap_write(ptr noundef %map, i32 noundef %reg, i32 noundef %or.i) #24
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call17.i)
  %cmp18.i = icmp ne i32 %call17.i, 0
  %brmerge49.i = or i1 %tobool.not.i, %cmp18.i
  br i1 %brmerge49.i, label %if.then16.i._regmap_update_bits.exit_crit_edge, label %if.then16.i.cleanup.sink.split.i_crit_edge

if.then16.i.cleanup.sink.split.i_crit_edge:       ; preds = %if.then16.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup.sink.split.i

if.then16.i._regmap_update_bits.exit_crit_edge:   ; preds = %if.then16.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %_regmap_update_bits.exit

cleanup.sink.split.i:                             ; preds = %if.then16.i.cleanup.sink.split.i_crit_edge, %if.then2.i.cleanup.sink.split.i_crit_edge
  %13 = ptrtoint ptr %change to i32
  call void @__asan_store1_noabort(i32 %13)
  store i8 1, ptr %change, align 1
  br label %_regmap_update_bits.exit

_regmap_update_bits.exit:                         ; preds = %cleanup.sink.split.i, %if.then16.i._regmap_update_bits.exit_crit_edge, %if.end12.i._regmap_update_bits.exit_crit_edge, %if.else.i._regmap_update_bits.exit_crit_edge, %if.then2.i._regmap_update_bits.exit_crit_edge
  %retval.0.i = phi i32 [ %call9.i, %if.else.i._regmap_update_bits.exit_crit_edge ], [ %call4.i, %if.then2.i._regmap_update_bits.exit_crit_edge ], [ %call17.i, %if.then16.i._regmap_update_bits.exit_crit_edge ], [ 0, %if.end12.i._regmap_update_bits.exit_crit_edge ], [ 0, %cleanup.sink.split.i ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %orig.i) #24
  %14 = ptrtoint ptr %async2 to i32
  call void @__asan_store1_noabort(i32 %14)
  store i8 0, ptr %async2, align 4
  %unlock = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 2
  %15 = ptrtoint ptr %unlock to i32
  call void @__asan_load4_noabort(i32 %15)
  %16 = load ptr, ptr %unlock, align 4
  %17 = ptrtoint ptr %lock_arg to i32
  call void @__asan_load4_noabort(i32 %17)
  %18 = load ptr, ptr %lock_arg, align 4
  call void %16(ptr noundef %18) #24
  ret i32 %retval.0.i
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @regmap_fields_update_bits_base(ptr nocapture noundef readonly %field, i32 noundef %id, i32 noundef %mask, i32 noundef %val, ptr noundef %change, i1 noundef zeroext %async, i1 noundef zeroext %force) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %id_size = getelementptr inbounds %struct.regmap_field, ptr %field, i32 0, i32 4
  %0 = ptrtoint ptr %id_size to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load i32, ptr %id_size, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %1, i32 %id)
  %cmp.not = icmp ugt i32 %1, %id
  br i1 %cmp.not, label %if.end, label %entry.return_crit_edge

entry.return_crit_edge:                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %return

if.end:                                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  %shift = getelementptr inbounds %struct.regmap_field, ptr %field, i32 0, i32 2
  %2 = ptrtoint ptr %shift to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load i32, ptr %shift, align 4
  %shl = shl i32 %mask, %3
  %mask2 = getelementptr inbounds %struct.regmap_field, ptr %field, i32 0, i32 1
  %4 = ptrtoint ptr %mask2 to i32
  call void @__asan_load4_noabort(i32 %4)
  %5 = load i32, ptr %mask2, align 4
  %and = and i32 %shl, %5
  %6 = ptrtoint ptr %field to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load ptr, ptr %field, align 4
  %reg = getelementptr inbounds %struct.regmap_field, ptr %field, i32 0, i32 3
  %8 = ptrtoint ptr %reg to i32
  call void @__asan_load4_noabort(i32 %8)
  %9 = load i32, ptr %reg, align 4
  %id_offset = getelementptr inbounds %struct.regmap_field, ptr %field, i32 0, i32 5
  %10 = ptrtoint ptr %id_offset to i32
  call void @__asan_load4_noabort(i32 %10)
  %11 = load i32, ptr %id_offset, align 4
  %mul = mul i32 %11, %id
  %add = add i32 %mul, %9
  %shl4 = shl i32 %val, %3
  %call = tail call i32 @regmap_update_bits_base(ptr noundef %7, i32 noundef %add, i32 noundef %and, i32 noundef %shl4, ptr noundef %change, i1 noundef zeroext %async, i1 noundef zeroext %force)
  br label %return

return:                                           ; preds = %if.end, %entry.return_crit_edge
  %retval.0 = phi i32 [ %call, %if.end ], [ -22, %entry.return_crit_edge ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @regmap_bulk_write(ptr noundef %map, i32 noundef %reg, ptr noundef %val, i32 noundef %val_count) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %val_bytes1 = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 7, i32 3
  %0 = ptrtoint ptr %val_bytes1 to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load i32, ptr %val_bytes1, align 4
  %reg_stride = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 45
  %2 = ptrtoint ptr %reg_stride to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load i32, ptr %reg_stride, align 4
  %sub = add i32 %3, -1
  %and = and i32 %sub, %reg
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and)
  %cmp = icmp eq i32 %and, 0
  br i1 %cmp, label %if.end, label %entry.cleanup41_crit_edge

entry.cleanup41_crit_edge:                        ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup41

if.end:                                           ; preds = %entry
  %bus = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 8
  %4 = ptrtoint ptr %bus to i32
  call void @__asan_load4_noabort(i32 %4)
  %5 = load ptr, ptr %bus, align 4
  %tobool.not = icmp eq ptr %5, null
  br i1 %tobool.not, label %if.end.if.then4_crit_edge, label %lor.lhs.false

if.end.if.then4_crit_edge:                        ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.then4

lor.lhs.false:                                    ; preds = %if.end
  %parse_inplace = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 7, i32 8
  %6 = ptrtoint ptr %parse_inplace to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load ptr, ptr %parse_inplace, align 4
  %tobool3.not = icmp eq ptr %7, null
  br i1 %tobool3.not, label %lor.lhs.false.if.then4_crit_edge, label %if.else

lor.lhs.false.if.then4_crit_edge:                 ; preds = %lor.lhs.false
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.then4

if.then4:                                         ; preds = %lor.lhs.false.if.then4_crit_edge, %if.end.if.then4_crit_edge
  %lock = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 1
  %8 = ptrtoint ptr %lock to i32
  call void @__asan_load4_noabort(i32 %8)
  %9 = load ptr, ptr %lock, align 4
  %lock_arg = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 3
  %10 = ptrtoint ptr %lock_arg to i32
  call void @__asan_load4_noabort(i32 %10)
  %11 = load ptr, ptr %lock_arg, align 4
  tail call void %9(ptr noundef %11) #24
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %val_count)
  %cmp589.not = icmp eq i32 %val_count, 0
  br i1 %cmp589.not, label %if.then4.out_crit_edge, label %for.body.lr.ph

if.then4.out_crit_edge:                           ; preds = %if.then4
  call void @__sanitizer_cov_trace_pc() #26
  br label %out

for.body.lr.ph:                                   ; preds = %if.then4
  %reg_stride_order.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 46
  %12 = zext i32 %1 to i64
  call void @__sanitizer_cov_trace_switch(i64 %12, ptr @__sancov_gen_cov_switch_values.81)
  switch i32 %1, label %for.body.lr.ph.out_crit_edge [
    i32 1, label %for.body.lr.ph.for.body.preheader_crit_edge
    i32 2, label %for.body.lr.ph.for.body.preheader_crit_edge94
    i32 4, label %for.body.lr.ph.for.body.preheader_crit_edge95
  ]

for.body.lr.ph.for.body.preheader_crit_edge95:    ; preds = %for.body.lr.ph
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body.preheader

for.body.lr.ph.for.body.preheader_crit_edge94:    ; preds = %for.body.lr.ph
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body.preheader

for.body.lr.ph.for.body.preheader_crit_edge:      ; preds = %for.body.lr.ph
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body.preheader

for.body.lr.ph.out_crit_edge:                     ; preds = %for.body.lr.ph
  call void @__sanitizer_cov_trace_pc() #26
  br label %out

for.body.preheader:                               ; preds = %for.body.lr.ph.for.body.preheader_crit_edge, %for.body.lr.ph.for.body.preheader_crit_edge94, %for.body.lr.ph.for.body.preheader_crit_edge95
  br label %for.body

for.cond:                                         ; preds = %regmap_get_offset.exit
  %inc = add nuw i32 %i.090, 1
  %exitcond.not = icmp eq i32 %inc, %val_count
  br i1 %exitcond.not, label %for.cond.out_crit_edge, label %for.cond.for.body_crit_edge

for.cond.for.body_crit_edge:                      ; preds = %for.cond
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body

for.cond.out_crit_edge:                           ; preds = %for.cond
  call void @__sanitizer_cov_trace_pc() #26
  br label %out

for.body:                                         ; preds = %for.cond.for.body_crit_edge, %for.body.preheader
  %i.090 = phi i32 [ %inc, %for.cond.for.body_crit_edge ], [ 0, %for.body.preheader ]
  %13 = zext i32 %1 to i64
  call void @__sanitizer_cov_trace_switch(i64 %13, ptr @__sancov_gen_cov_switch_values.82)
  switch i32 %1, label %sw.bb10 [
    i32 1, label %sw.bb
    i32 2, label %sw.bb6
  ]

sw.bb:                                            ; preds = %for.body
  call void @__sanitizer_cov_trace_pc() #26
  %add.ptr = getelementptr i8, ptr %val, i32 %i.090
  %14 = ptrtoint ptr %add.ptr to i32
  call void @__asan_load1_noabort(i32 %14)
  %15 = load i8, ptr %add.ptr, align 1
  %conv = zext i8 %15 to i32
  br label %sw.epilog

sw.bb6:                                           ; preds = %for.body
  call void @__sanitizer_cov_trace_pc() #26
  %mul7 = shl i32 %i.090, 1
  %add.ptr8 = getelementptr i8, ptr %val, i32 %mul7
  %16 = ptrtoint ptr %add.ptr8 to i32
  call void @__asan_load2_noabort(i32 %16)
  %17 = load i16, ptr %add.ptr8, align 2
  %conv9 = zext i16 %17 to i32
  br label %sw.epilog

sw.bb10:                                          ; preds = %for.body
  call void @__sanitizer_cov_trace_pc() #26
  %mul11 = shl i32 %i.090, 2
  %add.ptr12 = getelementptr i8, ptr %val, i32 %mul11
  %18 = ptrtoint ptr %add.ptr12 to i32
  call void @__asan_load4_noabort(i32 %18)
  %19 = load i32, ptr %add.ptr12, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb10, %sw.bb6, %sw.bb
  %ival.0 = phi i32 [ %19, %sw.bb10 ], [ %conv9, %sw.bb6 ], [ %conv, %sw.bb ]
  %20 = ptrtoint ptr %reg_stride_order.i to i32
  call void @__asan_load4_noabort(i32 %20)
  %21 = load i32, ptr %reg_stride_order.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %21)
  %cmp.i = icmp sgt i32 %21, -1
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %sw.epilog
  call void @__sanitizer_cov_trace_pc() #26
  %shl.i = shl i32 %i.090, %21
  br label %regmap_get_offset.exit

if.else.i:                                        ; preds = %sw.epilog
  call void @__sanitizer_cov_trace_pc() #26
  %22 = ptrtoint ptr %reg_stride to i32
  call void @__asan_load4_noabort(i32 %22)
  %23 = load i32, ptr %reg_stride, align 4
  %mul.i = mul i32 %23, %i.090
  br label %regmap_get_offset.exit

regmap_get_offset.exit:                           ; preds = %if.else.i, %if.then.i
  %retval.0.i = phi i32 [ %shl.i, %if.then.i ], [ %mul.i, %if.else.i ]
  %add = add i32 %retval.0.i, %reg
  %call13 = tail call i32 @_regmap_write(ptr noundef %map, i32 noundef %add, i32 noundef %ival.0)
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call13)
  %cmp14.not = icmp eq i32 %call13, 0
  br i1 %cmp14.not, label %for.cond, label %regmap_get_offset.exit.out_crit_edge

regmap_get_offset.exit.out_crit_edge:             ; preds = %regmap_get_offset.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %out

out:                                              ; preds = %regmap_get_offset.exit.out_crit_edge, %for.cond.out_crit_edge, %for.body.lr.ph.out_crit_edge, %if.then4.out_crit_edge
  %ret.2 = phi i32 [ 0, %if.then4.out_crit_edge ], [ -22, %for.body.lr.ph.out_crit_edge ], [ %call13, %regmap_get_offset.exit.out_crit_edge ], [ 0, %for.cond.out_crit_edge ]
  %unlock = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 2
  %24 = ptrtoint ptr %unlock to i32
  call void @__asan_load4_noabort(i32 %24)
  %25 = load ptr, ptr %unlock, align 4
  %26 = ptrtoint ptr %lock_arg to i32
  call void @__asan_load4_noabort(i32 %26)
  %27 = load ptr, ptr %lock_arg, align 4
  tail call void %25(ptr noundef %27) #24
  br label %cleanup41

if.else:                                          ; preds = %lor.lhs.false
  %mul19 = mul i32 %1, %val_count
  %alloc_flags = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 4
  %28 = ptrtoint ptr %alloc_flags to i32
  call void @__asan_load4_noabort(i32 %28)
  %29 = load i32, ptr %alloc_flags, align 4
  %call20 = tail call ptr @kmemdup(ptr noundef %val, i32 noundef %mul19, i32 noundef %29) #24
  %tobool21.not = icmp eq ptr %call20, null
  br i1 %tobool21.not, label %if.else.cleanup41_crit_edge, label %for.cond24.preheader

if.else.cleanup41_crit_edge:                      ; preds = %if.else
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup41

for.cond24.preheader:                             ; preds = %if.else
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %mul19)
  %cmp2687.not = icmp eq i32 %mul19, 0
  br i1 %cmp2687.not, label %for.cond24.preheader.cleanup37_crit_edge, label %for.cond24.preheader.for.body28_crit_edge

for.cond24.preheader.for.body28_crit_edge:        ; preds = %for.cond24.preheader
  br label %for.body28

for.cond24.preheader.cleanup37_crit_edge:         ; preds = %for.cond24.preheader
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup37

for.body28:                                       ; preds = %for.body28.for.body28_crit_edge, %for.cond24.preheader.for.body28_crit_edge
  %i.188 = phi i32 [ %add33, %for.body28.for.body28_crit_edge ], [ 0, %for.cond24.preheader.for.body28_crit_edge ]
  %30 = ptrtoint ptr %parse_inplace to i32
  call void @__asan_load4_noabort(i32 %30)
  %31 = load ptr, ptr %parse_inplace, align 4
  %add.ptr31 = getelementptr i8, ptr %call20, i32 %i.188
  tail call void %31(ptr noundef %add.ptr31) #24
  %add33 = add i32 %i.188, %1
  %cmp26 = icmp ult i32 %add33, %mul19
  br i1 %cmp26, label %for.body28.for.body28_crit_edge, label %for.body28.cleanup37_crit_edge

for.body28.cleanup37_crit_edge:                   ; preds = %for.body28
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup37

for.body28.for.body28_crit_edge:                  ; preds = %for.body28
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body28

cleanup37:                                        ; preds = %for.body28.cleanup37_crit_edge, %for.cond24.preheader.cleanup37_crit_edge
  %call36 = tail call i32 @regmap_raw_write(ptr noundef %map, i32 noundef %reg, ptr noundef nonnull %call20, i32 noundef %mul19)
  tail call void @kfree(ptr noundef nonnull %call20) #24
  br label %cleanup41

cleanup41:                                        ; preds = %cleanup37, %if.else.cleanup41_crit_edge, %out, %entry.cleanup41_crit_edge
  %retval.1 = phi i32 [ -22, %entry.cleanup41_crit_edge ], [ -12, %if.else.cleanup41_crit_edge ], [ %call36, %cleanup37 ], [ %ret.2, %out ]
  ret i32 %retval.1
}

; Function Attrs: null_pointer_is_valid
declare dso_local ptr @kmemdup(ptr noundef, i32 noundef, i32 noundef) local_unnamed_addr #2

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @regmap_multi_reg_write(ptr noundef %map, ptr noundef %regs, i32 noundef %num_regs) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %lock = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 1
  %0 = ptrtoint ptr %lock to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %lock, align 4
  %lock_arg = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 3
  %2 = ptrtoint ptr %lock_arg to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load ptr, ptr %lock_arg, align 4
  tail call void %1(ptr noundef %3) #24
  %call = tail call fastcc i32 @_regmap_multi_reg_write(ptr noundef %map, ptr noundef %regs, i32 noundef %num_regs)
  %unlock = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 2
  %4 = ptrtoint ptr %unlock to i32
  call void @__asan_load4_noabort(i32 %4)
  %5 = load ptr, ptr %unlock, align 4
  %6 = ptrtoint ptr %lock_arg to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load ptr, ptr %lock_arg, align 4
  tail call void %5(ptr noundef %7) #24
  ret i32 %call
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal fastcc i32 @_regmap_multi_reg_write(ptr noundef %map, ptr noundef %regs, i32 noundef %num_regs) unnamed_addr #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %can_multi_write = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 65
  %0 = ptrtoint ptr %can_multi_write to i32
  call void @__asan_load1_noabort(i32 %0)
  %1 = load i8, ptr %can_multi_write, align 2, !range !389
  call void @__sanitizer_cov_trace_const_cmp1(i8 0, i8 %1)
  %tobool.not = icmp eq i8 %1, 0
  br i1 %tobool.not, label %for.cond.preheader, label %if.end25

for.cond.preheader:                               ; preds = %entry
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %num_regs)
  %cmp227.not = icmp eq i32 %num_regs, 0
  br i1 %cmp227.not, label %for.cond.preheader.cleanup129_crit_edge, label %for.body.lr.ph

for.cond.preheader.cleanup129_crit_edge:          ; preds = %for.cond.preheader
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup129

for.body.lr.ph:                                   ; preds = %for.cond.preheader
  %can_sleep = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 71
  br label %for.body

for.body:                                         ; preds = %for.inc.for.body_crit_edge, %for.body.lr.ph
  %i.0228 = phi i32 [ 0, %for.body.lr.ph ], [ %inc, %for.inc.for.body_crit_edge ]
  %arrayidx = getelementptr %struct.reg_sequence, ptr %regs, i32 %i.0228
  %2 = ptrtoint ptr %arrayidx to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load i32, ptr %arrayidx, align 4
  %def = getelementptr %struct.reg_sequence, ptr %regs, i32 %i.0228, i32 1
  %4 = ptrtoint ptr %def to i32
  call void @__asan_load4_noabort(i32 %4)
  %5 = load i32, ptr %def, align 4
  %call = tail call i32 @_regmap_write(ptr noundef %map, i32 noundef %3, i32 noundef %5)
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call)
  %cmp2.not = icmp eq i32 %call, 0
  br i1 %cmp2.not, label %if.end, label %for.body.cleanup129_crit_edge

for.body.cleanup129_crit_edge:                    ; preds = %for.body
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup129

if.end:                                           ; preds = %for.body
  %delay_us = getelementptr %struct.reg_sequence, ptr %regs, i32 %i.0228, i32 2
  %6 = ptrtoint ptr %delay_us to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load i32, ptr %delay_us, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %7)
  %tobool5.not = icmp eq i32 %7, 0
  br i1 %tobool5.not, label %if.end.for.inc_crit_edge, label %if.then6

if.end.for.inc_crit_edge:                         ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc

if.then6:                                         ; preds = %if.end
  %8 = ptrtoint ptr %can_sleep to i32
  call void @__asan_load1_noabort(i32 %8)
  %9 = load i8, ptr %can_sleep, align 4, !range !389
  call void @__sanitizer_cov_trace_const_cmp1(i8 0, i8 %9)
  %tobool7.not = icmp eq i8 %9, 0
  br i1 %tobool7.not, label %cond.false19, label %if.then8

if.then8:                                         ; preds = %if.then6
  call void @__sanitizer_cov_trace_const_cmp4(i32 11, i32 %7)
  %cmp.i = icmp ult i32 %7, 11
  br i1 %cmp.i, label %cond.false3.i, label %if.else.i

cond.false3.i:                                    ; preds = %if.then8
  call void @__sanitizer_cov_trace_pc() #26
  call void @__asan_load4_noabort(i32 ptrtoint (ptr getelementptr inbounds (%struct.arm_delay_ops, ptr @arm_delay_ops, i32 0, i32 2) to i32))
  %10 = load ptr, ptr getelementptr inbounds (%struct.arm_delay_ops, ptr @arm_delay_ops, i32 0, i32 2), align 4
  tail call void %10(i32 noundef %7) #24
  br label %for.inc

if.else.i:                                        ; preds = %if.then8
  call void @__sanitizer_cov_trace_const_cmp4(i32 20001, i32 %7)
  %cmp5.i = icmp ult i32 %7, 20001
  br i1 %cmp5.i, label %if.then6.i, label %if.else8.i

if.then6.i:                                       ; preds = %if.else.i
  call void @__sanitizer_cov_trace_pc() #26
  %mul7.i = shl nuw nsw i32 %7, 1
  tail call void @usleep_range_state(i32 noundef %7, i32 noundef %mul7.i, i32 noundef 2) #24
  br label %for.inc

if.else8.i:                                       ; preds = %if.else.i
  call void @__sanitizer_cov_trace_pc() #26
  %sub.i = add i32 %7, 999
  %div.i = udiv i32 %sub.i, 1000
  tail call void @msleep(i32 noundef %div.i) #24
  br label %for.inc

cond.false19:                                     ; preds = %if.then6
  call void @__sanitizer_cov_trace_pc() #26
  call void @__asan_load4_noabort(i32 ptrtoint (ptr getelementptr inbounds (%struct.arm_delay_ops, ptr @arm_delay_ops, i32 0, i32 2) to i32))
  %11 = load ptr, ptr getelementptr inbounds (%struct.arm_delay_ops, ptr @arm_delay_ops, i32 0, i32 2), align 4
  tail call void %11(i32 noundef %7) #24
  br label %for.inc

for.inc:                                          ; preds = %cond.false19, %if.else8.i, %if.then6.i, %cond.false3.i, %if.end.for.inc_crit_edge
  %inc = add nuw i32 %i.0228, 1
  %exitcond239.not = icmp eq i32 %inc, %num_regs
  br i1 %exitcond239.not, label %for.inc.cleanup129_crit_edge, label %for.inc.for.body_crit_edge

for.inc.for.body_crit_edge:                       ; preds = %for.inc
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body

for.inc.cleanup129_crit_edge:                     ; preds = %for.inc
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup129

if.end25:                                         ; preds = %entry
  %parse_inplace = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 7, i32 8
  %12 = ptrtoint ptr %parse_inplace to i32
  call void @__asan_load4_noabort(i32 %12)
  %13 = load ptr, ptr %parse_inplace, align 4
  %tobool26.not = icmp eq ptr %13, null
  br i1 %tobool26.not, label %if.end25.cleanup129_crit_edge, label %if.end28

if.end25.cleanup129_crit_edge:                    ; preds = %if.end25
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup129

if.end28:                                         ; preds = %if.end25
  %writeable_reg = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 26
  %14 = ptrtoint ptr %writeable_reg to i32
  call void @__asan_load4_noabort(i32 %14)
  %15 = load ptr, ptr %writeable_reg, align 4
  %tobool29.not = icmp ne ptr %15, null
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %num_regs)
  %cmp32221 = icmp ne i32 %num_regs, 0
  %or.cond = and i1 %tobool29.not, %cmp32221
  br i1 %or.cond, label %for.body33.lr.ph, label %if.end28.if.end47_crit_edge

if.end28.if.end47_crit_edge:                      ; preds = %if.end28
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end47

for.body33.lr.ph:                                 ; preds = %if.end28
  %dev = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 5
  %reg_stride = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 45
  br label %for.body33

for.cond31:                                       ; preds = %if.end40
  %inc45 = add nuw i32 %i.1222, 1
  %exitcond.not = icmp eq i32 %inc45, %num_regs
  br i1 %exitcond.not, label %for.cond31.if.end47_crit_edge, label %for.cond31.for.body33_crit_edge

for.cond31.for.body33_crit_edge:                  ; preds = %for.cond31
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body33

for.cond31.if.end47_crit_edge:                    ; preds = %for.cond31
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end47

for.body33:                                       ; preds = %for.cond31.for.body33_crit_edge, %for.body33.lr.ph
  %i.1222 = phi i32 [ 0, %for.body33.lr.ph ], [ %inc45, %for.cond31.for.body33_crit_edge ]
  %arrayidx35 = getelementptr %struct.reg_sequence, ptr %regs, i32 %i.1222
  %16 = ptrtoint ptr %arrayidx35 to i32
  call void @__asan_load4_noabort(i32 %16)
  %17 = load i32, ptr %arrayidx35, align 4
  %18 = ptrtoint ptr %writeable_reg to i32
  call void @__asan_load4_noabort(i32 %18)
  %19 = load ptr, ptr %writeable_reg, align 4
  %20 = ptrtoint ptr %dev to i32
  call void @__asan_load4_noabort(i32 %20)
  %21 = load ptr, ptr %dev, align 4
  %call38 = tail call zeroext i1 %19(ptr noundef %21, i32 noundef %17) #24
  br i1 %call38, label %if.end40, label %for.body33.cleanup129_crit_edge

for.body33.cleanup129_crit_edge:                  ; preds = %for.body33
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup129

if.end40:                                         ; preds = %for.body33
  %22 = ptrtoint ptr %reg_stride to i32
  call void @__asan_load4_noabort(i32 %22)
  %23 = load i32, ptr %reg_stride, align 4
  %sub = add i32 %23, -1
  %and = and i32 %sub, %17
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and)
  %cmp41 = icmp eq i32 %and, 0
  br i1 %cmp41, label %for.cond31, label %if.end40.cleanup129_crit_edge

if.end40.cleanup129_crit_edge:                    ; preds = %if.end40
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup129

if.end47:                                         ; preds = %for.cond31.if.end47_crit_edge, %if.end28.if.end47_crit_edge
  %cache_bypass = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 54
  %24 = ptrtoint ptr %cache_bypass to i32
  call void @__asan_load1_noabort(i32 %24)
  %25 = load i8, ptr %cache_bypass, align 1, !range !389
  call void @__sanitizer_cov_trace_const_cmp1(i8 0, i8 %25)
  %tobool48.not = icmp eq i8 %25, 0
  br i1 %tobool48.not, label %for.cond50.preheader, label %if.end47.if.end73_crit_edge

if.end47.if.end73_crit_edge:                      ; preds = %if.end47
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end73

for.cond50.preheader:                             ; preds = %if.end47
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %num_regs)
  %cmp51223.not = icmp eq i32 %num_regs, 0
  br i1 %cmp51223.not, label %for.cond50.preheader.for.end69_crit_edge, label %for.cond50.preheader.for.body52_crit_edge

for.cond50.preheader.for.body52_crit_edge:        ; preds = %for.cond50.preheader
  br label %for.body52

for.cond50.preheader.for.end69_crit_edge:         ; preds = %for.cond50.preheader
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.end69

for.cond50:                                       ; preds = %for.body52
  %inc68 = add nuw i32 %i.2224, 1
  %exitcond237.not = icmp eq i32 %inc68, %num_regs
  br i1 %exitcond237.not, label %for.cond50.for.end69_crit_edge, label %for.cond50.for.body52_crit_edge

for.cond50.for.body52_crit_edge:                  ; preds = %for.cond50
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body52

for.cond50.for.end69_crit_edge:                   ; preds = %for.cond50
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.end69

for.body52:                                       ; preds = %for.cond50.for.body52_crit_edge, %for.cond50.preheader.for.body52_crit_edge
  %i.2224 = phi i32 [ %inc68, %for.cond50.for.body52_crit_edge ], [ 0, %for.cond50.preheader.for.body52_crit_edge ]
  %arrayidx53 = getelementptr %struct.reg_sequence, ptr %regs, i32 %i.2224
  %def54 = getelementptr %struct.reg_sequence, ptr %regs, i32 %i.2224, i32 1
  %26 = ptrtoint ptr %def54 to i32
  call void @__asan_load4_noabort(i32 %26)
  %27 = load i32, ptr %def54, align 4
  %28 = ptrtoint ptr %arrayidx53 to i32
  call void @__asan_load4_noabort(i32 %28)
  %29 = load i32, ptr %arrayidx53, align 4
  %call58 = tail call i32 @regcache_write(ptr noundef %map, i32 noundef %29, i32 noundef %27) #24
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call58)
  %tobool59.not = icmp eq i32 %call58, 0
  br i1 %tobool59.not, label %for.cond50, label %cleanup63

cleanup63:                                        ; preds = %for.body52
  call void @__sanitizer_cov_trace_pc() #26
  %dev61 = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 5
  %30 = ptrtoint ptr %dev61 to i32
  call void @__asan_load4_noabort(i32 %30)
  %31 = load ptr, ptr %dev61, align 4
  tail call void (ptr, ptr, ...) @_dev_err(ptr noundef %31, ptr noundef nonnull @.str.63, i32 noundef %29, i32 noundef %call58) #31
  br label %cleanup129

for.end69:                                        ; preds = %for.cond50.for.end69_crit_edge, %for.cond50.preheader.for.end69_crit_edge
  %cache_only = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 53
  %32 = ptrtoint ptr %cache_only to i32
  call void @__asan_load1_noabort(i32 %32)
  %33 = load i8, ptr %cache_only, align 4, !range !389
  call void @__sanitizer_cov_trace_const_cmp1(i8 0, i8 %33)
  %tobool70.not = icmp eq i8 %33, 0
  br i1 %tobool70.not, label %for.end69.if.end73_crit_edge, label %if.then71

for.end69.if.end73_crit_edge:                     ; preds = %for.end69
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end73

if.then71:                                        ; preds = %for.end69
  call void @__sanitizer_cov_trace_pc() #26
  %cache_dirty = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 59
  %34 = ptrtoint ptr %cache_dirty to i32
  call void @__asan_store1_noabort(i32 %34)
  store i8 1, ptr %cache_dirty, align 4
  br label %cleanup129

if.end73:                                         ; preds = %for.end69.if.end73_crit_edge, %if.end47.if.end73_crit_edge
  %bus = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 8
  %35 = ptrtoint ptr %bus to i32
  call void @__asan_load4_noabort(i32 %35)
  %36 = load ptr, ptr %bus, align 4
  %tobool74.not = icmp eq ptr %36, null
  br i1 %tobool74.not, label %do.end87, label %if.end73.if.end93_crit_edge, !prof !387

if.end73.if.end93_crit_edge:                      ; preds = %if.end73
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end93

do.end87:                                         ; preds = %if.end73
  call void @__sanitizer_cov_trace_pc() #26
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.15, i32 noundef 2511, i32 noundef 9, ptr noundef null) #24
  br label %if.end93

if.end93:                                         ; preds = %do.end87, %if.end73.if.end93_crit_edge
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %num_regs)
  %cmp101225.not = icmp eq i32 %num_regs, 0
  br i1 %cmp101225.not, label %if.end93.for.end127_crit_edge, label %for.body102.lr.ph

if.end93.for.end127_crit_edge:                    ; preds = %if.end93
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.end127

for.body102.lr.ph:                                ; preds = %if.end93
  %range_tree.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 68
  %37 = ptrtoint ptr %range_tree.i to i32
  call void @__asan_load4_noabort(i32 %37)
  %node.015.i = load ptr, ptr %range_tree.i, align 4
  %tobool.not16.i = icmp eq ptr %node.015.i, null
  br label %for.body102

for.cond100:                                      ; preds = %lor.lhs.false
  %inc126 = add nuw i32 %i.3226, 1
  %exitcond238.not = icmp eq i32 %inc126, %num_regs
  br i1 %exitcond238.not, label %for.cond100.for.end127_crit_edge, label %for.cond100.for.body102_crit_edge

for.cond100.for.body102_crit_edge:                ; preds = %for.cond100
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body102

for.cond100.for.end127_crit_edge:                 ; preds = %for.cond100
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.end127

for.body102:                                      ; preds = %for.cond100.for.body102_crit_edge, %for.body102.lr.ph
  %i.3226 = phi i32 [ 0, %for.body102.lr.ph ], [ %inc126, %for.cond100.for.body102_crit_edge ]
  %arrayidx104 = getelementptr %struct.reg_sequence, ptr %regs, i32 %i.3226
  %38 = ptrtoint ptr %arrayidx104 to i32
  call void @__asan_load4_noabort(i32 %38)
  %39 = load i32, ptr %arrayidx104, align 4
  br i1 %tobool.not16.i, label %for.body102.lor.lhs.false_crit_edge, label %for.body102.while.body.i_crit_edge

for.body102.while.body.i_crit_edge:               ; preds = %for.body102
  br label %while.body.i

for.body102.lor.lhs.false_crit_edge:              ; preds = %for.body102
  call void @__sanitizer_cov_trace_pc() #26
  br label %lor.lhs.false

while.body.i:                                     ; preds = %cleanup.i.while.body.i_crit_edge, %for.body102.while.body.i_crit_edge
  %node.017.i = phi ptr [ %node.0.i, %cleanup.i.while.body.i_crit_edge ], [ %node.015.i, %for.body102.while.body.i_crit_edge ]
  %range_min.i = getelementptr inbounds %struct.regmap_range_node, ptr %node.017.i, i32 0, i32 3
  %40 = ptrtoint ptr %range_min.i to i32
  call void @__asan_load4_noabort(i32 %40)
  %41 = load i32, ptr %range_min.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %41, i32 %39)
  %cmp.i201 = icmp ugt i32 %41, %39
  br i1 %cmp.i201, label %if.then.i202, label %if.else.i203

if.then.i202:                                     ; preds = %while.body.i
  call void @__sanitizer_cov_trace_pc() #26
  %rb_left.i = getelementptr inbounds %struct.rb_node, ptr %node.017.i, i32 0, i32 2
  br label %cleanup.i

if.else.i203:                                     ; preds = %while.body.i
  %range_max.i = getelementptr inbounds %struct.regmap_range_node, ptr %node.017.i, i32 0, i32 4
  %42 = ptrtoint ptr %range_max.i to i32
  call void @__asan_load4_noabort(i32 %42)
  %43 = load i32, ptr %range_max.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %43, i32 %39)
  %cmp1.i = icmp ult i32 %43, %39
  br i1 %cmp1.i, label %if.then2.i, label %if.else.i203.if.then111_crit_edge

if.else.i203.if.then111_crit_edge:                ; preds = %if.else.i203
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.then111

if.then2.i:                                       ; preds = %if.else.i203
  call void @__sanitizer_cov_trace_pc() #26
  %rb_right.i = getelementptr inbounds %struct.rb_node, ptr %node.017.i, i32 0, i32 1
  br label %cleanup.i

cleanup.i:                                        ; preds = %if.then2.i, %if.then.i202
  %node.1.in.i = phi ptr [ %rb_left.i, %if.then.i202 ], [ %rb_right.i, %if.then2.i ]
  %44 = ptrtoint ptr %node.1.in.i to i32
  call void @__asan_load4_noabort(i32 %44)
  %node.0.i = load ptr, ptr %node.1.in.i, align 4
  %tobool.not.i = icmp eq ptr %node.0.i, null
  br i1 %tobool.not.i, label %cleanup.i.lor.lhs.false_crit_edge, label %cleanup.i.while.body.i_crit_edge

cleanup.i.while.body.i_crit_edge:                 ; preds = %cleanup.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %while.body.i

cleanup.i.lor.lhs.false_crit_edge:                ; preds = %cleanup.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cleanup.i.lor.lhs.false_crit_edge, %for.body102.lor.lhs.false_crit_edge
  %delay_us109 = getelementptr %struct.reg_sequence, ptr %regs, i32 %i.3226, i32 2
  %45 = ptrtoint ptr %delay_us109 to i32
  call void @__asan_load4_noabort(i32 %45)
  %46 = load i32, ptr %delay_us109, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %46)
  %tobool110.not = icmp eq i32 %46, 0
  br i1 %tobool110.not, label %for.cond100, label %lor.lhs.false.if.then111_crit_edge

lor.lhs.false.if.then111_crit_edge:               ; preds = %lor.lhs.false
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.then111

if.then111:                                       ; preds = %lor.lhs.false.if.then111_crit_edge, %if.else.i203.if.then111_crit_edge
  %mul112 = mul i32 %num_regs, 12
  %call113 = tail call ptr @kmemdup(ptr noundef %regs, i32 noundef %mul112, i32 noundef 3264) #24
  %tobool114.not = icmp eq ptr %call113, null
  br i1 %tobool114.not, label %if.then111.cleanup129_crit_edge, label %for.body.lr.ph.i

if.then111.cleanup129_crit_edge:                  ; preds = %if.then111
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup129

for.body.lr.ph.i:                                 ; preds = %if.then111
  %can_sleep.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 71
  br label %for.body.i

for.body.i:                                       ; preds = %for.inc.i.for.body.i_crit_edge, %for.body.lr.ph.i
  %this_page.0145.i = phi i32 [ 0, %for.body.lr.ph.i ], [ %this_page.3125.i, %for.inc.i.for.body.i_crit_edge ]
  %base.0143.i = phi ptr [ %call113, %for.body.lr.ph.i ], [ %base.1.i, %for.inc.i.for.body.i_crit_edge ]
  %n.0141.i = phi i32 [ 0, %for.body.lr.ph.i ], [ %inc56.i, %for.inc.i.for.body.i_crit_edge ]
  %i.0139.i = phi i32 [ 0, %for.body.lr.ph.i ], [ %inc.i, %for.inc.i.for.body.i_crit_edge ]
  %arrayidx.i = getelementptr %struct.reg_sequence, ptr %call113, i32 %i.0139.i
  %47 = ptrtoint ptr %arrayidx.i to i32
  call void @__asan_load4_noabort(i32 %47)
  %48 = load i32, ptr %arrayidx.i, align 4
  %49 = ptrtoint ptr %range_tree.i to i32
  call void @__asan_load4_noabort(i32 %49)
  %node.015.i.i = load ptr, ptr %range_tree.i, align 4
  %tobool.not16.i.i = icmp eq ptr %node.015.i.i, null
  br i1 %tobool.not16.i.i, label %for.body.i.lor.lhs.false.i_crit_edge, label %for.body.i.while.body.i.i_crit_edge

for.body.i.while.body.i.i_crit_edge:              ; preds = %for.body.i
  br label %while.body.i.i

for.body.i.lor.lhs.false.i_crit_edge:             ; preds = %for.body.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %lor.lhs.false.i

while.body.i.i:                                   ; preds = %cleanup.i.i.while.body.i.i_crit_edge, %for.body.i.while.body.i.i_crit_edge
  %node.017.i.i = phi ptr [ %node.0.i.i, %cleanup.i.i.while.body.i.i_crit_edge ], [ %node.015.i.i, %for.body.i.while.body.i.i_crit_edge ]
  %range_min.i.i = getelementptr inbounds %struct.regmap_range_node, ptr %node.017.i.i, i32 0, i32 3
  %50 = ptrtoint ptr %range_min.i.i to i32
  call void @__asan_load4_noabort(i32 %50)
  %51 = load i32, ptr %range_min.i.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %48, i32 %51)
  %cmp.i.i = icmp ult i32 %48, %51
  br i1 %cmp.i.i, label %if.then.i.i, label %if.else.i.i

if.then.i.i:                                      ; preds = %while.body.i.i
  call void @__sanitizer_cov_trace_pc() #26
  %rb_left.i.i = getelementptr inbounds %struct.rb_node, ptr %node.017.i.i, i32 0, i32 2
  br label %cleanup.i.i

if.else.i.i:                                      ; preds = %while.body.i.i
  %range_max.i.i = getelementptr inbounds %struct.regmap_range_node, ptr %node.017.i.i, i32 0, i32 4
  %52 = ptrtoint ptr %range_max.i.i to i32
  call void @__asan_load4_noabort(i32 %52)
  %53 = load i32, ptr %range_max.i.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %53, i32 %48)
  %cmp1.i.i = icmp ult i32 %53, %48
  br i1 %cmp1.i.i, label %if.then2.i.i, label %if.then.i204

if.then2.i.i:                                     ; preds = %if.else.i.i
  call void @__sanitizer_cov_trace_pc() #26
  %rb_right.i.i = getelementptr inbounds %struct.rb_node, ptr %node.017.i.i, i32 0, i32 1
  br label %cleanup.i.i

cleanup.i.i:                                      ; preds = %if.then2.i.i, %if.then.i.i
  %node.1.in.i.i = phi ptr [ %rb_left.i.i, %if.then.i.i ], [ %rb_right.i.i, %if.then2.i.i ]
  %54 = ptrtoint ptr %node.1.in.i.i to i32
  call void @__asan_load4_noabort(i32 %54)
  %node.0.i.i = load ptr, ptr %node.1.in.i.i, align 4
  %tobool.not.i.i = icmp eq ptr %node.0.i.i, null
  br i1 %tobool.not.i.i, label %cleanup.i.i.lor.lhs.false.i_crit_edge, label %cleanup.i.i.while.body.i.i_crit_edge

cleanup.i.i.while.body.i.i_crit_edge:             ; preds = %cleanup.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %while.body.i.i

cleanup.i.i.lor.lhs.false.i_crit_edge:            ; preds = %cleanup.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %lor.lhs.false.i

if.then.i204:                                     ; preds = %if.else.i.i
  %sub.i.i = sub i32 %48, %51
  %window_len.i.i = getelementptr inbounds %struct.regmap_range_node, ptr %node.017.i.i, i32 0, i32 9
  %55 = ptrtoint ptr %window_len.i.i to i32
  call void @__asan_load4_noabort(i32 %55)
  %56 = load i32, ptr %window_len.i.i, align 4
  %div.i.i = udiv i32 %sub.i.i, %56
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %i.0139.i)
  %cmp3.i = icmp eq i32 %i.0139.i, 0
  %spec.select.i = select i1 %cmp3.i, i32 %div.i.i, i32 %this_page.0145.i
  call void @__sanitizer_cov_trace_cmp4(i32 %div.i.i, i32 %spec.select.i)
  %cmp5.not.i = icmp eq i32 %div.i.i, %spec.select.i
  br i1 %cmp5.not.i, label %if.then.i204.lor.lhs.false.i_crit_edge, label %if.then.i204.if.then12.i_crit_edge

if.then.i204.if.then12.i_crit_edge:               ; preds = %if.then.i204
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.then12.i

if.then.i204.lor.lhs.false.i_crit_edge:           ; preds = %if.then.i204
  call void @__sanitizer_cov_trace_pc() #26
  br label %lor.lhs.false.i

lor.lhs.false.i:                                  ; preds = %if.then.i204.lor.lhs.false.i_crit_edge, %cleanup.i.i.lor.lhs.false.i_crit_edge, %for.body.i.lor.lhs.false.i_crit_edge
  %node.0.lcssa.i118.i = phi ptr [ null, %for.body.i.lor.lhs.false.i_crit_edge ], [ %node.017.i.i, %if.then.i204.lor.lhs.false.i_crit_edge ], [ null, %cleanup.i.i.lor.lhs.false.i_crit_edge ]
  %this_page.3.i = phi i32 [ %this_page.0145.i, %for.body.i.lor.lhs.false.i_crit_edge ], [ %div.i.i, %if.then.i204.lor.lhs.false.i_crit_edge ], [ %this_page.0145.i, %cleanup.i.i.lor.lhs.false.i_crit_edge ]
  %delay_us.i = getelementptr %struct.reg_sequence, ptr %call113, i32 %i.0139.i, i32 2
  %57 = ptrtoint ptr %delay_us.i to i32
  call void @__asan_load4_noabort(i32 %57)
  %58 = load i32, ptr %delay_us.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %58)
  %tobool11.not.i = icmp eq i32 %58, 0
  br i1 %tobool11.not.i, label %lor.lhs.false.i.for.inc.i_crit_edge, label %lor.lhs.false.i.if.then12.i_crit_edge

lor.lhs.false.i.if.then12.i_crit_edge:            ; preds = %lor.lhs.false.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.then12.i

lor.lhs.false.i.for.inc.i_crit_edge:              ; preds = %lor.lhs.false.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i

if.then12.i:                                      ; preds = %lor.lhs.false.i.if.then12.i_crit_edge, %if.then.i204.if.then12.i_crit_edge
  %tobool9.not128.i = phi i1 [ true, %lor.lhs.false.i.if.then12.i_crit_edge ], [ false, %if.then.i204.if.then12.i_crit_edge ]
  %this_page.3126.i = phi i32 [ %this_page.3.i, %lor.lhs.false.i.if.then12.i_crit_edge ], [ %div.i.i, %if.then.i204.if.then12.i_crit_edge ]
  %node.0.lcssa.i118123.i = phi ptr [ %node.0.lcssa.i118.i, %lor.lhs.false.i.if.then12.i_crit_edge ], [ %node.017.i.i, %if.then.i204.if.then12.i_crit_edge ]
  %delay_us14.i = getelementptr %struct.reg_sequence, ptr %call113, i32 %i.0139.i, i32 2
  %59 = ptrtoint ptr %delay_us14.i to i32
  call void @__asan_load4_noabort(i32 %59)
  %60 = load i32, ptr %delay_us14.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %60)
  %tobool15.not.i = icmp ne i32 %60, 0
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %i.0139.i)
  %cmp16.i = icmp eq i32 %i.0139.i, 0
  %or.cond.i = select i1 %tobool15.not.i, i1 %cmp16.i, i1 false
  %n.1.i = select i1 %or.cond.i, i32 1, i32 %n.0141.i
  %call19.i = tail call fastcc i32 @_regmap_raw_multi_reg_write(ptr noundef %map, ptr noundef %base.0143.i, i32 noundef %n.1.i) #24
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call19.i)
  %cmp20.not.i = icmp eq i32 %call19.i, 0
  br i1 %cmp20.not.i, label %if.end22.i, label %if.then12.i._regmap_range_multi_paged_reg_write.exit_crit_edge

if.then12.i._regmap_range_multi_paged_reg_write.exit_crit_edge: ; preds = %if.then12.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %_regmap_range_multi_paged_reg_write.exit

if.end22.i:                                       ; preds = %if.then12.i
  %61 = ptrtoint ptr %delay_us14.i to i32
  call void @__asan_load4_noabort(i32 %61)
  %62 = load i32, ptr %delay_us14.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %62)
  %tobool25.not.i = icmp eq i32 %62, 0
  br i1 %tobool25.not.i, label %if.end22.i.if.end44.i_crit_edge, label %if.then26.i

if.end22.i.if.end44.i_crit_edge:                  ; preds = %if.end22.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end44.i

if.then26.i:                                      ; preds = %if.end22.i
  %63 = ptrtoint ptr %can_sleep.i to i32
  call void @__asan_load1_noabort(i32 %63)
  %64 = load i8, ptr %can_sleep.i, align 4, !range !389
  call void @__sanitizer_cov_trace_const_cmp1(i8 0, i8 %64)
  %tobool27.not.i = icmp eq i8 %64, 0
  br i1 %tobool27.not.i, label %cond.false39.i, label %if.then28.i

if.then28.i:                                      ; preds = %if.then26.i
  call void @__sanitizer_cov_trace_const_cmp4(i32 11, i32 %62)
  %cmp.i111.i = icmp ult i32 %62, 11
  br i1 %cmp.i111.i, label %cond.false3.i.i, label %if.else.i113.i

cond.false3.i.i:                                  ; preds = %if.then28.i
  call void @__sanitizer_cov_trace_pc() #26
  call void @__asan_load4_noabort(i32 ptrtoint (ptr getelementptr inbounds (%struct.arm_delay_ops, ptr @arm_delay_ops, i32 0, i32 2) to i32))
  %65 = load ptr, ptr getelementptr inbounds (%struct.arm_delay_ops, ptr @arm_delay_ops, i32 0, i32 2), align 4
  tail call void %65(i32 noundef %62) #24
  br label %if.end44.i

if.else.i113.i:                                   ; preds = %if.then28.i
  call void @__sanitizer_cov_trace_const_cmp4(i32 20001, i32 %62)
  %cmp5.i.i = icmp ult i32 %62, 20001
  br i1 %cmp5.i.i, label %if.then6.i.i, label %if.else8.i.i

if.then6.i.i:                                     ; preds = %if.else.i113.i
  call void @__sanitizer_cov_trace_pc() #26
  %mul7.i.i = shl nuw nsw i32 %62, 1
  tail call void @usleep_range_state(i32 noundef %62, i32 noundef %mul7.i.i, i32 noundef 2) #24
  br label %if.end44.i

if.else8.i.i:                                     ; preds = %if.else.i113.i
  call void @__sanitizer_cov_trace_pc() #26
  %sub.i114.i = add i32 %62, 999
  %div.i115.i = udiv i32 %sub.i114.i, 1000
  tail call void @msleep(i32 noundef %div.i115.i) #24
  br label %if.end44.i

cond.false39.i:                                   ; preds = %if.then26.i
  call void @__sanitizer_cov_trace_pc() #26
  call void @__asan_load4_noabort(i32 ptrtoint (ptr getelementptr inbounds (%struct.arm_delay_ops, ptr @arm_delay_ops, i32 0, i32 2) to i32))
  %66 = load ptr, ptr getelementptr inbounds (%struct.arm_delay_ops, ptr @arm_delay_ops, i32 0, i32 2), align 4
  tail call void %66(i32 noundef %62) #24
  br label %if.end44.i

if.end44.i:                                       ; preds = %cond.false39.i, %if.else8.i.i, %if.then6.i.i, %cond.false3.i.i, %if.end22.i.if.end44.i_crit_edge
  %add.ptr.i = getelementptr %struct.reg_sequence, ptr %base.0143.i, i32 %n.1.i
  br i1 %tobool9.not128.i, label %if.end44.i.for.inc.i_crit_edge, label %if.then46.i

if.end44.i.for.inc.i_crit_edge:                   ; preds = %if.end44.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i

if.then46.i:                                      ; preds = %if.end44.i
  %call49.i = tail call fastcc i32 @_regmap_select_page(ptr noundef %map, ptr noundef %add.ptr.i, ptr noundef %node.0.lcssa.i118123.i, i32 noundef 1) #24
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call49.i)
  %cmp50.not.i = icmp eq i32 %call49.i, 0
  br i1 %cmp50.not.i, label %if.then46.i.for.inc.i_crit_edge, label %if.then46.i._regmap_range_multi_paged_reg_write.exit_crit_edge

if.then46.i._regmap_range_multi_paged_reg_write.exit_crit_edge: ; preds = %if.then46.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %_regmap_range_multi_paged_reg_write.exit

if.then46.i.for.inc.i_crit_edge:                  ; preds = %if.then46.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i

for.inc.i:                                        ; preds = %if.then46.i.for.inc.i_crit_edge, %if.end44.i.for.inc.i_crit_edge, %lor.lhs.false.i.for.inc.i_crit_edge
  %this_page.3125.i = phi i32 [ %this_page.3126.i, %if.end44.i.for.inc.i_crit_edge ], [ %this_page.3.i, %lor.lhs.false.i.for.inc.i_crit_edge ], [ %this_page.3126.i, %if.then46.i.for.inc.i_crit_edge ]
  %n.2.i = phi i32 [ 0, %if.end44.i.for.inc.i_crit_edge ], [ %n.0141.i, %lor.lhs.false.i.for.inc.i_crit_edge ], [ 0, %if.then46.i.for.inc.i_crit_edge ]
  %base.1.i = phi ptr [ %add.ptr.i, %if.end44.i.for.inc.i_crit_edge ], [ %base.0143.i, %lor.lhs.false.i.for.inc.i_crit_edge ], [ %add.ptr.i, %if.then46.i.for.inc.i_crit_edge ]
  %inc.i = add nuw i32 %i.0139.i, 1
  %inc56.i = add i32 %n.2.i, 1
  %exitcond.not.i = icmp eq i32 %inc.i, %num_regs
  br i1 %exitcond.not.i, label %for.end.i, label %for.inc.i.for.body.i_crit_edge

for.inc.i.for.body.i_crit_edge:                   ; preds = %for.inc.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body.i

for.end.i:                                        ; preds = %for.inc.i
  call void @__sanitizer_cov_trace_const_cmp4(i32 2147483647, i32 %n.2.i)
  %cmp57.i = icmp ult i32 %n.2.i, 2147483647
  br i1 %cmp57.i, label %if.then58.i, label %for.end.i._regmap_range_multi_paged_reg_write.exit_crit_edge

for.end.i._regmap_range_multi_paged_reg_write.exit_crit_edge: ; preds = %for.end.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %_regmap_range_multi_paged_reg_write.exit

if.then58.i:                                      ; preds = %for.end.i
  call void @__sanitizer_cov_trace_pc() #26
  %call59.i = tail call fastcc i32 @_regmap_raw_multi_reg_write(ptr noundef %map, ptr noundef %base.1.i, i32 noundef %inc56.i) #24
  br label %_regmap_range_multi_paged_reg_write.exit

_regmap_range_multi_paged_reg_write.exit:         ; preds = %if.then58.i, %for.end.i._regmap_range_multi_paged_reg_write.exit_crit_edge, %if.then46.i._regmap_range_multi_paged_reg_write.exit_crit_edge, %if.then12.i._regmap_range_multi_paged_reg_write.exit_crit_edge
  %retval.2.i = phi i32 [ %call59.i, %if.then58.i ], [ 0, %for.end.i._regmap_range_multi_paged_reg_write.exit_crit_edge ], [ %call49.i, %if.then46.i._regmap_range_multi_paged_reg_write.exit_crit_edge ], [ %call19.i, %if.then12.i._regmap_range_multi_paged_reg_write.exit_crit_edge ]
  tail call void @kfree(ptr noundef nonnull %call113) #24
  br label %cleanup129

for.end127:                                       ; preds = %for.cond100.for.end127_crit_edge, %if.end93.for.end127_crit_edge
  %call128 = tail call fastcc i32 @_regmap_raw_multi_reg_write(ptr noundef %map, ptr noundef %regs, i32 noundef %num_regs)
  br label %cleanup129

cleanup129:                                       ; preds = %for.end127, %_regmap_range_multi_paged_reg_write.exit, %if.then111.cleanup129_crit_edge, %if.then71, %cleanup63, %if.end40.cleanup129_crit_edge, %for.body33.cleanup129_crit_edge, %if.end25.cleanup129_crit_edge, %for.inc.cleanup129_crit_edge, %for.body.cleanup129_crit_edge, %for.cond.preheader.cleanup129_crit_edge
  %retval.9 = phi i32 [ %call128, %for.end127 ], [ %call58, %cleanup63 ], [ 0, %if.then71 ], [ -22, %if.end25.cleanup129_crit_edge ], [ -12, %if.then111.cleanup129_crit_edge ], [ %retval.2.i, %_regmap_range_multi_paged_reg_write.exit ], [ 0, %for.cond.preheader.cleanup129_crit_edge ], [ %call, %for.body.cleanup129_crit_edge ], [ 0, %for.inc.cleanup129_crit_edge ], [ -22, %if.end40.cleanup129_crit_edge ], [ -22, %for.body33.cleanup129_crit_edge ]
  ret i32 %retval.9
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @regmap_multi_reg_write_bypassed(ptr noundef %map, ptr noundef %regs, i32 noundef %num_regs) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %lock = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 1
  %0 = ptrtoint ptr %lock to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %lock, align 4
  %lock_arg = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 3
  %2 = ptrtoint ptr %lock_arg to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load ptr, ptr %lock_arg, align 4
  tail call void %1(ptr noundef %3) #24
  %cache_bypass = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 54
  %4 = ptrtoint ptr %cache_bypass to i32
  call void @__asan_load1_noabort(i32 %4)
  %5 = load i8, ptr %cache_bypass, align 1, !range !389
  store i8 1, ptr %cache_bypass, align 1
  %call = tail call fastcc i32 @_regmap_multi_reg_write(ptr noundef %map, ptr noundef %regs, i32 noundef %num_regs)
  %6 = ptrtoint ptr %cache_bypass to i32
  call void @__asan_store1_noabort(i32 %6)
  store i8 %5, ptr %cache_bypass, align 1
  %unlock = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 2
  %7 = ptrtoint ptr %unlock to i32
  call void @__asan_load4_noabort(i32 %7)
  %8 = load ptr, ptr %unlock, align 4
  %9 = ptrtoint ptr %lock_arg to i32
  call void @__asan_load4_noabort(i32 %9)
  %10 = load ptr, ptr %lock_arg, align 4
  tail call void %8(ptr noundef %10) #24
  ret i32 %call
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @regmap_raw_write_async(ptr noundef %map, i32 noundef %reg, ptr noundef %val, i32 noundef %val_len) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %val_bytes = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 7, i32 3
  %0 = ptrtoint ptr %val_bytes to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load i32, ptr %val_bytes, align 4
  %rem = urem i32 %val_len, %1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %rem)
  %tobool.not = icmp eq i32 %rem, 0
  br i1 %tobool.not, label %if.end, label %entry.cleanup_crit_edge

entry.cleanup_crit_edge:                          ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end:                                           ; preds = %entry
  %reg_stride = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 45
  %2 = ptrtoint ptr %reg_stride to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load i32, ptr %reg_stride, align 4
  %sub = add i32 %3, -1
  %and = and i32 %sub, %reg
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and)
  %cmp = icmp eq i32 %and, 0
  br i1 %cmp, label %if.end2, label %if.end.cleanup_crit_edge

if.end.cleanup_crit_edge:                         ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end2:                                          ; preds = %if.end
  %lock = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 1
  %4 = ptrtoint ptr %lock to i32
  call void @__asan_load4_noabort(i32 %4)
  %5 = load ptr, ptr %lock, align 4
  %lock_arg = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 3
  %6 = ptrtoint ptr %lock_arg to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load ptr, ptr %lock_arg, align 4
  tail call void %5(ptr noundef %7) #24
  %async = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 11
  %8 = ptrtoint ptr %async to i32
  call void @__asan_store1_noabort(i32 %8)
  store i8 1, ptr %async, align 4
  %9 = ptrtoint ptr %val_bytes to i32
  call void @__asan_load4_noabort(i32 %9)
  %10 = load i32, ptr %val_bytes, align 4
  %div.i = udiv i32 %val_len, %10
  call void @__sanitizer_cov_trace_cmp4(i32 %10, i32 %val_len)
  %tobool.not.i = icmp ugt i32 %10, %val_len
  br i1 %tobool.not.i, label %if.end2._regmap_raw_write.exit_crit_edge, label %if.end.i

if.end2._regmap_raw_write.exit_crit_edge:         ; preds = %if.end2
  call void @__sanitizer_cov_trace_pc() #26
  br label %_regmap_raw_write.exit

if.end.i:                                         ; preds = %if.end2
  %use_single_write.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 64
  %11 = ptrtoint ptr %use_single_write.i to i32
  call void @__asan_load1_noabort(i32 %11)
  %12 = load i8, ptr %use_single_write.i, align 1, !range !389
  call void @__sanitizer_cov_trace_const_cmp1(i8 0, i8 %12)
  %tobool2.not.i = icmp eq i8 %12, 0
  br i1 %tobool2.not.i, label %if.else.i, label %if.end.i.if.end10.i_crit_edge

if.end.i.if.end10.i_crit_edge:                    ; preds = %if.end.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end10.i

if.else.i:                                        ; preds = %if.end.i
  %max_raw_write.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 67
  %13 = ptrtoint ptr %max_raw_write.i to i32
  call void @__asan_load4_noabort(i32 %13)
  %14 = load i32, ptr %max_raw_write.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %14)
  %tobool4.not.i = icmp ne i32 %14, 0
  call void @__sanitizer_cov_trace_cmp4(i32 %14, i32 %val_len)
  %cmp.i = icmp ult i32 %14, %val_len
  %or.cond.i = and i1 %tobool4.not.i, %cmp.i
  br i1 %or.cond.i, label %if.then6.i, label %if.else.i.for.body.lr.ph.i_crit_edge

if.else.i.for.body.lr.ph.i_crit_edge:             ; preds = %if.else.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body.lr.ph.i

if.then6.i:                                       ; preds = %if.else.i
  call void @__sanitizer_cov_trace_pc() #26
  %div8.i = udiv i32 %14, %10
  br label %if.end10.i

if.end10.i:                                       ; preds = %if.then6.i, %if.end.i.if.end10.i_crit_edge
  %chunk_regs.0.i = phi i32 [ %div8.i, %if.then6.i ], [ 1, %if.end.i.if.end10.i_crit_edge ]
  %div11.i = udiv i32 %div.i, %chunk_regs.0.i
  call void @__sanitizer_cov_trace_cmp4(i32 %chunk_regs.0.i, i32 %div.i)
  %cmp1260.not.i = icmp ugt i32 %chunk_regs.0.i, %div.i
  br i1 %cmp1260.not.i, label %if.end10.i.for.end.i_crit_edge, label %if.end10.i.for.body.lr.ph.i_crit_edge

if.end10.i.for.body.lr.ph.i_crit_edge:            ; preds = %if.end10.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body.lr.ph.i

if.end10.i.for.end.i_crit_edge:                   ; preds = %if.end10.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.end.i

for.body.lr.ph.i:                                 ; preds = %if.end10.i.for.body.lr.ph.i_crit_edge, %if.else.i.for.body.lr.ph.i_crit_edge
  %div1174.i = phi i32 [ %div11.i, %if.end10.i.for.body.lr.ph.i_crit_edge ], [ 1, %if.else.i.for.body.lr.ph.i_crit_edge ]
  %chunk_regs.073.i = phi i32 [ %chunk_regs.0.i, %if.end10.i.for.body.lr.ph.i_crit_edge ], [ %div.i, %if.else.i.for.body.lr.ph.i_crit_edge ]
  %mul75.i = mul i32 %chunk_regs.073.i, %10
  %reg_stride_order.i.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 46
  %umax.i = tail call i32 @llvm.umax.i32(i32 %div1174.i, i32 1) #24
  %15 = mul i32 %mul75.i, %umax.i
  %16 = sub i32 %val_len, %15
  br label %for.body.i

for.body.i:                                       ; preds = %regmap_get_offset.exit.i.for.body.i_crit_edge, %for.body.lr.ph.i
  %i.064.i = phi i32 [ 0, %for.body.lr.ph.i ], [ %inc.i, %regmap_get_offset.exit.i.for.body.i_crit_edge ]
  %val.addr.062.i = phi ptr [ %val, %for.body.lr.ph.i ], [ %add.ptr.i, %regmap_get_offset.exit.i.for.body.i_crit_edge ]
  %reg.addr.061.i = phi i32 [ %reg, %for.body.lr.ph.i ], [ %add.i, %regmap_get_offset.exit.i.for.body.i_crit_edge ]
  %call.i = tail call fastcc i32 @_regmap_raw_write_impl(ptr noundef %map, i32 noundef %reg.addr.061.i, ptr noundef %val.addr.062.i, i32 noundef %mul75.i, i1 noundef zeroext false) #24
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call.i)
  %tobool14.not.i = icmp eq i32 %call.i, 0
  br i1 %tobool14.not.i, label %if.end16.i, label %for.body.i._regmap_raw_write.exit_crit_edge

for.body.i._regmap_raw_write.exit_crit_edge:      ; preds = %for.body.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %_regmap_raw_write.exit

if.end16.i:                                       ; preds = %for.body.i
  %17 = ptrtoint ptr %reg_stride_order.i.i to i32
  call void @__asan_load4_noabort(i32 %17)
  %18 = load i32, ptr %reg_stride_order.i.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %18)
  %cmp.i.i = icmp sgt i32 %18, -1
  br i1 %cmp.i.i, label %if.then.i.i, label %if.else.i.i

if.then.i.i:                                      ; preds = %if.end16.i
  call void @__sanitizer_cov_trace_pc() #26
  %shl.i.i = shl i32 %chunk_regs.073.i, %18
  br label %regmap_get_offset.exit.i

if.else.i.i:                                      ; preds = %if.end16.i
  call void @__sanitizer_cov_trace_pc() #26
  %19 = ptrtoint ptr %reg_stride to i32
  call void @__asan_load4_noabort(i32 %19)
  %20 = load i32, ptr %reg_stride, align 4
  %mul.i.i = mul i32 %20, %chunk_regs.073.i
  br label %regmap_get_offset.exit.i

regmap_get_offset.exit.i:                         ; preds = %if.else.i.i, %if.then.i.i
  %retval.0.i.i = phi i32 [ %shl.i.i, %if.then.i.i ], [ %mul.i.i, %if.else.i.i ]
  %add.i = add i32 %retval.0.i.i, %reg.addr.061.i
  %add.ptr.i = getelementptr i8, ptr %val.addr.062.i, i32 %mul75.i
  %inc.i = add nuw i32 %i.064.i, 1
  %exitcond.not.i = icmp eq i32 %inc.i, %umax.i
  br i1 %exitcond.not.i, label %regmap_get_offset.exit.i.for.end.i_crit_edge, label %regmap_get_offset.exit.i.for.body.i_crit_edge

regmap_get_offset.exit.i.for.body.i_crit_edge:    ; preds = %regmap_get_offset.exit.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body.i

regmap_get_offset.exit.i.for.end.i_crit_edge:     ; preds = %regmap_get_offset.exit.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.end.i

for.end.i:                                        ; preds = %regmap_get_offset.exit.i.for.end.i_crit_edge, %if.end10.i.for.end.i_crit_edge
  %reg.addr.0.lcssa.i = phi i32 [ %reg, %if.end10.i.for.end.i_crit_edge ], [ %add.i, %regmap_get_offset.exit.i.for.end.i_crit_edge ]
  %val.addr.0.lcssa.i = phi ptr [ %val, %if.end10.i.for.end.i_crit_edge ], [ %add.ptr.i, %regmap_get_offset.exit.i.for.end.i_crit_edge ]
  %val_len.addr.0.lcssa.i = phi i32 [ %val_len, %if.end10.i.for.end.i_crit_edge ], [ %16, %regmap_get_offset.exit.i.for.end.i_crit_edge ]
  %ret.0.lcssa.i = phi i32 [ -1, %if.end10.i.for.end.i_crit_edge ], [ 0, %regmap_get_offset.exit.i.for.end.i_crit_edge ]
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %val_len.addr.0.lcssa.i)
  %tobool18.not.i = icmp eq i32 %val_len.addr.0.lcssa.i, 0
  br i1 %tobool18.not.i, label %for.end.i._regmap_raw_write.exit_crit_edge, label %if.then19.i

for.end.i._regmap_raw_write.exit_crit_edge:       ; preds = %for.end.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %_regmap_raw_write.exit

if.then19.i:                                      ; preds = %for.end.i
  call void @__sanitizer_cov_trace_pc() #26
  %call21.i = tail call fastcc i32 @_regmap_raw_write_impl(ptr noundef %map, i32 noundef %reg.addr.0.lcssa.i, ptr noundef %val.addr.0.lcssa.i, i32 noundef %val_len.addr.0.lcssa.i, i1 noundef zeroext false) #24
  br label %_regmap_raw_write.exit

_regmap_raw_write.exit:                           ; preds = %if.then19.i, %for.end.i._regmap_raw_write.exit_crit_edge, %for.body.i._regmap_raw_write.exit_crit_edge, %if.end2._regmap_raw_write.exit_crit_edge
  %retval.0.i = phi i32 [ -22, %if.end2._regmap_raw_write.exit_crit_edge ], [ %call21.i, %if.then19.i ], [ %ret.0.lcssa.i, %for.end.i._regmap_raw_write.exit_crit_edge ], [ %call.i, %for.body.i._regmap_raw_write.exit_crit_edge ]
  %21 = ptrtoint ptr %async to i32
  call void @__asan_store1_noabort(i32 %21)
  store i8 0, ptr %async, align 4
  %unlock = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 2
  %22 = ptrtoint ptr %unlock to i32
  call void @__asan_load4_noabort(i32 %22)
  %23 = load ptr, ptr %unlock, align 4
  %24 = ptrtoint ptr %lock_arg to i32
  call void @__asan_load4_noabort(i32 %24)
  %25 = load ptr, ptr %lock_arg, align 4
  tail call void %23(ptr noundef %25) #24
  br label %cleanup

cleanup:                                          ; preds = %_regmap_raw_write.exit, %if.end.cleanup_crit_edge, %entry.cleanup_crit_edge
  %retval.0 = phi i32 [ %retval.0.i, %_regmap_raw_write.exit ], [ -22, %entry.cleanup_crit_edge ], [ -22, %if.end.cleanup_crit_edge ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @regmap_read(ptr noundef %map, i32 noundef %reg, ptr noundef %val) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %reg_stride = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 45
  %0 = ptrtoint ptr %reg_stride to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load i32, ptr %reg_stride, align 4
  %sub = add i32 %1, -1
  %and = and i32 %sub, %reg
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and)
  %cmp = icmp eq i32 %and, 0
  br i1 %cmp, label %if.end, label %entry.cleanup_crit_edge

entry.cleanup_crit_edge:                          ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end:                                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  %lock = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 1
  %2 = ptrtoint ptr %lock to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load ptr, ptr %lock, align 4
  %lock_arg = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 3
  %4 = ptrtoint ptr %lock_arg to i32
  call void @__asan_load4_noabort(i32 %4)
  %5 = load ptr, ptr %lock_arg, align 4
  tail call void %3(ptr noundef %5) #24
  %call = tail call fastcc i32 @_regmap_read(ptr noundef %map, i32 noundef %reg, ptr noundef %val)
  %unlock = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 2
  %6 = ptrtoint ptr %unlock to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load ptr, ptr %unlock, align 4
  %8 = ptrtoint ptr %lock_arg to i32
  call void @__asan_load4_noabort(i32 %8)
  %9 = load ptr, ptr %lock_arg, align 4
  tail call void %7(ptr noundef %9) #24
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry.cleanup_crit_edge
  %retval.0 = phi i32 [ %call, %if.end ], [ -22, %entry.cleanup_crit_edge ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal fastcc i32 @_regmap_read(ptr noundef %map, i32 noundef %reg, ptr noundef %val) unnamed_addr #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %bus.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 8
  %0 = ptrtoint ptr %bus.i to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %bus.i, align 4
  %tobool.not.i = icmp eq ptr %1, null
  br i1 %tobool.not.i, label %cond.false.i, label %entry._regmap_map_get_context.exit_crit_edge

entry._regmap_map_get_context.exit_crit_edge:     ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %_regmap_map_get_context.exit

cond.false.i:                                     ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  %bus_context.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 9
  %2 = ptrtoint ptr %bus_context.i to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load ptr, ptr %bus_context.i, align 4
  br label %_regmap_map_get_context.exit

_regmap_map_get_context.exit:                     ; preds = %cond.false.i, %entry._regmap_map_get_context.exit_crit_edge
  %cond.i = phi ptr [ %3, %cond.false.i ], [ %map, %entry._regmap_map_get_context.exit_crit_edge ]
  %cache_bypass = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 54
  %4 = ptrtoint ptr %cache_bypass to i32
  call void @__asan_load1_noabort(i32 %4)
  %5 = load i8, ptr %cache_bypass, align 1, !range !389
  call void @__sanitizer_cov_trace_const_cmp1(i8 0, i8 %5)
  %tobool.not = icmp eq i8 %5, 0
  br i1 %tobool.not, label %if.then, label %_regmap_map_get_context.exit.if.end3_crit_edge

_regmap_map_get_context.exit.if.end3_crit_edge:   ; preds = %_regmap_map_get_context.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end3

if.then:                                          ; preds = %_regmap_map_get_context.exit
  %call1 = tail call i32 @regcache_read(ptr noundef %map, i32 noundef %reg, ptr noundef %val) #24
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call1)
  %cmp = icmp eq i32 %call1, 0
  br i1 %cmp, label %if.then.cleanup_crit_edge, label %if.then.if.end3_crit_edge

if.then.if.end3_crit_edge:                        ; preds = %if.then
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end3

if.then.cleanup_crit_edge:                        ; preds = %if.then
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end3:                                          ; preds = %if.then.if.end3_crit_edge, %_regmap_map_get_context.exit.if.end3_crit_edge
  %cache_only = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 53
  %6 = ptrtoint ptr %cache_only to i32
  call void @__asan_load1_noabort(i32 %6)
  %7 = load i8, ptr %cache_only, align 4, !range !389
  call void @__sanitizer_cov_trace_const_cmp1(i8 0, i8 %7)
  %tobool4.not = icmp eq i8 %7, 0
  br i1 %tobool4.not, label %if.end6, label %if.end3.cleanup_crit_edge

if.end3.cleanup_crit_edge:                        ; preds = %if.end3
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end6:                                          ; preds = %if.end3
  %reg_read.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 38
  %8 = ptrtoint ptr %reg_read.i to i32
  call void @__asan_load4_noabort(i32 %8)
  %9 = load ptr, ptr %reg_read.i, align 4
  %tobool.not.i44 = icmp eq ptr %9, null
  br i1 %tobool.not.i44, label %if.end6.cleanup_crit_edge, label %if.end.i

if.end6.cleanup_crit_edge:                        ; preds = %if.end6
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end.i:                                         ; preds = %if.end6
  %max_register.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 25
  %10 = ptrtoint ptr %max_register.i to i32
  call void @__asan_load4_noabort(i32 %10)
  %11 = load i32, ptr %max_register.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %11)
  %tobool1.not.i = icmp ne i32 %11, 0
  call void @__sanitizer_cov_trace_cmp4(i32 %11, i32 %reg)
  %cmp.i = icmp ult i32 %11, %reg
  %or.cond.i = and i1 %tobool1.not.i, %cmp.i
  br i1 %or.cond.i, label %if.end.i.cleanup_crit_edge, label %if.end4.i

if.end.i.cleanup_crit_edge:                       ; preds = %if.end.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end4.i:                                        ; preds = %if.end.i
  %format_write.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 7, i32 4
  %12 = ptrtoint ptr %format_write.i to i32
  call void @__asan_load4_noabort(i32 %12)
  %13 = load ptr, ptr %format_write.i, align 4
  %tobool5.not.i = icmp eq ptr %13, null
  br i1 %tobool5.not.i, label %if.end7.i, label %if.end4.i.cleanup_crit_edge

if.end4.i.cleanup_crit_edge:                      ; preds = %if.end4.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end7.i:                                        ; preds = %if.end4.i
  %readable_reg.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 27
  %14 = ptrtoint ptr %readable_reg.i to i32
  call void @__asan_load4_noabort(i32 %14)
  %15 = load ptr, ptr %readable_reg.i, align 4
  %tobool8.not.i = icmp eq ptr %15, null
  br i1 %tobool8.not.i, label %if.end11.i, label %if.then9.i

if.then9.i:                                       ; preds = %if.end7.i
  %dev.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 5
  %16 = ptrtoint ptr %dev.i to i32
  call void @__asan_load4_noabort(i32 %16)
  %17 = load ptr, ptr %dev.i, align 4
  %call.i = tail call zeroext i1 %15(ptr noundef %17, i32 noundef %reg) #24
  br i1 %call.i, label %if.then9.i.if.end9_crit_edge, label %if.then9.i.cleanup_crit_edge

if.then9.i.cleanup_crit_edge:                     ; preds = %if.then9.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.then9.i.if.end9_crit_edge:                     ; preds = %if.then9.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end9

if.end11.i:                                       ; preds = %if.end7.i
  %rd_table.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 33
  %18 = ptrtoint ptr %rd_table.i to i32
  call void @__asan_load4_noabort(i32 %18)
  %19 = load ptr, ptr %rd_table.i, align 4
  %tobool12.not.i = icmp eq ptr %19, null
  br i1 %tobool12.not.i, label %if.end11.i.if.end9_crit_edge, label %if.then13.i

if.end11.i.if.end9_crit_edge:                     ; preds = %if.end11.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end9

if.then13.i:                                      ; preds = %if.end11.i
  %n_no_ranges.i.i = getelementptr inbounds %struct.regmap_access_table, ptr %19, i32 0, i32 3
  %20 = ptrtoint ptr %n_no_ranges.i.i to i32
  call void @__asan_load4_noabort(i32 %20)
  %21 = load i32, ptr %n_no_ranges.i.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %21)
  %cmp4.not.i.i.i = icmp eq i32 %21, 0
  br i1 %cmp4.not.i.i.i, label %if.then13.i.if.end.i.i_crit_edge, label %for.body.i.preheader.i.i

if.then13.i.if.end.i.i_crit_edge:                 ; preds = %if.then13.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end.i.i

for.body.i.preheader.i.i:                         ; preds = %if.then13.i
  %no_ranges.i.i = getelementptr inbounds %struct.regmap_access_table, ptr %19, i32 0, i32 2
  %22 = ptrtoint ptr %no_ranges.i.i to i32
  call void @__asan_load4_noabort(i32 %22)
  %23 = load ptr, ptr %no_ranges.i.i, align 4
  br label %for.body.i.i.i

for.body.i.i.i:                                   ; preds = %for.inc.i.i.i.for.body.i.i.i_crit_edge, %for.body.i.preheader.i.i
  %cmp8.i.i.i = phi i1 [ %cmp.i.i.i, %for.inc.i.i.i.for.body.i.i.i_crit_edge ], [ true, %for.body.i.preheader.i.i ]
  %i.07.i.i.i = phi i32 [ %inc.i.i.i, %for.inc.i.i.i.for.body.i.i.i_crit_edge ], [ 0, %for.body.i.preheader.i.i ]
  %r.05.i.i.i = phi ptr [ %incdec.ptr.i.i.i, %for.inc.i.i.i.for.body.i.i.i_crit_edge ], [ %23, %for.body.i.preheader.i.i ]
  %24 = ptrtoint ptr %r.05.i.i.i to i32
  call void @__asan_load4_noabort(i32 %24)
  %25 = load i32, ptr %r.05.i.i.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %25, i32 %reg)
  %cmp.not.i.i.i.i = icmp ugt i32 %25, %reg
  br i1 %cmp.not.i.i.i.i, label %for.body.i.i.i.for.inc.i.i.i_crit_edge, label %regmap_reg_in_range.exit.i.i.i

for.body.i.i.i.for.inc.i.i.i_crit_edge:           ; preds = %for.body.i.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i.i.i

regmap_reg_in_range.exit.i.i.i:                   ; preds = %for.body.i.i.i
  %range_max.i.i.i.i = getelementptr inbounds %struct.regmap_range, ptr %r.05.i.i.i, i32 0, i32 1
  %26 = ptrtoint ptr %range_max.i.i.i.i to i32
  call void @__asan_load4_noabort(i32 %26)
  %27 = load i32, ptr %range_max.i.i.i.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %27, i32 %reg)
  %cmp1.i.not.i.i.i = icmp ult i32 %27, %reg
  br i1 %cmp1.i.not.i.i.i, label %regmap_reg_in_range.exit.i.i.i.for.inc.i.i.i_crit_edge, label %regmap_reg_in_range.exit.i.i.i.regmap_reg_in_ranges.exit.i.i_crit_edge

regmap_reg_in_range.exit.i.i.i.regmap_reg_in_ranges.exit.i.i_crit_edge: ; preds = %regmap_reg_in_range.exit.i.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_reg_in_ranges.exit.i.i

regmap_reg_in_range.exit.i.i.i.for.inc.i.i.i_crit_edge: ; preds = %regmap_reg_in_range.exit.i.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i.i.i

for.inc.i.i.i:                                    ; preds = %regmap_reg_in_range.exit.i.i.i.for.inc.i.i.i_crit_edge, %for.body.i.i.i.for.inc.i.i.i_crit_edge
  %inc.i.i.i = add nuw i32 %i.07.i.i.i, 1
  %incdec.ptr.i.i.i = getelementptr %struct.regmap_range, ptr %r.05.i.i.i, i32 1
  call void @__sanitizer_cov_trace_cmp4(i32 %inc.i.i.i, i32 %21)
  %cmp.i.i.i = icmp ult i32 %inc.i.i.i, %21
  %exitcond.not.i.i.i = icmp eq i32 %inc.i.i.i, %21
  br i1 %exitcond.not.i.i.i, label %for.inc.i.i.i.regmap_reg_in_ranges.exit.i.i_crit_edge, label %for.inc.i.i.i.for.body.i.i.i_crit_edge

for.inc.i.i.i.for.body.i.i.i_crit_edge:           ; preds = %for.inc.i.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body.i.i.i

for.inc.i.i.i.regmap_reg_in_ranges.exit.i.i_crit_edge: ; preds = %for.inc.i.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_reg_in_ranges.exit.i.i

regmap_reg_in_ranges.exit.i.i:                    ; preds = %for.inc.i.i.i.regmap_reg_in_ranges.exit.i.i_crit_edge, %regmap_reg_in_range.exit.i.i.i.regmap_reg_in_ranges.exit.i.i_crit_edge
  %cmp.lcssa.i.i.i = phi i1 [ %cmp.i.i.i, %for.inc.i.i.i.regmap_reg_in_ranges.exit.i.i_crit_edge ], [ %cmp8.i.i.i, %regmap_reg_in_range.exit.i.i.i.regmap_reg_in_ranges.exit.i.i_crit_edge ]
  br i1 %cmp.lcssa.i.i.i, label %regmap_reg_in_ranges.exit.i.i.cleanup_crit_edge, label %regmap_reg_in_ranges.exit.i.i.if.end.i.i_crit_edge

regmap_reg_in_ranges.exit.i.i.if.end.i.i_crit_edge: ; preds = %regmap_reg_in_ranges.exit.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end.i.i

regmap_reg_in_ranges.exit.i.i.cleanup_crit_edge:  ; preds = %regmap_reg_in_ranges.exit.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end.i.i:                                       ; preds = %regmap_reg_in_ranges.exit.i.i.if.end.i.i_crit_edge, %if.then13.i.if.end.i.i_crit_edge
  %n_yes_ranges.i.i = getelementptr inbounds %struct.regmap_access_table, ptr %19, i32 0, i32 1
  %28 = ptrtoint ptr %n_yes_ranges.i.i to i32
  call void @__asan_load4_noabort(i32 %28)
  %29 = load i32, ptr %n_yes_ranges.i.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %29)
  %tobool.not.i.i = icmp eq i32 %29, 0
  br i1 %tobool.not.i.i, label %if.end.i.i.if.end9_crit_edge, label %if.end2.i.i

if.end.i.i.if.end9_crit_edge:                     ; preds = %if.end.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end9

if.end2.i.i:                                      ; preds = %if.end.i.i
  %30 = ptrtoint ptr %19 to i32
  call void @__asan_load4_noabort(i32 %30)
  %31 = load ptr, ptr %19, align 4
  br label %for.body.i15.i.i

for.body.i15.i.i:                                 ; preds = %for.inc.i23.i.i.for.body.i15.i.i_crit_edge, %if.end2.i.i
  %cmp8.i11.i.i = phi i1 [ %cmp.i21.i.i, %for.inc.i23.i.i.for.body.i15.i.i_crit_edge ], [ true, %if.end2.i.i ]
  %i.07.i12.i.i = phi i32 [ %inc.i19.i.i, %for.inc.i23.i.i.for.body.i15.i.i_crit_edge ], [ 0, %if.end2.i.i ]
  %r.05.i13.i.i = phi ptr [ %incdec.ptr.i20.i.i, %for.inc.i23.i.i.for.body.i15.i.i_crit_edge ], [ %31, %if.end2.i.i ]
  %32 = ptrtoint ptr %r.05.i13.i.i to i32
  call void @__asan_load4_noabort(i32 %32)
  %33 = load i32, ptr %r.05.i13.i.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %33, i32 %reg)
  %cmp.not.i.i14.i.i = icmp ugt i32 %33, %reg
  br i1 %cmp.not.i.i14.i.i, label %for.body.i15.i.i.for.inc.i23.i.i_crit_edge, label %regmap_reg_in_range.exit.i18.i.i

for.body.i15.i.i.for.inc.i23.i.i_crit_edge:       ; preds = %for.body.i15.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i23.i.i

regmap_reg_in_range.exit.i18.i.i:                 ; preds = %for.body.i15.i.i
  %range_max.i.i16.i.i = getelementptr inbounds %struct.regmap_range, ptr %r.05.i13.i.i, i32 0, i32 1
  %34 = ptrtoint ptr %range_max.i.i16.i.i to i32
  call void @__asan_load4_noabort(i32 %34)
  %35 = load i32, ptr %range_max.i.i16.i.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %35, i32 %reg)
  %cmp1.i.not.i17.i.i = icmp ult i32 %35, %reg
  br i1 %cmp1.i.not.i17.i.i, label %regmap_reg_in_range.exit.i18.i.i.for.inc.i23.i.i_crit_edge, label %regmap_reg_in_range.exit.i18.i.i.regmap_readable.exit_crit_edge

regmap_reg_in_range.exit.i18.i.i.regmap_readable.exit_crit_edge: ; preds = %regmap_reg_in_range.exit.i18.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_readable.exit

regmap_reg_in_range.exit.i18.i.i.for.inc.i23.i.i_crit_edge: ; preds = %regmap_reg_in_range.exit.i18.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i23.i.i

for.inc.i23.i.i:                                  ; preds = %regmap_reg_in_range.exit.i18.i.i.for.inc.i23.i.i_crit_edge, %for.body.i15.i.i.for.inc.i23.i.i_crit_edge
  %inc.i19.i.i = add nuw i32 %i.07.i12.i.i, 1
  %incdec.ptr.i20.i.i = getelementptr %struct.regmap_range, ptr %r.05.i13.i.i, i32 1
  call void @__sanitizer_cov_trace_cmp4(i32 %inc.i19.i.i, i32 %29)
  %cmp.i21.i.i = icmp ult i32 %inc.i19.i.i, %29
  %exitcond.not.i22.i.i = icmp eq i32 %inc.i19.i.i, %29
  br i1 %exitcond.not.i22.i.i, label %for.inc.i23.i.i.regmap_readable.exit_crit_edge, label %for.inc.i23.i.i.for.body.i15.i.i_crit_edge

for.inc.i23.i.i.for.body.i15.i.i_crit_edge:       ; preds = %for.inc.i23.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body.i15.i.i

for.inc.i23.i.i.regmap_readable.exit_crit_edge:   ; preds = %for.inc.i23.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_readable.exit

regmap_readable.exit:                             ; preds = %for.inc.i23.i.i.regmap_readable.exit_crit_edge, %regmap_reg_in_range.exit.i18.i.i.regmap_readable.exit_crit_edge
  %retval.0.i = phi i1 [ %cmp.i21.i.i, %for.inc.i23.i.i.regmap_readable.exit_crit_edge ], [ %cmp8.i11.i.i, %regmap_reg_in_range.exit.i18.i.i.regmap_readable.exit_crit_edge ]
  br i1 %retval.0.i, label %regmap_readable.exit.if.end9_crit_edge, label %regmap_readable.exit.cleanup_crit_edge

regmap_readable.exit.cleanup_crit_edge:           ; preds = %regmap_readable.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

regmap_readable.exit.if.end9_crit_edge:           ; preds = %regmap_readable.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end9

if.end9:                                          ; preds = %regmap_readable.exit.if.end9_crit_edge, %if.end.i.i.if.end9_crit_edge, %if.end11.i.if.end9_crit_edge, %if.then9.i.if.end9_crit_edge
  %36 = ptrtoint ptr %reg_read.i to i32
  call void @__asan_load4_noabort(i32 %36)
  %37 = load ptr, ptr %reg_read.i, align 4
  %call10 = tail call i32 %37(ptr noundef %cond.i, i32 noundef %reg, ptr noundef %val) #24
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call10)
  %cmp11 = icmp eq i32 %call10, 0
  br i1 %cmp11, label %if.then12, label %if.end9.cleanup_crit_edge

if.end9.cleanup_crit_edge:                        ; preds = %if.end9
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.then12:                                        ; preds = %if.end9
  %38 = ptrtoint ptr %val to i32
  call void @__asan_load4_noabort(i32 %38)
  %39 = load i32, ptr %val, align 4
  tail call fastcc void @trace_regmap_reg_read(ptr noundef %map, i32 noundef %reg, i32 noundef %39)
  %40 = ptrtoint ptr %cache_bypass to i32
  call void @__asan_load1_noabort(i32 %40)
  %41 = load i8, ptr %cache_bypass, align 1, !range !389
  call void @__sanitizer_cov_trace_const_cmp1(i8 0, i8 %41)
  %tobool17.not = icmp eq i8 %41, 0
  br i1 %tobool17.not, label %if.then18, label %if.then12.cleanup_crit_edge

if.then12.cleanup_crit_edge:                      ; preds = %if.then12
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.then18:                                        ; preds = %if.then12
  call void @__sanitizer_cov_trace_pc() #26
  %42 = ptrtoint ptr %val to i32
  call void @__asan_load4_noabort(i32 %42)
  %43 = load i32, ptr %val, align 4
  %call19 = tail call i32 @regcache_write(ptr noundef %map, i32 noundef %reg, i32 noundef %43) #24
  br label %cleanup

cleanup:                                          ; preds = %if.then18, %if.then12.cleanup_crit_edge, %if.end9.cleanup_crit_edge, %regmap_readable.exit.cleanup_crit_edge, %regmap_reg_in_ranges.exit.i.i.cleanup_crit_edge, %if.then9.i.cleanup_crit_edge, %if.end4.i.cleanup_crit_edge, %if.end.i.cleanup_crit_edge, %if.end6.cleanup_crit_edge, %if.end3.cleanup_crit_edge, %if.then.cleanup_crit_edge
  %retval.0 = phi i32 [ 0, %if.then.cleanup_crit_edge ], [ -16, %if.end3.cleanup_crit_edge ], [ -5, %regmap_readable.exit.cleanup_crit_edge ], [ 0, %if.then12.cleanup_crit_edge ], [ 0, %if.then18 ], [ %call10, %if.end9.cleanup_crit_edge ], [ -5, %if.then9.i.cleanup_crit_edge ], [ -5, %if.end6.cleanup_crit_edge ], [ -5, %if.end.i.cleanup_crit_edge ], [ -5, %if.end4.i.cleanup_crit_edge ], [ -5, %regmap_reg_in_ranges.exit.i.i.cleanup_crit_edge ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @regmap_raw_read(ptr noundef %map, i32 noundef %reg, ptr noundef %val, i32 noundef %val_len) #0 align 64 {
entry:
  %v = alloca i32, align 4
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %val_bytes1 = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 7, i32 3
  %0 = ptrtoint ptr %val_bytes1 to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load i32, ptr %val_bytes1, align 4
  %.frozen = freeze i32 %1
  %div = udiv i32 %val_len, %.frozen
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %v) #24
  %2 = ptrtoint ptr %v to i32
  call void @__asan_store4_noabort(i32 %2)
  store i32 -1, ptr %v, align 4, !annotation !388
  %bus = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 8
  %3 = ptrtoint ptr %bus to i32
  call void @__asan_load4_noabort(i32 %3)
  %4 = load ptr, ptr %bus, align 4
  %tobool.not = icmp eq ptr %4, null
  br i1 %tobool.not, label %entry.cleanup65_crit_edge, label %if.end

entry.cleanup65_crit_edge:                        ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup65

if.end:                                           ; preds = %entry
  %5 = mul i32 %div, %.frozen
  %rem.decomposed = sub i32 %val_len, %5
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %rem.decomposed)
  %tobool4.not = icmp eq i32 %rem.decomposed, 0
  br i1 %tobool4.not, label %if.end6, label %if.end.cleanup65_crit_edge

if.end.cleanup65_crit_edge:                       ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup65

if.end6:                                          ; preds = %if.end
  %reg_stride = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 45
  %6 = ptrtoint ptr %reg_stride to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load i32, ptr %reg_stride, align 4
  %sub = add i32 %7, -1
  %and = and i32 %sub, %reg
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and)
  %cmp = icmp ne i32 %and, 0
  call void @__sanitizer_cov_trace_cmp4(i32 %1, i32 %val_len)
  %cmp9 = icmp ugt i32 %1, %val_len
  %or.cond123 = select i1 %cmp, i1 true, i1 %cmp9
  br i1 %or.cond123, label %if.end6.cleanup65_crit_edge, label %if.end11

if.end6.cleanup65_crit_edge:                      ; preds = %if.end6
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup65

if.end11:                                         ; preds = %if.end6
  %lock = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 1
  %8 = ptrtoint ptr %lock to i32
  call void @__asan_load4_noabort(i32 %8)
  %9 = load ptr, ptr %lock, align 4
  %lock_arg = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 3
  %10 = ptrtoint ptr %lock_arg to i32
  call void @__asan_load4_noabort(i32 %10)
  %11 = load ptr, ptr %lock_arg, align 4
  tail call void %9(ptr noundef %11) #24
  %reg_stride_order.i.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 46
  br label %for.body.i

for.cond.i:                                       ; preds = %regmap_get_offset.exit.i
  %inc.i = add nuw i32 %i.06.i, 1
  call void @__sanitizer_cov_trace_cmp4(i32 %inc.i, i32 %div)
  %cmp.i = icmp ult i32 %inc.i, %div
  %exitcond.not.i = icmp eq i32 %inc.i, %div
  br i1 %exitcond.not.i, label %for.cond.i.regmap_volatile_range.exit_crit_edge, label %for.cond.i.for.body.i_crit_edge

for.cond.i.for.body.i_crit_edge:                  ; preds = %for.cond.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body.i

for.cond.i.regmap_volatile_range.exit_crit_edge:  ; preds = %for.cond.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_volatile_range.exit

for.body.i:                                       ; preds = %for.cond.i.for.body.i_crit_edge, %if.end11
  %cmp8.i = phi i1 [ true, %if.end11 ], [ %cmp.i, %for.cond.i.for.body.i_crit_edge ]
  %i.06.i = phi i32 [ 0, %if.end11 ], [ %inc.i, %for.cond.i.for.body.i_crit_edge ]
  %12 = ptrtoint ptr %reg_stride_order.i.i to i32
  call void @__asan_load4_noabort(i32 %12)
  %13 = load i32, ptr %reg_stride_order.i.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %13)
  %cmp.i.i = icmp sgt i32 %13, -1
  br i1 %cmp.i.i, label %if.then.i.i, label %if.else.i.i

if.then.i.i:                                      ; preds = %for.body.i
  call void @__sanitizer_cov_trace_pc() #26
  %shl.i.i = shl i32 %i.06.i, %13
  br label %regmap_get_offset.exit.i

if.else.i.i:                                      ; preds = %for.body.i
  call void @__sanitizer_cov_trace_pc() #26
  %14 = ptrtoint ptr %reg_stride to i32
  call void @__asan_load4_noabort(i32 %14)
  %15 = load i32, ptr %reg_stride, align 4
  %mul.i.i = mul i32 %15, %i.06.i
  br label %regmap_get_offset.exit.i

regmap_get_offset.exit.i:                         ; preds = %if.else.i.i, %if.then.i.i
  %retval.0.i.i = phi i32 [ %shl.i.i, %if.then.i.i ], [ %mul.i.i, %if.else.i.i ]
  %add.i = add i32 %retval.0.i.i, %reg
  %call1.i = tail call zeroext i1 @regmap_volatile(ptr noundef %map, i32 noundef %add.i) #24
  br i1 %call1.i, label %for.cond.i, label %regmap_get_offset.exit.i.regmap_volatile_range.exit_crit_edge

regmap_get_offset.exit.i.regmap_volatile_range.exit_crit_edge: ; preds = %regmap_get_offset.exit.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_volatile_range.exit

regmap_volatile_range.exit:                       ; preds = %regmap_get_offset.exit.i.regmap_volatile_range.exit_crit_edge, %for.cond.i.regmap_volatile_range.exit_crit_edge
  %cmp.lcssa.i = phi i1 [ %cmp.i, %for.cond.i.regmap_volatile_range.exit_crit_edge ], [ %cmp8.i, %regmap_get_offset.exit.i.regmap_volatile_range.exit_crit_edge ]
  br i1 %cmp.lcssa.i, label %lor.lhs.false, label %regmap_volatile_range.exit.if.then15_crit_edge

regmap_volatile_range.exit.if.then15_crit_edge:   ; preds = %regmap_volatile_range.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.then15

lor.lhs.false:                                    ; preds = %regmap_volatile_range.exit
  %cache_bypass = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 54
  %16 = ptrtoint ptr %cache_bypass to i32
  call void @__asan_load1_noabort(i32 %16)
  %17 = load i8, ptr %cache_bypass, align 1, !range !389
  call void @__sanitizer_cov_trace_const_cmp1(i8 0, i8 %17)
  %tobool12.not = icmp eq i8 %17, 0
  br i1 %tobool12.not, label %lor.lhs.false13, label %lor.lhs.false.if.then15_crit_edge

lor.lhs.false.if.then15_crit_edge:                ; preds = %lor.lhs.false
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.then15

lor.lhs.false13:                                  ; preds = %lor.lhs.false
  %cache_type = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 48
  %18 = ptrtoint ptr %cache_type to i32
  call void @__asan_load4_noabort(i32 %18)
  %19 = load i32, ptr %cache_type, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %19)
  %cmp14 = icmp eq i32 %19, 0
  br i1 %cmp14, label %lor.lhs.false13.if.then15_crit_edge, label %for.body50.lr.ph

lor.lhs.false13.if.then15_crit_edge:              ; preds = %lor.lhs.false13
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.then15

for.body50.lr.ph:                                 ; preds = %lor.lhs.false13
  %format_val = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 7, i32 6
  %umax = call i32 @llvm.umax.i32(i32 %div, i32 1)
  br label %for.body50

if.then15:                                        ; preds = %lor.lhs.false13.if.then15_crit_edge, %lor.lhs.false.if.then15_crit_edge, %regmap_volatile_range.exit.if.then15_crit_edge
  %20 = ptrtoint ptr %bus to i32
  call void @__asan_load4_noabort(i32 %20)
  %21 = load ptr, ptr %bus, align 4
  %read = getelementptr inbounds %struct.regmap_bus, ptr %21, i32 0, i32 6
  %22 = ptrtoint ptr %read to i32
  call void @__asan_load4_noabort(i32 %22)
  %23 = load ptr, ptr %read, align 4
  %tobool17.not = icmp eq ptr %23, null
  br i1 %tobool17.not, label %if.then15.out_crit_edge, label %if.end19

if.then15.out_crit_edge:                          ; preds = %if.then15
  call void @__sanitizer_cov_trace_pc() #26
  br label %out

if.end19:                                         ; preds = %if.then15
  %use_single_read = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 63
  %24 = ptrtoint ptr %use_single_read to i32
  call void @__asan_load1_noabort(i32 %24)
  %25 = load i8, ptr %use_single_read, align 4, !range !389
  call void @__sanitizer_cov_trace_const_cmp1(i8 0, i8 %25)
  %tobool20.not = icmp eq i8 %25, 0
  br i1 %tobool20.not, label %if.else, label %if.end19.if.end29_crit_edge

if.end19.if.end29_crit_edge:                      ; preds = %if.end19
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end29

if.else:                                          ; preds = %if.end19
  %max_raw_read = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 66
  %26 = ptrtoint ptr %max_raw_read to i32
  call void @__asan_load4_noabort(i32 %26)
  %27 = load i32, ptr %max_raw_read, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %27)
  %tobool22.not = icmp ne i32 %27, 0
  call void @__sanitizer_cov_trace_cmp4(i32 %27, i32 %val_len)
  %cmp24 = icmp ult i32 %27, %val_len
  %or.cond = and i1 %tobool22.not, %cmp24
  br i1 %or.cond, label %if.then25, label %if.else.for.body.lr.ph_crit_edge

if.else.for.body.lr.ph_crit_edge:                 ; preds = %if.else
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body.lr.ph

if.then25:                                        ; preds = %if.else
  call void @__sanitizer_cov_trace_pc() #26
  %div27 = udiv i32 %27, %1
  br label %if.end29

if.end29:                                         ; preds = %if.then25, %if.end19.if.end29_crit_edge
  %chunk_regs.0 = phi i32 [ %div27, %if.then25 ], [ 1, %if.end19.if.end29_crit_edge ]
  %div30 = udiv i32 %div, %chunk_regs.0
  call void @__sanitizer_cov_trace_cmp4(i32 %chunk_regs.0, i32 %div)
  %cmp31144.not = icmp ugt i32 %chunk_regs.0, %div
  br i1 %cmp31144.not, label %if.end29.for.end_crit_edge, label %if.end29.for.body.lr.ph_crit_edge

if.end29.for.body.lr.ph_crit_edge:                ; preds = %if.end29
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body.lr.ph

if.end29.for.end_crit_edge:                       ; preds = %if.end29
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.end

for.body.lr.ph:                                   ; preds = %if.end29.for.body.lr.ph_crit_edge, %if.else.for.body.lr.ph_crit_edge
  %div30162 = phi i32 [ %div30, %if.end29.for.body.lr.ph_crit_edge ], [ 1, %if.else.for.body.lr.ph_crit_edge ]
  %chunk_regs.0161 = phi i32 [ %chunk_regs.0, %if.end29.for.body.lr.ph_crit_edge ], [ %div, %if.else.for.body.lr.ph_crit_edge ]
  %mul163 = mul i32 %chunk_regs.0161, %1
  %umax155 = call i32 @llvm.umax.i32(i32 %div30162, i32 1)
  br label %for.body

for.body:                                         ; preds = %regmap_get_offset.exit.for.body_crit_edge, %for.body.lr.ph
  %i.0148 = phi i32 [ 0, %for.body.lr.ph ], [ %inc, %regmap_get_offset.exit.for.body_crit_edge ]
  %val_len.addr.0147 = phi i32 [ %val_len, %for.body.lr.ph ], [ %sub37, %regmap_get_offset.exit.for.body_crit_edge ]
  %val.addr.0146 = phi ptr [ %val, %for.body.lr.ph ], [ %add.ptr, %regmap_get_offset.exit.for.body_crit_edge ]
  %reg.addr.0145 = phi i32 [ %reg, %for.body.lr.ph ], [ %add, %regmap_get_offset.exit.for.body_crit_edge ]
  %call32 = tail call fastcc i32 @_regmap_raw_read(ptr noundef %map, i32 noundef %reg.addr.0145, ptr noundef %val.addr.0146, i32 noundef %mul163, i1 noundef zeroext false)
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call32)
  %cmp33.not = icmp eq i32 %call32, 0
  br i1 %cmp33.not, label %if.end35, label %for.body.out_crit_edge

for.body.out_crit_edge:                           ; preds = %for.body
  call void @__sanitizer_cov_trace_pc() #26
  br label %out

if.end35:                                         ; preds = %for.body
  %28 = ptrtoint ptr %reg_stride_order.i.i to i32
  call void @__asan_load4_noabort(i32 %28)
  %29 = load i32, ptr %reg_stride_order.i.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %29)
  %cmp.i124 = icmp sgt i32 %29, -1
  br i1 %cmp.i124, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.end35
  call void @__sanitizer_cov_trace_pc() #26
  %shl.i = shl i32 %chunk_regs.0161, %29
  br label %regmap_get_offset.exit

if.else.i:                                        ; preds = %if.end35
  call void @__sanitizer_cov_trace_pc() #26
  %30 = ptrtoint ptr %reg_stride to i32
  call void @__asan_load4_noabort(i32 %30)
  %31 = load i32, ptr %reg_stride, align 4
  %mul.i = mul i32 %31, %chunk_regs.0161
  br label %regmap_get_offset.exit

regmap_get_offset.exit:                           ; preds = %if.else.i, %if.then.i
  %retval.0.i = phi i32 [ %shl.i, %if.then.i ], [ %mul.i, %if.else.i ]
  %add = add i32 %retval.0.i, %reg.addr.0145
  %add.ptr = getelementptr i8, ptr %val.addr.0146, i32 %mul163
  %sub37 = sub i32 %val_len.addr.0147, %mul163
  %inc = add nuw i32 %i.0148, 1
  %exitcond156.not = icmp eq i32 %inc, %umax155
  br i1 %exitcond156.not, label %regmap_get_offset.exit.for.end_crit_edge, label %regmap_get_offset.exit.for.body_crit_edge

regmap_get_offset.exit.for.body_crit_edge:        ; preds = %regmap_get_offset.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body

regmap_get_offset.exit.for.end_crit_edge:         ; preds = %regmap_get_offset.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.end

for.end:                                          ; preds = %regmap_get_offset.exit.for.end_crit_edge, %if.end29.for.end_crit_edge
  %reg.addr.0.lcssa = phi i32 [ %reg, %if.end29.for.end_crit_edge ], [ %add, %regmap_get_offset.exit.for.end_crit_edge ]
  %val.addr.0.lcssa = phi ptr [ %val, %if.end29.for.end_crit_edge ], [ %add.ptr, %regmap_get_offset.exit.for.end_crit_edge ]
  %val_len.addr.0.lcssa = phi i32 [ %val_len, %if.end29.for.end_crit_edge ], [ %sub37, %regmap_get_offset.exit.for.end_crit_edge ]
  %ret.0.lcssa = phi i32 [ -1, %if.end29.for.end_crit_edge ], [ 0, %regmap_get_offset.exit.for.end_crit_edge ]
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %val_len.addr.0.lcssa)
  %tobool38.not = icmp eq i32 %val_len.addr.0.lcssa, 0
  br i1 %tobool38.not, label %for.end.if.end44_crit_edge, label %if.then39

for.end.if.end44_crit_edge:                       ; preds = %for.end
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end44

if.then39:                                        ; preds = %for.end
  %call40 = tail call fastcc i32 @_regmap_raw_read(ptr noundef %map, i32 noundef %reg.addr.0.lcssa, ptr noundef %val.addr.0.lcssa, i32 noundef %val_len.addr.0.lcssa, i1 noundef zeroext false)
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call40)
  %cmp41.not = icmp eq i32 %call40, 0
  br i1 %cmp41.not, label %if.then39.if.end44_crit_edge, label %if.then39.out_crit_edge

if.then39.out_crit_edge:                          ; preds = %if.then39
  call void @__sanitizer_cov_trace_pc() #26
  br label %out

if.then39.if.end44_crit_edge:                     ; preds = %if.then39
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end44

if.end44:                                         ; preds = %if.then39.if.end44_crit_edge, %for.end.if.end44_crit_edge
  %ret.1 = phi i32 [ 0, %if.then39.if.end44_crit_edge ], [ %ret.0.lcssa, %for.end.if.end44_crit_edge ]
  br label %out

for.body50:                                       ; preds = %if.end56.for.body50_crit_edge, %for.body50.lr.ph
  %i.1141 = phi i32 [ 0, %for.body50.lr.ph ], [ %inc61, %if.end56.for.body50_crit_edge ]
  %32 = ptrtoint ptr %reg_stride_order.i.i to i32
  call void @__asan_load4_noabort(i32 %32)
  %33 = load i32, ptr %reg_stride_order.i.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %33)
  %cmp.i126 = icmp sgt i32 %33, -1
  br i1 %cmp.i126, label %if.then.i128, label %if.else.i131

if.then.i128:                                     ; preds = %for.body50
  call void @__sanitizer_cov_trace_pc() #26
  %shl.i127 = shl i32 %i.1141, %33
  br label %regmap_get_offset.exit133

if.else.i131:                                     ; preds = %for.body50
  call void @__sanitizer_cov_trace_pc() #26
  %34 = ptrtoint ptr %reg_stride to i32
  call void @__asan_load4_noabort(i32 %34)
  %35 = load i32, ptr %reg_stride, align 4
  %mul.i130 = mul i32 %35, %i.1141
  br label %regmap_get_offset.exit133

regmap_get_offset.exit133:                        ; preds = %if.else.i131, %if.then.i128
  %retval.0.i132 = phi i32 [ %shl.i127, %if.then.i128 ], [ %mul.i130, %if.else.i131 ]
  %add52 = add i32 %retval.0.i132, %reg
  %call53 = call fastcc i32 @_regmap_read(ptr noundef %map, i32 noundef %add52, ptr noundef nonnull %v)
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call53)
  %cmp54.not = icmp eq i32 %call53, 0
  br i1 %cmp54.not, label %if.end56, label %regmap_get_offset.exit133.out_crit_edge

regmap_get_offset.exit133.out_crit_edge:          ; preds = %regmap_get_offset.exit133
  call void @__sanitizer_cov_trace_pc() #26
  br label %out

if.end56:                                         ; preds = %regmap_get_offset.exit133
  %36 = ptrtoint ptr %format_val to i32
  call void @__asan_load4_noabort(i32 %36)
  %37 = load ptr, ptr %format_val, align 4
  %mul58 = mul i32 %i.1141, %1
  %add.ptr59 = getelementptr i8, ptr %val, i32 %mul58
  %38 = ptrtoint ptr %v to i32
  call void @__asan_load4_noabort(i32 %38)
  %39 = load i32, ptr %v, align 4
  call void %37(ptr noundef %add.ptr59, i32 noundef %39, i32 noundef 0) #24
  %inc61 = add nuw i32 %i.1141, 1
  %exitcond.not = icmp eq i32 %inc61, %umax
  br i1 %exitcond.not, label %if.end56.out_crit_edge, label %if.end56.for.body50_crit_edge

if.end56.for.body50_crit_edge:                    ; preds = %if.end56
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body50

if.end56.out_crit_edge:                           ; preds = %if.end56
  call void @__sanitizer_cov_trace_pc() #26
  br label %out

out:                                              ; preds = %if.end56.out_crit_edge, %regmap_get_offset.exit133.out_crit_edge, %if.end44, %if.then39.out_crit_edge, %for.body.out_crit_edge, %if.then15.out_crit_edge
  %ret.4 = phi i32 [ %ret.1, %if.end44 ], [ -524, %if.then15.out_crit_edge ], [ %call40, %if.then39.out_crit_edge ], [ %call32, %for.body.out_crit_edge ], [ %call53, %regmap_get_offset.exit133.out_crit_edge ], [ 0, %if.end56.out_crit_edge ]
  %unlock = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 2
  %40 = ptrtoint ptr %unlock to i32
  call void @__asan_load4_noabort(i32 %40)
  %41 = load ptr, ptr %unlock, align 4
  %42 = ptrtoint ptr %lock_arg to i32
  call void @__asan_load4_noabort(i32 %42)
  %43 = load ptr, ptr %lock_arg, align 4
  call void %41(ptr noundef %43) #24
  br label %cleanup65

cleanup65:                                        ; preds = %out, %if.end6.cleanup65_crit_edge, %if.end.cleanup65_crit_edge, %entry.cleanup65_crit_edge
  %retval.0 = phi i32 [ %ret.4, %out ], [ -22, %entry.cleanup65_crit_edge ], [ -22, %if.end.cleanup65_crit_edge ], [ -22, %if.end6.cleanup65_crit_edge ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %v) #24
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal fastcc i32 @_regmap_raw_read(ptr noundef %map, i32 noundef %reg, ptr noundef %val, i32 noundef %val_len, i1 noundef zeroext %noinc) unnamed_addr #0 align 64 {
entry:
  %reg.addr = alloca i32, align 4
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = ptrtoint ptr %reg.addr to i32
  call void @__asan_store4_noabort(i32 %0)
  store i32 %reg, ptr %reg.addr, align 4
  %bus = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 8
  %1 = ptrtoint ptr %bus to i32
  call void @__asan_load4_noabort(i32 %1)
  %2 = load ptr, ptr %bus, align 4
  %tobool.not = icmp eq ptr %2, null
  br i1 %tobool.not, label %if.end, label %entry.lor.lhs.false_crit_edge, !prof !387

entry.lor.lhs.false_crit_edge:                    ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %lor.lhs.false

if.end:                                           ; preds = %entry
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.15, i32 noundef 2663, i32 noundef 9, ptr noundef null) #24
  %3 = ptrtoint ptr %bus to i32
  call void @__asan_load4_noabort(i32 %3)
  %.pr = load ptr, ptr %bus, align 4
  %tobool22.not = icmp eq ptr %.pr, null
  br i1 %tobool22.not, label %if.end.cleanup_crit_edge, label %if.end.lor.lhs.false_crit_edge

if.end.lor.lhs.false_crit_edge:                   ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #26
  br label %lor.lhs.false

if.end.cleanup_crit_edge:                         ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

lor.lhs.false:                                    ; preds = %if.end.lor.lhs.false_crit_edge, %entry.lor.lhs.false_crit_edge
  %4 = phi ptr [ %.pr, %if.end.lor.lhs.false_crit_edge ], [ %2, %entry.lor.lhs.false_crit_edge ]
  %read = getelementptr inbounds %struct.regmap_bus, ptr %4, i32 0, i32 6
  %5 = ptrtoint ptr %read to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load ptr, ptr %read, align 4
  %tobool24.not = icmp eq ptr %6, null
  br i1 %tobool24.not, label %lor.lhs.false.cleanup_crit_edge, label %if.end26

lor.lhs.false.cleanup_crit_edge:                  ; preds = %lor.lhs.false
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end26:                                         ; preds = %lor.lhs.false
  %range_tree.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 68
  %7 = ptrtoint ptr %range_tree.i to i32
  call void @__asan_load4_noabort(i32 %7)
  %node.015.i = load ptr, ptr %range_tree.i, align 4
  %tobool.not16.i = icmp eq ptr %node.015.i, null
  br i1 %tobool.not16.i, label %if.end26.if.end33_crit_edge, label %if.end26.while.body.i_crit_edge

if.end26.while.body.i_crit_edge:                  ; preds = %if.end26
  br label %while.body.i

if.end26.if.end33_crit_edge:                      ; preds = %if.end26
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end33

while.body.i:                                     ; preds = %cleanup.i.while.body.i_crit_edge, %if.end26.while.body.i_crit_edge
  %node.017.i = phi ptr [ %node.0.i, %cleanup.i.while.body.i_crit_edge ], [ %node.015.i, %if.end26.while.body.i_crit_edge ]
  %range_min.i = getelementptr inbounds %struct.regmap_range_node, ptr %node.017.i, i32 0, i32 3
  %8 = ptrtoint ptr %range_min.i to i32
  call void @__asan_load4_noabort(i32 %8)
  %9 = load i32, ptr %range_min.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %9, i32 %reg)
  %cmp.i = icmp ugt i32 %9, %reg
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %while.body.i
  call void @__sanitizer_cov_trace_pc() #26
  %rb_left.i = getelementptr inbounds %struct.rb_node, ptr %node.017.i, i32 0, i32 2
  br label %cleanup.i

if.else.i:                                        ; preds = %while.body.i
  %range_max.i = getelementptr inbounds %struct.regmap_range_node, ptr %node.017.i, i32 0, i32 4
  %10 = ptrtoint ptr %range_max.i to i32
  call void @__asan_load4_noabort(i32 %10)
  %11 = load i32, ptr %range_max.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %11, i32 %reg)
  %cmp1.i = icmp ult i32 %11, %reg
  br i1 %cmp1.i, label %if.then2.i, label %if.then28

if.then2.i:                                       ; preds = %if.else.i
  call void @__sanitizer_cov_trace_pc() #26
  %rb_right.i = getelementptr inbounds %struct.rb_node, ptr %node.017.i, i32 0, i32 1
  br label %cleanup.i

cleanup.i:                                        ; preds = %if.then2.i, %if.then.i
  %node.1.in.i = phi ptr [ %rb_left.i, %if.then.i ], [ %rb_right.i, %if.then2.i ]
  %12 = ptrtoint ptr %node.1.in.i to i32
  call void @__asan_load4_noabort(i32 %12)
  %node.0.i = load ptr, ptr %node.1.in.i, align 4
  %tobool.not.i = icmp eq ptr %node.0.i, null
  br i1 %tobool.not.i, label %cleanup.i.if.end33_crit_edge, label %cleanup.i.while.body.i_crit_edge

cleanup.i.while.body.i_crit_edge:                 ; preds = %cleanup.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %while.body.i

cleanup.i.if.end33_crit_edge:                     ; preds = %cleanup.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end33

if.then28:                                        ; preds = %if.else.i
  br i1 %noinc, label %if.then28.cond.end_crit_edge, label %cond.false

if.then28.cond.end_crit_edge:                     ; preds = %if.then28
  call void @__sanitizer_cov_trace_pc() #26
  br label %cond.end

cond.false:                                       ; preds = %if.then28
  call void @__sanitizer_cov_trace_pc() #26
  %val_bytes = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 7, i32 3
  %13 = ptrtoint ptr %val_bytes to i32
  call void @__asan_load4_noabort(i32 %13)
  %14 = load i32, ptr %val_bytes, align 4
  %div = udiv i32 %val_len, %14
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %if.then28.cond.end_crit_edge
  %cond = phi i32 [ %div, %cond.false ], [ 1, %if.then28.cond.end_crit_edge ]
  %call30 = call fastcc i32 @_regmap_select_page(ptr noundef %map, ptr noundef nonnull %reg.addr, ptr noundef nonnull %node.017.i, i32 noundef %cond)
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call30)
  %cmp.not = icmp eq i32 %call30, 0
  br i1 %cmp.not, label %cond.end.if.end33_crit_edge, label %cond.end.cleanup_crit_edge

cond.end.cleanup_crit_edge:                       ; preds = %cond.end
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

cond.end.if.end33_crit_edge:                      ; preds = %cond.end
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end33

if.end33:                                         ; preds = %cond.end.if.end33_crit_edge, %cleanup.i.if.end33_crit_edge, %if.end26.if.end33_crit_edge
  %format_reg = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 7, i32 5
  %15 = ptrtoint ptr %format_reg to i32
  call void @__asan_load4_noabort(i32 %15)
  %16 = load ptr, ptr %format_reg, align 4
  %work_buf = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 6
  %17 = ptrtoint ptr %work_buf to i32
  call void @__asan_load4_noabort(i32 %17)
  %18 = load ptr, ptr %work_buf, align 4
  %19 = ptrtoint ptr %reg.addr to i32
  call void @__asan_load4_noabort(i32 %19)
  %20 = load i32, ptr %reg.addr, align 4
  %reg_shift = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 44
  %21 = ptrtoint ptr %reg_shift to i32
  call void @__asan_load4_noabort(i32 %21)
  %22 = load i32, ptr %reg_shift, align 4
  tail call void %16(ptr noundef %18, i32 noundef %20, i32 noundef %22) #24
  %reg_bytes = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 7, i32 1
  %23 = ptrtoint ptr %reg_bytes to i32
  call void @__asan_load4_noabort(i32 %23)
  %24 = load i32, ptr %reg_bytes, align 4
  %read_flag_mask = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 42
  %25 = ptrtoint ptr %read_flag_mask to i32
  call void @__asan_load4_noabort(i32 %25)
  %26 = load i32, ptr %read_flag_mask, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %26)
  %tobool.not.i77 = icmp eq i32 %26, 0
  br i1 %tobool.not.i77, label %if.end33.regmap_set_work_buf_flag_mask.exit_crit_edge, label %lor.lhs.false.i

if.end33.regmap_set_work_buf_flag_mask.exit_crit_edge: ; preds = %if.end33
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_set_work_buf_flag_mask.exit

lor.lhs.false.i:                                  ; preds = %if.end33
  %27 = ptrtoint ptr %work_buf to i32
  call void @__asan_load4_noabort(i32 %27)
  %28 = load ptr, ptr %work_buf, align 4
  %tobool1.not.i = icmp ne ptr %28, null
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %24)
  %cmp10.i = icmp sgt i32 %24, 0
  %or.cond.i = and i1 %cmp10.i, %tobool1.not.i
  br i1 %or.cond.i, label %lor.lhs.false.i.for.body.i_crit_edge, label %lor.lhs.false.i.regmap_set_work_buf_flag_mask.exit_crit_edge

lor.lhs.false.i.regmap_set_work_buf_flag_mask.exit_crit_edge: ; preds = %lor.lhs.false.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_set_work_buf_flag_mask.exit

lor.lhs.false.i.for.body.i_crit_edge:             ; preds = %lor.lhs.false.i
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i.for.body.i_crit_edge, %lor.lhs.false.i.for.body.i_crit_edge
  %i.011.i = phi i32 [ %inc.i, %for.body.i.for.body.i_crit_edge ], [ 0, %lor.lhs.false.i.for.body.i_crit_edge ]
  %mul.i = shl i32 %i.011.i, 3
  %shr.i = lshr i32 %26, %mul.i
  %arrayidx.i = getelementptr i8, ptr %28, i32 %i.011.i
  %29 = ptrtoint ptr %arrayidx.i to i32
  call void @__asan_load1_noabort(i32 %29)
  %30 = load i8, ptr %arrayidx.i, align 1
  %31 = trunc i32 %shr.i to i8
  %conv3.i = or i8 %30, %31
  store i8 %conv3.i, ptr %arrayidx.i, align 1
  %inc.i = add nuw nsw i32 %i.011.i, 1
  %exitcond.not.i = icmp eq i32 %inc.i, %24
  br i1 %exitcond.not.i, label %for.body.i.regmap_set_work_buf_flag_mask.exit_crit_edge, label %for.body.i.for.body.i_crit_edge

for.body.i.for.body.i_crit_edge:                  ; preds = %for.body.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body.i

for.body.i.regmap_set_work_buf_flag_mask.exit_crit_edge: ; preds = %for.body.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_set_work_buf_flag_mask.exit

regmap_set_work_buf_flag_mask.exit:               ; preds = %for.body.i.regmap_set_work_buf_flag_mask.exit_crit_edge, %lor.lhs.false.i.regmap_set_work_buf_flag_mask.exit_crit_edge, %if.end33.regmap_set_work_buf_flag_mask.exit_crit_edge
  %val_bytes37 = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 7, i32 3
  %32 = ptrtoint ptr %val_bytes37 to i32
  call void @__asan_load4_noabort(i32 %32)
  %33 = load i32, ptr %val_bytes37, align 4
  %div38 = udiv i32 %val_len, %33
  tail call fastcc void @trace_regmap_hw_read_start(ptr noundef %map, i32 noundef %20, i32 noundef %div38)
  %34 = ptrtoint ptr %bus to i32
  call void @__asan_load4_noabort(i32 %34)
  %35 = load ptr, ptr %bus, align 4
  %read40 = getelementptr inbounds %struct.regmap_bus, ptr %35, i32 0, i32 6
  %36 = ptrtoint ptr %read40 to i32
  call void @__asan_load4_noabort(i32 %36)
  %37 = load ptr, ptr %read40, align 4
  %bus_context = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 9
  %38 = ptrtoint ptr %bus_context to i32
  call void @__asan_load4_noabort(i32 %38)
  %39 = load ptr, ptr %bus_context, align 4
  %40 = ptrtoint ptr %work_buf to i32
  call void @__asan_load4_noabort(i32 %40)
  %41 = load ptr, ptr %work_buf, align 4
  %42 = ptrtoint ptr %reg_bytes to i32
  call void @__asan_load4_noabort(i32 %42)
  %43 = load i32, ptr %reg_bytes, align 4
  %pad_bytes = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 7, i32 2
  %44 = ptrtoint ptr %pad_bytes to i32
  call void @__asan_load4_noabort(i32 %44)
  %45 = load i32, ptr %pad_bytes, align 4
  %add = add i32 %45, %43
  %call45 = tail call i32 %37(ptr noundef %39, ptr noundef %41, i32 noundef %add, ptr noundef %val, i32 noundef %val_len) #24
  %46 = ptrtoint ptr %val_bytes37 to i32
  call void @__asan_load4_noabort(i32 %46)
  %47 = load i32, ptr %val_bytes37, align 4
  %div48 = udiv i32 %val_len, %47
  tail call fastcc void @trace_regmap_hw_read_done(ptr noundef %map, i32 noundef %20, i32 noundef %div48)
  br label %cleanup

cleanup:                                          ; preds = %regmap_set_work_buf_flag_mask.exit, %cond.end.cleanup_crit_edge, %lor.lhs.false.cleanup_crit_edge, %if.end.cleanup_crit_edge
  %retval.0 = phi i32 [ %call45, %regmap_set_work_buf_flag_mask.exit ], [ -22, %lor.lhs.false.cleanup_crit_edge ], [ -22, %if.end.cleanup_crit_edge ], [ %call30, %cond.end.cleanup_crit_edge ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @regmap_noinc_read(ptr noundef %map, i32 noundef %reg, ptr noundef %val, i32 noundef %val_len) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %bus = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 8
  %0 = ptrtoint ptr %bus to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %bus, align 4
  %tobool.not = icmp eq ptr %1, null
  br i1 %tobool.not, label %entry.cleanup_crit_edge, label %if.end

entry.cleanup_crit_edge:                          ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end:                                           ; preds = %entry
  %read = getelementptr inbounds %struct.regmap_bus, ptr %1, i32 0, i32 6
  %2 = ptrtoint ptr %read to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load ptr, ptr %read, align 4
  %tobool2.not = icmp eq ptr %3, null
  br i1 %tobool2.not, label %if.end.cleanup_crit_edge, label %if.end4

if.end.cleanup_crit_edge:                         ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %val_bytes = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 7, i32 3
  %4 = ptrtoint ptr %val_bytes to i32
  call void @__asan_load4_noabort(i32 %4)
  %5 = load i32, ptr %val_bytes, align 4
  %rem = urem i32 %val_len, %5
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %rem)
  %tobool5.not = icmp eq i32 %rem, 0
  br i1 %tobool5.not, label %if.end7, label %if.end4.cleanup_crit_edge

if.end4.cleanup_crit_edge:                        ; preds = %if.end4
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %reg_stride = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 45
  %6 = ptrtoint ptr %reg_stride to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load i32, ptr %reg_stride, align 4
  %sub = add i32 %7, -1
  %and = and i32 %sub, %reg
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and)
  %cmp = icmp ne i32 %and, 0
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %val_len)
  %cmp10 = icmp eq i32 %val_len, 0
  %or.cond56 = or i1 %cmp10, %cmp
  br i1 %or.cond56, label %if.end7.cleanup_crit_edge, label %if.end12

if.end7.cleanup_crit_edge:                        ; preds = %if.end7
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end12:                                         ; preds = %if.end7
  %lock = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 1
  %8 = ptrtoint ptr %lock to i32
  call void @__asan_load4_noabort(i32 %8)
  %9 = load ptr, ptr %lock, align 4
  %lock_arg = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 3
  %10 = ptrtoint ptr %lock_arg to i32
  call void @__asan_load4_noabort(i32 %10)
  %11 = load ptr, ptr %lock_arg, align 4
  tail call void %9(ptr noundef %11) #24
  %call = tail call zeroext i1 @regmap_volatile(ptr noundef %map, i32 noundef %reg)
  br i1 %call, label %lor.lhs.false, label %if.end12.out_unlock_crit_edge

if.end12.out_unlock_crit_edge:                    ; preds = %if.end12
  call void @__sanitizer_cov_trace_pc() #26
  br label %out_unlock

lor.lhs.false:                                    ; preds = %if.end12
  %readable_noinc_reg.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 31
  %12 = ptrtoint ptr %readable_noinc_reg.i to i32
  call void @__asan_load4_noabort(i32 %12)
  %13 = load ptr, ptr %readable_noinc_reg.i, align 4
  %tobool.not.i = icmp eq ptr %13, null
  br i1 %tobool.not.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %lor.lhs.false
  %dev.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 5
  %14 = ptrtoint ptr %dev.i to i32
  call void @__asan_load4_noabort(i32 %14)
  %15 = load ptr, ptr %dev.i, align 4
  %call.i = tail call zeroext i1 %13(ptr noundef %15, i32 noundef %reg) #24
  br i1 %call.i, label %if.then.i.while.body.preheader_crit_edge, label %if.then.i.out_unlock_crit_edge

if.then.i.out_unlock_crit_edge:                   ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %out_unlock

if.then.i.while.body.preheader_crit_edge:         ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %while.body.preheader

if.end.i:                                         ; preds = %lor.lhs.false
  %rd_noinc_table.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 37
  %16 = ptrtoint ptr %rd_noinc_table.i to i32
  call void @__asan_load4_noabort(i32 %16)
  %17 = load ptr, ptr %rd_noinc_table.i, align 4
  %tobool2.not.i = icmp eq ptr %17, null
  br i1 %tobool2.not.i, label %if.end.i.while.body.preheader_crit_edge, label %if.then3.i

if.end.i.while.body.preheader_crit_edge:          ; preds = %if.end.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %while.body.preheader

if.then3.i:                                       ; preds = %if.end.i
  %n_no_ranges.i.i = getelementptr inbounds %struct.regmap_access_table, ptr %17, i32 0, i32 3
  %18 = ptrtoint ptr %n_no_ranges.i.i to i32
  call void @__asan_load4_noabort(i32 %18)
  %19 = load i32, ptr %n_no_ranges.i.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %19)
  %cmp4.not.i.i.i = icmp eq i32 %19, 0
  br i1 %cmp4.not.i.i.i, label %if.then3.i.if.end.i.i_crit_edge, label %for.body.i.preheader.i.i

if.then3.i.if.end.i.i_crit_edge:                  ; preds = %if.then3.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end.i.i

for.body.i.preheader.i.i:                         ; preds = %if.then3.i
  %no_ranges.i.i = getelementptr inbounds %struct.regmap_access_table, ptr %17, i32 0, i32 2
  %20 = ptrtoint ptr %no_ranges.i.i to i32
  call void @__asan_load4_noabort(i32 %20)
  %21 = load ptr, ptr %no_ranges.i.i, align 4
  br label %for.body.i.i.i

for.body.i.i.i:                                   ; preds = %for.inc.i.i.i.for.body.i.i.i_crit_edge, %for.body.i.preheader.i.i
  %cmp8.i.i.i = phi i1 [ %cmp.i.i.i, %for.inc.i.i.i.for.body.i.i.i_crit_edge ], [ true, %for.body.i.preheader.i.i ]
  %i.07.i.i.i = phi i32 [ %inc.i.i.i, %for.inc.i.i.i.for.body.i.i.i_crit_edge ], [ 0, %for.body.i.preheader.i.i ]
  %r.05.i.i.i = phi ptr [ %incdec.ptr.i.i.i, %for.inc.i.i.i.for.body.i.i.i_crit_edge ], [ %21, %for.body.i.preheader.i.i ]
  %22 = ptrtoint ptr %r.05.i.i.i to i32
  call void @__asan_load4_noabort(i32 %22)
  %23 = load i32, ptr %r.05.i.i.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %23, i32 %reg)
  %cmp.not.i.i.i.i = icmp ugt i32 %23, %reg
  br i1 %cmp.not.i.i.i.i, label %for.body.i.i.i.for.inc.i.i.i_crit_edge, label %regmap_reg_in_range.exit.i.i.i

for.body.i.i.i.for.inc.i.i.i_crit_edge:           ; preds = %for.body.i.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i.i.i

regmap_reg_in_range.exit.i.i.i:                   ; preds = %for.body.i.i.i
  %range_max.i.i.i.i = getelementptr inbounds %struct.regmap_range, ptr %r.05.i.i.i, i32 0, i32 1
  %24 = ptrtoint ptr %range_max.i.i.i.i to i32
  call void @__asan_load4_noabort(i32 %24)
  %25 = load i32, ptr %range_max.i.i.i.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %25, i32 %reg)
  %cmp1.i.not.i.i.i = icmp ult i32 %25, %reg
  br i1 %cmp1.i.not.i.i.i, label %regmap_reg_in_range.exit.i.i.i.for.inc.i.i.i_crit_edge, label %regmap_reg_in_range.exit.i.i.i.regmap_reg_in_ranges.exit.i.i_crit_edge

regmap_reg_in_range.exit.i.i.i.regmap_reg_in_ranges.exit.i.i_crit_edge: ; preds = %regmap_reg_in_range.exit.i.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_reg_in_ranges.exit.i.i

regmap_reg_in_range.exit.i.i.i.for.inc.i.i.i_crit_edge: ; preds = %regmap_reg_in_range.exit.i.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i.i.i

for.inc.i.i.i:                                    ; preds = %regmap_reg_in_range.exit.i.i.i.for.inc.i.i.i_crit_edge, %for.body.i.i.i.for.inc.i.i.i_crit_edge
  %inc.i.i.i = add nuw i32 %i.07.i.i.i, 1
  %incdec.ptr.i.i.i = getelementptr %struct.regmap_range, ptr %r.05.i.i.i, i32 1
  call void @__sanitizer_cov_trace_cmp4(i32 %inc.i.i.i, i32 %19)
  %cmp.i.i.i = icmp ult i32 %inc.i.i.i, %19
  %exitcond.not.i.i.i = icmp eq i32 %inc.i.i.i, %19
  br i1 %exitcond.not.i.i.i, label %for.inc.i.i.i.regmap_reg_in_ranges.exit.i.i_crit_edge, label %for.inc.i.i.i.for.body.i.i.i_crit_edge

for.inc.i.i.i.for.body.i.i.i_crit_edge:           ; preds = %for.inc.i.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body.i.i.i

for.inc.i.i.i.regmap_reg_in_ranges.exit.i.i_crit_edge: ; preds = %for.inc.i.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_reg_in_ranges.exit.i.i

regmap_reg_in_ranges.exit.i.i:                    ; preds = %for.inc.i.i.i.regmap_reg_in_ranges.exit.i.i_crit_edge, %regmap_reg_in_range.exit.i.i.i.regmap_reg_in_ranges.exit.i.i_crit_edge
  %cmp.lcssa.i.i.i = phi i1 [ %cmp.i.i.i, %for.inc.i.i.i.regmap_reg_in_ranges.exit.i.i_crit_edge ], [ %cmp8.i.i.i, %regmap_reg_in_range.exit.i.i.i.regmap_reg_in_ranges.exit.i.i_crit_edge ]
  br i1 %cmp.lcssa.i.i.i, label %regmap_reg_in_ranges.exit.i.i.out_unlock_crit_edge, label %regmap_reg_in_ranges.exit.i.i.if.end.i.i_crit_edge

regmap_reg_in_ranges.exit.i.i.if.end.i.i_crit_edge: ; preds = %regmap_reg_in_ranges.exit.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end.i.i

regmap_reg_in_ranges.exit.i.i.out_unlock_crit_edge: ; preds = %regmap_reg_in_ranges.exit.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %out_unlock

if.end.i.i:                                       ; preds = %regmap_reg_in_ranges.exit.i.i.if.end.i.i_crit_edge, %if.then3.i.if.end.i.i_crit_edge
  %n_yes_ranges.i.i = getelementptr inbounds %struct.regmap_access_table, ptr %17, i32 0, i32 1
  %26 = ptrtoint ptr %n_yes_ranges.i.i to i32
  call void @__asan_load4_noabort(i32 %26)
  %27 = load i32, ptr %n_yes_ranges.i.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %27)
  %tobool.not.i.i = icmp eq i32 %27, 0
  br i1 %tobool.not.i.i, label %if.end.i.i.while.body.preheader_crit_edge, label %if.end2.i.i

if.end.i.i.while.body.preheader_crit_edge:        ; preds = %if.end.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %while.body.preheader

if.end2.i.i:                                      ; preds = %if.end.i.i
  %28 = ptrtoint ptr %17 to i32
  call void @__asan_load4_noabort(i32 %28)
  %29 = load ptr, ptr %17, align 4
  br label %for.body.i15.i.i

for.body.i15.i.i:                                 ; preds = %for.inc.i23.i.i.for.body.i15.i.i_crit_edge, %if.end2.i.i
  %cmp8.i11.i.i = phi i1 [ %cmp.i21.i.i, %for.inc.i23.i.i.for.body.i15.i.i_crit_edge ], [ true, %if.end2.i.i ]
  %i.07.i12.i.i = phi i32 [ %inc.i19.i.i, %for.inc.i23.i.i.for.body.i15.i.i_crit_edge ], [ 0, %if.end2.i.i ]
  %r.05.i13.i.i = phi ptr [ %incdec.ptr.i20.i.i, %for.inc.i23.i.i.for.body.i15.i.i_crit_edge ], [ %29, %if.end2.i.i ]
  %30 = ptrtoint ptr %r.05.i13.i.i to i32
  call void @__asan_load4_noabort(i32 %30)
  %31 = load i32, ptr %r.05.i13.i.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %31, i32 %reg)
  %cmp.not.i.i14.i.i = icmp ugt i32 %31, %reg
  br i1 %cmp.not.i.i14.i.i, label %for.body.i15.i.i.for.inc.i23.i.i_crit_edge, label %regmap_reg_in_range.exit.i18.i.i

for.body.i15.i.i.for.inc.i23.i.i_crit_edge:       ; preds = %for.body.i15.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i23.i.i

regmap_reg_in_range.exit.i18.i.i:                 ; preds = %for.body.i15.i.i
  %range_max.i.i16.i.i = getelementptr inbounds %struct.regmap_range, ptr %r.05.i13.i.i, i32 0, i32 1
  %32 = ptrtoint ptr %range_max.i.i16.i.i to i32
  call void @__asan_load4_noabort(i32 %32)
  %33 = load i32, ptr %range_max.i.i16.i.i, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %33, i32 %reg)
  %cmp1.i.not.i17.i.i = icmp ult i32 %33, %reg
  br i1 %cmp1.i.not.i17.i.i, label %regmap_reg_in_range.exit.i18.i.i.for.inc.i23.i.i_crit_edge, label %regmap_reg_in_range.exit.i18.i.i.regmap_readable_noinc.exit_crit_edge

regmap_reg_in_range.exit.i18.i.i.regmap_readable_noinc.exit_crit_edge: ; preds = %regmap_reg_in_range.exit.i18.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_readable_noinc.exit

regmap_reg_in_range.exit.i18.i.i.for.inc.i23.i.i_crit_edge: ; preds = %regmap_reg_in_range.exit.i18.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.inc.i23.i.i

for.inc.i23.i.i:                                  ; preds = %regmap_reg_in_range.exit.i18.i.i.for.inc.i23.i.i_crit_edge, %for.body.i15.i.i.for.inc.i23.i.i_crit_edge
  %inc.i19.i.i = add nuw i32 %i.07.i12.i.i, 1
  %incdec.ptr.i20.i.i = getelementptr %struct.regmap_range, ptr %r.05.i13.i.i, i32 1
  call void @__sanitizer_cov_trace_cmp4(i32 %inc.i19.i.i, i32 %27)
  %cmp.i21.i.i = icmp ult i32 %inc.i19.i.i, %27
  %exitcond.not.i22.i.i = icmp eq i32 %inc.i19.i.i, %27
  br i1 %exitcond.not.i22.i.i, label %for.inc.i23.i.i.regmap_readable_noinc.exit_crit_edge, label %for.inc.i23.i.i.for.body.i15.i.i_crit_edge

for.inc.i23.i.i.for.body.i15.i.i_crit_edge:       ; preds = %for.inc.i23.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body.i15.i.i

for.inc.i23.i.i.regmap_readable_noinc.exit_crit_edge: ; preds = %for.inc.i23.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_readable_noinc.exit

regmap_readable_noinc.exit:                       ; preds = %for.inc.i23.i.i.regmap_readable_noinc.exit_crit_edge, %regmap_reg_in_range.exit.i18.i.i.regmap_readable_noinc.exit_crit_edge
  %retval.0.i = phi i1 [ %cmp.i21.i.i, %for.inc.i23.i.i.regmap_readable_noinc.exit_crit_edge ], [ %cmp8.i11.i.i, %regmap_reg_in_range.exit.i18.i.i.regmap_readable_noinc.exit_crit_edge ]
  br i1 %retval.0.i, label %regmap_readable_noinc.exit.while.body.preheader_crit_edge, label %regmap_readable_noinc.exit.out_unlock_crit_edge

regmap_readable_noinc.exit.out_unlock_crit_edge:  ; preds = %regmap_readable_noinc.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %out_unlock

regmap_readable_noinc.exit.while.body.preheader_crit_edge: ; preds = %regmap_readable_noinc.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %while.body.preheader

while.body.preheader:                             ; preds = %regmap_readable_noinc.exit.while.body.preheader_crit_edge, %if.end.i.i.while.body.preheader_crit_edge, %if.end.i.while.body.preheader_crit_edge, %if.then.i.while.body.preheader_crit_edge
  %max_raw_read = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 66
  br label %while.body

while.body:                                       ; preds = %if.end26.while.body_crit_edge, %while.body.preheader
  %val_len.addr.061 = phi i32 [ %sub27, %if.end26.while.body_crit_edge ], [ %val_len, %while.body.preheader ]
  %val.addr.060 = phi ptr [ %add.ptr, %if.end26.while.body_crit_edge ], [ %val, %while.body.preheader ]
  %34 = ptrtoint ptr %max_raw_read to i32
  call void @__asan_load4_noabort(i32 %34)
  %35 = load i32, ptr %max_raw_read, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %35)
  %tobool17.not = icmp ne i32 %35, 0
  call void @__sanitizer_cov_trace_cmp4(i32 %35, i32 %val_len.addr.061)
  %cmp19 = icmp ult i32 %35, %val_len.addr.061
  %or.cond = select i1 %tobool17.not, i1 %cmp19, i1 false
  %read_len.0 = select i1 %or.cond, i32 %35, i32 %val_len.addr.061
  %call23 = tail call fastcc i32 @_regmap_raw_read(ptr noundef %map, i32 noundef %reg, ptr noundef %val.addr.060, i32 noundef %read_len.0, i1 noundef zeroext true)
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call23)
  %tobool24.not = icmp eq i32 %call23, 0
  br i1 %tobool24.not, label %if.end26, label %while.body.out_unlock_crit_edge

while.body.out_unlock_crit_edge:                  ; preds = %while.body
  call void @__sanitizer_cov_trace_pc() #26
  br label %out_unlock

if.end26:                                         ; preds = %while.body
  %add.ptr = getelementptr i8, ptr %val.addr.060, i32 %read_len.0
  %sub27 = sub i32 %val_len.addr.061, %read_len.0
  %tobool16.not = icmp eq i32 %sub27, 0
  br i1 %tobool16.not, label %if.end26.out_unlock_crit_edge, label %if.end26.while.body_crit_edge

if.end26.while.body_crit_edge:                    ; preds = %if.end26
  call void @__sanitizer_cov_trace_pc() #26
  br label %while.body

if.end26.out_unlock_crit_edge:                    ; preds = %if.end26
  call void @__sanitizer_cov_trace_pc() #26
  br label %out_unlock

out_unlock:                                       ; preds = %if.end26.out_unlock_crit_edge, %while.body.out_unlock_crit_edge, %regmap_readable_noinc.exit.out_unlock_crit_edge, %regmap_reg_in_ranges.exit.i.i.out_unlock_crit_edge, %if.then.i.out_unlock_crit_edge, %if.end12.out_unlock_crit_edge
  %ret.1 = phi i32 [ -22, %regmap_readable_noinc.exit.out_unlock_crit_edge ], [ -22, %if.end12.out_unlock_crit_edge ], [ -22, %if.then.i.out_unlock_crit_edge ], [ -22, %regmap_reg_in_ranges.exit.i.i.out_unlock_crit_edge ], [ %call23, %while.body.out_unlock_crit_edge ], [ 0, %if.end26.out_unlock_crit_edge ]
  %unlock = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 2
  %36 = ptrtoint ptr %unlock to i32
  call void @__asan_load4_noabort(i32 %36)
  %37 = load ptr, ptr %unlock, align 4
  %38 = ptrtoint ptr %lock_arg to i32
  call void @__asan_load4_noabort(i32 %38)
  %39 = load ptr, ptr %lock_arg, align 4
  tail call void %37(ptr noundef %39) #24
  br label %cleanup

cleanup:                                          ; preds = %out_unlock, %if.end7.cleanup_crit_edge, %if.end4.cleanup_crit_edge, %if.end.cleanup_crit_edge, %entry.cleanup_crit_edge
  %retval.0 = phi i32 [ %ret.1, %out_unlock ], [ -22, %entry.cleanup_crit_edge ], [ -524, %if.end.cleanup_crit_edge ], [ -22, %if.end4.cleanup_crit_edge ], [ -22, %if.end7.cleanup_crit_edge ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @regmap_field_read(ptr nocapture noundef readonly %field, ptr nocapture noundef writeonly %val) #0 align 64 {
entry:
  %reg_val = alloca i32, align 4
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %reg_val) #24
  %0 = ptrtoint ptr %reg_val to i32
  call void @__asan_store4_noabort(i32 %0)
  store i32 -1, ptr %reg_val, align 4, !annotation !388
  %1 = ptrtoint ptr %field to i32
  call void @__asan_load4_noabort(i32 %1)
  %2 = load ptr, ptr %field, align 4
  %reg = getelementptr inbounds %struct.regmap_field, ptr %field, i32 0, i32 3
  %3 = ptrtoint ptr %reg to i32
  call void @__asan_load4_noabort(i32 %3)
  %4 = load i32, ptr %reg, align 4
  %reg_stride.i = getelementptr inbounds %struct.regmap, ptr %2, i32 0, i32 45
  %5 = ptrtoint ptr %reg_stride.i to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load i32, ptr %reg_stride.i, align 4
  %sub.i = add i32 %6, -1
  %and.i = and i32 %sub.i, %4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i)
  %cmp.i = icmp eq i32 %and.i, 0
  br i1 %cmp.i, label %regmap_read.exit, label %entry.cleanup_crit_edge

entry.cleanup_crit_edge:                          ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

regmap_read.exit:                                 ; preds = %entry
  %lock.i = getelementptr inbounds %struct.regmap, ptr %2, i32 0, i32 1
  %7 = ptrtoint ptr %lock.i to i32
  call void @__asan_load4_noabort(i32 %7)
  %8 = load ptr, ptr %lock.i, align 4
  %lock_arg.i = getelementptr inbounds %struct.regmap, ptr %2, i32 0, i32 3
  %9 = ptrtoint ptr %lock_arg.i to i32
  call void @__asan_load4_noabort(i32 %9)
  %10 = load ptr, ptr %lock_arg.i, align 4
  tail call void %8(ptr noundef %10) #24
  %call.i = call fastcc i32 @_regmap_read(ptr noundef %2, i32 noundef %4, ptr noundef nonnull %reg_val) #24
  %unlock.i = getelementptr inbounds %struct.regmap, ptr %2, i32 0, i32 2
  %11 = ptrtoint ptr %unlock.i to i32
  call void @__asan_load4_noabort(i32 %11)
  %12 = load ptr, ptr %unlock.i, align 4
  %13 = ptrtoint ptr %lock_arg.i to i32
  call void @__asan_load4_noabort(i32 %13)
  %14 = load ptr, ptr %lock_arg.i, align 4
  call void %12(ptr noundef %14) #24
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call.i)
  %cmp.not = icmp eq i32 %call.i, 0
  br i1 %cmp.not, label %if.end, label %regmap_read.exit.cleanup_crit_edge

regmap_read.exit.cleanup_crit_edge:               ; preds = %regmap_read.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end:                                           ; preds = %regmap_read.exit
  call void @__sanitizer_cov_trace_pc() #26
  %mask = getelementptr inbounds %struct.regmap_field, ptr %field, i32 0, i32 1
  %15 = ptrtoint ptr %mask to i32
  call void @__asan_load4_noabort(i32 %15)
  %16 = load i32, ptr %mask, align 4
  %17 = ptrtoint ptr %reg_val to i32
  call void @__asan_load4_noabort(i32 %17)
  %18 = load i32, ptr %reg_val, align 4
  %and = and i32 %18, %16
  %shift = getelementptr inbounds %struct.regmap_field, ptr %field, i32 0, i32 2
  %19 = ptrtoint ptr %shift to i32
  call void @__asan_load4_noabort(i32 %19)
  %20 = load i32, ptr %shift, align 4
  %shr = lshr i32 %and, %20
  %21 = ptrtoint ptr %val to i32
  call void @__asan_store4_noabort(i32 %21)
  store i32 %shr, ptr %val, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %regmap_read.exit.cleanup_crit_edge, %entry.cleanup_crit_edge
  %retval.0.i9 = phi i32 [ %call.i, %regmap_read.exit.cleanup_crit_edge ], [ 0, %if.end ], [ -22, %entry.cleanup_crit_edge ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %reg_val) #24
  ret i32 %retval.0.i9
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @regmap_fields_read(ptr nocapture noundef readonly %field, i32 noundef %id, ptr nocapture noundef writeonly %val) #0 align 64 {
entry:
  %reg_val = alloca i32, align 4
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %reg_val) #24
  %0 = ptrtoint ptr %reg_val to i32
  call void @__asan_store4_noabort(i32 %0)
  store i32 -1, ptr %reg_val, align 4, !annotation !388
  %id_size = getelementptr inbounds %struct.regmap_field, ptr %field, i32 0, i32 4
  %1 = ptrtoint ptr %id_size to i32
  call void @__asan_load4_noabort(i32 %1)
  %2 = load i32, ptr %id_size, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %2, i32 %id)
  %cmp.not = icmp ugt i32 %2, %id
  br i1 %cmp.not, label %if.end, label %entry.cleanup_crit_edge

entry.cleanup_crit_edge:                          ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end:                                           ; preds = %entry
  %3 = ptrtoint ptr %field to i32
  call void @__asan_load4_noabort(i32 %3)
  %4 = load ptr, ptr %field, align 4
  %reg = getelementptr inbounds %struct.regmap_field, ptr %field, i32 0, i32 3
  %5 = ptrtoint ptr %reg to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load i32, ptr %reg, align 4
  %id_offset = getelementptr inbounds %struct.regmap_field, ptr %field, i32 0, i32 5
  %7 = ptrtoint ptr %id_offset to i32
  call void @__asan_load4_noabort(i32 %7)
  %8 = load i32, ptr %id_offset, align 4
  %mul = mul i32 %8, %id
  %add = add i32 %mul, %6
  %reg_stride.i = getelementptr inbounds %struct.regmap, ptr %4, i32 0, i32 45
  %9 = ptrtoint ptr %reg_stride.i to i32
  call void @__asan_load4_noabort(i32 %9)
  %10 = load i32, ptr %reg_stride.i, align 4
  %sub.i = add i32 %10, -1
  %and.i = and i32 %sub.i, %add
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i)
  %cmp.i = icmp eq i32 %and.i, 0
  br i1 %cmp.i, label %regmap_read.exit, label %if.end.cleanup_crit_edge

if.end.cleanup_crit_edge:                         ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

regmap_read.exit:                                 ; preds = %if.end
  %lock.i = getelementptr inbounds %struct.regmap, ptr %4, i32 0, i32 1
  %11 = ptrtoint ptr %lock.i to i32
  call void @__asan_load4_noabort(i32 %11)
  %12 = load ptr, ptr %lock.i, align 4
  %lock_arg.i = getelementptr inbounds %struct.regmap, ptr %4, i32 0, i32 3
  %13 = ptrtoint ptr %lock_arg.i to i32
  call void @__asan_load4_noabort(i32 %13)
  %14 = load ptr, ptr %lock_arg.i, align 4
  tail call void %12(ptr noundef %14) #24
  %call.i = call fastcc i32 @_regmap_read(ptr noundef %4, i32 noundef %add, ptr noundef nonnull %reg_val) #24
  %unlock.i = getelementptr inbounds %struct.regmap, ptr %4, i32 0, i32 2
  %15 = ptrtoint ptr %unlock.i to i32
  call void @__asan_load4_noabort(i32 %15)
  %16 = load ptr, ptr %unlock.i, align 4
  %17 = ptrtoint ptr %lock_arg.i to i32
  call void @__asan_load4_noabort(i32 %17)
  %18 = load ptr, ptr %lock_arg.i, align 4
  call void %16(ptr noundef %18) #24
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call.i)
  %cmp1.not = icmp eq i32 %call.i, 0
  br i1 %cmp1.not, label %if.end3, label %regmap_read.exit.cleanup_crit_edge

regmap_read.exit.cleanup_crit_edge:               ; preds = %regmap_read.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end3:                                          ; preds = %regmap_read.exit
  call void @__sanitizer_cov_trace_pc() #26
  %mask = getelementptr inbounds %struct.regmap_field, ptr %field, i32 0, i32 1
  %19 = ptrtoint ptr %mask to i32
  call void @__asan_load4_noabort(i32 %19)
  %20 = load i32, ptr %mask, align 4
  %21 = ptrtoint ptr %reg_val to i32
  call void @__asan_load4_noabort(i32 %21)
  %22 = load i32, ptr %reg_val, align 4
  %and = and i32 %22, %20
  %shift = getelementptr inbounds %struct.regmap_field, ptr %field, i32 0, i32 2
  %23 = ptrtoint ptr %shift to i32
  call void @__asan_load4_noabort(i32 %23)
  %24 = load i32, ptr %shift, align 4
  %shr = lshr i32 %and, %24
  %25 = ptrtoint ptr %val to i32
  call void @__asan_store4_noabort(i32 %25)
  store i32 %shr, ptr %val, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end3, %regmap_read.exit.cleanup_crit_edge, %if.end.cleanup_crit_edge, %entry.cleanup_crit_edge
  %retval.0 = phi i32 [ 0, %if.end3 ], [ -22, %entry.cleanup_crit_edge ], [ %call.i, %regmap_read.exit.cleanup_crit_edge ], [ -22, %if.end.cleanup_crit_edge ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %reg_val) #24
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @regmap_bulk_read(ptr noundef %map, i32 noundef %reg, ptr noundef %val, i32 noundef %val_count) #0 align 64 {
entry:
  %ival = alloca i32, align 4
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %val_bytes1 = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 7, i32 3
  %0 = ptrtoint ptr %val_bytes1 to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load i32, ptr %val_bytes1, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %val_count)
  %cmp5.not.i = icmp eq i32 %val_count, 0
  br i1 %cmp5.not.i, label %entry.cleanup39_crit_edge, label %for.body.lr.ph.i

entry.cleanup39_crit_edge:                        ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup39

for.body.lr.ph.i:                                 ; preds = %entry
  %reg_stride_order.i.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 46
  %reg_stride.i.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 45
  br label %for.body.i

for.cond.i:                                       ; preds = %regmap_get_offset.exit.i
  %inc.i = add nuw i32 %i.06.i, 1
  call void @__sanitizer_cov_trace_cmp4(i32 %inc.i, i32 %val_count)
  %cmp.i = icmp ult i32 %inc.i, %val_count
  %exitcond.not.i = icmp eq i32 %inc.i, %val_count
  br i1 %exitcond.not.i, label %for.cond.i.regmap_volatile_range.exit_crit_edge, label %for.cond.i.for.body.i_crit_edge

for.cond.i.for.body.i_crit_edge:                  ; preds = %for.cond.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body.i

for.cond.i.regmap_volatile_range.exit_crit_edge:  ; preds = %for.cond.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_volatile_range.exit

for.body.i:                                       ; preds = %for.cond.i.for.body.i_crit_edge, %for.body.lr.ph.i
  %cmp8.i = phi i1 [ true, %for.body.lr.ph.i ], [ %cmp.i, %for.cond.i.for.body.i_crit_edge ]
  %i.06.i = phi i32 [ 0, %for.body.lr.ph.i ], [ %inc.i, %for.cond.i.for.body.i_crit_edge ]
  %2 = ptrtoint ptr %reg_stride_order.i.i to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load i32, ptr %reg_stride_order.i.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %3)
  %cmp.i.i = icmp sgt i32 %3, -1
  br i1 %cmp.i.i, label %if.then.i.i, label %if.else.i.i

if.then.i.i:                                      ; preds = %for.body.i
  call void @__sanitizer_cov_trace_pc() #26
  %shl.i.i = shl i32 %i.06.i, %3
  br label %regmap_get_offset.exit.i

if.else.i.i:                                      ; preds = %for.body.i
  call void @__sanitizer_cov_trace_pc() #26
  %4 = ptrtoint ptr %reg_stride.i.i to i32
  call void @__asan_load4_noabort(i32 %4)
  %5 = load i32, ptr %reg_stride.i.i, align 4
  %mul.i.i = mul i32 %5, %i.06.i
  br label %regmap_get_offset.exit.i

regmap_get_offset.exit.i:                         ; preds = %if.else.i.i, %if.then.i.i
  %retval.0.i.i = phi i32 [ %shl.i.i, %if.then.i.i ], [ %mul.i.i, %if.else.i.i ]
  %add.i = add i32 %retval.0.i.i, %reg
  %call1.i = tail call zeroext i1 @regmap_volatile(ptr noundef %map, i32 noundef %add.i) #24
  br i1 %call1.i, label %for.cond.i, label %regmap_get_offset.exit.i.regmap_volatile_range.exit_crit_edge

regmap_get_offset.exit.i.regmap_volatile_range.exit_crit_edge: ; preds = %regmap_get_offset.exit.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %regmap_volatile_range.exit

regmap_volatile_range.exit:                       ; preds = %regmap_get_offset.exit.i.regmap_volatile_range.exit_crit_edge, %for.cond.i.regmap_volatile_range.exit_crit_edge
  %cmp.lcssa.i = phi i1 [ %cmp.i, %for.cond.i.regmap_volatile_range.exit_crit_edge ], [ %cmp8.i, %regmap_get_offset.exit.i.regmap_volatile_range.exit_crit_edge ]
  %6 = ptrtoint ptr %reg_stride.i.i to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load i32, ptr %reg_stride.i.i, align 4
  %sub = add i32 %7, -1
  %and = and i32 %sub, %reg
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and)
  %cmp.not = icmp eq i32 %and, 0
  br i1 %cmp.not, label %if.end4, label %regmap_volatile_range.exit.cleanup39_crit_edge

regmap_volatile_range.exit.cleanup39_crit_edge:   ; preds = %regmap_volatile_range.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup39

if.end4:                                          ; preds = %regmap_volatile_range.exit
  %bus = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 8
  %8 = ptrtoint ptr %bus to i32
  call void @__asan_load4_noabort(i32 %8)
  %9 = load ptr, ptr %bus, align 4
  %tobool.not = icmp eq ptr %9, null
  br i1 %tobool.not, label %if.end4.for.body21.preheader_crit_edge, label %land.lhs.true

if.end4.for.body21.preheader_crit_edge:           ; preds = %if.end4
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body21.preheader

land.lhs.true:                                    ; preds = %if.end4
  %parse_inplace = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 7, i32 8
  %10 = ptrtoint ptr %parse_inplace to i32
  call void @__asan_load4_noabort(i32 %10)
  %11 = load ptr, ptr %parse_inplace, align 4
  %tobool6.not = icmp eq ptr %11, null
  br i1 %tobool6.not, label %land.lhs.true.for.body21.preheader_crit_edge, label %land.lhs.true7

land.lhs.true.for.body21.preheader_crit_edge:     ; preds = %land.lhs.true
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body21.preheader

land.lhs.true7:                                   ; preds = %land.lhs.true
  br i1 %cmp.lcssa.i, label %lor.lhs.false, label %land.lhs.true7.if.then10_crit_edge

land.lhs.true7.if.then10_crit_edge:               ; preds = %land.lhs.true7
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.then10

lor.lhs.false:                                    ; preds = %land.lhs.true7
  %cache_type = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 48
  %12 = ptrtoint ptr %cache_type to i32
  call void @__asan_load4_noabort(i32 %12)
  %13 = load i32, ptr %cache_type, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %13)
  %cmp9 = icmp eq i32 %13, 0
  br i1 %cmp9, label %lor.lhs.false.if.then10_crit_edge, label %lor.lhs.false.for.body21.preheader_crit_edge

lor.lhs.false.for.body21.preheader_crit_edge:     ; preds = %lor.lhs.false
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body21.preheader

lor.lhs.false.if.then10_crit_edge:                ; preds = %lor.lhs.false
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.then10

if.then10:                                        ; preds = %lor.lhs.false.if.then10_crit_edge, %land.lhs.true7.if.then10_crit_edge
  %mul = mul i32 %1, %val_count
  %call11 = tail call i32 @regmap_raw_read(ptr noundef %map, i32 noundef %reg, ptr noundef %val, i32 noundef %mul)
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call11)
  %cmp12.not = icmp eq i32 %call11, 0
  br i1 %cmp12.not, label %for.cond.preheader, label %if.then10.cleanup39_crit_edge

if.then10.cleanup39_crit_edge:                    ; preds = %if.then10
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup39

for.cond.preheader:                               ; preds = %if.then10
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %mul)
  %cmp1693.not = icmp eq i32 %mul, 0
  br i1 %cmp1693.not, label %for.cond.preheader.cleanup39_crit_edge, label %for.cond.preheader.for.body_crit_edge

for.cond.preheader.for.body_crit_edge:            ; preds = %for.cond.preheader
  br label %for.body

for.cond.preheader.cleanup39_crit_edge:           ; preds = %for.cond.preheader
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup39

for.body:                                         ; preds = %for.body.for.body_crit_edge, %for.cond.preheader.for.body_crit_edge
  %i.094 = phi i32 [ %add, %for.body.for.body_crit_edge ], [ 0, %for.cond.preheader.for.body_crit_edge ]
  %14 = ptrtoint ptr %parse_inplace to i32
  call void @__asan_load4_noabort(i32 %14)
  %15 = load ptr, ptr %parse_inplace, align 4
  %add.ptr = getelementptr i8, ptr %val, i32 %i.094
  tail call void %15(ptr noundef %add.ptr) #24
  %add = add i32 %i.094, %1
  %cmp16 = icmp ult i32 %add, %mul
  br i1 %cmp16, label %for.body.for.body_crit_edge, label %for.body.cleanup39_crit_edge

for.body.cleanup39_crit_edge:                     ; preds = %for.body
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup39

for.body.for.body_crit_edge:                      ; preds = %for.body
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body

for.body21.preheader:                             ; preds = %lor.lhs.false.for.body21.preheader_crit_edge, %land.lhs.true.for.body21.preheader_crit_edge, %if.end4.for.body21.preheader_crit_edge
  %lock = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 1
  %16 = ptrtoint ptr %lock to i32
  call void @__asan_load4_noabort(i32 %16)
  %17 = load ptr, ptr %lock, align 4
  %lock_arg = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 3
  %18 = ptrtoint ptr %lock_arg to i32
  call void @__asan_load4_noabort(i32 %18)
  %19 = load ptr, ptr %lock_arg, align 4
  tail call void %17(ptr noundef %19) #24
  %umax = call i32 @llvm.umax.i32(i32 %val_count, i32 1)
  br label %for.body21

for.body21:                                       ; preds = %for.inc35.for.body21_crit_edge, %for.body21.preheader
  %i.196 = phi i32 [ %inc, %for.inc35.for.body21_crit_edge ], [ 0, %for.body21.preheader ]
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %ival) #24
  %20 = ptrtoint ptr %ival to i32
  call void @__asan_store4_noabort(i32 %20)
  store i32 -1, ptr %ival, align 4, !annotation !388
  %21 = ptrtoint ptr %reg_stride_order.i.i to i32
  call void @__asan_load4_noabort(i32 %21)
  %22 = load i32, ptr %reg_stride_order.i.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %22)
  %cmp.i81 = icmp sgt i32 %22, -1
  br i1 %cmp.i81, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %for.body21
  call void @__sanitizer_cov_trace_pc() #26
  %shl.i = shl i32 %i.196, %22
  br label %regmap_get_offset.exit

if.else.i:                                        ; preds = %for.body21
  call void @__sanitizer_cov_trace_pc() #26
  %23 = ptrtoint ptr %reg_stride.i.i to i32
  call void @__asan_load4_noabort(i32 %23)
  %24 = load i32, ptr %reg_stride.i.i, align 4
  %mul.i = mul i32 %24, %i.196
  br label %regmap_get_offset.exit

regmap_get_offset.exit:                           ; preds = %if.else.i, %if.then.i
  %retval.0.i = phi i32 [ %shl.i, %if.then.i ], [ %mul.i, %if.else.i ]
  %add23 = add i32 %retval.0.i, %reg
  %call24 = call fastcc i32 @_regmap_read(ptr noundef %map, i32 noundef %add23, ptr noundef nonnull %ival)
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call24)
  %cmp25.not = icmp eq i32 %call24, 0
  br i1 %cmp25.not, label %if.end27, label %regmap_get_offset.exit.cleanup_crit_edge

regmap_get_offset.exit.cleanup_crit_edge:         ; preds = %regmap_get_offset.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end27:                                         ; preds = %regmap_get_offset.exit
  %25 = ptrtoint ptr %val_bytes1 to i32
  call void @__asan_load4_noabort(i32 %25)
  %26 = load i32, ptr %val_bytes1, align 4
  %27 = zext i32 %26 to i64
  call void @__sanitizer_cov_trace_switch(i64 %27, ptr @__sancov_gen_cov_switch_values.83)
  switch i32 %26, label %if.end27.cleanup_crit_edge [
    i32 4, label %sw.bb
    i32 2, label %sw.bb30
    i32 1, label %sw.bb32
  ]

if.end27.cleanup_crit_edge:                       ; preds = %if.end27
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

sw.bb:                                            ; preds = %if.end27
  call void @__sanitizer_cov_trace_pc() #26
  %28 = ptrtoint ptr %ival to i32
  call void @__asan_load4_noabort(i32 %28)
  %29 = load i32, ptr %ival, align 4
  %arrayidx = getelementptr i32, ptr %val, i32 %i.196
  %30 = ptrtoint ptr %arrayidx to i32
  call void @__asan_store4_noabort(i32 %30)
  store i32 %29, ptr %arrayidx, align 4
  br label %for.inc35

sw.bb30:                                          ; preds = %if.end27
  call void @__sanitizer_cov_trace_pc() #26
  %31 = ptrtoint ptr %ival to i32
  call void @__asan_load4_noabort(i32 %31)
  %32 = load i32, ptr %ival, align 4
  %conv = trunc i32 %32 to i16
  %arrayidx31 = getelementptr i16, ptr %val, i32 %i.196
  %33 = ptrtoint ptr %arrayidx31 to i32
  call void @__asan_store2_noabort(i32 %33)
  store i16 %conv, ptr %arrayidx31, align 2
  br label %for.inc35

sw.bb32:                                          ; preds = %if.end27
  call void @__sanitizer_cov_trace_pc() #26
  %34 = ptrtoint ptr %ival to i32
  call void @__asan_load4_noabort(i32 %34)
  %35 = load i32, ptr %ival, align 4
  %conv33 = trunc i32 %35 to i8
  %arrayidx34 = getelementptr i8, ptr %val, i32 %i.196
  %36 = ptrtoint ptr %arrayidx34 to i32
  call void @__asan_store1_noabort(i32 %36)
  store i8 %conv33, ptr %arrayidx34, align 1
  br label %for.inc35

cleanup:                                          ; preds = %if.end27.cleanup_crit_edge, %regmap_get_offset.exit.cleanup_crit_edge
  %ret.1 = phi i32 [ %call24, %regmap_get_offset.exit.cleanup_crit_edge ], [ -22, %if.end27.cleanup_crit_edge ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %ival) #24
  br label %out

for.inc35:                                        ; preds = %sw.bb32, %sw.bb30, %sw.bb
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %ival) #24
  %inc = add nuw i32 %i.196, 1
  %exitcond.not = icmp eq i32 %inc, %umax
  br i1 %exitcond.not, label %for.inc35.out_crit_edge, label %for.inc35.for.body21_crit_edge

for.inc35.for.body21_crit_edge:                   ; preds = %for.inc35
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body21

for.inc35.out_crit_edge:                          ; preds = %for.inc35
  call void @__sanitizer_cov_trace_pc() #26
  br label %out

out:                                              ; preds = %for.inc35.out_crit_edge, %cleanup
  %ret.2 = phi i32 [ %ret.1, %cleanup ], [ 0, %for.inc35.out_crit_edge ]
  %unlock = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 2
  %37 = ptrtoint ptr %unlock to i32
  call void @__asan_load4_noabort(i32 %37)
  %38 = load ptr, ptr %unlock, align 4
  %39 = ptrtoint ptr %lock_arg to i32
  call void @__asan_load4_noabort(i32 %39)
  %40 = load ptr, ptr %lock_arg, align 4
  call void %38(ptr noundef %40) #24
  br label %cleanup39

cleanup39:                                        ; preds = %out, %for.body.cleanup39_crit_edge, %for.cond.preheader.cleanup39_crit_edge, %if.then10.cleanup39_crit_edge, %regmap_volatile_range.exit.cleanup39_crit_edge, %entry.cleanup39_crit_edge
  %retval.0 = phi i32 [ -22, %regmap_volatile_range.exit.cleanup39_crit_edge ], [ %call11, %if.then10.cleanup39_crit_edge ], [ %ret.2, %out ], [ -22, %entry.cleanup39_crit_edge ], [ 0, %for.cond.preheader.cleanup39_crit_edge ], [ 0, %for.body.cleanup39_crit_edge ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @regmap_test_bits(ptr noundef %map, i32 noundef %reg, i32 noundef %bits) #0 align 64 {
entry:
  %val = alloca i32, align 4
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %val) #24
  %0 = ptrtoint ptr %val to i32
  call void @__asan_store4_noabort(i32 %0)
  store i32 -1, ptr %val, align 4, !annotation !388
  %reg_stride.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 45
  %1 = ptrtoint ptr %reg_stride.i to i32
  call void @__asan_load4_noabort(i32 %1)
  %2 = load i32, ptr %reg_stride.i, align 4
  %sub.i = add i32 %2, -1
  %and.i = and i32 %sub.i, %reg
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i)
  %cmp.i = icmp eq i32 %and.i, 0
  br i1 %cmp.i, label %regmap_read.exit, label %entry.cleanup_crit_edge

entry.cleanup_crit_edge:                          ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

regmap_read.exit:                                 ; preds = %entry
  %lock.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 1
  %3 = ptrtoint ptr %lock.i to i32
  call void @__asan_load4_noabort(i32 %3)
  %4 = load ptr, ptr %lock.i, align 4
  %lock_arg.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 3
  %5 = ptrtoint ptr %lock_arg.i to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load ptr, ptr %lock_arg.i, align 4
  tail call void %4(ptr noundef %6) #24
  %call.i = call fastcc i32 @_regmap_read(ptr noundef %map, i32 noundef %reg, ptr noundef nonnull %val) #24
  %unlock.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 2
  %7 = ptrtoint ptr %unlock.i to i32
  call void @__asan_load4_noabort(i32 %7)
  %8 = load ptr, ptr %unlock.i, align 4
  %9 = ptrtoint ptr %lock_arg.i to i32
  call void @__asan_load4_noabort(i32 %9)
  %10 = load ptr, ptr %lock_arg.i, align 4
  call void %8(ptr noundef %10) #24
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call.i)
  %tobool.not = icmp eq i32 %call.i, 0
  br i1 %tobool.not, label %if.end, label %regmap_read.exit.cleanup_crit_edge

regmap_read.exit.cleanup_crit_edge:               ; preds = %regmap_read.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end:                                           ; preds = %regmap_read.exit
  call void @__sanitizer_cov_trace_pc() #26
  %11 = ptrtoint ptr %val to i32
  call void @__asan_load4_noabort(i32 %11)
  %12 = load i32, ptr %val, align 4
  %and = and i32 %12, %bits
  call void @__sanitizer_cov_trace_cmp4(i32 %and, i32 %bits)
  %cmp = icmp eq i32 %and, %bits
  %conv = zext i1 %cmp to i32
  br label %cleanup

cleanup:                                          ; preds = %if.end, %regmap_read.exit.cleanup_crit_edge, %entry.cleanup_crit_edge
  %retval.0 = phi i32 [ %conv, %if.end ], [ %call.i, %regmap_read.exit.cleanup_crit_edge ], [ -22, %entry.cleanup_crit_edge ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %val) #24
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local void @regmap_async_complete_cb(ptr noundef %async, i32 noundef %ret) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %map1 = getelementptr inbounds %struct.regmap_async, ptr %async, i32 0, i32 1
  %0 = ptrtoint ptr %map1 to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %map1, align 4
  tail call fastcc void @trace_regmap_async_io_complete(ptr noundef %1)
  %async_lock = getelementptr inbounds %struct.regmap, ptr %1, i32 0, i32 12
  tail call void @_raw_spin_lock(ptr noundef %async_lock) #24
  %async_free = getelementptr inbounds %struct.regmap, ptr %1, i32 0, i32 15
  %call.i.i = tail call zeroext i1 @__list_del_entry_valid(ptr noundef %async) #24
  br i1 %call.i.i, label %if.end.i.i, label %entry.__list_del_entry.exit.i_crit_edge

entry.__list_del_entry.exit.i_crit_edge:          ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %__list_del_entry.exit.i

if.end.i.i:                                       ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  %prev.i.i = getelementptr inbounds %struct.list_head, ptr %async, i32 0, i32 1
  %2 = ptrtoint ptr %prev.i.i to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load ptr, ptr %prev.i.i, align 4
  %4 = ptrtoint ptr %async to i32
  call void @__asan_load4_noabort(i32 %4)
  %5 = load ptr, ptr %async, align 4
  %prev1.i.i.i = getelementptr inbounds %struct.list_head, ptr %5, i32 0, i32 1
  %6 = ptrtoint ptr %prev1.i.i.i to i32
  call void @__asan_store4_noabort(i32 %6)
  store ptr %3, ptr %prev1.i.i.i, align 4
  %7 = ptrtoint ptr %3 to i32
  call void @__asan_store4_noabort(i32 %7)
  store volatile ptr %5, ptr %3, align 4
  br label %__list_del_entry.exit.i

__list_del_entry.exit.i:                          ; preds = %if.end.i.i, %entry.__list_del_entry.exit.i_crit_edge
  %8 = ptrtoint ptr %async_free to i32
  call void @__asan_load4_noabort(i32 %8)
  %9 = load ptr, ptr %async_free, align 4
  %call.i.i.i = tail call zeroext i1 @__list_add_valid(ptr noundef %async, ptr noundef %async_free, ptr noundef %9) #24
  br i1 %call.i.i.i, label %if.end.i.i.i, label %__list_del_entry.exit.i.list_move.exit_crit_edge

__list_del_entry.exit.i.list_move.exit_crit_edge: ; preds = %__list_del_entry.exit.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %list_move.exit

if.end.i.i.i:                                     ; preds = %__list_del_entry.exit.i
  call void @__sanitizer_cov_trace_pc() #26
  %prev1.i.i2.i = getelementptr inbounds %struct.list_head, ptr %9, i32 0, i32 1
  %10 = ptrtoint ptr %prev1.i.i2.i to i32
  call void @__asan_store4_noabort(i32 %10)
  store ptr %async, ptr %prev1.i.i2.i, align 4
  %11 = ptrtoint ptr %async to i32
  call void @__asan_store4_noabort(i32 %11)
  store ptr %9, ptr %async, align 4
  %prev3.i.i.i = getelementptr inbounds %struct.list_head, ptr %async, i32 0, i32 1
  %12 = ptrtoint ptr %prev3.i.i.i to i32
  call void @__asan_store4_noabort(i32 %12)
  store ptr %async_free, ptr %prev3.i.i.i, align 4
  %13 = ptrtoint ptr %async_free to i32
  call void @__asan_store4_noabort(i32 %13)
  store volatile ptr %async, ptr %async_free, align 4
  br label %list_move.exit

list_move.exit:                                   ; preds = %if.end.i.i.i, %__list_del_entry.exit.i.list_move.exit_crit_edge
  %async_list = getelementptr inbounds %struct.regmap, ptr %1, i32 0, i32 14
  %14 = ptrtoint ptr %async_list to i32
  call void @__asan_load4_noabort(i32 %14)
  %15 = load volatile ptr, ptr %async_list, align 4
  %cmp.i.not = icmp eq ptr %15, %async_list
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %ret)
  %cmp.not = icmp eq i32 %ret, 0
  br i1 %cmp.not, label %list_move.exit.if.end_crit_edge, label %if.then

list_move.exit.if.end_crit_edge:                  ; preds = %list_move.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end

if.then:                                          ; preds = %list_move.exit
  call void @__sanitizer_cov_trace_pc() #26
  %async_ret = getelementptr inbounds %struct.regmap, ptr %1, i32 0, i32 16
  %16 = ptrtoint ptr %async_ret to i32
  call void @__asan_store4_noabort(i32 %16)
  store i32 %ret, ptr %async_ret, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %list_move.exit.if.end_crit_edge
  tail call void @_raw_spin_unlock(ptr noundef %async_lock) #24
  br i1 %cmp.i.not, label %if.then4, label %if.end.if.end5_crit_edge

if.end.if.end5_crit_edge:                         ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end5

if.then4:                                         ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #26
  %async_waitq = getelementptr inbounds %struct.regmap, ptr %1, i32 0, i32 13
  tail call void @__wake_up(ptr noundef %async_waitq, i32 noundef 3, i32 noundef 1, ptr noundef null) #24
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %if.end.if.end5_crit_edge
  ret void
}

; Function Attrs: inlinehint nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal fastcc void @trace_regmap_async_io_complete(ptr noundef %map) unnamed_addr #14 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  callbr void asm sideeffect "1:\0A\09nop\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr getelementptr inbounds ({ ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr }, ptr @__tracepoint_regmap_async_io_complete, i32 0, i32 1, i32 0, i32 0), ptr blockaddress(@trace_regmap_async_io_complete, %do.body)) #24
          to label %if.end48 [label %do.body], !srcloc !391

do.body:                                          ; preds = %entry
  %0 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i = and i32 %0, -16384
  %1 = inttoptr i32 %and.i to ptr
  %cpu = getelementptr inbounds %struct.thread_info, ptr %1, i32 0, i32 3
  %2 = ptrtoint ptr %cpu to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load i32, ptr %cpu, align 4
  call void @__asan_load4_noabort(i32 ptrtoint (ptr @nr_cpu_ids to i32))
  %4 = load i32, ptr @nr_cpu_ids, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %4, i32 %3)
  %cmp.not.i.i.i.i = icmp ugt i32 %4, %3
  br i1 %cmp.not.i.i.i.i, label %do.body.cpu_online.exit_crit_edge, label %land.rhs.i.i.i.i

do.body.cpu_online.exit_crit_edge:                ; preds = %do.body
  call void @__sanitizer_cov_trace_pc() #26
  br label %cpu_online.exit

land.rhs.i.i.i.i:                                 ; preds = %do.body
  %.b37.i.i.i.i = load i1, ptr @cpu_max_bits_warn.__already_done, align 1
  br i1 %.b37.i.i.i.i, label %land.rhs.i.i.i.i.cpu_online.exit_crit_edge, label %if.then.i.i.i.i, !prof !386

land.rhs.i.i.i.i.cpu_online.exit_crit_edge:       ; preds = %land.rhs.i.i.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %cpu_online.exit

if.then.i.i.i.i:                                  ; preds = %land.rhs.i.i.i.i
  call void @__sanitizer_cov_trace_pc() #26
  store i1 true, ptr @cpu_max_bits_warn.__already_done, align 1
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.62, i32 noundef 108, i32 noundef 9, ptr noundef null) #24
  br label %cpu_online.exit

cpu_online.exit:                                  ; preds = %if.then.i.i.i.i, %land.rhs.i.i.i.i.cpu_online.exit_crit_edge, %do.body.cpu_online.exit_crit_edge
  %div1.i.i.i = lshr i32 %3, 5
  %arrayidx.i.i.i = getelementptr i32, ptr @__cpu_online_mask, i32 %div1.i.i.i
  %5 = ptrtoint ptr %arrayidx.i.i.i to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load volatile i32, ptr %arrayidx.i.i.i, align 4
  %and.i.i.i75 = and i32 %3, 31
  %7 = shl nuw i32 1, %and.i.i.i75
  %8 = and i32 %6, %7
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %8)
  %tobool.i.not = icmp eq i32 %8, 0
  br i1 %tobool.i.not, label %cpu_online.exit.if.end69_crit_edge, label %if.end31

cpu_online.exit.if.end69_crit_edge:               ; preds = %cpu_online.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end69

if.end31:                                         ; preds = %cpu_online.exit
  %9 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i.i.i = and i32 %9, -16384
  %10 = inttoptr i32 %and.i.i.i to ptr
  %preempt_count.i.i = getelementptr inbounds %struct.thread_info, ptr %10, i32 0, i32 1
  %11 = ptrtoint ptr %preempt_count.i.i to i32
  call void @__asan_load4_noabort(i32 %11)
  %12 = load volatile i32, ptr %preempt_count.i.i, align 4
  %add.i = add i32 %12, 1
  store volatile i32 %add.i, ptr %preempt_count.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !396
  %13 = load volatile ptr, ptr getelementptr inbounds ({ ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr }, ptr @__tracepoint_regmap_async_io_complete, i32 0, i32 7), align 4
  %tobool.not.i = icmp eq ptr %13, null
  br i1 %tobool.not.i, label %if.end48.critedge, label %if.end31.do.body2.i_crit_edge

if.end31.do.body2.i_crit_edge:                    ; preds = %if.end31
  br label %do.body2.i

do.body2.i:                                       ; preds = %do.body2.i.do.body2.i_crit_edge, %if.end31.do.body2.i_crit_edge
  %it_func_ptr.0.i = phi ptr [ %incdec.ptr.i, %do.body2.i.do.body2.i_crit_edge ], [ %13, %if.end31.do.body2.i_crit_edge ]
  %14 = ptrtoint ptr %it_func_ptr.0.i to i32
  call void @__asan_load4_noabort(i32 %14)
  %15 = load volatile ptr, ptr %it_func_ptr.0.i, align 4
  %data.i = getelementptr inbounds %struct.tracepoint_func, ptr %it_func_ptr.0.i, i32 0, i32 1
  %16 = ptrtoint ptr %data.i to i32
  call void @__asan_load4_noabort(i32 %16)
  %17 = load ptr, ptr %data.i, align 4
  tail call void %15(ptr noundef %17, ptr noundef %map) #24
  %incdec.ptr.i = getelementptr %struct.tracepoint_func, ptr %it_func_ptr.0.i, i32 1
  %18 = ptrtoint ptr %incdec.ptr.i to i32
  call void @__asan_load4_noabort(i32 %18)
  %19 = load ptr, ptr %incdec.ptr.i, align 4
  %tobool9.not.i = icmp eq ptr %19, null
  br i1 %tobool9.not.i, label %cleanup, label %do.body2.i.do.body2.i_crit_edge

do.body2.i.do.body2.i_crit_edge:                  ; preds = %do.body2.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.body2.i

cleanup:                                          ; preds = %do.body2.i
  call void @__sanitizer_cov_trace_pc() #26
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !397
  br label %if.end48.sink.split

if.end48.critedge:                                ; preds = %if.end31
  call void @__sanitizer_cov_trace_pc() #26
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !397
  br label %if.end48.sink.split

if.end48.sink.split:                              ; preds = %if.end48.critedge, %cleanup
  %20 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i.i.i73.c = and i32 %20, -16384
  %21 = inttoptr i32 %and.i.i.i73.c to ptr
  %preempt_count.i.i74.c = getelementptr inbounds %struct.thread_info, ptr %21, i32 0, i32 1
  %22 = ptrtoint ptr %preempt_count.i.i74.c to i32
  call void @__asan_load4_noabort(i32 %22)
  %23 = load volatile i32, ptr %preempt_count.i.i74.c, align 4
  %sub.i = add i32 %23, -1
  store volatile i32 %sub.i, ptr %preempt_count.i.i74.c, align 4
  br label %if.end48

if.end48:                                         ; preds = %if.end48.sink.split, %entry
  %24 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i76 = and i32 %24, -16384
  %25 = inttoptr i32 %and.i76 to ptr
  %cpu50 = getelementptr inbounds %struct.thread_info, ptr %25, i32 0, i32 3
  %26 = ptrtoint ptr %cpu50 to i32
  call void @__asan_load4_noabort(i32 %26)
  %27 = load i32, ptr %cpu50, align 4
  call void @__asan_load4_noabort(i32 ptrtoint (ptr @nr_cpu_ids to i32))
  %28 = load i32, ptr @nr_cpu_ids, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %28, i32 %27)
  %cmp.not.i.i.i.i77 = icmp ugt i32 %28, %27
  br i1 %cmp.not.i.i.i.i77, label %if.end48.cpu_online.exit85_crit_edge, label %land.rhs.i.i.i.i79

if.end48.cpu_online.exit85_crit_edge:             ; preds = %if.end48
  call void @__sanitizer_cov_trace_pc() #26
  br label %cpu_online.exit85

land.rhs.i.i.i.i79:                               ; preds = %if.end48
  %.b37.i.i.i.i78 = load i1, ptr @cpu_max_bits_warn.__already_done, align 1
  br i1 %.b37.i.i.i.i78, label %land.rhs.i.i.i.i79.cpu_online.exit85_crit_edge, label %if.then.i.i.i.i80, !prof !386

land.rhs.i.i.i.i79.cpu_online.exit85_crit_edge:   ; preds = %land.rhs.i.i.i.i79
  call void @__sanitizer_cov_trace_pc() #26
  br label %cpu_online.exit85

if.then.i.i.i.i80:                                ; preds = %land.rhs.i.i.i.i79
  call void @__sanitizer_cov_trace_pc() #26
  store i1 true, ptr @cpu_max_bits_warn.__already_done, align 1
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.62, i32 noundef 108, i32 noundef 9, ptr noundef null) #24
  br label %cpu_online.exit85

cpu_online.exit85:                                ; preds = %if.then.i.i.i.i80, %land.rhs.i.i.i.i79.cpu_online.exit85_crit_edge, %if.end48.cpu_online.exit85_crit_edge
  %div1.i.i.i81 = lshr i32 %27, 5
  %arrayidx.i.i.i82 = getelementptr i32, ptr @__cpu_online_mask, i32 %div1.i.i.i81
  %29 = ptrtoint ptr %arrayidx.i.i.i82 to i32
  call void @__asan_load4_noabort(i32 %29)
  %30 = load volatile i32, ptr %arrayidx.i.i.i82, align 4
  %and.i.i.i83 = and i32 %27, 31
  %31 = shl nuw i32 1, %and.i.i.i83
  %32 = and i32 %30, %31
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %32)
  %tobool.i84.not = icmp eq i32 %32, 0
  br i1 %tobool.i84.not, label %cpu_online.exit85.if.end69_crit_edge, label %if.then52

cpu_online.exit85.if.end69_crit_edge:             ; preds = %cpu_online.exit85
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end69

if.then52:                                        ; preds = %cpu_online.exit85
  %33 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i.i.i.i = and i32 %33, -16384
  %34 = inttoptr i32 %and.i.i.i.i to ptr
  %preempt_count.i.i.i = getelementptr inbounds %struct.thread_info, ptr %34, i32 0, i32 1
  %35 = ptrtoint ptr %preempt_count.i.i.i to i32
  call void @__asan_load4_noabort(i32 %35)
  %36 = load volatile i32, ptr %preempt_count.i.i.i, align 4
  %add.i.i = add i32 %36, 1
  store volatile i32 %add.i.i, ptr %preempt_count.i.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !394
  %37 = load volatile ptr, ptr getelementptr inbounds ({ ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr }, ptr @__tracepoint_regmap_async_io_complete, i32 0, i32 7), align 4
  %call58 = tail call i32 @rcu_read_lock_sched_held() #24
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call58)
  %tobool59.not = icmp eq i32 %call58, 0
  br i1 %tobool59.not, label %land.lhs.true, label %if.then52.do.end67_crit_edge

if.then52.do.end67_crit_edge:                     ; preds = %if.then52
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.end67

land.lhs.true:                                    ; preds = %if.then52
  %call60 = tail call i32 @debug_lockdep_rcu_enabled() #24
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call60)
  %tobool61.not = icmp eq i32 %call60, 0
  br i1 %tobool61.not, label %land.lhs.true.do.end67_crit_edge, label %land.lhs.true62

land.lhs.true.do.end67_crit_edge:                 ; preds = %land.lhs.true
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.end67

land.lhs.true62:                                  ; preds = %land.lhs.true
  %.b72 = load i1, ptr @trace_regmap_async_io_complete.__warned, align 1
  br i1 %.b72, label %land.lhs.true62.do.end67_crit_edge, label %if.then64

land.lhs.true62.do.end67_crit_edge:               ; preds = %land.lhs.true62
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.end67

if.then64:                                        ; preds = %land.lhs.true62
  call void @__sanitizer_cov_trace_pc() #26
  store i1 true, ptr @trace_regmap_async_io_complete.__warned, align 1
  tail call void @lockdep_rcu_suspicious(ptr noundef nonnull @.str.60, i32 noundef 207, ptr noundef nonnull @.str.61) #24
  br label %do.end67

do.end67:                                         ; preds = %if.then64, %land.lhs.true62.do.end67_crit_edge, %land.lhs.true.do.end67_crit_edge, %if.then52.do.end67_crit_edge
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !395
  %38 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i.i.i.i86 = and i32 %38, -16384
  %39 = inttoptr i32 %and.i.i.i.i86 to ptr
  %preempt_count.i.i.i87 = getelementptr inbounds %struct.thread_info, ptr %39, i32 0, i32 1
  %40 = ptrtoint ptr %preempt_count.i.i.i87 to i32
  call void @__asan_load4_noabort(i32 %40)
  %41 = load volatile i32, ptr %preempt_count.i.i.i87, align 4
  %sub.i.i = add i32 %41, -1
  store volatile i32 %sub.i.i, ptr %preempt_count.i.i.i87, align 4
  br label %if.end69

if.end69:                                         ; preds = %do.end67, %cpu_online.exit85.if.end69_crit_edge, %cpu_online.exit.if.end69_crit_edge
  ret void
}

; Function Attrs: inlinehint nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal fastcc void @list_move(ptr noundef %list, ptr noundef %head) unnamed_addr #14 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  %call.i = tail call zeroext i1 @__list_del_entry_valid(ptr noundef %list) #24
  br i1 %call.i, label %if.end.i, label %entry.__list_del_entry.exit_crit_edge

entry.__list_del_entry.exit_crit_edge:            ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %__list_del_entry.exit

if.end.i:                                         ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  %prev.i = getelementptr inbounds %struct.list_head, ptr %list, i32 0, i32 1
  %0 = ptrtoint ptr %prev.i to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %prev.i, align 4
  %2 = ptrtoint ptr %list to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load ptr, ptr %list, align 4
  %prev1.i.i = getelementptr inbounds %struct.list_head, ptr %3, i32 0, i32 1
  %4 = ptrtoint ptr %prev1.i.i to i32
  call void @__asan_store4_noabort(i32 %4)
  store ptr %1, ptr %prev1.i.i, align 4
  %5 = ptrtoint ptr %1 to i32
  call void @__asan_store4_noabort(i32 %5)
  store volatile ptr %3, ptr %1, align 4
  br label %__list_del_entry.exit

__list_del_entry.exit:                            ; preds = %if.end.i, %entry.__list_del_entry.exit_crit_edge
  %6 = ptrtoint ptr %head to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load ptr, ptr %head, align 4
  %call.i.i = tail call zeroext i1 @__list_add_valid(ptr noundef %list, ptr noundef %head, ptr noundef %7) #24
  br i1 %call.i.i, label %if.end.i.i, label %__list_del_entry.exit.list_add.exit_crit_edge

__list_del_entry.exit.list_add.exit_crit_edge:    ; preds = %__list_del_entry.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %list_add.exit

if.end.i.i:                                       ; preds = %__list_del_entry.exit
  call void @__sanitizer_cov_trace_pc() #26
  %prev1.i.i2 = getelementptr inbounds %struct.list_head, ptr %7, i32 0, i32 1
  %8 = ptrtoint ptr %prev1.i.i2 to i32
  call void @__asan_store4_noabort(i32 %8)
  store ptr %list, ptr %prev1.i.i2, align 4
  %9 = ptrtoint ptr %list to i32
  call void @__asan_store4_noabort(i32 %9)
  store ptr %7, ptr %list, align 4
  %prev3.i.i = getelementptr inbounds %struct.list_head, ptr %list, i32 0, i32 1
  %10 = ptrtoint ptr %prev3.i.i to i32
  call void @__asan_store4_noabort(i32 %10)
  store ptr %head, ptr %prev3.i.i, align 4
  %11 = ptrtoint ptr %head to i32
  call void @__asan_store4_noabort(i32 %11)
  store volatile ptr %list, ptr %head, align 4
  br label %list_add.exit

list_add.exit:                                    ; preds = %if.end.i.i, %__list_del_entry.exit.list_add.exit_crit_edge
  ret void
}

; Function Attrs: null_pointer_is_valid
declare dso_local void @__wake_up(ptr noundef, i32 noundef, i32 noundef, ptr noundef) local_unnamed_addr #2

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @regmap_async_complete(ptr noundef %map) #0 align 64 {
entry:
  %__wq_entry = alloca %struct.wait_queue_entry, align 4
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %bus = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 8
  %0 = ptrtoint ptr %bus to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %bus, align 4
  %tobool.not = icmp eq ptr %1, null
  br i1 %tobool.not, label %entry.cleanup29_crit_edge, label %lor.lhs.false

entry.cleanup29_crit_edge:                        ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup29

lor.lhs.false:                                    ; preds = %entry
  %async_write = getelementptr inbounds %struct.regmap_bus, ptr %1, i32 0, i32 3
  %2 = ptrtoint ptr %async_write to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load ptr, ptr %async_write, align 4
  %tobool2.not = icmp eq ptr %3, null
  br i1 %tobool2.not, label %lor.lhs.false.cleanup29_crit_edge, label %if.end

lor.lhs.false.cleanup29_crit_edge:                ; preds = %lor.lhs.false
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup29

if.end:                                           ; preds = %lor.lhs.false
  tail call fastcc void @trace_regmap_async_complete_start(ptr noundef %map)
  tail call void @__might_sleep(ptr noundef nonnull @.str.15, i32 noundef 3208) #24
  %async_lock.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 12
  %call2.i = tail call i32 @_raw_spin_lock_irqsave(ptr noundef %async_lock.i) #24
  %async_list.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 14
  %4 = ptrtoint ptr %async_list.i to i32
  call void @__asan_load4_noabort(i32 %4)
  %5 = load volatile ptr, ptr %async_list.i, align 4
  %cmp.i.i.not = icmp eq ptr %5, %async_list.i
  tail call void @_raw_spin_unlock_irqrestore(ptr noundef %async_lock.i, i32 noundef %call2.i) #24
  br i1 %cmp.i.i.not, label %if.end.do.body19_crit_edge, label %if.end9

if.end.do.body19_crit_edge:                       ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.body19

if.end9:                                          ; preds = %if.end
  call void @llvm.lifetime.start.p0(i64 20, ptr nonnull %__wq_entry) #24
  %6 = call ptr @memset(ptr %__wq_entry, i32 255, i32 20)
  call void @init_wait_entry(ptr noundef nonnull %__wq_entry, i32 noundef 0) #24
  %async_waitq = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 13
  %call1049 = call i32 @prepare_to_wait_event(ptr noundef %async_waitq, ptr noundef nonnull %__wq_entry, i32 noundef 2) #24
  %call2.i4350 = call i32 @_raw_spin_lock_irqsave(ptr noundef %async_lock.i) #24
  %7 = ptrtoint ptr %async_list.i to i32
  call void @__asan_load4_noabort(i32 %7)
  %8 = load volatile ptr, ptr %async_list.i, align 4
  %cmp.i.i45.not51 = icmp eq ptr %8, %async_list.i
  call void @_raw_spin_unlock_irqrestore(ptr noundef %async_lock.i, i32 noundef %call2.i4350) #24
  br i1 %cmp.i.i45.not51, label %if.end9.for.end_crit_edge, label %if.end9.cleanup_crit_edge

if.end9.cleanup_crit_edge:                        ; preds = %if.end9
  br label %cleanup

if.end9.for.end_crit_edge:                        ; preds = %if.end9
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.end

cleanup:                                          ; preds = %cleanup.cleanup_crit_edge, %if.end9.cleanup_crit_edge
  call void @schedule() #24
  %call10 = call i32 @prepare_to_wait_event(ptr noundef %async_waitq, ptr noundef nonnull %__wq_entry, i32 noundef 2) #24
  %call2.i43 = call i32 @_raw_spin_lock_irqsave(ptr noundef %async_lock.i) #24
  %9 = ptrtoint ptr %async_list.i to i32
  call void @__asan_load4_noabort(i32 %9)
  %10 = load volatile ptr, ptr %async_list.i, align 4
  %cmp.i.i45.not = icmp eq ptr %10, %async_list.i
  call void @_raw_spin_unlock_irqrestore(ptr noundef %async_lock.i, i32 noundef %call2.i43) #24
  br i1 %cmp.i.i45.not, label %cleanup.for.end_crit_edge, label %cleanup.cleanup_crit_edge

cleanup.cleanup_crit_edge:                        ; preds = %cleanup
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

cleanup.for.end_crit_edge:                        ; preds = %cleanup
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.end

for.end:                                          ; preds = %cleanup.for.end_crit_edge, %if.end9.for.end_crit_edge
  call void @finish_wait(ptr noundef %async_waitq, ptr noundef nonnull %__wq_entry) #24
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %__wq_entry) #24
  br label %do.body19

do.body19:                                        ; preds = %for.end, %if.end.do.body19_crit_edge
  %call22 = call i32 @_raw_spin_lock_irqsave(ptr noundef %async_lock.i) #24
  %async_ret = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 16
  %11 = ptrtoint ptr %async_ret to i32
  call void @__asan_load4_noabort(i32 %11)
  %12 = load i32, ptr %async_ret, align 4
  store i32 0, ptr %async_ret, align 4
  call void @_raw_spin_unlock_irqrestore(ptr noundef %async_lock.i, i32 noundef %call22) #24
  call fastcc void @trace_regmap_async_complete_done(ptr noundef %map)
  br label %cleanup29

cleanup29:                                        ; preds = %do.body19, %lor.lhs.false.cleanup29_crit_edge, %entry.cleanup29_crit_edge
  %retval.0 = phi i32 [ %12, %do.body19 ], [ 0, %lor.lhs.false.cleanup29_crit_edge ], [ 0, %entry.cleanup29_crit_edge ]
  ret i32 %retval.0
}

; Function Attrs: inlinehint nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal fastcc void @trace_regmap_async_complete_start(ptr noundef %map) unnamed_addr #14 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  callbr void asm sideeffect "1:\0A\09nop\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr getelementptr inbounds ({ ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr }, ptr @__tracepoint_regmap_async_complete_start, i32 0, i32 1, i32 0, i32 0), ptr blockaddress(@trace_regmap_async_complete_start, %do.body)) #24
          to label %if.end48 [label %do.body], !srcloc !391

do.body:                                          ; preds = %entry
  %0 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i = and i32 %0, -16384
  %1 = inttoptr i32 %and.i to ptr
  %cpu = getelementptr inbounds %struct.thread_info, ptr %1, i32 0, i32 3
  %2 = ptrtoint ptr %cpu to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load i32, ptr %cpu, align 4
  call void @__asan_load4_noabort(i32 ptrtoint (ptr @nr_cpu_ids to i32))
  %4 = load i32, ptr @nr_cpu_ids, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %4, i32 %3)
  %cmp.not.i.i.i.i = icmp ugt i32 %4, %3
  br i1 %cmp.not.i.i.i.i, label %do.body.cpu_online.exit_crit_edge, label %land.rhs.i.i.i.i

do.body.cpu_online.exit_crit_edge:                ; preds = %do.body
  call void @__sanitizer_cov_trace_pc() #26
  br label %cpu_online.exit

land.rhs.i.i.i.i:                                 ; preds = %do.body
  %.b37.i.i.i.i = load i1, ptr @cpu_max_bits_warn.__already_done, align 1
  br i1 %.b37.i.i.i.i, label %land.rhs.i.i.i.i.cpu_online.exit_crit_edge, label %if.then.i.i.i.i, !prof !386

land.rhs.i.i.i.i.cpu_online.exit_crit_edge:       ; preds = %land.rhs.i.i.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %cpu_online.exit

if.then.i.i.i.i:                                  ; preds = %land.rhs.i.i.i.i
  call void @__sanitizer_cov_trace_pc() #26
  store i1 true, ptr @cpu_max_bits_warn.__already_done, align 1
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.62, i32 noundef 108, i32 noundef 9, ptr noundef null) #24
  br label %cpu_online.exit

cpu_online.exit:                                  ; preds = %if.then.i.i.i.i, %land.rhs.i.i.i.i.cpu_online.exit_crit_edge, %do.body.cpu_online.exit_crit_edge
  %div1.i.i.i = lshr i32 %3, 5
  %arrayidx.i.i.i = getelementptr i32, ptr @__cpu_online_mask, i32 %div1.i.i.i
  %5 = ptrtoint ptr %arrayidx.i.i.i to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load volatile i32, ptr %arrayidx.i.i.i, align 4
  %and.i.i.i75 = and i32 %3, 31
  %7 = shl nuw i32 1, %and.i.i.i75
  %8 = and i32 %6, %7
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %8)
  %tobool.i.not = icmp eq i32 %8, 0
  br i1 %tobool.i.not, label %cpu_online.exit.if.end69_crit_edge, label %if.end31

cpu_online.exit.if.end69_crit_edge:               ; preds = %cpu_online.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end69

if.end31:                                         ; preds = %cpu_online.exit
  %9 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i.i.i = and i32 %9, -16384
  %10 = inttoptr i32 %and.i.i.i to ptr
  %preempt_count.i.i = getelementptr inbounds %struct.thread_info, ptr %10, i32 0, i32 1
  %11 = ptrtoint ptr %preempt_count.i.i to i32
  call void @__asan_load4_noabort(i32 %11)
  %12 = load volatile i32, ptr %preempt_count.i.i, align 4
  %add.i = add i32 %12, 1
  store volatile i32 %add.i, ptr %preempt_count.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !398
  %13 = load volatile ptr, ptr getelementptr inbounds ({ ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr }, ptr @__tracepoint_regmap_async_complete_start, i32 0, i32 7), align 4
  %tobool.not.i = icmp eq ptr %13, null
  br i1 %tobool.not.i, label %if.end48.critedge, label %if.end31.do.body2.i_crit_edge

if.end31.do.body2.i_crit_edge:                    ; preds = %if.end31
  br label %do.body2.i

do.body2.i:                                       ; preds = %do.body2.i.do.body2.i_crit_edge, %if.end31.do.body2.i_crit_edge
  %it_func_ptr.0.i = phi ptr [ %incdec.ptr.i, %do.body2.i.do.body2.i_crit_edge ], [ %13, %if.end31.do.body2.i_crit_edge ]
  %14 = ptrtoint ptr %it_func_ptr.0.i to i32
  call void @__asan_load4_noabort(i32 %14)
  %15 = load volatile ptr, ptr %it_func_ptr.0.i, align 4
  %data.i = getelementptr inbounds %struct.tracepoint_func, ptr %it_func_ptr.0.i, i32 0, i32 1
  %16 = ptrtoint ptr %data.i to i32
  call void @__asan_load4_noabort(i32 %16)
  %17 = load ptr, ptr %data.i, align 4
  tail call void %15(ptr noundef %17, ptr noundef %map) #24
  %incdec.ptr.i = getelementptr %struct.tracepoint_func, ptr %it_func_ptr.0.i, i32 1
  %18 = ptrtoint ptr %incdec.ptr.i to i32
  call void @__asan_load4_noabort(i32 %18)
  %19 = load ptr, ptr %incdec.ptr.i, align 4
  %tobool9.not.i = icmp eq ptr %19, null
  br i1 %tobool9.not.i, label %cleanup, label %do.body2.i.do.body2.i_crit_edge

do.body2.i.do.body2.i_crit_edge:                  ; preds = %do.body2.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.body2.i

cleanup:                                          ; preds = %do.body2.i
  call void @__sanitizer_cov_trace_pc() #26
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !399
  br label %if.end48.sink.split

if.end48.critedge:                                ; preds = %if.end31
  call void @__sanitizer_cov_trace_pc() #26
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !399
  br label %if.end48.sink.split

if.end48.sink.split:                              ; preds = %if.end48.critedge, %cleanup
  %20 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i.i.i73.c = and i32 %20, -16384
  %21 = inttoptr i32 %and.i.i.i73.c to ptr
  %preempt_count.i.i74.c = getelementptr inbounds %struct.thread_info, ptr %21, i32 0, i32 1
  %22 = ptrtoint ptr %preempt_count.i.i74.c to i32
  call void @__asan_load4_noabort(i32 %22)
  %23 = load volatile i32, ptr %preempt_count.i.i74.c, align 4
  %sub.i = add i32 %23, -1
  store volatile i32 %sub.i, ptr %preempt_count.i.i74.c, align 4
  br label %if.end48

if.end48:                                         ; preds = %if.end48.sink.split, %entry
  %24 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i76 = and i32 %24, -16384
  %25 = inttoptr i32 %and.i76 to ptr
  %cpu50 = getelementptr inbounds %struct.thread_info, ptr %25, i32 0, i32 3
  %26 = ptrtoint ptr %cpu50 to i32
  call void @__asan_load4_noabort(i32 %26)
  %27 = load i32, ptr %cpu50, align 4
  call void @__asan_load4_noabort(i32 ptrtoint (ptr @nr_cpu_ids to i32))
  %28 = load i32, ptr @nr_cpu_ids, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %28, i32 %27)
  %cmp.not.i.i.i.i77 = icmp ugt i32 %28, %27
  br i1 %cmp.not.i.i.i.i77, label %if.end48.cpu_online.exit85_crit_edge, label %land.rhs.i.i.i.i79

if.end48.cpu_online.exit85_crit_edge:             ; preds = %if.end48
  call void @__sanitizer_cov_trace_pc() #26
  br label %cpu_online.exit85

land.rhs.i.i.i.i79:                               ; preds = %if.end48
  %.b37.i.i.i.i78 = load i1, ptr @cpu_max_bits_warn.__already_done, align 1
  br i1 %.b37.i.i.i.i78, label %land.rhs.i.i.i.i79.cpu_online.exit85_crit_edge, label %if.then.i.i.i.i80, !prof !386

land.rhs.i.i.i.i79.cpu_online.exit85_crit_edge:   ; preds = %land.rhs.i.i.i.i79
  call void @__sanitizer_cov_trace_pc() #26
  br label %cpu_online.exit85

if.then.i.i.i.i80:                                ; preds = %land.rhs.i.i.i.i79
  call void @__sanitizer_cov_trace_pc() #26
  store i1 true, ptr @cpu_max_bits_warn.__already_done, align 1
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.62, i32 noundef 108, i32 noundef 9, ptr noundef null) #24
  br label %cpu_online.exit85

cpu_online.exit85:                                ; preds = %if.then.i.i.i.i80, %land.rhs.i.i.i.i79.cpu_online.exit85_crit_edge, %if.end48.cpu_online.exit85_crit_edge
  %div1.i.i.i81 = lshr i32 %27, 5
  %arrayidx.i.i.i82 = getelementptr i32, ptr @__cpu_online_mask, i32 %div1.i.i.i81
  %29 = ptrtoint ptr %arrayidx.i.i.i82 to i32
  call void @__asan_load4_noabort(i32 %29)
  %30 = load volatile i32, ptr %arrayidx.i.i.i82, align 4
  %and.i.i.i83 = and i32 %27, 31
  %31 = shl nuw i32 1, %and.i.i.i83
  %32 = and i32 %30, %31
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %32)
  %tobool.i84.not = icmp eq i32 %32, 0
  br i1 %tobool.i84.not, label %cpu_online.exit85.if.end69_crit_edge, label %if.then52

cpu_online.exit85.if.end69_crit_edge:             ; preds = %cpu_online.exit85
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end69

if.then52:                                        ; preds = %cpu_online.exit85
  %33 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i.i.i.i = and i32 %33, -16384
  %34 = inttoptr i32 %and.i.i.i.i to ptr
  %preempt_count.i.i.i = getelementptr inbounds %struct.thread_info, ptr %34, i32 0, i32 1
  %35 = ptrtoint ptr %preempt_count.i.i.i to i32
  call void @__asan_load4_noabort(i32 %35)
  %36 = load volatile i32, ptr %preempt_count.i.i.i, align 4
  %add.i.i = add i32 %36, 1
  store volatile i32 %add.i.i, ptr %preempt_count.i.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !394
  %37 = load volatile ptr, ptr getelementptr inbounds ({ ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr }, ptr @__tracepoint_regmap_async_complete_start, i32 0, i32 7), align 4
  %call58 = tail call i32 @rcu_read_lock_sched_held() #24
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call58)
  %tobool59.not = icmp eq i32 %call58, 0
  br i1 %tobool59.not, label %land.lhs.true, label %if.then52.do.end67_crit_edge

if.then52.do.end67_crit_edge:                     ; preds = %if.then52
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.end67

land.lhs.true:                                    ; preds = %if.then52
  %call60 = tail call i32 @debug_lockdep_rcu_enabled() #24
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call60)
  %tobool61.not = icmp eq i32 %call60, 0
  br i1 %tobool61.not, label %land.lhs.true.do.end67_crit_edge, label %land.lhs.true62

land.lhs.true.do.end67_crit_edge:                 ; preds = %land.lhs.true
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.end67

land.lhs.true62:                                  ; preds = %land.lhs.true
  %.b72 = load i1, ptr @trace_regmap_async_complete_start.__warned, align 1
  br i1 %.b72, label %land.lhs.true62.do.end67_crit_edge, label %if.then64

land.lhs.true62.do.end67_crit_edge:               ; preds = %land.lhs.true62
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.end67

if.then64:                                        ; preds = %land.lhs.true62
  call void @__sanitizer_cov_trace_pc() #26
  store i1 true, ptr @trace_regmap_async_complete_start.__warned, align 1
  tail call void @lockdep_rcu_suspicious(ptr noundef nonnull @.str.60, i32 noundef 215, ptr noundef nonnull @.str.61) #24
  br label %do.end67

do.end67:                                         ; preds = %if.then64, %land.lhs.true62.do.end67_crit_edge, %land.lhs.true.do.end67_crit_edge, %if.then52.do.end67_crit_edge
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !395
  %38 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i.i.i.i86 = and i32 %38, -16384
  %39 = inttoptr i32 %and.i.i.i.i86 to ptr
  %preempt_count.i.i.i87 = getelementptr inbounds %struct.thread_info, ptr %39, i32 0, i32 1
  %40 = ptrtoint ptr %preempt_count.i.i.i87 to i32
  call void @__asan_load4_noabort(i32 %40)
  %41 = load volatile i32, ptr %preempt_count.i.i.i87, align 4
  %sub.i.i = add i32 %41, -1
  store volatile i32 %sub.i.i, ptr %preempt_count.i.i.i87, align 4
  br label %if.end69

if.end69:                                         ; preds = %do.end67, %cpu_online.exit85.if.end69_crit_edge, %cpu_online.exit.if.end69_crit_edge
  ret void
}

; Function Attrs: null_pointer_is_valid
declare dso_local void @__might_sleep(ptr noundef, i32 noundef) local_unnamed_addr #2

; Function Attrs: null_pointer_is_valid
declare dso_local void @init_wait_entry(ptr noundef, i32 noundef) local_unnamed_addr #2

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @prepare_to_wait_event(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #2

; Function Attrs: null_pointer_is_valid
declare dso_local void @schedule() local_unnamed_addr #2

; Function Attrs: null_pointer_is_valid
declare dso_local void @finish_wait(ptr noundef, ptr noundef) local_unnamed_addr #2

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @_raw_spin_lock_irqsave(ptr noundef) local_unnamed_addr #2 section ".spinlock.text"

; Function Attrs: inlinehint nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal fastcc void @trace_regmap_async_complete_done(ptr noundef %map) unnamed_addr #14 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  callbr void asm sideeffect "1:\0A\09nop\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr getelementptr inbounds ({ ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr }, ptr @__tracepoint_regmap_async_complete_done, i32 0, i32 1, i32 0, i32 0), ptr blockaddress(@trace_regmap_async_complete_done, %do.body)) #24
          to label %if.end48 [label %do.body], !srcloc !391

do.body:                                          ; preds = %entry
  %0 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i = and i32 %0, -16384
  %1 = inttoptr i32 %and.i to ptr
  %cpu = getelementptr inbounds %struct.thread_info, ptr %1, i32 0, i32 3
  %2 = ptrtoint ptr %cpu to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load i32, ptr %cpu, align 4
  call void @__asan_load4_noabort(i32 ptrtoint (ptr @nr_cpu_ids to i32))
  %4 = load i32, ptr @nr_cpu_ids, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %4, i32 %3)
  %cmp.not.i.i.i.i = icmp ugt i32 %4, %3
  br i1 %cmp.not.i.i.i.i, label %do.body.cpu_online.exit_crit_edge, label %land.rhs.i.i.i.i

do.body.cpu_online.exit_crit_edge:                ; preds = %do.body
  call void @__sanitizer_cov_trace_pc() #26
  br label %cpu_online.exit

land.rhs.i.i.i.i:                                 ; preds = %do.body
  %.b37.i.i.i.i = load i1, ptr @cpu_max_bits_warn.__already_done, align 1
  br i1 %.b37.i.i.i.i, label %land.rhs.i.i.i.i.cpu_online.exit_crit_edge, label %if.then.i.i.i.i, !prof !386

land.rhs.i.i.i.i.cpu_online.exit_crit_edge:       ; preds = %land.rhs.i.i.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %cpu_online.exit

if.then.i.i.i.i:                                  ; preds = %land.rhs.i.i.i.i
  call void @__sanitizer_cov_trace_pc() #26
  store i1 true, ptr @cpu_max_bits_warn.__already_done, align 1
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.62, i32 noundef 108, i32 noundef 9, ptr noundef null) #24
  br label %cpu_online.exit

cpu_online.exit:                                  ; preds = %if.then.i.i.i.i, %land.rhs.i.i.i.i.cpu_online.exit_crit_edge, %do.body.cpu_online.exit_crit_edge
  %div1.i.i.i = lshr i32 %3, 5
  %arrayidx.i.i.i = getelementptr i32, ptr @__cpu_online_mask, i32 %div1.i.i.i
  %5 = ptrtoint ptr %arrayidx.i.i.i to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load volatile i32, ptr %arrayidx.i.i.i, align 4
  %and.i.i.i75 = and i32 %3, 31
  %7 = shl nuw i32 1, %and.i.i.i75
  %8 = and i32 %6, %7
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %8)
  %tobool.i.not = icmp eq i32 %8, 0
  br i1 %tobool.i.not, label %cpu_online.exit.if.end69_crit_edge, label %if.end31

cpu_online.exit.if.end69_crit_edge:               ; preds = %cpu_online.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end69

if.end31:                                         ; preds = %cpu_online.exit
  %9 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i.i.i = and i32 %9, -16384
  %10 = inttoptr i32 %and.i.i.i to ptr
  %preempt_count.i.i = getelementptr inbounds %struct.thread_info, ptr %10, i32 0, i32 1
  %11 = ptrtoint ptr %preempt_count.i.i to i32
  call void @__asan_load4_noabort(i32 %11)
  %12 = load volatile i32, ptr %preempt_count.i.i, align 4
  %add.i = add i32 %12, 1
  store volatile i32 %add.i, ptr %preempt_count.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !400
  %13 = load volatile ptr, ptr getelementptr inbounds ({ ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr }, ptr @__tracepoint_regmap_async_complete_done, i32 0, i32 7), align 4
  %tobool.not.i = icmp eq ptr %13, null
  br i1 %tobool.not.i, label %if.end48.critedge, label %if.end31.do.body2.i_crit_edge

if.end31.do.body2.i_crit_edge:                    ; preds = %if.end31
  br label %do.body2.i

do.body2.i:                                       ; preds = %do.body2.i.do.body2.i_crit_edge, %if.end31.do.body2.i_crit_edge
  %it_func_ptr.0.i = phi ptr [ %incdec.ptr.i, %do.body2.i.do.body2.i_crit_edge ], [ %13, %if.end31.do.body2.i_crit_edge ]
  %14 = ptrtoint ptr %it_func_ptr.0.i to i32
  call void @__asan_load4_noabort(i32 %14)
  %15 = load volatile ptr, ptr %it_func_ptr.0.i, align 4
  %data.i = getelementptr inbounds %struct.tracepoint_func, ptr %it_func_ptr.0.i, i32 0, i32 1
  %16 = ptrtoint ptr %data.i to i32
  call void @__asan_load4_noabort(i32 %16)
  %17 = load ptr, ptr %data.i, align 4
  tail call void %15(ptr noundef %17, ptr noundef %map) #24
  %incdec.ptr.i = getelementptr %struct.tracepoint_func, ptr %it_func_ptr.0.i, i32 1
  %18 = ptrtoint ptr %incdec.ptr.i to i32
  call void @__asan_load4_noabort(i32 %18)
  %19 = load ptr, ptr %incdec.ptr.i, align 4
  %tobool9.not.i = icmp eq ptr %19, null
  br i1 %tobool9.not.i, label %cleanup, label %do.body2.i.do.body2.i_crit_edge

do.body2.i.do.body2.i_crit_edge:                  ; preds = %do.body2.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.body2.i

cleanup:                                          ; preds = %do.body2.i
  call void @__sanitizer_cov_trace_pc() #26
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !401
  br label %if.end48.sink.split

if.end48.critedge:                                ; preds = %if.end31
  call void @__sanitizer_cov_trace_pc() #26
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !401
  br label %if.end48.sink.split

if.end48.sink.split:                              ; preds = %if.end48.critedge, %cleanup
  %20 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i.i.i73.c = and i32 %20, -16384
  %21 = inttoptr i32 %and.i.i.i73.c to ptr
  %preempt_count.i.i74.c = getelementptr inbounds %struct.thread_info, ptr %21, i32 0, i32 1
  %22 = ptrtoint ptr %preempt_count.i.i74.c to i32
  call void @__asan_load4_noabort(i32 %22)
  %23 = load volatile i32, ptr %preempt_count.i.i74.c, align 4
  %sub.i = add i32 %23, -1
  store volatile i32 %sub.i, ptr %preempt_count.i.i74.c, align 4
  br label %if.end48

if.end48:                                         ; preds = %if.end48.sink.split, %entry
  %24 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i76 = and i32 %24, -16384
  %25 = inttoptr i32 %and.i76 to ptr
  %cpu50 = getelementptr inbounds %struct.thread_info, ptr %25, i32 0, i32 3
  %26 = ptrtoint ptr %cpu50 to i32
  call void @__asan_load4_noabort(i32 %26)
  %27 = load i32, ptr %cpu50, align 4
  call void @__asan_load4_noabort(i32 ptrtoint (ptr @nr_cpu_ids to i32))
  %28 = load i32, ptr @nr_cpu_ids, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %28, i32 %27)
  %cmp.not.i.i.i.i77 = icmp ugt i32 %28, %27
  br i1 %cmp.not.i.i.i.i77, label %if.end48.cpu_online.exit85_crit_edge, label %land.rhs.i.i.i.i79

if.end48.cpu_online.exit85_crit_edge:             ; preds = %if.end48
  call void @__sanitizer_cov_trace_pc() #26
  br label %cpu_online.exit85

land.rhs.i.i.i.i79:                               ; preds = %if.end48
  %.b37.i.i.i.i78 = load i1, ptr @cpu_max_bits_warn.__already_done, align 1
  br i1 %.b37.i.i.i.i78, label %land.rhs.i.i.i.i79.cpu_online.exit85_crit_edge, label %if.then.i.i.i.i80, !prof !386

land.rhs.i.i.i.i79.cpu_online.exit85_crit_edge:   ; preds = %land.rhs.i.i.i.i79
  call void @__sanitizer_cov_trace_pc() #26
  br label %cpu_online.exit85

if.then.i.i.i.i80:                                ; preds = %land.rhs.i.i.i.i79
  call void @__sanitizer_cov_trace_pc() #26
  store i1 true, ptr @cpu_max_bits_warn.__already_done, align 1
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.62, i32 noundef 108, i32 noundef 9, ptr noundef null) #24
  br label %cpu_online.exit85

cpu_online.exit85:                                ; preds = %if.then.i.i.i.i80, %land.rhs.i.i.i.i79.cpu_online.exit85_crit_edge, %if.end48.cpu_online.exit85_crit_edge
  %div1.i.i.i81 = lshr i32 %27, 5
  %arrayidx.i.i.i82 = getelementptr i32, ptr @__cpu_online_mask, i32 %div1.i.i.i81
  %29 = ptrtoint ptr %arrayidx.i.i.i82 to i32
  call void @__asan_load4_noabort(i32 %29)
  %30 = load volatile i32, ptr %arrayidx.i.i.i82, align 4
  %and.i.i.i83 = and i32 %27, 31
  %31 = shl nuw i32 1, %and.i.i.i83
  %32 = and i32 %30, %31
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %32)
  %tobool.i84.not = icmp eq i32 %32, 0
  br i1 %tobool.i84.not, label %cpu_online.exit85.if.end69_crit_edge, label %if.then52

cpu_online.exit85.if.end69_crit_edge:             ; preds = %cpu_online.exit85
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end69

if.then52:                                        ; preds = %cpu_online.exit85
  %33 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i.i.i.i = and i32 %33, -16384
  %34 = inttoptr i32 %and.i.i.i.i to ptr
  %preempt_count.i.i.i = getelementptr inbounds %struct.thread_info, ptr %34, i32 0, i32 1
  %35 = ptrtoint ptr %preempt_count.i.i.i to i32
  call void @__asan_load4_noabort(i32 %35)
  %36 = load volatile i32, ptr %preempt_count.i.i.i, align 4
  %add.i.i = add i32 %36, 1
  store volatile i32 %add.i.i, ptr %preempt_count.i.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !394
  %37 = load volatile ptr, ptr getelementptr inbounds ({ ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr }, ptr @__tracepoint_regmap_async_complete_done, i32 0, i32 7), align 4
  %call58 = tail call i32 @rcu_read_lock_sched_held() #24
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call58)
  %tobool59.not = icmp eq i32 %call58, 0
  br i1 %tobool59.not, label %land.lhs.true, label %if.then52.do.end67_crit_edge

if.then52.do.end67_crit_edge:                     ; preds = %if.then52
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.end67

land.lhs.true:                                    ; preds = %if.then52
  %call60 = tail call i32 @debug_lockdep_rcu_enabled() #24
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call60)
  %tobool61.not = icmp eq i32 %call60, 0
  br i1 %tobool61.not, label %land.lhs.true.do.end67_crit_edge, label %land.lhs.true62

land.lhs.true.do.end67_crit_edge:                 ; preds = %land.lhs.true
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.end67

land.lhs.true62:                                  ; preds = %land.lhs.true
  %.b72 = load i1, ptr @trace_regmap_async_complete_done.__warned, align 1
  br i1 %.b72, label %land.lhs.true62.do.end67_crit_edge, label %if.then64

land.lhs.true62.do.end67_crit_edge:               ; preds = %land.lhs.true62
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.end67

if.then64:                                        ; preds = %land.lhs.true62
  call void @__sanitizer_cov_trace_pc() #26
  store i1 true, ptr @trace_regmap_async_complete_done.__warned, align 1
  tail call void @lockdep_rcu_suspicious(ptr noundef nonnull @.str.60, i32 noundef 223, ptr noundef nonnull @.str.61) #24
  br label %do.end67

do.end67:                                         ; preds = %if.then64, %land.lhs.true62.do.end67_crit_edge, %land.lhs.true.do.end67_crit_edge, %if.then52.do.end67_crit_edge
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !395
  %38 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i.i.i.i86 = and i32 %38, -16384
  %39 = inttoptr i32 %and.i.i.i.i86 to ptr
  %preempt_count.i.i.i87 = getelementptr inbounds %struct.thread_info, ptr %39, i32 0, i32 1
  %40 = ptrtoint ptr %preempt_count.i.i.i87 to i32
  call void @__asan_load4_noabort(i32 %40)
  %41 = load volatile i32, ptr %preempt_count.i.i.i87, align 4
  %sub.i.i = add i32 %41, -1
  store volatile i32 %sub.i.i, ptr %preempt_count.i.i.i87, align 4
  br label %if.end69

if.end69:                                         ; preds = %do.end67, %cpu_online.exit85.if.end69_crit_edge, %cpu_online.exit.if.end69_crit_edge
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @regmap_register_patch(ptr noundef %map, ptr noundef %regs, i32 noundef %num_regs) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  call void @__sanitizer_cov_trace_const_cmp4(i32 1, i32 %num_regs)
  %cmp = icmp slt i32 %num_regs, 1
  br i1 %cmp, label %land.rhs, label %if.end37

land.rhs:                                         ; preds = %entry
  %.b83 = load i1, ptr @regmap_register_patch.__already_done, align 1
  br i1 %.b83, label %land.rhs.cleanup_crit_edge, label %if.then, !prof !386

land.rhs.cleanup_crit_edge:                       ; preds = %land.rhs
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.then:                                          ; preds = %land.rhs
  call void @__sanitizer_cov_trace_pc() #26
  store i1 true, ptr @regmap_register_patch.__already_done, align 1
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.15, i32 noundef 3246, i32 noundef 9, ptr noundef nonnull @.str.40, i32 noundef %num_regs) #24
  br label %cleanup

if.end37:                                         ; preds = %entry
  %patch = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 61
  %0 = ptrtoint ptr %patch to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %patch, align 4
  %patch_regs = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 62
  %2 = ptrtoint ptr %patch_regs to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load i32, ptr %patch_regs, align 4
  %add = add i32 %3, %num_regs
  %mul = mul i32 %add, 12
  %call = tail call noalias ptr @krealloc(ptr noundef %1, i32 noundef %mul, i32 noundef 3264) #32
  %tobool38.not = icmp eq ptr %call, null
  br i1 %tobool38.not, label %if.end37.cleanup_crit_edge, label %if.then39

if.end37.cleanup_crit_edge:                       ; preds = %if.end37
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.then39:                                        ; preds = %if.end37
  call void @__sanitizer_cov_trace_pc() #26
  %4 = ptrtoint ptr %patch_regs to i32
  call void @__asan_load4_noabort(i32 %4)
  %5 = load i32, ptr %patch_regs, align 4
  %add.ptr = getelementptr %struct.reg_sequence, ptr %call, i32 %5
  %mul41 = mul i32 %num_regs, 12
  %6 = call ptr @memcpy(ptr %add.ptr, ptr %regs, i32 %mul41)
  %7 = ptrtoint ptr %patch to i32
  call void @__asan_store4_noabort(i32 %7)
  store ptr %call, ptr %patch, align 4
  %add44 = add i32 %5, %num_regs
  store i32 %add44, ptr %patch_regs, align 4
  %lock = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 1
  %8 = ptrtoint ptr %lock to i32
  call void @__asan_load4_noabort(i32 %8)
  %9 = load ptr, ptr %lock, align 4
  %lock_arg = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 3
  %10 = ptrtoint ptr %lock_arg to i32
  call void @__asan_load4_noabort(i32 %10)
  %11 = load ptr, ptr %lock_arg, align 4
  tail call void %9(ptr noundef %11) #24
  %cache_bypass = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 54
  %12 = ptrtoint ptr %cache_bypass to i32
  call void @__asan_load1_noabort(i32 %12)
  %13 = load i8, ptr %cache_bypass, align 1, !range !389
  store i8 1, ptr %cache_bypass, align 1
  %async = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 11
  %14 = ptrtoint ptr %async to i32
  call void @__asan_store1_noabort(i32 %14)
  store i8 1, ptr %async, align 4
  %call49 = tail call fastcc i32 @_regmap_multi_reg_write(ptr noundef %map, ptr noundef %regs, i32 noundef %num_regs)
  %15 = ptrtoint ptr %async to i32
  call void @__asan_store1_noabort(i32 %15)
  store i8 0, ptr %async, align 4
  %16 = ptrtoint ptr %cache_bypass to i32
  call void @__asan_store1_noabort(i32 %16)
  store i8 %13, ptr %cache_bypass, align 1
  %unlock = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 2
  %17 = ptrtoint ptr %unlock to i32
  call void @__asan_load4_noabort(i32 %17)
  %18 = load ptr, ptr %unlock, align 4
  %19 = ptrtoint ptr %lock_arg to i32
  call void @__asan_load4_noabort(i32 %19)
  %20 = load ptr, ptr %lock_arg, align 4
  tail call void %18(ptr noundef %20) #24
  %call55 = tail call i32 @regmap_async_complete(ptr noundef %map)
  br label %cleanup

cleanup:                                          ; preds = %if.then39, %if.end37.cleanup_crit_edge, %if.then, %land.rhs.cleanup_crit_edge
  %retval.0 = phi i32 [ %call49, %if.then39 ], [ 0, %if.then ], [ -12, %if.end37.cleanup_crit_edge ], [ 0, %land.rhs.cleanup_crit_edge ]
  ret i32 %retval.0
}

; Function Attrs: null_pointer_is_valid
declare dso_local void @warn_slowpath_fmt(ptr noundef, i32 noundef, i32 noundef, ptr noundef, ...) local_unnamed_addr #2

; Function Attrs: null_pointer_is_valid allocsize(1)
declare dso_local noalias ptr @krealloc(ptr noundef, i32 noundef, i32 noundef) local_unnamed_addr #15

; Function Attrs: argmemonly mustprogress nofree norecurse nosync nounwind null_pointer_is_valid readonly sanitize_address sspstrong willreturn uwtable(sync)
define dso_local i32 @regmap_get_val_bytes(ptr nocapture noundef readonly %map) #8 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %format_write = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 7, i32 4
  %0 = ptrtoint ptr %format_write to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %format_write, align 4
  %tobool.not = icmp eq ptr %1, null
  br i1 %tobool.not, label %if.end, label %entry.return_crit_edge

entry.return_crit_edge:                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %return

if.end:                                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  %val_bytes = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 7, i32 3
  %2 = ptrtoint ptr %val_bytes to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load i32, ptr %val_bytes, align 4
  br label %return

return:                                           ; preds = %if.end, %entry.return_crit_edge
  %retval.0 = phi i32 [ %3, %if.end ], [ -22, %entry.return_crit_edge ]
  ret i32 %retval.0
}

; Function Attrs: argmemonly mustprogress nofree norecurse nosync nounwind null_pointer_is_valid readonly sanitize_address sspstrong willreturn uwtable(sync)
define dso_local i32 @regmap_get_max_register(ptr nocapture noundef readonly %map) #8 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %max_register = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 25
  %0 = ptrtoint ptr %max_register to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load i32, ptr %max_register, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %1)
  %tobool.not = icmp eq i32 %1, 0
  %spec.select = select i1 %tobool.not, i32 -22, i32 %1
  ret i32 %spec.select
}

; Function Attrs: argmemonly mustprogress nofree norecurse nosync nounwind null_pointer_is_valid readonly sanitize_address sspstrong willreturn uwtable(sync)
define dso_local i32 @regmap_get_reg_stride(ptr nocapture noundef readonly %map) #8 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %reg_stride = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 45
  %0 = ptrtoint ptr %reg_stride to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load i32, ptr %reg_stride, align 4
  ret i32 %1
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @regmap_parse_val(ptr nocapture noundef readonly %map, ptr noundef %buf, ptr nocapture noundef writeonly %val) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %parse_val = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 7, i32 7
  %0 = ptrtoint ptr %parse_val to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %parse_val, align 4
  %tobool.not = icmp eq ptr %1, null
  br i1 %tobool.not, label %entry.return_crit_edge, label %if.end

entry.return_crit_edge:                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %return

if.end:                                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  %call = tail call i32 %1(ptr noundef %buf) #24
  %2 = ptrtoint ptr %val to i32
  call void @__asan_store4_noabort(i32 %2)
  store i32 %call, ptr %val, align 4
  br label %return

return:                                           ; preds = %if.end, %entry.return_crit_edge
  %retval.0 = phi i32 [ 0, %if.end ], [ -22, %entry.return_crit_edge ]
  ret i32 %retval.0
}

; Function Attrs: cold nounwind null_pointer_is_valid optsize sanitize_address sspstrong uwtable(sync)
define internal i32 @regmap_initcall() #16 section ".init.text" align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  tail call void @regmap_debugfs_initcall() #24
  ret i32 0
}

; Function Attrs: null_pointer_is_valid
declare dso_local ptr @trace_event_buffer_reserve(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #2

; Function Attrs: argmemonly mustprogress nofree nounwind null_pointer_is_valid willreturn
declare dso_local ptr @strcpy(ptr noalias noundef returned writeonly, ptr noalias nocapture noundef readonly) local_unnamed_addr #17

; Function Attrs: null_pointer_is_valid
declare dso_local void @trace_event_buffer_commit(ptr noundef) local_unnamed_addr #2

; Function Attrs: null_pointer_is_valid
declare dso_local zeroext i1 @__trace_trigger_soft_disabled(ptr noundef) local_unnamed_addr #2

; Function Attrs: argmemonly mustprogress nofree nounwind null_pointer_is_valid readonly willreturn
declare dso_local i32 @strlen(ptr nocapture noundef) local_unnamed_addr #18

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal i32 @trace_raw_output_regmap_reg(ptr noundef %iter, i32 noundef %flags, ptr noundef %trace_event) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  %ent = getelementptr inbounds %struct.trace_iterator, ptr %iter, i32 0, i32 16
  %0 = ptrtoint ptr %ent to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %ent, align 8
  %call = tail call i32 @trace_raw_output_prep(ptr noundef %iter, ptr noundef %trace_event) #24
  call void @__sanitizer_cov_trace_const_cmp4(i32 1, i32 %call)
  %cmp.not = icmp eq i32 %call, 1
  br i1 %cmp.not, label %if.end, label %entry.cleanup_crit_edge

entry.cleanup_crit_edge:                          ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end:                                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  %seq = getelementptr inbounds %struct.trace_iterator, ptr %iter, i32 0, i32 15
  %__data_loc_name = getelementptr inbounds %struct.trace_event_raw_regmap_reg, ptr %1, i32 0, i32 1
  %2 = ptrtoint ptr %__data_loc_name to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load i32, ptr %__data_loc_name, align 4
  %and = and i32 %3, 65535
  %add.ptr = getelementptr i8, ptr %1, i32 %and
  %reg = getelementptr inbounds %struct.trace_event_raw_regmap_reg, ptr %1, i32 0, i32 2
  %4 = ptrtoint ptr %reg to i32
  call void @__asan_load4_noabort(i32 %4)
  %5 = load i32, ptr %reg, align 4
  %val = getelementptr inbounds %struct.trace_event_raw_regmap_reg, ptr %1, i32 0, i32 3
  %6 = ptrtoint ptr %val to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load i32, ptr %val, align 4
  tail call void (ptr, ptr, ...) @trace_event_printf(ptr noundef %iter, ptr noundef nonnull @.str.47, ptr noundef %add.ptr, i32 noundef %5, i32 noundef %7) #24
  %call1 = tail call i32 @trace_handle_return(ptr noundef %seq) #24
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry.cleanup_crit_edge
  %retval.0 = phi i32 [ %call1, %if.end ], [ %call, %entry.cleanup_crit_edge ]
  ret i32 %retval.0
}

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @trace_raw_output_prep(ptr noundef, ptr noundef) local_unnamed_addr #2

; Function Attrs: null_pointer_is_valid
declare dso_local void @trace_event_printf(ptr noundef, ptr noundef, ...) local_unnamed_addr #2

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @trace_handle_return(ptr noundef) local_unnamed_addr #2

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal i32 @trace_raw_output_regmap_block(ptr noundef %iter, i32 noundef %flags, ptr noundef %trace_event) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  %ent = getelementptr inbounds %struct.trace_iterator, ptr %iter, i32 0, i32 16
  %0 = ptrtoint ptr %ent to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %ent, align 8
  %call = tail call i32 @trace_raw_output_prep(ptr noundef %iter, ptr noundef %trace_event) #24
  call void @__sanitizer_cov_trace_const_cmp4(i32 1, i32 %call)
  %cmp.not = icmp eq i32 %call, 1
  br i1 %cmp.not, label %if.end, label %entry.cleanup_crit_edge

entry.cleanup_crit_edge:                          ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end:                                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  %seq = getelementptr inbounds %struct.trace_iterator, ptr %iter, i32 0, i32 15
  %__data_loc_name = getelementptr inbounds %struct.trace_event_raw_regmap_block, ptr %1, i32 0, i32 1
  %2 = ptrtoint ptr %__data_loc_name to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load i32, ptr %__data_loc_name, align 4
  %and = and i32 %3, 65535
  %add.ptr = getelementptr i8, ptr %1, i32 %and
  %reg = getelementptr inbounds %struct.trace_event_raw_regmap_block, ptr %1, i32 0, i32 2
  %4 = ptrtoint ptr %reg to i32
  call void @__asan_load4_noabort(i32 %4)
  %5 = load i32, ptr %reg, align 4
  %count = getelementptr inbounds %struct.trace_event_raw_regmap_block, ptr %1, i32 0, i32 3
  %6 = ptrtoint ptr %count to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load i32, ptr %count, align 4
  tail call void (ptr, ptr, ...) @trace_event_printf(ptr noundef %iter, ptr noundef nonnull @.str.50, ptr noundef %add.ptr, i32 noundef %5, i32 noundef %7) #24
  %call1 = tail call i32 @trace_handle_return(ptr noundef %seq) #24
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry.cleanup_crit_edge
  %retval.0 = phi i32 [ %call1, %if.end ], [ %call, %entry.cleanup_crit_edge ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal i32 @trace_raw_output_regcache_sync(ptr noundef %iter, i32 noundef %flags, ptr noundef %trace_event) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  %ent = getelementptr inbounds %struct.trace_iterator, ptr %iter, i32 0, i32 16
  %0 = ptrtoint ptr %ent to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %ent, align 8
  %call = tail call i32 @trace_raw_output_prep(ptr noundef %iter, ptr noundef %trace_event) #24
  call void @__sanitizer_cov_trace_const_cmp4(i32 1, i32 %call)
  %cmp.not = icmp eq i32 %call, 1
  br i1 %cmp.not, label %if.end, label %entry.cleanup_crit_edge

entry.cleanup_crit_edge:                          ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end:                                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  %seq = getelementptr inbounds %struct.trace_iterator, ptr %iter, i32 0, i32 15
  %__data_loc_name = getelementptr inbounds %struct.trace_event_raw_regcache_sync, ptr %1, i32 0, i32 1
  %2 = ptrtoint ptr %__data_loc_name to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load i32, ptr %__data_loc_name, align 4
  %and = and i32 %3, 65535
  %add.ptr = getelementptr i8, ptr %1, i32 %and
  %__data_loc_type = getelementptr inbounds %struct.trace_event_raw_regcache_sync, ptr %1, i32 0, i32 3
  %4 = ptrtoint ptr %__data_loc_type to i32
  call void @__asan_load4_noabort(i32 %4)
  %5 = load i32, ptr %__data_loc_type, align 4
  %and1 = and i32 %5, 65535
  %add.ptr2 = getelementptr i8, ptr %1, i32 %and1
  %__data_loc_status = getelementptr inbounds %struct.trace_event_raw_regcache_sync, ptr %1, i32 0, i32 2
  %6 = ptrtoint ptr %__data_loc_status to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load i32, ptr %__data_loc_status, align 4
  %and3 = and i32 %7, 65535
  %add.ptr4 = getelementptr i8, ptr %1, i32 %and3
  tail call void (ptr, ptr, ...) @trace_event_printf(ptr noundef %iter, ptr noundef nonnull @.str.53, ptr noundef %add.ptr, ptr noundef %add.ptr2, ptr noundef %add.ptr4) #24
  %call5 = tail call i32 @trace_handle_return(ptr noundef %seq) #24
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry.cleanup_crit_edge
  %retval.0 = phi i32 [ %call5, %if.end ], [ %call, %entry.cleanup_crit_edge ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal i32 @trace_raw_output_regmap_bool(ptr noundef %iter, i32 noundef %flags, ptr noundef %trace_event) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  %ent = getelementptr inbounds %struct.trace_iterator, ptr %iter, i32 0, i32 16
  %0 = ptrtoint ptr %ent to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %ent, align 8
  %call = tail call i32 @trace_raw_output_prep(ptr noundef %iter, ptr noundef %trace_event) #24
  call void @__sanitizer_cov_trace_const_cmp4(i32 1, i32 %call)
  %cmp.not = icmp eq i32 %call, 1
  br i1 %cmp.not, label %if.end, label %entry.cleanup_crit_edge

entry.cleanup_crit_edge:                          ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end:                                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  %seq = getelementptr inbounds %struct.trace_iterator, ptr %iter, i32 0, i32 15
  %__data_loc_name = getelementptr inbounds %struct.trace_event_raw_regmap_bool, ptr %1, i32 0, i32 1
  %2 = ptrtoint ptr %__data_loc_name to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load i32, ptr %__data_loc_name, align 4
  %and = and i32 %3, 65535
  %add.ptr = getelementptr i8, ptr %1, i32 %and
  %flag = getelementptr inbounds %struct.trace_event_raw_regmap_bool, ptr %1, i32 0, i32 2
  %4 = ptrtoint ptr %flag to i32
  call void @__asan_load4_noabort(i32 %4)
  %5 = load i32, ptr %flag, align 4
  tail call void (ptr, ptr, ...) @trace_event_printf(ptr noundef %iter, ptr noundef nonnull @.str.55, ptr noundef %add.ptr, i32 noundef %5) #24
  %call1 = tail call i32 @trace_handle_return(ptr noundef %seq) #24
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry.cleanup_crit_edge
  %retval.0 = phi i32 [ %call1, %if.end ], [ %call, %entry.cleanup_crit_edge ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal i32 @trace_raw_output_regmap_async(ptr noundef %iter, i32 noundef %flags, ptr noundef %trace_event) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  %ent = getelementptr inbounds %struct.trace_iterator, ptr %iter, i32 0, i32 16
  %0 = ptrtoint ptr %ent to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %ent, align 8
  %call = tail call i32 @trace_raw_output_prep(ptr noundef %iter, ptr noundef %trace_event) #24
  call void @__sanitizer_cov_trace_const_cmp4(i32 1, i32 %call)
  %cmp.not = icmp eq i32 %call, 1
  br i1 %cmp.not, label %if.end, label %entry.cleanup_crit_edge

entry.cleanup_crit_edge:                          ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end:                                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  %seq = getelementptr inbounds %struct.trace_iterator, ptr %iter, i32 0, i32 15
  %__data_loc_name = getelementptr inbounds %struct.trace_event_raw_regmap_async, ptr %1, i32 0, i32 1
  %2 = ptrtoint ptr %__data_loc_name to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load i32, ptr %__data_loc_name, align 4
  %and = and i32 %3, 65535
  %add.ptr = getelementptr i8, ptr %1, i32 %and
  tail call void (ptr, ptr, ...) @trace_event_printf(ptr noundef %iter, ptr noundef nonnull @.str.56, ptr noundef %add.ptr) #24
  %call1 = tail call i32 @trace_handle_return(ptr noundef %seq) #24
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry.cleanup_crit_edge
  %retval.0 = phi i32 [ %call1, %if.end ], [ %call, %entry.cleanup_crit_edge ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal i32 @trace_raw_output_regcache_drop_region(ptr noundef %iter, i32 noundef %flags, ptr noundef %trace_event) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  %ent = getelementptr inbounds %struct.trace_iterator, ptr %iter, i32 0, i32 16
  %0 = ptrtoint ptr %ent to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %ent, align 8
  %call = tail call i32 @trace_raw_output_prep(ptr noundef %iter, ptr noundef %trace_event) #24
  call void @__sanitizer_cov_trace_const_cmp4(i32 1, i32 %call)
  %cmp.not = icmp eq i32 %call, 1
  br i1 %cmp.not, label %if.end, label %entry.cleanup_crit_edge

entry.cleanup_crit_edge:                          ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end:                                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  %seq = getelementptr inbounds %struct.trace_iterator, ptr %iter, i32 0, i32 15
  %__data_loc_name = getelementptr inbounds %struct.trace_event_raw_regcache_drop_region, ptr %1, i32 0, i32 1
  %2 = ptrtoint ptr %__data_loc_name to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load i32, ptr %__data_loc_name, align 4
  %and = and i32 %3, 65535
  %add.ptr = getelementptr i8, ptr %1, i32 %and
  %from = getelementptr inbounds %struct.trace_event_raw_regcache_drop_region, ptr %1, i32 0, i32 2
  %4 = ptrtoint ptr %from to i32
  call void @__asan_load4_noabort(i32 %4)
  %5 = load i32, ptr %from, align 4
  %to = getelementptr inbounds %struct.trace_event_raw_regcache_drop_region, ptr %1, i32 0, i32 3
  %6 = ptrtoint ptr %to to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load i32, ptr %to, align 4
  tail call void (ptr, ptr, ...) @trace_event_printf(ptr noundef %iter, ptr noundef nonnull @.str.59, ptr noundef %add.ptr, i32 noundef %5, i32 noundef %7) #24
  %call1 = tail call i32 @trace_handle_return(ptr noundef %seq) #24
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry.cleanup_crit_edge
  %retval.0 = phi i32 [ %call1, %if.end ], [ %call, %entry.cleanup_crit_edge ]
  ret i32 %retval.0
}

; Function Attrs: null_pointer_is_valid
declare dso_local ptr @perf_trace_buf_alloc(i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #2

; Function Attrs: null_pointer_is_valid
declare dso_local void @perf_trace_run_bpf_submit(ptr noundef, i32 noundef, i32 noundef, ptr noundef, i64 noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #2

; Function Attrs: nounwind readonly
declare i32 @llvm.read_register.i32(metadata) #19

; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
declare ptr @llvm.returnaddress(i32 immarg) #20

; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
declare ptr @llvm.frameaddress.p0(i32 immarg) #20

; Function Attrs: null_pointer_is_valid
declare dso_local void @bpf_trace_run3(ptr noundef, i64 noundef, i64 noundef, i64 noundef) local_unnamed_addr #2

; Function Attrs: null_pointer_is_valid
declare dso_local void @bpf_trace_run2(ptr noundef, i64 noundef, i64 noundef) local_unnamed_addr #2

; Function Attrs: null_pointer_is_valid
declare dso_local void @bpf_trace_run1(ptr noundef, i64 noundef) local_unnamed_addr #2

; Function Attrs: null_pointer_is_valid
declare dso_local ptr @kstrdup_const(ptr noundef, i32 noundef) local_unnamed_addr #2

; Function Attrs: null_pointer_is_valid
declare dso_local zeroext i1 @fwnode_property_present(ptr noundef, ptr noundef) local_unnamed_addr #2

; Function Attrs: null_pointer_is_valid allocsize(2)
declare dso_local noalias ptr @kmem_cache_alloc_trace(ptr noundef, i32 noundef, i32 noundef) local_unnamed_addr #21

; Function Attrs: null_pointer_is_valid allocsize(0)
declare dso_local noalias ptr @__kmalloc(i32 noundef, i32 noundef) local_unnamed_addr #22

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #23

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @__hwspin_lock_timeout(ptr noundef, i32 noundef, i32 noundef, ptr noundef) local_unnamed_addr #2

; Function Attrs: null_pointer_is_valid
declare dso_local void @__hwspin_unlock(ptr noundef, i32 noundef, ptr noundef) local_unnamed_addr #2

; Function Attrs: null_pointer_is_valid
declare dso_local void @_raw_spin_unlock_irqrestore(ptr noundef, i32 noundef) local_unnamed_addr #2 section ".spinlock.text"

; Function Attrs: null_pointer_is_valid
declare dso_local void @lockdep_init_map_type(ptr noundef, ptr noundef, ptr noundef, i32 noundef, i8 noundef zeroext, i8 noundef zeroext, i8 noundef zeroext) local_unnamed_addr #2

; Function Attrs: null_pointer_is_valid
declare dso_local void @mutex_lock_nested(ptr noundef, i32 noundef) local_unnamed_addr #2

; Function Attrs: null_pointer_is_valid
declare dso_local void @mutex_unlock(ptr noundef) local_unnamed_addr #2

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare i16 @llvm.bswap.i16(i16) #23

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.bswap.i32(i32) #23

; Function Attrs: null_pointer_is_valid
declare dso_local void @rb_insert_color(ptr noundef, ptr noundef) local_unnamed_addr #2

; Function Attrs: null_pointer_is_valid
declare dso_local ptr @rb_first(ptr noundef) local_unnamed_addr #2

; Function Attrs: null_pointer_is_valid
declare dso_local ptr @rb_next(ptr noundef) local_unnamed_addr #2

; Function Attrs: null_pointer_is_valid
declare dso_local void @rb_erase(ptr noundef, ptr noundef) local_unnamed_addr #2

; Function Attrs: null_pointer_is_valid
declare dso_local noalias ptr @devm_kmalloc(ptr noundef, i32 noundef, i32 noundef) local_unnamed_addr #2

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare { i32, i1 } @llvm.umul.with.overflow.i32(i32, i32) #23

; Function Attrs: null_pointer_is_valid
declare dso_local zeroext i1 @__list_del_entry_valid(ptr noundef) local_unnamed_addr #2

; Function Attrs: argmemonly mustprogress nofree nounwind null_pointer_is_valid readonly willreturn
declare dso_local i32 @strcmp(ptr nocapture noundef, ptr nocapture noundef) local_unnamed_addr #18

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal fastcc i32 @_regmap_select_page(ptr noundef %map, ptr nocapture noundef %reg, ptr nocapture noundef readonly %range, i32 noundef %val_num) unnamed_addr #0 align 64 {
entry:
  %orig.i = alloca i32, align 4
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = ptrtoint ptr %reg to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load i32, ptr %reg, align 4
  %range_min = getelementptr inbounds %struct.regmap_range_node, ptr %range, i32 0, i32 3
  %2 = ptrtoint ptr %range_min to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load i32, ptr %range_min, align 4
  %sub = sub i32 %1, %3
  %window_len = getelementptr inbounds %struct.regmap_range_node, ptr %range, i32 0, i32 9
  %4 = ptrtoint ptr %window_len to i32
  call void @__asan_load4_noabort(i32 %4)
  %5 = load i32, ptr %window_len, align 4
  %sub.frozen = freeze i32 %sub
  %.frozen = freeze i32 %5
  %div = udiv i32 %sub.frozen, %.frozen
  %6 = mul i32 %div, %.frozen
  %rem.decomposed = sub i32 %sub.frozen, %6
  call void @__sanitizer_cov_trace_const_cmp4(i32 1, i32 %val_num)
  %cmp = icmp ugt i32 %val_num, 1
  br i1 %cmp, label %if.then, label %lor.lhs.false.critedge

if.then:                                          ; preds = %entry
  %add = add i32 %val_num, -1
  %sub4 = add i32 %add, %1
  %range_max = getelementptr inbounds %struct.regmap_range_node, ptr %range, i32 0, i32 4
  %7 = ptrtoint ptr %range_max to i32
  call void @__asan_load4_noabort(i32 %7)
  %8 = load i32, ptr %range_max, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %sub4, i32 %8)
  %cmp5 = icmp ugt i32 %sub4, %8
  %sub8 = sub i32 %5, %rem.decomposed
  call void @__sanitizer_cov_trace_cmp4(i32 %sub8, i32 %val_num)
  %cmp9 = icmp ult i32 %sub8, %val_num
  %or.cond = select i1 %cmp5, i1 true, i1 %cmp9
  br i1 %or.cond, label %if.then.cleanup_crit_edge, label %if.then.if.then16_crit_edge

if.then.if.then16_crit_edge:                      ; preds = %if.then
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.then16

if.then.cleanup_crit_edge:                        ; preds = %if.then
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

lor.lhs.false.critedge:                           ; preds = %entry
  %window_start = getelementptr inbounds %struct.regmap_range_node, ptr %range, i32 0, i32 8
  %9 = ptrtoint ptr %window_start to i32
  call void @__asan_load4_noabort(i32 %9)
  %10 = load i32, ptr %window_start, align 4
  %add14 = add i32 %10, %rem.decomposed
  %selector_reg = getelementptr inbounds %struct.regmap_range_node, ptr %range, i32 0, i32 5
  %11 = ptrtoint ptr %selector_reg to i32
  call void @__asan_load4_noabort(i32 %11)
  %12 = load i32, ptr %selector_reg, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %add14, i32 %12)
  %cmp15.not = icmp eq i32 %add14, %12
  br i1 %cmp15.not, label %lor.lhs.false.critedge.if.end23_crit_edge, label %lor.lhs.false.critedge.if.then16_crit_edge

lor.lhs.false.critedge.if.then16_crit_edge:       ; preds = %lor.lhs.false.critedge
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.then16

lor.lhs.false.critedge.if.end23_crit_edge:        ; preds = %lor.lhs.false.critedge
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end23

if.then16:                                        ; preds = %lor.lhs.false.critedge.if.then16_crit_edge, %if.then.if.then16_crit_edge
  %work_buf = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 6
  %13 = ptrtoint ptr %work_buf to i32
  call void @__asan_load4_noabort(i32 %13)
  %14 = load ptr, ptr %work_buf, align 4
  %selector_work_buf = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 69
  %15 = ptrtoint ptr %selector_work_buf to i32
  call void @__asan_load4_noabort(i32 %15)
  %16 = load ptr, ptr %selector_work_buf, align 4
  store ptr %16, ptr %work_buf, align 4
  %selector_reg18 = getelementptr inbounds %struct.regmap_range_node, ptr %range, i32 0, i32 5
  %17 = ptrtoint ptr %selector_reg18 to i32
  call void @__asan_load4_noabort(i32 %17)
  %18 = load i32, ptr %selector_reg18, align 4
  %selector_mask = getelementptr inbounds %struct.regmap_range_node, ptr %range, i32 0, i32 6
  %19 = ptrtoint ptr %selector_mask to i32
  call void @__asan_load4_noabort(i32 %19)
  %20 = load i32, ptr %selector_mask, align 4
  %selector_shift = getelementptr inbounds %struct.regmap_range_node, ptr %range, i32 0, i32 7
  %21 = ptrtoint ptr %selector_shift to i32
  call void @__asan_load4_noabort(i32 %21)
  %22 = load i32, ptr %selector_shift, align 4
  %shl = shl i32 %div, %22
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %orig.i) #24
  %23 = ptrtoint ptr %orig.i to i32
  call void @__asan_store4_noabort(i32 %23)
  store i32 -1, ptr %orig.i, align 4, !annotation !388
  %call.i = tail call zeroext i1 @regmap_volatile(ptr noundef %map, i32 noundef %18) #24
  br i1 %call.i, label %land.lhs.true.i, label %if.then16.if.else.i_crit_edge

if.then16.if.else.i_crit_edge:                    ; preds = %if.then16
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.else.i

land.lhs.true.i:                                  ; preds = %if.then16
  %reg_update_bits.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 40
  %24 = ptrtoint ptr %reg_update_bits.i to i32
  call void @__asan_load4_noabort(i32 %24)
  %25 = load ptr, ptr %reg_update_bits.i, align 4
  %tobool1.not.i = icmp eq ptr %25, null
  br i1 %tobool1.not.i, label %land.lhs.true.i.if.else.i_crit_edge, label %if.then2.i

land.lhs.true.i.if.else.i_crit_edge:              ; preds = %land.lhs.true.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.else.i

if.then2.i:                                       ; preds = %land.lhs.true.i
  %bus_context.i = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 9
  %26 = ptrtoint ptr %bus_context.i to i32
  call void @__asan_load4_noabort(i32 %26)
  %27 = load ptr, ptr %bus_context.i, align 4
  %call4.i = tail call i32 %25(ptr noundef %27, i32 noundef %18, i32 noundef %20, i32 noundef %shl) #24
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call4.i)
  %cmp.i.not = icmp eq i32 %call4.i, 0
  br i1 %cmp.i.not, label %if.then2.i._regmap_update_bits.exit_crit_edge, label %if.then2.i._regmap_update_bits.exit.thread_crit_edge

if.then2.i._regmap_update_bits.exit.thread_crit_edge: ; preds = %if.then2.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %_regmap_update_bits.exit.thread

if.then2.i._regmap_update_bits.exit_crit_edge:    ; preds = %if.then2.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %_regmap_update_bits.exit

if.else.i:                                        ; preds = %land.lhs.true.i.if.else.i_crit_edge, %if.then16.if.else.i_crit_edge
  %call9.i = call fastcc i32 @_regmap_read(ptr noundef %map, i32 noundef %18, ptr noundef nonnull %orig.i) #24
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call9.i)
  %cmp10.not.i = icmp eq i32 %call9.i, 0
  br i1 %cmp10.not.i, label %if.end12.i, label %if.else.i._regmap_update_bits.exit.thread_crit_edge

if.else.i._regmap_update_bits.exit.thread_crit_edge: ; preds = %if.else.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %_regmap_update_bits.exit.thread

if.end12.i:                                       ; preds = %if.else.i
  %28 = ptrtoint ptr %orig.i to i32
  call void @__asan_load4_noabort(i32 %28)
  %29 = load i32, ptr %orig.i, align 4
  %neg.i = xor i32 %20, -1
  %and.i = and i32 %29, %neg.i
  %and13.i = and i32 %shl, %20
  %or.i = or i32 %and.i, %and13.i
  call void @__sanitizer_cov_trace_cmp4(i32 %or.i, i32 %29)
  %cmp15.not.i = icmp eq i32 %or.i, %29
  br i1 %cmp15.not.i, label %if.end12.i._regmap_update_bits.exit_crit_edge, label %if.then16.i

if.end12.i._regmap_update_bits.exit_crit_edge:    ; preds = %if.end12.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %_regmap_update_bits.exit

if.then16.i:                                      ; preds = %if.end12.i
  %call17.i = call i32 @_regmap_write(ptr noundef %map, i32 noundef %18, i32 noundef %or.i) #24
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call17.i)
  %cmp18.i.not = icmp eq i32 %call17.i, 0
  br i1 %cmp18.i.not, label %if.then16.i._regmap_update_bits.exit_crit_edge, label %if.then16.i._regmap_update_bits.exit.thread_crit_edge

if.then16.i._regmap_update_bits.exit.thread_crit_edge: ; preds = %if.then16.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %_regmap_update_bits.exit.thread

if.then16.i._regmap_update_bits.exit_crit_edge:   ; preds = %if.then16.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %_regmap_update_bits.exit

_regmap_update_bits.exit.thread:                  ; preds = %if.then16.i._regmap_update_bits.exit.thread_crit_edge, %if.else.i._regmap_update_bits.exit.thread_crit_edge, %if.then2.i._regmap_update_bits.exit.thread_crit_edge
  %retval.0.i.ph = phi i32 [ %call17.i, %if.then16.i._regmap_update_bits.exit.thread_crit_edge ], [ %call4.i, %if.then2.i._regmap_update_bits.exit.thread_crit_edge ], [ %call9.i, %if.else.i._regmap_update_bits.exit.thread_crit_edge ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %orig.i) #24
  %30 = ptrtoint ptr %work_buf to i32
  call void @__asan_store4_noabort(i32 %30)
  store ptr %14, ptr %work_buf, align 4
  br label %cleanup

_regmap_update_bits.exit:                         ; preds = %if.then16.i._regmap_update_bits.exit_crit_edge, %if.end12.i._regmap_update_bits.exit_crit_edge, %if.then2.i._regmap_update_bits.exit_crit_edge
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %orig.i) #24
  %31 = ptrtoint ptr %work_buf to i32
  call void @__asan_store4_noabort(i32 %31)
  store ptr %14, ptr %work_buf, align 4
  br label %if.end23

if.end23:                                         ; preds = %_regmap_update_bits.exit, %lor.lhs.false.critedge.if.end23_crit_edge
  %window_start24 = getelementptr inbounds %struct.regmap_range_node, ptr %range, i32 0, i32 8
  %32 = ptrtoint ptr %window_start24 to i32
  call void @__asan_load4_noabort(i32 %32)
  %33 = load i32, ptr %window_start24, align 4
  %add25 = add i32 %33, %rem.decomposed
  %34 = ptrtoint ptr %reg to i32
  call void @__asan_store4_noabort(i32 %34)
  store i32 %add25, ptr %reg, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end23, %_regmap_update_bits.exit.thread, %if.then.cleanup_crit_edge
  %retval.0 = phi i32 [ 0, %if.end23 ], [ -22, %if.then.cleanup_crit_edge ], [ %retval.0.i.ph, %_regmap_update_bits.exit.thread ]
  ret i32 %retval.0
}

; Function Attrs: inlinehint nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal fastcc void @trace_regmap_hw_write_start(ptr noundef %map, i32 noundef %reg, i32 noundef %count) unnamed_addr #14 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  callbr void asm sideeffect "1:\0A\09nop\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr getelementptr inbounds ({ ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr }, ptr @__tracepoint_regmap_hw_write_start, i32 0, i32 1, i32 0, i32 0), ptr blockaddress(@trace_regmap_hw_write_start, %do.body)) #24
          to label %if.end48 [label %do.body], !srcloc !391

do.body:                                          ; preds = %entry
  %0 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i = and i32 %0, -16384
  %1 = inttoptr i32 %and.i to ptr
  %cpu = getelementptr inbounds %struct.thread_info, ptr %1, i32 0, i32 3
  %2 = ptrtoint ptr %cpu to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load i32, ptr %cpu, align 4
  call void @__asan_load4_noabort(i32 ptrtoint (ptr @nr_cpu_ids to i32))
  %4 = load i32, ptr @nr_cpu_ids, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %4, i32 %3)
  %cmp.not.i.i.i.i = icmp ugt i32 %4, %3
  br i1 %cmp.not.i.i.i.i, label %do.body.cpu_online.exit_crit_edge, label %land.rhs.i.i.i.i

do.body.cpu_online.exit_crit_edge:                ; preds = %do.body
  call void @__sanitizer_cov_trace_pc() #26
  br label %cpu_online.exit

land.rhs.i.i.i.i:                                 ; preds = %do.body
  %.b37.i.i.i.i = load i1, ptr @cpu_max_bits_warn.__already_done, align 1
  br i1 %.b37.i.i.i.i, label %land.rhs.i.i.i.i.cpu_online.exit_crit_edge, label %if.then.i.i.i.i, !prof !386

land.rhs.i.i.i.i.cpu_online.exit_crit_edge:       ; preds = %land.rhs.i.i.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %cpu_online.exit

if.then.i.i.i.i:                                  ; preds = %land.rhs.i.i.i.i
  call void @__sanitizer_cov_trace_pc() #26
  store i1 true, ptr @cpu_max_bits_warn.__already_done, align 1
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.62, i32 noundef 108, i32 noundef 9, ptr noundef null) #24
  br label %cpu_online.exit

cpu_online.exit:                                  ; preds = %if.then.i.i.i.i, %land.rhs.i.i.i.i.cpu_online.exit_crit_edge, %do.body.cpu_online.exit_crit_edge
  %div1.i.i.i = lshr i32 %3, 5
  %arrayidx.i.i.i = getelementptr i32, ptr @__cpu_online_mask, i32 %div1.i.i.i
  %5 = ptrtoint ptr %arrayidx.i.i.i to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load volatile i32, ptr %arrayidx.i.i.i, align 4
  %and.i.i.i75 = and i32 %3, 31
  %7 = shl nuw i32 1, %and.i.i.i75
  %8 = and i32 %6, %7
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %8)
  %tobool.i.not = icmp eq i32 %8, 0
  br i1 %tobool.i.not, label %cpu_online.exit.if.end69_crit_edge, label %if.end31

cpu_online.exit.if.end69_crit_edge:               ; preds = %cpu_online.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end69

if.end31:                                         ; preds = %cpu_online.exit
  %9 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i.i.i = and i32 %9, -16384
  %10 = inttoptr i32 %and.i.i.i to ptr
  %preempt_count.i.i = getelementptr inbounds %struct.thread_info, ptr %10, i32 0, i32 1
  %11 = ptrtoint ptr %preempt_count.i.i to i32
  call void @__asan_load4_noabort(i32 %11)
  %12 = load volatile i32, ptr %preempt_count.i.i, align 4
  %add.i = add i32 %12, 1
  store volatile i32 %add.i, ptr %preempt_count.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !402
  %13 = load volatile ptr, ptr getelementptr inbounds ({ ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr }, ptr @__tracepoint_regmap_hw_write_start, i32 0, i32 7), align 4
  %tobool.not.i = icmp eq ptr %13, null
  br i1 %tobool.not.i, label %if.end48.critedge, label %if.end31.do.body2.i_crit_edge

if.end31.do.body2.i_crit_edge:                    ; preds = %if.end31
  br label %do.body2.i

do.body2.i:                                       ; preds = %do.body2.i.do.body2.i_crit_edge, %if.end31.do.body2.i_crit_edge
  %it_func_ptr.0.i = phi ptr [ %incdec.ptr.i, %do.body2.i.do.body2.i_crit_edge ], [ %13, %if.end31.do.body2.i_crit_edge ]
  %14 = ptrtoint ptr %it_func_ptr.0.i to i32
  call void @__asan_load4_noabort(i32 %14)
  %15 = load volatile ptr, ptr %it_func_ptr.0.i, align 4
  %data.i = getelementptr inbounds %struct.tracepoint_func, ptr %it_func_ptr.0.i, i32 0, i32 1
  %16 = ptrtoint ptr %data.i to i32
  call void @__asan_load4_noabort(i32 %16)
  %17 = load ptr, ptr %data.i, align 4
  tail call void %15(ptr noundef %17, ptr noundef %map, i32 noundef %reg, i32 noundef %count) #24
  %incdec.ptr.i = getelementptr %struct.tracepoint_func, ptr %it_func_ptr.0.i, i32 1
  %18 = ptrtoint ptr %incdec.ptr.i to i32
  call void @__asan_load4_noabort(i32 %18)
  %19 = load ptr, ptr %incdec.ptr.i, align 4
  %tobool9.not.i = icmp eq ptr %19, null
  br i1 %tobool9.not.i, label %cleanup, label %do.body2.i.do.body2.i_crit_edge

do.body2.i.do.body2.i_crit_edge:                  ; preds = %do.body2.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.body2.i

cleanup:                                          ; preds = %do.body2.i
  call void @__sanitizer_cov_trace_pc() #26
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !403
  br label %if.end48.sink.split

if.end48.critedge:                                ; preds = %if.end31
  call void @__sanitizer_cov_trace_pc() #26
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !403
  br label %if.end48.sink.split

if.end48.sink.split:                              ; preds = %if.end48.critedge, %cleanup
  %20 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i.i.i73.c = and i32 %20, -16384
  %21 = inttoptr i32 %and.i.i.i73.c to ptr
  %preempt_count.i.i74.c = getelementptr inbounds %struct.thread_info, ptr %21, i32 0, i32 1
  %22 = ptrtoint ptr %preempt_count.i.i74.c to i32
  call void @__asan_load4_noabort(i32 %22)
  %23 = load volatile i32, ptr %preempt_count.i.i74.c, align 4
  %sub.i = add i32 %23, -1
  store volatile i32 %sub.i, ptr %preempt_count.i.i74.c, align 4
  br label %if.end48

if.end48:                                         ; preds = %if.end48.sink.split, %entry
  %24 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i76 = and i32 %24, -16384
  %25 = inttoptr i32 %and.i76 to ptr
  %cpu50 = getelementptr inbounds %struct.thread_info, ptr %25, i32 0, i32 3
  %26 = ptrtoint ptr %cpu50 to i32
  call void @__asan_load4_noabort(i32 %26)
  %27 = load i32, ptr %cpu50, align 4
  call void @__asan_load4_noabort(i32 ptrtoint (ptr @nr_cpu_ids to i32))
  %28 = load i32, ptr @nr_cpu_ids, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %28, i32 %27)
  %cmp.not.i.i.i.i77 = icmp ugt i32 %28, %27
  br i1 %cmp.not.i.i.i.i77, label %if.end48.cpu_online.exit85_crit_edge, label %land.rhs.i.i.i.i79

if.end48.cpu_online.exit85_crit_edge:             ; preds = %if.end48
  call void @__sanitizer_cov_trace_pc() #26
  br label %cpu_online.exit85

land.rhs.i.i.i.i79:                               ; preds = %if.end48
  %.b37.i.i.i.i78 = load i1, ptr @cpu_max_bits_warn.__already_done, align 1
  br i1 %.b37.i.i.i.i78, label %land.rhs.i.i.i.i79.cpu_online.exit85_crit_edge, label %if.then.i.i.i.i80, !prof !386

land.rhs.i.i.i.i79.cpu_online.exit85_crit_edge:   ; preds = %land.rhs.i.i.i.i79
  call void @__sanitizer_cov_trace_pc() #26
  br label %cpu_online.exit85

if.then.i.i.i.i80:                                ; preds = %land.rhs.i.i.i.i79
  call void @__sanitizer_cov_trace_pc() #26
  store i1 true, ptr @cpu_max_bits_warn.__already_done, align 1
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.62, i32 noundef 108, i32 noundef 9, ptr noundef null) #24
  br label %cpu_online.exit85

cpu_online.exit85:                                ; preds = %if.then.i.i.i.i80, %land.rhs.i.i.i.i79.cpu_online.exit85_crit_edge, %if.end48.cpu_online.exit85_crit_edge
  %div1.i.i.i81 = lshr i32 %27, 5
  %arrayidx.i.i.i82 = getelementptr i32, ptr @__cpu_online_mask, i32 %div1.i.i.i81
  %29 = ptrtoint ptr %arrayidx.i.i.i82 to i32
  call void @__asan_load4_noabort(i32 %29)
  %30 = load volatile i32, ptr %arrayidx.i.i.i82, align 4
  %and.i.i.i83 = and i32 %27, 31
  %31 = shl nuw i32 1, %and.i.i.i83
  %32 = and i32 %30, %31
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %32)
  %tobool.i84.not = icmp eq i32 %32, 0
  br i1 %tobool.i84.not, label %cpu_online.exit85.if.end69_crit_edge, label %if.then52

cpu_online.exit85.if.end69_crit_edge:             ; preds = %cpu_online.exit85
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end69

if.then52:                                        ; preds = %cpu_online.exit85
  %33 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i.i.i.i = and i32 %33, -16384
  %34 = inttoptr i32 %and.i.i.i.i to ptr
  %preempt_count.i.i.i = getelementptr inbounds %struct.thread_info, ptr %34, i32 0, i32 1
  %35 = ptrtoint ptr %preempt_count.i.i.i to i32
  call void @__asan_load4_noabort(i32 %35)
  %36 = load volatile i32, ptr %preempt_count.i.i.i, align 4
  %add.i.i = add i32 %36, 1
  store volatile i32 %add.i.i, ptr %preempt_count.i.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !394
  %37 = load volatile ptr, ptr getelementptr inbounds ({ ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr }, ptr @__tracepoint_regmap_hw_write_start, i32 0, i32 7), align 4
  %call58 = tail call i32 @rcu_read_lock_sched_held() #24
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call58)
  %tobool59.not = icmp eq i32 %call58, 0
  br i1 %tobool59.not, label %land.lhs.true, label %if.then52.do.end67_crit_edge

if.then52.do.end67_crit_edge:                     ; preds = %if.then52
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.end67

land.lhs.true:                                    ; preds = %if.then52
  %call60 = tail call i32 @debug_lockdep_rcu_enabled() #24
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call60)
  %tobool61.not = icmp eq i32 %call60, 0
  br i1 %tobool61.not, label %land.lhs.true.do.end67_crit_edge, label %land.lhs.true62

land.lhs.true.do.end67_crit_edge:                 ; preds = %land.lhs.true
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.end67

land.lhs.true62:                                  ; preds = %land.lhs.true
  %.b72 = load i1, ptr @trace_regmap_hw_write_start.__warned, align 1
  br i1 %.b72, label %land.lhs.true62.do.end67_crit_edge, label %if.then64

land.lhs.true62.do.end67_crit_edge:               ; preds = %land.lhs.true62
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.end67

if.then64:                                        ; preds = %land.lhs.true62
  call void @__sanitizer_cov_trace_pc() #26
  store i1 true, ptr @trace_regmap_hw_write_start.__warned, align 1
  tail call void @lockdep_rcu_suspicious(ptr noundef nonnull @.str.60, i32 noundef 109, ptr noundef nonnull @.str.61) #24
  br label %do.end67

do.end67:                                         ; preds = %if.then64, %land.lhs.true62.do.end67_crit_edge, %land.lhs.true.do.end67_crit_edge, %if.then52.do.end67_crit_edge
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !395
  %38 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i.i.i.i86 = and i32 %38, -16384
  %39 = inttoptr i32 %and.i.i.i.i86 to ptr
  %preempt_count.i.i.i87 = getelementptr inbounds %struct.thread_info, ptr %39, i32 0, i32 1
  %40 = ptrtoint ptr %preempt_count.i.i.i87 to i32
  call void @__asan_load4_noabort(i32 %40)
  %41 = load volatile i32, ptr %preempt_count.i.i.i87, align 4
  %sub.i.i = add i32 %41, -1
  store volatile i32 %sub.i.i, ptr %preempt_count.i.i.i87, align 4
  br label %if.end69

if.end69:                                         ; preds = %do.end67, %cpu_online.exit85.if.end69_crit_edge, %cpu_online.exit.if.end69_crit_edge
  ret void
}

; Function Attrs: inlinehint nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal fastcc void @trace_regmap_hw_write_done(ptr noundef %map, i32 noundef %reg, i32 noundef %count) unnamed_addr #14 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  callbr void asm sideeffect "1:\0A\09nop\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr getelementptr inbounds ({ ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr }, ptr @__tracepoint_regmap_hw_write_done, i32 0, i32 1, i32 0, i32 0), ptr blockaddress(@trace_regmap_hw_write_done, %do.body)) #24
          to label %if.end48 [label %do.body], !srcloc !391

do.body:                                          ; preds = %entry
  %0 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i = and i32 %0, -16384
  %1 = inttoptr i32 %and.i to ptr
  %cpu = getelementptr inbounds %struct.thread_info, ptr %1, i32 0, i32 3
  %2 = ptrtoint ptr %cpu to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load i32, ptr %cpu, align 4
  call void @__asan_load4_noabort(i32 ptrtoint (ptr @nr_cpu_ids to i32))
  %4 = load i32, ptr @nr_cpu_ids, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %4, i32 %3)
  %cmp.not.i.i.i.i = icmp ugt i32 %4, %3
  br i1 %cmp.not.i.i.i.i, label %do.body.cpu_online.exit_crit_edge, label %land.rhs.i.i.i.i

do.body.cpu_online.exit_crit_edge:                ; preds = %do.body
  call void @__sanitizer_cov_trace_pc() #26
  br label %cpu_online.exit

land.rhs.i.i.i.i:                                 ; preds = %do.body
  %.b37.i.i.i.i = load i1, ptr @cpu_max_bits_warn.__already_done, align 1
  br i1 %.b37.i.i.i.i, label %land.rhs.i.i.i.i.cpu_online.exit_crit_edge, label %if.then.i.i.i.i, !prof !386

land.rhs.i.i.i.i.cpu_online.exit_crit_edge:       ; preds = %land.rhs.i.i.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %cpu_online.exit

if.then.i.i.i.i:                                  ; preds = %land.rhs.i.i.i.i
  call void @__sanitizer_cov_trace_pc() #26
  store i1 true, ptr @cpu_max_bits_warn.__already_done, align 1
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.62, i32 noundef 108, i32 noundef 9, ptr noundef null) #24
  br label %cpu_online.exit

cpu_online.exit:                                  ; preds = %if.then.i.i.i.i, %land.rhs.i.i.i.i.cpu_online.exit_crit_edge, %do.body.cpu_online.exit_crit_edge
  %div1.i.i.i = lshr i32 %3, 5
  %arrayidx.i.i.i = getelementptr i32, ptr @__cpu_online_mask, i32 %div1.i.i.i
  %5 = ptrtoint ptr %arrayidx.i.i.i to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load volatile i32, ptr %arrayidx.i.i.i, align 4
  %and.i.i.i75 = and i32 %3, 31
  %7 = shl nuw i32 1, %and.i.i.i75
  %8 = and i32 %6, %7
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %8)
  %tobool.i.not = icmp eq i32 %8, 0
  br i1 %tobool.i.not, label %cpu_online.exit.if.end69_crit_edge, label %if.end31

cpu_online.exit.if.end69_crit_edge:               ; preds = %cpu_online.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end69

if.end31:                                         ; preds = %cpu_online.exit
  %9 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i.i.i = and i32 %9, -16384
  %10 = inttoptr i32 %and.i.i.i to ptr
  %preempt_count.i.i = getelementptr inbounds %struct.thread_info, ptr %10, i32 0, i32 1
  %11 = ptrtoint ptr %preempt_count.i.i to i32
  call void @__asan_load4_noabort(i32 %11)
  %12 = load volatile i32, ptr %preempt_count.i.i, align 4
  %add.i = add i32 %12, 1
  store volatile i32 %add.i, ptr %preempt_count.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !404
  %13 = load volatile ptr, ptr getelementptr inbounds ({ ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr }, ptr @__tracepoint_regmap_hw_write_done, i32 0, i32 7), align 4
  %tobool.not.i = icmp eq ptr %13, null
  br i1 %tobool.not.i, label %if.end48.critedge, label %if.end31.do.body2.i_crit_edge

if.end31.do.body2.i_crit_edge:                    ; preds = %if.end31
  br label %do.body2.i

do.body2.i:                                       ; preds = %do.body2.i.do.body2.i_crit_edge, %if.end31.do.body2.i_crit_edge
  %it_func_ptr.0.i = phi ptr [ %incdec.ptr.i, %do.body2.i.do.body2.i_crit_edge ], [ %13, %if.end31.do.body2.i_crit_edge ]
  %14 = ptrtoint ptr %it_func_ptr.0.i to i32
  call void @__asan_load4_noabort(i32 %14)
  %15 = load volatile ptr, ptr %it_func_ptr.0.i, align 4
  %data.i = getelementptr inbounds %struct.tracepoint_func, ptr %it_func_ptr.0.i, i32 0, i32 1
  %16 = ptrtoint ptr %data.i to i32
  call void @__asan_load4_noabort(i32 %16)
  %17 = load ptr, ptr %data.i, align 4
  tail call void %15(ptr noundef %17, ptr noundef %map, i32 noundef %reg, i32 noundef %count) #24
  %incdec.ptr.i = getelementptr %struct.tracepoint_func, ptr %it_func_ptr.0.i, i32 1
  %18 = ptrtoint ptr %incdec.ptr.i to i32
  call void @__asan_load4_noabort(i32 %18)
  %19 = load ptr, ptr %incdec.ptr.i, align 4
  %tobool9.not.i = icmp eq ptr %19, null
  br i1 %tobool9.not.i, label %cleanup, label %do.body2.i.do.body2.i_crit_edge

do.body2.i.do.body2.i_crit_edge:                  ; preds = %do.body2.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.body2.i

cleanup:                                          ; preds = %do.body2.i
  call void @__sanitizer_cov_trace_pc() #26
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !405
  br label %if.end48.sink.split

if.end48.critedge:                                ; preds = %if.end31
  call void @__sanitizer_cov_trace_pc() #26
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !405
  br label %if.end48.sink.split

if.end48.sink.split:                              ; preds = %if.end48.critedge, %cleanup
  %20 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i.i.i73.c = and i32 %20, -16384
  %21 = inttoptr i32 %and.i.i.i73.c to ptr
  %preempt_count.i.i74.c = getelementptr inbounds %struct.thread_info, ptr %21, i32 0, i32 1
  %22 = ptrtoint ptr %preempt_count.i.i74.c to i32
  call void @__asan_load4_noabort(i32 %22)
  %23 = load volatile i32, ptr %preempt_count.i.i74.c, align 4
  %sub.i = add i32 %23, -1
  store volatile i32 %sub.i, ptr %preempt_count.i.i74.c, align 4
  br label %if.end48

if.end48:                                         ; preds = %if.end48.sink.split, %entry
  %24 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i76 = and i32 %24, -16384
  %25 = inttoptr i32 %and.i76 to ptr
  %cpu50 = getelementptr inbounds %struct.thread_info, ptr %25, i32 0, i32 3
  %26 = ptrtoint ptr %cpu50 to i32
  call void @__asan_load4_noabort(i32 %26)
  %27 = load i32, ptr %cpu50, align 4
  call void @__asan_load4_noabort(i32 ptrtoint (ptr @nr_cpu_ids to i32))
  %28 = load i32, ptr @nr_cpu_ids, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %28, i32 %27)
  %cmp.not.i.i.i.i77 = icmp ugt i32 %28, %27
  br i1 %cmp.not.i.i.i.i77, label %if.end48.cpu_online.exit85_crit_edge, label %land.rhs.i.i.i.i79

if.end48.cpu_online.exit85_crit_edge:             ; preds = %if.end48
  call void @__sanitizer_cov_trace_pc() #26
  br label %cpu_online.exit85

land.rhs.i.i.i.i79:                               ; preds = %if.end48
  %.b37.i.i.i.i78 = load i1, ptr @cpu_max_bits_warn.__already_done, align 1
  br i1 %.b37.i.i.i.i78, label %land.rhs.i.i.i.i79.cpu_online.exit85_crit_edge, label %if.then.i.i.i.i80, !prof !386

land.rhs.i.i.i.i79.cpu_online.exit85_crit_edge:   ; preds = %land.rhs.i.i.i.i79
  call void @__sanitizer_cov_trace_pc() #26
  br label %cpu_online.exit85

if.then.i.i.i.i80:                                ; preds = %land.rhs.i.i.i.i79
  call void @__sanitizer_cov_trace_pc() #26
  store i1 true, ptr @cpu_max_bits_warn.__already_done, align 1
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.62, i32 noundef 108, i32 noundef 9, ptr noundef null) #24
  br label %cpu_online.exit85

cpu_online.exit85:                                ; preds = %if.then.i.i.i.i80, %land.rhs.i.i.i.i79.cpu_online.exit85_crit_edge, %if.end48.cpu_online.exit85_crit_edge
  %div1.i.i.i81 = lshr i32 %27, 5
  %arrayidx.i.i.i82 = getelementptr i32, ptr @__cpu_online_mask, i32 %div1.i.i.i81
  %29 = ptrtoint ptr %arrayidx.i.i.i82 to i32
  call void @__asan_load4_noabort(i32 %29)
  %30 = load volatile i32, ptr %arrayidx.i.i.i82, align 4
  %and.i.i.i83 = and i32 %27, 31
  %31 = shl nuw i32 1, %and.i.i.i83
  %32 = and i32 %30, %31
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %32)
  %tobool.i84.not = icmp eq i32 %32, 0
  br i1 %tobool.i84.not, label %cpu_online.exit85.if.end69_crit_edge, label %if.then52

cpu_online.exit85.if.end69_crit_edge:             ; preds = %cpu_online.exit85
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end69

if.then52:                                        ; preds = %cpu_online.exit85
  %33 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i.i.i.i = and i32 %33, -16384
  %34 = inttoptr i32 %and.i.i.i.i to ptr
  %preempt_count.i.i.i = getelementptr inbounds %struct.thread_info, ptr %34, i32 0, i32 1
  %35 = ptrtoint ptr %preempt_count.i.i.i to i32
  call void @__asan_load4_noabort(i32 %35)
  %36 = load volatile i32, ptr %preempt_count.i.i.i, align 4
  %add.i.i = add i32 %36, 1
  store volatile i32 %add.i.i, ptr %preempt_count.i.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !394
  %37 = load volatile ptr, ptr getelementptr inbounds ({ ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr }, ptr @__tracepoint_regmap_hw_write_done, i32 0, i32 7), align 4
  %call58 = tail call i32 @rcu_read_lock_sched_held() #24
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call58)
  %tobool59.not = icmp eq i32 %call58, 0
  br i1 %tobool59.not, label %land.lhs.true, label %if.then52.do.end67_crit_edge

if.then52.do.end67_crit_edge:                     ; preds = %if.then52
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.end67

land.lhs.true:                                    ; preds = %if.then52
  %call60 = tail call i32 @debug_lockdep_rcu_enabled() #24
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call60)
  %tobool61.not = icmp eq i32 %call60, 0
  br i1 %tobool61.not, label %land.lhs.true.do.end67_crit_edge, label %land.lhs.true62

land.lhs.true.do.end67_crit_edge:                 ; preds = %land.lhs.true
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.end67

land.lhs.true62:                                  ; preds = %land.lhs.true
  %.b72 = load i1, ptr @trace_regmap_hw_write_done.__warned, align 1
  br i1 %.b72, label %land.lhs.true62.do.end67_crit_edge, label %if.then64

land.lhs.true62.do.end67_crit_edge:               ; preds = %land.lhs.true62
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.end67

if.then64:                                        ; preds = %land.lhs.true62
  call void @__sanitizer_cov_trace_pc() #26
  store i1 true, ptr @trace_regmap_hw_write_done.__warned, align 1
  tail call void @lockdep_rcu_suspicious(ptr noundef nonnull @.str.60, i32 noundef 116, ptr noundef nonnull @.str.61) #24
  br label %do.end67

do.end67:                                         ; preds = %if.then64, %land.lhs.true62.do.end67_crit_edge, %land.lhs.true.do.end67_crit_edge, %if.then52.do.end67_crit_edge
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !395
  %38 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i.i.i.i86 = and i32 %38, -16384
  %39 = inttoptr i32 %and.i.i.i.i86 to ptr
  %preempt_count.i.i.i87 = getelementptr inbounds %struct.thread_info, ptr %39, i32 0, i32 1
  %40 = ptrtoint ptr %preempt_count.i.i.i87 to i32
  call void @__asan_load4_noabort(i32 %40)
  %41 = load volatile i32, ptr %preempt_count.i.i.i87, align 4
  %sub.i.i = add i32 %41, -1
  store volatile i32 %sub.i.i, ptr %preempt_count.i.i.i87, align 4
  br label %if.end69

if.end69:                                         ; preds = %do.end67, %cpu_online.exit85.if.end69_crit_edge, %cpu_online.exit.if.end69_crit_edge
  ret void
}

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @rcu_read_lock_sched_held() local_unnamed_addr #2

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @debug_lockdep_rcu_enabled() local_unnamed_addr #2

; Function Attrs: null_pointer_is_valid
declare dso_local void @lockdep_rcu_suspicious(ptr noundef, i32 noundef, ptr noundef) local_unnamed_addr #2

; Function Attrs: null_pointer_is_valid
declare dso_local void @__dynamic_dev_dbg(ptr noundef, ptr noundef, ptr noundef, ...) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal fastcc void @trace_regmap_async_write_start(ptr noundef %map, i32 noundef %reg, i32 noundef %count) unnamed_addr #14 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  callbr void asm sideeffect "1:\0A\09nop\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr getelementptr inbounds ({ ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr }, ptr @__tracepoint_regmap_async_write_start, i32 0, i32 1, i32 0, i32 0), ptr blockaddress(@trace_regmap_async_write_start, %do.body)) #24
          to label %if.end48 [label %do.body], !srcloc !391

do.body:                                          ; preds = %entry
  %0 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i = and i32 %0, -16384
  %1 = inttoptr i32 %and.i to ptr
  %cpu = getelementptr inbounds %struct.thread_info, ptr %1, i32 0, i32 3
  %2 = ptrtoint ptr %cpu to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load i32, ptr %cpu, align 4
  call void @__asan_load4_noabort(i32 ptrtoint (ptr @nr_cpu_ids to i32))
  %4 = load i32, ptr @nr_cpu_ids, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %4, i32 %3)
  %cmp.not.i.i.i.i = icmp ugt i32 %4, %3
  br i1 %cmp.not.i.i.i.i, label %do.body.cpu_online.exit_crit_edge, label %land.rhs.i.i.i.i

do.body.cpu_online.exit_crit_edge:                ; preds = %do.body
  call void @__sanitizer_cov_trace_pc() #26
  br label %cpu_online.exit

land.rhs.i.i.i.i:                                 ; preds = %do.body
  %.b37.i.i.i.i = load i1, ptr @cpu_max_bits_warn.__already_done, align 1
  br i1 %.b37.i.i.i.i, label %land.rhs.i.i.i.i.cpu_online.exit_crit_edge, label %if.then.i.i.i.i, !prof !386

land.rhs.i.i.i.i.cpu_online.exit_crit_edge:       ; preds = %land.rhs.i.i.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %cpu_online.exit

if.then.i.i.i.i:                                  ; preds = %land.rhs.i.i.i.i
  call void @__sanitizer_cov_trace_pc() #26
  store i1 true, ptr @cpu_max_bits_warn.__already_done, align 1
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.62, i32 noundef 108, i32 noundef 9, ptr noundef null) #24
  br label %cpu_online.exit

cpu_online.exit:                                  ; preds = %if.then.i.i.i.i, %land.rhs.i.i.i.i.cpu_online.exit_crit_edge, %do.body.cpu_online.exit_crit_edge
  %div1.i.i.i = lshr i32 %3, 5
  %arrayidx.i.i.i = getelementptr i32, ptr @__cpu_online_mask, i32 %div1.i.i.i
  %5 = ptrtoint ptr %arrayidx.i.i.i to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load volatile i32, ptr %arrayidx.i.i.i, align 4
  %and.i.i.i75 = and i32 %3, 31
  %7 = shl nuw i32 1, %and.i.i.i75
  %8 = and i32 %6, %7
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %8)
  %tobool.i.not = icmp eq i32 %8, 0
  br i1 %tobool.i.not, label %cpu_online.exit.if.end69_crit_edge, label %if.end31

cpu_online.exit.if.end69_crit_edge:               ; preds = %cpu_online.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end69

if.end31:                                         ; preds = %cpu_online.exit
  %9 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i.i.i = and i32 %9, -16384
  %10 = inttoptr i32 %and.i.i.i to ptr
  %preempt_count.i.i = getelementptr inbounds %struct.thread_info, ptr %10, i32 0, i32 1
  %11 = ptrtoint ptr %preempt_count.i.i to i32
  call void @__asan_load4_noabort(i32 %11)
  %12 = load volatile i32, ptr %preempt_count.i.i, align 4
  %add.i = add i32 %12, 1
  store volatile i32 %add.i, ptr %preempt_count.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !406
  %13 = load volatile ptr, ptr getelementptr inbounds ({ ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr }, ptr @__tracepoint_regmap_async_write_start, i32 0, i32 7), align 4
  %tobool.not.i = icmp eq ptr %13, null
  br i1 %tobool.not.i, label %if.end48.critedge, label %if.end31.do.body2.i_crit_edge

if.end31.do.body2.i_crit_edge:                    ; preds = %if.end31
  br label %do.body2.i

do.body2.i:                                       ; preds = %do.body2.i.do.body2.i_crit_edge, %if.end31.do.body2.i_crit_edge
  %it_func_ptr.0.i = phi ptr [ %incdec.ptr.i, %do.body2.i.do.body2.i_crit_edge ], [ %13, %if.end31.do.body2.i_crit_edge ]
  %14 = ptrtoint ptr %it_func_ptr.0.i to i32
  call void @__asan_load4_noabort(i32 %14)
  %15 = load volatile ptr, ptr %it_func_ptr.0.i, align 4
  %data.i = getelementptr inbounds %struct.tracepoint_func, ptr %it_func_ptr.0.i, i32 0, i32 1
  %16 = ptrtoint ptr %data.i to i32
  call void @__asan_load4_noabort(i32 %16)
  %17 = load ptr, ptr %data.i, align 4
  tail call void %15(ptr noundef %17, ptr noundef %map, i32 noundef %reg, i32 noundef %count) #24
  %incdec.ptr.i = getelementptr %struct.tracepoint_func, ptr %it_func_ptr.0.i, i32 1
  %18 = ptrtoint ptr %incdec.ptr.i to i32
  call void @__asan_load4_noabort(i32 %18)
  %19 = load ptr, ptr %incdec.ptr.i, align 4
  %tobool9.not.i = icmp eq ptr %19, null
  br i1 %tobool9.not.i, label %cleanup, label %do.body2.i.do.body2.i_crit_edge

do.body2.i.do.body2.i_crit_edge:                  ; preds = %do.body2.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.body2.i

cleanup:                                          ; preds = %do.body2.i
  call void @__sanitizer_cov_trace_pc() #26
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !407
  br label %if.end48.sink.split

if.end48.critedge:                                ; preds = %if.end31
  call void @__sanitizer_cov_trace_pc() #26
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !407
  br label %if.end48.sink.split

if.end48.sink.split:                              ; preds = %if.end48.critedge, %cleanup
  %20 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i.i.i73.c = and i32 %20, -16384
  %21 = inttoptr i32 %and.i.i.i73.c to ptr
  %preempt_count.i.i74.c = getelementptr inbounds %struct.thread_info, ptr %21, i32 0, i32 1
  %22 = ptrtoint ptr %preempt_count.i.i74.c to i32
  call void @__asan_load4_noabort(i32 %22)
  %23 = load volatile i32, ptr %preempt_count.i.i74.c, align 4
  %sub.i = add i32 %23, -1
  store volatile i32 %sub.i, ptr %preempt_count.i.i74.c, align 4
  br label %if.end48

if.end48:                                         ; preds = %if.end48.sink.split, %entry
  %24 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i76 = and i32 %24, -16384
  %25 = inttoptr i32 %and.i76 to ptr
  %cpu50 = getelementptr inbounds %struct.thread_info, ptr %25, i32 0, i32 3
  %26 = ptrtoint ptr %cpu50 to i32
  call void @__asan_load4_noabort(i32 %26)
  %27 = load i32, ptr %cpu50, align 4
  call void @__asan_load4_noabort(i32 ptrtoint (ptr @nr_cpu_ids to i32))
  %28 = load i32, ptr @nr_cpu_ids, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %28, i32 %27)
  %cmp.not.i.i.i.i77 = icmp ugt i32 %28, %27
  br i1 %cmp.not.i.i.i.i77, label %if.end48.cpu_online.exit85_crit_edge, label %land.rhs.i.i.i.i79

if.end48.cpu_online.exit85_crit_edge:             ; preds = %if.end48
  call void @__sanitizer_cov_trace_pc() #26
  br label %cpu_online.exit85

land.rhs.i.i.i.i79:                               ; preds = %if.end48
  %.b37.i.i.i.i78 = load i1, ptr @cpu_max_bits_warn.__already_done, align 1
  br i1 %.b37.i.i.i.i78, label %land.rhs.i.i.i.i79.cpu_online.exit85_crit_edge, label %if.then.i.i.i.i80, !prof !386

land.rhs.i.i.i.i79.cpu_online.exit85_crit_edge:   ; preds = %land.rhs.i.i.i.i79
  call void @__sanitizer_cov_trace_pc() #26
  br label %cpu_online.exit85

if.then.i.i.i.i80:                                ; preds = %land.rhs.i.i.i.i79
  call void @__sanitizer_cov_trace_pc() #26
  store i1 true, ptr @cpu_max_bits_warn.__already_done, align 1
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.62, i32 noundef 108, i32 noundef 9, ptr noundef null) #24
  br label %cpu_online.exit85

cpu_online.exit85:                                ; preds = %if.then.i.i.i.i80, %land.rhs.i.i.i.i79.cpu_online.exit85_crit_edge, %if.end48.cpu_online.exit85_crit_edge
  %div1.i.i.i81 = lshr i32 %27, 5
  %arrayidx.i.i.i82 = getelementptr i32, ptr @__cpu_online_mask, i32 %div1.i.i.i81
  %29 = ptrtoint ptr %arrayidx.i.i.i82 to i32
  call void @__asan_load4_noabort(i32 %29)
  %30 = load volatile i32, ptr %arrayidx.i.i.i82, align 4
  %and.i.i.i83 = and i32 %27, 31
  %31 = shl nuw i32 1, %and.i.i.i83
  %32 = and i32 %30, %31
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %32)
  %tobool.i84.not = icmp eq i32 %32, 0
  br i1 %tobool.i84.not, label %cpu_online.exit85.if.end69_crit_edge, label %if.then52

cpu_online.exit85.if.end69_crit_edge:             ; preds = %cpu_online.exit85
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end69

if.then52:                                        ; preds = %cpu_online.exit85
  %33 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i.i.i.i = and i32 %33, -16384
  %34 = inttoptr i32 %and.i.i.i.i to ptr
  %preempt_count.i.i.i = getelementptr inbounds %struct.thread_info, ptr %34, i32 0, i32 1
  %35 = ptrtoint ptr %preempt_count.i.i.i to i32
  call void @__asan_load4_noabort(i32 %35)
  %36 = load volatile i32, ptr %preempt_count.i.i.i, align 4
  %add.i.i = add i32 %36, 1
  store volatile i32 %add.i.i, ptr %preempt_count.i.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !394
  %37 = load volatile ptr, ptr getelementptr inbounds ({ ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr }, ptr @__tracepoint_regmap_async_write_start, i32 0, i32 7), align 4
  %call58 = tail call i32 @rcu_read_lock_sched_held() #24
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call58)
  %tobool59.not = icmp eq i32 %call58, 0
  br i1 %tobool59.not, label %land.lhs.true, label %if.then52.do.end67_crit_edge

if.then52.do.end67_crit_edge:                     ; preds = %if.then52
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.end67

land.lhs.true:                                    ; preds = %if.then52
  %call60 = tail call i32 @debug_lockdep_rcu_enabled() #24
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call60)
  %tobool61.not = icmp eq i32 %call60, 0
  br i1 %tobool61.not, label %land.lhs.true.do.end67_crit_edge, label %land.lhs.true62

land.lhs.true.do.end67_crit_edge:                 ; preds = %land.lhs.true
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.end67

land.lhs.true62:                                  ; preds = %land.lhs.true
  %.b72 = load i1, ptr @trace_regmap_async_write_start.__warned, align 1
  br i1 %.b72, label %land.lhs.true62.do.end67_crit_edge, label %if.then64

land.lhs.true62.do.end67_crit_edge:               ; preds = %land.lhs.true62
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.end67

if.then64:                                        ; preds = %land.lhs.true62
  call void @__sanitizer_cov_trace_pc() #26
  store i1 true, ptr @trace_regmap_async_write_start.__warned, align 1
  tail call void @lockdep_rcu_suspicious(ptr noundef nonnull @.str.60, i32 noundef 199, ptr noundef nonnull @.str.61) #24
  br label %do.end67

do.end67:                                         ; preds = %if.then64, %land.lhs.true62.do.end67_crit_edge, %land.lhs.true.do.end67_crit_edge, %if.then52.do.end67_crit_edge
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !395
  %38 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i.i.i.i86 = and i32 %38, -16384
  %39 = inttoptr i32 %and.i.i.i.i86 to ptr
  %preempt_count.i.i.i87 = getelementptr inbounds %struct.thread_info, ptr %39, i32 0, i32 1
  %40 = ptrtoint ptr %preempt_count.i.i.i87 to i32
  call void @__asan_load4_noabort(i32 %40)
  %41 = load volatile i32, ptr %preempt_count.i.i.i87, align 4
  %sub.i.i = add i32 %41, -1
  store volatile i32 %sub.i.i, ptr %preempt_count.i.i.i87, align 4
  br label %if.end69

if.end69:                                         ; preds = %do.end67, %cpu_online.exit85.if.end69_crit_edge, %cpu_online.exit.if.end69_crit_edge
  ret void
}

; Function Attrs: null_pointer_is_valid
declare dso_local zeroext i1 @__list_add_valid(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #2

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal fastcc i32 @_regmap_raw_multi_reg_write(ptr noundef %map, ptr nocapture noundef readonly %regs, i32 noundef %num_regs) unnamed_addr #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  call void @llvm.arm.gnu.eabi.mcount()
  %val_bytes1 = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 7, i32 3
  %0 = ptrtoint ptr %val_bytes1 to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load i32, ptr %val_bytes1, align 4
  %reg_bytes3 = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 7, i32 1
  %2 = ptrtoint ptr %reg_bytes3 to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load i32, ptr %reg_bytes3, align 4
  %pad_bytes5 = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 7, i32 2
  %4 = ptrtoint ptr %pad_bytes5 to i32
  call void @__asan_load4_noabort(i32 %4)
  %5 = load i32, ptr %pad_bytes5, align 4
  %add = add i32 %5, %3
  %add6 = add i32 %add, %1
  %mul = mul i32 %add6, %num_regs
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %mul)
  %tobool.not = icmp eq i32 %mul, 0
  br i1 %tobool.not, label %entry.cleanup_crit_edge, label %if.end8.i.i

entry.cleanup_crit_edge:                          ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

if.end8.i.i:                                      ; preds = %entry
  %call9.i.i = tail call noalias align 128 ptr @__kmalloc(i32 noundef %mul, i32 noundef 3520) #30
  %tobool7.not = icmp eq ptr %call9.i.i, null
  br i1 %tobool7.not, label %if.end8.i.i.cleanup_crit_edge, label %for.cond.preheader

if.end8.i.i.cleanup_crit_edge:                    ; preds = %if.end8.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

for.cond.preheader:                               ; preds = %if.end8.i.i
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %num_regs)
  %cmp70.not = icmp eq i32 %num_regs, 0
  br i1 %cmp70.not, label %for.cond.preheader.for.end_crit_edge, label %for.body.lr.ph

for.cond.preheader.for.end_crit_edge:             ; preds = %for.cond.preheader
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.end

for.body.lr.ph:                                   ; preds = %for.cond.preheader
  %format_reg = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 7, i32 5
  %reg_shift = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 44
  %format_val = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 7, i32 6
  br label %for.body

for.body:                                         ; preds = %for.body.for.body_crit_edge, %for.body.lr.ph
  %i.072 = phi i32 [ 0, %for.body.lr.ph ], [ %inc, %for.body.for.body_crit_edge ]
  %u8.071 = phi ptr [ %call9.i.i, %for.body.lr.ph ], [ %add.ptr15, %for.body.for.body_crit_edge ]
  %arrayidx = getelementptr %struct.reg_sequence, ptr %regs, i32 %i.072
  %6 = ptrtoint ptr %arrayidx to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load i32, ptr %arrayidx, align 4
  %def = getelementptr %struct.reg_sequence, ptr %regs, i32 %i.072, i32 1
  %8 = ptrtoint ptr %def to i32
  call void @__asan_load4_noabort(i32 %8)
  %9 = load i32, ptr %def, align 4
  tail call fastcc void @trace_regmap_hw_write_start(ptr noundef %map, i32 noundef %7, i32 noundef 1)
  %10 = ptrtoint ptr %format_reg to i32
  call void @__asan_load4_noabort(i32 %10)
  %11 = load ptr, ptr %format_reg, align 4
  %12 = ptrtoint ptr %reg_shift to i32
  call void @__asan_load4_noabort(i32 %12)
  %13 = load i32, ptr %reg_shift, align 4
  tail call void %11(ptr noundef %u8.071, i32 noundef %7, i32 noundef %13) #24
  %add.ptr = getelementptr i8, ptr %u8.071, i32 %add
  %14 = ptrtoint ptr %format_val to i32
  call void @__asan_load4_noabort(i32 %14)
  %15 = load ptr, ptr %format_val, align 4
  tail call void %15(ptr noundef %add.ptr, i32 noundef %9, i32 noundef 0) #24
  %add.ptr15 = getelementptr i8, ptr %add.ptr, i32 %1
  %inc = add nuw i32 %i.072, 1
  %exitcond.not = icmp eq i32 %inc, %num_regs
  br i1 %exitcond.not, label %for.body.for.end_crit_edge, label %for.body.for.body_crit_edge

for.body.for.body_crit_edge:                      ; preds = %for.body
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body

for.body.for.end_crit_edge:                       ; preds = %for.body
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.end

for.end:                                          ; preds = %for.body.for.end_crit_edge, %for.cond.preheader.for.end_crit_edge
  %write_flag_mask = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 43
  %16 = ptrtoint ptr %write_flag_mask to i32
  call void @__asan_load4_noabort(i32 %16)
  %17 = load i32, ptr %write_flag_mask, align 4
  %18 = ptrtoint ptr %call9.i.i to i32
  call void @__asan_load1_noabort(i32 %18)
  %19 = load i8, ptr %call9.i.i, align 128
  %20 = trunc i32 %17 to i8
  %conv16 = or i8 %19, %20
  store i8 %conv16, ptr %call9.i.i, align 128
  %bus = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 8
  %21 = ptrtoint ptr %bus to i32
  call void @__asan_load4_noabort(i32 %21)
  %22 = load ptr, ptr %bus, align 4
  %write = getelementptr inbounds %struct.regmap_bus, ptr %22, i32 0, i32 1
  %23 = ptrtoint ptr %write to i32
  call void @__asan_load4_noabort(i32 %23)
  %24 = load ptr, ptr %write, align 4
  %bus_context = getelementptr inbounds %struct.regmap, ptr %map, i32 0, i32 9
  %25 = ptrtoint ptr %bus_context to i32
  call void @__asan_load4_noabort(i32 %25)
  %26 = load ptr, ptr %bus_context, align 4
  %call17 = tail call i32 %24(ptr noundef %26, ptr noundef nonnull %call9.i.i, i32 noundef %mul) #24
  tail call void @kfree(ptr noundef nonnull %call9.i.i) #24
  br i1 %cmp70.not, label %for.end.cleanup_crit_edge, label %for.end.for.body21_crit_edge

for.end.for.body21_crit_edge:                     ; preds = %for.end
  br label %for.body21

for.end.cleanup_crit_edge:                        ; preds = %for.end
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

for.body21:                                       ; preds = %for.body21.for.body21_crit_edge, %for.end.for.body21_crit_edge
  %i.174 = phi i32 [ %inc26, %for.body21.for.body21_crit_edge ], [ 0, %for.end.for.body21_crit_edge ]
  %arrayidx23 = getelementptr %struct.reg_sequence, ptr %regs, i32 %i.174
  %27 = ptrtoint ptr %arrayidx23 to i32
  call void @__asan_load4_noabort(i32 %27)
  %28 = load i32, ptr %arrayidx23, align 4
  tail call fastcc void @trace_regmap_hw_write_done(ptr noundef %map, i32 noundef %28, i32 noundef 1)
  %inc26 = add nuw i32 %i.174, 1
  %exitcond75.not = icmp eq i32 %inc26, %num_regs
  br i1 %exitcond75.not, label %for.body21.cleanup_crit_edge, label %for.body21.for.body21_crit_edge

for.body21.for.body21_crit_edge:                  ; preds = %for.body21
  call void @__sanitizer_cov_trace_pc() #26
  br label %for.body21

for.body21.cleanup_crit_edge:                     ; preds = %for.body21
  call void @__sanitizer_cov_trace_pc() #26
  br label %cleanup

cleanup:                                          ; preds = %for.body21.cleanup_crit_edge, %for.end.cleanup_crit_edge, %if.end8.i.i.cleanup_crit_edge, %entry.cleanup_crit_edge
  %retval.0 = phi i32 [ -22, %entry.cleanup_crit_edge ], [ -12, %if.end8.i.i.cleanup_crit_edge ], [ %call17, %for.end.cleanup_crit_edge ], [ %call17, %for.body21.cleanup_crit_edge ]
  ret i32 %retval.0
}

; Function Attrs: null_pointer_is_valid
declare dso_local void @msleep(i32 noundef) local_unnamed_addr #2

; Function Attrs: null_pointer_is_valid
declare dso_local void @usleep_range_state(i32 noundef, i32 noundef, i32 noundef) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal fastcc void @trace_regmap_reg_read(ptr noundef %map, i32 noundef %reg, i32 noundef %val) unnamed_addr #14 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  callbr void asm sideeffect "1:\0A\09nop\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr getelementptr inbounds ({ ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr }, ptr @__tracepoint_regmap_reg_read, i32 0, i32 1, i32 0, i32 0), ptr blockaddress(@trace_regmap_reg_read, %do.body)) #24
          to label %if.end48 [label %do.body], !srcloc !391

do.body:                                          ; preds = %entry
  %0 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i = and i32 %0, -16384
  %1 = inttoptr i32 %and.i to ptr
  %cpu = getelementptr inbounds %struct.thread_info, ptr %1, i32 0, i32 3
  %2 = ptrtoint ptr %cpu to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load i32, ptr %cpu, align 4
  call void @__asan_load4_noabort(i32 ptrtoint (ptr @nr_cpu_ids to i32))
  %4 = load i32, ptr @nr_cpu_ids, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %4, i32 %3)
  %cmp.not.i.i.i.i = icmp ugt i32 %4, %3
  br i1 %cmp.not.i.i.i.i, label %do.body.cpu_online.exit_crit_edge, label %land.rhs.i.i.i.i

do.body.cpu_online.exit_crit_edge:                ; preds = %do.body
  call void @__sanitizer_cov_trace_pc() #26
  br label %cpu_online.exit

land.rhs.i.i.i.i:                                 ; preds = %do.body
  %.b37.i.i.i.i = load i1, ptr @cpu_max_bits_warn.__already_done, align 1
  br i1 %.b37.i.i.i.i, label %land.rhs.i.i.i.i.cpu_online.exit_crit_edge, label %if.then.i.i.i.i, !prof !386

land.rhs.i.i.i.i.cpu_online.exit_crit_edge:       ; preds = %land.rhs.i.i.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %cpu_online.exit

if.then.i.i.i.i:                                  ; preds = %land.rhs.i.i.i.i
  call void @__sanitizer_cov_trace_pc() #26
  store i1 true, ptr @cpu_max_bits_warn.__already_done, align 1
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.62, i32 noundef 108, i32 noundef 9, ptr noundef null) #24
  br label %cpu_online.exit

cpu_online.exit:                                  ; preds = %if.then.i.i.i.i, %land.rhs.i.i.i.i.cpu_online.exit_crit_edge, %do.body.cpu_online.exit_crit_edge
  %div1.i.i.i = lshr i32 %3, 5
  %arrayidx.i.i.i = getelementptr i32, ptr @__cpu_online_mask, i32 %div1.i.i.i
  %5 = ptrtoint ptr %arrayidx.i.i.i to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load volatile i32, ptr %arrayidx.i.i.i, align 4
  %and.i.i.i75 = and i32 %3, 31
  %7 = shl nuw i32 1, %and.i.i.i75
  %8 = and i32 %6, %7
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %8)
  %tobool.i.not = icmp eq i32 %8, 0
  br i1 %tobool.i.not, label %cpu_online.exit.if.end69_crit_edge, label %if.end31

cpu_online.exit.if.end69_crit_edge:               ; preds = %cpu_online.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end69

if.end31:                                         ; preds = %cpu_online.exit
  %9 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i.i.i = and i32 %9, -16384
  %10 = inttoptr i32 %and.i.i.i to ptr
  %preempt_count.i.i = getelementptr inbounds %struct.thread_info, ptr %10, i32 0, i32 1
  %11 = ptrtoint ptr %preempt_count.i.i to i32
  call void @__asan_load4_noabort(i32 %11)
  %12 = load volatile i32, ptr %preempt_count.i.i, align 4
  %add.i = add i32 %12, 1
  store volatile i32 %add.i, ptr %preempt_count.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !408
  %13 = load volatile ptr, ptr getelementptr inbounds ({ ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr }, ptr @__tracepoint_regmap_reg_read, i32 0, i32 7), align 4
  %tobool.not.i = icmp eq ptr %13, null
  br i1 %tobool.not.i, label %if.end48.critedge, label %if.end31.do.body2.i_crit_edge

if.end31.do.body2.i_crit_edge:                    ; preds = %if.end31
  br label %do.body2.i

do.body2.i:                                       ; preds = %do.body2.i.do.body2.i_crit_edge, %if.end31.do.body2.i_crit_edge
  %it_func_ptr.0.i = phi ptr [ %incdec.ptr.i, %do.body2.i.do.body2.i_crit_edge ], [ %13, %if.end31.do.body2.i_crit_edge ]
  %14 = ptrtoint ptr %it_func_ptr.0.i to i32
  call void @__asan_load4_noabort(i32 %14)
  %15 = load volatile ptr, ptr %it_func_ptr.0.i, align 4
  %data.i = getelementptr inbounds %struct.tracepoint_func, ptr %it_func_ptr.0.i, i32 0, i32 1
  %16 = ptrtoint ptr %data.i to i32
  call void @__asan_load4_noabort(i32 %16)
  %17 = load ptr, ptr %data.i, align 4
  tail call void %15(ptr noundef %17, ptr noundef %map, i32 noundef %reg, i32 noundef %val) #24
  %incdec.ptr.i = getelementptr %struct.tracepoint_func, ptr %it_func_ptr.0.i, i32 1
  %18 = ptrtoint ptr %incdec.ptr.i to i32
  call void @__asan_load4_noabort(i32 %18)
  %19 = load ptr, ptr %incdec.ptr.i, align 4
  %tobool9.not.i = icmp eq ptr %19, null
  br i1 %tobool9.not.i, label %cleanup, label %do.body2.i.do.body2.i_crit_edge

do.body2.i.do.body2.i_crit_edge:                  ; preds = %do.body2.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.body2.i

cleanup:                                          ; preds = %do.body2.i
  call void @__sanitizer_cov_trace_pc() #26
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !409
  br label %if.end48.sink.split

if.end48.critedge:                                ; preds = %if.end31
  call void @__sanitizer_cov_trace_pc() #26
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !409
  br label %if.end48.sink.split

if.end48.sink.split:                              ; preds = %if.end48.critedge, %cleanup
  %20 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i.i.i73.c = and i32 %20, -16384
  %21 = inttoptr i32 %and.i.i.i73.c to ptr
  %preempt_count.i.i74.c = getelementptr inbounds %struct.thread_info, ptr %21, i32 0, i32 1
  %22 = ptrtoint ptr %preempt_count.i.i74.c to i32
  call void @__asan_load4_noabort(i32 %22)
  %23 = load volatile i32, ptr %preempt_count.i.i74.c, align 4
  %sub.i = add i32 %23, -1
  store volatile i32 %sub.i, ptr %preempt_count.i.i74.c, align 4
  br label %if.end48

if.end48:                                         ; preds = %if.end48.sink.split, %entry
  %24 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i76 = and i32 %24, -16384
  %25 = inttoptr i32 %and.i76 to ptr
  %cpu50 = getelementptr inbounds %struct.thread_info, ptr %25, i32 0, i32 3
  %26 = ptrtoint ptr %cpu50 to i32
  call void @__asan_load4_noabort(i32 %26)
  %27 = load i32, ptr %cpu50, align 4
  call void @__asan_load4_noabort(i32 ptrtoint (ptr @nr_cpu_ids to i32))
  %28 = load i32, ptr @nr_cpu_ids, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %28, i32 %27)
  %cmp.not.i.i.i.i77 = icmp ugt i32 %28, %27
  br i1 %cmp.not.i.i.i.i77, label %if.end48.cpu_online.exit85_crit_edge, label %land.rhs.i.i.i.i79

if.end48.cpu_online.exit85_crit_edge:             ; preds = %if.end48
  call void @__sanitizer_cov_trace_pc() #26
  br label %cpu_online.exit85

land.rhs.i.i.i.i79:                               ; preds = %if.end48
  %.b37.i.i.i.i78 = load i1, ptr @cpu_max_bits_warn.__already_done, align 1
  br i1 %.b37.i.i.i.i78, label %land.rhs.i.i.i.i79.cpu_online.exit85_crit_edge, label %if.then.i.i.i.i80, !prof !386

land.rhs.i.i.i.i79.cpu_online.exit85_crit_edge:   ; preds = %land.rhs.i.i.i.i79
  call void @__sanitizer_cov_trace_pc() #26
  br label %cpu_online.exit85

if.then.i.i.i.i80:                                ; preds = %land.rhs.i.i.i.i79
  call void @__sanitizer_cov_trace_pc() #26
  store i1 true, ptr @cpu_max_bits_warn.__already_done, align 1
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.62, i32 noundef 108, i32 noundef 9, ptr noundef null) #24
  br label %cpu_online.exit85

cpu_online.exit85:                                ; preds = %if.then.i.i.i.i80, %land.rhs.i.i.i.i79.cpu_online.exit85_crit_edge, %if.end48.cpu_online.exit85_crit_edge
  %div1.i.i.i81 = lshr i32 %27, 5
  %arrayidx.i.i.i82 = getelementptr i32, ptr @__cpu_online_mask, i32 %div1.i.i.i81
  %29 = ptrtoint ptr %arrayidx.i.i.i82 to i32
  call void @__asan_load4_noabort(i32 %29)
  %30 = load volatile i32, ptr %arrayidx.i.i.i82, align 4
  %and.i.i.i83 = and i32 %27, 31
  %31 = shl nuw i32 1, %and.i.i.i83
  %32 = and i32 %30, %31
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %32)
  %tobool.i84.not = icmp eq i32 %32, 0
  br i1 %tobool.i84.not, label %cpu_online.exit85.if.end69_crit_edge, label %if.then52

cpu_online.exit85.if.end69_crit_edge:             ; preds = %cpu_online.exit85
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end69

if.then52:                                        ; preds = %cpu_online.exit85
  %33 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i.i.i.i = and i32 %33, -16384
  %34 = inttoptr i32 %and.i.i.i.i to ptr
  %preempt_count.i.i.i = getelementptr inbounds %struct.thread_info, ptr %34, i32 0, i32 1
  %35 = ptrtoint ptr %preempt_count.i.i.i to i32
  call void @__asan_load4_noabort(i32 %35)
  %36 = load volatile i32, ptr %preempt_count.i.i.i, align 4
  %add.i.i = add i32 %36, 1
  store volatile i32 %add.i.i, ptr %preempt_count.i.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !394
  %37 = load volatile ptr, ptr getelementptr inbounds ({ ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr }, ptr @__tracepoint_regmap_reg_read, i32 0, i32 7), align 4
  %call58 = tail call i32 @rcu_read_lock_sched_held() #24
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call58)
  %tobool59.not = icmp eq i32 %call58, 0
  br i1 %tobool59.not, label %land.lhs.true, label %if.then52.do.end67_crit_edge

if.then52.do.end67_crit_edge:                     ; preds = %if.then52
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.end67

land.lhs.true:                                    ; preds = %if.then52
  %call60 = tail call i32 @debug_lockdep_rcu_enabled() #24
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call60)
  %tobool61.not = icmp eq i32 %call60, 0
  br i1 %tobool61.not, label %land.lhs.true.do.end67_crit_edge, label %land.lhs.true62

land.lhs.true.do.end67_crit_edge:                 ; preds = %land.lhs.true
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.end67

land.lhs.true62:                                  ; preds = %land.lhs.true
  %.b72 = load i1, ptr @trace_regmap_reg_read.__warned, align 1
  br i1 %.b72, label %land.lhs.true62.do.end67_crit_edge, label %if.then64

land.lhs.true62.do.end67_crit_edge:               ; preds = %land.lhs.true62
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.end67

if.then64:                                        ; preds = %land.lhs.true62
  call void @__sanitizer_cov_trace_pc() #26
  store i1 true, ptr @trace_regmap_reg_read.__warned, align 1
  tail call void @lockdep_rcu_suspicious(ptr noundef nonnull @.str.60, i32 noundef 56, ptr noundef nonnull @.str.61) #24
  br label %do.end67

do.end67:                                         ; preds = %if.then64, %land.lhs.true62.do.end67_crit_edge, %land.lhs.true.do.end67_crit_edge, %if.then52.do.end67_crit_edge
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !395
  %38 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i.i.i.i86 = and i32 %38, -16384
  %39 = inttoptr i32 %and.i.i.i.i86 to ptr
  %preempt_count.i.i.i87 = getelementptr inbounds %struct.thread_info, ptr %39, i32 0, i32 1
  %40 = ptrtoint ptr %preempt_count.i.i.i87 to i32
  call void @__asan_load4_noabort(i32 %40)
  %41 = load volatile i32, ptr %preempt_count.i.i.i87, align 4
  %sub.i.i = add i32 %41, -1
  store volatile i32 %sub.i.i, ptr %preempt_count.i.i.i87, align 4
  br label %if.end69

if.end69:                                         ; preds = %do.end67, %cpu_online.exit85.if.end69_crit_edge, %cpu_online.exit.if.end69_crit_edge
  ret void
}

; Function Attrs: inlinehint nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal fastcc void @trace_regmap_hw_read_start(ptr noundef %map, i32 noundef %reg, i32 noundef %count) unnamed_addr #14 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  callbr void asm sideeffect "1:\0A\09nop\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr getelementptr inbounds ({ ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr }, ptr @__tracepoint_regmap_hw_read_start, i32 0, i32 1, i32 0, i32 0), ptr blockaddress(@trace_regmap_hw_read_start, %do.body)) #24
          to label %if.end48 [label %do.body], !srcloc !391

do.body:                                          ; preds = %entry
  %0 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i = and i32 %0, -16384
  %1 = inttoptr i32 %and.i to ptr
  %cpu = getelementptr inbounds %struct.thread_info, ptr %1, i32 0, i32 3
  %2 = ptrtoint ptr %cpu to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load i32, ptr %cpu, align 4
  call void @__asan_load4_noabort(i32 ptrtoint (ptr @nr_cpu_ids to i32))
  %4 = load i32, ptr @nr_cpu_ids, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %4, i32 %3)
  %cmp.not.i.i.i.i = icmp ugt i32 %4, %3
  br i1 %cmp.not.i.i.i.i, label %do.body.cpu_online.exit_crit_edge, label %land.rhs.i.i.i.i

do.body.cpu_online.exit_crit_edge:                ; preds = %do.body
  call void @__sanitizer_cov_trace_pc() #26
  br label %cpu_online.exit

land.rhs.i.i.i.i:                                 ; preds = %do.body
  %.b37.i.i.i.i = load i1, ptr @cpu_max_bits_warn.__already_done, align 1
  br i1 %.b37.i.i.i.i, label %land.rhs.i.i.i.i.cpu_online.exit_crit_edge, label %if.then.i.i.i.i, !prof !386

land.rhs.i.i.i.i.cpu_online.exit_crit_edge:       ; preds = %land.rhs.i.i.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %cpu_online.exit

if.then.i.i.i.i:                                  ; preds = %land.rhs.i.i.i.i
  call void @__sanitizer_cov_trace_pc() #26
  store i1 true, ptr @cpu_max_bits_warn.__already_done, align 1
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.62, i32 noundef 108, i32 noundef 9, ptr noundef null) #24
  br label %cpu_online.exit

cpu_online.exit:                                  ; preds = %if.then.i.i.i.i, %land.rhs.i.i.i.i.cpu_online.exit_crit_edge, %do.body.cpu_online.exit_crit_edge
  %div1.i.i.i = lshr i32 %3, 5
  %arrayidx.i.i.i = getelementptr i32, ptr @__cpu_online_mask, i32 %div1.i.i.i
  %5 = ptrtoint ptr %arrayidx.i.i.i to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load volatile i32, ptr %arrayidx.i.i.i, align 4
  %and.i.i.i75 = and i32 %3, 31
  %7 = shl nuw i32 1, %and.i.i.i75
  %8 = and i32 %6, %7
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %8)
  %tobool.i.not = icmp eq i32 %8, 0
  br i1 %tobool.i.not, label %cpu_online.exit.if.end69_crit_edge, label %if.end31

cpu_online.exit.if.end69_crit_edge:               ; preds = %cpu_online.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end69

if.end31:                                         ; preds = %cpu_online.exit
  %9 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i.i.i = and i32 %9, -16384
  %10 = inttoptr i32 %and.i.i.i to ptr
  %preempt_count.i.i = getelementptr inbounds %struct.thread_info, ptr %10, i32 0, i32 1
  %11 = ptrtoint ptr %preempt_count.i.i to i32
  call void @__asan_load4_noabort(i32 %11)
  %12 = load volatile i32, ptr %preempt_count.i.i, align 4
  %add.i = add i32 %12, 1
  store volatile i32 %add.i, ptr %preempt_count.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !410
  %13 = load volatile ptr, ptr getelementptr inbounds ({ ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr }, ptr @__tracepoint_regmap_hw_read_start, i32 0, i32 7), align 4
  %tobool.not.i = icmp eq ptr %13, null
  br i1 %tobool.not.i, label %if.end48.critedge, label %if.end31.do.body2.i_crit_edge

if.end31.do.body2.i_crit_edge:                    ; preds = %if.end31
  br label %do.body2.i

do.body2.i:                                       ; preds = %do.body2.i.do.body2.i_crit_edge, %if.end31.do.body2.i_crit_edge
  %it_func_ptr.0.i = phi ptr [ %incdec.ptr.i, %do.body2.i.do.body2.i_crit_edge ], [ %13, %if.end31.do.body2.i_crit_edge ]
  %14 = ptrtoint ptr %it_func_ptr.0.i to i32
  call void @__asan_load4_noabort(i32 %14)
  %15 = load volatile ptr, ptr %it_func_ptr.0.i, align 4
  %data.i = getelementptr inbounds %struct.tracepoint_func, ptr %it_func_ptr.0.i, i32 0, i32 1
  %16 = ptrtoint ptr %data.i to i32
  call void @__asan_load4_noabort(i32 %16)
  %17 = load ptr, ptr %data.i, align 4
  tail call void %15(ptr noundef %17, ptr noundef %map, i32 noundef %reg, i32 noundef %count) #24
  %incdec.ptr.i = getelementptr %struct.tracepoint_func, ptr %it_func_ptr.0.i, i32 1
  %18 = ptrtoint ptr %incdec.ptr.i to i32
  call void @__asan_load4_noabort(i32 %18)
  %19 = load ptr, ptr %incdec.ptr.i, align 4
  %tobool9.not.i = icmp eq ptr %19, null
  br i1 %tobool9.not.i, label %cleanup, label %do.body2.i.do.body2.i_crit_edge

do.body2.i.do.body2.i_crit_edge:                  ; preds = %do.body2.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.body2.i

cleanup:                                          ; preds = %do.body2.i
  call void @__sanitizer_cov_trace_pc() #26
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !411
  br label %if.end48.sink.split

if.end48.critedge:                                ; preds = %if.end31
  call void @__sanitizer_cov_trace_pc() #26
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !411
  br label %if.end48.sink.split

if.end48.sink.split:                              ; preds = %if.end48.critedge, %cleanup
  %20 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i.i.i73.c = and i32 %20, -16384
  %21 = inttoptr i32 %and.i.i.i73.c to ptr
  %preempt_count.i.i74.c = getelementptr inbounds %struct.thread_info, ptr %21, i32 0, i32 1
  %22 = ptrtoint ptr %preempt_count.i.i74.c to i32
  call void @__asan_load4_noabort(i32 %22)
  %23 = load volatile i32, ptr %preempt_count.i.i74.c, align 4
  %sub.i = add i32 %23, -1
  store volatile i32 %sub.i, ptr %preempt_count.i.i74.c, align 4
  br label %if.end48

if.end48:                                         ; preds = %if.end48.sink.split, %entry
  %24 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i76 = and i32 %24, -16384
  %25 = inttoptr i32 %and.i76 to ptr
  %cpu50 = getelementptr inbounds %struct.thread_info, ptr %25, i32 0, i32 3
  %26 = ptrtoint ptr %cpu50 to i32
  call void @__asan_load4_noabort(i32 %26)
  %27 = load i32, ptr %cpu50, align 4
  call void @__asan_load4_noabort(i32 ptrtoint (ptr @nr_cpu_ids to i32))
  %28 = load i32, ptr @nr_cpu_ids, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %28, i32 %27)
  %cmp.not.i.i.i.i77 = icmp ugt i32 %28, %27
  br i1 %cmp.not.i.i.i.i77, label %if.end48.cpu_online.exit85_crit_edge, label %land.rhs.i.i.i.i79

if.end48.cpu_online.exit85_crit_edge:             ; preds = %if.end48
  call void @__sanitizer_cov_trace_pc() #26
  br label %cpu_online.exit85

land.rhs.i.i.i.i79:                               ; preds = %if.end48
  %.b37.i.i.i.i78 = load i1, ptr @cpu_max_bits_warn.__already_done, align 1
  br i1 %.b37.i.i.i.i78, label %land.rhs.i.i.i.i79.cpu_online.exit85_crit_edge, label %if.then.i.i.i.i80, !prof !386

land.rhs.i.i.i.i79.cpu_online.exit85_crit_edge:   ; preds = %land.rhs.i.i.i.i79
  call void @__sanitizer_cov_trace_pc() #26
  br label %cpu_online.exit85

if.then.i.i.i.i80:                                ; preds = %land.rhs.i.i.i.i79
  call void @__sanitizer_cov_trace_pc() #26
  store i1 true, ptr @cpu_max_bits_warn.__already_done, align 1
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.62, i32 noundef 108, i32 noundef 9, ptr noundef null) #24
  br label %cpu_online.exit85

cpu_online.exit85:                                ; preds = %if.then.i.i.i.i80, %land.rhs.i.i.i.i79.cpu_online.exit85_crit_edge, %if.end48.cpu_online.exit85_crit_edge
  %div1.i.i.i81 = lshr i32 %27, 5
  %arrayidx.i.i.i82 = getelementptr i32, ptr @__cpu_online_mask, i32 %div1.i.i.i81
  %29 = ptrtoint ptr %arrayidx.i.i.i82 to i32
  call void @__asan_load4_noabort(i32 %29)
  %30 = load volatile i32, ptr %arrayidx.i.i.i82, align 4
  %and.i.i.i83 = and i32 %27, 31
  %31 = shl nuw i32 1, %and.i.i.i83
  %32 = and i32 %30, %31
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %32)
  %tobool.i84.not = icmp eq i32 %32, 0
  br i1 %tobool.i84.not, label %cpu_online.exit85.if.end69_crit_edge, label %if.then52

cpu_online.exit85.if.end69_crit_edge:             ; preds = %cpu_online.exit85
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end69

if.then52:                                        ; preds = %cpu_online.exit85
  %33 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i.i.i.i = and i32 %33, -16384
  %34 = inttoptr i32 %and.i.i.i.i to ptr
  %preempt_count.i.i.i = getelementptr inbounds %struct.thread_info, ptr %34, i32 0, i32 1
  %35 = ptrtoint ptr %preempt_count.i.i.i to i32
  call void @__asan_load4_noabort(i32 %35)
  %36 = load volatile i32, ptr %preempt_count.i.i.i, align 4
  %add.i.i = add i32 %36, 1
  store volatile i32 %add.i.i, ptr %preempt_count.i.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !394
  %37 = load volatile ptr, ptr getelementptr inbounds ({ ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr }, ptr @__tracepoint_regmap_hw_read_start, i32 0, i32 7), align 4
  %call58 = tail call i32 @rcu_read_lock_sched_held() #24
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call58)
  %tobool59.not = icmp eq i32 %call58, 0
  br i1 %tobool59.not, label %land.lhs.true, label %if.then52.do.end67_crit_edge

if.then52.do.end67_crit_edge:                     ; preds = %if.then52
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.end67

land.lhs.true:                                    ; preds = %if.then52
  %call60 = tail call i32 @debug_lockdep_rcu_enabled() #24
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call60)
  %tobool61.not = icmp eq i32 %call60, 0
  br i1 %tobool61.not, label %land.lhs.true.do.end67_crit_edge, label %land.lhs.true62

land.lhs.true.do.end67_crit_edge:                 ; preds = %land.lhs.true
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.end67

land.lhs.true62:                                  ; preds = %land.lhs.true
  %.b72 = load i1, ptr @trace_regmap_hw_read_start.__warned, align 1
  br i1 %.b72, label %land.lhs.true62.do.end67_crit_edge, label %if.then64

land.lhs.true62.do.end67_crit_edge:               ; preds = %land.lhs.true62
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.end67

if.then64:                                        ; preds = %land.lhs.true62
  call void @__sanitizer_cov_trace_pc() #26
  store i1 true, ptr @trace_regmap_hw_read_start.__warned, align 1
  tail call void @lockdep_rcu_suspicious(ptr noundef nonnull @.str.60, i32 noundef 95, ptr noundef nonnull @.str.61) #24
  br label %do.end67

do.end67:                                         ; preds = %if.then64, %land.lhs.true62.do.end67_crit_edge, %land.lhs.true.do.end67_crit_edge, %if.then52.do.end67_crit_edge
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !395
  %38 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i.i.i.i86 = and i32 %38, -16384
  %39 = inttoptr i32 %and.i.i.i.i86 to ptr
  %preempt_count.i.i.i87 = getelementptr inbounds %struct.thread_info, ptr %39, i32 0, i32 1
  %40 = ptrtoint ptr %preempt_count.i.i.i87 to i32
  call void @__asan_load4_noabort(i32 %40)
  %41 = load volatile i32, ptr %preempt_count.i.i.i87, align 4
  %sub.i.i = add i32 %41, -1
  store volatile i32 %sub.i.i, ptr %preempt_count.i.i.i87, align 4
  br label %if.end69

if.end69:                                         ; preds = %do.end67, %cpu_online.exit85.if.end69_crit_edge, %cpu_online.exit.if.end69_crit_edge
  ret void
}

; Function Attrs: inlinehint nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal fastcc void @trace_regmap_hw_read_done(ptr noundef %map, i32 noundef %reg, i32 noundef %count) unnamed_addr #14 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #26
  callbr void asm sideeffect "1:\0A\09nop\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr getelementptr inbounds ({ ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr }, ptr @__tracepoint_regmap_hw_read_done, i32 0, i32 1, i32 0, i32 0), ptr blockaddress(@trace_regmap_hw_read_done, %do.body)) #24
          to label %if.end48 [label %do.body], !srcloc !391

do.body:                                          ; preds = %entry
  %0 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i = and i32 %0, -16384
  %1 = inttoptr i32 %and.i to ptr
  %cpu = getelementptr inbounds %struct.thread_info, ptr %1, i32 0, i32 3
  %2 = ptrtoint ptr %cpu to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load i32, ptr %cpu, align 4
  call void @__asan_load4_noabort(i32 ptrtoint (ptr @nr_cpu_ids to i32))
  %4 = load i32, ptr @nr_cpu_ids, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %4, i32 %3)
  %cmp.not.i.i.i.i = icmp ugt i32 %4, %3
  br i1 %cmp.not.i.i.i.i, label %do.body.cpu_online.exit_crit_edge, label %land.rhs.i.i.i.i

do.body.cpu_online.exit_crit_edge:                ; preds = %do.body
  call void @__sanitizer_cov_trace_pc() #26
  br label %cpu_online.exit

land.rhs.i.i.i.i:                                 ; preds = %do.body
  %.b37.i.i.i.i = load i1, ptr @cpu_max_bits_warn.__already_done, align 1
  br i1 %.b37.i.i.i.i, label %land.rhs.i.i.i.i.cpu_online.exit_crit_edge, label %if.then.i.i.i.i, !prof !386

land.rhs.i.i.i.i.cpu_online.exit_crit_edge:       ; preds = %land.rhs.i.i.i.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %cpu_online.exit

if.then.i.i.i.i:                                  ; preds = %land.rhs.i.i.i.i
  call void @__sanitizer_cov_trace_pc() #26
  store i1 true, ptr @cpu_max_bits_warn.__already_done, align 1
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.62, i32 noundef 108, i32 noundef 9, ptr noundef null) #24
  br label %cpu_online.exit

cpu_online.exit:                                  ; preds = %if.then.i.i.i.i, %land.rhs.i.i.i.i.cpu_online.exit_crit_edge, %do.body.cpu_online.exit_crit_edge
  %div1.i.i.i = lshr i32 %3, 5
  %arrayidx.i.i.i = getelementptr i32, ptr @__cpu_online_mask, i32 %div1.i.i.i
  %5 = ptrtoint ptr %arrayidx.i.i.i to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load volatile i32, ptr %arrayidx.i.i.i, align 4
  %and.i.i.i75 = and i32 %3, 31
  %7 = shl nuw i32 1, %and.i.i.i75
  %8 = and i32 %6, %7
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %8)
  %tobool.i.not = icmp eq i32 %8, 0
  br i1 %tobool.i.not, label %cpu_online.exit.if.end69_crit_edge, label %if.end31

cpu_online.exit.if.end69_crit_edge:               ; preds = %cpu_online.exit
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end69

if.end31:                                         ; preds = %cpu_online.exit
  %9 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i.i.i = and i32 %9, -16384
  %10 = inttoptr i32 %and.i.i.i to ptr
  %preempt_count.i.i = getelementptr inbounds %struct.thread_info, ptr %10, i32 0, i32 1
  %11 = ptrtoint ptr %preempt_count.i.i to i32
  call void @__asan_load4_noabort(i32 %11)
  %12 = load volatile i32, ptr %preempt_count.i.i, align 4
  %add.i = add i32 %12, 1
  store volatile i32 %add.i, ptr %preempt_count.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !412
  %13 = load volatile ptr, ptr getelementptr inbounds ({ ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr }, ptr @__tracepoint_regmap_hw_read_done, i32 0, i32 7), align 4
  %tobool.not.i = icmp eq ptr %13, null
  br i1 %tobool.not.i, label %if.end48.critedge, label %if.end31.do.body2.i_crit_edge

if.end31.do.body2.i_crit_edge:                    ; preds = %if.end31
  br label %do.body2.i

do.body2.i:                                       ; preds = %do.body2.i.do.body2.i_crit_edge, %if.end31.do.body2.i_crit_edge
  %it_func_ptr.0.i = phi ptr [ %incdec.ptr.i, %do.body2.i.do.body2.i_crit_edge ], [ %13, %if.end31.do.body2.i_crit_edge ]
  %14 = ptrtoint ptr %it_func_ptr.0.i to i32
  call void @__asan_load4_noabort(i32 %14)
  %15 = load volatile ptr, ptr %it_func_ptr.0.i, align 4
  %data.i = getelementptr inbounds %struct.tracepoint_func, ptr %it_func_ptr.0.i, i32 0, i32 1
  %16 = ptrtoint ptr %data.i to i32
  call void @__asan_load4_noabort(i32 %16)
  %17 = load ptr, ptr %data.i, align 4
  tail call void %15(ptr noundef %17, ptr noundef %map, i32 noundef %reg, i32 noundef %count) #24
  %incdec.ptr.i = getelementptr %struct.tracepoint_func, ptr %it_func_ptr.0.i, i32 1
  %18 = ptrtoint ptr %incdec.ptr.i to i32
  call void @__asan_load4_noabort(i32 %18)
  %19 = load ptr, ptr %incdec.ptr.i, align 4
  %tobool9.not.i = icmp eq ptr %19, null
  br i1 %tobool9.not.i, label %cleanup, label %do.body2.i.do.body2.i_crit_edge

do.body2.i.do.body2.i_crit_edge:                  ; preds = %do.body2.i
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.body2.i

cleanup:                                          ; preds = %do.body2.i
  call void @__sanitizer_cov_trace_pc() #26
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !413
  br label %if.end48.sink.split

if.end48.critedge:                                ; preds = %if.end31
  call void @__sanitizer_cov_trace_pc() #26
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !413
  br label %if.end48.sink.split

if.end48.sink.split:                              ; preds = %if.end48.critedge, %cleanup
  %20 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i.i.i73.c = and i32 %20, -16384
  %21 = inttoptr i32 %and.i.i.i73.c to ptr
  %preempt_count.i.i74.c = getelementptr inbounds %struct.thread_info, ptr %21, i32 0, i32 1
  %22 = ptrtoint ptr %preempt_count.i.i74.c to i32
  call void @__asan_load4_noabort(i32 %22)
  %23 = load volatile i32, ptr %preempt_count.i.i74.c, align 4
  %sub.i = add i32 %23, -1
  store volatile i32 %sub.i, ptr %preempt_count.i.i74.c, align 4
  br label %if.end48

if.end48:                                         ; preds = %if.end48.sink.split, %entry
  %24 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i76 = and i32 %24, -16384
  %25 = inttoptr i32 %and.i76 to ptr
  %cpu50 = getelementptr inbounds %struct.thread_info, ptr %25, i32 0, i32 3
  %26 = ptrtoint ptr %cpu50 to i32
  call void @__asan_load4_noabort(i32 %26)
  %27 = load i32, ptr %cpu50, align 4
  call void @__asan_load4_noabort(i32 ptrtoint (ptr @nr_cpu_ids to i32))
  %28 = load i32, ptr @nr_cpu_ids, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %28, i32 %27)
  %cmp.not.i.i.i.i77 = icmp ugt i32 %28, %27
  br i1 %cmp.not.i.i.i.i77, label %if.end48.cpu_online.exit85_crit_edge, label %land.rhs.i.i.i.i79

if.end48.cpu_online.exit85_crit_edge:             ; preds = %if.end48
  call void @__sanitizer_cov_trace_pc() #26
  br label %cpu_online.exit85

land.rhs.i.i.i.i79:                               ; preds = %if.end48
  %.b37.i.i.i.i78 = load i1, ptr @cpu_max_bits_warn.__already_done, align 1
  br i1 %.b37.i.i.i.i78, label %land.rhs.i.i.i.i79.cpu_online.exit85_crit_edge, label %if.then.i.i.i.i80, !prof !386

land.rhs.i.i.i.i79.cpu_online.exit85_crit_edge:   ; preds = %land.rhs.i.i.i.i79
  call void @__sanitizer_cov_trace_pc() #26
  br label %cpu_online.exit85

if.then.i.i.i.i80:                                ; preds = %land.rhs.i.i.i.i79
  call void @__sanitizer_cov_trace_pc() #26
  store i1 true, ptr @cpu_max_bits_warn.__already_done, align 1
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.62, i32 noundef 108, i32 noundef 9, ptr noundef null) #24
  br label %cpu_online.exit85

cpu_online.exit85:                                ; preds = %if.then.i.i.i.i80, %land.rhs.i.i.i.i79.cpu_online.exit85_crit_edge, %if.end48.cpu_online.exit85_crit_edge
  %div1.i.i.i81 = lshr i32 %27, 5
  %arrayidx.i.i.i82 = getelementptr i32, ptr @__cpu_online_mask, i32 %div1.i.i.i81
  %29 = ptrtoint ptr %arrayidx.i.i.i82 to i32
  call void @__asan_load4_noabort(i32 %29)
  %30 = load volatile i32, ptr %arrayidx.i.i.i82, align 4
  %and.i.i.i83 = and i32 %27, 31
  %31 = shl nuw i32 1, %and.i.i.i83
  %32 = and i32 %30, %31
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %32)
  %tobool.i84.not = icmp eq i32 %32, 0
  br i1 %tobool.i84.not, label %cpu_online.exit85.if.end69_crit_edge, label %if.then52

cpu_online.exit85.if.end69_crit_edge:             ; preds = %cpu_online.exit85
  call void @__sanitizer_cov_trace_pc() #26
  br label %if.end69

if.then52:                                        ; preds = %cpu_online.exit85
  %33 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i.i.i.i = and i32 %33, -16384
  %34 = inttoptr i32 %and.i.i.i.i to ptr
  %preempt_count.i.i.i = getelementptr inbounds %struct.thread_info, ptr %34, i32 0, i32 1
  %35 = ptrtoint ptr %preempt_count.i.i.i to i32
  call void @__asan_load4_noabort(i32 %35)
  %36 = load volatile i32, ptr %preempt_count.i.i.i, align 4
  %add.i.i = add i32 %36, 1
  store volatile i32 %add.i.i, ptr %preempt_count.i.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !394
  %37 = load volatile ptr, ptr getelementptr inbounds ({ ptr, { %struct.atomic_t, { ptr } }, ptr, ptr, ptr, ptr, ptr, ptr }, ptr @__tracepoint_regmap_hw_read_done, i32 0, i32 7), align 4
  %call58 = tail call i32 @rcu_read_lock_sched_held() #24
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call58)
  %tobool59.not = icmp eq i32 %call58, 0
  br i1 %tobool59.not, label %land.lhs.true, label %if.then52.do.end67_crit_edge

if.then52.do.end67_crit_edge:                     ; preds = %if.then52
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.end67

land.lhs.true:                                    ; preds = %if.then52
  %call60 = tail call i32 @debug_lockdep_rcu_enabled() #24
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call60)
  %tobool61.not = icmp eq i32 %call60, 0
  br i1 %tobool61.not, label %land.lhs.true.do.end67_crit_edge, label %land.lhs.true62

land.lhs.true.do.end67_crit_edge:                 ; preds = %land.lhs.true
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.end67

land.lhs.true62:                                  ; preds = %land.lhs.true
  %.b72 = load i1, ptr @trace_regmap_hw_read_done.__warned, align 1
  br i1 %.b72, label %land.lhs.true62.do.end67_crit_edge, label %if.then64

land.lhs.true62.do.end67_crit_edge:               ; preds = %land.lhs.true62
  call void @__sanitizer_cov_trace_pc() #26
  br label %do.end67

if.then64:                                        ; preds = %land.lhs.true62
  call void @__sanitizer_cov_trace_pc() #26
  store i1 true, ptr @trace_regmap_hw_read_done.__warned, align 1
  tail call void @lockdep_rcu_suspicious(ptr noundef nonnull @.str.60, i32 noundef 102, ptr noundef nonnull @.str.61) #24
  br label %do.end67

do.end67:                                         ; preds = %if.then64, %land.lhs.true62.do.end67_crit_edge, %land.lhs.true.do.end67_crit_edge, %if.then52.do.end67_crit_edge
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !395
  %38 = tail call i32 @llvm.read_register.i32(metadata !376) #24
  %and.i.i.i.i86 = and i32 %38, -16384
  %39 = inttoptr i32 %and.i.i.i.i86 to ptr
  %preempt_count.i.i.i87 = getelementptr inbounds %struct.thread_info, ptr %39, i32 0, i32 1
  %40 = ptrtoint ptr %preempt_count.i.i.i87 to i32
  call void @__asan_load4_noabort(i32 %40)
  %41 = load volatile i32, ptr %preempt_count.i.i.i87, align 4
  %sub.i.i = add i32 %41, -1
  store volatile i32 %sub.i.i, ptr %preempt_count.i.i.i87, align 4
  br label %if.end69

if.end69:                                         ; preds = %do.end67, %cpu_online.exit85.if.end69_crit_edge, %cpu_online.exit.if.end69_crit_edge
  ret void
}

; Function Attrs: null_pointer_is_valid
declare dso_local void @_raw_spin_lock(ptr noundef) local_unnamed_addr #2 section ".spinlock.text"

; Function Attrs: null_pointer_is_valid
declare dso_local void @_raw_spin_unlock(ptr noundef) local_unnamed_addr #2 section ".spinlock.text"

; Function Attrs: null_pointer_is_valid
declare dso_local void @regmap_debugfs_initcall() local_unnamed_addr #2

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.fshl.i32(i32, i32, i32) #23

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.ctpop.i32(i32) #23

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.umax.i32(i32, i32) #23

; Function Attrs: nounwind
declare void @llvm.arm.gnu.eabi.mcount() #24

declare void @__sanitizer_cov_trace_cmp4(i32 zeroext, i32 zeroext)

declare void @__sanitizer_cov_trace_const_cmp1(i8 zeroext, i8 zeroext)

declare void @__sanitizer_cov_trace_const_cmp4(i32 zeroext, i32 zeroext)

declare void @__sanitizer_cov_trace_switch(i64, ptr)

declare void @__sanitizer_cov_trace_pc()

declare void @__asan_loadN_noabort(i32, i32)

declare void @__asan_load1_noabort(i32)

declare void @__asan_load2_noabort(i32)

declare void @__asan_load4_noabort(i32)

declare void @__asan_storeN_noabort(i32, i32)

declare void @__asan_store1_noabort(i32)

declare void @__asan_store2_noabort(i32)

declare void @__asan_store4_noabort(i32)

declare ptr @memcpy(ptr, ptr, i32)

declare ptr @memset(ptr, i32, i32)

declare void @__asan_register_globals(i32, i32)

declare void @__asan_unregister_globals(i32, i32)

; Function Attrs: nounwind uwtable(sync)
define internal void @asan.module_ctor() #25 {
  call void @__asan_register_globals(i32 ptrtoint (ptr @0 to i32), i32 94)
  ret void
}

; Function Attrs: nounwind uwtable(sync)
define internal void @asan.module_dtor() #25 {
  call void @__asan_unregister_globals(i32 ptrtoint (ptr @0 to i32), i32 94)
  ret void
}

attributes #0 = { nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync) "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="mpcore" "target-features"="+armv6k,+dsp,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" "warn-stack-size"="1024" }
attributes #1 = { argmemonly nocallback nofree nosync nounwind willreturn }
attributes #2 = { null_pointer_is_valid "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="mpcore" "target-features"="+armv6k,+dsp,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" }
attributes #3 = { nofree norecurse nosync nounwind null_pointer_is_valid readonly sanitize_address sspstrong uwtable(sync) "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="mpcore" "target-features"="+armv6k,+dsp,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" "warn-stack-size"="1024" }
attributes #4 = { mustprogress nofree norecurse nosync nounwind null_pointer_is_valid readnone sanitize_address sspstrong willreturn uwtable(sync) "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="mpcore" "target-features"="+armv6k,+dsp,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" "warn-stack-size"="1024" }
attributes #5 = { mustprogress nofree norecurse nosync nounwind null_pointer_is_valid sanitize_address sspstrong willreturn uwtable(sync) "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="mpcore" "target-features"="+armv6k,+dsp,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" "warn-stack-size"="1024" }
attributes #6 = { argmemonly mustprogress nofree norecurse nosync nounwind null_pointer_is_valid sanitize_address sspstrong willreturn writeonly uwtable(sync) "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="mpcore" "target-features"="+armv6k,+dsp,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" "warn-stack-size"="1024" }
attributes #7 = { argmemonly mustprogress nofree nosync nounwind null_pointer_is_valid sanitize_address sspstrong willreturn writeonly uwtable(sync) "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="mpcore" "target-features"="+armv6k,+dsp,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" "warn-stack-size"="1024" }
attributes #8 = { argmemonly mustprogress nofree norecurse nosync nounwind null_pointer_is_valid readonly sanitize_address sspstrong willreturn uwtable(sync) "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="mpcore" "target-features"="+armv6k,+dsp,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" "warn-stack-size"="1024" }
attributes #9 = { argmemonly mustprogress nofree norecurse nosync nounwind null_pointer_is_valid sanitize_address sspstrong willreturn uwtable(sync) "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="mpcore" "target-features"="+armv6k,+dsp,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" "warn-stack-size"="1024" }
attributes #10 = { argmemonly mustprogress nofree nosync nounwind null_pointer_is_valid readonly sanitize_address sspstrong willreturn uwtable(sync) "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="mpcore" "target-features"="+armv6k,+dsp,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" "warn-stack-size"="1024" }
attributes #11 = { argmemonly mustprogress nofree nosync nounwind null_pointer_is_valid sanitize_address sspstrong willreturn uwtable(sync) "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="mpcore" "target-features"="+armv6k,+dsp,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" "warn-stack-size"="1024" }
attributes #12 = { cold null_pointer_is_valid "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="mpcore" "target-features"="+armv6k,+dsp,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" }
attributes #13 = { mustprogress nofree norecurse nosync nounwind null_pointer_is_valid readonly sanitize_address sspstrong willreturn uwtable(sync) "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="mpcore" "target-features"="+armv6k,+dsp,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" "warn-stack-size"="1024" }
attributes #14 = { inlinehint nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync) "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="mpcore" "target-features"="+armv6k,+dsp,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" "warn-stack-size"="1024" }
attributes #15 = { null_pointer_is_valid allocsize(1) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="mpcore" "target-features"="+armv6k,+dsp,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" }
attributes #16 = { cold nounwind null_pointer_is_valid optsize sanitize_address sspstrong uwtable(sync) "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="mpcore" "target-features"="+armv6k,+dsp,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" "warn-stack-size"="1024" }
attributes #17 = { argmemonly mustprogress nofree nounwind null_pointer_is_valid willreturn "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="mpcore" "target-features"="+armv6k,+dsp,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" }
attributes #18 = { argmemonly mustprogress nofree nounwind null_pointer_is_valid readonly willreturn "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="mpcore" "target-features"="+armv6k,+dsp,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" }
attributes #19 = { nounwind readonly }
attributes #20 = { nocallback nofree nosync nounwind readnone willreturn }
attributes #21 = { null_pointer_is_valid allocsize(2) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="mpcore" "target-features"="+armv6k,+dsp,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" }
attributes #22 = { null_pointer_is_valid allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="mpcore" "target-features"="+armv6k,+dsp,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" }
attributes #23 = { nocallback nofree nosync nounwind readnone speculatable willreturn }
attributes #24 = { nounwind }
attributes #25 = { nounwind uwtable(sync) "frame-pointer"="all" }
attributes #26 = { nomerge }
attributes #27 = { nobuiltin nounwind }
attributes #28 = { nobuiltin }
attributes #29 = { nounwind allocsize(2) }
attributes #30 = { nounwind allocsize(0) }
attributes #31 = { cold nounwind }
attributes #32 = { nounwind allocsize(1) }

!llvm.asan.globals = !{!0, !2, !3, !4, !6, !7, !8, !10, !11, !12, !14, !15, !16, !18, !19, !20, !22, !23, !24, !26, !27, !28, !30, !31, !32, !34, !35, !36, !38, !39, !40, !42, !43, !44, !46, !47, !48, !50, !51, !52, !54, !55, !56, !58, !59, !60, !62, !63, !64, !65, !66, !67, !68, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !83, !84, !85, !86, !87, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !117, !119, !121, !123, !125, !127, !129, !131, !133, !134, !136, !137, !139, !140, !142, !143, !145, !146, !148, !149, !150, !151, !152, !153, !154, !156, !157, !158, !160, !161, !162, !164, !165, !166, !168, !169, !170, !172, !173, !174, !176, !177, !178, !180, !182, !184, !186, !188, !190, !192, !194, !196, !198, !200, !202, !204, !206, !208, !210, !212, !214, !216, !217, !218, !219, !220, !222, !224, !226, !228, !230, !232, !234, !236, !238, !240, !242, !244, !246, !248, !250, !252, !254, !256, !258, !260, !262, !263, !265, !267, !269, !271, !273, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328, !329, !330, !331, !332, !333, !335, !336, !337, !338, !339, !340, !342, !343, !344, !345, !347, !348, !349, !351, !352, !353, !354, !355, !357, !358, !359, !361, !362, !363, !364, !365, !366, !367, !368, !369, !370, !371, !372, !373, !374, !375}
!llvm.named.register.sp = !{!376}
!llvm.module.flags = !{!377, !378, !379, !380, !381, !382, !383, !384}
!llvm.ident = !{!385}

!0 = !{ptr @__tracepoint_regmap_reg_write, !1, !"__tracepoint_regmap_reg_write", i1 false, i1 false}
!1 = !{!"../drivers/base/regmap/./trace.h", i32 40, i32 1}
!2 = !{ptr @__tracepoint_ptr_regmap_reg_write, !1, !"__tracepoint_ptr_regmap_reg_write", i1 false, i1 false}
!3 = !{ptr @__SCK__tp_func_regmap_reg_write, !1, !"__SCK__tp_func_regmap_reg_write", i1 false, i1 false}
!4 = !{ptr @__tracepoint_regmap_reg_read, !5, !"__tracepoint_regmap_reg_read", i1 false, i1 false}
!5 = !{!"../drivers/base/regmap/./trace.h", i32 49, i32 1}
!6 = !{ptr @__tracepoint_ptr_regmap_reg_read, !5, !"__tracepoint_ptr_regmap_reg_read", i1 false, i1 false}
!7 = !{ptr @__SCK__tp_func_regmap_reg_read, !5, !"__SCK__tp_func_regmap_reg_read", i1 false, i1 false}
!8 = !{ptr @__tracepoint_regmap_reg_read_cache, !9, !"__tracepoint_regmap_reg_read_cache", i1 false, i1 false}
!9 = !{!"../drivers/base/regmap/./trace.h", i32 58, i32 1}
!10 = !{ptr @__tracepoint_ptr_regmap_reg_read_cache, !9, !"__tracepoint_ptr_regmap_reg_read_cache", i1 false, i1 false}
!11 = !{ptr @__SCK__tp_func_regmap_reg_read_cache, !9, !"__SCK__tp_func_regmap_reg_read_cache", i1 false, i1 false}
!12 = !{ptr @__tracepoint_regmap_hw_read_start, !13, !"__tracepoint_regmap_hw_read_start", i1 false, i1 false}
!13 = !{!"../drivers/base/regmap/./trace.h", i32 90, i32 1}
!14 = !{ptr @__tracepoint_ptr_regmap_hw_read_start, !13, !"__tracepoint_ptr_regmap_hw_read_start", i1 false, i1 false}
!15 = !{ptr @__SCK__tp_func_regmap_hw_read_start, !13, !"__SCK__tp_func_regmap_hw_read_start", i1 false, i1 false}
!16 = !{ptr @__tracepoint_regmap_hw_read_done, !17, !"__tracepoint_regmap_hw_read_done", i1 false, i1 false}
!17 = !{!"../drivers/base/regmap/./trace.h", i32 97, i32 1}
!18 = !{ptr @__tracepoint_ptr_regmap_hw_read_done, !17, !"__tracepoint_ptr_regmap_hw_read_done", i1 false, i1 false}
!19 = !{ptr @__SCK__tp_func_regmap_hw_read_done, !17, !"__SCK__tp_func_regmap_hw_read_done", i1 false, i1 false}
!20 = !{ptr @__tracepoint_regmap_hw_write_start, !21, !"__tracepoint_regmap_hw_write_start", i1 false, i1 false}
!21 = !{!"../drivers/base/regmap/./trace.h", i32 104, i32 1}
!22 = !{ptr @__tracepoint_ptr_regmap_hw_write_start, !21, !"__tracepoint_ptr_regmap_hw_write_start", i1 false, i1 false}
!23 = !{ptr @__SCK__tp_func_regmap_hw_write_start, !21, !"__SCK__tp_func_regmap_hw_write_start", i1 false, i1 false}
!24 = !{ptr @__tracepoint_regmap_hw_write_done, !25, !"__tracepoint_regmap_hw_write_done", i1 false, i1 false}
!25 = !{!"../drivers/base/regmap/./trace.h", i32 111, i32 1}
!26 = !{ptr @__tracepoint_ptr_regmap_hw_write_done, !25, !"__tracepoint_ptr_regmap_hw_write_done", i1 false, i1 false}
!27 = !{ptr @__SCK__tp_func_regmap_hw_write_done, !25, !"__SCK__tp_func_regmap_hw_write_done", i1 false, i1 false}
!28 = !{ptr @__tracepoint_regcache_sync, !29, !"__tracepoint_regcache_sync", i1 false, i1 false}
!29 = !{!"../drivers/base/regmap/./trace.h", i32 118, i32 1}
!30 = !{ptr @__tracepoint_ptr_regcache_sync, !29, !"__tracepoint_ptr_regcache_sync", i1 false, i1 false}
!31 = !{ptr @__SCK__tp_func_regcache_sync, !29, !"__SCK__tp_func_regcache_sync", i1 false, i1 false}
!32 = !{ptr @__tracepoint_regmap_cache_only, !33, !"__tracepoint_regmap_cache_only", i1 false, i1 false}
!33 = !{!"../drivers/base/regmap/./trace.h", i32 161, i32 1}
!34 = !{ptr @__tracepoint_ptr_regmap_cache_only, !33, !"__tracepoint_ptr_regmap_cache_only", i1 false, i1 false}
!35 = !{ptr @__SCK__tp_func_regmap_cache_only, !33, !"__SCK__tp_func_regmap_cache_only", i1 false, i1 false}
!36 = !{ptr @__tracepoint_regmap_cache_bypass, !37, !"__tracepoint_regmap_cache_bypass", i1 false, i1 false}
!37 = !{!"../drivers/base/regmap/./trace.h", i32 169, i32 1}
!38 = !{ptr @__tracepoint_ptr_regmap_cache_bypass, !37, !"__tracepoint_ptr_regmap_cache_bypass", i1 false, i1 false}
!39 = !{ptr @__SCK__tp_func_regmap_cache_bypass, !37, !"__SCK__tp_func_regmap_cache_bypass", i1 false, i1 false}
!40 = !{ptr @__tracepoint_regmap_async_write_start, !41, !"__tracepoint_regmap_async_write_start", i1 false, i1 false}
!41 = !{!"../drivers/base/regmap/./trace.h", i32 194, i32 1}
!42 = !{ptr @__tracepoint_ptr_regmap_async_write_start, !41, !"__tracepoint_ptr_regmap_async_write_start", i1 false, i1 false}
!43 = !{ptr @__SCK__tp_func_regmap_async_write_start, !41, !"__SCK__tp_func_regmap_async_write_start", i1 false, i1 false}
!44 = !{ptr @__tracepoint_regmap_async_io_complete, !45, !"__tracepoint_regmap_async_io_complete", i1 false, i1 false}
!45 = !{!"../drivers/base/regmap/./trace.h", i32 201, i32 1}
!46 = !{ptr @__tracepoint_ptr_regmap_async_io_complete, !45, !"__tracepoint_ptr_regmap_async_io_complete", i1 false, i1 false}
!47 = !{ptr @__SCK__tp_func_regmap_async_io_complete, !45, !"__SCK__tp_func_regmap_async_io_complete", i1 false, i1 false}
!48 = !{ptr @__tracepoint_regmap_async_complete_start, !49, !"__tracepoint_regmap_async_complete_start", i1 false, i1 false}
!49 = !{!"../drivers/base/regmap/./trace.h", i32 209, i32 1}
!50 = !{ptr @__tracepoint_ptr_regmap_async_complete_start, !49, !"__tracepoint_ptr_regmap_async_complete_start", i1 false, i1 false}
!51 = !{ptr @__SCK__tp_func_regmap_async_complete_start, !49, !"__SCK__tp_func_regmap_async_complete_start", i1 false, i1 false}
!52 = !{ptr @__tracepoint_regmap_async_complete_done, !53, !"__tracepoint_regmap_async_complete_done", i1 false, i1 false}
!53 = !{!"../drivers/base/regmap/./trace.h", i32 217, i32 1}
!54 = !{ptr @__tracepoint_ptr_regmap_async_complete_done, !53, !"__tracepoint_ptr_regmap_async_complete_done", i1 false, i1 false}
!55 = !{ptr @__SCK__tp_func_regmap_async_complete_done, !53, !"__SCK__tp_func_regmap_async_complete_done", i1 false, i1 false}
!56 = !{ptr @__tracepoint_regcache_drop_region, !57, !"__tracepoint_regcache_drop_region", i1 false, i1 false}
!57 = !{!"../drivers/base/regmap/./trace.h", i32 225, i32 1}
!58 = !{ptr @__tracepoint_ptr_regcache_drop_region, !57, !"__tracepoint_ptr_regcache_drop_region", i1 false, i1 false}
!59 = !{ptr @__SCK__tp_func_regcache_drop_region, !57, !"__SCK__tp_func_regcache_drop_region", i1 false, i1 false}
!60 = !{ptr @event_class_regmap_reg, !61, !"event_class_regmap_reg", i1 false, i1 false}
!61 = !{!"../drivers/base/regmap/./trace.h", i32 16, i32 1}
!62 = !{ptr @event_regmap_reg_write, !1, !"event_regmap_reg_write", i1 false, i1 false}
!63 = !{ptr @__event_regmap_reg_write, !1, !"__event_regmap_reg_write", i1 false, i1 false}
!64 = !{ptr @event_regmap_reg_read, !5, !"event_regmap_reg_read", i1 false, i1 false}
!65 = !{ptr @__event_regmap_reg_read, !5, !"__event_regmap_reg_read", i1 false, i1 false}
!66 = !{ptr @event_regmap_reg_read_cache, !9, !"event_regmap_reg_read_cache", i1 false, i1 false}
!67 = !{ptr @__event_regmap_reg_read_cache, !9, !"__event_regmap_reg_read_cache", i1 false, i1 false}
!68 = !{ptr @event_class_regmap_block, !69, !"event_class_regmap_block", i1 false, i1 false}
!69 = !{!"../drivers/base/regmap/./trace.h", i32 67, i32 1}
!70 = !{ptr @event_regmap_hw_read_start, !13, !"event_regmap_hw_read_start", i1 false, i1 false}
!71 = !{ptr @__event_regmap_hw_read_start, !13, !"__event_regmap_hw_read_start", i1 false, i1 false}
!72 = !{ptr @event_regmap_hw_read_done, !17, !"event_regmap_hw_read_done", i1 false, i1 false}
!73 = !{ptr @__event_regmap_hw_read_done, !17, !"__event_regmap_hw_read_done", i1 false, i1 false}
!74 = !{ptr @event_regmap_hw_write_start, !21, !"event_regmap_hw_write_start", i1 false, i1 false}
!75 = !{ptr @__event_regmap_hw_write_start, !21, !"__event_regmap_hw_write_start", i1 false, i1 false}
!76 = !{ptr @event_regmap_hw_write_done, !25, !"event_regmap_hw_write_done", i1 false, i1 false}
!77 = !{ptr @__event_regmap_hw_write_done, !25, !"__event_regmap_hw_write_done", i1 false, i1 false}
!78 = !{ptr @event_class_regcache_sync, !29, !"event_class_regcache_sync", i1 false, i1 false}
!79 = !{ptr @event_regcache_sync, !29, !"event_regcache_sync", i1 false, i1 false}
!80 = !{ptr @__event_regcache_sync, !29, !"__event_regcache_sync", i1 false, i1 false}
!81 = !{ptr @event_class_regmap_bool, !82, !"event_class_regmap_bool", i1 false, i1 false}
!82 = !{!"../drivers/base/regmap/./trace.h", i32 141, i32 1}
!83 = !{ptr @event_regmap_cache_only, !33, !"event_regmap_cache_only", i1 false, i1 false}
!84 = !{ptr @__event_regmap_cache_only, !33, !"__event_regmap_cache_only", i1 false, i1 false}
!85 = !{ptr @event_regmap_cache_bypass, !37, !"event_regmap_cache_bypass", i1 false, i1 false}
!86 = !{ptr @__event_regmap_cache_bypass, !37, !"__event_regmap_cache_bypass", i1 false, i1 false}
!87 = !{ptr @event_class_regmap_async, !88, !"event_class_regmap_async", i1 false, i1 false}
!88 = !{!"../drivers/base/regmap/./trace.h", i32 177, i32 1}
!89 = !{ptr @event_regmap_async_write_start, !41, !"event_regmap_async_write_start", i1 false, i1 false}
!90 = !{ptr @__event_regmap_async_write_start, !41, !"__event_regmap_async_write_start", i1 false, i1 false}
!91 = !{ptr @event_regmap_async_io_complete, !45, !"event_regmap_async_io_complete", i1 false, i1 false}
!92 = !{ptr @__event_regmap_async_io_complete, !45, !"__event_regmap_async_io_complete", i1 false, i1 false}
!93 = !{ptr @event_regmap_async_complete_start, !49, !"event_regmap_async_complete_start", i1 false, i1 false}
!94 = !{ptr @__event_regmap_async_complete_start, !49, !"__event_regmap_async_complete_start", i1 false, i1 false}
!95 = !{ptr @event_regmap_async_complete_done, !53, !"event_regmap_async_complete_done", i1 false, i1 false}
!96 = !{ptr @__event_regmap_async_complete_done, !53, !"__event_regmap_async_complete_done", i1 false, i1 false}
!97 = !{ptr @event_class_regcache_drop_region, !57, !"event_class_regcache_drop_region", i1 false, i1 false}
!98 = !{ptr @event_regcache_drop_region, !57, !"event_regcache_drop_region", i1 false, i1 false}
!99 = !{ptr @__event_regcache_drop_region, !57, !"__event_regcache_drop_region", i1 false, i1 false}
!100 = !{ptr @__bpf_trace_tp_map_regmap_reg_write, !1, !"__bpf_trace_tp_map_regmap_reg_write", i1 false, i1 false}
!101 = !{ptr @__bpf_trace_tp_map_regmap_reg_read, !5, !"__bpf_trace_tp_map_regmap_reg_read", i1 false, i1 false}
!102 = !{ptr @__bpf_trace_tp_map_regmap_reg_read_cache, !9, !"__bpf_trace_tp_map_regmap_reg_read_cache", i1 false, i1 false}
!103 = !{ptr @__bpf_trace_tp_map_regmap_hw_read_start, !13, !"__bpf_trace_tp_map_regmap_hw_read_start", i1 false, i1 false}
!104 = !{ptr @__bpf_trace_tp_map_regmap_hw_read_done, !17, !"__bpf_trace_tp_map_regmap_hw_read_done", i1 false, i1 false}
!105 = !{ptr @__bpf_trace_tp_map_regmap_hw_write_start, !21, !"__bpf_trace_tp_map_regmap_hw_write_start", i1 false, i1 false}
!106 = !{ptr @__bpf_trace_tp_map_regmap_hw_write_done, !25, !"__bpf_trace_tp_map_regmap_hw_write_done", i1 false, i1 false}
!107 = !{ptr @__bpf_trace_tp_map_regcache_sync, !29, !"__bpf_trace_tp_map_regcache_sync", i1 false, i1 false}
!108 = !{ptr @__bpf_trace_tp_map_regmap_cache_only, !33, !"__bpf_trace_tp_map_regmap_cache_only", i1 false, i1 false}
!109 = !{ptr @__bpf_trace_tp_map_regmap_cache_bypass, !37, !"__bpf_trace_tp_map_regmap_cache_bypass", i1 false, i1 false}
!110 = !{ptr @__bpf_trace_tp_map_regmap_async_write_start, !41, !"__bpf_trace_tp_map_regmap_async_write_start", i1 false, i1 false}
!111 = !{ptr @__bpf_trace_tp_map_regmap_async_io_complete, !45, !"__bpf_trace_tp_map_regmap_async_io_complete", i1 false, i1 false}
!112 = !{ptr @__bpf_trace_tp_map_regmap_async_complete_start, !49, !"__bpf_trace_tp_map_regmap_async_complete_start", i1 false, i1 false}
!113 = !{ptr @__bpf_trace_tp_map_regmap_async_complete_done, !53, !"__bpf_trace_tp_map_regmap_async_complete_done", i1 false, i1 false}
!114 = !{ptr @__bpf_trace_tp_map_regcache_drop_region, !57, !"__bpf_trace_tp_map_regcache_drop_region", i1 false, i1 false}
!115 = !{ptr @__ksymtab_regmap_reg_in_ranges, !116, !"__ksymtab_regmap_reg_in_ranges", i1 false, i1 false}
!116 = !{!"../drivers/base/regmap/regmap.c", i32 72, i32 1}
!117 = !{ptr @__ksymtab_regmap_check_range_table, !118, !"__ksymtab_regmap_check_range_table", i1 false, i1 false}
!118 = !{!"../drivers/base/regmap/regmap.c", i32 88, i32 1}
!119 = !{ptr @.str, !120, !"<string literal>", i1 false, i1 false}
!120 = !{!"../drivers/base/regmap/regmap.c", i32 654, i32 6}
!121 = !{ptr @__ksymtab_regmap_attach_dev, !122, !"__ksymtab_regmap_attach_dev", i1 false, i1 false}
!122 = !{!"../drivers/base/regmap/regmap.c", i32 664, i32 1}
!123 = !{ptr @.str.1, !124, !"<string literal>", i1 false, i1 false}
!124 = !{!"../drivers/base/regmap/regmap.c", i32 705, i32 40}
!125 = !{ptr @.str.2, !126, !"<string literal>", i1 false, i1 false}
!126 = !{!"../drivers/base/regmap/regmap.c", i32 707, i32 45}
!127 = !{ptr @.str.3, !128, !"<string literal>", i1 false, i1 false}
!128 = !{!"../drivers/base/regmap/regmap.c", i32 709, i32 45}
!129 = !{ptr @__ksymtab_regmap_get_val_endian, !130, !"__ksymtab_regmap_get_val_endian", i1 false, i1 false}
!130 = !{!"../drivers/base/regmap/regmap.c", i32 727, i32 1}
!131 = !{ptr @__regmap_init.__key, !132, !"__key", i1 false, i1 false}
!132 = !{!"../drivers/base/regmap/regmap.c", i32 792, i32 5}
!133 = !{ptr @.str.4, !132, !"<string literal>", i1 false, i1 false}
!134 = !{ptr @__regmap_init.__key.5, !135, !"__key", i1 false, i1 false}
!135 = !{!"../drivers/base/regmap/regmap.c", i32 798, i32 5}
!136 = !{ptr @.str.6, !135, !"<string literal>", i1 false, i1 false}
!137 = !{ptr @__regmap_init.__key.7, !138, !"__key", i1 false, i1 false}
!138 = !{!"../drivers/base/regmap/regmap.c", i32 805, i32 4}
!139 = !{ptr @.str.8, !138, !"<string literal>", i1 false, i1 false}
!140 = !{ptr @__regmap_init.__key.9, !141, !"__key", i1 false, i1 false}
!141 = !{!"../drivers/base/regmap/regmap.c", i32 863, i32 2}
!142 = !{ptr @.str.10, !141, !"<string literal>", i1 false, i1 false}
!143 = !{ptr @__regmap_init.__key.11, !144, !"__key", i1 false, i1 false}
!144 = !{!"../drivers/base/regmap/regmap.c", i32 866, i32 2}
!145 = !{ptr @.str.12, !144, !"<string literal>", i1 false, i1 false}
!146 = !{ptr @.str.13, !147, !"<string literal>", i1 false, i1 false}
!147 = !{!"../drivers/base/regmap/regmap.c", i32 1130, i32 4}
!148 = !{ptr @.str.14, !147, !"<string literal>", i1 false, i1 false}
!149 = !{ptr @.str.15, !147, !"<string literal>", i1 false, i1 false}
!150 = !{ptr @.str.16, !147, !"<string literal>", i1 false, i1 false}
!151 = !{ptr @.str.17, !147, !"<string literal>", i1 false, i1 false}
!152 = !{ptr @__regmap_init._entry, !147, !"_entry", i1 false, i1 false}
!153 = !{ptr @__regmap_init._entry_ptr, !147, !"_entry_ptr", i1 false, i1 false}
!154 = !{ptr @.str.19, !155, !"<string literal>", i1 false, i1 false}
!155 = !{!"../drivers/base/regmap/regmap.c", i32 1136, i32 4}
!156 = !{ptr @__regmap_init._entry.18, !155, !"_entry", i1 false, i1 false}
!157 = !{ptr @__regmap_init._entry_ptr.20, !155, !"_entry_ptr", i1 false, i1 false}
!158 = !{ptr @.str.22, !159, !"<string literal>", i1 false, i1 false}
!159 = !{!"../drivers/base/regmap/regmap.c", i32 1142, i32 4}
!160 = !{ptr @__regmap_init._entry.21, !159, !"_entry", i1 false, i1 false}
!161 = !{ptr @__regmap_init._entry_ptr.23, !159, !"_entry_ptr", i1 false, i1 false}
!162 = !{ptr @.str.25, !163, !"<string literal>", i1 false, i1 false}
!163 = !{!"../drivers/base/regmap/regmap.c", i32 1148, i32 4}
!164 = !{ptr @__regmap_init._entry.24, !163, !"_entry", i1 false, i1 false}
!165 = !{ptr @__regmap_init._entry_ptr.26, !163, !"_entry_ptr", i1 false, i1 false}
!166 = !{ptr @.str.28, !167, !"<string literal>", i1 false, i1 false}
!167 = !{!"../drivers/base/regmap/regmap.c", i32 1167, i32 5}
!168 = !{ptr @__regmap_init._entry.27, !167, !"_entry", i1 false, i1 false}
!169 = !{ptr @__regmap_init._entry_ptr.29, !167, !"_entry_ptr", i1 false, i1 false}
!170 = !{ptr @.str.31, !171, !"<string literal>", i1 false, i1 false}
!171 = !{!"../drivers/base/regmap/regmap.c", i32 1175, i32 5}
!172 = !{ptr @__regmap_init._entry.30, !171, !"_entry", i1 false, i1 false}
!173 = !{ptr @__regmap_init._entry_ptr.32, !171, !"_entry_ptr", i1 false, i1 false}
!174 = !{ptr @.str.34, !175, !"<string literal>", i1 false, i1 false}
!175 = !{!"../drivers/base/regmap/regmap.c", i32 1199, i32 4}
!176 = !{ptr @__regmap_init._entry.33, !175, !"_entry", i1 false, i1 false}
!177 = !{ptr @__regmap_init._entry_ptr.35, !175, !"_entry_ptr", i1 false, i1 false}
!178 = !{ptr @__ksymtab___regmap_init, !179, !"__ksymtab___regmap_init", i1 false, i1 false}
!179 = !{!"../drivers/base/regmap/regmap.c", i32 1243, i32 1}
!180 = !{ptr @.str.36, !181, !"<string literal>", i1 false, i1 false}
!181 = !{!"../drivers/base/regmap/regmap.c", i32 1259, i32 8}
!182 = !{ptr @__ksymtab___devm_regmap_init, !183, !"__ksymtab___devm_regmap_init", i1 false, i1 false}
!183 = !{!"../drivers/base/regmap/regmap.c", i32 1274, i32 1}
!184 = !{ptr @__ksymtab_devm_regmap_field_alloc, !185, !"__ksymtab_devm_regmap_field_alloc", i1 false, i1 false}
!185 = !{!"../drivers/base/regmap/regmap.c", i32 1311, i32 1}
!186 = !{ptr @__ksymtab_regmap_field_bulk_alloc, !187, !"__ksymtab_regmap_field_bulk_alloc", i1 false, i1 false}
!187 = !{!"../drivers/base/regmap/regmap.c", i32 1345, i32 1}
!188 = !{ptr @__ksymtab_devm_regmap_field_bulk_alloc, !189, !"__ksymtab_devm_regmap_field_bulk_alloc", i1 false, i1 false}
!189 = !{!"../drivers/base/regmap/regmap.c", i32 1381, i32 1}
!190 = !{ptr @__ksymtab_regmap_field_bulk_free, !191, !"__ksymtab_regmap_field_bulk_free", i1 false, i1 false}
!191 = !{!"../drivers/base/regmap/regmap.c", i32 1393, i32 1}
!192 = !{ptr @__ksymtab_devm_regmap_field_bulk_free, !193, !"__ksymtab_devm_regmap_field_bulk_free", i1 false, i1 false}
!193 = !{!"../drivers/base/regmap/regmap.c", i32 1411, i32 1}
!194 = !{ptr @__ksymtab_devm_regmap_field_free, !195, !"__ksymtab_devm_regmap_field_free", i1 false, i1 false}
!195 = !{!"../drivers/base/regmap/regmap.c", i32 1429, i32 1}
!196 = !{ptr @__ksymtab_regmap_field_alloc, !197, !"__ksymtab_regmap_field_alloc", i1 false, i1 false}
!197 = !{!"../drivers/base/regmap/regmap.c", i32 1453, i32 1}
!198 = !{ptr @__ksymtab_regmap_field_free, !199, !"__ksymtab_regmap_field_free", i1 false, i1 false}
!199 = !{!"../drivers/base/regmap/regmap.c", i32 1465, i32 1}
!200 = !{ptr @__ksymtab_regmap_reinit_cache, !201, !"__ksymtab_regmap_reinit_cache", i1 false, i1 false}
!201 = !{!"../drivers/base/regmap/regmap.c", i32 1508, i32 1}
!202 = !{ptr @__ksymtab_regmap_exit, !203, !"__ksymtab_regmap_exit", i1 false, i1 false}
!203 = !{!"../drivers/base/regmap/regmap.c", i32 1543, i32 1}
!204 = !{ptr @__ksymtab_dev_get_regmap, !205, !"__ksymtab_dev_get_regmap", i1 false, i1 false}
!205 = !{!"../drivers/base/regmap/regmap.c", i32 1581, i32 1}
!206 = !{ptr @__ksymtab_regmap_get_device, !207, !"__ksymtab_regmap_get_device", i1 false, i1 false}
!207 = !{!"../drivers/base/regmap/regmap.c", i32 1594, i32 1}
!208 = !{ptr @__ksymtab_regmap_can_raw_write, !209, !"__ksymtab_regmap_can_raw_write", i1 false, i1 false}
!209 = !{!"../drivers/base/regmap/regmap.c", i32 1868, i32 1}
!210 = !{ptr @__ksymtab_regmap_get_raw_read_max, !211, !"__ksymtab_regmap_get_raw_read_max", i1 false, i1 false}
!211 = !{!"../drivers/base/regmap/regmap.c", i32 1879, i32 1}
!212 = !{ptr @__ksymtab_regmap_get_raw_write_max, !213, !"__ksymtab_regmap_get_raw_write_max", i1 false, i1 false}
!213 = !{!"../drivers/base/regmap/regmap.c", i32 1890, i32 1}
!214 = !{ptr @.str.37, !215, !"<string literal>", i1 false, i1 false}
!215 = !{!"../drivers/base/regmap/regmap.c", i32 1972, i32 4}
!216 = !{ptr @.str.38, !215, !"<string literal>", i1 false, i1 false}
!217 = !{ptr @.str.39, !215, !"<string literal>", i1 false, i1 false}
!218 = !{ptr @_regmap_write._entry, !215, !"_entry", i1 false, i1 false}
!219 = !{ptr @_regmap_write._entry_ptr, !215, !"_entry_ptr", i1 false, i1 false}
!220 = !{ptr @__ksymtab_regmap_write, !221, !"__ksymtab_regmap_write", i1 false, i1 false}
!221 = !{!"../drivers/base/regmap/regmap.c", i32 2005, i32 1}
!222 = !{ptr @__ksymtab_regmap_write_async, !223, !"__ksymtab_regmap_write_async", i1 false, i1 false}
!223 = !{!"../drivers/base/regmap/regmap.c", i32 2036, i32 1}
!224 = !{ptr @__ksymtab_regmap_raw_write, !225, !"__ksymtab_regmap_raw_write", i1 false, i1 false}
!225 = !{!"../drivers/base/regmap/regmap.c", i32 2110, i32 1}
!226 = !{ptr @__ksymtab_regmap_noinc_write, !227, !"__ksymtab_regmap_noinc_write", i1 false, i1 false}
!227 = !{!"../drivers/base/regmap/regmap.c", i32 2173, i32 1}
!228 = !{ptr @__ksymtab_regmap_field_update_bits_base, !229, !"__ksymtab_regmap_field_update_bits_base", i1 false, i1 false}
!229 = !{!"../drivers/base/regmap/regmap.c", i32 2202, i32 1}
!230 = !{ptr @__ksymtab_regmap_fields_update_bits_base, !231, !"__ksymtab_regmap_fields_update_bits_base", i1 false, i1 false}
!231 = !{!"../drivers/base/regmap/regmap.c", i32 2233, i32 1}
!232 = !{ptr @__ksymtab_regmap_bulk_write, !233, !"__ksymtab_regmap_bulk_write", i1 false, i1 false}
!233 = !{!"../drivers/base/regmap/regmap.c", i32 2311, i32 1}
!234 = !{ptr @__ksymtab_regmap_multi_reg_write, !235, !"__ksymtab_regmap_multi_reg_write", i1 false, i1 false}
!235 = !{!"../drivers/base/regmap/regmap.c", i32 2569, i32 1}
!236 = !{ptr @__ksymtab_regmap_multi_reg_write_bypassed, !237, !"__ksymtab_regmap_multi_reg_write_bypassed", i1 false, i1 false}
!237 = !{!"../drivers/base/regmap/regmap.c", i32 2609, i32 1}
!238 = !{ptr @__ksymtab_regmap_raw_write_async, !239, !"__ksymtab_regmap_raw_write_async", i1 false, i1 false}
!239 = !{!"../drivers/base/regmap/regmap.c", i32 2655, i32 1}
!240 = !{ptr @__ksymtab_regmap_read, !241, !"__ksymtab_regmap_read", i1 false, i1 false}
!241 = !{!"../drivers/base/regmap/regmap.c", i32 2773, i32 1}
!242 = !{ptr @__ksymtab_regmap_raw_read, !243, !"__ksymtab_regmap_raw_read", i1 false, i1 false}
!243 = !{!"../drivers/base/regmap/regmap.c", i32 2859, i32 1}
!244 = !{ptr @__ksymtab_regmap_noinc_read, !245, !"__ksymtab_regmap_noinc_read", i1 false, i1 false}
!245 = !{!"../drivers/base/regmap/regmap.c", i32 2922, i32 1}
!246 = !{ptr @__ksymtab_regmap_field_read, !247, !"__ksymtab_regmap_field_read", i1 false, i1 false}
!247 = !{!"../drivers/base/regmap/regmap.c", i32 2947, i32 1}
!248 = !{ptr @__ksymtab_regmap_fields_read, !249, !"__ksymtab_regmap_fields_read", i1 false, i1 false}
!249 = !{!"../drivers/base/regmap/regmap.c", i32 2980, i32 1}
!250 = !{ptr @__ksymtab_regmap_bulk_read, !251, !"__ksymtab_regmap_bulk_read", i1 false, i1 false}
!251 = !{!"../drivers/base/regmap/regmap.c", i32 3057, i32 1}
!252 = !{ptr @__ksymtab_regmap_update_bits_base, !253, !"__ksymtab_regmap_update_bits_base", i1 false, i1 false}
!253 = !{!"../drivers/base/regmap/regmap.c", i32 3131, i32 1}
!254 = !{ptr @__ksymtab_regmap_test_bits, !255, !"__ksymtab_regmap_test_bits", i1 false, i1 false}
!255 = !{!"../drivers/base/regmap/regmap.c", i32 3154, i32 1}
!256 = !{ptr @__ksymtab_regmap_async_complete_cb, !257, !"__ksymtab_regmap_async_complete_cb", i1 false, i1 false}
!257 = !{!"../drivers/base/regmap/regmap.c", i32 3175, i32 1}
!258 = !{ptr @__ksymtab_regmap_async_complete, !259, !"__ksymtab_regmap_async_complete", i1 false, i1 false}
!259 = !{!"../drivers/base/regmap/regmap.c", i32 3219, i32 1}
!260 = distinct !{null, !261, !"__already_done", i1 false, i1 false}
!261 = !{!"../drivers/base/regmap/regmap.c", i32 3245, i32 6}
!262 = !{ptr @.str.40, !261, !"<string literal>", i1 false, i1 false}
!263 = !{ptr @__ksymtab_regmap_register_patch, !264, !"__ksymtab_regmap_register_patch", i1 false, i1 false}
!264 = !{!"../drivers/base/regmap/regmap.c", i32 3278, i32 1}
!265 = !{ptr @__ksymtab_regmap_get_val_bytes, !266, !"__ksymtab_regmap_get_val_bytes", i1 false, i1 false}
!266 = !{!"../drivers/base/regmap/regmap.c", i32 3295, i32 1}
!267 = !{ptr @__ksymtab_regmap_get_max_register, !268, !"__ksymtab_regmap_get_max_register", i1 false, i1 false}
!268 = !{!"../drivers/base/regmap/regmap.c", i32 3309, i32 1}
!269 = !{ptr @__ksymtab_regmap_get_reg_stride, !270, !"__ksymtab_regmap_get_reg_stride", i1 false, i1 false}
!270 = !{!"../drivers/base/regmap/regmap.c", i32 3323, i32 1}
!271 = !{ptr @__ksymtab_regmap_parse_val, !272, !"__ksymtab_regmap_parse_val", i1 false, i1 false}
!272 = !{!"../drivers/base/regmap/regmap.c", i32 3335, i32 1}
!273 = !{ptr @__initcall__kmod_regmap__331_3343_regmap_initcall2, !274, !"__initcall__kmod_regmap__331_3343_regmap_initcall2", i1 false, i1 false}
!274 = !{!"../drivers/base/regmap/regmap.c", i32 3343, i32 1}
!275 = !{ptr @__tpstrtab_regmap_reg_write, !1, !"__tpstrtab_regmap_reg_write", i1 false, i1 false}
!276 = !{ptr @__tpstrtab_regmap_reg_read, !5, !"__tpstrtab_regmap_reg_read", i1 false, i1 false}
!277 = !{ptr @__tpstrtab_regmap_reg_read_cache, !9, !"__tpstrtab_regmap_reg_read_cache", i1 false, i1 false}
!278 = !{ptr @__tpstrtab_regmap_hw_read_start, !13, !"__tpstrtab_regmap_hw_read_start", i1 false, i1 false}
!279 = !{ptr @__tpstrtab_regmap_hw_read_done, !17, !"__tpstrtab_regmap_hw_read_done", i1 false, i1 false}
!280 = !{ptr @__tpstrtab_regmap_hw_write_start, !21, !"__tpstrtab_regmap_hw_write_start", i1 false, i1 false}
!281 = !{ptr @__tpstrtab_regmap_hw_write_done, !25, !"__tpstrtab_regmap_hw_write_done", i1 false, i1 false}
!282 = !{ptr @__tpstrtab_regcache_sync, !29, !"__tpstrtab_regcache_sync", i1 false, i1 false}
!283 = !{ptr @__tpstrtab_regmap_cache_only, !33, !"__tpstrtab_regmap_cache_only", i1 false, i1 false}
!284 = !{ptr @__tpstrtab_regmap_cache_bypass, !37, !"__tpstrtab_regmap_cache_bypass", i1 false, i1 false}
!285 = !{ptr @__tpstrtab_regmap_async_write_start, !41, !"__tpstrtab_regmap_async_write_start", i1 false, i1 false}
!286 = !{ptr @__tpstrtab_regmap_async_io_complete, !45, !"__tpstrtab_regmap_async_io_complete", i1 false, i1 false}
!287 = !{ptr @__tpstrtab_regmap_async_complete_start, !49, !"__tpstrtab_regmap_async_complete_start", i1 false, i1 false}
!288 = !{ptr @__tpstrtab_regmap_async_complete_done, !53, !"__tpstrtab_regmap_async_complete_done", i1 false, i1 false}
!289 = !{ptr @__tpstrtab_regcache_drop_region, !57, !"__tpstrtab_regcache_drop_region", i1 false, i1 false}
!290 = !{ptr @str__regmap__trace_system_name, !291, !"str__regmap__trace_system_name", i1 false, i1 false}
!291 = !{!"../include/trace/trace_events.h", i32 36, i32 1}
!292 = !{ptr @.str.41, !61, !"<string literal>", i1 false, i1 false}
!293 = !{ptr @.str.42, !61, !"<string literal>", i1 false, i1 false}
!294 = !{ptr @.str.43, !61, !"<string literal>", i1 false, i1 false}
!295 = !{ptr @.str.44, !61, !"<string literal>", i1 false, i1 false}
!296 = !{ptr @.str.45, !61, !"<string literal>", i1 false, i1 false}
!297 = !{ptr @.str.46, !61, !"<string literal>", i1 false, i1 false}
!298 = !{ptr @trace_event_fields_regmap_reg, !61, !"trace_event_fields_regmap_reg", i1 false, i1 false}
!299 = !{ptr @trace_event_type_funcs_regmap_reg, !61, !"trace_event_type_funcs_regmap_reg", i1 false, i1 false}
!300 = !{ptr @.str.47, !61, !"<string literal>", i1 false, i1 false}
!301 = !{ptr @print_fmt_regmap_reg, !61, !"print_fmt_regmap_reg", i1 false, i1 false}
!302 = !{ptr @.str.48, !69, !"<string literal>", i1 false, i1 false}
!303 = !{ptr @.str.49, !69, !"<string literal>", i1 false, i1 false}
!304 = !{ptr @trace_event_fields_regmap_block, !69, !"trace_event_fields_regmap_block", i1 false, i1 false}
!305 = !{ptr @trace_event_type_funcs_regmap_block, !69, !"trace_event_type_funcs_regmap_block", i1 false, i1 false}
!306 = !{ptr @.str.50, !69, !"<string literal>", i1 false, i1 false}
!307 = !{ptr @print_fmt_regmap_block, !69, !"print_fmt_regmap_block", i1 false, i1 false}
!308 = !{ptr @.str.51, !29, !"<string literal>", i1 false, i1 false}
!309 = !{ptr @.str.52, !29, !"<string literal>", i1 false, i1 false}
!310 = !{ptr @trace_event_fields_regcache_sync, !29, !"trace_event_fields_regcache_sync", i1 false, i1 false}
!311 = !{ptr @trace_event_type_funcs_regcache_sync, !29, !"trace_event_type_funcs_regcache_sync", i1 false, i1 false}
!312 = !{ptr @.str.53, !29, !"<string literal>", i1 false, i1 false}
!313 = !{ptr @print_fmt_regcache_sync, !29, !"print_fmt_regcache_sync", i1 false, i1 false}
!314 = !{ptr @.str.54, !82, !"<string literal>", i1 false, i1 false}
!315 = !{ptr @trace_event_fields_regmap_bool, !82, !"trace_event_fields_regmap_bool", i1 false, i1 false}
!316 = !{ptr @trace_event_type_funcs_regmap_bool, !82, !"trace_event_type_funcs_regmap_bool", i1 false, i1 false}
!317 = !{ptr @.str.55, !82, !"<string literal>", i1 false, i1 false}
!318 = !{ptr @print_fmt_regmap_bool, !82, !"print_fmt_regmap_bool", i1 false, i1 false}
!319 = !{ptr @trace_event_fields_regmap_async, !88, !"trace_event_fields_regmap_async", i1 false, i1 false}
!320 = !{ptr @trace_event_type_funcs_regmap_async, !88, !"trace_event_type_funcs_regmap_async", i1 false, i1 false}
!321 = !{ptr @.str.56, !88, !"<string literal>", i1 false, i1 false}
!322 = !{ptr @print_fmt_regmap_async, !88, !"print_fmt_regmap_async", i1 false, i1 false}
!323 = !{ptr @.str.57, !57, !"<string literal>", i1 false, i1 false}
!324 = !{ptr @.str.58, !57, !"<string literal>", i1 false, i1 false}
!325 = !{ptr @trace_event_fields_regcache_drop_region, !57, !"trace_event_fields_regcache_drop_region", i1 false, i1 false}
!326 = !{ptr @trace_event_type_funcs_regcache_drop_region, !57, !"trace_event_type_funcs_regcache_drop_region", i1 false, i1 false}
!327 = !{ptr @.str.59, !57, !"<string literal>", i1 false, i1 false}
!328 = !{ptr @print_fmt_regcache_drop_region, !57, !"print_fmt_regcache_drop_region", i1 false, i1 false}
!329 = distinct !{null, !21, !"__already_done", i1 false, i1 false}
!330 = !{ptr @.str.60, !21, !"<string literal>", i1 false, i1 false}
!331 = distinct !{null, !21, !"__warned", i1 false, i1 false}
!332 = !{ptr @.str.61, !21, !"<string literal>", i1 false, i1 false}
!333 = distinct !{null, !334, !"__already_done", i1 false, i1 false}
!334 = !{!"../include/linux/cpumask.h", i32 108, i32 2}
!335 = !{ptr @.str.62, !334, !"<string literal>", i1 false, i1 false}
!336 = distinct !{null, !25, !"__already_done", i1 false, i1 false}
!337 = distinct !{null, !25, !"__warned", i1 false, i1 false}
!338 = distinct !{null, !1, !"__already_done", i1 false, i1 false}
!339 = distinct !{null, !1, !"__warned", i1 false, i1 false}
!340 = !{ptr @.str.63, !341, !"<string literal>", i1 false, i1 false}
!341 = !{!"../drivers/base/regmap/regmap.c", i32 1695, i32 5}
!342 = !{ptr @.str.64, !341, !"<string literal>", i1 false, i1 false}
!343 = !{ptr @_regmap_raw_write_impl._entry, !341, !"_entry", i1 false, i1 false}
!344 = !{ptr @_regmap_raw_write_impl._entry_ptr, !341, !"_entry_ptr", i1 false, i1 false}
!345 = !{ptr @.str.65, !346, !"<string literal>", i1 false, i1 false}
!346 = !{!"../drivers/base/regmap/regmap.c", i32 1715, i32 4}
!347 = !{ptr @.str.66, !346, !"<string literal>", i1 false, i1 false}
!348 = !{ptr @_regmap_raw_write_impl.__UNIQUE_ID_ddebug329, !346, !"__UNIQUE_ID_ddebug329", i1 false, i1 false}
!349 = !{ptr @.str.68, !350, !"<string literal>", i1 false, i1 false}
!350 = !{!"../drivers/base/regmap/regmap.c", i32 1802, i32 4}
!351 = !{ptr @_regmap_raw_write_impl._entry.67, !350, !"_entry", i1 false, i1 false}
!352 = !{ptr @_regmap_raw_write_impl._entry_ptr.69, !350, !"_entry_ptr", i1 false, i1 false}
!353 = distinct !{null, !41, !"__already_done", i1 false, i1 false}
!354 = distinct !{null, !41, !"__warned", i1 false, i1 false}
!355 = !{ptr @.str.70, !356, !"<string literal>", i1 false, i1 false}
!356 = !{!"../drivers/base/regmap/regmap.c", i32 2499, i32 5}
!357 = !{ptr @_regmap_multi_reg_write._entry, !356, !"_entry", i1 false, i1 false}
!358 = !{ptr @_regmap_multi_reg_write._entry_ptr, !356, !"_entry_ptr", i1 false, i1 false}
!359 = !{ptr @.str.71, !360, !"<string literal>", i1 false, i1 false}
!360 = !{!"../drivers/base/regmap/regmap.c", i32 2737, i32 4}
!361 = !{ptr @.str.72, !360, !"<string literal>", i1 false, i1 false}
!362 = !{ptr @_regmap_read._entry, !360, !"_entry", i1 false, i1 false}
!363 = !{ptr @_regmap_read._entry_ptr, !360, !"_entry_ptr", i1 false, i1 false}
!364 = distinct !{null, !5, !"__already_done", i1 false, i1 false}
!365 = distinct !{null, !5, !"__warned", i1 false, i1 false}
!366 = distinct !{null, !13, !"__already_done", i1 false, i1 false}
!367 = distinct !{null, !13, !"__warned", i1 false, i1 false}
!368 = distinct !{null, !17, !"__already_done", i1 false, i1 false}
!369 = distinct !{null, !17, !"__warned", i1 false, i1 false}
!370 = distinct !{null, !45, !"__already_done", i1 false, i1 false}
!371 = distinct !{null, !45, !"__warned", i1 false, i1 false}
!372 = distinct !{null, !49, !"__already_done", i1 false, i1 false}
!373 = distinct !{null, !49, !"__warned", i1 false, i1 false}
!374 = distinct !{null, !53, !"__already_done", i1 false, i1 false}
!375 = distinct !{null, !53, !"__warned", i1 false, i1 false}
!376 = !{!"sp"}
!377 = !{i32 1, !"wchar_size", i32 2}
!378 = !{i32 1, !"min_enum_size", i32 4}
!379 = !{i32 8, !"branch-target-enforcement", i32 0}
!380 = !{i32 8, !"sign-return-address", i32 0}
!381 = !{i32 8, !"sign-return-address-all", i32 0}
!382 = !{i32 8, !"sign-return-address-with-bkey", i32 0}
!383 = !{i32 7, !"uwtable", i32 1}
!384 = !{i32 7, !"frame-pointer", i32 2}
!385 = !{!"clang version 15.0.0 (git@github.com:linkeLi0421/llvm-project15-IRDumperPass.git 23ab625cb005cd08da083f9b643a7feed9af8abe)"}
!386 = !{!"branch_weights", i32 2000, i32 1}
!387 = !{!"branch_weights", i32 1, i32 2000}
!388 = !{!"auto-init"}
!389 = !{i8 0, i8 2}
!390 = !{i32 0, i32 33}
!391 = !{i64 2148357483, i64 2148357488, i64 2148357501, i64 2148357545, i64 2148357579, i64 2148357600}
!392 = !{i64 2153751809}
!393 = !{i64 2153752030}
!394 = !{i64 2149380163}
!395 = !{i64 2149381199}
!396 = !{i64 2153950149}
!397 = !{i64 2153950366}
!398 = !{i64 2153967059}
!399 = !{i64 2153967282}
!400 = !{i64 2153984093}
!401 = !{i64 2153984314}
!402 = !{i64 2153840957}
!403 = !{i64 2153841192}
!404 = !{i64 2153858107}
!405 = !{i64 2153858340}
!406 = !{i64 2153929138}
!407 = !{i64 2153929379}
!408 = !{i64 2153768622}
!409 = !{i64 2153768841}
!410 = !{i64 2153806821}
!411 = !{i64 2153807054}
!412 = !{i64 2153823877}
!413 = !{i64 2153824108}
