; ModuleID = '/llk/IR_all_yes/drivers/gpu/drm/amd/display/dc/dce/dce_scl_filters.c_pt.bc'
source_filename = "../drivers/gpu/drm/amd/amdgpu/../display/dc/dce/dce_scl_filters.c"
target datalayout = "E-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64"
target triple = "armebv6k-unknown-linux-gnueabi"

module asm ".syntax unified"

%struct.fixed31_32 = type { i64 }

@filter_3tap_16p_upscale = internal constant { [27 x i16], [42 x i8] } { [27 x i16] [i16 2052, i16 2044, i16 0, i16 1708, i16 2424, i16 16348, i16 1372, i16 2800, i16 16308, i16 1056, i16 3152, i16 16272, i16 768, i16 3464, i16 16248, i16 512, i16 3728, i16 16240, i16 296, i16 3932, i16 16252, i16 124, i16 4056, i16 16300, i16 0, i16 4096, i16 0], [42 x i8] zeroinitializer }, align 32
@filter_3tap_16p_116 = internal constant { [27 x i16], [42 x i8] } { [27 x i16] [i16 2052, i16 2044, i16 0, i16 1792, i16 2324, i16 16364, i16 1540, i16 2588, i16 16352, i16 1292, i16 2836, i16 16352, i16 1052, i16 3060, i16 16368, i16 832, i16 3248, i16 16, i16 628, i16 3388, i16 80, i16 448, i16 3476, i16 172, i16 296, i16 3508, i16 292], [42 x i8] zeroinitializer }, align 32
@filter_3tap_16p_149 = internal constant { [27 x i16], [42 x i8] } { [27 x i16] [i16 2052, i16 2044, i16 0, i16 1840, i16 2252, i16 4, i16 1632, i16 2444, i16 20, i16 1424, i16 2620, i16 52, i16 1220, i16 2772, i16 104, i16 1024, i16 2900, i16 172, i16 840, i16 2992, i16 264, i16 668, i16 3052, i16 376, i16 512, i16 3072, i16 512], [42 x i8] zeroinitializer }, align 32
@filter_3tap_16p_183 = internal constant { [27 x i16], [42 x i8] } { [27 x i16] [i16 2052, i16 2044, i16 0, i16 1876, i16 2176, i16 44, i16 1704, i16 2288, i16 104, i16 1532, i16 2388, i16 176, i16 1360, i16 2476, i16 260, i16 1192, i16 2544, i16 360, i16 1032, i16 2592, i16 472, i16 876, i16 2624, i16 596, i16 732, i16 2632, i16 732], [42 x i8] zeroinitializer }, align 32
@filter_3tap_64p_upscale = internal constant { [99 x i16], [58 x i8] } { [99 x i16] [i16 2052, i16 2044, i16 0, i16 1960, i16 2144, i16 16376, i16 1876, i16 2236, i16 16368, i16 1792, i16 2328, i16 16360, i16 1708, i16 2424, i16 16348, i16 1620, i16 2520, i16 16340, i16 1540, i16 2612, i16 16328, i16 1456, i16 2704, i16 16320, i16 1372, i16 2800, i16 16308, i16 1292, i16 2888, i16 16300, i16 1212, i16 2976, i16 16292, i16 1136, i16 3060, i16 16284, i16 1056, i16 3152, i16 16272, i16 984, i16 3228, i16 16268, i16 908, i16 3312, i16 16260, i16 836, i16 3392, i16 16252, i16 768, i16 3464, i16 16248, i16 700, i16 3536, i16 16244, i16 636, i16 3604, i16 16240, i16 572, i16 3668, i16 16240, i16 512, i16 3728, i16 16240, i16 456, i16 3784, i16 16240, i16 400, i16 3836, i16 16244, i16 348, i16 3884, i16 16248, i16 296, i16 3932, i16 16252, i16 252, i16 3964, i16 16264, i16 204, i16 4004, i16 16272, i16 164, i16 4032, i16 16284, i16 124, i16 4056, i16 16300, i16 88, i16 4072, i16 16320, i16 56, i16 4084, i16 16340, i16 24, i16 4096, i16 16360, i16 0, i16 4096, i16 0], [58 x i8] zeroinitializer }, align 32
@filter_3tap_64p_116 = internal constant { [99 x i16], [58 x i8] } { [99 x i16] [i16 2052, i16 2044, i16 0, i16 1984, i16 2116, i16 16380, i16 1920, i16 2184, i16 16376, i16 1856, i16 2256, i16 16368, i16 1792, i16 2324, i16 16364, i16 1728, i16 2392, i16 16360, i16 1668, i16 2456, i16 16356, i16 1604, i16 2524, i16 16352, i16 1540, i16 2588, i16 16352, i16 1476, i16 2652, i16 16352, i16 1416, i16 2716, i16 16348, i16 1352, i16 2780, i16 16348, i16 1292, i16 2836, i16 16352, i16 1228, i16 2900, i16 16352, i16 1168, i16 2956, i16 16356, i16 1112, i16 3008, i16 16360, i16 1052, i16 3060, i16 16368, i16 992, i16 3112, i16 16376, i16 936, i16 3160, i16 0, i16 884, i16 3208, i16 4, i16 832, i16 3248, i16 16, i16 776, i16 3288, i16 32, i16 728, i16 3324, i16 44, i16 672, i16 3360, i16 64, i16 628, i16 3388, i16 80, i16 580, i16 3416, i16 100, i16 532, i16 3440, i16 124, i16 488, i16 3460, i16 148, i16 448, i16 3476, i16 172, i16 408, i16 3488, i16 200, i16 368, i16 3500, i16 228, i16 332, i16 3504, i16 260, i16 296, i16 3508, i16 292], [58 x i8] zeroinitializer }, align 32
@filter_3tap_64p_149 = internal constant { [99 x i16], [58 x i8] } { [99 x i16] [i16 2052, i16 2044, i16 0, i16 1996, i16 2100, i16 0, i16 1944, i16 2152, i16 0, i16 1892, i16 2204, i16 0, i16 1840, i16 2252, i16 4, i16 1792, i16 2300, i16 4, i16 1740, i16 2348, i16 8, i16 1688, i16 2396, i16 12, i16 1632, i16 2444, i16 20, i16 1580, i16 2488, i16 28, i16 1532, i16 2532, i16 32, i16 1476, i16 2576, i16 44, i16 1424, i16 2620, i16 52, i16 1372, i16 2660, i16 64, i16 1320, i16 2700, i16 76, i16 1272, i16 2736, i16 88, i16 1220, i16 2772, i16 104, i16 1168, i16 2808, i16 120, i16 1120, i16 2840, i16 136, i16 1072, i16 2872, i16 152, i16 1024, i16 2900, i16 172, i16 976, i16 2924, i16 196, i16 928, i16 2952, i16 216, i16 884, i16 2972, i16 240, i16 840, i16 2992, i16 264, i16 792, i16 3012, i16 292, i16 748, i16 3028, i16 320, i16 708, i16 3040, i16 348, i16 668, i16 3052, i16 376, i16 628, i16 3060, i16 408, i16 588, i16 3068, i16 440, i16 552, i16 3068, i16 476, i16 512, i16 3072, i16 512], [58 x i8] zeroinitializer }, align 32
@filter_3tap_64p_183 = internal constant { [99 x i16], [58 x i8] } { [99 x i16] [i16 2052, i16 2044, i16 0, i16 2004, i16 2084, i16 8, i16 1964, i16 2112, i16 20, i16 1920, i16 2144, i16 32, i16 1876, i16 2176, i16 44, i16 1832, i16 2204, i16 60, i16 1792, i16 2232, i16 72, i16 1748, i16 2260, i16 88, i16 1704, i16 2288, i16 104, i16 1660, i16 2316, i16 120, i16 1616, i16 2340, i16 140, i16 1576, i16 2364, i16 156, i16 1532, i16 2388, i16 176, i16 1488, i16 2412, i16 196, i16 1448, i16 2432, i16 216, i16 1400, i16 2456, i16 240, i16 1360, i16 2476, i16 260, i16 1320, i16 2492, i16 284, i16 1276, i16 2512, i16 308, i16 1236, i16 2528, i16 332, i16 1192, i16 2544, i16 360, i16 1152, i16 2556, i16 388, i16 1116, i16 2568, i16 412, i16 1076, i16 2580, i16 440, i16 1032, i16 2592, i16 472, i16 992, i16 2604, i16 500, i16 952, i16 2612, i16 532, i16 916, i16 2616, i16 564, i16 876, i16 2624, i16 596, i16 840, i16 2628, i16 628, i16 804, i16 2632, i16 660, i16 768, i16 2632, i16 696, i16 732, i16 2632, i16 732], [58 x i8] zeroinitializer }, align 32
@filter_4tap_16p_upscale = internal constant { [36 x i16], [56 x i8] } { [36 x i16] [i16 0, i16 4096, i16 0, i16 0, i16 16244, i16 4060, i16 180, i16 16380, i16 16140, i16 3952, i16 404, i16 16368, i16 16076, i16 3780, i16 664, i16 16344, i16 16044, i16 3556, i16 952, i16 16312, i16 16036, i16 3288, i16 1268, i16 16272, i16 16056, i16 2976, i16 1604, i16 16228, i16 16088, i16 2644, i16 1952, i16 16180, i16 16128, i16 2300, i16 2304, i16 16132], [56 x i8] zeroinitializer }, align 32
@filter_4tap_16p_116 = internal constant { [36 x i16], [56 x i8] } { [36 x i16] [i16 424, i16 3252, i16 420, i16 0, i16 272, i16 3248, i16 596, i16 16364, i16 144, i16 3200, i16 796, i16 16340, i16 36, i16 3116, i16 1012, i16 16316, i16 16344, i16 2988, i16 1244, i16 16288, i16 16284, i16 2836, i16 1484, i16 16260, i16 16240, i16 2656, i16 1732, i16 16236, i16 16220, i16 2444, i16 1980, i16 16220, i16 16212, i16 2220, i16 2220, i16 16212], [56 x i8] zeroinitializer }, align 32
@filter_4tap_16p_149 = internal constant { [36 x i16], [56 x i8] } { [36 x i16] [i16 696, i16 2704, i16 696, i16 0, i16 560, i16 2704, i16 848, i16 16368, i16 440, i16 2680, i16 1008, i16 16352, i16 328, i16 2632, i16 1180, i16 16340, i16 232, i16 2560, i16 1356, i16 16332, i16 152, i16 2464, i16 1536, i16 16328, i16 84, i16 2344, i16 1716, i16 16336, i16 28, i16 2212, i16 1888, i16 16352, i16 16380, i16 2052, i16 2052, i16 16380], [56 x i8] zeroinitializer }, align 32
@filter_4tap_16p_183 = internal constant { [36 x i16], [56 x i8] } { [36 x i16] [i16 944, i16 2208, i16 944, i16 0, i16 840, i16 2200, i16 1052, i16 4, i16 732, i16 2180, i16 1168, i16 16, i16 632, i16 2148, i16 1280, i16 36, i16 540, i16 2104, i16 1392, i16 60, i16 456, i16 2044, i16 1504, i16 92, i16 376, i16 1976, i16 1612, i16 132, i16 304, i16 1900, i16 1712, i16 180, i16 240, i16 1812, i16 1808, i16 236], [56 x i8] zeroinitializer }, align 32
@filter_4tap_64p_upscale = internal constant { [132 x i16], [88 x i8] } { [132 x i16] [i16 0, i16 4096, i16 0, i16 0, i16 16348, i16 4092, i16 40, i16 0, i16 16308, i16 4088, i16 84, i16 0, i16 16276, i16 4072, i16 132, i16 0, i16 16244, i16 4060, i16 180, i16 16380, i16 16216, i16 4036, i16 232, i16 16380, i16 16188, i16 4012, i16 288, i16 16376, i16 16164, i16 3984, i16 344, i16 16372, i16 16140, i16 3952, i16 404, i16 16368, i16 16120, i16 3916, i16 464, i16 16364, i16 16104, i16 3872, i16 528, i16 16360, i16 16088, i16 3828, i16 596, i16 16352, i16 16076, i16 3780, i16 664, i16 16344, i16 16064, i16 3728, i16 732, i16 16340, i16 16056, i16 3672, i16 804, i16 16332, i16 16048, i16 3616, i16 876, i16 16324, i16 16044, i16 3556, i16 952, i16 16312, i16 16040, i16 3492, i16 1028, i16 16304, i16 16036, i16 3424, i16 1108, i16 16296, i16 16036, i16 3356, i16 1188, i16 16284, i16 16036, i16 3288, i16 1268, i16 16272, i16 16040, i16 3208, i16 1352, i16 16264, i16 16044, i16 3132, i16 1436, i16 16252, i16 16048, i16 3056, i16 1520, i16 16240, i16 16056, i16 2976, i16 1604, i16 16228, i16 16060, i16 2900, i16 1688, i16 16216, i16 16068, i16 2816, i16 1776, i16 16204, i16 16076, i16 2732, i16 1864, i16 16192, i16 16088, i16 2644, i16 1952, i16 16180, i16 16096, i16 2564, i16 2040, i16 16164, i16 16108, i16 2476, i16 2128, i16 16152, i16 16120, i16 2388, i16 2216, i16 16140, i16 16128, i16 2300, i16 2304, i16 16132], [88 x i8] zeroinitializer }, align 32
@filter_4tap_64p_116 = internal constant { [132 x i16], [88 x i8] } { [132 x i16] [i16 424, i16 3252, i16 420, i16 0, i16 380, i16 3256, i16 464, i16 16380, i16 344, i16 3256, i16 504, i16 16376, i16 304, i16 3252, i16 552, i16 16372, i16 272, i16 3248, i16 596, i16 16364, i16 236, i16 3240, i16 644, i16 16360, i16 204, i16 3228, i16 692, i16 16356, i16 172, i16 3216, i16 744, i16 16348, i16 144, i16 3200, i16 796, i16 16340, i16 112, i16 3184, i16 848, i16 16336, i16 88, i16 3164, i16 900, i16 16328, i16 60, i16 3144, i16 956, i16 16320, i16 36, i16 3116, i16 1012, i16 16316, i16 16, i16 3088, i16 1068, i16 16308, i16 16380, i16 3060, i16 1124, i16 16300, i16 16360, i16 3028, i16 1184, i16 16292, i16 16344, i16 2988, i16 1244, i16 16288, i16 16324, i16 2956, i16 1304, i16 16280, i16 16308, i16 2920, i16 1364, i16 16272, i16 16296, i16 2880, i16 1424, i16 16264, i16 16284, i16 2836, i16 1484, i16 16260, i16 16272, i16 2796, i16 1544, i16 16252, i16 16260, i16 2748, i16 1608, i16 16248, i16 16252, i16 2704, i16 1668, i16 16240, i16 16240, i16 2656, i16 1732, i16 16236, i16 16236, i16 2604, i16 1792, i16 16232, i16 16228, i16 2552, i16 1856, i16 16228, i16 16224, i16 2500, i16 1916, i16 16224, i16 16220, i16 2444, i16 1980, i16 16220, i16 16216, i16 2392, i16 2040, i16 16216, i16 16216, i16 2332, i16 2100, i16 16216, i16 16212, i16 2276, i16 2160, i16 16216, i16 16212, i16 2220, i16 2220, i16 16212], [88 x i8] zeroinitializer }, align 32
@filter_4tap_64p_149 = internal constant { [132 x i16], [88 x i8] } { [132 x i16] [i16 696, i16 2704, i16 696, i16 0, i16 660, i16 2708, i16 732, i16 16380, i16 628, i16 2708, i16 768, i16 16376, i16 592, i16 2708, i16 808, i16 16372, i16 560, i16 2704, i16 848, i16 16368, i16 532, i16 2700, i16 884, i16 16364, i16 496, i16 2696, i16 928, i16 16360, i16 468, i16 2688, i16 968, i16 16356, i16 440, i16 2680, i16 1008, i16 16352, i16 408, i16 2672, i16 1052, i16 16348, i16 384, i16 2660, i16 1092, i16 16344, i16 356, i16 2644, i16 1136, i16 16344, i16 328, i16 2632, i16 1180, i16 16340, i16 304, i16 2616, i16 1224, i16 16336, i16 280, i16 2596, i16 1268, i16 16336, i16 256, i16 2580, i16 1312, i16 16332, i16 232, i16 2560, i16 1356, i16 16332, i16 212, i16 2536, i16 1404, i16 16328, i16 192, i16 2512, i16 1448, i16 16328, i16 172, i16 2488, i16 1492, i16 16328, i16 152, i16 2464, i16 1536, i16 16328, i16 132, i16 2436, i16 1584, i16 16328, i16 116, i16 2404, i16 1628, i16 16332, i16 100, i16 2376, i16 1672, i16 16332, i16 84, i16 2344, i16 1716, i16 16336, i16 68, i16 2312, i16 1760, i16 16340, i16 56, i16 2280, i16 1804, i16 16340, i16 44, i16 2244, i16 1848, i16 16344, i16 28, i16 2212, i16 1888, i16 16352, i16 20, i16 2172, i16 1932, i16 16356, i16 8, i16 2136, i16 1972, i16 16364, i16 0, i16 2096, i16 2012, i16 16372, i16 16380, i16 2052, i16 2052, i16 16380], [88 x i8] zeroinitializer }, align 32
@filter_4tap_64p_183 = internal constant { [132 x i16], [88 x i8] } { [132 x i16] [i16 944, i16 2208, i16 944, i16 0, i16 916, i16 2208, i16 972, i16 0, i16 892, i16 2204, i16 1000, i16 0, i16 864, i16 2204, i16 1024, i16 4, i16 840, i16 2200, i16 1052, i16 4, i16 812, i16 2196, i16 1080, i16 8, i16 784, i16 2192, i16 1108, i16 12, i16 760, i16 2184, i16 1140, i16 12, i16 732, i16 2180, i16 1168, i16 16, i16 708, i16 2172, i16 1196, i16 20, i16 684, i16 2164, i16 1224, i16 24, i16 656, i16 2156, i16 1252, i16 32, i16 632, i16 2148, i16 1280, i16 36, i16 612, i16 2136, i16 1308, i16 40, i16 588, i16 2124, i16 1336, i16 48, i16 564, i16 2116, i16 1364, i16 52, i16 540, i16 2104, i16 1392, i16 60, i16 520, i16 2088, i16 1420, i16 68, i16 496, i16 2076, i16 1448, i16 76, i16 476, i16 2060, i16 1476, i16 84, i16 456, i16 2044, i16 1504, i16 92, i16 436, i16 2028, i16 1532, i16 100, i16 412, i16 2012, i16 1560, i16 112, i16 396, i16 1996, i16 1584, i16 120, i16 376, i16 1976, i16 1612, i16 132, i16 356, i16 1960, i16 1636, i16 144, i16 336, i16 1940, i16 1664, i16 156, i16 320, i16 1920, i16 1688, i16 168, i16 304, i16 1900, i16 1712, i16 180, i16 288, i16 1880, i16 1736, i16 192, i16 272, i16 1856, i16 1760, i16 208, i16 256, i16 1836, i16 1784, i16 220, i16 240, i16 1812, i16 1808, i16 236], [88 x i8] zeroinitializer }, align 32
@filter_5tap_64p_upscale = internal constant { [165 x i16], [86 x i8] } { [165 x i16] [i16 15936, i16 2496, i16 2496, i16 15936, i16 0, i16 15952, i16 2404, i16 2584, i16 15924, i16 0, i16 15964, i16 2312, i16 2668, i16 15916, i16 4, i16 15980, i16 2220, i16 2752, i16 15904, i16 8, i16 15992, i16 2128, i16 2836, i16 15896, i16 12, i16 16008, i16 2036, i16 2912, i16 15892, i16 16, i16 16024, i16 1944, i16 2992, i16 15884, i16 20, i16 16040, i16 1852, i16 3072, i16 15880, i16 20, i16 16056, i16 1764, i16 3144, i16 15876, i16 24, i16 16076, i16 1668, i16 3216, i16 15876, i16 28, i16 16092, i16 1580, i16 3284, i16 15876, i16 32, i16 16108, i16 1492, i16 3356, i16 15876, i16 32, i16 16124, i16 1404, i16 3420, i16 15880, i16 36, i16 16140, i16 1316, i16 3480, i16 15888, i16 40, i16 16160, i16 1228, i16 3544, i16 15892, i16 40, i16 16176, i16 1144, i16 3604, i16 15900, i16 40, i16 16192, i16 1060, i16 3656, i16 15912, i16 44, i16 16208, i16 980, i16 3708, i16 15924, i16 44, i16 16224, i16 900, i16 3756, i16 15940, i16 44, i16 16236, i16 824, i16 3804, i16 15956, i16 44, i16 16252, i16 744, i16 3848, i16 15976, i16 44, i16 16268, i16 672, i16 3884, i16 15996, i16 44, i16 16280, i16 600, i16 3920, i16 16020, i16 44, i16 16292, i16 528, i16 3956, i16 16048, i16 40, i16 16304, i16 460, i16 3984, i16 16076, i16 40, i16 16320, i16 396, i16 4008, i16 16104, i16 36, i16 16328, i16 332, i16 4032, i16 16140, i16 32, i16 16340, i16 272, i16 4052, i16 16172, i16 28, i16 16352, i16 212, i16 4064, i16 16212, i16 24, i16 16360, i16 156, i16 4080, i16 16252, i16 16, i16 16368, i16 100, i16 4092, i16 16292, i16 12, i16 16380, i16 48, i16 4092, i16 16340, i16 4, i16 0, i16 0, i16 4096, i16 0, i16 0], [86 x i8] zeroinitializer }, align 32
@filter_5tap_64p_116 = internal constant { [165 x i16], [86 x i8] } { [165 x i16] [i16 16092, i16 2340, i16 2340, i16 16092, i16 0, i16 16088, i16 2284, i16 2396, i16 16096, i16 0, i16 16084, i16 2224, i16 2452, i16 16104, i16 0, i16 16080, i16 2168, i16 2504, i16 16112, i16 0, i16 16080, i16 2108, i16 2556, i16 16120, i16 0, i16 16080, i16 2048, i16 2604, i16 16132, i16 0, i16 16080, i16 1988, i16 2652, i16 16144, i16 0, i16 16080, i16 1928, i16 2700, i16 16156, i16 0, i16 16080, i16 1868, i16 2752, i16 16168, i16 16380, i16 16084, i16 1808, i16 2792, i16 16184, i16 16380, i16 16088, i16 1744, i16 2840, i16 16200, i16 16376, i16 16092, i16 1684, i16 2876, i16 16220, i16 16376, i16 16096, i16 1624, i16 2920, i16 16236, i16 16372, i16 16100, i16 1564, i16 2960, i16 16256, i16 16368, i16 16108, i16 1500, i16 2996, i16 16280, i16 16364, i16 16112, i16 1440, i16 3032, i16 16304, i16 16360, i16 16120, i16 1380, i16 3064, i16 16328, i16 16356, i16 16124, i16 1320, i16 3100, i16 16352, i16 16352, i16 16132, i16 1260, i16 3128, i16 16380, i16 16348, i16 16140, i16 1204, i16 3156, i16 20, i16 16344, i16 16148, i16 1148, i16 3184, i16 48, i16 16336, i16 16156, i16 1088, i16 3208, i16 80, i16 16332, i16 16164, i16 1032, i16 3232, i16 112, i16 16324, i16 16172, i16 976, i16 3248, i16 148, i16 16320, i16 16180, i16 920, i16 3268, i16 184, i16 16312, i16 16188, i16 868, i16 3284, i16 220, i16 16304, i16 16200, i16 812, i16 3296, i16 256, i16 16300, i16 16208, i16 760, i16 3308, i16 296, i16 16292, i16 16216, i16 708, i16 3320, i16 336, i16 16284, i16 16224, i16 656, i16 3328, i16 380, i16 16276, i16 16232, i16 608, i16 3332, i16 424, i16 16268, i16 16244, i16 560, i16 3332, i16 468, i16 16260, i16 16252, i16 512, i16 3336, i16 512, i16 16252], [86 x i8] zeroinitializer }, align 32
@filter_5tap_64p_149 = internal constant { [165 x i16], [86 x i8] } { [165 x i16] [i16 16372, i16 2060, i16 2060, i16 16372, i16 0, i16 16360, i16 2024, i16 2096, i16 0, i16 0, i16 16348, i16 1992, i16 2128, i16 16, i16 16380, i16 16336, i16 1956, i16 2168, i16 28, i16 16376, i16 16324, i16 1920, i16 2200, i16 48, i16 16372, i16 16312, i16 1884, i16 2232, i16 64, i16 16372, i16 16304, i16 1848, i16 2264, i16 80, i16 16368, i16 16296, i16 1808, i16 2296, i16 100, i16 16364, i16 16288, i16 1772, i16 2324, i16 120, i16 16360, i16 16280, i16 1732, i16 2356, i16 140, i16 16356, i16 16272, i16 1696, i16 2380, i16 164, i16 16352, i16 16268, i16 1656, i16 2408, i16 184, i16 16348, i16 16260, i16 1616, i16 2436, i16 208, i16 16344, i16 16256, i16 1576, i16 2460, i16 232, i16 16340, i16 16252, i16 1536, i16 2488, i16 256, i16 16332, i16 16248, i16 1496, i16 2512, i16 280, i16 16328, i16 16244, i16 1456, i16 2532, i16 308, i16 16324, i16 16240, i16 1416, i16 2552, i16 336, i16 16320, i16 16240, i16 1376, i16 2568, i16 364, i16 16316, i16 16236, i16 1336, i16 2592, i16 392, i16 16308, i16 16236, i16 1296, i16 2608, i16 420, i16 16304, i16 16236, i16 1256, i16 2620, i16 452, i16 16300, i16 16236, i16 1216, i16 2632, i16 484, i16 16296, i16 16236, i16 1176, i16 2648, i16 512, i16 16292, i16 16236, i16 1136, i16 2656, i16 548, i16 16288, i16 16236, i16 1096, i16 2672, i16 580, i16 16280, i16 16240, i16 1056, i16 2680, i16 612, i16 16276, i16 16240, i16 1016, i16 2688, i16 648, i16 16272, i16 16244, i16 980, i16 2692, i16 680, i16 16268, i16 16244, i16 940, i16 2700, i16 716, i16 16264, i16 16248, i16 900, i16 2704, i16 752, i16 16260, i16 16252, i16 864, i16 2704, i16 788, i16 16256, i16 16252, i16 828, i16 2704, i16 828, i16 16252], [86 x i8] zeroinitializer }, align 32
@filter_5tap_64p_183 = internal constant { [165 x i16], [86 x i8] } { [165 x i16] [i16 360, i16 1692, i16 1688, i16 356, i16 0, i16 340, i16 1676, i16 1708, i16 372, i16 0, i16 324, i16 1652, i16 1728, i16 392, i16 0, i16 312, i16 1636, i16 1744, i16 408, i16 16380, i16 296, i16 1620, i16 1760, i16 424, i16 16380, i16 280, i16 1600, i16 1776, i16 444, i16 16380, i16 268, i16 1584, i16 1792, i16 460, i16 16376, i16 252, i16 1564, i16 1808, i16 480, i16 16376, i16 240, i16 1548, i16 1820, i16 496, i16 16376, i16 228, i16 1524, i16 1836, i16 516, i16 16376, i16 216, i16 1508, i16 1848, i16 536, i16 16372, i16 204, i16 1488, i16 1860, i16 556, i16 16372, i16 192, i16 1464, i16 1876, i16 576, i16 16372, i16 180, i16 1444, i16 1888, i16 596, i16 16372, i16 168, i16 1424, i16 1900, i16 616, i16 16372, i16 156, i16 1404, i16 1912, i16 636, i16 16372, i16 148, i16 1380, i16 1920, i16 660, i16 16372, i16 136, i16 1360, i16 1928, i16 680, i16 16376, i16 128, i16 1336, i16 1940, i16 700, i16 16376, i16 116, i16 1316, i16 1948, i16 724, i16 16376, i16 108, i16 1296, i16 1956, i16 744, i16 16376, i16 100, i16 1268, i16 1964, i16 768, i16 16380, i16 92, i16 1252, i16 1968, i16 788, i16 16380, i16 84, i16 1224, i16 1976, i16 812, i16 0, i16 76, i16 1204, i16 1984, i16 832, i16 0, i16 68, i16 1184, i16 1988, i16 856, i16 0, i16 60, i16 1160, i16 1992, i16 880, i16 4, i16 56, i16 1136, i16 1996, i16 900, i16 8, i16 48, i16 1116, i16 2000, i16 924, i16 8, i16 44, i16 1092, i16 2000, i16 948, i16 12, i16 36, i16 1068, i16 2004, i16 972, i16 16, i16 32, i16 1044, i16 2004, i16 992, i16 24, i16 28, i16 1020, i16 2004, i16 1016, i16 28], [86 x i8] zeroinitializer }, align 32
@filter_6tap_64p_upscale = internal constant { [198 x i16], [116 x i8] } { [198 x i16] [i16 0, i16 0, i16 4096, i16 0, i16 0, i16 0, i16 12, i16 16336, i16 4092, i16 52, i16 16372, i16 0, i16 24, i16 16284, i16 4088, i16 108, i16 16360, i16 0, i16 36, i16 16236, i16 4080, i16 168, i16 16344, i16 0, i16 44, i16 16196, i16 4068, i16 228, i16 16328, i16 0, i16 56, i16 16152, i16 4052, i16 292, i16 16312, i16 0, i16 64, i16 16112, i16 4032, i16 356, i16 16296, i16 4, i16 72, i16 16072, i16 4012, i16 424, i16 16280, i16 4, i16 80, i16 16040, i16 3988, i16 492, i16 16260, i16 4, i16 88, i16 16004, i16 3956, i16 564, i16 16244, i16 8, i16 96, i16 15976, i16 3924, i16 636, i16 16224, i16 8, i16 100, i16 15948, i16 3888, i16 712, i16 16204, i16 12, i16 108, i16 15920, i16 3844, i16 788, i16 16188, i16 16, i16 112, i16 15896, i16 3804, i16 864, i16 16168, i16 20, i16 116, i16 15876, i16 3760, i16 944, i16 16148, i16 20, i16 120, i16 15856, i16 3712, i16 1024, i16 16128, i16 24, i16 120, i16 15840, i16 3660, i16 1108, i16 16108, i16 28, i16 124, i16 15824, i16 3604, i16 1192, i16 16088, i16 32, i16 124, i16 15812, i16 3548, i16 1276, i16 16068, i16 36, i16 124, i16 15804, i16 3488, i16 1360, i16 16048, i16 40, i16 128, i16 15796, i16 3420, i16 1448, i16 16028, i16 44, i16 128, i16 15788, i16 3356, i16 1536, i16 16008, i16 48, i16 124, i16 15784, i16 3292, i16 1624, i16 15988, i16 52, i16 124, i16 15780, i16 3220, i16 1712, i16 15972, i16 56, i16 124, i16 15780, i16 3144, i16 1800, i16 15952, i16 64, i16 120, i16 15780, i16 3072, i16 1888, i16 15936, i16 68, i16 120, i16 15784, i16 2996, i16 1976, i16 15916, i16 72, i16 116, i16 15788, i16 2920, i16 2064, i16 15900, i16 76, i16 112, i16 15796, i16 2840, i16 2152, i16 15884, i16 80, i16 108, i16 15804, i16 2756, i16 2244, i16 15868, i16 84, i16 104, i16 15812, i16 2676, i16 2328, i16 15856, i16 88, i16 104, i16 15820, i16 2592, i16 2416, i16 15840, i16 92, i16 100, i16 15828, i16 2504, i16 2504, i16 15828, i16 100], [116 x i8] zeroinitializer }, align 32
@filter_6tap_64p_116 = internal constant { [198 x i16], [116 x i8] } { [198 x i16] [i16 16140, i16 576, i16 3432, i16 576, i16 16140, i16 0, i16 16152, i16 528, i16 3428, i16 628, i16 16128, i16 0, i16 16164, i16 480, i16 3416, i16 680, i16 16120, i16 4, i16 16172, i16 432, i16 3416, i16 732, i16 16108, i16 4, i16 16184, i16 384, i16 3408, i16 784, i16 16096, i16 8, i16 16196, i16 340, i16 3392, i16 840, i16 16088, i16 8, i16 16208, i16 296, i16 3380, i16 892, i16 16076, i16 12, i16 16220, i16 252, i16 3360, i16 948, i16 16068, i16 16, i16 16228, i16 212, i16 3348, i16 1004, i16 16056, i16 16, i16 16240, i16 172, i16 3324, i16 1060, i16 16048, i16 20, i16 16248, i16 132, i16 3304, i16 1120, i16 16040, i16 20, i16 16260, i16 96, i16 3276, i16 1176, i16 16032, i16 24, i16 16272, i16 60, i16 3252, i16 1232, i16 16024, i16 24, i16 16280, i16 24, i16 3228, i16 1292, i16 16016, i16 24, i16 16288, i16 16380, i16 3192, i16 1352, i16 16008, i16 28, i16 16300, i16 16348, i16 3156, i16 1412, i16 16004, i16 28, i16 16308, i16 16316, i16 3132, i16 1468, i16 15996, i16 28, i16 16316, i16 16288, i16 3092, i16 1528, i16 15992, i16 32, i16 16324, i16 16260, i16 3056, i16 1588, i16 15988, i16 32, i16 16332, i16 16232, i16 3020, i16 1648, i16 15984, i16 32, i16 16340, i16 16208, i16 2980, i16 1708, i16 15980, i16 32, i16 16348, i16 16184, i16 2936, i16 1768, i16 15980, i16 32, i16 16352, i16 16164, i16 2896, i16 1828, i16 15976, i16 32, i16 16360, i16 16140, i16 2852, i16 1888, i16 15976, i16 32, i16 16368, i16 16124, i16 2804, i16 1944, i16 15976, i16 32, i16 16372, i16 16104, i16 2760, i16 2004, i16 15976, i16 32, i16 16380, i16 16088, i16 2708, i16 2064, i16 15980, i16 28, i16 0, i16 16072, i16 2660, i16 2120, i16 15984, i16 28, i16 0, i16 16056, i16 2616, i16 2176, i16 15988, i16 28, i16 4, i16 16044, i16 2564, i16 2236, i16 15992, i16 24, i16 8, i16 16036, i16 2512, i16 2292, i16 15996, i16 20, i16 12, i16 16024, i16 2456, i16 2348, i16 16004, i16 20, i16 16, i16 16016, i16 2404, i16 2400, i16 16012, i16 16], [116 x i8] zeroinitializer }, align 32
@filter_6tap_64p_149 = internal constant { [198 x i16], [116 x i8] } { [198 x i16] [i16 16148, i16 916, i16 2736, i16 916, i16 16148, i16 0, i16 16152, i16 876, i16 2736, i16 952, i16 16148, i16 0, i16 16152, i16 840, i16 2732, i16 992, i16 16148, i16 0, i16 16156, i16 800, i16 2732, i16 1032, i16 16144, i16 0, i16 16160, i16 764, i16 2728, i16 1068, i16 16144, i16 0, i16 16164, i16 728, i16 2720, i16 1108, i16 16144, i16 0, i16 16168, i16 692, i16 2712, i16 1148, i16 16144, i16 0, i16 16168, i16 656, i16 2704, i16 1188, i16 16148, i16 0, i16 16176, i16 620, i16 2692, i16 1228, i16 16148, i16 0, i16 16180, i16 588, i16 2684, i16 1268, i16 16148, i16 16380, i16 16184, i16 552, i16 2672, i16 1308, i16 16152, i16 16380, i16 16188, i16 520, i16 2660, i16 1348, i16 16156, i16 16376, i16 16192, i16 488, i16 2644, i16 1388, i16 16160, i16 16376, i16 16196, i16 456, i16 2632, i16 1428, i16 16164, i16 16372, i16 16204, i16 424, i16 2612, i16 1468, i16 16168, i16 16372, i16 16208, i16 392, i16 2600, i16 1508, i16 16172, i16 16368, i16 16212, i16 364, i16 2576, i16 1548, i16 16180, i16 16368, i16 16220, i16 332, i16 2556, i16 1588, i16 16188, i16 16364, i16 16224, i16 304, i16 2540, i16 1628, i16 16192, i16 16360, i16 16232, i16 276, i16 2512, i16 1668, i16 16200, i16 16360, i16 16236, i16 248, i16 2488, i16 1708, i16 16212, i16 16356, i16 16244, i16 224, i16 2464, i16 1744, i16 16220, i16 16352, i16 16248, i16 196, i16 2444, i16 1784, i16 16228, i16 16348, i16 16252, i16 172, i16 2416, i16 1824, i16 16240, i16 16344, i16 16260, i16 148, i16 2388, i16 1860, i16 16252, i16 16340, i16 16264, i16 124, i16 2364, i16 1896, i16 16264, i16 16336, i16 16272, i16 100, i16 2332, i16 1936, i16 16276, i16 16332, i16 16276, i16 80, i16 2300, i16 1972, i16 16292, i16 16328, i16 16280, i16 60, i16 2272, i16 2008, i16 16304, i16 16324, i16 16288, i16 36, i16 2240, i16 2044, i16 16320, i16 16320, i16 16292, i16 20, i16 2212, i16 2076, i16 16336, i16 16312, i16 16300, i16 0, i16 2176, i16 2112, i16 16352, i16 16308, i16 16304, i16 16368, i16 2144, i16 2144, i16 16368, i16 16304], [116 x i8] zeroinitializer }, align 32
@filter_6tap_64p_183 = internal constant { [198 x i16], [116 x i8] } { [198 x i16] [i16 44, i16 1056, i16 1900, i16 1052, i16 44, i16 0, i16 40, i16 1036, i16 1896, i16 1072, i16 52, i16 0, i16 32, i16 1016, i16 1896, i16 1096, i16 60, i16 16380, i16 24, i16 996, i16 1896, i16 1116, i16 68, i16 16380, i16 20, i16 976, i16 1896, i16 1136, i16 76, i16 16376, i16 12, i16 956, i16 1892, i16 1156, i16 88, i16 16376, i16 8, i16 932, i16 1892, i16 1180, i16 96, i16 16372, i16 4, i16 912, i16 1888, i16 1200, i16 104, i16 16372, i16 0, i16 892, i16 1888, i16 1220, i16 112, i16 16368, i16 16380, i16 868, i16 1884, i16 1240, i16 124, i16 16368, i16 16376, i16 848, i16 1880, i16 1264, i16 132, i16 16364, i16 16372, i16 828, i16 1872, i16 1284, i16 144, i16 16364, i16 16368, i16 808, i16 1868, i16 1304, i16 156, i16 16360, i16 16364, i16 788, i16 1860, i16 1324, i16 168, i16 16360, i16 16360, i16 772, i16 1856, i16 1344, i16 176, i16 16356, i16 16356, i16 748, i16 1852, i16 1364, i16 188, i16 16356, i16 16352, i16 732, i16 1844, i16 1384, i16 200, i16 16352, i16 16352, i16 708, i16 1836, i16 1404, i16 212, i16 16352, i16 16348, i16 692, i16 1828, i16 1420, i16 228, i16 16348, i16 16348, i16 672, i16 1816, i16 1440, i16 240, i16 16348, i16 16344, i16 652, i16 1812, i16 1460, i16 252, i16 16344, i16 16344, i16 632, i16 1796, i16 1480, i16 268, i16 16344, i16 16340, i16 612, i16 1792, i16 1496, i16 280, i16 16344, i16 16340, i16 596, i16 1776, i16 1516, i16 296, i16 16340, i16 16336, i16 580, i16 1768, i16 1532, i16 308, i16 16340, i16 16336, i16 560, i16 1756, i16 1548, i16 324, i16 16340, i16 16336, i16 540, i16 1744, i16 1568, i16 340, i16 16336, i16 16336, i16 520, i16 1732, i16 1584, i16 356, i16 16336, i16 16336, i16 504, i16 1720, i16 1600, i16 368, i16 16336, i16 16332, i16 488, i16 1708, i16 1616, i16 384, i16 16336, i16 16332, i16 472, i16 1692, i16 1632, i16 400, i16 16336, i16 16332, i16 452, i16 1676, i16 1648, i16 420, i16 16336, i16 16332, i16 440, i16 1664, i16 1660, i16 436, i16 16332], [116 x i8] zeroinitializer }, align 32
@filter_7tap_64p_upscale = internal constant { [231 x i16], [114 x i8] } { [231 x i16] [i16 176, i16 15768, i16 2492, i16 2488, i16 15764, i16 176, i16 0, i16 172, i16 15776, i16 2408, i16 2576, i16 15752, i16 180, i16 0, i16 168, i16 15788, i16 2324, i16 2656, i16 15744, i16 184, i16 0, i16 164, i16 15800, i16 2240, i16 2740, i16 15736, i16 188, i16 16380, i16 160, i16 15816, i16 2152, i16 2816, i16 15732, i16 192, i16 16380, i16 152, i16 15832, i16 2072, i16 2900, i16 15724, i16 192, i16 16376, i16 148, i16 15848, i16 1984, i16 2972, i16 15724, i16 196, i16 16376, i16 140, i16 15868, i16 1896, i16 3052, i16 15720, i16 196, i16 16376, i16 136, i16 15884, i16 1812, i16 3128, i16 15720, i16 196, i16 16372, i16 128, i16 15904, i16 1724, i16 3200, i16 15724, i16 196, i16 16372, i16 120, i16 15924, i16 1640, i16 3268, i16 15728, i16 196, i16 16372, i16 116, i16 15944, i16 1552, i16 3336, i16 15736, i16 196, i16 16368, i16 108, i16 15964, i16 1468, i16 3400, i16 15744, i16 196, i16 16368, i16 104, i16 15988, i16 1384, i16 3460, i16 15752, i16 192, i16 16368, i16 96, i16 16008, i16 1300, i16 3528, i16 15764, i16 188, i16 16364, i16 88, i16 16028, i16 1216, i16 3588, i16 15780, i16 184, i16 16364, i16 84, i16 16052, i16 1132, i16 3640, i16 15796, i16 180, i16 16364, i16 76, i16 16076, i16 1048, i16 3692, i16 15816, i16 176, i16 16364, i16 68, i16 16096, i16 968, i16 3748, i16 15836, i16 168, i16 16364, i16 64, i16 16120, i16 888, i16 3792, i16 15860, i16 160, i16 16364, i16 56, i16 16140, i16 812, i16 3836, i16 15888, i16 152, i16 16364, i16 52, i16 16164, i16 732, i16 3876, i16 15916, i16 144, i16 16364, i16 44, i16 16184, i16 660, i16 3916, i16 15944, i16 136, i16 16364, i16 40, i16 16208, i16 584, i16 3944, i16 15980, i16 124, i16 16368, i16 32, i16 16228, i16 512, i16 3976, i16 16016, i16 116, i16 16368, i16 28, i16 16252, i16 440, i16 4004, i16 16052, i16 104, i16 16368, i16 24, i16 16272, i16 372, i16 4028, i16 16092, i16 88, i16 16372, i16 20, i16 16292, i16 304, i16 4048, i16 16136, i16 76, i16 16372, i16 12, i16 16312, i16 240, i16 4068, i16 16180, i16 60, i16 16376, i16 8, i16 16332, i16 176, i16 4080, i16 16228, i16 48, i16 16376, i16 4, i16 16348, i16 112, i16 4092, i16 16280, i16 32, i16 16380, i16 0, i16 16368, i16 56, i16 4092, i16 16332, i16 16, i16 0, i16 0, i16 0, i16 0, i16 4096, i16 0, i16 0, i16 0], [114 x i8] zeroinitializer }, align 32
@filter_7tap_64p_116 = internal constant { [231 x i16], [114 x i8] } { [231 x i16] [i16 32, i16 15960, i16 2440, i16 2440, i16 15960, i16 32, i16 0, i16 36, i16 15948, i16 2388, i16 2496, i16 15972, i16 24, i16 0, i16 44, i16 15940, i16 2332, i16 2548, i16 15984, i16 16, i16 0, i16 48, i16 15932, i16 2280, i16 2596, i16 16000, i16 8, i16 0, i16 52, i16 15924, i16 2220, i16 2652, i16 16016, i16 0, i16 0, i16 60, i16 15920, i16 2160, i16 2692, i16 16032, i16 16380, i16 4, i16 64, i16 15912, i16 2104, i16 2740, i16 16052, i16 16372, i16 4, i16 68, i16 15908, i16 2044, i16 2788, i16 16072, i16 16364, i16 4, i16 72, i16 15908, i16 1988, i16 2824, i16 16092, i16 16356, i16 8, i16 72, i16 15904, i16 1928, i16 2876, i16 16116, i16 16344, i16 8, i16 76, i16 15904, i16 1868, i16 2912, i16 16140, i16 16336, i16 12, i16 80, i16 15904, i16 1808, i16 2956, i16 16164, i16 16324, i16 12, i16 80, i16 15904, i16 1748, i16 2992, i16 16192, i16 16316, i16 16, i16 84, i16 15908, i16 1688, i16 3028, i16 16220, i16 16304, i16 16, i16 84, i16 15908, i16 1628, i16 3068, i16 16248, i16 16292, i16 20, i16 84, i16 15912, i16 1572, i16 3100, i16 16280, i16 16280, i16 20, i16 88, i16 15916, i16 1508, i16 3132, i16 16312, i16 16268, i16 24, i16 88, i16 15924, i16 1448, i16 3160, i16 16344, i16 16256, i16 28, i16 88, i16 15928, i16 1392, i16 3192, i16 16376, i16 16244, i16 28, i16 88, i16 15936, i16 1332, i16 3220, i16 24, i16 16232, i16 32, i16 88, i16 15944, i16 1268, i16 3244, i16 64, i16 16220, i16 36, i16 88, i16 15952, i16 1212, i16 3268, i16 100, i16 16208, i16 36, i16 84, i16 15960, i16 1156, i16 3288, i16 140, i16 16196, i16 40, i16 84, i16 15968, i16 1096, i16 3308, i16 180, i16 16184, i16 44, i16 84, i16 15976, i16 1040, i16 3324, i16 224, i16 16168, i16 48, i16 84, i16 15988, i16 980, i16 3340, i16 268, i16 16156, i16 48, i16 80, i16 15996, i16 928, i16 3352, i16 312, i16 16144, i16 52, i16 80, i16 16008, i16 868, i16 3364, i16 356, i16 16132, i16 56, i16 76, i16 16020, i16 816, i16 3376, i16 404, i16 16116, i16 56, i16 76, i16 16032, i16 760, i16 3380, i16 452, i16 16104, i16 60, i16 72, i16 16044, i16 704, i16 3388, i16 500, i16 16092, i16 64, i16 72, i16 16056, i16 656, i16 3388, i16 548, i16 16080, i16 64, i16 68, i16 16068, i16 600, i16 3392, i16 600, i16 16068, i16 68], [114 x i8] zeroinitializer }, align 32
@filter_7tap_64p_149 = internal constant { [231 x i16], [114 x i8] } { [231 x i16] [i16 16232, i16 16364, i16 2216, i16 2220, i16 16368, i16 16232, i16 0, i16 16240, i16 16348, i16 2184, i16 2252, i16 0, i16 16224, i16 0, i16 16244, i16 16328, i16 2152, i16 2288, i16 20, i16 16216, i16 0, i16 16252, i16 16308, i16 2116, i16 2312, i16 44, i16 16212, i16 4, i16 16260, i16 16292, i16 2080, i16 2340, i16 68, i16 16204, i16 4, i16 16264, i16 16272, i16 2048, i16 2372, i16 92, i16 16196, i16 4, i16 16272, i16 16256, i16 2008, i16 2396, i16 116, i16 16192, i16 8, i16 16280, i16 16240, i16 1968, i16 2428, i16 140, i16 16184, i16 8, i16 16284, i16 16224, i16 1936, i16 2452, i16 168, i16 16176, i16 8, i16 16292, i16 16212, i16 1892, i16 2480, i16 196, i16 16168, i16 8, i16 16296, i16 16200, i16 1856, i16 2500, i16 220, i16 16164, i16 12, i16 16304, i16 16184, i16 1816, i16 2524, i16 252, i16 16156, i16 12, i16 16308, i16 16172, i16 1776, i16 2548, i16 280, i16 16152, i16 12, i16 16316, i16 16164, i16 1736, i16 2568, i16 308, i16 16144, i16 12, i16 16320, i16 16152, i16 1696, i16 2588, i16 340, i16 16136, i16 16, i16 16328, i16 16144, i16 1656, i16 2604, i16 368, i16 16132, i16 16, i16 16332, i16 16132, i16 1616, i16 2624, i16 400, i16 16128, i16 16, i16 16336, i16 16124, i16 1576, i16 2644, i16 432, i16 16120, i16 16, i16 16340, i16 16116, i16 1536, i16 2660, i16 464, i16 16116, i16 16, i16 16348, i16 16108, i16 1496, i16 2668, i16 500, i16 16112, i16 16, i16 16352, i16 16104, i16 1456, i16 2684, i16 532, i16 16104, i16 16, i16 16356, i16 16096, i16 1416, i16 2696, i16 568, i16 16100, i16 16, i16 16360, i16 16092, i16 1372, i16 2712, i16 600, i16 16096, i16 16, i16 16364, i16 16088, i16 1332, i16 2720, i16 636, i16 16092, i16 16, i16 16368, i16 16084, i16 1292, i16 2732, i16 672, i16 16088, i16 12, i16 16372, i16 16080, i16 1252, i16 2740, i16 708, i16 16084, i16 12, i16 16372, i16 16076, i16 1216, i16 2748, i16 744, i16 16080, i16 12, i16 16376, i16 16076, i16 1172, i16 2752, i16 780, i16 16080, i16 12, i16 16380, i16 16072, i16 1132, i16 2760, i16 820, i16 16076, i16 8, i16 0, i16 16072, i16 1092, i16 2760, i16 856, i16 16076, i16 8, i16 0, i16 16072, i16 1052, i16 2764, i16 896, i16 16072, i16 8, i16 0, i16 16072, i16 1012, i16 2768, i16 936, i16 16072, i16 4, i16 4, i16 16072, i16 972, i16 2768, i16 972, i16 16072, i16 4], [114 x i8] zeroinitializer }, align 32
@filter_7tap_64p_183 = internal constant { [231 x i16], [114 x i8] } { [231 x i16] [i16 16292, i16 488, i16 1652, i16 1652, i16 488, i16 16292, i16 0, i16 16292, i16 468, i16 1640, i16 1668, i16 504, i16 16292, i16 0, i16 16292, i16 452, i16 1624, i16 1680, i16 520, i16 16296, i16 0, i16 16288, i16 436, i16 1612, i16 1696, i16 540, i16 16296, i16 16380, i16 16288, i16 420, i16 1596, i16 1708, i16 556, i16 16300, i16 16380, i16 16288, i16 404, i16 1584, i16 1716, i16 576, i16 16300, i16 16380, i16 16288, i16 388, i16 1568, i16 1732, i16 592, i16 16304, i16 16376, i16 16288, i16 372, i16 1556, i16 1740, i16 612, i16 16304, i16 16376, i16 16288, i16 356, i16 1540, i16 1752, i16 632, i16 16308, i16 16372, i16 16288, i16 340, i16 1524, i16 1764, i16 648, i16 16312, i16 16372, i16 16288, i16 328, i16 1508, i16 1772, i16 668, i16 16316, i16 16368, i16 16288, i16 312, i16 1492, i16 1780, i16 688, i16 16320, i16 16368, i16 16288, i16 296, i16 1476, i16 1796, i16 708, i16 16320, i16 16364, i16 16288, i16 284, i16 1460, i16 1800, i16 728, i16 16324, i16 16364, i16 16292, i16 268, i16 1444, i16 1812, i16 744, i16 16328, i16 16360, i16 16292, i16 256, i16 1424, i16 1816, i16 764, i16 16336, i16 16360, i16 16292, i16 240, i16 1408, i16 1828, i16 784, i16 16340, i16 16356, i16 16292, i16 228, i16 1388, i16 1836, i16 804, i16 16344, i16 16356, i16 16296, i16 216, i16 1372, i16 1840, i16 824, i16 16348, i16 16352, i16 16296, i16 204, i16 1352, i16 1848, i16 844, i16 16356, i16 16348, i16 16296, i16 188, i16 1336, i16 1856, i16 864, i16 16360, i16 16348, i16 16300, i16 176, i16 1320, i16 1860, i16 884, i16 16364, i16 16344, i16 16300, i16 164, i16 1300, i16 1864, i16 904, i16 16372, i16 16344, i16 16304, i16 152, i16 1280, i16 1868, i16 924, i16 16380, i16 16340, i16 16304, i16 144, i16 1260, i16 1872, i16 944, i16 0, i16 16340, i16 16304, i16 132, i16 1244, i16 1880, i16 964, i16 4, i16 16336, i16 16308, i16 120, i16 1228, i16 1880, i16 984, i16 12, i16 16332, i16 16308, i16 108, i16 1208, i16 1884, i16 1004, i16 20, i16 16332, i16 16312, i16 100, i16 1184, i16 1888, i16 1024, i16 28, i16 16328, i16 16312, i16 88, i16 1168, i16 1888, i16 1044, i16 36, i16 16328, i16 16316, i16 80, i16 1148, i16 1888, i16 1064, i16 44, i16 16324, i16 16316, i16 72, i16 1124, i16 1892, i16 1084, i16 52, i16 16324, i16 16320, i16 60, i16 1108, i16 1892, i16 1104, i16 60, i16 16320], [114 x i8] zeroinitializer }, align 32
@filter_8tap_64p_upscale = internal constant { [264 x i16], [144 x i8] } { [264 x i16] [i16 0, i16 0, i16 0, i16 4096, i16 0, i16 0, i16 0, i16 0, i16 16380, i16 20, i16 16328, i16 4096, i16 56, i16 16364, i16 4, i16 0, i16 16372, i16 36, i16 16276, i16 4092, i16 116, i16 16344, i16 12, i16 0, i16 16368, i16 56, i16 16224, i16 4076, i16 180, i16 16324, i16 20, i16 0, i16 16364, i16 76, i16 16172, i16 4068, i16 244, i16 16300, i16 24, i16 0, i16 16356, i16 92, i16 16128, i16 4052, i16 312, i16 16276, i16 32, i16 0, i16 16352, i16 108, i16 16080, i16 4036, i16 380, i16 16252, i16 40, i16 0, i16 16348, i16 124, i16 16040, i16 4004, i16 452, i16 16232, i16 48, i16 0, i16 16344, i16 136, i16 16000, i16 3984, i16 524, i16 16208, i16 56, i16 16380, i16 16340, i16 152, i16 15960, i16 3952, i16 600, i16 16184, i16 64, i16 16380, i16 16336, i16 164, i16 15924, i16 3924, i16 672, i16 16156, i16 76, i16 16380, i16 16336, i16 176, i16 15892, i16 3880, i16 752, i16 16132, i16 84, i16 16380, i16 16332, i16 188, i16 15860, i16 3848, i16 828, i16 16108, i16 92, i16 16376, i16 16328, i16 200, i16 15832, i16 3804, i16 908, i16 16084, i16 100, i16 16376, i16 16328, i16 208, i16 15808, i16 3756, i16 992, i16 16060, i16 108, i16 16372, i16 16324, i16 216, i16 15784, i16 3708, i16 1072, i16 16036, i16 120, i16 16372, i16 16324, i16 224, i16 15764, i16 3656, i16 1156, i16 16012, i16 128, i16 16368, i16 16324, i16 232, i16 15744, i16 3600, i16 1240, i16 15988, i16 136, i16 16368, i16 16324, i16 240, i16 15728, i16 3544, i16 1324, i16 15964, i16 144, i16 16364, i16 16320, i16 244, i16 15712, i16 3488, i16 1412, i16 15940, i16 152, i16 16364, i16 16320, i16 248, i16 15700, i16 3432, i16 1496, i16 15916, i16 160, i16 16360, i16 16320, i16 252, i16 15688, i16 3360, i16 1584, i16 15896, i16 172, i16 16360, i16 16320, i16 256, i16 15680, i16 3296, i16 1672, i16 15872, i16 180, i16 16356, i16 16324, i16 256, i16 15676, i16 3224, i16 1756, i16 15852, i16 188, i16 16356, i16 16324, i16 256, i16 15672, i16 3160, i16 1844, i16 15832, i16 192, i16 16352, i16 16324, i16 260, i16 15672, i16 3084, i16 1932, i16 15812, i16 200, i16 16348, i16 16324, i16 256, i16 15672, i16 3012, i16 2020, i16 15792, i16 208, i16 16348, i16 16324, i16 256, i16 15672, i16 2936, i16 2108, i16 15776, i16 216, i16 16344, i16 16328, i16 256, i16 15676, i16 2856, i16 2192, i16 15760, i16 220, i16 16344, i16 16328, i16 252, i16 15680, i16 2780, i16 2280, i16 15744, i16 228, i16 16340, i16 16332, i16 252, i16 15688, i16 2692, i16 2364, i16 15732, i16 232, i16 16340, i16 16332, i16 248, i16 15696, i16 2616, i16 2448, i16 15716, i16 240, i16 16336, i16 16336, i16 244, i16 15704, i16 2528, i16 2532, i16 15708, i16 244, i16 16336], [144 x i8] zeroinitializer }, align 32
@filter_8tap_64p_116 = internal constant { [264 x i16], [144 x i8] } { [264 x i16] [i16 128, i16 16016, i16 616, i16 3348, i16 612, i16 16016, i16 128, i16 0, i16 124, i16 16028, i16 568, i16 3348, i16 664, i16 16004, i16 128, i16 0, i16 120, i16 16044, i16 512, i16 3344, i16 720, i16 15992, i16 132, i16 0, i16 120, i16 16056, i16 464, i16 3340, i16 772, i16 15980, i16 132, i16 0, i16 116, i16 16072, i16 416, i16 3328, i16 828, i16 15968, i16 136, i16 0, i16 112, i16 16084, i16 368, i16 3328, i16 884, i16 15956, i16 136, i16 16380, i16 108, i16 16100, i16 320, i16 3320, i16 940, i16 15944, i16 136, i16 16380, i16 108, i16 16112, i16 276, i16 3304, i16 996, i16 15932, i16 140, i16 16380, i16 104, i16 16128, i16 232, i16 3288, i16 1052, i16 15924, i16 140, i16 16380, i16 100, i16 16144, i16 188, i16 3276, i16 1108, i16 15912, i16 140, i16 16380, i16 96, i16 16156, i16 144, i16 3260, i16 1168, i16 15904, i16 140, i16 16380, i16 92, i16 16172, i16 104, i16 3236, i16 1228, i16 15896, i16 140, i16 16380, i16 88, i16 16184, i16 64, i16 3220, i16 1284, i16 15888, i16 140, i16 16380, i16 84, i16 16200, i16 28, i16 3196, i16 1344, i16 15880, i16 136, i16 16380, i16 80, i16 16212, i16 16376, i16 3168, i16 1404, i16 15876, i16 136, i16 16380, i16 76, i16 16228, i16 16340, i16 3140, i16 1464, i16 15868, i16 136, i16 16380, i16 72, i16 16240, i16 16308, i16 3112, i16 1524, i16 15864, i16 132, i16 16380, i16 68, i16 16256, i16 16272, i16 3084, i16 1584, i16 15860, i16 128, i16 16380, i16 64, i16 16268, i16 16240, i16 3048, i16 1644, i16 15860, i16 128, i16 16380, i16 60, i16 16284, i16 16208, i16 3016, i16 1704, i16 15856, i16 124, i16 16380, i16 56, i16 16296, i16 16180, i16 2976, i16 1764, i16 15856, i16 120, i16 0, i16 52, i16 16308, i16 16152, i16 2944, i16 1820, i16 15856, i16 116, i16 0, i16 48, i16 16320, i16 16124, i16 2908, i16 1880, i16 15856, i16 112, i16 0, i16 44, i16 16332, i16 16100, i16 2868, i16 1940, i16 15860, i16 104, i16 0, i16 44, i16 16348, i16 16076, i16 2824, i16 1996, i16 15860, i16 100, i16 0, i16 40, i16 16356, i16 16052, i16 2784, i16 2056, i16 15864, i16 96, i16 0, i16 36, i16 16368, i16 16032, i16 2736, i16 2112, i16 15872, i16 88, i16 4, i16 32, i16 16380, i16 16016, i16 2692, i16 2168, i16 15876, i16 80, i16 4, i16 28, i16 4, i16 15996, i16 2644, i16 2224, i16 15884, i16 76, i16 8, i16 24, i16 12, i16 15976, i16 2600, i16 2280, i16 15896, i16 68, i16 8, i16 24, i16 24, i16 15956, i16 2548, i16 2336, i16 15904, i16 60, i16 12, i16 20, i16 32, i16 15944, i16 2496, i16 2388, i16 15916, i16 52, i16 16, i16 16, i16 44, i16 15932, i16 2444, i16 2440, i16 15928, i16 44, i16 16], [144 x i8] zeroinitializer }, align 32
@filter_8tap_64p_149 = internal constant { [264 x i16], [144 x i8] } { [264 x i16] [i16 8, i16 16012, i16 1016, i16 2792, i16 1016, i16 16012, i16 8, i16 0, i16 12, i16 16012, i16 976, i16 2792, i16 1056, i16 16016, i16 0, i16 0, i16 12, i16 16012, i16 940, i16 2792, i16 1092, i16 16016, i16 0, i16 0, i16 16, i16 16016, i16 900, i16 2784, i16 1132, i16 16020, i16 16380, i16 0, i16 20, i16 16016, i16 860, i16 2780, i16 1172, i16 16020, i16 16376, i16 4, i16 24, i16 16016, i16 820, i16 2776, i16 1212, i16 16024, i16 16372, i16 4, i16 28, i16 16020, i16 784, i16 2768, i16 1252, i16 16028, i16 16364, i16 4, i16 32, i16 16024, i16 744, i16 2756, i16 1292, i16 16032, i16 16360, i16 8, i16 32, i16 16024, i16 708, i16 2752, i16 1332, i16 16036, i16 16356, i16 8, i16 36, i16 16028, i16 672, i16 2740, i16 1372, i16 16044, i16 16348, i16 8, i16 36, i16 16032, i16 636, i16 2728, i16 1412, i16 16048, i16 16344, i16 12, i16 40, i16 16036, i16 600, i16 2716, i16 1452, i16 16056, i16 16336, i16 12, i16 40, i16 16040, i16 564, i16 2704, i16 1492, i16 16064, i16 16328, i16 16, i16 44, i16 16044, i16 528, i16 2688, i16 1532, i16 16072, i16 16324, i16 16, i16 44, i16 16052, i16 496, i16 2672, i16 1572, i16 16080, i16 16316, i16 16, i16 44, i16 16056, i16 460, i16 2656, i16 1612, i16 16092, i16 16308, i16 20, i16 48, i16 16060, i16 424, i16 2640, i16 1652, i16 16100, i16 16304, i16 20, i16 48, i16 16068, i16 392, i16 2616, i16 1692, i16 16112, i16 16296, i16 24, i16 48, i16 16076, i16 360, i16 2600, i16 1728, i16 16124, i16 16288, i16 24, i16 48, i16 16080, i16 328, i16 2580, i16 1768, i16 16136, i16 16280, i16 28, i16 48, i16 16088, i16 300, i16 2560, i16 1804, i16 16148, i16 16272, i16 28, i16 52, i16 16096, i16 264, i16 2532, i16 1844, i16 16164, i16 16268, i16 28, i16 52, i16 16100, i16 236, i16 2508, i16 1880, i16 16180, i16 16260, i16 32, i16 52, i16 16108, i16 208, i16 2488, i16 1916, i16 16192, i16 16252, i16 32, i16 52, i16 16116, i16 180, i16 2456, i16 1956, i16 16208, i16 16244, i16 36, i16 48, i16 16124, i16 152, i16 2432, i16 1992, i16 16228, i16 16236, i16 36, i16 48, i16 16132, i16 128, i16 2408, i16 2024, i16 16244, i16 16228, i16 36, i16 48, i16 16140, i16 96, i16 2380, i16 2060, i16 16264, i16 16220, i16 40, i16 48, i16 16148, i16 72, i16 2352, i16 2096, i16 16280, i16 16212, i16 40, i16 48, i16 16156, i16 48, i16 2324, i16 2128, i16 16300, i16 16204, i16 40, i16 48, i16 16164, i16 24, i16 2288, i16 2164, i16 16320, i16 16196, i16 44, i16 44, i16 16172, i16 0, i16 2260, i16 2196, i16 16344, i16 16188, i16 44, i16 44, i16 16180, i16 16364, i16 2228, i16 2228, i16 16364, i16 16180, i16 44], [144 x i8] zeroinitializer }, align 32
@filter_8tap_64p_183 = internal constant { [264 x i16], [144 x i8] } { [264 x i16] [i16 16264, i16 72, i16 1148, i16 1896, i16 1148, i16 72, i16 16264, i16 0, i16 16264, i16 60, i16 1128, i16 1900, i16 1168, i16 84, i16 16260, i16 0, i16 16268, i16 52, i16 1108, i16 1896, i16 1188, i16 92, i16 16260, i16 0, i16 16268, i16 40, i16 1092, i16 1900, i16 1204, i16 104, i16 16256, i16 0, i16 16272, i16 32, i16 1068, i16 1896, i16 1224, i16 116, i16 16256, i16 0, i16 16272, i16 24, i16 1052, i16 1892, i16 1244, i16 128, i16 16252, i16 0, i16 16276, i16 16, i16 1032, i16 1884, i16 1264, i16 140, i16 16252, i16 0, i16 16276, i16 4, i16 1016, i16 1888, i16 1280, i16 152, i16 16252, i16 16380, i16 16280, i16 0, i16 992, i16 1884, i16 1300, i16 164, i16 16248, i16 16380, i16 16284, i16 16376, i16 972, i16 1876, i16 1320, i16 176, i16 16248, i16 16380, i16 16284, i16 16368, i16 952, i16 1876, i16 1336, i16 188, i16 16248, i16 16380, i16 16288, i16 16360, i16 932, i16 1872, i16 1356, i16 204, i16 16244, i16 16376, i16 16292, i16 16352, i16 912, i16 1868, i16 1372, i16 216, i16 16244, i16 16376, i16 16292, i16 16348, i16 892, i16 1860, i16 1392, i16 228, i16 16244, i16 16376, i16 16296, i16 16340, i16 872, i16 1856, i16 1408, i16 244, i16 16244, i16 16372, i16 16296, i16 16332, i16 852, i16 1852, i16 1424, i16 260, i16 16244, i16 16372, i16 16300, i16 16328, i16 832, i16 1840, i16 1444, i16 272, i16 16244, i16 16372, i16 16304, i16 16320, i16 816, i16 1832, i16 1460, i16 288, i16 16244, i16 16368, i16 16304, i16 16316, i16 796, i16 1828, i16 1476, i16 304, i16 16240, i16 16368, i16 16308, i16 16308, i16 776, i16 1824, i16 1492, i16 316, i16 16240, i16 16368, i16 16312, i16 16304, i16 756, i16 1812, i16 1508, i16 332, i16 16244, i16 16364, i16 16312, i16 16300, i16 736, i16 1800, i16 1528, i16 348, i16 16244, i16 16364, i16 16316, i16 16296, i16 716, i16 1796, i16 1540, i16 364, i16 16244, i16 16360, i16 16320, i16 16288, i16 700, i16 1784, i16 1556, i16 380, i16 16244, i16 16360, i16 16320, i16 16284, i16 680, i16 1780, i16 1572, i16 396, i16 16244, i16 16356, i16 16324, i16 16280, i16 660, i16 1768, i16 1588, i16 412, i16 16244, i16 16356, i16 16328, i16 16276, i16 644, i16 1752, i16 1604, i16 428, i16 16248, i16 16352, i16 16328, i16 16272, i16 624, i16 1748, i16 1616, i16 444, i16 16248, i16 16352, i16 16332, i16 16268, i16 604, i16 1736, i16 1632, i16 464, i16 16248, i16 16348, i16 16332, i16 16268, i16 588, i16 1720, i16 1644, i16 480, i16 16252, i16 16348, i16 16336, i16 16264, i16 568, i16 1712, i16 1660, i16 496, i16 16252, i16 16344, i16 16340, i16 16260, i16 552, i16 1692, i16 1672, i16 516, i16 16256, i16 16344, i16 16340, i16 16260, i16 532, i16 1684, i16 1684, i16 532, i16 16260, i16 16340], [144 x i8] zeroinitializer }, align 32
@filter_2tap_16p = internal constant { [18 x i16], [60 x i8] } { [18 x i16] [i16 4096, i16 0, i16 4080, i16 16, i16 4016, i16 80, i16 3892, i16 204, i16 3688, i16 408, i16 3396, i16 700, i16 3012, i16 1084, i16 2556, i16 1540, i16 2048, i16 2048], [60 x i8] zeroinitializer }, align 32
@filter_2tap_64p = internal constant { [66 x i16], [60 x i8] } { [66 x i16] [i16 4096, i16 0, i16 4096, i16 0, i16 4092, i16 4, i16 4088, i16 8, i16 4080, i16 16, i16 4068, i16 28, i16 4056, i16 40, i16 4036, i16 60, i16 4016, i16 80, i16 3992, i16 104, i16 3964, i16 132, i16 3928, i16 168, i16 3892, i16 204, i16 3848, i16 248, i16 3800, i16 296, i16 3748, i16 348, i16 3688, i16 408, i16 3624, i16 472, i16 3556, i16 540, i16 3480, i16 616, i16 3396, i16 700, i16 3308, i16 788, i16 3216, i16 880, i16 3116, i16 980, i16 3012, i16 1084, i16 2904, i16 1192, i16 2792, i16 1304, i16 2676, i16 1420, i16 2556, i16 1540, i16 2432, i16 1664, i16 2304, i16 1792, i16 2176, i16 1920, i16 2048, i16 2048], [60 x i8] zeroinitializer }, align 32
@___asan_gen_.1 = private unnamed_addr constant [24 x i8] c"filter_3tap_16p_upscale\00", align 1
@___asan_gen_.3 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.101, i32 57, i32 23 }
@___asan_gen_.4 = private unnamed_addr constant [20 x i8] c"filter_3tap_16p_116\00", align 1
@___asan_gen_.6 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.101, i32 78, i32 23 }
@___asan_gen_.7 = private unnamed_addr constant [20 x i8] c"filter_3tap_16p_149\00", align 1
@___asan_gen_.9 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.101, i32 99, i32 23 }
@___asan_gen_.10 = private unnamed_addr constant [20 x i8] c"filter_3tap_16p_183\00", align 1
@___asan_gen_.12 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.101, i32 120, i32 23 }
@___asan_gen_.13 = private unnamed_addr constant [24 x i8] c"filter_3tap_64p_upscale\00", align 1
@___asan_gen_.15 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.101, i32 270, i32 23 }
@___asan_gen_.16 = private unnamed_addr constant [20 x i8] c"filter_3tap_64p_116\00", align 1
@___asan_gen_.18 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.101, i32 315, i32 23 }
@___asan_gen_.19 = private unnamed_addr constant [20 x i8] c"filter_3tap_64p_149\00", align 1
@___asan_gen_.21 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.101, i32 360, i32 23 }
@___asan_gen_.22 = private unnamed_addr constant [20 x i8] c"filter_3tap_64p_183\00", align 1
@___asan_gen_.24 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.101, i32 405, i32 23 }
@___asan_gen_.25 = private unnamed_addr constant [24 x i8] c"filter_4tap_16p_upscale\00", align 1
@___asan_gen_.27 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.101, i32 141, i32 23 }
@___asan_gen_.28 = private unnamed_addr constant [20 x i8] c"filter_4tap_16p_116\00", align 1
@___asan_gen_.30 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.101, i32 162, i32 23 }
@___asan_gen_.31 = private unnamed_addr constant [20 x i8] c"filter_4tap_16p_149\00", align 1
@___asan_gen_.33 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.101, i32 183, i32 23 }
@___asan_gen_.34 = private unnamed_addr constant [20 x i8] c"filter_4tap_16p_183\00", align 1
@___asan_gen_.36 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.101, i32 204, i32 23 }
@___asan_gen_.37 = private unnamed_addr constant [24 x i8] c"filter_4tap_64p_upscale\00", align 1
@___asan_gen_.39 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.101, i32 450, i32 23 }
@___asan_gen_.40 = private unnamed_addr constant [20 x i8] c"filter_4tap_64p_116\00", align 1
@___asan_gen_.42 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.101, i32 495, i32 23 }
@___asan_gen_.43 = private unnamed_addr constant [20 x i8] c"filter_4tap_64p_149\00", align 1
@___asan_gen_.45 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.101, i32 540, i32 23 }
@___asan_gen_.46 = private unnamed_addr constant [20 x i8] c"filter_4tap_64p_183\00", align 1
@___asan_gen_.48 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.101, i32 585, i32 23 }
@___asan_gen_.49 = private unnamed_addr constant [24 x i8] c"filter_5tap_64p_upscale\00", align 1
@___asan_gen_.51 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.101, i32 630, i32 23 }
@___asan_gen_.52 = private unnamed_addr constant [20 x i8] c"filter_5tap_64p_116\00", align 1
@___asan_gen_.54 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.101, i32 675, i32 23 }
@___asan_gen_.55 = private unnamed_addr constant [20 x i8] c"filter_5tap_64p_149\00", align 1
@___asan_gen_.57 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.101, i32 720, i32 23 }
@___asan_gen_.58 = private unnamed_addr constant [20 x i8] c"filter_5tap_64p_183\00", align 1
@___asan_gen_.60 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.101, i32 765, i32 23 }
@___asan_gen_.61 = private unnamed_addr constant [24 x i8] c"filter_6tap_64p_upscale\00", align 1
@___asan_gen_.63 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.101, i32 810, i32 23 }
@___asan_gen_.64 = private unnamed_addr constant [20 x i8] c"filter_6tap_64p_116\00", align 1
@___asan_gen_.66 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.101, i32 855, i32 23 }
@___asan_gen_.67 = private unnamed_addr constant [20 x i8] c"filter_6tap_64p_149\00", align 1
@___asan_gen_.69 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.101, i32 900, i32 23 }
@___asan_gen_.70 = private unnamed_addr constant [20 x i8] c"filter_6tap_64p_183\00", align 1
@___asan_gen_.72 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.101, i32 945, i32 23 }
@___asan_gen_.73 = private unnamed_addr constant [24 x i8] c"filter_7tap_64p_upscale\00", align 1
@___asan_gen_.75 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.101, i32 990, i32 23 }
@___asan_gen_.76 = private unnamed_addr constant [20 x i8] c"filter_7tap_64p_116\00", align 1
@___asan_gen_.78 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.101, i32 1035, i32 23 }
@___asan_gen_.79 = private unnamed_addr constant [20 x i8] c"filter_7tap_64p_149\00", align 1
@___asan_gen_.81 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.101, i32 1080, i32 23 }
@___asan_gen_.82 = private unnamed_addr constant [20 x i8] c"filter_7tap_64p_183\00", align 1
@___asan_gen_.84 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.101, i32 1125, i32 23 }
@___asan_gen_.85 = private unnamed_addr constant [24 x i8] c"filter_8tap_64p_upscale\00", align 1
@___asan_gen_.87 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.101, i32 1170, i32 23 }
@___asan_gen_.88 = private unnamed_addr constant [20 x i8] c"filter_8tap_64p_116\00", align 1
@___asan_gen_.90 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.101, i32 1215, i32 23 }
@___asan_gen_.91 = private unnamed_addr constant [20 x i8] c"filter_8tap_64p_149\00", align 1
@___asan_gen_.93 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.101, i32 1260, i32 23 }
@___asan_gen_.94 = private unnamed_addr constant [20 x i8] c"filter_8tap_64p_183\00", align 1
@___asan_gen_.96 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.101, i32 1305, i32 23 }
@___asan_gen_.97 = private unnamed_addr constant [16 x i8] c"filter_2tap_16p\00", align 1
@___asan_gen_.99 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.101, i32 36, i32 23 }
@___asan_gen_.100 = private unnamed_addr constant [16 x i8] c"filter_2tap_64p\00", align 1
@___asan_gen_.101 = private constant [66 x i8] c"../drivers/gpu/drm/amd/amdgpu/../display/dc/dce/dce_scl_filters.c\00", align 1
@___asan_gen_.102 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.101, i32 225, i32 23 }
@llvm.compiler.used = appending global [34 x ptr] [ptr @filter_3tap_16p_upscale, ptr @filter_3tap_16p_116, ptr @filter_3tap_16p_149, ptr @filter_3tap_16p_183, ptr @filter_3tap_64p_upscale, ptr @filter_3tap_64p_116, ptr @filter_3tap_64p_149, ptr @filter_3tap_64p_183, ptr @filter_4tap_16p_upscale, ptr @filter_4tap_16p_116, ptr @filter_4tap_16p_149, ptr @filter_4tap_16p_183, ptr @filter_4tap_64p_upscale, ptr @filter_4tap_64p_116, ptr @filter_4tap_64p_149, ptr @filter_4tap_64p_183, ptr @filter_5tap_64p_upscale, ptr @filter_5tap_64p_116, ptr @filter_5tap_64p_149, ptr @filter_5tap_64p_183, ptr @filter_6tap_64p_upscale, ptr @filter_6tap_64p_116, ptr @filter_6tap_64p_149, ptr @filter_6tap_64p_183, ptr @filter_7tap_64p_upscale, ptr @filter_7tap_64p_116, ptr @filter_7tap_64p_149, ptr @filter_7tap_64p_183, ptr @filter_8tap_64p_upscale, ptr @filter_8tap_64p_116, ptr @filter_8tap_64p_149, ptr @filter_8tap_64p_183, ptr @filter_2tap_16p, ptr @filter_2tap_64p], section "llvm.metadata"
@0 = internal global [34 x { i32, i32, i32, i32, i32, i32, i32, i32 }] [{ i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @filter_3tap_16p_upscale to i32), i32 54, i32 96, i32 ptrtoint (ptr @___asan_gen_.1 to i32), i32 ptrtoint (ptr @___asan_gen_.101 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.3 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @filter_3tap_16p_116 to i32), i32 54, i32 96, i32 ptrtoint (ptr @___asan_gen_.4 to i32), i32 ptrtoint (ptr @___asan_gen_.101 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.6 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @filter_3tap_16p_149 to i32), i32 54, i32 96, i32 ptrtoint (ptr @___asan_gen_.7 to i32), i32 ptrtoint (ptr @___asan_gen_.101 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.9 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @filter_3tap_16p_183 to i32), i32 54, i32 96, i32 ptrtoint (ptr @___asan_gen_.10 to i32), i32 ptrtoint (ptr @___asan_gen_.101 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.12 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @filter_3tap_64p_upscale to i32), i32 198, i32 256, i32 ptrtoint (ptr @___asan_gen_.13 to i32), i32 ptrtoint (ptr @___asan_gen_.101 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.15 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @filter_3tap_64p_116 to i32), i32 198, i32 256, i32 ptrtoint (ptr @___asan_gen_.16 to i32), i32 ptrtoint (ptr @___asan_gen_.101 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.18 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @filter_3tap_64p_149 to i32), i32 198, i32 256, i32 ptrtoint (ptr @___asan_gen_.19 to i32), i32 ptrtoint (ptr @___asan_gen_.101 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.21 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @filter_3tap_64p_183 to i32), i32 198, i32 256, i32 ptrtoint (ptr @___asan_gen_.22 to i32), i32 ptrtoint (ptr @___asan_gen_.101 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.24 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @filter_4tap_16p_upscale to i32), i32 72, i32 128, i32 ptrtoint (ptr @___asan_gen_.25 to i32), i32 ptrtoint (ptr @___asan_gen_.101 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.27 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @filter_4tap_16p_116 to i32), i32 72, i32 128, i32 ptrtoint (ptr @___asan_gen_.28 to i32), i32 ptrtoint (ptr @___asan_gen_.101 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.30 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @filter_4tap_16p_149 to i32), i32 72, i32 128, i32 ptrtoint (ptr @___asan_gen_.31 to i32), i32 ptrtoint (ptr @___asan_gen_.101 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.33 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @filter_4tap_16p_183 to i32), i32 72, i32 128, i32 ptrtoint (ptr @___asan_gen_.34 to i32), i32 ptrtoint (ptr @___asan_gen_.101 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.36 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @filter_4tap_64p_upscale to i32), i32 264, i32 352, i32 ptrtoint (ptr @___asan_gen_.37 to i32), i32 ptrtoint (ptr @___asan_gen_.101 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.39 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @filter_4tap_64p_116 to i32), i32 264, i32 352, i32 ptrtoint (ptr @___asan_gen_.40 to i32), i32 ptrtoint (ptr @___asan_gen_.101 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.42 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @filter_4tap_64p_149 to i32), i32 264, i32 352, i32 ptrtoint (ptr @___asan_gen_.43 to i32), i32 ptrtoint (ptr @___asan_gen_.101 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.45 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @filter_4tap_64p_183 to i32), i32 264, i32 352, i32 ptrtoint (ptr @___asan_gen_.46 to i32), i32 ptrtoint (ptr @___asan_gen_.101 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.48 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @filter_5tap_64p_upscale to i32), i32 330, i32 416, i32 ptrtoint (ptr @___asan_gen_.49 to i32), i32 ptrtoint (ptr @___asan_gen_.101 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.51 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @filter_5tap_64p_116 to i32), i32 330, i32 416, i32 ptrtoint (ptr @___asan_gen_.52 to i32), i32 ptrtoint (ptr @___asan_gen_.101 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.54 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @filter_5tap_64p_149 to i32), i32 330, i32 416, i32 ptrtoint (ptr @___asan_gen_.55 to i32), i32 ptrtoint (ptr @___asan_gen_.101 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.57 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @filter_5tap_64p_183 to i32), i32 330, i32 416, i32 ptrtoint (ptr @___asan_gen_.58 to i32), i32 ptrtoint (ptr @___asan_gen_.101 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.60 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @filter_6tap_64p_upscale to i32), i32 396, i32 512, i32 ptrtoint (ptr @___asan_gen_.61 to i32), i32 ptrtoint (ptr @___asan_gen_.101 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.63 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @filter_6tap_64p_116 to i32), i32 396, i32 512, i32 ptrtoint (ptr @___asan_gen_.64 to i32), i32 ptrtoint (ptr @___asan_gen_.101 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.66 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @filter_6tap_64p_149 to i32), i32 396, i32 512, i32 ptrtoint (ptr @___asan_gen_.67 to i32), i32 ptrtoint (ptr @___asan_gen_.101 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.69 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @filter_6tap_64p_183 to i32), i32 396, i32 512, i32 ptrtoint (ptr @___asan_gen_.70 to i32), i32 ptrtoint (ptr @___asan_gen_.101 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.72 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @filter_7tap_64p_upscale to i32), i32 462, i32 576, i32 ptrtoint (ptr @___asan_gen_.73 to i32), i32 ptrtoint (ptr @___asan_gen_.101 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.75 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @filter_7tap_64p_116 to i32), i32 462, i32 576, i32 ptrtoint (ptr @___asan_gen_.76 to i32), i32 ptrtoint (ptr @___asan_gen_.101 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.78 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @filter_7tap_64p_149 to i32), i32 462, i32 576, i32 ptrtoint (ptr @___asan_gen_.79 to i32), i32 ptrtoint (ptr @___asan_gen_.101 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.81 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @filter_7tap_64p_183 to i32), i32 462, i32 576, i32 ptrtoint (ptr @___asan_gen_.82 to i32), i32 ptrtoint (ptr @___asan_gen_.101 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.84 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @filter_8tap_64p_upscale to i32), i32 528, i32 672, i32 ptrtoint (ptr @___asan_gen_.85 to i32), i32 ptrtoint (ptr @___asan_gen_.101 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.87 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @filter_8tap_64p_116 to i32), i32 528, i32 672, i32 ptrtoint (ptr @___asan_gen_.88 to i32), i32 ptrtoint (ptr @___asan_gen_.101 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.90 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @filter_8tap_64p_149 to i32), i32 528, i32 672, i32 ptrtoint (ptr @___asan_gen_.91 to i32), i32 ptrtoint (ptr @___asan_gen_.101 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.93 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @filter_8tap_64p_183 to i32), i32 528, i32 672, i32 ptrtoint (ptr @___asan_gen_.94 to i32), i32 ptrtoint (ptr @___asan_gen_.101 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.96 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @filter_2tap_16p to i32), i32 36, i32 96, i32 ptrtoint (ptr @___asan_gen_.97 to i32), i32 ptrtoint (ptr @___asan_gen_.101 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.99 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @filter_2tap_64p to i32), i32 132, i32 192, i32 ptrtoint (ptr @___asan_gen_.100 to i32), i32 ptrtoint (ptr @___asan_gen_.101 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.102 to i32), i32 -1 }]
@llvm.used = appending global [2 x ptr] [ptr @asan.module_ctor, ptr @asan.module_dtor], section "llvm.metadata"
@llvm.global_ctors = appending global [1 x { i32, ptr, ptr }] [{ i32, ptr, ptr } { i32 1, ptr @asan.module_ctor, ptr null }]
@llvm.global_dtors = appending global [1 x { i32, ptr, ptr }] [{ i32, ptr, ptr } { i32 1, ptr @asan.module_dtor, ptr null }]

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local nonnull ptr @get_filter_3tap_16p([1 x i64] %ratio.coerce) local_unnamed_addr #0 align 64 {
entry:
  %tmp = alloca %struct.fixed31_32, align 8
  %tmp7 = alloca %struct.fixed31_32, align 8
  call void @__sanitizer_cov_trace_pc() #5
  call void @llvm.arm.gnu.eabi.mcount()
  %ratio.coerce.fca.0.extract = extractvalue [1 x i64] %ratio.coerce, 0
  call void @__sanitizer_cov_trace_const_cmp8(i64 4294967296, i64 %ratio.coerce.fca.0.extract)
  %cmp = icmp slt i64 %ratio.coerce.fca.0.extract, 4294967296
  br i1 %cmp, label %entry.return_crit_edge, label %if.else

entry.return_crit_edge:                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #5
  br label %return

if.else:                                          ; preds = %entry
  call void @dc_fixpt_from_fraction(ptr nonnull sret(%struct.fixed31_32) align 8 %tmp, i64 noundef 4, i64 noundef 3) #3
  %0 = ptrtoint ptr %tmp to i32
  call void @__asan_load8_noabort(i32 %0)
  %1 = load i64, ptr %tmp, align 8
  call void @__sanitizer_cov_trace_cmp8(i64 %ratio.coerce.fca.0.extract, i64 %1)
  %cmp3 = icmp slt i64 %ratio.coerce.fca.0.extract, %1
  br i1 %cmp3, label %if.else.return_crit_edge, label %if.else5

if.else.return_crit_edge:                         ; preds = %if.else
  call void @__sanitizer_cov_trace_pc() #5
  br label %return

if.else5:                                         ; preds = %if.else
  call void @__sanitizer_cov_trace_pc() #5
  call void @dc_fixpt_from_fraction(ptr nonnull sret(%struct.fixed31_32) align 8 %tmp7, i64 noundef 5, i64 noundef 3) #3
  %2 = ptrtoint ptr %tmp7 to i32
  call void @__asan_load8_noabort(i32 %2)
  %3 = load i64, ptr %tmp7, align 8
  call void @__sanitizer_cov_trace_cmp8(i64 %ratio.coerce.fca.0.extract, i64 %3)
  %cmp9 = icmp slt i64 %ratio.coerce.fca.0.extract, %3
  %filter_3tap_16p_149.filter_3tap_16p_183 = select i1 %cmp9, ptr @filter_3tap_16p_149, ptr @filter_3tap_16p_183
  br label %return

return:                                           ; preds = %if.else5, %if.else.return_crit_edge, %entry.return_crit_edge
  %retval.0 = phi ptr [ @filter_3tap_16p_upscale, %entry.return_crit_edge ], [ @filter_3tap_16p_116, %if.else.return_crit_edge ], [ %filter_3tap_16p_149.filter_3tap_16p_183, %if.else5 ]
  ret ptr %retval.0
}

; Function Attrs: null_pointer_is_valid
declare dso_local void @dc_fixpt_from_fraction(ptr sret(%struct.fixed31_32) align 8, i64 noundef, i64 noundef) local_unnamed_addr #1

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local nonnull ptr @get_filter_3tap_64p([1 x i64] %ratio.coerce) local_unnamed_addr #0 align 64 {
entry:
  %tmp = alloca %struct.fixed31_32, align 8
  %tmp7 = alloca %struct.fixed31_32, align 8
  call void @__sanitizer_cov_trace_pc() #5
  call void @llvm.arm.gnu.eabi.mcount()
  %ratio.coerce.fca.0.extract = extractvalue [1 x i64] %ratio.coerce, 0
  call void @__sanitizer_cov_trace_const_cmp8(i64 4294967296, i64 %ratio.coerce.fca.0.extract)
  %cmp = icmp slt i64 %ratio.coerce.fca.0.extract, 4294967296
  br i1 %cmp, label %entry.return_crit_edge, label %if.else

entry.return_crit_edge:                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #5
  br label %return

if.else:                                          ; preds = %entry
  call void @dc_fixpt_from_fraction(ptr nonnull sret(%struct.fixed31_32) align 8 %tmp, i64 noundef 4, i64 noundef 3) #3
  %0 = ptrtoint ptr %tmp to i32
  call void @__asan_load8_noabort(i32 %0)
  %1 = load i64, ptr %tmp, align 8
  call void @__sanitizer_cov_trace_cmp8(i64 %ratio.coerce.fca.0.extract, i64 %1)
  %cmp3 = icmp slt i64 %ratio.coerce.fca.0.extract, %1
  br i1 %cmp3, label %if.else.return_crit_edge, label %if.else5

if.else.return_crit_edge:                         ; preds = %if.else
  call void @__sanitizer_cov_trace_pc() #5
  br label %return

if.else5:                                         ; preds = %if.else
  call void @__sanitizer_cov_trace_pc() #5
  call void @dc_fixpt_from_fraction(ptr nonnull sret(%struct.fixed31_32) align 8 %tmp7, i64 noundef 5, i64 noundef 3) #3
  %2 = ptrtoint ptr %tmp7 to i32
  call void @__asan_load8_noabort(i32 %2)
  %3 = load i64, ptr %tmp7, align 8
  call void @__sanitizer_cov_trace_cmp8(i64 %ratio.coerce.fca.0.extract, i64 %3)
  %cmp9 = icmp slt i64 %ratio.coerce.fca.0.extract, %3
  %filter_3tap_64p_149.filter_3tap_64p_183 = select i1 %cmp9, ptr @filter_3tap_64p_149, ptr @filter_3tap_64p_183
  br label %return

return:                                           ; preds = %if.else5, %if.else.return_crit_edge, %entry.return_crit_edge
  %retval.0 = phi ptr [ @filter_3tap_64p_upscale, %entry.return_crit_edge ], [ @filter_3tap_64p_116, %if.else.return_crit_edge ], [ %filter_3tap_64p_149.filter_3tap_64p_183, %if.else5 ]
  ret ptr %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local nonnull ptr @get_filter_4tap_16p([1 x i64] %ratio.coerce) local_unnamed_addr #0 align 64 {
entry:
  %tmp = alloca %struct.fixed31_32, align 8
  %tmp7 = alloca %struct.fixed31_32, align 8
  call void @__sanitizer_cov_trace_pc() #5
  call void @llvm.arm.gnu.eabi.mcount()
  %ratio.coerce.fca.0.extract = extractvalue [1 x i64] %ratio.coerce, 0
  call void @__sanitizer_cov_trace_const_cmp8(i64 4294967296, i64 %ratio.coerce.fca.0.extract)
  %cmp = icmp slt i64 %ratio.coerce.fca.0.extract, 4294967296
  br i1 %cmp, label %entry.return_crit_edge, label %if.else

entry.return_crit_edge:                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #5
  br label %return

if.else:                                          ; preds = %entry
  call void @dc_fixpt_from_fraction(ptr nonnull sret(%struct.fixed31_32) align 8 %tmp, i64 noundef 4, i64 noundef 3) #3
  %0 = ptrtoint ptr %tmp to i32
  call void @__asan_load8_noabort(i32 %0)
  %1 = load i64, ptr %tmp, align 8
  call void @__sanitizer_cov_trace_cmp8(i64 %ratio.coerce.fca.0.extract, i64 %1)
  %cmp3 = icmp slt i64 %ratio.coerce.fca.0.extract, %1
  br i1 %cmp3, label %if.else.return_crit_edge, label %if.else5

if.else.return_crit_edge:                         ; preds = %if.else
  call void @__sanitizer_cov_trace_pc() #5
  br label %return

if.else5:                                         ; preds = %if.else
  call void @__sanitizer_cov_trace_pc() #5
  call void @dc_fixpt_from_fraction(ptr nonnull sret(%struct.fixed31_32) align 8 %tmp7, i64 noundef 5, i64 noundef 3) #3
  %2 = ptrtoint ptr %tmp7 to i32
  call void @__asan_load8_noabort(i32 %2)
  %3 = load i64, ptr %tmp7, align 8
  call void @__sanitizer_cov_trace_cmp8(i64 %ratio.coerce.fca.0.extract, i64 %3)
  %cmp9 = icmp slt i64 %ratio.coerce.fca.0.extract, %3
  %filter_4tap_16p_149.filter_4tap_16p_183 = select i1 %cmp9, ptr @filter_4tap_16p_149, ptr @filter_4tap_16p_183
  br label %return

return:                                           ; preds = %if.else5, %if.else.return_crit_edge, %entry.return_crit_edge
  %retval.0 = phi ptr [ @filter_4tap_16p_upscale, %entry.return_crit_edge ], [ @filter_4tap_16p_116, %if.else.return_crit_edge ], [ %filter_4tap_16p_149.filter_4tap_16p_183, %if.else5 ]
  ret ptr %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local nonnull ptr @get_filter_4tap_64p([1 x i64] %ratio.coerce) local_unnamed_addr #0 align 64 {
entry:
  %tmp = alloca %struct.fixed31_32, align 8
  %tmp7 = alloca %struct.fixed31_32, align 8
  call void @__sanitizer_cov_trace_pc() #5
  call void @llvm.arm.gnu.eabi.mcount()
  %ratio.coerce.fca.0.extract = extractvalue [1 x i64] %ratio.coerce, 0
  call void @__sanitizer_cov_trace_const_cmp8(i64 4294967296, i64 %ratio.coerce.fca.0.extract)
  %cmp = icmp slt i64 %ratio.coerce.fca.0.extract, 4294967296
  br i1 %cmp, label %entry.return_crit_edge, label %if.else

entry.return_crit_edge:                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #5
  br label %return

if.else:                                          ; preds = %entry
  call void @dc_fixpt_from_fraction(ptr nonnull sret(%struct.fixed31_32) align 8 %tmp, i64 noundef 4, i64 noundef 3) #3
  %0 = ptrtoint ptr %tmp to i32
  call void @__asan_load8_noabort(i32 %0)
  %1 = load i64, ptr %tmp, align 8
  call void @__sanitizer_cov_trace_cmp8(i64 %ratio.coerce.fca.0.extract, i64 %1)
  %cmp3 = icmp slt i64 %ratio.coerce.fca.0.extract, %1
  br i1 %cmp3, label %if.else.return_crit_edge, label %if.else5

if.else.return_crit_edge:                         ; preds = %if.else
  call void @__sanitizer_cov_trace_pc() #5
  br label %return

if.else5:                                         ; preds = %if.else
  call void @__sanitizer_cov_trace_pc() #5
  call void @dc_fixpt_from_fraction(ptr nonnull sret(%struct.fixed31_32) align 8 %tmp7, i64 noundef 5, i64 noundef 3) #3
  %2 = ptrtoint ptr %tmp7 to i32
  call void @__asan_load8_noabort(i32 %2)
  %3 = load i64, ptr %tmp7, align 8
  call void @__sanitizer_cov_trace_cmp8(i64 %ratio.coerce.fca.0.extract, i64 %3)
  %cmp9 = icmp slt i64 %ratio.coerce.fca.0.extract, %3
  %filter_4tap_64p_149.filter_4tap_64p_183 = select i1 %cmp9, ptr @filter_4tap_64p_149, ptr @filter_4tap_64p_183
  br label %return

return:                                           ; preds = %if.else5, %if.else.return_crit_edge, %entry.return_crit_edge
  %retval.0 = phi ptr [ @filter_4tap_64p_upscale, %entry.return_crit_edge ], [ @filter_4tap_64p_116, %if.else.return_crit_edge ], [ %filter_4tap_64p_149.filter_4tap_64p_183, %if.else5 ]
  ret ptr %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local nonnull ptr @get_filter_5tap_64p([1 x i64] %ratio.coerce) local_unnamed_addr #0 align 64 {
entry:
  %tmp = alloca %struct.fixed31_32, align 8
  %tmp7 = alloca %struct.fixed31_32, align 8
  call void @__sanitizer_cov_trace_pc() #5
  call void @llvm.arm.gnu.eabi.mcount()
  %ratio.coerce.fca.0.extract = extractvalue [1 x i64] %ratio.coerce, 0
  call void @__sanitizer_cov_trace_const_cmp8(i64 4294967296, i64 %ratio.coerce.fca.0.extract)
  %cmp = icmp slt i64 %ratio.coerce.fca.0.extract, 4294967296
  br i1 %cmp, label %entry.return_crit_edge, label %if.else

entry.return_crit_edge:                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #5
  br label %return

if.else:                                          ; preds = %entry
  call void @dc_fixpt_from_fraction(ptr nonnull sret(%struct.fixed31_32) align 8 %tmp, i64 noundef 4, i64 noundef 3) #3
  %0 = ptrtoint ptr %tmp to i32
  call void @__asan_load8_noabort(i32 %0)
  %1 = load i64, ptr %tmp, align 8
  call void @__sanitizer_cov_trace_cmp8(i64 %ratio.coerce.fca.0.extract, i64 %1)
  %cmp3 = icmp slt i64 %ratio.coerce.fca.0.extract, %1
  br i1 %cmp3, label %if.else.return_crit_edge, label %if.else5

if.else.return_crit_edge:                         ; preds = %if.else
  call void @__sanitizer_cov_trace_pc() #5
  br label %return

if.else5:                                         ; preds = %if.else
  call void @__sanitizer_cov_trace_pc() #5
  call void @dc_fixpt_from_fraction(ptr nonnull sret(%struct.fixed31_32) align 8 %tmp7, i64 noundef 5, i64 noundef 3) #3
  %2 = ptrtoint ptr %tmp7 to i32
  call void @__asan_load8_noabort(i32 %2)
  %3 = load i64, ptr %tmp7, align 8
  call void @__sanitizer_cov_trace_cmp8(i64 %ratio.coerce.fca.0.extract, i64 %3)
  %cmp9 = icmp slt i64 %ratio.coerce.fca.0.extract, %3
  %filter_5tap_64p_149.filter_5tap_64p_183 = select i1 %cmp9, ptr @filter_5tap_64p_149, ptr @filter_5tap_64p_183
  br label %return

return:                                           ; preds = %if.else5, %if.else.return_crit_edge, %entry.return_crit_edge
  %retval.0 = phi ptr [ @filter_5tap_64p_upscale, %entry.return_crit_edge ], [ @filter_5tap_64p_116, %if.else.return_crit_edge ], [ %filter_5tap_64p_149.filter_5tap_64p_183, %if.else5 ]
  ret ptr %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local nonnull ptr @get_filter_6tap_64p([1 x i64] %ratio.coerce) local_unnamed_addr #0 align 64 {
entry:
  %tmp = alloca %struct.fixed31_32, align 8
  %tmp7 = alloca %struct.fixed31_32, align 8
  call void @__sanitizer_cov_trace_pc() #5
  call void @llvm.arm.gnu.eabi.mcount()
  %ratio.coerce.fca.0.extract = extractvalue [1 x i64] %ratio.coerce, 0
  call void @__sanitizer_cov_trace_const_cmp8(i64 4294967296, i64 %ratio.coerce.fca.0.extract)
  %cmp = icmp slt i64 %ratio.coerce.fca.0.extract, 4294967296
  br i1 %cmp, label %entry.return_crit_edge, label %if.else

entry.return_crit_edge:                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #5
  br label %return

if.else:                                          ; preds = %entry
  call void @dc_fixpt_from_fraction(ptr nonnull sret(%struct.fixed31_32) align 8 %tmp, i64 noundef 4, i64 noundef 3) #3
  %0 = ptrtoint ptr %tmp to i32
  call void @__asan_load8_noabort(i32 %0)
  %1 = load i64, ptr %tmp, align 8
  call void @__sanitizer_cov_trace_cmp8(i64 %ratio.coerce.fca.0.extract, i64 %1)
  %cmp3 = icmp slt i64 %ratio.coerce.fca.0.extract, %1
  br i1 %cmp3, label %if.else.return_crit_edge, label %if.else5

if.else.return_crit_edge:                         ; preds = %if.else
  call void @__sanitizer_cov_trace_pc() #5
  br label %return

if.else5:                                         ; preds = %if.else
  call void @__sanitizer_cov_trace_pc() #5
  call void @dc_fixpt_from_fraction(ptr nonnull sret(%struct.fixed31_32) align 8 %tmp7, i64 noundef 5, i64 noundef 3) #3
  %2 = ptrtoint ptr %tmp7 to i32
  call void @__asan_load8_noabort(i32 %2)
  %3 = load i64, ptr %tmp7, align 8
  call void @__sanitizer_cov_trace_cmp8(i64 %ratio.coerce.fca.0.extract, i64 %3)
  %cmp9 = icmp slt i64 %ratio.coerce.fca.0.extract, %3
  %filter_6tap_64p_149.filter_6tap_64p_183 = select i1 %cmp9, ptr @filter_6tap_64p_149, ptr @filter_6tap_64p_183
  br label %return

return:                                           ; preds = %if.else5, %if.else.return_crit_edge, %entry.return_crit_edge
  %retval.0 = phi ptr [ @filter_6tap_64p_upscale, %entry.return_crit_edge ], [ @filter_6tap_64p_116, %if.else.return_crit_edge ], [ %filter_6tap_64p_149.filter_6tap_64p_183, %if.else5 ]
  ret ptr %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local nonnull ptr @get_filter_7tap_64p([1 x i64] %ratio.coerce) local_unnamed_addr #0 align 64 {
entry:
  %tmp = alloca %struct.fixed31_32, align 8
  %tmp7 = alloca %struct.fixed31_32, align 8
  call void @__sanitizer_cov_trace_pc() #5
  call void @llvm.arm.gnu.eabi.mcount()
  %ratio.coerce.fca.0.extract = extractvalue [1 x i64] %ratio.coerce, 0
  call void @__sanitizer_cov_trace_const_cmp8(i64 4294967296, i64 %ratio.coerce.fca.0.extract)
  %cmp = icmp slt i64 %ratio.coerce.fca.0.extract, 4294967296
  br i1 %cmp, label %entry.return_crit_edge, label %if.else

entry.return_crit_edge:                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #5
  br label %return

if.else:                                          ; preds = %entry
  call void @dc_fixpt_from_fraction(ptr nonnull sret(%struct.fixed31_32) align 8 %tmp, i64 noundef 4, i64 noundef 3) #3
  %0 = ptrtoint ptr %tmp to i32
  call void @__asan_load8_noabort(i32 %0)
  %1 = load i64, ptr %tmp, align 8
  call void @__sanitizer_cov_trace_cmp8(i64 %ratio.coerce.fca.0.extract, i64 %1)
  %cmp3 = icmp slt i64 %ratio.coerce.fca.0.extract, %1
  br i1 %cmp3, label %if.else.return_crit_edge, label %if.else5

if.else.return_crit_edge:                         ; preds = %if.else
  call void @__sanitizer_cov_trace_pc() #5
  br label %return

if.else5:                                         ; preds = %if.else
  call void @__sanitizer_cov_trace_pc() #5
  call void @dc_fixpt_from_fraction(ptr nonnull sret(%struct.fixed31_32) align 8 %tmp7, i64 noundef 5, i64 noundef 3) #3
  %2 = ptrtoint ptr %tmp7 to i32
  call void @__asan_load8_noabort(i32 %2)
  %3 = load i64, ptr %tmp7, align 8
  call void @__sanitizer_cov_trace_cmp8(i64 %ratio.coerce.fca.0.extract, i64 %3)
  %cmp9 = icmp slt i64 %ratio.coerce.fca.0.extract, %3
  %filter_7tap_64p_149.filter_7tap_64p_183 = select i1 %cmp9, ptr @filter_7tap_64p_149, ptr @filter_7tap_64p_183
  br label %return

return:                                           ; preds = %if.else5, %if.else.return_crit_edge, %entry.return_crit_edge
  %retval.0 = phi ptr [ @filter_7tap_64p_upscale, %entry.return_crit_edge ], [ @filter_7tap_64p_116, %if.else.return_crit_edge ], [ %filter_7tap_64p_149.filter_7tap_64p_183, %if.else5 ]
  ret ptr %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local nonnull ptr @get_filter_8tap_64p([1 x i64] %ratio.coerce) local_unnamed_addr #0 align 64 {
entry:
  %tmp = alloca %struct.fixed31_32, align 8
  %tmp7 = alloca %struct.fixed31_32, align 8
  call void @__sanitizer_cov_trace_pc() #5
  call void @llvm.arm.gnu.eabi.mcount()
  %ratio.coerce.fca.0.extract = extractvalue [1 x i64] %ratio.coerce, 0
  call void @__sanitizer_cov_trace_const_cmp8(i64 4294967296, i64 %ratio.coerce.fca.0.extract)
  %cmp = icmp slt i64 %ratio.coerce.fca.0.extract, 4294967296
  br i1 %cmp, label %entry.return_crit_edge, label %if.else

entry.return_crit_edge:                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #5
  br label %return

if.else:                                          ; preds = %entry
  call void @dc_fixpt_from_fraction(ptr nonnull sret(%struct.fixed31_32) align 8 %tmp, i64 noundef 4, i64 noundef 3) #3
  %0 = ptrtoint ptr %tmp to i32
  call void @__asan_load8_noabort(i32 %0)
  %1 = load i64, ptr %tmp, align 8
  call void @__sanitizer_cov_trace_cmp8(i64 %ratio.coerce.fca.0.extract, i64 %1)
  %cmp3 = icmp slt i64 %ratio.coerce.fca.0.extract, %1
  br i1 %cmp3, label %if.else.return_crit_edge, label %if.else5

if.else.return_crit_edge:                         ; preds = %if.else
  call void @__sanitizer_cov_trace_pc() #5
  br label %return

if.else5:                                         ; preds = %if.else
  call void @__sanitizer_cov_trace_pc() #5
  call void @dc_fixpt_from_fraction(ptr nonnull sret(%struct.fixed31_32) align 8 %tmp7, i64 noundef 5, i64 noundef 3) #3
  %2 = ptrtoint ptr %tmp7 to i32
  call void @__asan_load8_noabort(i32 %2)
  %3 = load i64, ptr %tmp7, align 8
  call void @__sanitizer_cov_trace_cmp8(i64 %ratio.coerce.fca.0.extract, i64 %3)
  %cmp9 = icmp slt i64 %ratio.coerce.fca.0.extract, %3
  %filter_8tap_64p_149.filter_8tap_64p_183 = select i1 %cmp9, ptr @filter_8tap_64p_149, ptr @filter_8tap_64p_183
  br label %return

return:                                           ; preds = %if.else5, %if.else.return_crit_edge, %entry.return_crit_edge
  %retval.0 = phi ptr [ @filter_8tap_64p_upscale, %entry.return_crit_edge ], [ @filter_8tap_64p_116, %if.else.return_crit_edge ], [ %filter_8tap_64p_149.filter_8tap_64p_183, %if.else5 ]
  ret ptr %retval.0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind null_pointer_is_valid readnone sanitize_address sspstrong willreturn uwtable(sync)
define dso_local nonnull ptr @get_filter_2tap_16p() local_unnamed_addr #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #5
  call void @llvm.arm.gnu.eabi.mcount()
  ret ptr @filter_2tap_16p
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind null_pointer_is_valid readnone sanitize_address sspstrong willreturn uwtable(sync)
define dso_local nonnull ptr @get_filter_2tap_64p() local_unnamed_addr #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #5
  call void @llvm.arm.gnu.eabi.mcount()
  ret ptr @filter_2tap_64p
}

; Function Attrs: nounwind
declare void @llvm.arm.gnu.eabi.mcount() #3

declare void @__sanitizer_cov_trace_cmp8(i64, i64)

declare void @__sanitizer_cov_trace_const_cmp8(i64, i64)

declare void @__sanitizer_cov_trace_pc()

declare void @__asan_load8_noabort(i32)

declare void @__asan_register_globals(i32, i32)

declare void @__asan_unregister_globals(i32, i32)

; Function Attrs: nounwind uwtable(sync)
define internal void @asan.module_ctor() #4 {
  call void @__asan_register_globals(i32 ptrtoint (ptr @0 to i32), i32 34)
  ret void
}

; Function Attrs: nounwind uwtable(sync)
define internal void @asan.module_dtor() #4 {
  call void @__asan_unregister_globals(i32 ptrtoint (ptr @0 to i32), i32 34)
  ret void
}

attributes #0 = { nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync) "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="mpcore" "target-features"="+armv6k,+dsp,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" "warn-stack-size"="1024" }
attributes #1 = { null_pointer_is_valid "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="mpcore" "target-features"="+armv6k,+dsp,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" }
attributes #2 = { mustprogress nofree norecurse nosync nounwind null_pointer_is_valid readnone sanitize_address sspstrong willreturn uwtable(sync) "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="mpcore" "target-features"="+armv6k,+dsp,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" "warn-stack-size"="1024" }
attributes #3 = { nounwind }
attributes #4 = { nounwind uwtable(sync) "frame-pointer"="all" }
attributes #5 = { nomerge }

!llvm.asan.globals = !{!0, !2, !4, !6, !8, !10, !12, !14, !16, !18, !20, !22, !24, !26, !28, !30, !32, !34, !36, !38, !40, !42, !44, !46, !48, !50, !52, !54, !56, !58, !60, !62, !64, !66, !68}
!llvm.module.flags = !{!70, !71, !72, !73, !74, !75, !76, !77}
!llvm.ident = !{!78}

!0 = distinct !{null, !1, !"dc_fixpt_one", i1 false, i1 false}
!1 = !{!"../drivers/gpu/drm/amd/amdgpu/../display/include/fixed31_32.h", i32 70, i32 32}
!2 = !{ptr @filter_3tap_16p_upscale, !3, !"filter_3tap_16p_upscale", i1 false, i1 false}
!3 = !{!"../drivers/gpu/drm/amd/amdgpu/../display/dc/dce/dce_scl_filters.c", i32 57, i32 23}
!4 = !{ptr @filter_3tap_16p_116, !5, !"filter_3tap_16p_116", i1 false, i1 false}
!5 = !{!"../drivers/gpu/drm/amd/amdgpu/../display/dc/dce/dce_scl_filters.c", i32 78, i32 23}
!6 = !{ptr @filter_3tap_16p_149, !7, !"filter_3tap_16p_149", i1 false, i1 false}
!7 = !{!"../drivers/gpu/drm/amd/amdgpu/../display/dc/dce/dce_scl_filters.c", i32 99, i32 23}
!8 = !{ptr @filter_3tap_16p_183, !9, !"filter_3tap_16p_183", i1 false, i1 false}
!9 = !{!"../drivers/gpu/drm/amd/amdgpu/../display/dc/dce/dce_scl_filters.c", i32 120, i32 23}
!10 = !{ptr @filter_3tap_64p_upscale, !11, !"filter_3tap_64p_upscale", i1 false, i1 false}
!11 = !{!"../drivers/gpu/drm/amd/amdgpu/../display/dc/dce/dce_scl_filters.c", i32 270, i32 23}
!12 = !{ptr @filter_3tap_64p_116, !13, !"filter_3tap_64p_116", i1 false, i1 false}
!13 = !{!"../drivers/gpu/drm/amd/amdgpu/../display/dc/dce/dce_scl_filters.c", i32 315, i32 23}
!14 = !{ptr @filter_3tap_64p_149, !15, !"filter_3tap_64p_149", i1 false, i1 false}
!15 = !{!"../drivers/gpu/drm/amd/amdgpu/../display/dc/dce/dce_scl_filters.c", i32 360, i32 23}
!16 = !{ptr @filter_3tap_64p_183, !17, !"filter_3tap_64p_183", i1 false, i1 false}
!17 = !{!"../drivers/gpu/drm/amd/amdgpu/../display/dc/dce/dce_scl_filters.c", i32 405, i32 23}
!18 = !{ptr @filter_4tap_16p_upscale, !19, !"filter_4tap_16p_upscale", i1 false, i1 false}
!19 = !{!"../drivers/gpu/drm/amd/amdgpu/../display/dc/dce/dce_scl_filters.c", i32 141, i32 23}
!20 = !{ptr @filter_4tap_16p_116, !21, !"filter_4tap_16p_116", i1 false, i1 false}
!21 = !{!"../drivers/gpu/drm/amd/amdgpu/../display/dc/dce/dce_scl_filters.c", i32 162, i32 23}
!22 = !{ptr @filter_4tap_16p_149, !23, !"filter_4tap_16p_149", i1 false, i1 false}
!23 = !{!"../drivers/gpu/drm/amd/amdgpu/../display/dc/dce/dce_scl_filters.c", i32 183, i32 23}
!24 = !{ptr @filter_4tap_16p_183, !25, !"filter_4tap_16p_183", i1 false, i1 false}
!25 = !{!"../drivers/gpu/drm/amd/amdgpu/../display/dc/dce/dce_scl_filters.c", i32 204, i32 23}
!26 = !{ptr @filter_4tap_64p_upscale, !27, !"filter_4tap_64p_upscale", i1 false, i1 false}
!27 = !{!"../drivers/gpu/drm/amd/amdgpu/../display/dc/dce/dce_scl_filters.c", i32 450, i32 23}
!28 = !{ptr @filter_4tap_64p_116, !29, !"filter_4tap_64p_116", i1 false, i1 false}
!29 = !{!"../drivers/gpu/drm/amd/amdgpu/../display/dc/dce/dce_scl_filters.c", i32 495, i32 23}
!30 = !{ptr @filter_4tap_64p_149, !31, !"filter_4tap_64p_149", i1 false, i1 false}
!31 = !{!"../drivers/gpu/drm/amd/amdgpu/../display/dc/dce/dce_scl_filters.c", i32 540, i32 23}
!32 = !{ptr @filter_4tap_64p_183, !33, !"filter_4tap_64p_183", i1 false, i1 false}
!33 = !{!"../drivers/gpu/drm/amd/amdgpu/../display/dc/dce/dce_scl_filters.c", i32 585, i32 23}
!34 = !{ptr @filter_5tap_64p_upscale, !35, !"filter_5tap_64p_upscale", i1 false, i1 false}
!35 = !{!"../drivers/gpu/drm/amd/amdgpu/../display/dc/dce/dce_scl_filters.c", i32 630, i32 23}
!36 = !{ptr @filter_5tap_64p_116, !37, !"filter_5tap_64p_116", i1 false, i1 false}
!37 = !{!"../drivers/gpu/drm/amd/amdgpu/../display/dc/dce/dce_scl_filters.c", i32 675, i32 23}
!38 = !{ptr @filter_5tap_64p_149, !39, !"filter_5tap_64p_149", i1 false, i1 false}
!39 = !{!"../drivers/gpu/drm/amd/amdgpu/../display/dc/dce/dce_scl_filters.c", i32 720, i32 23}
!40 = !{ptr @filter_5tap_64p_183, !41, !"filter_5tap_64p_183", i1 false, i1 false}
!41 = !{!"../drivers/gpu/drm/amd/amdgpu/../display/dc/dce/dce_scl_filters.c", i32 765, i32 23}
!42 = !{ptr @filter_6tap_64p_upscale, !43, !"filter_6tap_64p_upscale", i1 false, i1 false}
!43 = !{!"../drivers/gpu/drm/amd/amdgpu/../display/dc/dce/dce_scl_filters.c", i32 810, i32 23}
!44 = !{ptr @filter_6tap_64p_116, !45, !"filter_6tap_64p_116", i1 false, i1 false}
!45 = !{!"../drivers/gpu/drm/amd/amdgpu/../display/dc/dce/dce_scl_filters.c", i32 855, i32 23}
!46 = !{ptr @filter_6tap_64p_149, !47, !"filter_6tap_64p_149", i1 false, i1 false}
!47 = !{!"../drivers/gpu/drm/amd/amdgpu/../display/dc/dce/dce_scl_filters.c", i32 900, i32 23}
!48 = !{ptr @filter_6tap_64p_183, !49, !"filter_6tap_64p_183", i1 false, i1 false}
!49 = !{!"../drivers/gpu/drm/amd/amdgpu/../display/dc/dce/dce_scl_filters.c", i32 945, i32 23}
!50 = !{ptr @filter_7tap_64p_upscale, !51, !"filter_7tap_64p_upscale", i1 false, i1 false}
!51 = !{!"../drivers/gpu/drm/amd/amdgpu/../display/dc/dce/dce_scl_filters.c", i32 990, i32 23}
!52 = !{ptr @filter_7tap_64p_116, !53, !"filter_7tap_64p_116", i1 false, i1 false}
!53 = !{!"../drivers/gpu/drm/amd/amdgpu/../display/dc/dce/dce_scl_filters.c", i32 1035, i32 23}
!54 = !{ptr @filter_7tap_64p_149, !55, !"filter_7tap_64p_149", i1 false, i1 false}
!55 = !{!"../drivers/gpu/drm/amd/amdgpu/../display/dc/dce/dce_scl_filters.c", i32 1080, i32 23}
!56 = !{ptr @filter_7tap_64p_183, !57, !"filter_7tap_64p_183", i1 false, i1 false}
!57 = !{!"../drivers/gpu/drm/amd/amdgpu/../display/dc/dce/dce_scl_filters.c", i32 1125, i32 23}
!58 = !{ptr @filter_8tap_64p_upscale, !59, !"filter_8tap_64p_upscale", i1 false, i1 false}
!59 = !{!"../drivers/gpu/drm/amd/amdgpu/../display/dc/dce/dce_scl_filters.c", i32 1170, i32 23}
!60 = !{ptr @filter_8tap_64p_116, !61, !"filter_8tap_64p_116", i1 false, i1 false}
!61 = !{!"../drivers/gpu/drm/amd/amdgpu/../display/dc/dce/dce_scl_filters.c", i32 1215, i32 23}
!62 = !{ptr @filter_8tap_64p_149, !63, !"filter_8tap_64p_149", i1 false, i1 false}
!63 = !{!"../drivers/gpu/drm/amd/amdgpu/../display/dc/dce/dce_scl_filters.c", i32 1260, i32 23}
!64 = !{ptr @filter_8tap_64p_183, !65, !"filter_8tap_64p_183", i1 false, i1 false}
!65 = !{!"../drivers/gpu/drm/amd/amdgpu/../display/dc/dce/dce_scl_filters.c", i32 1305, i32 23}
!66 = !{ptr @filter_2tap_16p, !67, !"filter_2tap_16p", i1 false, i1 false}
!67 = !{!"../drivers/gpu/drm/amd/amdgpu/../display/dc/dce/dce_scl_filters.c", i32 36, i32 23}
!68 = !{ptr @filter_2tap_64p, !69, !"filter_2tap_64p", i1 false, i1 false}
!69 = !{!"../drivers/gpu/drm/amd/amdgpu/../display/dc/dce/dce_scl_filters.c", i32 225, i32 23}
!70 = !{i32 1, !"wchar_size", i32 2}
!71 = !{i32 1, !"min_enum_size", i32 4}
!72 = !{i32 8, !"branch-target-enforcement", i32 0}
!73 = !{i32 8, !"sign-return-address", i32 0}
!74 = !{i32 8, !"sign-return-address-all", i32 0}
!75 = !{i32 8, !"sign-return-address-with-bkey", i32 0}
!76 = !{i32 7, !"uwtable", i32 1}
!77 = !{i32 7, !"frame-pointer", i32 2}
!78 = !{!"clang version 15.0.0 (git@github.com:linkeLi0421/llvm-project15-IRDumperPass.git 23ab625cb005cd08da083f9b643a7feed9af8abe)"}
