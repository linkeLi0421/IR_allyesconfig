; ModuleID = '/llk/IR_all_yes/drivers/tty/vt/conmakehash.c_pt.bc'
source_filename = "../drivers/tty/vt/conmakehash.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [2 x i8] c"-\00", align 1
@stdin = external local_unnamed_addr global ptr, align 8
@.str.1 = private unnamed_addr constant [6 x i8] c"stdin\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@unicount = dso_local local_unnamed_addr global [256 x i32] zeroinitializer, align 16
@stderr = external local_unnamed_addr global ptr, align 8
@.str.3 = private unnamed_addr constant [28 x i8] c"%s: Warning: line too long\0A\00", align 1
@.str.4 = private unnamed_addr constant [20 x i8] c"Bad input line: %s\0A\00", align 1
@.str.5 = private unnamed_addr constant [49 x i8] c"%s: Glyph number (0x%x) larger than font length\0A\00", align 1
@.str.6 = private unnamed_addr constant [29 x i8] c"%s: Bad end of range (0x%x)\0A\00", align 1
@.str.7 = private unnamed_addr constant [5 x i8] c"idem\00", align 1
@.str.8 = private unnamed_addr constant [81 x i8] c"%s: Corresponding to a range of font positions, there should be a Unicode range\0A\00", align 1
@.str.9 = private unnamed_addr constant [70 x i8] c"%s: Bad Unicode range corresponding to font position range 0x%x-0x%x\0A\00", align 1
@.str.10 = private unnamed_addr constant [85 x i8] c"%s: Unicode range U+%x-U+%x not of the same length as font position range 0x%x-0x%x\0A\00", align 1
@.str.11 = private unnamed_addr constant [32 x i8] c"%s: trailing junk (%s) ignored\0A\00", align 1
@.str.12 = private unnamed_addr constant [161 x i8] c"/*\0A * Do not edit this file; it was automatically generated by\0A *\0A * conmakehash %s > [this file]\0A *\0A */\0A\0A#include <linux/types.h>\0A\0Au8 dfont_unicount[%d] = \0A{\0A\09\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"%3d\00", align 1
@.str.15 = private unnamed_addr constant [4 x i8] c",\0A\09\00", align 1
@.str.16 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.17 = private unnamed_addr constant [31 x i8] c"\0Au16 dfont_unitable[%d] = \0A{\0A\09\00", align 1
@.str.18 = private unnamed_addr constant [7 x i8] c"0x%04x\00", align 1
@unitable = dso_local local_unnamed_addr global [256 x [255 x i16]] zeroinitializer, align 16
@.str.19 = private unnamed_addr constant [67 x i8] c"Usage: \0A        %s chartable [hashsize] [hashstep] [maxhashlevel]\0A\00", align 1
@.str.20 = private unnamed_addr constant [43 x i8] c"ERROR: Only 255 unicodes/glyph permitted!\0A\00", align 1
@str.21 = private unnamed_addr constant [4 x i8] c"\0A};\00", align 1

; Function Attrs: noreturn nounwind uwtable
define dso_local i32 @main(i32 noundef %argc, ptr nocapture noundef readonly %argv) local_unnamed_addr #0 {
entry:
  %buffer = alloca [65536 x i8], align 16
  %p = alloca ptr, align 8
  %p1 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 65536, ptr nonnull %buffer) #11
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %p) #11
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %p1) #11
  %0 = add i32 %argc, -6
  %1 = icmp ult i32 %0, -4
  br i1 %1, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load ptr, ptr %argv, align 8, !tbaa !5
  %3 = load ptr, ptr @stderr, align 8, !tbaa !5
  %call.i = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %3, ptr noundef nonnull @.str.19, ptr noundef %2) #12
  tail call void @exit(i32 noundef 64) #13
  unreachable

if.end:                                           ; preds = %entry
  %arrayidx2 = getelementptr inbounds ptr, ptr %argv, i64 1
  %4 = load ptr, ptr %arrayidx2, align 8, !tbaa !5
  %call = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %4, ptr noundef nonnull dereferenceable(2) @.str) #14
  %tobool.not = icmp eq i32 %call, 0
  br i1 %tobool.not, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.end
  %5 = load ptr, ptr @stdin, align 8, !tbaa !5
  br label %if.end9

if.else:                                          ; preds = %if.end
  %call5 = tail call ptr @fopen(ptr noundef %4, ptr noundef nonnull @.str.2)
  %tobool6.not = icmp eq ptr %call5, null
  br i1 %tobool6.not, label %if.then7, label %if.end9

if.then7:                                         ; preds = %if.else
  tail call void @perror(ptr noundef %4) #15
  tail call void @exit(i32 noundef 66) #13
  unreachable

if.end9:                                          ; preds = %if.else, %if.then3
  %tblname.0 = phi ptr [ %4, %if.else ], [ @.str.1, %if.then3 ]
  %ctbl.0 = phi ptr [ %call5, %if.else ], [ %5, %if.then3 ]
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(1024) @unicount, i8 0, i64 1024, i1 false), !tbaa !9
  %call12439 = call ptr @fgets(ptr noundef nonnull %buffer, i32 noundef 65536, ptr noundef %ctbl.0)
  %cmp13.not440 = icmp eq ptr %call12439, null
  br i1 %cmp13.not440, label %while.end186, label %while.body

while.body:                                       ; preds = %while.cond.backedge, %if.end9
  %call15 = call ptr @strchr(ptr noundef nonnull %buffer, i32 noundef 10) #14
  %cmp16.not = icmp eq ptr %call15, null
  br i1 %cmp16.not, label %if.else18, label %if.then17

if.then17:                                        ; preds = %while.body
  store i8 0, ptr %call15, align 1, !tbaa !11
  br label %while.cond22.preheader

if.else18:                                        ; preds = %while.body
  %6 = load ptr, ptr @stderr, align 8, !tbaa !5
  %call19 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %6, ptr noundef nonnull @.str.3, ptr noundef %tblname.0) #15
  br label %while.cond22.preheader

while.cond22.preheader:                           ; preds = %if.else18, %if.then17
  br label %while.cond22

while.cond22:                                     ; preds = %while.body28, %while.cond22.preheader
  %storemerge = phi ptr [ %incdec.ptr, %while.body28 ], [ %buffer, %while.cond22.preheader ]
  %7 = load i8, ptr %storemerge, align 1, !tbaa !11
  switch i8 %7, label %if.end35 [
    i8 32, label %while.body28
    i8 9, label %while.body28
    i8 0, label %if.then34
    i8 35, label %if.then34
  ]

while.body28:                                     ; preds = %while.cond22, %while.cond22
  %incdec.ptr = getelementptr inbounds i8, ptr %storemerge, i64 1
  br label %while.cond22

if.then34:                                        ; preds = %while.cond22, %while.cond22
  store ptr %storemerge, ptr %p, align 8, !tbaa !5
  br label %while.cond.backedge

while.cond.backedge.loopexit:                     ; preds = %while.cond165, %while.cond165
  store ptr %39, ptr %p, align 8, !tbaa !5
  br label %while.cond.backedge

while.cond.backedge:                              ; preds = %if.then183, %while.cond.backedge.loopexit, %if.then34
  %call12 = call ptr @fgets(ptr noundef nonnull %buffer, i32 noundef 65536, ptr noundef %ctbl.0)
  %cmp13.not = icmp eq ptr %call12, null
  br i1 %cmp13.not, label %while.end186, label %while.body

if.end35:                                         ; preds = %while.cond22
  %call36 = call i64 @strtol(ptr noundef nonnull %storemerge, ptr noundef nonnull %p1, i32 noundef 0) #11
  %conv37 = trunc i64 %call36 to i32
  %8 = load ptr, ptr %p1, align 8, !tbaa !5
  %cmp38 = icmp eq ptr %8, %storemerge
  br i1 %cmp38, label %if.then40, label %while.cond44

if.then40:                                        ; preds = %if.end35
  %9 = load ptr, ptr @stderr, align 8, !tbaa !5
  %call42 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %9, ptr noundef nonnull @.str.4, ptr noundef nonnull %buffer) #15
  call void @exit(i32 noundef 65) #13
  unreachable

while.cond44:                                     ; preds = %while.body53, %if.end35
  %storemerge338 = phi ptr [ %incdec.ptr54, %while.body53 ], [ %8, %if.end35 ]
  %10 = load i8, ptr %storemerge338, align 1, !tbaa !11
  switch i8 %10, label %if.end70.thread [
    i8 32, label %while.body53
    i8 9, label %while.body53
    i8 45, label %if.then59
  ]

while.body53:                                     ; preds = %while.cond44, %while.cond44
  %incdec.ptr54 = getelementptr inbounds i8, ptr %storemerge338, i64 1
  br label %while.cond44

if.then59:                                        ; preds = %while.cond44
  %incdec.ptr60 = getelementptr inbounds i8, ptr %storemerge338, i64 1
  %call61 = call i64 @strtol(ptr noundef nonnull %incdec.ptr60, ptr noundef nonnull %p1, i32 noundef 0) #11
  %11 = load ptr, ptr %p1, align 8, !tbaa !5
  %cmp63 = icmp eq ptr %11, %incdec.ptr60
  br i1 %cmp63, label %if.then65, label %if.end70

if.then65:                                        ; preds = %if.then59
  %12 = load ptr, ptr @stderr, align 8, !tbaa !5
  %call67 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %12, ptr noundef nonnull @.str.4, ptr noundef nonnull %buffer) #15
  call void @exit(i32 noundef 65) #13
  unreachable

if.end70:                                         ; preds = %if.then59
  %conv62 = trunc i64 %call61 to i32
  store ptr %11, ptr %p, align 8, !tbaa !5
  %13 = icmp ugt i32 %conv37, 255
  br i1 %13, label %if.then76, label %if.end78

if.end70.thread:                                  ; preds = %while.cond44
  store ptr %storemerge338, ptr %p, align 8, !tbaa !5
  %14 = icmp ugt i32 %conv37, 255
  br i1 %14, label %if.then76, label %while.cond158.preheader

if.then76:                                        ; preds = %if.end70.thread, %if.end70
  %conv37.le545 = trunc i64 %call36 to i32
  %15 = load ptr, ptr @stderr, align 8, !tbaa !5
  %call77 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %15, ptr noundef nonnull @.str.5, ptr noundef %tblname.0, i32 noundef %conv37.le545) #15
  call void @exit(i32 noundef 65) #13
  unreachable

if.end78:                                         ; preds = %if.end70
  %tobool79.not = icmp eq i32 %conv62, 0
  br i1 %tobool79.not, label %while.cond158.preheader, label %land.lhs.true

while.cond158.preheader:                          ; preds = %if.end78, %if.end70.thread
  %call159431 = call fastcc i32 @getunicode(ptr noundef nonnull %p)
  %cmp160432 = icmp sgt i32 %call159431, -1
  br i1 %cmp160432, label %while.body162.lr.ph, label %if.end164

while.body162.lr.ph:                              ; preds = %while.cond158.preheader
  %sext = shl i64 %call36, 32
  %idxprom.i365 = ashr exact i64 %sext, 32
  %arrayidx.i366 = getelementptr inbounds [256 x i32], ptr @unicount, i64 0, i64 %idxprom.i365
  br label %while.body162

land.lhs.true:                                    ; preds = %if.end78
  %cmp80 = icmp slt i32 %conv62, %conv37
  %cmp83 = icmp sgt i32 %conv62, 255
  %or.cond339 = or i1 %cmp80, %cmp83
  br i1 %or.cond339, label %if.then85, label %while.cond90

if.then85:                                        ; preds = %land.lhs.true
  %conv62.le541 = trunc i64 %call61 to i32
  %16 = load ptr, ptr @stderr, align 8, !tbaa !5
  %call86 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %16, ptr noundef nonnull @.str.6, ptr noundef %tblname.0, i32 noundef %conv62.le541) #15
  call void @exit(i32 noundef 65) #13
  unreachable

while.cond90:                                     ; preds = %while.body99, %land.lhs.true
  %incdec.ptr100420 = phi ptr [ %incdec.ptr100, %while.body99 ], [ %11, %land.lhs.true ]
  %17 = load i8, ptr %incdec.ptr100420, align 1, !tbaa !11
  switch i8 %17, label %while.end101 [
    i8 32, label %while.body99
    i8 9, label %while.body99
  ]

while.body99:                                     ; preds = %while.cond90, %while.cond90
  %incdec.ptr100 = getelementptr inbounds i8, ptr %incdec.ptr100420, i64 1
  br label %while.cond90

while.end101:                                     ; preds = %while.cond90
  store ptr %incdec.ptr100420, ptr %p, align 8, !tbaa !5
  %call102 = call i32 @strncmp(ptr noundef nonnull %incdec.ptr100420, ptr noundef nonnull dereferenceable(5) @.str.7, i64 noundef 4) #14
  %tobool103.not = icmp eq i32 %call102, 0
  br i1 %tobool103.not, label %for.body108.preheader, label %if.else112

for.body108.preheader:                            ; preds = %while.end101
  %sext502 = shl i64 %call36, 32
  %18 = ashr exact i64 %sext502, 32
  %19 = add i32 %conv62, 1
  br label %for.body108

for.body108:                                      ; preds = %addpair.exit, %for.body108.preheader
  %indvars.iv480 = phi i64 [ %18, %for.body108.preheader ], [ %indvars.iv.next481, %addpair.exit ]
  %cmp.i = icmp slt i64 %indvars.iv480, 65535
  br i1 %cmp.i, label %for.cond.preheader.i, label %addpair.exit

for.cond.preheader.i:                             ; preds = %for.body108
  %arrayidx.i = getelementptr inbounds [256 x i32], ptr @unicount, i64 0, i64 %indvars.iv480
  %20 = load i32, ptr %arrayidx.i, align 4, !tbaa !9
  %cmp138.i = icmp sgt i32 %20, 0
  br i1 %cmp138.i, label %for.body.preheader.i, label %if.end14.i

for.body.preheader.i:                             ; preds = %for.cond.preheader.i
  %wide.trip.count.i = zext i32 %20 to i64
  %21 = trunc i64 %indvars.iv480 to i32
  br label %for.body.i

for.cond.i:                                       ; preds = %for.body.i
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, %wide.trip.count.i
  br i1 %exitcond.not.i, label %for.end.i, label %for.body.i

for.body.i:                                       ; preds = %for.cond.i, %for.body.preheader.i
  %indvars.iv.i = phi i64 [ 0, %for.body.preheader.i ], [ %indvars.iv.next.i, %for.cond.i ]
  %arrayidx5.i = getelementptr inbounds [256 x [255 x i16]], ptr @unitable, i64 0, i64 %indvars.iv480, i64 %indvars.iv.i
  %22 = load i16, ptr %arrayidx5.i, align 2, !tbaa !12
  %conv.i = zext i16 %22 to i32
  %cmp6.i = icmp eq i32 %21, %conv.i
  br i1 %cmp6.i, label %addpair.exit, label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i
  %cmp11.i = icmp sgt i32 %20, 254
  br i1 %cmp11.i, label %if.then13.i, label %if.end14.i

if.then13.i:                                      ; preds = %for.end.i
  %23 = load ptr, ptr @stderr, align 8, !tbaa !5
  %24 = call i64 @fwrite(ptr nonnull @.str.20, i64 42, i64 1, ptr %23) #12
  call void @exit(i32 noundef 65) #13
  unreachable

if.end14.i:                                       ; preds = %for.end.i, %for.cond.preheader.i
  %conv15.i = trunc i64 %indvars.iv480 to i16
  %idxprom20.i = sext i32 %20 to i64
  %arrayidx21.i = getelementptr inbounds [256 x [255 x i16]], ptr @unitable, i64 0, i64 %indvars.iv480, i64 %idxprom20.i
  store i16 %conv15.i, ptr %arrayidx21.i, align 2, !tbaa !12
  %inc24.i = add nsw i32 %20, 1
  store i32 %inc24.i, ptr %arrayidx.i, align 4, !tbaa !9
  br label %addpair.exit

addpair.exit:                                     ; preds = %if.end14.i, %for.body.i, %for.body108
  %indvars.iv.next481 = add nsw i64 %indvars.iv480, 1
  %lftr.wideiv483 = trunc i64 %indvars.iv.next481 to i32
  %exitcond484.not = icmp eq i32 %19, %lftr.wideiv483
  br i1 %exitcond484.not, label %for.end111, label %for.body108

for.end111:                                       ; preds = %addpair.exit
  %add.ptr = getelementptr inbounds i8, ptr %incdec.ptr100420, i64 4
  store ptr %add.ptr, ptr %p, align 8, !tbaa !5
  br label %if.end164

if.else112:                                       ; preds = %while.end101
  %call113 = call fastcc i32 @getunicode(ptr noundef nonnull %p)
  %p.promoted421 = load ptr, ptr %p, align 8, !tbaa !5
  br label %while.cond114

while.cond114:                                    ; preds = %while.body123, %if.else112
  %incdec.ptr124422 = phi ptr [ %incdec.ptr124, %while.body123 ], [ %p.promoted421, %if.else112 ]
  %25 = load i8, ptr %incdec.ptr124422, align 1, !tbaa !11
  switch i8 %25, label %if.then129 [
    i8 32, label %while.body123
    i8 9, label %while.body123
    i8 45, label %if.end131
  ]

while.body123:                                    ; preds = %while.cond114, %while.cond114
  %incdec.ptr124 = getelementptr inbounds i8, ptr %incdec.ptr124422, i64 1
  br label %while.cond114

if.then129:                                       ; preds = %while.cond114
  %26 = load ptr, ptr @stderr, align 8, !tbaa !5
  %call130 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %26, ptr noundef nonnull @.str.8, ptr noundef %tblname.0) #15
  call void @exit(i32 noundef 65) #13
  unreachable

if.end131:                                        ; preds = %while.cond114
  %incdec.ptr132 = getelementptr inbounds i8, ptr %incdec.ptr124422, i64 1
  store ptr %incdec.ptr132, ptr %p, align 8, !tbaa !5
  %call133 = call fastcc i32 @getunicode(ptr noundef nonnull %p)
  %cmp134 = icmp slt i32 %call113, 0
  %cmp137 = icmp slt i32 %call133, 0
  %or.cond262 = select i1 %cmp134, i1 true, i1 %cmp137
  br i1 %or.cond262, label %if.then139, label %if.end141

if.then139:                                       ; preds = %if.end131
  %conv37.le543 = trunc i64 %call36 to i32
  %conv62.le539 = trunc i64 %call61 to i32
  %27 = load ptr, ptr @stderr, align 8, !tbaa !5
  %call140 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %27, ptr noundef nonnull @.str.9, ptr noundef %tblname.0, i32 noundef %conv37.le543, i32 noundef %conv62.le539) #15
  call void @exit(i32 noundef 65) #13
  unreachable

if.end141:                                        ; preds = %if.end131
  %sub = sub nsw i32 %call133, %call113
  %sub142 = sub nsw i32 %conv62, %conv37
  %cmp143.not = icmp eq i32 %sub, %sub142
  br i1 %cmp143.not, label %for.body151.lr.ph, label %if.then145

for.body151.lr.ph:                                ; preds = %if.end141
  %sub152 = sub nsw i32 %call113, %conv37
  %sext501 = shl i64 %call36, 32
  %28 = ashr exact i64 %sext501, 32
  %29 = add i32 %conv62, 1
  br label %for.body151

if.then145:                                       ; preds = %if.end141
  %conv37.le = trunc i64 %call36 to i32
  %conv62.le = trunc i64 %call61 to i32
  %30 = load ptr, ptr @stderr, align 8, !tbaa !5
  %call146 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %30, ptr noundef nonnull @.str.10, ptr noundef %tblname.0, i32 noundef %call113, i32 noundef %call133, i32 noundef %conv37.le, i32 noundef %conv62.le) #15
  call void @exit(i32 noundef 65) #13
  unreachable

for.body151:                                      ; preds = %addpair.exit363, %for.body151.lr.ph
  %indvars.iv = phi i64 [ %28, %for.body151.lr.ph ], [ %indvars.iv.next, %addpair.exit363 ]
  %indvars479 = trunc i64 %indvars.iv to i32
  %add = add nsw i32 %sub152, %indvars479
  %cmp.i340 = icmp slt i32 %add, 65535
  br i1 %cmp.i340, label %for.cond.preheader.i344, label %addpair.exit363

for.cond.preheader.i344:                          ; preds = %for.body151
  %arrayidx.i342 = getelementptr inbounds [256 x i32], ptr @unicount, i64 0, i64 %indvars.iv
  %31 = load i32, ptr %arrayidx.i342, align 4, !tbaa !9
  %cmp138.i343 = icmp sgt i32 %31, 0
  br i1 %cmp138.i343, label %for.body.preheader.i346, label %if.end14.i362

for.body.preheader.i346:                          ; preds = %for.cond.preheader.i344
  %wide.trip.count.i345 = zext i32 %31 to i64
  br label %for.body.i354

for.cond.i349:                                    ; preds = %for.body.i354
  %indvars.iv.next.i347 = add nuw nsw i64 %indvars.iv.i350, 1
  %exitcond.not.i348 = icmp eq i64 %indvars.iv.next.i347, %wide.trip.count.i345
  br i1 %exitcond.not.i348, label %for.end.i356, label %for.body.i354

for.body.i354:                                    ; preds = %for.cond.i349, %for.body.preheader.i346
  %indvars.iv.i350 = phi i64 [ 0, %for.body.preheader.i346 ], [ %indvars.iv.next.i347, %for.cond.i349 ]
  %arrayidx5.i351 = getelementptr inbounds [256 x [255 x i16]], ptr @unitable, i64 0, i64 %indvars.iv, i64 %indvars.iv.i350
  %32 = load i16, ptr %arrayidx5.i351, align 2, !tbaa !12
  %conv.i352 = zext i16 %32 to i32
  %cmp6.i353 = icmp eq i32 %add, %conv.i352
  br i1 %cmp6.i353, label %addpair.exit363, label %for.cond.i349

for.end.i356:                                     ; preds = %for.cond.i349
  %cmp11.i355 = icmp sgt i32 %31, 254
  br i1 %cmp11.i355, label %if.then13.i357, label %if.end14.i362

if.then13.i357:                                   ; preds = %for.end.i356
  %33 = load ptr, ptr @stderr, align 8, !tbaa !5
  %34 = call i64 @fwrite(ptr nonnull @.str.20, i64 42, i64 1, ptr %33) #12
  call void @exit(i32 noundef 65) #13
  unreachable

if.end14.i362:                                    ; preds = %for.end.i356, %for.cond.preheader.i344
  %conv15.i358 = trunc i32 %add to i16
  %idxprom20.i359 = sext i32 %31 to i64
  %arrayidx21.i360 = getelementptr inbounds [256 x [255 x i16]], ptr @unitable, i64 0, i64 %indvars.iv, i64 %idxprom20.i359
  store i16 %conv15.i358, ptr %arrayidx21.i360, align 2, !tbaa !12
  %inc24.i361 = add nsw i32 %31, 1
  store i32 %inc24.i361, ptr %arrayidx.i342, align 4, !tbaa !9
  br label %addpair.exit363

addpair.exit363:                                  ; preds = %if.end14.i362, %for.body.i354, %for.body151
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond.not = icmp eq i32 %29, %lftr.wideiv
  br i1 %exitcond.not, label %if.end164, label %for.body151

while.body162:                                    ; preds = %addpair.exit387, %while.body162.lr.ph
  %call159433 = phi i32 [ %call159431, %while.body162.lr.ph ], [ %call159, %addpair.exit387 ]
  %cmp.i364 = icmp ult i32 %call159433, 65535
  br i1 %cmp.i364, label %for.cond.preheader.i368, label %addpair.exit387

for.cond.preheader.i368:                          ; preds = %while.body162
  %35 = load i32, ptr %arrayidx.i366, align 4, !tbaa !9
  %cmp138.i367 = icmp sgt i32 %35, 0
  br i1 %cmp138.i367, label %for.body.preheader.i370, label %if.end14.i386

for.body.preheader.i370:                          ; preds = %for.cond.preheader.i368
  %wide.trip.count.i369 = zext i32 %35 to i64
  br label %for.body.i378

for.cond.i373:                                    ; preds = %for.body.i378
  %indvars.iv.next.i371 = add nuw nsw i64 %indvars.iv.i374, 1
  %exitcond.not.i372 = icmp eq i64 %indvars.iv.next.i371, %wide.trip.count.i369
  br i1 %exitcond.not.i372, label %for.end.i380, label %for.body.i378

for.body.i378:                                    ; preds = %for.cond.i373, %for.body.preheader.i370
  %indvars.iv.i374 = phi i64 [ 0, %for.body.preheader.i370 ], [ %indvars.iv.next.i371, %for.cond.i373 ]
  %arrayidx5.i375 = getelementptr inbounds [256 x [255 x i16]], ptr @unitable, i64 0, i64 %idxprom.i365, i64 %indvars.iv.i374
  %36 = load i16, ptr %arrayidx5.i375, align 2, !tbaa !12
  %conv.i376 = zext i16 %36 to i32
  %cmp6.i377 = icmp eq i32 %call159433, %conv.i376
  br i1 %cmp6.i377, label %addpair.exit387, label %for.cond.i373

for.end.i380:                                     ; preds = %for.cond.i373
  %cmp11.i379 = icmp sgt i32 %35, 254
  br i1 %cmp11.i379, label %if.then13.i381, label %if.end14.i386

if.then13.i381:                                   ; preds = %for.end.i380
  %37 = load ptr, ptr @stderr, align 8, !tbaa !5
  %38 = call i64 @fwrite(ptr nonnull @.str.20, i64 42, i64 1, ptr %37) #12
  call void @exit(i32 noundef 65) #13
  unreachable

if.end14.i386:                                    ; preds = %for.end.i380, %for.cond.preheader.i368
  %conv15.i382 = trunc i32 %call159433 to i16
  %idxprom20.i383 = sext i32 %35 to i64
  %arrayidx21.i384 = getelementptr inbounds [256 x [255 x i16]], ptr @unitable, i64 0, i64 %idxprom.i365, i64 %idxprom20.i383
  store i16 %conv15.i382, ptr %arrayidx21.i384, align 2, !tbaa !12
  %inc24.i385 = add nsw i32 %35, 1
  store i32 %inc24.i385, ptr %arrayidx.i366, align 4, !tbaa !9
  br label %addpair.exit387

addpair.exit387:                                  ; preds = %if.end14.i386, %for.body.i378, %while.body162
  %call159 = call fastcc i32 @getunicode(ptr noundef nonnull %p)
  %cmp160 = icmp sgt i32 %call159, -1
  br i1 %cmp160, label %while.body162, label %if.end164

if.end164:                                        ; preds = %addpair.exit387, %addpair.exit363, %for.end111, %while.cond158.preheader
  %.pre = load ptr, ptr %p, align 8, !tbaa !5
  br label %while.cond165

while.cond165:                                    ; preds = %while.body174, %if.end164
  %39 = phi ptr [ %incdec.ptr175, %while.body174 ], [ %.pre, %if.end164 ]
  %40 = load i8, ptr %39, align 1, !tbaa !11
  switch i8 %40, label %if.then183 [
    i8 32, label %while.body174
    i8 9, label %while.body174
    i8 0, label %while.cond.backedge.loopexit
    i8 35, label %while.cond.backedge.loopexit
  ]

while.body174:                                    ; preds = %while.cond165, %while.cond165
  %incdec.ptr175 = getelementptr inbounds i8, ptr %39, i64 1
  br label %while.cond165

if.then183:                                       ; preds = %while.cond165
  store ptr %39, ptr %p, align 8, !tbaa !5
  %41 = load ptr, ptr @stderr, align 8, !tbaa !5
  %call184 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %41, ptr noundef nonnull @.str.11, ptr noundef %tblname.0, ptr noundef nonnull %39) #15
  br label %while.cond.backedge

while.end186:                                     ; preds = %while.cond.backedge, %if.end9
  %call187 = call i32 @fclose(ptr noundef %ctbl.0)
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %while.end186
  %index = phi i64 [ 0, %while.end186 ], [ %index.next.3, %vector.body ]
  %vec.phi = phi <4 x i32> [ zeroinitializer, %while.end186 ], [ %56, %vector.body ]
  %vec.phi573 = phi <4 x i32> [ zeroinitializer, %while.end186 ], [ %57, %vector.body ]
  %42 = getelementptr inbounds [256 x i32], ptr @unicount, i64 0, i64 %index
  %wide.load = load <4 x i32>, ptr %42, align 16, !tbaa !9
  %43 = getelementptr inbounds i32, ptr %42, i64 4
  %wide.load574 = load <4 x i32>, ptr %43, align 16, !tbaa !9
  %44 = add <4 x i32> %wide.load, %vec.phi
  %45 = add <4 x i32> %wide.load574, %vec.phi573
  %index.next = or i64 %index, 8
  %46 = getelementptr inbounds [256 x i32], ptr @unicount, i64 0, i64 %index.next
  %wide.load.1 = load <4 x i32>, ptr %46, align 16, !tbaa !9
  %47 = getelementptr inbounds i32, ptr %46, i64 4
  %wide.load574.1 = load <4 x i32>, ptr %47, align 16, !tbaa !9
  %48 = add <4 x i32> %wide.load.1, %44
  %49 = add <4 x i32> %wide.load574.1, %45
  %index.next.1 = or i64 %index, 16
  %50 = getelementptr inbounds [256 x i32], ptr @unicount, i64 0, i64 %index.next.1
  %wide.load.2 = load <4 x i32>, ptr %50, align 16, !tbaa !9
  %51 = getelementptr inbounds i32, ptr %50, i64 4
  %wide.load574.2 = load <4 x i32>, ptr %51, align 16, !tbaa !9
  %52 = add <4 x i32> %wide.load.2, %48
  %53 = add <4 x i32> %wide.load574.2, %49
  %index.next.2 = or i64 %index, 24
  %54 = getelementptr inbounds [256 x i32], ptr @unicount, i64 0, i64 %index.next.2
  %wide.load.3 = load <4 x i32>, ptr %54, align 16, !tbaa !9
  %55 = getelementptr inbounds i32, ptr %54, i64 4
  %wide.load574.3 = load <4 x i32>, ptr %55, align 16, !tbaa !9
  %56 = add <4 x i32> %wide.load.3, %52
  %57 = add <4 x i32> %wide.load574.3, %53
  %index.next.3 = add nuw nsw i64 %index, 32
  %58 = icmp eq i64 %index.next.3, 256
  br i1 %58, label %middle.block, label %vector.body, !llvm.loop !14

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i32> %57, %56
  %59 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %bin.rdx)
  %60 = load ptr, ptr %arrayidx2, align 8, !tbaa !5
  %call199 = call i32 (ptr, ...) @printf(ptr noundef nonnull @.str.12, ptr noundef %60, i32 noundef 256)
  br label %for.body203

for.body203:                                      ; preds = %if.else212, %middle.block
  %indvars.iv489 = phi i64 [ 0, %middle.block ], [ %indvars.iv.next490, %if.else212 ]
  %arrayidx205 = getelementptr inbounds [256 x i32], ptr @unicount, i64 0, i64 %indvars.iv489
  %61 = load i32, ptr %arrayidx205, align 4, !tbaa !9
  %call206 = call i32 (ptr, ...) @printf(ptr noundef nonnull @.str.13, i32 noundef %61)
  %cmp208 = icmp eq i64 %indvars.iv489, 255
  br i1 %cmp208, label %for.inc221.thread, label %if.else212

for.inc221.thread:                                ; preds = %for.body203
  %puts337 = call i32 @puts(ptr nonnull @str.21)
  br label %for.end223

if.else212:                                       ; preds = %for.body203
  %rem499 = and i64 %indvars.iv489, 7
  %cmp213 = icmp eq i64 %rem499, 7
  %.str.15..str.16 = select i1 %cmp213, ptr @.str.15, ptr @.str.16
  %call218 = call i32 (ptr, ...) @printf(ptr noundef nonnull %.str.15..str.16)
  %indvars.iv.next490 = add nuw nsw i64 %indvars.iv489, 1
  %exitcond492.not = icmp eq i64 %indvars.iv.next490, 256
  br i1 %exitcond492.not, label %for.end223, label %for.body203

for.end223:                                       ; preds = %if.else212, %for.inc221.thread
  %call224 = call i32 (ptr, ...) @printf(ptr noundef nonnull @.str.17, i32 noundef %59)
  %cmp226445 = icmp sgt i32 %59, 0
  br i1 %cmp226445, label %while.cond229.preheader.lr.ph, label %for.end261

while.cond229.preheader.lr.ph:                    ; preds = %for.end223
  %sub244 = add nsw i32 %59, -1
  br label %while.cond229.preheader

while.cond229.preheader:                          ; preds = %for.inc259, %while.cond229.preheader.lr.ph
  %fp0.0449 = phi i64 [ 0, %while.cond229.preheader.lr.ph ], [ %fp0.1.lcssa.wide, %for.inc259 ]
  %nent.0448 = phi i32 [ 0, %while.cond229.preheader.lr.ph ], [ %inc239, %for.inc259 ]
  %i.5446 = phi i32 [ 0, %while.cond229.preheader.lr.ph ], [ %inc260, %for.inc259 ]
  %sext500 = shl i64 %fp0.0449, 32
  %62 = ashr exact i64 %sext500, 32
  %arrayidx231.peel = getelementptr inbounds [256 x i32], ptr @unicount, i64 0, i64 %62
  %63 = load i32, ptr %arrayidx231.peel, align 4, !tbaa !9
  %cmp232.not.peel = icmp slt i32 %nent.0448, %63
  br i1 %cmp232.not.peel, label %while.end236, label %while.cond229

while.cond229:                                    ; preds = %while.cond229, %while.cond229.preheader
  %indvars.iv493.in = phi i64 [ %indvars.iv493, %while.cond229 ], [ %62, %while.cond229.preheader ]
  %indvars.iv493 = add i64 %indvars.iv493.in, 1
  %arrayidx231 = getelementptr inbounds [256 x i32], ptr @unicount, i64 0, i64 %indvars.iv493
  %64 = load i32, ptr %arrayidx231, align 4, !tbaa !9
  %cmp232.not = icmp sgt i32 %64, 0
  br i1 %cmp232.not, label %while.end236, label %while.cond229, !llvm.loop !16

while.end236:                                     ; preds = %while.cond229, %while.cond229.preheader
  %nent.1.lcssa = phi i32 [ %nent.0448, %while.cond229.preheader ], [ 0, %while.cond229 ]
  %fp0.1.lcssa.wide = phi i64 [ %62, %while.cond229.preheader ], [ %indvars.iv493, %while.cond229 ]
  %inc239 = add nsw i32 %nent.1.lcssa, 1
  %idxprom240 = sext i32 %nent.1.lcssa to i64
  %arrayidx241 = getelementptr inbounds [256 x [255 x i16]], ptr @unitable, i64 0, i64 %fp0.1.lcssa.wide, i64 %idxprom240
  %65 = load i16, ptr %arrayidx241, align 2, !tbaa !12
  %conv242 = zext i16 %65 to i32
  %call243 = call i32 (ptr, ...) @printf(ptr noundef nonnull @.str.18, i32 noundef %conv242)
  %cmp245 = icmp eq i32 %i.5446, %sub244
  br i1 %cmp245, label %if.then247, label %if.else249

if.then247:                                       ; preds = %while.end236
  %puts = call i32 @puts(ptr nonnull @str.21)
  br label %for.inc259

if.else249:                                       ; preds = %while.end236
  %rem250 = and i32 %i.5446, 7
  %cmp251 = icmp eq i32 %rem250, 7
  br i1 %cmp251, label %if.then253, label %if.else255

if.then253:                                       ; preds = %if.else249
  %call254 = call i32 (ptr, ...) @printf(ptr noundef nonnull @.str.15)
  br label %for.inc259

if.else255:                                       ; preds = %if.else249
  %call256 = call i32 (ptr, ...) @printf(ptr noundef nonnull @.str.16)
  br label %for.inc259

for.inc259:                                       ; preds = %if.else255, %if.then253, %if.then247
  %inc260 = add nuw nsw i32 %i.5446, 1
  %exitcond497.not = icmp eq i32 %inc260, %59
  br i1 %exitcond497.not, label %for.end261, label %while.cond229.preheader

for.end261:                                       ; preds = %for.inc259, %for.end223
  call void @exit(i32 noundef 0) #13
  unreachable
}

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: argmemonly mustprogress nofree nounwind readonly willreturn
declare i32 @strcmp(ptr nocapture noundef, ptr nocapture noundef) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare noalias noundef ptr @fopen(ptr nocapture noundef readonly, ptr nocapture noundef readonly) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare void @perror(ptr nocapture noundef readonly) local_unnamed_addr #3

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare noundef ptr @fgets(ptr noundef, i32 noundef, ptr nocapture noundef) local_unnamed_addr #3

; Function Attrs: argmemonly mustprogress nofree nounwind readonly willreturn
declare ptr @strchr(ptr noundef, i32 noundef) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare noundef i32 @fprintf(ptr nocapture noundef, ptr nocapture noundef readonly, ...) local_unnamed_addr #3

; Function Attrs: mustprogress nofree nounwind willreturn
declare i64 @strtol(ptr noundef readonly, ptr nocapture noundef, i32 noundef) local_unnamed_addr #5

; Function Attrs: argmemonly mustprogress nofree nounwind readonly willreturn
declare i32 @strncmp(ptr nocapture noundef, ptr nocapture noundef, i64 noundef) local_unnamed_addr #2

; Function Attrs: nofree nounwind uwtable
define internal fastcc i32 @getunicode(ptr nocapture noundef %p0) unnamed_addr #6 {
entry:
  %0 = load ptr, ptr %p0, align 8, !tbaa !5
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %p.0 = phi ptr [ %0, %entry ], [ %incdec.ptr, %while.body ]
  %1 = load i8, ptr %p.0, align 1, !tbaa !11
  switch i8 %1, label %cleanup [
    i8 32, label %while.body
    i8 9, label %while.body
    i8 85, label %lor.lhs.false
  ]

while.body:                                       ; preds = %while.cond, %while.cond
  %incdec.ptr = getelementptr inbounds i8, ptr %p.0, i64 1
  br label %while.cond

lor.lhs.false:                                    ; preds = %while.cond
  %arrayidx = getelementptr inbounds i8, ptr %p.0, i64 1
  %2 = load i8, ptr %arrayidx, align 1, !tbaa !11
  %cmp9.not = icmp eq i8 %2, 43
  br i1 %cmp9.not, label %lor.lhs.false11, label %cleanup

lor.lhs.false11:                                  ; preds = %lor.lhs.false
  %call = tail call ptr @__ctype_b_loc() #16
  %3 = load ptr, ptr %call, align 8, !tbaa !5
  %arrayidx12 = getelementptr inbounds i8, ptr %p.0, i64 2
  %4 = load i8, ptr %arrayidx12, align 1, !tbaa !11
  %idxprom = sext i8 %4 to i64
  %arrayidx14 = getelementptr inbounds i16, ptr %3, i64 %idxprom
  %5 = load i16, ptr %arrayidx14, align 2, !tbaa !12
  %6 = and i16 %5, 4096
  %tobool.not = icmp eq i16 %6, 0
  br i1 %tobool.not, label %cleanup, label %lor.lhs.false16

lor.lhs.false16:                                  ; preds = %lor.lhs.false11
  %arrayidx18 = getelementptr inbounds i8, ptr %p.0, i64 3
  %7 = load i8, ptr %arrayidx18, align 1, !tbaa !11
  %idxprom20 = sext i8 %7 to i64
  %arrayidx21 = getelementptr inbounds i16, ptr %3, i64 %idxprom20
  %8 = load i16, ptr %arrayidx21, align 2, !tbaa !12
  %9 = and i16 %8, 4096
  %tobool24.not = icmp eq i16 %9, 0
  br i1 %tobool24.not, label %cleanup, label %lor.lhs.false25

lor.lhs.false25:                                  ; preds = %lor.lhs.false16
  %arrayidx27 = getelementptr inbounds i8, ptr %p.0, i64 4
  %10 = load i8, ptr %arrayidx27, align 1, !tbaa !11
  %idxprom29 = sext i8 %10 to i64
  %arrayidx30 = getelementptr inbounds i16, ptr %3, i64 %idxprom29
  %11 = load i16, ptr %arrayidx30, align 2, !tbaa !12
  %12 = and i16 %11, 4096
  %tobool33.not = icmp eq i16 %12, 0
  br i1 %tobool33.not, label %cleanup, label %lor.lhs.false34

lor.lhs.false34:                                  ; preds = %lor.lhs.false25
  %arrayidx36 = getelementptr inbounds i8, ptr %p.0, i64 5
  %13 = load i8, ptr %arrayidx36, align 1, !tbaa !11
  %idxprom38 = sext i8 %13 to i64
  %arrayidx39 = getelementptr inbounds i16, ptr %3, i64 %idxprom38
  %14 = load i16, ptr %arrayidx39, align 2, !tbaa !12
  %15 = and i16 %14, 4096
  %tobool42.not = icmp eq i16 %15, 0
  br i1 %tobool42.not, label %cleanup, label %lor.lhs.false43

lor.lhs.false43:                                  ; preds = %lor.lhs.false34
  %arrayidx45 = getelementptr inbounds i8, ptr %p.0, i64 6
  %16 = load i8, ptr %arrayidx45, align 1, !tbaa !11
  %idxprom47 = sext i8 %16 to i64
  %arrayidx48 = getelementptr inbounds i16, ptr %3, i64 %idxprom47
  %17 = load i16, ptr %arrayidx48, align 2, !tbaa !12
  %18 = and i16 %17, 4096
  %tobool51.not = icmp eq i16 %18, 0
  br i1 %tobool51.not, label %if.end, label %cleanup

if.end:                                           ; preds = %lor.lhs.false43
  store ptr %arrayidx45, ptr %p0, align 8, !tbaa !5
  %call53 = tail call i64 @strtol(ptr nocapture noundef nonnull %arrayidx12, ptr noundef null, i32 noundef 16) #11
  %conv54 = trunc i64 %call53 to i32
  br label %cleanup

cleanup:                                          ; preds = %if.end, %lor.lhs.false43, %lor.lhs.false34, %lor.lhs.false25, %lor.lhs.false16, %lor.lhs.false11, %lor.lhs.false, %while.cond
  %retval.0 = phi i32 [ %conv54, %if.end ], [ -1, %lor.lhs.false43 ], [ -1, %lor.lhs.false34 ], [ -1, %lor.lhs.false25 ], [ -1, %lor.lhs.false16 ], [ -1, %lor.lhs.false11 ], [ -1, %lor.lhs.false ], [ -1, %while.cond ]
  ret i32 %retval.0
}

; Function Attrs: nofree nounwind
declare noundef i32 @fclose(ptr nocapture noundef) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare noundef i32 @printf(ptr nocapture noundef readonly, ...) local_unnamed_addr #3

; Function Attrs: mustprogress nofree nosync nounwind readnone willreturn
declare ptr @__ctype_b_loc() local_unnamed_addr #7

; Function Attrs: nofree nounwind
declare noundef i32 @puts(ptr nocapture noundef readonly) local_unnamed_addr #8

; Function Attrs: nofree nounwind
declare noundef i64 @fwrite(ptr nocapture noundef, i64 noundef, i64 noundef, ptr nocapture noundef) local_unnamed_addr #8

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #9

; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
declare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #10

attributes #0 = { noreturn nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly nocallback nofree nosync nounwind willreturn }
attributes #2 = { argmemonly mustprogress nofree nounwind readonly willreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nofree nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { noreturn nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { mustprogress nofree nounwind willreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nofree nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { mustprogress nofree nosync nounwind readnone willreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #8 = { nofree nounwind }
attributes #9 = { argmemonly nofree nounwind willreturn writeonly }
attributes #10 = { nocallback nofree nosync nounwind readnone willreturn }
attributes #11 = { nounwind }
attributes #12 = { cold nounwind }
attributes #13 = { noreturn nounwind }
attributes #14 = { nounwind readonly willreturn }
attributes #15 = { cold }
attributes #16 = { nounwind readnone willreturn }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{!"clang version 15.0.0 (git@github.com:linkeLi0421/llvm-project15-IRDumperPass.git 23ab625cb005cd08da083f9b643a7feed9af8abe)"}
!5 = !{!6, !6, i64 0}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!10, !10, i64 0}
!10 = !{!"int", !7, i64 0}
!11 = !{!7, !7, i64 0}
!12 = !{!13, !13, i64 0}
!13 = !{!"short", !7, i64 0}
!14 = distinct !{!14, !15}
!15 = !{!"llvm.loop.isvectorized", i32 1}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.peeled.count", i32 1}
