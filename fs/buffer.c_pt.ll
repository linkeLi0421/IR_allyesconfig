; ModuleID = '/llk/IR_all_yes/fs/buffer.c_pt.bc'
source_filename = "../fs/buffer.c"
target datalayout = "E-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64"
target triple = "armebv6k-unknown-linux-gnueabi"

module asm ".syntax unified"
module asm "\09.section \22___kcrctab+touch_buffer\22, \22a\22\09"
module asm "\09.weak\09__crc_touch_buffer\09\09\09\09"
module asm "\09.long\09__crc_touch_buffer\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_touch_buffer:\09\09\09\09\09"
module asm "\09.asciz \09\22touch_buffer\22\09\09\09\09\09"
module asm "__kstrtabns_touch_buffer:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+__lock_buffer\22, \22a\22\09"
module asm "\09.weak\09__crc___lock_buffer\09\09\09\09"
module asm "\09.long\09__crc___lock_buffer\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab___lock_buffer:\09\09\09\09\09"
module asm "\09.asciz \09\22__lock_buffer\22\09\09\09\09\09"
module asm "__kstrtabns___lock_buffer:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+unlock_buffer\22, \22a\22\09"
module asm "\09.weak\09__crc_unlock_buffer\09\09\09\09"
module asm "\09.long\09__crc_unlock_buffer\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_unlock_buffer:\09\09\09\09\09"
module asm "\09.asciz \09\22unlock_buffer\22\09\09\09\09\09"
module asm "__kstrtabns_unlock_buffer:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+buffer_check_dirty_writeback\22, \22a\22\09"
module asm "\09.weak\09__crc_buffer_check_dirty_writeback\09\09\09\09"
module asm "\09.long\09__crc_buffer_check_dirty_writeback\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_buffer_check_dirty_writeback:\09\09\09\09\09"
module asm "\09.asciz \09\22buffer_check_dirty_writeback\22\09\09\09\09\09"
module asm "__kstrtabns_buffer_check_dirty_writeback:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+__wait_on_buffer\22, \22a\22\09"
module asm "\09.weak\09__crc___wait_on_buffer\09\09\09\09"
module asm "\09.long\09__crc___wait_on_buffer\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab___wait_on_buffer:\09\09\09\09\09"
module asm "\09.asciz \09\22__wait_on_buffer\22\09\09\09\09\09"
module asm "__kstrtabns___wait_on_buffer:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+end_buffer_read_sync\22, \22a\22\09"
module asm "\09.weak\09__crc_end_buffer_read_sync\09\09\09\09"
module asm "\09.long\09__crc_end_buffer_read_sync\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_end_buffer_read_sync:\09\09\09\09\09"
module asm "\09.asciz \09\22end_buffer_read_sync\22\09\09\09\09\09"
module asm "__kstrtabns_end_buffer_read_sync:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+end_buffer_write_sync\22, \22a\22\09"
module asm "\09.weak\09__crc_end_buffer_write_sync\09\09\09\09"
module asm "\09.long\09__crc_end_buffer_write_sync\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_end_buffer_write_sync:\09\09\09\09\09"
module asm "\09.asciz \09\22end_buffer_write_sync\22\09\09\09\09\09"
module asm "__kstrtabns_end_buffer_write_sync:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+end_buffer_async_write\22, \22a\22\09"
module asm "\09.weak\09__crc_end_buffer_async_write\09\09\09\09"
module asm "\09.long\09__crc_end_buffer_async_write\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_end_buffer_async_write:\09\09\09\09\09"
module asm "\09.asciz \09\22end_buffer_async_write\22\09\09\09\09\09"
module asm "__kstrtabns_end_buffer_async_write:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+mark_buffer_async_write\22, \22a\22\09"
module asm "\09.weak\09__crc_mark_buffer_async_write\09\09\09\09"
module asm "\09.long\09__crc_mark_buffer_async_write\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_mark_buffer_async_write:\09\09\09\09\09"
module asm "\09.asciz \09\22mark_buffer_async_write\22\09\09\09\09\09"
module asm "__kstrtabns_mark_buffer_async_write:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+sync_mapping_buffers\22, \22a\22\09"
module asm "\09.weak\09__crc_sync_mapping_buffers\09\09\09\09"
module asm "\09.long\09__crc_sync_mapping_buffers\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_sync_mapping_buffers:\09\09\09\09\09"
module asm "\09.asciz \09\22sync_mapping_buffers\22\09\09\09\09\09"
module asm "__kstrtabns_sync_mapping_buffers:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+mark_buffer_dirty_inode\22, \22a\22\09"
module asm "\09.weak\09__crc_mark_buffer_dirty_inode\09\09\09\09"
module asm "\09.long\09__crc_mark_buffer_dirty_inode\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_mark_buffer_dirty_inode:\09\09\09\09\09"
module asm "\09.asciz \09\22mark_buffer_dirty_inode\22\09\09\09\09\09"
module asm "__kstrtabns_mark_buffer_dirty_inode:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+__set_page_dirty_buffers\22, \22a\22\09"
module asm "\09.weak\09__crc___set_page_dirty_buffers\09\09\09\09"
module asm "\09.long\09__crc___set_page_dirty_buffers\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab___set_page_dirty_buffers:\09\09\09\09\09"
module asm "\09.asciz \09\22__set_page_dirty_buffers\22\09\09\09\09\09"
module asm "__kstrtabns___set_page_dirty_buffers:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+invalidate_inode_buffers\22, \22a\22\09"
module asm "\09.weak\09__crc_invalidate_inode_buffers\09\09\09\09"
module asm "\09.long\09__crc_invalidate_inode_buffers\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_invalidate_inode_buffers:\09\09\09\09\09"
module asm "\09.asciz \09\22invalidate_inode_buffers\22\09\09\09\09\09"
module asm "__kstrtabns_invalidate_inode_buffers:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab_gpl+alloc_page_buffers\22, \22a\22\09"
module asm "\09.weak\09__crc_alloc_page_buffers\09\09\09\09"
module asm "\09.long\09__crc_alloc_page_buffers\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_alloc_page_buffers:\09\09\09\09\09"
module asm "\09.asciz \09\22alloc_page_buffers\22\09\09\09\09\09"
module asm "__kstrtabns_alloc_page_buffers:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+mark_buffer_dirty\22, \22a\22\09"
module asm "\09.weak\09__crc_mark_buffer_dirty\09\09\09\09"
module asm "\09.long\09__crc_mark_buffer_dirty\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_mark_buffer_dirty:\09\09\09\09\09"
module asm "\09.asciz \09\22mark_buffer_dirty\22\09\09\09\09\09"
module asm "__kstrtabns_mark_buffer_dirty:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+mark_buffer_write_io_error\22, \22a\22\09"
module asm "\09.weak\09__crc_mark_buffer_write_io_error\09\09\09\09"
module asm "\09.long\09__crc_mark_buffer_write_io_error\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_mark_buffer_write_io_error:\09\09\09\09\09"
module asm "\09.asciz \09\22mark_buffer_write_io_error\22\09\09\09\09\09"
module asm "__kstrtabns_mark_buffer_write_io_error:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+__brelse\22, \22a\22\09"
module asm "\09.weak\09__crc___brelse\09\09\09\09"
module asm "\09.long\09__crc___brelse\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab___brelse:\09\09\09\09\09"
module asm "\09.asciz \09\22__brelse\22\09\09\09\09\09"
module asm "__kstrtabns___brelse:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+__bforget\22, \22a\22\09"
module asm "\09.weak\09__crc___bforget\09\09\09\09"
module asm "\09.long\09__crc___bforget\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab___bforget:\09\09\09\09\09"
module asm "\09.asciz \09\22__bforget\22\09\09\09\09\09"
module asm "__kstrtabns___bforget:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+__find_get_block\22, \22a\22\09"
module asm "\09.weak\09__crc___find_get_block\09\09\09\09"
module asm "\09.long\09__crc___find_get_block\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab___find_get_block:\09\09\09\09\09"
module asm "\09.asciz \09\22__find_get_block\22\09\09\09\09\09"
module asm "__kstrtabns___find_get_block:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+__getblk_gfp\22, \22a\22\09"
module asm "\09.weak\09__crc___getblk_gfp\09\09\09\09"
module asm "\09.long\09__crc___getblk_gfp\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab___getblk_gfp:\09\09\09\09\09"
module asm "\09.asciz \09\22__getblk_gfp\22\09\09\09\09\09"
module asm "__kstrtabns___getblk_gfp:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+__breadahead\22, \22a\22\09"
module asm "\09.weak\09__crc___breadahead\09\09\09\09"
module asm "\09.long\09__crc___breadahead\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab___breadahead:\09\09\09\09\09"
module asm "\09.asciz \09\22__breadahead\22\09\09\09\09\09"
module asm "__kstrtabns___breadahead:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+__breadahead_gfp\22, \22a\22\09"
module asm "\09.weak\09__crc___breadahead_gfp\09\09\09\09"
module asm "\09.long\09__crc___breadahead_gfp\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab___breadahead_gfp:\09\09\09\09\09"
module asm "\09.asciz \09\22__breadahead_gfp\22\09\09\09\09\09"
module asm "__kstrtabns___breadahead_gfp:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+__bread_gfp\22, \22a\22\09"
module asm "\09.weak\09__crc___bread_gfp\09\09\09\09"
module asm "\09.long\09__crc___bread_gfp\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab___bread_gfp:\09\09\09\09\09"
module asm "\09.asciz \09\22__bread_gfp\22\09\09\09\09\09"
module asm "__kstrtabns___bread_gfp:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab_gpl+invalidate_bh_lrus\22, \22a\22\09"
module asm "\09.weak\09__crc_invalidate_bh_lrus\09\09\09\09"
module asm "\09.long\09__crc_invalidate_bh_lrus\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_invalidate_bh_lrus:\09\09\09\09\09"
module asm "\09.asciz \09\22invalidate_bh_lrus\22\09\09\09\09\09"
module asm "__kstrtabns_invalidate_bh_lrus:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+set_bh_page\22, \22a\22\09"
module asm "\09.weak\09__crc_set_bh_page\09\09\09\09"
module asm "\09.long\09__crc_set_bh_page\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_set_bh_page:\09\09\09\09\09"
module asm "\09.asciz \09\22set_bh_page\22\09\09\09\09\09"
module asm "__kstrtabns_set_bh_page:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+block_invalidatepage\22, \22a\22\09"
module asm "\09.weak\09__crc_block_invalidatepage\09\09\09\09"
module asm "\09.long\09__crc_block_invalidatepage\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_block_invalidatepage:\09\09\09\09\09"
module asm "\09.asciz \09\22block_invalidatepage\22\09\09\09\09\09"
module asm "__kstrtabns_block_invalidatepage:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+create_empty_buffers\22, \22a\22\09"
module asm "\09.weak\09__crc_create_empty_buffers\09\09\09\09"
module asm "\09.long\09__crc_create_empty_buffers\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_create_empty_buffers:\09\09\09\09\09"
module asm "\09.asciz \09\22create_empty_buffers\22\09\09\09\09\09"
module asm "__kstrtabns_create_empty_buffers:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+clean_bdev_aliases\22, \22a\22\09"
module asm "\09.weak\09__crc_clean_bdev_aliases\09\09\09\09"
module asm "\09.long\09__crc_clean_bdev_aliases\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_clean_bdev_aliases:\09\09\09\09\09"
module asm "\09.asciz \09\22clean_bdev_aliases\22\09\09\09\09\09"
module asm "__kstrtabns_clean_bdev_aliases:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+__block_write_full_page\22, \22a\22\09"
module asm "\09.weak\09__crc___block_write_full_page\09\09\09\09"
module asm "\09.long\09__crc___block_write_full_page\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab___block_write_full_page:\09\09\09\09\09"
module asm "\09.asciz \09\22__block_write_full_page\22\09\09\09\09\09"
module asm "__kstrtabns___block_write_full_page:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+page_zero_new_buffers\22, \22a\22\09"
module asm "\09.weak\09__crc_page_zero_new_buffers\09\09\09\09"
module asm "\09.long\09__crc_page_zero_new_buffers\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_page_zero_new_buffers:\09\09\09\09\09"
module asm "\09.asciz \09\22page_zero_new_buffers\22\09\09\09\09\09"
module asm "__kstrtabns_page_zero_new_buffers:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+__block_write_begin\22, \22a\22\09"
module asm "\09.weak\09__crc___block_write_begin\09\09\09\09"
module asm "\09.long\09__crc___block_write_begin\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab___block_write_begin:\09\09\09\09\09"
module asm "\09.asciz \09\22__block_write_begin\22\09\09\09\09\09"
module asm "__kstrtabns___block_write_begin:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+block_write_begin\22, \22a\22\09"
module asm "\09.weak\09__crc_block_write_begin\09\09\09\09"
module asm "\09.long\09__crc_block_write_begin\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_block_write_begin:\09\09\09\09\09"
module asm "\09.asciz \09\22block_write_begin\22\09\09\09\09\09"
module asm "__kstrtabns_block_write_begin:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+block_write_end\22, \22a\22\09"
module asm "\09.weak\09__crc_block_write_end\09\09\09\09"
module asm "\09.long\09__crc_block_write_end\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_block_write_end:\09\09\09\09\09"
module asm "\09.asciz \09\22block_write_end\22\09\09\09\09\09"
module asm "__kstrtabns_block_write_end:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+generic_write_end\22, \22a\22\09"
module asm "\09.weak\09__crc_generic_write_end\09\09\09\09"
module asm "\09.long\09__crc_generic_write_end\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_generic_write_end:\09\09\09\09\09"
module asm "\09.asciz \09\22generic_write_end\22\09\09\09\09\09"
module asm "__kstrtabns_generic_write_end:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+block_is_partially_uptodate\22, \22a\22\09"
module asm "\09.weak\09__crc_block_is_partially_uptodate\09\09\09\09"
module asm "\09.long\09__crc_block_is_partially_uptodate\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_block_is_partially_uptodate:\09\09\09\09\09"
module asm "\09.asciz \09\22block_is_partially_uptodate\22\09\09\09\09\09"
module asm "__kstrtabns_block_is_partially_uptodate:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+block_read_full_page\22, \22a\22\09"
module asm "\09.weak\09__crc_block_read_full_page\09\09\09\09"
module asm "\09.long\09__crc_block_read_full_page\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_block_read_full_page:\09\09\09\09\09"
module asm "\09.asciz \09\22block_read_full_page\22\09\09\09\09\09"
module asm "__kstrtabns_block_read_full_page:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+generic_cont_expand_simple\22, \22a\22\09"
module asm "\09.weak\09__crc_generic_cont_expand_simple\09\09\09\09"
module asm "\09.long\09__crc_generic_cont_expand_simple\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_generic_cont_expand_simple:\09\09\09\09\09"
module asm "\09.asciz \09\22generic_cont_expand_simple\22\09\09\09\09\09"
module asm "__kstrtabns_generic_cont_expand_simple:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+cont_write_begin\22, \22a\22\09"
module asm "\09.weak\09__crc_cont_write_begin\09\09\09\09"
module asm "\09.long\09__crc_cont_write_begin\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_cont_write_begin:\09\09\09\09\09"
module asm "\09.asciz \09\22cont_write_begin\22\09\09\09\09\09"
module asm "__kstrtabns_cont_write_begin:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+block_commit_write\22, \22a\22\09"
module asm "\09.weak\09__crc_block_commit_write\09\09\09\09"
module asm "\09.long\09__crc_block_commit_write\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_block_commit_write:\09\09\09\09\09"
module asm "\09.asciz \09\22block_commit_write\22\09\09\09\09\09"
module asm "__kstrtabns_block_commit_write:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+block_page_mkwrite\22, \22a\22\09"
module asm "\09.weak\09__crc_block_page_mkwrite\09\09\09\09"
module asm "\09.long\09__crc_block_page_mkwrite\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_block_page_mkwrite:\09\09\09\09\09"
module asm "\09.asciz \09\22block_page_mkwrite\22\09\09\09\09\09"
module asm "__kstrtabns_block_page_mkwrite:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+nobh_write_begin\22, \22a\22\09"
module asm "\09.weak\09__crc_nobh_write_begin\09\09\09\09"
module asm "\09.long\09__crc_nobh_write_begin\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_nobh_write_begin:\09\09\09\09\09"
module asm "\09.asciz \09\22nobh_write_begin\22\09\09\09\09\09"
module asm "__kstrtabns_nobh_write_begin:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+nobh_write_end\22, \22a\22\09"
module asm "\09.weak\09__crc_nobh_write_end\09\09\09\09"
module asm "\09.long\09__crc_nobh_write_end\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_nobh_write_end:\09\09\09\09\09"
module asm "\09.asciz \09\22nobh_write_end\22\09\09\09\09\09"
module asm "__kstrtabns_nobh_write_end:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+nobh_writepage\22, \22a\22\09"
module asm "\09.weak\09__crc_nobh_writepage\09\09\09\09"
module asm "\09.long\09__crc_nobh_writepage\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_nobh_writepage:\09\09\09\09\09"
module asm "\09.asciz \09\22nobh_writepage\22\09\09\09\09\09"
module asm "__kstrtabns_nobh_writepage:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+nobh_truncate_page\22, \22a\22\09"
module asm "\09.weak\09__crc_nobh_truncate_page\09\09\09\09"
module asm "\09.long\09__crc_nobh_truncate_page\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_nobh_truncate_page:\09\09\09\09\09"
module asm "\09.asciz \09\22nobh_truncate_page\22\09\09\09\09\09"
module asm "__kstrtabns_nobh_truncate_page:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+block_truncate_page\22, \22a\22\09"
module asm "\09.weak\09__crc_block_truncate_page\09\09\09\09"
module asm "\09.long\09__crc_block_truncate_page\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_block_truncate_page:\09\09\09\09\09"
module asm "\09.asciz \09\22block_truncate_page\22\09\09\09\09\09"
module asm "__kstrtabns_block_truncate_page:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+block_write_full_page\22, \22a\22\09"
module asm "\09.weak\09__crc_block_write_full_page\09\09\09\09"
module asm "\09.long\09__crc_block_write_full_page\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_block_write_full_page:\09\09\09\09\09"
module asm "\09.asciz \09\22block_write_full_page\22\09\09\09\09\09"
module asm "__kstrtabns_block_write_full_page:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+generic_block_bmap\22, \22a\22\09"
module asm "\09.weak\09__crc_generic_block_bmap\09\09\09\09"
module asm "\09.long\09__crc_generic_block_bmap\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_generic_block_bmap:\09\09\09\09\09"
module asm "\09.asciz \09\22generic_block_bmap\22\09\09\09\09\09"
module asm "__kstrtabns_generic_block_bmap:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+submit_bh\22, \22a\22\09"
module asm "\09.weak\09__crc_submit_bh\09\09\09\09"
module asm "\09.long\09__crc_submit_bh\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_submit_bh:\09\09\09\09\09"
module asm "\09.asciz \09\22submit_bh\22\09\09\09\09\09"
module asm "__kstrtabns_submit_bh:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+ll_rw_block\22, \22a\22\09"
module asm "\09.weak\09__crc_ll_rw_block\09\09\09\09"
module asm "\09.long\09__crc_ll_rw_block\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_ll_rw_block:\09\09\09\09\09"
module asm "\09.asciz \09\22ll_rw_block\22\09\09\09\09\09"
module asm "__kstrtabns_ll_rw_block:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+write_dirty_buffer\22, \22a\22\09"
module asm "\09.weak\09__crc_write_dirty_buffer\09\09\09\09"
module asm "\09.long\09__crc_write_dirty_buffer\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_write_dirty_buffer:\09\09\09\09\09"
module asm "\09.asciz \09\22write_dirty_buffer\22\09\09\09\09\09"
module asm "__kstrtabns_write_dirty_buffer:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+__sync_dirty_buffer\22, \22a\22\09"
module asm "\09.weak\09__crc___sync_dirty_buffer\09\09\09\09"
module asm "\09.long\09__crc___sync_dirty_buffer\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab___sync_dirty_buffer:\09\09\09\09\09"
module asm "\09.asciz \09\22__sync_dirty_buffer\22\09\09\09\09\09"
module asm "__kstrtabns___sync_dirty_buffer:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+sync_dirty_buffer\22, \22a\22\09"
module asm "\09.weak\09__crc_sync_dirty_buffer\09\09\09\09"
module asm "\09.long\09__crc_sync_dirty_buffer\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_sync_dirty_buffer:\09\09\09\09\09"
module asm "\09.asciz \09\22sync_dirty_buffer\22\09\09\09\09\09"
module asm "__kstrtabns_sync_dirty_buffer:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+try_to_free_buffers\22, \22a\22\09"
module asm "\09.weak\09__crc_try_to_free_buffers\09\09\09\09"
module asm "\09.long\09__crc_try_to_free_buffers\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_try_to_free_buffers:\09\09\09\09\09"
module asm "\09.asciz \09\22try_to_free_buffers\22\09\09\09\09\09"
module asm "__kstrtabns_try_to_free_buffers:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+alloc_buffer_head\22, \22a\22\09"
module asm "\09.weak\09__crc_alloc_buffer_head\09\09\09\09"
module asm "\09.long\09__crc_alloc_buffer_head\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_alloc_buffer_head:\09\09\09\09\09"
module asm "\09.asciz \09\22alloc_buffer_head\22\09\09\09\09\09"
module asm "__kstrtabns_alloc_buffer_head:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+free_buffer_head\22, \22a\22\09"
module asm "\09.weak\09__crc_free_buffer_head\09\09\09\09"
module asm "\09.long\09__crc_free_buffer_head\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_free_buffer_head:\09\09\09\09\09"
module asm "\09.asciz \09\22free_buffer_head\22\09\09\09\09\09"
module asm "__kstrtabns_free_buffer_head:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+bh_uptodate_or_lock\22, \22a\22\09"
module asm "\09.weak\09__crc_bh_uptodate_or_lock\09\09\09\09"
module asm "\09.long\09__crc_bh_uptodate_or_lock\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_bh_uptodate_or_lock:\09\09\09\09\09"
module asm "\09.asciz \09\22bh_uptodate_or_lock\22\09\09\09\09\09"
module asm "__kstrtabns_bh_uptodate_or_lock:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+bh_submit_read\22, \22a\22\09"
module asm "\09.weak\09__crc_bh_submit_read\09\09\09\09"
module asm "\09.long\09__crc_bh_submit_read\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_bh_submit_read:\09\09\09\09\09"
module asm "\09.asciz \09\22bh_submit_read\22\09\09\09\09\09"
module asm "__kstrtabns_bh_submit_read:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"

%struct.kernel_symbol = type { i32, ptr, ptr }
%struct.pi_entry = type { ptr, ptr, ptr, i32, ptr, ptr }
%struct.bh_lru = type { [16 x ptr] }
%struct.bh_accounting = type { i32, i32 }
%struct.lock_class_key = type { %union.anon.2 }
%union.anon.2 = type { %struct.hlist_node }
%struct.hlist_node = type { ptr, ptr }
%struct.tracepoint = type { ptr, %struct.static_key, ptr, ptr, ptr, ptr, ptr, ptr }
%struct.static_key = type { %struct.atomic_t, %union.anon.74 }
%struct.atomic_t = type { i32 }
%union.anon.74 = type { i32 }
%struct.cpumask = type { [1 x i32] }
%struct.ratelimit_state = type { %struct.raw_spinlock, i32, i32, i32, i32, i32, i32 }
%struct.raw_spinlock = type { %struct.arch_spinlock_t, i32, i32, ptr, %struct.lockdep_map }
%struct.arch_spinlock_t = type { %union.anon.1 }
%union.anon.1 = type { i32 }
%struct.lockdep_map = type { ptr, [2 x ptr], ptr, i8, i8, i8, i32, i32 }
%struct.bio_set = type { ptr, i32, ptr, %struct.mempool_s, %struct.mempool_s, %struct.mempool_s, %struct.mempool_s, i32, %struct.spinlock, %struct.bio_list, %struct.work_struct, ptr, %struct.hlist_node }
%struct.mempool_s = type { %struct.spinlock, i32, i32, ptr, ptr, ptr, ptr, %struct.wait_queue_head }
%struct.wait_queue_head = type { %struct.spinlock, %struct.list_head }
%struct.list_head = type { ptr, ptr }
%struct.spinlock = type { %union.anon.0 }
%union.anon.0 = type { %struct.raw_spinlock }
%struct.bio_list = type { ptr, ptr }
%struct.work_struct = type { %struct.atomic_t, %struct.list_head, ptr, %struct.lockdep_map }
%struct.buffer_head = type { i32, ptr, ptr, i64, i32, ptr, ptr, ptr, ptr, %struct.list_head, ptr, %struct.atomic_t, %struct.spinlock }
%struct.thread_info = type { i32, i32, ptr, i32, i32, %struct.cpu_context_save, i32, [16 x i8], [2 x i32], %union.fp_state, %union.vfp_state, i32 }
%struct.cpu_context_save = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [2 x i32] }
%union.fp_state = type { %struct.iwmmxt_struct }
%struct.iwmmxt_struct = type { [38 x i32] }
%union.vfp_state = type { %struct.vfp_hard_struct }
%struct.vfp_hard_struct = type { [32 x i64], i32, i32, i32, i32, i32 }
%struct.page = type { i32, %union.anon, %union.anon.107, %struct.atomic_t, i32 }
%union.anon = type { %struct.anon }
%struct.anon = type { %struct.list_head, ptr, i32, i32 }
%union.anon.107 = type { %struct.atomic_t }
%struct.inode = type { i16, i16, %struct.kuid_t, %struct.kgid_t, i32, ptr, ptr, ptr, ptr, ptr, ptr, i32, %union.anon.108, i32, i64, %struct.timespec64, %struct.timespec64, %struct.timespec64, %struct.spinlock, i16, i8, i8, i64, %struct.seqcount, i32, %struct.rw_semaphore, i32, i32, %struct.hlist_node, %struct.list_head, ptr, i32, i16, i16, %struct.list_head, %struct.list_head, %struct.list_head, %union.anon.109, %struct.atomic64_t, %struct.atomic64_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %union.anon.110, ptr, %struct.address_space, %struct.list_head, %union.anon.111, i32, i32, ptr, ptr, ptr, ptr }
%struct.kuid_t = type { i32 }
%struct.kgid_t = type { i32 }
%union.anon.108 = type { i32 }
%struct.timespec64 = type { i64, i32 }
%struct.seqcount = type { i32, %struct.lockdep_map }
%struct.rw_semaphore = type { %struct.atomic_t, %struct.atomic_t, %struct.optimistic_spin_queue, %struct.raw_spinlock, %struct.list_head, ptr, %struct.lockdep_map }
%struct.optimistic_spin_queue = type { %struct.atomic_t }
%union.anon.109 = type { %struct.callback_head }
%struct.callback_head = type { ptr, ptr }
%struct.atomic64_t = type { i64 }
%union.anon.110 = type { ptr }
%struct.address_space = type { ptr, %struct.xarray, %struct.rw_semaphore, i32, %struct.atomic_t, %struct.rb_root_cached, %struct.rw_semaphore, i32, i32, ptr, i32, i32, %struct.spinlock, %struct.list_head, ptr }
%struct.xarray = type { %struct.spinlock, i32, ptr }
%struct.rb_root_cached = type { %struct.rb_root, ptr }
%struct.rb_root = type { ptr }
%union.anon.111 = type { ptr }
%struct.super_block = type { %struct.list_head, i32, i8, i32, i64, ptr, ptr, ptr, ptr, ptr, i32, i32, i32, ptr, %struct.rw_semaphore, i32, %struct.atomic_t, ptr, ptr, ptr, ptr, ptr, ptr, i16, %struct.hlist_bl_head, %struct.list_head, ptr, ptr, ptr, %struct.hlist_node, i32, %struct.quota_info, %struct.sb_writers, ptr, i32, i64, i64, i32, ptr, [32 x i8], %struct.uuid_t, i32, i32, %struct.mutex, ptr, ptr, %struct.shrinker, %struct.atomic_t, %struct.atomic_t, i32, i32, ptr, %struct.hlist_head, ptr, %struct.list_lru, %struct.list_lru, %struct.callback_head, %struct.work_struct, %struct.mutex, i32, [24 x i8], %struct.spinlock, %struct.list_head, %struct.spinlock, %struct.list_head, [24 x i8] }
%struct.hlist_bl_head = type { ptr }
%struct.quota_info = type { i32, %struct.rw_semaphore, [3 x ptr], [3 x %struct.mem_dqinfo], [3 x ptr] }
%struct.mem_dqinfo = type { ptr, i32, %struct.list_head, i32, i32, i32, i64, i64, ptr }
%struct.sb_writers = type { i32, %struct.wait_queue_head, [3 x %struct.percpu_rw_semaphore] }
%struct.percpu_rw_semaphore = type { %struct.rcu_sync, ptr, %struct.rcuwait, %struct.wait_queue_head, %struct.atomic_t, %struct.lockdep_map }
%struct.rcu_sync = type { i32, i32, %struct.wait_queue_head, %struct.callback_head }
%struct.rcuwait = type { ptr }
%struct.uuid_t = type { [16 x i8] }
%struct.shrinker = type { ptr, ptr, i32, i32, i32, %struct.list_head, i32, ptr }
%struct.hlist_head = type { ptr }
%struct.list_lru = type { ptr, %struct.list_head, i32, i8 }
%struct.mutex = type { %struct.atomic_t, %struct.raw_spinlock, %struct.optimistic_spin_queue, %struct.list_head, ptr, %struct.lockdep_map }
%struct.block_device = type { i64, i64, ptr, i32, i8, i32, i32, ptr, ptr, ptr, %struct.device, ptr, i32, i8, ptr, i8, %struct.spinlock, ptr, ptr, i32, %struct.mutex, ptr, ptr, i8 }
%struct.device = type { %struct.kobject, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, %struct.mutex, %struct.mutex, %struct.dev_links_info, %struct.dev_pm_info, ptr, ptr, ptr, %struct.dev_msi_info, ptr, ptr, i64, i64, ptr, ptr, %struct.list_head, ptr, ptr, %struct.dev_archdata, ptr, ptr, i32, i32, %struct.spinlock, %struct.list_head, ptr, ptr, ptr, ptr, ptr, i32, i8 }
%struct.kobject = type { ptr, %struct.list_head, ptr, ptr, ptr, ptr, %struct.kref, %struct.delayed_work, i8 }
%struct.kref = type { %struct.refcount_struct }
%struct.refcount_struct = type { %struct.atomic_t }
%struct.delayed_work = type { %struct.work_struct, %struct.timer_list, ptr, i32 }
%struct.timer_list = type { %struct.hlist_node, i32, ptr, i32, %struct.lockdep_map }
%struct.dev_links_info = type { %struct.list_head, %struct.list_head, %struct.list_head, i32 }
%struct.dev_pm_info = type { %struct.pm_message, i16, i32, %struct.spinlock, %struct.list_head, %struct.completion, ptr, i8, %struct.hrtimer, i64, %struct.work_struct, %struct.wait_queue_head, ptr, %struct.atomic_t, %struct.atomic_t, i16, i32, i32, i32, i32, i32, i32, i64, i64, i64, i64, ptr, ptr, ptr }
%struct.pm_message = type { i32 }
%struct.completion = type { i32, %struct.swait_queue_head }
%struct.swait_queue_head = type { %struct.raw_spinlock, %struct.list_head }
%struct.hrtimer = type { %struct.timerqueue_node, i64, ptr, ptr, i8, i8, i8, i8 }
%struct.timerqueue_node = type { %struct.rb_node, i64 }
%struct.rb_node = type { i32, ptr, ptr }
%struct.dev_msi_info = type { ptr, ptr }
%struct.dev_archdata = type { ptr, i8 }
%struct.blk_plug = type { ptr, ptr, i16, i16, i8, i8, i8, %struct.list_head }
%struct.anon.113 = type { i32, %struct.list_head, ptr, i32, ptr, %struct.atomic_t, %struct.atomic_t, i32 }
%struct.obj_cgroup = type { %struct.percpu_ref, ptr, %struct.atomic_t, %union.anon.115 }
%struct.percpu_ref = type { i32, ptr }
%union.anon.115 = type { %struct.list_head }
%struct.task_struct = type { i32, ptr, %struct.refcount_struct, i32, i32, i32, %struct.__call_single_node, i32, i32, ptr, i32, i32, i32, i32, i32, i32, i32, [56 x i8], %struct.sched_entity, %struct.sched_rt_entity, %struct.sched_dl_entity, ptr, %struct.rb_node, i32, i32, ptr, [2 x %struct.uclamp_se], [2 x %struct.uclamp_se], [116 x i8], %struct.sched_statistics, i32, i32, i32, ptr, ptr, %struct.cpumask, ptr, i16, i16, i32, i8, i8, i32, %struct.list_head, i32, i32, %union.rcu_special, i8, %struct.list_head, %struct.sched_info, %struct.list_head, %struct.plist_node, %struct.rb_node, ptr, ptr, %struct.vmacache, %struct.task_rss_stat, i32, i32, i32, i32, i32, i32, i8, [3 x i8], i16, i32, %struct.restart_block, i32, i32, i32, ptr, ptr, %struct.list_head, %struct.list_head, ptr, %struct.list_head, %struct.list_head, ptr, [4 x %struct.hlist_node], %struct.list_head, %struct.list_head, ptr, ptr, ptr, ptr, i64, i64, i64, %struct.prev_cputime, i32, i32, i64, i64, i32, i32, %struct.posix_cputimers, ptr, ptr, ptr, ptr, [16 x i8], ptr, %struct.sysv_sem, %struct.sysv_shm, i32, i32, ptr, ptr, ptr, ptr, ptr, ptr, %struct.sigset_t, %struct.sigset_t, %struct.sigset_t, %struct.sigpending, i32, i32, i32, ptr, %struct.kuid_t, i32, %struct.seccomp, %struct.syscall_user_dispatch, i64, i64, %struct.spinlock, %struct.raw_spinlock, %struct.wake_q_node, %struct.rb_root_cached, ptr, ptr, ptr, i32, %struct.irqtrace_events, i32, i64, i32, i32, i32, i64, i32, i32, [48 x %struct.held_lock], i32, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i32, ptr, %struct.task_io_accounting, i32, i64, i64, i64, %struct.nodemask_t, %struct.seqcount_spinlock, i32, i32, ptr, %struct.list_head, ptr, %struct.list_head, ptr, %struct.mutex, i32, [2 x ptr], %struct.mutex, %struct.list_head, ptr, i32, i32, %struct.tlbflush_unmap_batch, %union.anon.79, ptr, %struct.page_frag, ptr, i32, i32, i32, i32, i32, i32, [32 x %struct.latency_record], i64, i64, i32, ptr, i32, i32, i32, i32, ptr, ptr, i64, i32, i32, ptr, i32, i32, i32, ptr, ptr, ptr, i32, i32, %struct.kmap_ctrl, i32, i32, ptr, ptr, ptr, ptr, %struct.llist_head, %struct.thread_struct, [84 x i8] }
%struct.__call_single_node = type { %struct.llist_node, %union.anon.10 }
%struct.llist_node = type { ptr }
%union.anon.10 = type { i32 }
%struct.sched_entity = type { %struct.load_weight, %struct.rb_node, %struct.list_head, i32, i64, i64, i64, i64, i64, i32, ptr, ptr, ptr, i32, [36 x i8], %struct.sched_avg }
%struct.load_weight = type { i32, i32 }
%struct.sched_avg = type { i64, i64, i64, i32, i32, i32, i32, i32, [4 x i8], %struct.util_est, [72 x i8] }
%struct.util_est = type { i32, i32 }
%struct.sched_rt_entity = type { %struct.list_head, i32, i32, i32, i16, i16, ptr, ptr, ptr, ptr }
%struct.sched_dl_entity = type { %struct.rb_node, i64, i64, i64, i64, i64, i64, i64, i32, i8, %struct.hrtimer, %struct.hrtimer, ptr }
%struct.uclamp_se = type { i16, [2 x i8] }
%struct.sched_statistics = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, [24 x i8] }
%union.rcu_special = type { i32 }
%struct.sched_info = type { i32, i64, i64, i64 }
%struct.plist_node = type { i32, %struct.list_head, %struct.list_head }
%struct.vmacache = type { i64, [4 x ptr] }
%struct.task_rss_stat = type { i32, [4 x i32] }
%struct.restart_block = type { i32, ptr, %union.anon.12 }
%union.anon.12 = type { %struct.anon.13 }
%struct.anon.13 = type { ptr, i32, i32, i32, i64, ptr }
%struct.prev_cputime = type { i64, i64, %struct.raw_spinlock }
%struct.posix_cputimers = type { [3 x %struct.posix_cputimer_base], i32, i32 }
%struct.posix_cputimer_base = type { i64, %struct.timerqueue_head }
%struct.timerqueue_head = type { %struct.rb_root_cached }
%struct.sysv_sem = type { ptr }
%struct.sysv_shm = type { %struct.list_head }
%struct.sigset_t = type { [2 x i32] }
%struct.sigpending = type { %struct.list_head, %struct.sigset_t }
%struct.seccomp = type { i32, %struct.atomic_t, ptr }
%struct.syscall_user_dispatch = type {}
%struct.wake_q_node = type { ptr }
%struct.irqtrace_events = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.held_lock = type { i64, i32, ptr, ptr, i64, i64, i32, i32 }
%struct.task_io_accounting = type { i64, i64, i64, i64, i64, i64, i64 }
%struct.nodemask_t = type { [1 x i32] }
%struct.seqcount_spinlock = type { %struct.seqcount, ptr }
%struct.tlbflush_unmap_batch = type {}
%union.anon.79 = type { %struct.callback_head }
%struct.page_frag = type { ptr, i16, i16 }
%struct.latency_record = type { [12 x i32], i32, i32, i32 }
%struct.kmap_ctrl = type { i32, [33 x i32] }
%struct.llist_head = type { ptr }
%struct.thread_struct = type { i32, i32, i32, %struct.debug_info }
%struct.debug_info = type { [32 x ptr] }
%struct.request_queue = type { ptr, ptr, %struct.percpu_ref, ptr, ptr, ptr, ptr, i32, ptr, i32, ptr, i32, %struct.atomic_t, i32, %struct.spinlock, ptr, %struct.kobject, ptr, %struct.blk_integrity, ptr, i32, i32, i32, i32, ptr, i32, i32, ptr, ptr, %struct.timer_list, %struct.work_struct, %struct.atomic_t, ptr, %struct.list_head, [1 x i32], ptr, %struct.list_head, %struct.queue_limits, i32, i32, ptr, ptr, i32, i32, i32, %struct.mutex, ptr, ptr, %struct.list_head, %struct.spinlock, %struct.delayed_work, %struct.mutex, %struct.mutex, %struct.list_head, %struct.spinlock, i32, ptr, %struct.callback_head, %struct.wait_queue_head, %struct.mutex, i32, ptr, %struct.list_head, %struct.bio_set, ptr, ptr, ptr, i8, [5 x i64], ptr, [0 x %struct.srcu_struct] }
%struct.blk_integrity = type { ptr, i8, i8, i8, i8 }
%struct.queue_limits = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i8, i8, i8, i32 }
%struct.srcu_struct = type { [3 x %struct.srcu_node], [3 x ptr], %struct.mutex, %struct.spinlock, %struct.mutex, i32, i32, i32, i32, i32, ptr, i32, %struct.mutex, %struct.completion, %struct.atomic_t, %struct.delayed_work, %struct.lockdep_map }
%struct.srcu_node = type { %struct.spinlock, [4 x i32], [4 x i32], i32, ptr, i32, i32 }
%struct.pagevec = type { i8, i8, [15 x ptr] }
%struct.writeback_control = type { i32, i32, i64, i64, i32, i16, ptr, ptr, i32, i32, i32, i32, i32, i32 }
%struct.bio = type { ptr, ptr, i32, i16, i16, i16, i8, %struct.atomic_t, %struct.bvec_iter, i32, ptr, ptr, ptr, %struct.bio_issue, i64, ptr, %union.anon.30, i16, i16, %struct.atomic_t, ptr, ptr, [0 x %struct.bio_vec] }
%struct.bvec_iter = type <{ i64, i32, i32, i32 }>
%struct.bio_issue = type { i64 }
%union.anon.30 = type { ptr }
%struct.bio_vec = type { ptr, i32, i32 }
%struct.bdi_writeback = type { ptr, i32, i32, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, %struct.spinlock, %struct.atomic_t, [4 x %struct.percpu_counter], i32, i32, i32, i32, i32, i32, i32, i32, %struct.fprop_local_percpu, i32, i32, %struct.spinlock, %struct.list_head, %struct.delayed_work, %struct.delayed_work, i32, %struct.list_head, %struct.percpu_ref, %struct.fprop_local_percpu, ptr, ptr, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, %union.anon.98 }
%struct.percpu_counter = type { %struct.raw_spinlock, i64, %struct.list_head, ptr }
%struct.fprop_local_percpu = type { %struct.percpu_counter, i32, %struct.raw_spinlock }
%union.anon.98 = type { %struct.work_struct }
%struct.iomap = type { i64, i64, i64, i16, i16, ptr, ptr, ptr, ptr, ptr }
%struct.vm_fault = type { %struct.anon.85, i32, ptr, ptr, %union.anon.86, ptr, ptr, ptr, ptr, ptr }
%struct.anon.85 = type { ptr, i32, i32, i32 }
%union.anon.86 = type { i32 }
%struct.vm_area_struct = type { i32, i32, ptr, ptr, %struct.rb_node, i32, ptr, i32, i32, %union.anon.83, %struct.list_head, ptr, ptr, i32, ptr, ptr, %struct.atomic_t, %struct.vm_userfaultfd_ctx }
%union.anon.83 = type { %struct.anon.84 }
%struct.anon.84 = type { %struct.rb_node, i32 }
%struct.vm_userfaultfd_ctx = type { ptr }
%struct.file = type { %union.anon.4, %struct.path, ptr, ptr, %struct.spinlock, i32, %struct.atomic_t, i32, i32, %struct.mutex, i64, %struct.fown_struct, ptr, %struct.file_ra_state, i64, ptr, ptr, ptr, ptr, i32, i32 }
%union.anon.4 = type { %struct.callback_head }
%struct.path = type { ptr, ptr }
%struct.fown_struct = type { %struct.rwlock_t, ptr, i32, %struct.kuid_t, %struct.kuid_t, i32 }
%struct.rwlock_t = type { %struct.arch_rwlock_t, i32, i32, ptr, %struct.lockdep_map }
%struct.arch_rwlock_t = type { i32 }
%struct.file_ra_state = type { i32, i32, i32, i32, i32, i64 }
%struct.address_space_operations = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%struct.decrypt_bh_ctx = type { %struct.work_struct, ptr }

@__kstrtab_touch_buffer = external dso_local constant [0 x i8], align 1
@__kstrtabns_touch_buffer = external dso_local constant [0 x i8], align 1
@__ksymtab_touch_buffer = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @touch_buffer to i32), ptr @__kstrtab_touch_buffer, ptr @__kstrtabns_touch_buffer }, section "___ksymtab+touch_buffer", align 4
@__kstrtab___lock_buffer = external dso_local constant [0 x i8], align 1
@__kstrtabns___lock_buffer = external dso_local constant [0 x i8], align 1
@__ksymtab___lock_buffer = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @__lock_buffer to i32), ptr @__kstrtab___lock_buffer, ptr @__kstrtabns___lock_buffer }, section "___ksymtab+__lock_buffer", align 4
@__kstrtab_unlock_buffer = external dso_local constant [0 x i8], align 1
@__kstrtabns_unlock_buffer = external dso_local constant [0 x i8], align 1
@__ksymtab_unlock_buffer = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @unlock_buffer to i32), ptr @__kstrtab_unlock_buffer, ptr @__kstrtabns_unlock_buffer }, section "___ksymtab+unlock_buffer", align 4
@__kstrtab_buffer_check_dirty_writeback = external dso_local constant [0 x i8], align 1
@__kstrtabns_buffer_check_dirty_writeback = external dso_local constant [0 x i8], align 1
@__ksymtab_buffer_check_dirty_writeback = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @buffer_check_dirty_writeback to i32), ptr @__kstrtab_buffer_check_dirty_writeback, ptr @__kstrtabns_buffer_check_dirty_writeback }, section "___ksymtab+buffer_check_dirty_writeback", align 4
@__kstrtab___wait_on_buffer = external dso_local constant [0 x i8], align 1
@__kstrtabns___wait_on_buffer = external dso_local constant [0 x i8], align 1
@__ksymtab___wait_on_buffer = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @__wait_on_buffer to i32), ptr @__kstrtab___wait_on_buffer, ptr @__kstrtabns___wait_on_buffer }, section "___ksymtab+__wait_on_buffer", align 4
@__kstrtab_end_buffer_read_sync = external dso_local constant [0 x i8], align 1
@__kstrtabns_end_buffer_read_sync = external dso_local constant [0 x i8], align 1
@__ksymtab_end_buffer_read_sync = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @end_buffer_read_sync to i32), ptr @__kstrtab_end_buffer_read_sync, ptr @__kstrtabns_end_buffer_read_sync }, section "___ksymtab+end_buffer_read_sync", align 4
@.str = internal constant { [23 x i8], [41 x i8] } { [23 x i8] c", lost sync page write\00", [41 x i8] zeroinitializer }, align 32
@__kstrtab_end_buffer_write_sync = external dso_local constant [0 x i8], align 1
@__kstrtabns_end_buffer_write_sync = external dso_local constant [0 x i8], align 1
@__ksymtab_end_buffer_write_sync = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @end_buffer_write_sync to i32), ptr @__kstrtab_end_buffer_write_sync, ptr @__kstrtabns_end_buffer_write_sync }, section "___ksymtab+end_buffer_write_sync", align 4
@.str.1 = internal constant { [24 x i8], [40 x i8] } { [24 x i8] c", lost async page write\00", [40 x i8] zeroinitializer }, align 32
@__kstrtab_end_buffer_async_write = external dso_local constant [0 x i8], align 1
@__kstrtabns_end_buffer_async_write = external dso_local constant [0 x i8], align 1
@__ksymtab_end_buffer_async_write = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @end_buffer_async_write to i32), ptr @__kstrtab_end_buffer_async_write, ptr @__kstrtabns_end_buffer_async_write }, section "___ksymtab+end_buffer_async_write", align 4
@__kstrtab_mark_buffer_async_write = external dso_local constant [0 x i8], align 1
@__kstrtabns_mark_buffer_async_write = external dso_local constant [0 x i8], align 1
@__ksymtab_mark_buffer_async_write = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @mark_buffer_async_write to i32), ptr @__kstrtab_mark_buffer_async_write, ptr @__kstrtabns_mark_buffer_async_write }, section "___ksymtab+mark_buffer_async_write", align 4
@emergency_thaw_bdev._entry = internal constant { %struct.pi_entry, [40 x i8] } { %struct.pi_entry { ptr @.str.2, ptr @.str.3, ptr @.str.4, i32 527, ptr null, ptr null }, [40 x i8] zeroinitializer }, align 32
@.str.2 = internal constant { [25 x i8], [39 x i8] } { [25 x i8] c"\014Emergency Thaw on %pg\0A\00", [39 x i8] zeroinitializer }, align 32
@.str.3 = internal constant { [20 x i8], [44 x i8] } { [20 x i8] c"emergency_thaw_bdev\00", [44 x i8] zeroinitializer }, align 32
@.str.4 = internal constant { [12 x i8], [20 x i8] } { [12 x i8] c"fs/buffer.c\00", [20 x i8] zeroinitializer }, align 32
@emergency_thaw_bdev._entry_ptr = internal global ptr @emergency_thaw_bdev._entry, section ".printk_index", align 4
@__kstrtab_sync_mapping_buffers = external dso_local constant [0 x i8], align 1
@__kstrtabns_sync_mapping_buffers = external dso_local constant [0 x i8], align 1
@__ksymtab_sync_mapping_buffers = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @sync_mapping_buffers to i32), ptr @__kstrtab_sync_mapping_buffers, ptr @__kstrtabns_sync_mapping_buffers }, section "___ksymtab+sync_mapping_buffers", align 4
@__kstrtab_mark_buffer_dirty_inode = external dso_local constant [0 x i8], align 1
@__kstrtabns_mark_buffer_dirty_inode = external dso_local constant [0 x i8], align 1
@__ksymtab_mark_buffer_dirty_inode = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @mark_buffer_dirty_inode to i32), ptr @__kstrtab_mark_buffer_dirty_inode, ptr @__kstrtabns_mark_buffer_dirty_inode }, section "___ksymtab+mark_buffer_dirty_inode", align 4
@__kstrtab___set_page_dirty_buffers = external dso_local constant [0 x i8], align 1
@__kstrtabns___set_page_dirty_buffers = external dso_local constant [0 x i8], align 1
@__ksymtab___set_page_dirty_buffers = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @__set_page_dirty_buffers to i32), ptr @__kstrtab___set_page_dirty_buffers, ptr @__kstrtabns___set_page_dirty_buffers }, section "___ksymtab+__set_page_dirty_buffers", align 4
@__kstrtab_invalidate_inode_buffers = external dso_local constant [0 x i8], align 1
@__kstrtabns_invalidate_inode_buffers = external dso_local constant [0 x i8], align 1
@__ksymtab_invalidate_inode_buffers = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @invalidate_inode_buffers to i32), ptr @__kstrtab_invalidate_inode_buffers, ptr @__kstrtabns_invalidate_inode_buffers }, section "___ksymtab+invalidate_inode_buffers", align 4
@__kstrtab_alloc_page_buffers = external dso_local constant [0 x i8], align 1
@__kstrtabns_alloc_page_buffers = external dso_local constant [0 x i8], align 1
@__ksymtab_alloc_page_buffers = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @alloc_page_buffers to i32), ptr @__kstrtab_alloc_page_buffers, ptr @__kstrtabns_alloc_page_buffers }, section "___ksymtab_gpl+alloc_page_buffers", align 4
@mark_buffer_dirty.__already_done = internal unnamed_addr global i1 false, section ".data.once", align 1
@__kstrtab_mark_buffer_dirty = external dso_local constant [0 x i8], align 1
@__kstrtabns_mark_buffer_dirty = external dso_local constant [0 x i8], align 1
@__ksymtab_mark_buffer_dirty = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @mark_buffer_dirty to i32), ptr @__kstrtab_mark_buffer_dirty, ptr @__kstrtabns_mark_buffer_dirty }, section "___ksymtab+mark_buffer_dirty", align 4
@__kstrtab_mark_buffer_write_io_error = external dso_local constant [0 x i8], align 1
@__kstrtabns_mark_buffer_write_io_error = external dso_local constant [0 x i8], align 1
@__ksymtab_mark_buffer_write_io_error = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @mark_buffer_write_io_error to i32), ptr @__kstrtab_mark_buffer_write_io_error, ptr @__kstrtabns_mark_buffer_write_io_error }, section "___ksymtab+mark_buffer_write_io_error", align 4
@.str.5 = internal constant { [43 x i8], [53 x i8] } { [43 x i8] c"\013VFS: brelse: Trying to free free buffer\0A\00", [53 x i8] zeroinitializer }, align 32
@__kstrtab___brelse = external dso_local constant [0 x i8], align 1
@__kstrtabns___brelse = external dso_local constant [0 x i8], align 1
@__ksymtab___brelse = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @__brelse to i32), ptr @__kstrtab___brelse, ptr @__kstrtabns___brelse }, section "___ksymtab+__brelse", align 4
@__kstrtab___bforget = external dso_local constant [0 x i8], align 1
@__kstrtabns___bforget = external dso_local constant [0 x i8], align 1
@__ksymtab___bforget = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @__bforget to i32), ptr @__kstrtab___bforget, ptr @__kstrtabns___bforget }, section "___ksymtab+__bforget", align 4
@bh_lrus = weak dso_local global %struct.bh_lru zeroinitializer, section ".data..percpu", align 4
@__kstrtab___find_get_block = external dso_local constant [0 x i8], align 1
@__kstrtabns___find_get_block = external dso_local constant [0 x i8], align 1
@__ksymtab___find_get_block = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @__find_get_block to i32), ptr @__kstrtab___find_get_block, ptr @__kstrtabns___find_get_block }, section "___ksymtab+__find_get_block", align 4
@__kstrtab___getblk_gfp = external dso_local constant [0 x i8], align 1
@__kstrtabns___getblk_gfp = external dso_local constant [0 x i8], align 1
@__ksymtab___getblk_gfp = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @__getblk_gfp to i32), ptr @__kstrtab___getblk_gfp, ptr @__kstrtabns___getblk_gfp }, section "___ksymtab+__getblk_gfp", align 4
@__kstrtab___breadahead = external dso_local constant [0 x i8], align 1
@__kstrtabns___breadahead = external dso_local constant [0 x i8], align 1
@__ksymtab___breadahead = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @__breadahead to i32), ptr @__kstrtab___breadahead, ptr @__kstrtabns___breadahead }, section "___ksymtab+__breadahead", align 4
@__kstrtab___breadahead_gfp = external dso_local constant [0 x i8], align 1
@__kstrtabns___breadahead_gfp = external dso_local constant [0 x i8], align 1
@__ksymtab___breadahead_gfp = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @__breadahead_gfp to i32), ptr @__kstrtab___breadahead_gfp, ptr @__kstrtabns___breadahead_gfp }, section "___ksymtab+__breadahead_gfp", align 4
@__kstrtab___bread_gfp = external dso_local constant [0 x i8], align 1
@__kstrtabns___bread_gfp = external dso_local constant [0 x i8], align 1
@__ksymtab___bread_gfp = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @__bread_gfp to i32), ptr @__kstrtab___bread_gfp, ptr @__kstrtabns___bread_gfp }, section "___ksymtab+__bread_gfp", align 4
@__per_cpu_offset = external dso_local local_unnamed_addr global [4 x i32], align 4
@__kstrtab_invalidate_bh_lrus = external dso_local constant [0 x i8], align 1
@__kstrtabns_invalidate_bh_lrus = external dso_local constant [0 x i8], align 1
@__ksymtab_invalidate_bh_lrus = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @invalidate_bh_lrus to i32), ptr @__kstrtab_invalidate_bh_lrus, ptr @__kstrtabns_invalidate_bh_lrus }, section "___ksymtab_gpl+invalidate_bh_lrus", align 4
@__kstrtab_set_bh_page = external dso_local constant [0 x i8], align 1
@__kstrtabns_set_bh_page = external dso_local constant [0 x i8], align 1
@__ksymtab_set_bh_page = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @set_bh_page to i32), ptr @__kstrtab_set_bh_page, ptr @__kstrtabns_set_bh_page }, section "___ksymtab+set_bh_page", align 4
@__kstrtab_block_invalidatepage = external dso_local constant [0 x i8], align 1
@__kstrtabns_block_invalidatepage = external dso_local constant [0 x i8], align 1
@__ksymtab_block_invalidatepage = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @block_invalidatepage to i32), ptr @__kstrtab_block_invalidatepage, ptr @__kstrtabns_block_invalidatepage }, section "___ksymtab+block_invalidatepage", align 4
@__kstrtab_create_empty_buffers = external dso_local constant [0 x i8], align 1
@__kstrtabns_create_empty_buffers = external dso_local constant [0 x i8], align 1
@__ksymtab_create_empty_buffers = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @create_empty_buffers to i32), ptr @__kstrtab_create_empty_buffers, ptr @__kstrtabns_create_empty_buffers }, section "___ksymtab+create_empty_buffers", align 4
@__kstrtab_clean_bdev_aliases = external dso_local constant [0 x i8], align 1
@__kstrtabns_clean_bdev_aliases = external dso_local constant [0 x i8], align 1
@__ksymtab_clean_bdev_aliases = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @clean_bdev_aliases to i32), ptr @__kstrtab_clean_bdev_aliases, ptr @__kstrtabns_clean_bdev_aliases }, section "___ksymtab+clean_bdev_aliases", align 4
@__kstrtab___block_write_full_page = external dso_local constant [0 x i8], align 1
@__kstrtabns___block_write_full_page = external dso_local constant [0 x i8], align 1
@__ksymtab___block_write_full_page = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @__block_write_full_page to i32), ptr @__kstrtab___block_write_full_page, ptr @__kstrtabns___block_write_full_page }, section "___ksymtab+__block_write_full_page", align 4
@__kstrtab_page_zero_new_buffers = external dso_local constant [0 x i8], align 1
@__kstrtabns_page_zero_new_buffers = external dso_local constant [0 x i8], align 1
@__ksymtab_page_zero_new_buffers = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @page_zero_new_buffers to i32), ptr @__kstrtab_page_zero_new_buffers, ptr @__kstrtabns_page_zero_new_buffers }, section "___ksymtab+page_zero_new_buffers", align 4
@__kstrtab___block_write_begin = external dso_local constant [0 x i8], align 1
@__kstrtabns___block_write_begin = external dso_local constant [0 x i8], align 1
@__ksymtab___block_write_begin = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @__block_write_begin to i32), ptr @__kstrtab___block_write_begin, ptr @__kstrtabns___block_write_begin }, section "___ksymtab+__block_write_begin", align 4
@__kstrtab_block_write_begin = external dso_local constant [0 x i8], align 1
@__kstrtabns_block_write_begin = external dso_local constant [0 x i8], align 1
@__ksymtab_block_write_begin = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @block_write_begin to i32), ptr @__kstrtab_block_write_begin, ptr @__kstrtabns_block_write_begin }, section "___ksymtab+block_write_begin", align 4
@__kstrtab_block_write_end = external dso_local constant [0 x i8], align 1
@__kstrtabns_block_write_end = external dso_local constant [0 x i8], align 1
@__ksymtab_block_write_end = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @block_write_end to i32), ptr @__kstrtab_block_write_end, ptr @__kstrtabns_block_write_end }, section "___ksymtab+block_write_end", align 4
@__kstrtab_generic_write_end = external dso_local constant [0 x i8], align 1
@__kstrtabns_generic_write_end = external dso_local constant [0 x i8], align 1
@__ksymtab_generic_write_end = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @generic_write_end to i32), ptr @__kstrtab_generic_write_end, ptr @__kstrtabns_generic_write_end }, section "___ksymtab+generic_write_end", align 4
@__kstrtab_block_is_partially_uptodate = external dso_local constant [0 x i8], align 1
@__kstrtabns_block_is_partially_uptodate = external dso_local constant [0 x i8], align 1
@__ksymtab_block_is_partially_uptodate = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @block_is_partially_uptodate to i32), ptr @__kstrtab_block_is_partially_uptodate, ptr @__kstrtabns_block_is_partially_uptodate }, section "___ksymtab+block_is_partially_uptodate", align 4
@__kstrtab_block_read_full_page = external dso_local constant [0 x i8], align 1
@__kstrtabns_block_read_full_page = external dso_local constant [0 x i8], align 1
@__ksymtab_block_read_full_page = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @block_read_full_page to i32), ptr @__kstrtab_block_read_full_page, ptr @__kstrtabns_block_read_full_page }, section "___ksymtab+block_read_full_page", align 4
@__kstrtab_generic_cont_expand_simple = external dso_local constant [0 x i8], align 1
@__kstrtabns_generic_cont_expand_simple = external dso_local constant [0 x i8], align 1
@__ksymtab_generic_cont_expand_simple = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @generic_cont_expand_simple to i32), ptr @__kstrtab_generic_cont_expand_simple, ptr @__kstrtabns_generic_cont_expand_simple }, section "___ksymtab+generic_cont_expand_simple", align 4
@__kstrtab_cont_write_begin = external dso_local constant [0 x i8], align 1
@__kstrtabns_cont_write_begin = external dso_local constant [0 x i8], align 1
@__ksymtab_cont_write_begin = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @cont_write_begin to i32), ptr @__kstrtab_cont_write_begin, ptr @__kstrtabns_cont_write_begin }, section "___ksymtab+cont_write_begin", align 4
@__kstrtab_block_commit_write = external dso_local constant [0 x i8], align 1
@__kstrtabns_block_commit_write = external dso_local constant [0 x i8], align 1
@__ksymtab_block_commit_write = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @block_commit_write to i32), ptr @__kstrtab_block_commit_write, ptr @__kstrtabns_block_commit_write }, section "___ksymtab+block_commit_write", align 4
@__kstrtab_block_page_mkwrite = external dso_local constant [0 x i8], align 1
@__kstrtabns_block_page_mkwrite = external dso_local constant [0 x i8], align 1
@__ksymtab_block_page_mkwrite = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @block_page_mkwrite to i32), ptr @__kstrtab_block_page_mkwrite, ptr @__kstrtabns_block_page_mkwrite }, section "___ksymtab+block_page_mkwrite", align 4
@__kstrtab_nobh_write_begin = external dso_local constant [0 x i8], align 1
@__kstrtabns_nobh_write_begin = external dso_local constant [0 x i8], align 1
@__ksymtab_nobh_write_begin = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @nobh_write_begin to i32), ptr @__kstrtab_nobh_write_begin, ptr @__kstrtabns_nobh_write_begin }, section "___ksymtab+nobh_write_begin", align 4
@__kstrtab_nobh_write_end = external dso_local constant [0 x i8], align 1
@__kstrtabns_nobh_write_end = external dso_local constant [0 x i8], align 1
@__ksymtab_nobh_write_end = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @nobh_write_end to i32), ptr @__kstrtab_nobh_write_end, ptr @__kstrtabns_nobh_write_end }, section "___ksymtab+nobh_write_end", align 4
@__kstrtab_nobh_writepage = external dso_local constant [0 x i8], align 1
@__kstrtabns_nobh_writepage = external dso_local constant [0 x i8], align 1
@__ksymtab_nobh_writepage = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @nobh_writepage to i32), ptr @__kstrtab_nobh_writepage, ptr @__kstrtabns_nobh_writepage }, section "___ksymtab+nobh_writepage", align 4
@__kstrtab_nobh_truncate_page = external dso_local constant [0 x i8], align 1
@__kstrtabns_nobh_truncate_page = external dso_local constant [0 x i8], align 1
@__ksymtab_nobh_truncate_page = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @nobh_truncate_page to i32), ptr @__kstrtab_nobh_truncate_page, ptr @__kstrtabns_nobh_truncate_page }, section "___ksymtab+nobh_truncate_page", align 4
@__kstrtab_block_truncate_page = external dso_local constant [0 x i8], align 1
@__kstrtabns_block_truncate_page = external dso_local constant [0 x i8], align 1
@__ksymtab_block_truncate_page = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @block_truncate_page to i32), ptr @__kstrtab_block_truncate_page, ptr @__kstrtabns_block_truncate_page }, section "___ksymtab+block_truncate_page", align 4
@__kstrtab_block_write_full_page = external dso_local constant [0 x i8], align 1
@__kstrtabns_block_write_full_page = external dso_local constant [0 x i8], align 1
@__ksymtab_block_write_full_page = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @block_write_full_page to i32), ptr @__kstrtab_block_write_full_page, ptr @__kstrtabns_block_write_full_page }, section "___ksymtab+block_write_full_page", align 4
@__kstrtab_generic_block_bmap = external dso_local constant [0 x i8], align 1
@__kstrtabns_generic_block_bmap = external dso_local constant [0 x i8], align 1
@__ksymtab_generic_block_bmap = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @generic_block_bmap to i32), ptr @__kstrtab_generic_block_bmap, ptr @__kstrtabns_generic_block_bmap }, section "___ksymtab+generic_block_bmap", align 4
@__kstrtab_submit_bh = external dso_local constant [0 x i8], align 1
@__kstrtabns_submit_bh = external dso_local constant [0 x i8], align 1
@__ksymtab_submit_bh = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @submit_bh to i32), ptr @__kstrtab_submit_bh, ptr @__kstrtabns_submit_bh }, section "___ksymtab+submit_bh", align 4
@__kstrtab_ll_rw_block = external dso_local constant [0 x i8], align 1
@__kstrtabns_ll_rw_block = external dso_local constant [0 x i8], align 1
@__ksymtab_ll_rw_block = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @ll_rw_block to i32), ptr @__kstrtab_ll_rw_block, ptr @__kstrtabns_ll_rw_block }, section "___ksymtab+ll_rw_block", align 4
@__kstrtab_write_dirty_buffer = external dso_local constant [0 x i8], align 1
@__kstrtabns_write_dirty_buffer = external dso_local constant [0 x i8], align 1
@__ksymtab_write_dirty_buffer = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @write_dirty_buffer to i32), ptr @__kstrtab_write_dirty_buffer, ptr @__kstrtabns_write_dirty_buffer }, section "___ksymtab+write_dirty_buffer", align 4
@__kstrtab___sync_dirty_buffer = external dso_local constant [0 x i8], align 1
@__kstrtabns___sync_dirty_buffer = external dso_local constant [0 x i8], align 1
@__ksymtab___sync_dirty_buffer = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @__sync_dirty_buffer to i32), ptr @__kstrtab___sync_dirty_buffer, ptr @__kstrtabns___sync_dirty_buffer }, section "___ksymtab+__sync_dirty_buffer", align 4
@__kstrtab_sync_dirty_buffer = external dso_local constant [0 x i8], align 1
@__kstrtabns_sync_dirty_buffer = external dso_local constant [0 x i8], align 1
@__ksymtab_sync_dirty_buffer = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @sync_dirty_buffer to i32), ptr @__kstrtab_sync_dirty_buffer, ptr @__kstrtabns_sync_dirty_buffer }, section "___ksymtab+sync_dirty_buffer", align 4
@__kstrtab_try_to_free_buffers = external dso_local constant [0 x i8], align 1
@__kstrtabns_try_to_free_buffers = external dso_local constant [0 x i8], align 1
@__ksymtab_try_to_free_buffers = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @try_to_free_buffers to i32), ptr @__kstrtab_try_to_free_buffers, ptr @__kstrtabns_try_to_free_buffers }, section "___ksymtab+try_to_free_buffers", align 4
@bh_accounting = weak dso_local global %struct.bh_accounting zeroinitializer, section ".data..percpu", align 4
@bh_cachep = internal unnamed_addr global ptr null, section ".data..read_mostly", align 4
@alloc_buffer_head.__key = internal global { %struct.lock_class_key, [24 x i8] } zeroinitializer, align 32
@.str.6 = internal constant { [22 x i8], [42 x i8] } { [22 x i8] c"&ret->b_uptodate_lock\00", [42 x i8] zeroinitializer }, align 32
@__kstrtab_alloc_buffer_head = external dso_local constant [0 x i8], align 1
@__kstrtabns_alloc_buffer_head = external dso_local constant [0 x i8], align 1
@__ksymtab_alloc_buffer_head = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @alloc_buffer_head to i32), ptr @__kstrtab_alloc_buffer_head, ptr @__kstrtabns_alloc_buffer_head }, section "___ksymtab+alloc_buffer_head", align 4
@__kstrtab_free_buffer_head = external dso_local constant [0 x i8], align 1
@__kstrtabns_free_buffer_head = external dso_local constant [0 x i8], align 1
@__ksymtab_free_buffer_head = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @free_buffer_head to i32), ptr @__kstrtab_free_buffer_head, ptr @__kstrtabns_free_buffer_head }, section "___ksymtab+free_buffer_head", align 4
@__kstrtab_bh_uptodate_or_lock = external dso_local constant [0 x i8], align 1
@__kstrtabns_bh_uptodate_or_lock = external dso_local constant [0 x i8], align 1
@__ksymtab_bh_uptodate_or_lock = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @bh_uptodate_or_lock to i32), ptr @__kstrtab_bh_uptodate_or_lock, ptr @__kstrtabns_bh_uptodate_or_lock }, section "___ksymtab+bh_uptodate_or_lock", align 4
@__kstrtab_bh_submit_read = external dso_local constant [0 x i8], align 1
@__kstrtabns_bh_submit_read = external dso_local constant [0 x i8], align 1
@__ksymtab_bh_submit_read = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @bh_submit_read to i32), ptr @__kstrtab_bh_submit_read, ptr @__kstrtabns_bh_submit_read }, section "___ksymtab+bh_submit_read", align 4
@.str.8 = internal constant { [12 x i8], [20 x i8] } { [12 x i8] c"buffer_head\00", [20 x i8] zeroinitializer }, align 32
@max_buffer_heads = internal global { i32, [28 x i8] } zeroinitializer, align 32
@.str.9 = internal constant { [15 x i8], [17 x i8] } { [15 x i8] c"fs/buffer:dead\00", [17 x i8] zeroinitializer }, align 32
@__pcpu_unique_bh_lrus = dso_local local_unnamed_addr global i8 0, section ".discard", align 1
@buffer_heads_over_limit = dso_local global { i32, [28 x i8] } zeroinitializer, align 32
@__pcpu_unique_bh_accounting = dso_local local_unnamed_addr global i8 0, section ".discard", align 1
@__tracepoint_block_touch_buffer = external dso_local global %struct.tracepoint, align 4
@.str.10 = internal constant { [29 x i8], [35 x i8] } { [29 x i8] c"include/trace/events/block.h\00", [35 x i8] zeroinitializer }, align 32
@trace_block_touch_buffer.__warned = internal unnamed_addr global i1 false, section ".data.unlikely", align 1
@.str.11 = internal constant { [41 x i8], [55 x i8] } { [41 x i8] c"suspicious rcu_dereference_check() usage\00", [55 x i8] zeroinitializer }, align 32
@__cpu_online_mask = external dso_local global %struct.cpumask, align 4
@nr_cpu_ids = external dso_local local_unnamed_addr global i32, align 4
@cpu_max_bits_warn.__already_done = internal unnamed_addr global i1 false, section ".data.once", align 1
@.str.12 = internal constant { [24 x i8], [40 x i8] } { [24 x i8] c"include/linux/cpumask.h\00", [40 x i8] zeroinitializer }, align 32
@.str.13 = internal constant { [25 x i8], [39 x i8] } { [25 x i8] c"include/linux/wait_bit.h\00", [39 x i8] zeroinitializer }, align 32
@.str.14 = internal constant { [67 x i8], [61 x i8] } { [67 x i8] c"VM_BUG_ON_PAGE(PagePoisoned(((typeof(page))_compound_head(page))))\00", [61 x i8] zeroinitializer }, align 32
@.str.15 = internal constant { [35 x i8], [61 x i8] } { [35 x i8] c"VM_BUG_ON_PAGE(PagePoisoned(page))\00", [61 x i8] zeroinitializer }, align 32
@buffer_io_error._rs = internal global { %struct.ratelimit_state, [60 x i8] } { %struct.ratelimit_state { %struct.raw_spinlock { %struct.arch_spinlock_t zeroinitializer, i32 -559067475, i32 -1, ptr inttoptr (i32 -1 to ptr), %struct.lockdep_map { ptr null, [2 x ptr] zeroinitializer, ptr @.str.16, i8 0, i8 2, i8 0, i32 0, i32 0 } }, i32 500, i32 10, i32 0, i32 0, i32 0, i32 0 }, [60 x i8] zeroinitializer }, align 32
@.str.16 = internal constant { [9 x i8], [23 x i8] } { [9 x i8] c"_rs.lock\00", [23 x i8] zeroinitializer }, align 32
@__func__.buffer_io_error = private unnamed_addr constant [16 x i8] c"buffer_io_error\00", align 1
@buffer_io_error._entry = internal constant { %struct.pi_entry, [40 x i8] } { %struct.pi_entry { ptr @.str.17, ptr @__func__.buffer_io_error, ptr @.str.4, i32 131, ptr null, ptr null }, [40 x i8] zeroinitializer }, align 32
@.str.17 = internal constant { [53 x i8], [43 x i8] } { [53 x i8] c"\013Buffer I/O error on dev %pg, logical block %llu%s\0A\00", [43 x i8] zeroinitializer }, align 32
@buffer_io_error._entry_ptr = internal global ptr @buffer_io_error._entry, section ".printk_index", align 4
@.str.18 = internal constant { [36 x i8], [60 x i8] } { [36 x i8] c"VM_BUG_ON_PAGE(1 && PageTail(page))\00", [60 x i8] zeroinitializer }, align 32
@.str.19 = internal constant { [39 x i8], [57 x i8] } { [39 x i8] c"VM_BUG_ON_PAGE(PageTail(&folio->page))\00", [57 x i8] zeroinitializer }, align 32
@.str.20 = internal constant { [55 x i8], [41 x i8] } { [55 x i8] c"VM_BUG_ON_FOLIO(folio->memcg_data & MEMCG_DATA_OBJCGS)\00", [41 x i8] zeroinitializer }, align 32
@.str.21 = internal constant { [40 x i8], [56 x i8] } { [40 x i8] c"VM_BUG_ON_FOLIO(folio_test_slab(folio))\00", [56 x i8] zeroinitializer }, align 32
@.str.24 = internal constant { [31 x i8], [33 x i8] } { [31 x i8] c"VM_BUG_ON_PAGE(PageTail(page))\00", [33 x i8] zeroinitializer }, align 32
@int_active_memcg = external dso_local global ptr, section ".data..percpu", align 4
@__tracepoint_block_dirty_buffer = external dso_local global %struct.tracepoint, align 4
@trace_block_dirty_buffer.__warned = internal unnamed_addr global i1 false, section ".data.unlikely", align 1
@rcu_lock_map = external dso_local global %struct.lockdep_map, align 4
@rcu_read_lock.__warned = internal unnamed_addr global i1 false, section ".data.unlikely", align 1
@.str.27 = internal constant { [25 x i8], [39 x i8] } { [25 x i8] c"include/linux/rcupdate.h\00", [39 x i8] zeroinitializer }, align 32
@.str.28 = internal constant { [42 x i8], [54 x i8] } { [42 x i8] c"rcu_read_lock() used illegally while idle\00", [54 x i8] zeroinitializer }, align 32
@rcu_read_unlock.__warned = internal unnamed_addr global i1 false, section ".data.unlikely", align 1
@.str.29 = internal constant { [44 x i8], [52 x i8] } { [44 x i8] c"rcu_read_unlock() used illegally while idle\00", [52 x i8] zeroinitializer }, align 32
@__find_get_block_slow.last_warned = internal global %struct.ratelimit_state { %struct.raw_spinlock { %struct.arch_spinlock_t zeroinitializer, i32 -559067475, i32 -1, ptr inttoptr (i32 -1 to ptr), %struct.lockdep_map { ptr null, [2 x ptr] zeroinitializer, ptr @.str.32, i8 0, i8 2, i8 0, i32 0, i32 0 } }, i32 100, i32 1, i32 0, i32 0, i32 0, i32 0 }, align 4
@.str.32 = internal constant { [17 x i8], [47 x i8] } { [17 x i8] c"last_warned.lock\00", [47 x i8] zeroinitializer }, align 32
@__func__.__find_get_block_slow = private unnamed_addr constant [22 x i8] c"__find_get_block_slow\00", align 1
@__find_get_block_slow._entry = internal constant %struct.pi_entry { ptr @.str.33, ptr @__func__.__find_get_block_slow, ptr @.str.4, i32 235, ptr null, ptr null }, align 1
@.str.33 = internal constant { [115 x i8], [45 x i8] } { [115 x i8] c"__find_get_block_slow() failed. block=%llu, b_blocknr=%llu, b_state=0x%08lx, b_size=%zu, device %pg blocksize: %d\0A\00", [45 x i8] zeroinitializer }, align 32
@__find_get_block_slow._entry_ptr = internal global ptr @__find_get_block_slow._entry, section ".printk_index", align 4
@lru_disable_count = external dso_local global %struct.atomic_t, align 4
@__getblk_slow._entry = internal constant %struct.pi_entry { ptr @.str.34, ptr @.str.35, ptr @.str.4, i32 1025, ptr null, ptr null }, align 1
@.str.34 = internal constant { [45 x i8], [51 x i8] } { [45 x i8] c"\013getblk(): invalid block size %d requested\0A\00", [51 x i8] zeroinitializer }, align 32
@.str.35 = internal constant { [14 x i8], [18 x i8] } { [14 x i8] c"__getblk_slow\00", [18 x i8] zeroinitializer }, align 32
@__getblk_slow._entry_ptr = internal global ptr @__getblk_slow._entry, section ".printk_index", align 4
@__getblk_slow._entry.36 = internal constant %struct.pi_entry { ptr @.str.37, ptr @.str.35, ptr @.str.4, i32 1027, ptr null, ptr null }, align 1
@.str.37 = internal constant { [26 x i8], [38 x i8] } { [26 x i8] c"\013logical block size: %d\0A\00", [38 x i8] zeroinitializer }, align 32
@__getblk_slow._entry_ptr.38 = internal global ptr @__getblk_slow._entry.36, section ".printk_index", align 4
@grow_buffers._entry = internal constant { %struct.pi_entry, [40 x i8] } { %struct.pi_entry { ptr @.str.39, ptr @.str.40, ptr @.str.4, i32 1009, ptr null, ptr null }, [40 x i8] zeroinitializer }, align 32
@.str.39 = internal constant { [56 x i8], [40 x i8] } { [56 x i8] c"\013%s: requested out-of-range block %llu for device %pg\0A\00", [40 x i8] zeroinitializer }, align 32
@.str.40 = internal constant { [13 x i8], [19 x i8] } { [13 x i8] c"grow_buffers\00", [19 x i8] zeroinitializer }, align 32
@grow_buffers._entry_ptr = internal global ptr @grow_buffers._entry, section ".printk_index", align 4
@movable_zone = external dso_local local_unnamed_addr global i32, align 4
@.str.41 = internal constant { [72 x i8], [56 x i8] } { [72 x i8] c"VM_BUG_ON_FOLIO(((unsigned int) folio_ref_count(folio) + 127u <= 127u))\00", [56 x i8] zeroinitializer }, align 32
@__tracepoint_page_ref_mod = external dso_local global %struct.tracepoint, align 4
@.str.42 = internal constant { [24 x i8], [40 x i8] } { [24 x i8] c"include/linux/pagemap.h\00", [40 x i8] zeroinitializer }, align 32
@.str.43 = internal constant { [28 x i8], [36 x i8] } { [28 x i8] c"include/linux/buffer_head.h\00", [36 x i8] zeroinitializer }, align 32
@.str.44 = internal constant { [42 x i8], [54 x i8] } { [42 x i8] c"VM_BUG_ON_PAGE(page_ref_count(page) == 0)\00", [54 x i8] zeroinitializer }, align 32
@__tracepoint_page_ref_mod_and_test = external dso_local global %struct.tracepoint, align 4
@__seqprop_assert.__already_done = internal unnamed_addr global i1 false, section ".data.once", align 1
@debug_locks = external dso_local local_unnamed_addr global i32, section ".data..read_mostly", align 4
@lockdep_recursion = external dso_local global i32, section ".data..percpu", align 4
@hardirqs_enabled = external dso_local global i32, section ".data..percpu", align 4
@.str.45 = internal constant { [24 x i8], [40 x i8] } { [24 x i8] c"include/linux/seqlock.h\00", [40 x i8] zeroinitializer }, align 32
@end_buffer_async_read_io.__key = internal global { %struct.lock_class_key, [24 x i8] } zeroinitializer, align 32
@.str.46 = internal constant { [30 x i8], [34 x i8] } { [30 x i8] c"(work_completion)(&ctx->work)\00", [34 x i8] zeroinitializer }, align 32
@kmalloc_caches = external dso_local local_unnamed_addr global [4 x [14 x ptr]], align 4
@.str.47 = internal constant { [18 x i8], [46 x i8] } { [18 x i8] c", async page read\00", [46 x i8] zeroinitializer }, align 32
@fs_bio_set = external dso_local global %struct.bio_set, align 4
@__sancov_gen_cov_switch_values = internal global [4 x i64] [i64 2, i64 32, i64 2, i64 3]
@__sancov_gen_cov_switch_values.49 = internal global [4 x i64] [i64 2, i64 32, i64 2, i64 3]
@__sancov_gen_cov_switch_values.50 = internal global [6 x i64] [i64 4, i64 16, i64 0, i64 1, i64 2, i64 3]
@___asan_gen_.53 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.190, i32 169, i32 23 }
@___asan_gen_.56 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.190, i32 355, i32 23 }
@___asan_gen_.68 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.190, i32 527, i32 3 }
@___asan_gen_.71 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.190, i32 1148, i32 2 }
@___asan_gen_.77 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.190, i32 3313, i32 3 }
@___asan_gen_.80 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.190, i32 3397, i32 32 }
@___asan_gen_.81 = private unnamed_addr constant [17 x i8] c"max_buffer_heads\00", align 1
@___asan_gen_.83 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.190, i32 3284, i32 22 }
@___asan_gen_.86 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.190, i32 3408, i32 54 }
@___asan_gen_.87 = private unnamed_addr constant [24 x i8] c"buffer_heads_over_limit\00", align 1
@___asan_gen_.89 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.190, i32 3286, i32 5 }
@___asan_gen_.94 = private unnamed_addr constant [32 x i8] c"../include/trace/events/block.h\00", align 1
@___asan_gen_.95 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.94, i32 45, i32 1 }
@___asan_gen_.97 = private unnamed_addr constant [27 x i8] c"../include/linux/cpumask.h\00", align 1
@___asan_gen_.98 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.97, i32 108, i32 2 }
@___asan_gen_.100 = private unnamed_addr constant [28 x i8] c"../include/linux/wait_bit.h\00", align 1
@___asan_gen_.101 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.100, i32 205, i32 2 }
@___asan_gen_.104 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.133, i32 414, i32 1 }
@___asan_gen_.107 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.133, i32 452, i32 1 }
@___asan_gen_.108 = private unnamed_addr constant [4 x i8] c"_rs\00", align 1
@___asan_gen_.119 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.190, i32 129, i32 3 }
@___asan_gen_.122 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.133, i32 416, i32 1 }
@___asan_gen_.125 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.130, i32 537, i32 2 }
@___asan_gen_.128 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.130, i32 538, i32 2 }
@___asan_gen_.130 = private unnamed_addr constant [30 x i8] c"../include/linux/memcontrol.h\00", align 1
@___asan_gen_.131 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.130, i32 417, i32 2 }
@___asan_gen_.133 = private unnamed_addr constant [30 x i8] c"../include/linux/page-flags.h\00", align 1
@___asan_gen_.134 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.133, i32 260, i32 2 }
@___asan_gen_.140 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.142, i32 695, i32 2 }
@___asan_gen_.142 = private unnamed_addr constant [28 x i8] c"../include/linux/rcupdate.h\00", align 1
@___asan_gen_.143 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.142, i32 723, i32 2 }
@___asan_gen_.146 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.190, i32 199, i32 9 }
@___asan_gen_.149 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.190, i32 229, i32 3 }
@___asan_gen_.155 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.190, i32 1024, i32 3 }
@___asan_gen_.158 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.190, i32 1026, i32 3 }
@___asan_gen_.159 = private unnamed_addr constant [7 x i8] c"_entry\00", align 1
@___asan_gen_.167 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.190, i32 1006, i32 3 }
@___asan_gen_.170 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.178, i32 1160, i32 2 }
@___asan_gen_.172 = private unnamed_addr constant [27 x i8] c"../include/linux/pagemap.h\00", align 1
@___asan_gen_.173 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.172, i32 788, i32 2 }
@___asan_gen_.175 = private unnamed_addr constant [31 x i8] c"../include/linux/buffer_head.h\00", align 1
@___asan_gen_.176 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.175, i32 354, i32 2 }
@___asan_gen_.178 = private unnamed_addr constant [22 x i8] c"../include/linux/mm.h\00", align 1
@___asan_gen_.179 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.178, i32 717, i32 2 }
@___asan_gen_.181 = private unnamed_addr constant [27 x i8] c"../include/linux/seqlock.h\00", align 1
@___asan_gen_.182 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.181, i32 271, i32 2 }
@___asan_gen_.183 = private unnamed_addr constant [6 x i8] c"__key\00", align 1
@___asan_gen_.188 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.190, i32 328, i32 4 }
@___asan_gen_.189 = private unnamed_addr constant [17 x i8] c"<string literal>\00", align 1
@___asan_gen_.190 = private constant [15 x i8] c"../fs/buffer.c\00", align 1
@___asan_gen_.191 = private unnamed_addr constant { ptr, i32, i32 } { ptr @___asan_gen_.190, i32 259, i32 23 }
@llvm.compiler.used = appending global [113 x ptr] [ptr @__find_get_block_slow._entry, ptr @__find_get_block_slow._entry_ptr, ptr @__getblk_slow._entry, ptr @__getblk_slow._entry.36, ptr @__getblk_slow._entry_ptr, ptr @__getblk_slow._entry_ptr.38, ptr @__ksymtab___bforget, ptr @__ksymtab___block_write_begin, ptr @__ksymtab___block_write_full_page, ptr @__ksymtab___bread_gfp, ptr @__ksymtab___breadahead, ptr @__ksymtab___breadahead_gfp, ptr @__ksymtab___brelse, ptr @__ksymtab___find_get_block, ptr @__ksymtab___getblk_gfp, ptr @__ksymtab___lock_buffer, ptr @__ksymtab___set_page_dirty_buffers, ptr @__ksymtab___sync_dirty_buffer, ptr @__ksymtab___wait_on_buffer, ptr @__ksymtab_alloc_buffer_head, ptr @__ksymtab_alloc_page_buffers, ptr @__ksymtab_bh_submit_read, ptr @__ksymtab_bh_uptodate_or_lock, ptr @__ksymtab_block_commit_write, ptr @__ksymtab_block_invalidatepage, ptr @__ksymtab_block_is_partially_uptodate, ptr @__ksymtab_block_page_mkwrite, ptr @__ksymtab_block_read_full_page, ptr @__ksymtab_block_truncate_page, ptr @__ksymtab_block_write_begin, ptr @__ksymtab_block_write_end, ptr @__ksymtab_block_write_full_page, ptr @__ksymtab_buffer_check_dirty_writeback, ptr @__ksymtab_clean_bdev_aliases, ptr @__ksymtab_cont_write_begin, ptr @__ksymtab_create_empty_buffers, ptr @__ksymtab_end_buffer_async_write, ptr @__ksymtab_end_buffer_read_sync, ptr @__ksymtab_end_buffer_write_sync, ptr @__ksymtab_free_buffer_head, ptr @__ksymtab_generic_block_bmap, ptr @__ksymtab_generic_cont_expand_simple, ptr @__ksymtab_generic_write_end, ptr @__ksymtab_invalidate_bh_lrus, ptr @__ksymtab_invalidate_inode_buffers, ptr @__ksymtab_ll_rw_block, ptr @__ksymtab_mark_buffer_async_write, ptr @__ksymtab_mark_buffer_dirty, ptr @__ksymtab_mark_buffer_dirty_inode, ptr @__ksymtab_mark_buffer_write_io_error, ptr @__ksymtab_nobh_truncate_page, ptr @__ksymtab_nobh_write_begin, ptr @__ksymtab_nobh_write_end, ptr @__ksymtab_nobh_writepage, ptr @__ksymtab_page_zero_new_buffers, ptr @__ksymtab_set_bh_page, ptr @__ksymtab_submit_bh, ptr @__ksymtab_sync_dirty_buffer, ptr @__ksymtab_sync_mapping_buffers, ptr @__ksymtab_touch_buffer, ptr @__ksymtab_try_to_free_buffers, ptr @__ksymtab_unlock_buffer, ptr @__ksymtab_write_dirty_buffer, ptr @buffer_io_error._entry, ptr @buffer_io_error._entry_ptr, ptr @emergency_thaw_bdev._entry, ptr @emergency_thaw_bdev._entry_ptr, ptr @grow_buffers._entry, ptr @grow_buffers._entry_ptr, ptr @.str, ptr @.str.1, ptr @.str.2, ptr @.str.3, ptr @.str.4, ptr @.str.5, ptr @alloc_buffer_head.__key, ptr @.str.6, ptr @.str.8, ptr @max_buffer_heads, ptr @.str.9, ptr @buffer_heads_over_limit, ptr @.str.10, ptr @.str.11, ptr @.str.12, ptr @.str.13, ptr @.str.14, ptr @.str.15, ptr @buffer_io_error._rs, ptr @.str.16, ptr @.str.17, ptr @.str.18, ptr @.str.19, ptr @.str.20, ptr @.str.21, ptr @.str.24, ptr @.str.27, ptr @.str.28, ptr @.str.29, ptr @.str.32, ptr @.str.33, ptr @.str.34, ptr @.str.35, ptr @.str.37, ptr @.str.39, ptr @.str.40, ptr @.str.41, ptr @.str.42, ptr @.str.43, ptr @.str.44, ptr @.str.45, ptr @end_buffer_async_read_io.__key, ptr @.str.46, ptr @.str.47], section "llvm.metadata"
@0 = internal global [47 x { i32, i32, i32, i32, i32, i32, i32, i32 }] [{ i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str to i32), i32 23, i32 64, i32 ptrtoint (ptr @___asan_gen_.189 to i32), i32 ptrtoint (ptr @___asan_gen_.190 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.53 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.1 to i32), i32 24, i32 64, i32 ptrtoint (ptr @___asan_gen_.189 to i32), i32 ptrtoint (ptr @___asan_gen_.190 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.56 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @emergency_thaw_bdev._entry to i32), i32 24, i32 64, i32 ptrtoint (ptr @___asan_gen_.159 to i32), i32 ptrtoint (ptr @___asan_gen_.190 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.68 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.2 to i32), i32 25, i32 64, i32 ptrtoint (ptr @___asan_gen_.189 to i32), i32 ptrtoint (ptr @___asan_gen_.190 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.68 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.3 to i32), i32 20, i32 64, i32 ptrtoint (ptr @___asan_gen_.189 to i32), i32 ptrtoint (ptr @___asan_gen_.190 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.68 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.4 to i32), i32 12, i32 32, i32 ptrtoint (ptr @___asan_gen_.189 to i32), i32 ptrtoint (ptr @___asan_gen_.190 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.68 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.5 to i32), i32 43, i32 96, i32 ptrtoint (ptr @___asan_gen_.189 to i32), i32 ptrtoint (ptr @___asan_gen_.190 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.71 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @alloc_buffer_head.__key to i32), i32 8, i32 32, i32 ptrtoint (ptr @___asan_gen_.183 to i32), i32 ptrtoint (ptr @___asan_gen_.190 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.77 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.6 to i32), i32 22, i32 64, i32 ptrtoint (ptr @___asan_gen_.189 to i32), i32 ptrtoint (ptr @___asan_gen_.190 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.77 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.8 to i32), i32 12, i32 32, i32 ptrtoint (ptr @___asan_gen_.189 to i32), i32 ptrtoint (ptr @___asan_gen_.190 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.80 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @max_buffer_heads to i32), i32 4, i32 32, i32 ptrtoint (ptr @___asan_gen_.81 to i32), i32 ptrtoint (ptr @___asan_gen_.190 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.83 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.9 to i32), i32 15, i32 32, i32 ptrtoint (ptr @___asan_gen_.189 to i32), i32 ptrtoint (ptr @___asan_gen_.190 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.86 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @buffer_heads_over_limit to i32), i32 4, i32 32, i32 ptrtoint (ptr @___asan_gen_.87 to i32), i32 ptrtoint (ptr @___asan_gen_.190 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.89 to i32), i32 0 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.10 to i32), i32 29, i32 64, i32 ptrtoint (ptr @___asan_gen_.189 to i32), i32 ptrtoint (ptr @___asan_gen_.190 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.95 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.11 to i32), i32 41, i32 96, i32 ptrtoint (ptr @___asan_gen_.189 to i32), i32 ptrtoint (ptr @___asan_gen_.190 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.95 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.12 to i32), i32 24, i32 64, i32 ptrtoint (ptr @___asan_gen_.189 to i32), i32 ptrtoint (ptr @___asan_gen_.190 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.98 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.13 to i32), i32 25, i32 64, i32 ptrtoint (ptr @___asan_gen_.189 to i32), i32 ptrtoint (ptr @___asan_gen_.190 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.101 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.14 to i32), i32 67, i32 128, i32 ptrtoint (ptr @___asan_gen_.189 to i32), i32 ptrtoint (ptr @___asan_gen_.190 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.104 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.15 to i32), i32 35, i32 96, i32 ptrtoint (ptr @___asan_gen_.189 to i32), i32 ptrtoint (ptr @___asan_gen_.190 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.107 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @buffer_io_error._rs to i32), i32 68, i32 128, i32 ptrtoint (ptr @___asan_gen_.108 to i32), i32 ptrtoint (ptr @___asan_gen_.190 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.119 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.16 to i32), i32 9, i32 32, i32 ptrtoint (ptr @___asan_gen_.189 to i32), i32 ptrtoint (ptr @___asan_gen_.190 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.119 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @buffer_io_error._entry to i32), i32 24, i32 64, i32 ptrtoint (ptr @___asan_gen_.159 to i32), i32 ptrtoint (ptr @___asan_gen_.190 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.119 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.17 to i32), i32 53, i32 96, i32 ptrtoint (ptr @___asan_gen_.189 to i32), i32 ptrtoint (ptr @___asan_gen_.190 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.119 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.18 to i32), i32 36, i32 96, i32 ptrtoint (ptr @___asan_gen_.189 to i32), i32 ptrtoint (ptr @___asan_gen_.190 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.122 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.19 to i32), i32 39, i32 96, i32 ptrtoint (ptr @___asan_gen_.189 to i32), i32 ptrtoint (ptr @___asan_gen_.190 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.125 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.20 to i32), i32 55, i32 96, i32 ptrtoint (ptr @___asan_gen_.189 to i32), i32 ptrtoint (ptr @___asan_gen_.190 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.128 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.21 to i32), i32 40, i32 96, i32 ptrtoint (ptr @___asan_gen_.189 to i32), i32 ptrtoint (ptr @___asan_gen_.190 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.131 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.24 to i32), i32 31, i32 64, i32 ptrtoint (ptr @___asan_gen_.189 to i32), i32 ptrtoint (ptr @___asan_gen_.190 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.134 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.27 to i32), i32 25, i32 64, i32 ptrtoint (ptr @___asan_gen_.189 to i32), i32 ptrtoint (ptr @___asan_gen_.190 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.140 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.28 to i32), i32 42, i32 96, i32 ptrtoint (ptr @___asan_gen_.189 to i32), i32 ptrtoint (ptr @___asan_gen_.190 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.140 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.29 to i32), i32 44, i32 96, i32 ptrtoint (ptr @___asan_gen_.189 to i32), i32 ptrtoint (ptr @___asan_gen_.190 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.143 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.32 to i32), i32 17, i32 64, i32 ptrtoint (ptr @___asan_gen_.189 to i32), i32 ptrtoint (ptr @___asan_gen_.190 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.146 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.33 to i32), i32 115, i32 160, i32 ptrtoint (ptr @___asan_gen_.189 to i32), i32 ptrtoint (ptr @___asan_gen_.190 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.149 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.34 to i32), i32 45, i32 96, i32 ptrtoint (ptr @___asan_gen_.189 to i32), i32 ptrtoint (ptr @___asan_gen_.190 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.155 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.35 to i32), i32 14, i32 32, i32 ptrtoint (ptr @___asan_gen_.189 to i32), i32 ptrtoint (ptr @___asan_gen_.190 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.155 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.37 to i32), i32 26, i32 64, i32 ptrtoint (ptr @___asan_gen_.189 to i32), i32 ptrtoint (ptr @___asan_gen_.190 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.158 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @grow_buffers._entry to i32), i32 24, i32 64, i32 ptrtoint (ptr @___asan_gen_.159 to i32), i32 ptrtoint (ptr @___asan_gen_.190 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.167 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.39 to i32), i32 56, i32 96, i32 ptrtoint (ptr @___asan_gen_.189 to i32), i32 ptrtoint (ptr @___asan_gen_.190 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.167 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.40 to i32), i32 13, i32 32, i32 ptrtoint (ptr @___asan_gen_.189 to i32), i32 ptrtoint (ptr @___asan_gen_.190 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.167 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.41 to i32), i32 72, i32 128, i32 ptrtoint (ptr @___asan_gen_.189 to i32), i32 ptrtoint (ptr @___asan_gen_.190 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.170 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.42 to i32), i32 24, i32 64, i32 ptrtoint (ptr @___asan_gen_.189 to i32), i32 ptrtoint (ptr @___asan_gen_.190 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.173 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.43 to i32), i32 28, i32 64, i32 ptrtoint (ptr @___asan_gen_.189 to i32), i32 ptrtoint (ptr @___asan_gen_.190 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.176 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.44 to i32), i32 42, i32 96, i32 ptrtoint (ptr @___asan_gen_.189 to i32), i32 ptrtoint (ptr @___asan_gen_.190 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.179 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.45 to i32), i32 24, i32 64, i32 ptrtoint (ptr @___asan_gen_.189 to i32), i32 ptrtoint (ptr @___asan_gen_.190 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.182 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @end_buffer_async_read_io.__key to i32), i32 8, i32 32, i32 ptrtoint (ptr @___asan_gen_.183 to i32), i32 ptrtoint (ptr @___asan_gen_.190 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.188 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.46 to i32), i32 30, i32 64, i32 ptrtoint (ptr @___asan_gen_.189 to i32), i32 ptrtoint (ptr @___asan_gen_.190 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.188 to i32), i32 -1 }, { i32, i32, i32, i32, i32, i32, i32, i32 } { i32 ptrtoint (ptr @.str.47 to i32), i32 18, i32 64, i32 ptrtoint (ptr @___asan_gen_.189 to i32), i32 ptrtoint (ptr @___asan_gen_.190 to i32), i32 0, i32 ptrtoint (ptr @___asan_gen_.191 to i32), i32 -1 }]
@llvm.used = appending global [2 x ptr] [ptr @asan.module_ctor, ptr @asan.module_dtor], section "llvm.metadata"
@llvm.global_ctors = appending global [1 x { i32, ptr, ptr }] [{ i32, ptr, ptr } { i32 1, ptr @asan.module_ctor, ptr null }]
@llvm.global_dtors = appending global [1 x { i32, ptr, ptr }] [{ i32, ptr, ptr } { i32 1, ptr @asan.module_dtor, ptr null }]

; Function Attrs: inlinehint nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local void @touch_buffer(ptr noundef %bh) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  tail call fastcc void @trace_block_touch_buffer(ptr noundef %bh)
  %b_page = getelementptr inbounds %struct.buffer_head, ptr %bh, i32 0, i32 2
  %0 = ptrtoint ptr %b_page to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %b_page, align 8
  tail call void @mark_page_accessed(ptr noundef %1) #14
  ret void
}

; Function Attrs: inlinehint nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal fastcc void @trace_block_touch_buffer(ptr noundef %bh) unnamed_addr #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  callbr void asm sideeffect "1:\0A\09nop\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr getelementptr inbounds (%struct.tracepoint, ptr @__tracepoint_block_touch_buffer, i32 0, i32 1), ptr blockaddress(@trace_block_touch_buffer, %do.body)) #14
          to label %if.end48 [label %do.body], !srcloc !253

do.body:                                          ; preds = %entry
  %0 = tail call i32 @llvm.read_register.i32(metadata !243) #14
  %and.i = and i32 %0, -16384
  %1 = inttoptr i32 %and.i to ptr
  %cpu = getelementptr inbounds %struct.thread_info, ptr %1, i32 0, i32 3
  %2 = ptrtoint ptr %cpu to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load i32, ptr %cpu, align 4
  call void @__asan_load4_noabort(i32 ptrtoint (ptr @nr_cpu_ids to i32))
  %4 = load i32, ptr @nr_cpu_ids, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %4, i32 %3)
  %cmp.not.i.i.i.i = icmp ugt i32 %4, %3
  br i1 %cmp.not.i.i.i.i, label %do.body.cpu_online.exit_crit_edge, label %land.rhs.i.i.i.i

do.body.cpu_online.exit_crit_edge:                ; preds = %do.body
  call void @__sanitizer_cov_trace_pc() #16
  br label %cpu_online.exit

land.rhs.i.i.i.i:                                 ; preds = %do.body
  %.b37.i.i.i.i = load i1, ptr @cpu_max_bits_warn.__already_done, align 1
  br i1 %.b37.i.i.i.i, label %land.rhs.i.i.i.i.cpu_online.exit_crit_edge, label %if.then.i.i.i.i, !prof !254

land.rhs.i.i.i.i.cpu_online.exit_crit_edge:       ; preds = %land.rhs.i.i.i.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %cpu_online.exit

if.then.i.i.i.i:                                  ; preds = %land.rhs.i.i.i.i
  call void @__sanitizer_cov_trace_pc() #16
  store i1 true, ptr @cpu_max_bits_warn.__already_done, align 1
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.12, i32 noundef 108, i32 noundef 9, ptr noundef null) #14
  br label %cpu_online.exit

cpu_online.exit:                                  ; preds = %if.then.i.i.i.i, %land.rhs.i.i.i.i.cpu_online.exit_crit_edge, %do.body.cpu_online.exit_crit_edge
  %div3.i.i.i = lshr i32 %3, 5
  %arrayidx.i.i.i = getelementptr i32, ptr @__cpu_online_mask, i32 %div3.i.i.i
  %5 = ptrtoint ptr %arrayidx.i.i.i to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load volatile i32, ptr %arrayidx.i.i.i, align 4
  %and.i.i.i75 = and i32 %3, 31
  %7 = shl nuw i32 1, %and.i.i.i75
  %8 = and i32 %6, %7
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %8)
  %tobool.i.not = icmp eq i32 %8, 0
  br i1 %tobool.i.not, label %cpu_online.exit.if.end69_crit_edge, label %cleanup.thread

cpu_online.exit.if.end69_crit_edge:               ; preds = %cpu_online.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end69

cleanup.thread:                                   ; preds = %cpu_online.exit
  call void @__sanitizer_cov_trace_pc() #16
  %9 = tail call i32 @llvm.read_register.i32(metadata !243) #14
  %and.i.i.i = and i32 %9, -16384
  %10 = inttoptr i32 %and.i.i.i to ptr
  %preempt_count.i.i = getelementptr inbounds %struct.thread_info, ptr %10, i32 0, i32 1
  %11 = ptrtoint ptr %preempt_count.i.i to i32
  call void @__asan_load4_noabort(i32 %11)
  %12 = load volatile i32, ptr %preempt_count.i.i, align 4
  %add.i = add i32 %12, 1
  store volatile i32 %add.i, ptr %preempt_count.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #14, !srcloc !255
  %call42 = tail call i32 @__traceiter_block_touch_buffer(ptr noundef null, ptr noundef %bh) #14
  tail call void asm sideeffect "", "~{memory}"() #14, !srcloc !256
  %13 = tail call i32 @llvm.read_register.i32(metadata !243) #14
  %and.i.i.i73 = and i32 %13, -16384
  %14 = inttoptr i32 %and.i.i.i73 to ptr
  %preempt_count.i.i74 = getelementptr inbounds %struct.thread_info, ptr %14, i32 0, i32 1
  %15 = ptrtoint ptr %preempt_count.i.i74 to i32
  call void @__asan_load4_noabort(i32 %15)
  %16 = load volatile i32, ptr %preempt_count.i.i74, align 4
  %sub.i = add i32 %16, -1
  store volatile i32 %sub.i, ptr %preempt_count.i.i74, align 4
  br label %if.end48

if.end48:                                         ; preds = %cleanup.thread, %entry
  %17 = tail call i32 @llvm.read_register.i32(metadata !243) #14
  %and.i76 = and i32 %17, -16384
  %18 = inttoptr i32 %and.i76 to ptr
  %cpu50 = getelementptr inbounds %struct.thread_info, ptr %18, i32 0, i32 3
  %19 = ptrtoint ptr %cpu50 to i32
  call void @__asan_load4_noabort(i32 %19)
  %20 = load i32, ptr %cpu50, align 4
  call void @__asan_load4_noabort(i32 ptrtoint (ptr @nr_cpu_ids to i32))
  %21 = load i32, ptr @nr_cpu_ids, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %21, i32 %20)
  %cmp.not.i.i.i.i77 = icmp ugt i32 %21, %20
  br i1 %cmp.not.i.i.i.i77, label %if.end48.cpu_online.exit85_crit_edge, label %land.rhs.i.i.i.i79

if.end48.cpu_online.exit85_crit_edge:             ; preds = %if.end48
  call void @__sanitizer_cov_trace_pc() #16
  br label %cpu_online.exit85

land.rhs.i.i.i.i79:                               ; preds = %if.end48
  %.b37.i.i.i.i78 = load i1, ptr @cpu_max_bits_warn.__already_done, align 1
  br i1 %.b37.i.i.i.i78, label %land.rhs.i.i.i.i79.cpu_online.exit85_crit_edge, label %if.then.i.i.i.i80, !prof !254

land.rhs.i.i.i.i79.cpu_online.exit85_crit_edge:   ; preds = %land.rhs.i.i.i.i79
  call void @__sanitizer_cov_trace_pc() #16
  br label %cpu_online.exit85

if.then.i.i.i.i80:                                ; preds = %land.rhs.i.i.i.i79
  call void @__sanitizer_cov_trace_pc() #16
  store i1 true, ptr @cpu_max_bits_warn.__already_done, align 1
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.12, i32 noundef 108, i32 noundef 9, ptr noundef null) #14
  br label %cpu_online.exit85

cpu_online.exit85:                                ; preds = %if.then.i.i.i.i80, %land.rhs.i.i.i.i79.cpu_online.exit85_crit_edge, %if.end48.cpu_online.exit85_crit_edge
  %div3.i.i.i81 = lshr i32 %20, 5
  %arrayidx.i.i.i82 = getelementptr i32, ptr @__cpu_online_mask, i32 %div3.i.i.i81
  %22 = ptrtoint ptr %arrayidx.i.i.i82 to i32
  call void @__asan_load4_noabort(i32 %22)
  %23 = load volatile i32, ptr %arrayidx.i.i.i82, align 4
  %and.i.i.i83 = and i32 %20, 31
  %24 = shl nuw i32 1, %and.i.i.i83
  %25 = and i32 %23, %24
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %25)
  %tobool.i84.not = icmp eq i32 %25, 0
  br i1 %tobool.i84.not, label %cpu_online.exit85.if.end69_crit_edge, label %if.then52

cpu_online.exit85.if.end69_crit_edge:             ; preds = %cpu_online.exit85
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end69

if.then52:                                        ; preds = %cpu_online.exit85
  %26 = tail call i32 @llvm.read_register.i32(metadata !243) #14
  %and.i.i.i.i = and i32 %26, -16384
  %27 = inttoptr i32 %and.i.i.i.i to ptr
  %preempt_count.i.i.i = getelementptr inbounds %struct.thread_info, ptr %27, i32 0, i32 1
  %28 = ptrtoint ptr %preempt_count.i.i.i to i32
  call void @__asan_load4_noabort(i32 %28)
  %29 = load volatile i32, ptr %preempt_count.i.i.i, align 4
  %add.i.i = add i32 %29, 1
  store volatile i32 %add.i.i, ptr %preempt_count.i.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #14, !srcloc !257
  call void @__asan_load4_noabort(i32 ptrtoint (ptr getelementptr inbounds (%struct.tracepoint, ptr @__tracepoint_block_touch_buffer, i32 0, i32 7) to i32))
  %30 = load volatile ptr, ptr getelementptr inbounds (%struct.tracepoint, ptr @__tracepoint_block_touch_buffer, i32 0, i32 7), align 4
  %call58 = tail call i32 @rcu_read_lock_sched_held() #14
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call58)
  %tobool59.not = icmp eq i32 %call58, 0
  br i1 %tobool59.not, label %land.lhs.true, label %if.then52.do.end67_crit_edge

if.then52.do.end67_crit_edge:                     ; preds = %if.then52
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.end67

land.lhs.true:                                    ; preds = %if.then52
  %call60 = tail call i32 @debug_lockdep_rcu_enabled() #14
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call60)
  %tobool61.not = icmp eq i32 %call60, 0
  br i1 %tobool61.not, label %land.lhs.true.do.end67_crit_edge, label %land.lhs.true62

land.lhs.true.do.end67_crit_edge:                 ; preds = %land.lhs.true
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.end67

land.lhs.true62:                                  ; preds = %land.lhs.true
  %.b72 = load i1, ptr @trace_block_touch_buffer.__warned, align 1
  br i1 %.b72, label %land.lhs.true62.do.end67_crit_edge, label %if.then64

land.lhs.true62.do.end67_crit_edge:               ; preds = %land.lhs.true62
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.end67

if.then64:                                        ; preds = %land.lhs.true62
  call void @__sanitizer_cov_trace_pc() #16
  store i1 true, ptr @trace_block_touch_buffer.__warned, align 1
  tail call void @lockdep_rcu_suspicious(ptr noundef nonnull @.str.10, i32 noundef 50, ptr noundef nonnull @.str.11) #14
  br label %do.end67

do.end67:                                         ; preds = %if.then64, %land.lhs.true62.do.end67_crit_edge, %land.lhs.true.do.end67_crit_edge, %if.then52.do.end67_crit_edge
  tail call void asm sideeffect "", "~{memory}"() #14, !srcloc !258
  %31 = tail call i32 @llvm.read_register.i32(metadata !243) #14
  %and.i.i.i.i86 = and i32 %31, -16384
  %32 = inttoptr i32 %and.i.i.i.i86 to ptr
  %preempt_count.i.i.i87 = getelementptr inbounds %struct.thread_info, ptr %32, i32 0, i32 1
  %33 = ptrtoint ptr %preempt_count.i.i.i87 to i32
  call void @__asan_load4_noabort(i32 %33)
  %34 = load volatile i32, ptr %preempt_count.i.i.i87, align 4
  %sub.i.i = add i32 %34, -1
  store volatile i32 %sub.i.i, ptr %preempt_count.i.i.i87, align 4
  br label %if.end69

if.end69:                                         ; preds = %do.end67, %cpu_online.exit85.if.end69_crit_edge, %cpu_online.exit.if.end69_crit_edge
  ret void
}

; Function Attrs: null_pointer_is_valid
declare dso_local void @mark_page_accessed(ptr noundef) local_unnamed_addr #1

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local void @__lock_buffer(ptr noundef %bh) #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  tail call void @__might_sleep(ptr noundef nonnull @.str.13, i32 noundef 205) #14
  %call.i = tail call i32 @_test_and_set_bit(i32 noundef 2, ptr noundef %bh) #14
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call.i)
  %tobool.not.i = icmp eq i32 %call.i, 0
  br i1 %tobool.not.i, label %entry.wait_on_bit_lock_io.exit_crit_edge, label %if.end.i

entry.wait_on_bit_lock_io.exit_crit_edge:         ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  br label %wait_on_bit_lock_io.exit

if.end.i:                                         ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  %call3.i = tail call i32 @out_of_line_wait_on_bit_lock(ptr noundef %bh, i32 noundef 2, ptr noundef nonnull @bit_wait_io, i32 noundef 2) #14
  br label %wait_on_bit_lock_io.exit

wait_on_bit_lock_io.exit:                         ; preds = %if.end.i, %entry.wait_on_bit_lock_io.exit_crit_edge
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local void @unlock_buffer(ptr noundef %bh) #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %call.i.i = tail call zeroext i1 @__kasan_check_write(ptr noundef %bh, i32 noundef 4) #14
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !259
  tail call void @llvm.prefetch.p0(ptr %bh, i32 1, i32 3, i32 1) #14
  %0 = tail call { i32, i32, i32 } asm sideeffect "@ atomic_fetch_andnot\0A1:\09ldrex\09$0, [$4]\0A\09bic\09$1, $0, $5\0A\09strex\09$2, $1, [$4]\0A\09teq\09$2, #0\0A\09bne\091b", "=&r,=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %bh, ptr %bh, i32 4, ptr elementtype(i32) %bh) #14, !srcloc !260
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !261
  tail call void @wake_up_bit(ptr noundef %bh, i32 noundef 2) #14
  ret void
}

; Function Attrs: null_pointer_is_valid
declare dso_local void @wake_up_bit(ptr noundef, i32 noundef) local_unnamed_addr #1

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local void @buffer_check_dirty_writeback(ptr noundef %page, ptr nocapture noundef writeonly %dirty, ptr nocapture noundef writeonly %writeback) #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = ptrtoint ptr %dirty to i32
  call void @__asan_store1_noabort(i32 %0)
  store i8 0, ptr %dirty, align 1
  %1 = ptrtoint ptr %writeback to i32
  call void @__asan_store1_noabort(i32 %1)
  store i8 0, ptr %writeback, align 1
  %2 = getelementptr inbounds %struct.page, ptr %page, i32 0, i32 1
  %3 = ptrtoint ptr %2 to i32
  call void @__asan_load4_noabort(i32 %3)
  %4 = load volatile i32, ptr %2, align 4
  %and.i.i = and i32 %4, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i)
  %tobool.not.i.i = icmp eq i32 %and.i.i, 0
  br i1 %tobool.not.i.i, label %if.end.i.i, label %if.then.i.i, !prof !254

if.then.i.i:                                      ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i.i = add i32 %4, -1
  br label %_compound_head.exit.i

if.end.i.i:                                       ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  %5 = ptrtoint ptr %page to i32
  br label %_compound_head.exit.i

_compound_head.exit.i:                            ; preds = %if.end.i.i, %if.then.i.i
  %retval.0.i.i = phi i32 [ %sub.i.i, %if.then.i.i ], [ %5, %if.end.i.i ]
  %6 = inttoptr i32 %retval.0.i.i to ptr
  %7 = ptrtoint ptr %6 to i32
  call void @__asan_load4_noabort(i32 %7)
  %8 = load volatile i32, ptr %6, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %8)
  %cmp.i.not.i = icmp eq i32 %8, -1
  %9 = ptrtoint ptr %2 to i32
  call void @__asan_load4_noabort(i32 %9)
  %10 = load volatile i32, ptr %2, align 4
  %and.i16.i = and i32 %10, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i16.i)
  %tobool.not.i17.i = icmp eq i32 %and.i16.i, 0
  br i1 %cmp.i.not.i, label %if.then.i, label %do.end10.i, !prof !262

if.then.i:                                        ; preds = %_compound_head.exit.i
  br i1 %tobool.not.i17.i, label %if.end.i20.i, label %if.then.i19.i, !prof !254

if.then.i19.i:                                    ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i18.i = add i32 %10, -1
  br label %_compound_head.exit22.i

if.end.i20.i:                                     ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #16
  %11 = ptrtoint ptr %page to i32
  br label %_compound_head.exit22.i

_compound_head.exit22.i:                          ; preds = %if.end.i20.i, %if.then.i19.i
  %retval.0.i21.i = phi i32 [ %sub.i18.i, %if.then.i19.i ], [ %11, %if.end.i20.i ]
  %12 = inttoptr i32 %retval.0.i21.i to ptr
  tail call void @dump_page(ptr noundef %12, ptr noundef nonnull @.str.14) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 414, 0\0A.popsection", ""() #14, !srcloc !263
  unreachable

do.end10.i:                                       ; preds = %_compound_head.exit.i
  br i1 %tobool.not.i17.i, label %if.end.i27.i, label %if.then.i26.i, !prof !254

if.then.i26.i:                                    ; preds = %do.end10.i
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i25.i = add i32 %10, -1
  br label %PageLocked.exit

if.end.i27.i:                                     ; preds = %do.end10.i
  call void @__sanitizer_cov_trace_pc() #16
  %13 = ptrtoint ptr %page to i32
  br label %PageLocked.exit

PageLocked.exit:                                  ; preds = %if.end.i27.i, %if.then.i26.i
  %retval.0.i28.i = phi i32 [ %sub.i25.i, %if.then.i26.i ], [ %13, %if.end.i27.i ]
  %14 = inttoptr i32 %retval.0.i28.i to ptr
  %15 = ptrtoint ptr %14 to i32
  call void @__asan_load4_noabort(i32 %15)
  %16 = load volatile i32, ptr %14, align 4
  %and1.i.i = and i32 %16, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and1.i.i)
  %tobool.not = icmp eq i32 %and1.i.i, 0
  br i1 %tobool.not, label %do.body4, label %do.end9, !prof !262

do.body4:                                         ; preds = %PageLocked.exit
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22fs/buffer.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 93, 0\0A.popsection", ""() #14, !srcloc !264
  unreachable

do.end9:                                          ; preds = %PageLocked.exit
  %17 = ptrtoint ptr %page to i32
  call void @__asan_load4_noabort(i32 %17)
  %18 = load volatile i32, ptr %page, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %18)
  %cmp.i.not.i62 = icmp eq i32 %18, -1
  br i1 %cmp.i.not.i62, label %if.then.i63, label %PagePrivate.exit, !prof !262

if.then.i63:                                      ; preds = %do.end9
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %page, ptr noundef nonnull @.str.15) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 452, 0\0A.popsection", ""() #14, !srcloc !265
  unreachable

PagePrivate.exit:                                 ; preds = %do.end9
  %19 = ptrtoint ptr %page to i32
  call void @__asan_load4_noabort(i32 %19)
  %20 = load volatile i32, ptr %page, align 4
  %21 = and i32 %20, 8192
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %21)
  %tobool11.not = icmp eq i32 %21, 0
  br i1 %tobool11.not, label %PagePrivate.exit.cleanup_crit_edge, label %if.end13

PagePrivate.exit.cleanup_crit_edge:               ; preds = %PagePrivate.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %cleanup

if.end13:                                         ; preds = %PagePrivate.exit
  %22 = ptrtoint ptr %2 to i32
  call void @__asan_load4_noabort(i32 %22)
  %23 = load volatile i32, ptr %2, align 4
  %and.i.i65 = and i32 %23, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i65)
  %tobool.not.i.i66 = icmp eq i32 %and.i.i65, 0
  br i1 %tobool.not.i.i66, label %if.end.i.i69, label %if.then.i.i68, !prof !254

if.then.i.i68:                                    ; preds = %if.end13
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i.i67 = add i32 %23, -1
  br label %_compound_head.exit.i74

if.end.i.i69:                                     ; preds = %if.end13
  call void @__sanitizer_cov_trace_pc() #16
  %24 = ptrtoint ptr %page to i32
  br label %_compound_head.exit.i74

_compound_head.exit.i74:                          ; preds = %if.end.i.i69, %if.then.i.i68
  %retval.0.i.i70 = phi i32 [ %sub.i.i67, %if.then.i.i68 ], [ %24, %if.end.i.i69 ]
  %25 = inttoptr i32 %retval.0.i.i70 to ptr
  %26 = ptrtoint ptr %25 to i32
  call void @__asan_load4_noabort(i32 %26)
  %27 = load volatile i32, ptr %25, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %27)
  %cmp.i.not.i71 = icmp eq i32 %27, -1
  %28 = ptrtoint ptr %2 to i32
  call void @__asan_load4_noabort(i32 %28)
  %29 = load volatile i32, ptr %2, align 4
  %and.i16.i72 = and i32 %29, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i16.i72)
  %tobool.not.i17.i73 = icmp eq i32 %and.i16.i72, 0
  br i1 %cmp.i.not.i71, label %if.then.i75, label %do.end10.i81, !prof !262

if.then.i75:                                      ; preds = %_compound_head.exit.i74
  br i1 %tobool.not.i17.i73, label %if.end.i20.i78, label %if.then.i19.i77, !prof !254

if.then.i19.i77:                                  ; preds = %if.then.i75
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i18.i76 = add i32 %29, -1
  br label %_compound_head.exit22.i80

if.end.i20.i78:                                   ; preds = %if.then.i75
  call void @__sanitizer_cov_trace_pc() #16
  %30 = ptrtoint ptr %page to i32
  br label %_compound_head.exit22.i80

_compound_head.exit22.i80:                        ; preds = %if.end.i20.i78, %if.then.i19.i77
  %retval.0.i21.i79 = phi i32 [ %sub.i18.i76, %if.then.i19.i77 ], [ %30, %if.end.i20.i78 ]
  %31 = inttoptr i32 %retval.0.i21.i79 to ptr
  tail call void @dump_page(ptr noundef %31, ptr noundef nonnull @.str.14) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 461, 0\0A.popsection", ""() #14, !srcloc !266
  unreachable

do.end10.i81:                                     ; preds = %_compound_head.exit.i74
  br i1 %tobool.not.i17.i73, label %if.end.i27.i84, label %if.then.i26.i83, !prof !254

if.then.i26.i83:                                  ; preds = %do.end10.i81
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i25.i82 = add i32 %29, -1
  br label %PageWriteback.exit

if.end.i27.i84:                                   ; preds = %do.end10.i81
  call void @__sanitizer_cov_trace_pc() #16
  %32 = ptrtoint ptr %page to i32
  br label %PageWriteback.exit

PageWriteback.exit:                               ; preds = %if.end.i27.i84, %if.then.i26.i83
  %retval.0.i28.i85 = phi i32 [ %sub.i25.i82, %if.then.i26.i83 ], [ %32, %if.end.i27.i84 ]
  %33 = inttoptr i32 %retval.0.i28.i85 to ptr
  %34 = ptrtoint ptr %33 to i32
  call void @__asan_load4_noabort(i32 %34)
  %35 = load volatile i32, ptr %33, align 4
  %36 = and i32 %35, 32768
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %36)
  %tobool15.not = icmp eq i32 %36, 0
  br i1 %tobool15.not, label %PageWriteback.exit.do.body18_crit_edge, label %if.then16

PageWriteback.exit.do.body18_crit_edge:           ; preds = %PageWriteback.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.body18

if.then16:                                        ; preds = %PageWriteback.exit
  call void @__sanitizer_cov_trace_pc() #16
  %37 = ptrtoint ptr %writeback to i32
  call void @__asan_store1_noabort(i32 %37)
  store i8 1, ptr %writeback, align 1
  br label %do.body18

do.body18:                                        ; preds = %if.then16, %PageWriteback.exit.do.body18_crit_edge
  %38 = ptrtoint ptr %page to i32
  call void @__asan_load4_noabort(i32 %38)
  %39 = load volatile i32, ptr %page, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %39)
  %cmp.i.not.i88 = icmp eq i32 %39, -1
  br i1 %cmp.i.not.i88, label %if.then.i89, label %PagePrivate.exit92, !prof !262

if.then.i89:                                      ; preds = %do.body18
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %page, ptr noundef nonnull @.str.15) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 452, 0\0A.popsection", ""() #14, !srcloc !265
  unreachable

PagePrivate.exit92:                               ; preds = %do.body18
  %40 = ptrtoint ptr %page to i32
  call void @__asan_load4_noabort(i32 %40)
  %41 = load volatile i32, ptr %page, align 4
  %42 = and i32 %41, 8192
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %42)
  %tobool20.not = icmp eq i32 %42, 0
  br i1 %tobool20.not, label %do.body30, label %do.end38, !prof !262

do.body30:                                        ; preds = %PagePrivate.exit92
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22fs/buffer.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 101, 0\0A.popsection", ""() #14, !srcloc !267
  unreachable

do.end38:                                         ; preds = %PagePrivate.exit92
  %private = getelementptr inbounds %struct.page, ptr %page, i32 0, i32 1, i32 0, i32 3
  %43 = ptrtoint ptr %private to i32
  call void @__asan_load4_noabort(i32 %43)
  %44 = load i32, ptr %private, align 4
  %45 = inttoptr i32 %44 to ptr
  br label %do.body39

do.body39:                                        ; preds = %if.end47.do.body39_crit_edge, %do.end38
  %bh.0 = phi ptr [ %45, %do.end38 ], [ %55, %if.end47.do.body39_crit_edge ]
  %46 = ptrtoint ptr %bh.0 to i32
  call void @__asan_load4_noabort(i32 %46)
  %47 = load volatile i32, ptr %bh.0, align 4
  %48 = and i32 %47, 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %48)
  %tobool41.not = icmp eq i32 %48, 0
  br i1 %tobool41.not, label %do.body39.if.end43_crit_edge, label %if.then42

do.body39.if.end43_crit_edge:                     ; preds = %do.body39
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end43

if.then42:                                        ; preds = %do.body39
  call void @__sanitizer_cov_trace_pc() #16
  %49 = ptrtoint ptr %writeback to i32
  call void @__asan_store1_noabort(i32 %49)
  store i8 1, ptr %writeback, align 1
  br label %if.end43

if.end43:                                         ; preds = %if.then42, %do.body39.if.end43_crit_edge
  %50 = ptrtoint ptr %bh.0 to i32
  call void @__asan_load4_noabort(i32 %50)
  %51 = load volatile i32, ptr %bh.0, align 4
  %52 = and i32 %51, 2
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %52)
  %tobool45.not = icmp eq i32 %52, 0
  br i1 %tobool45.not, label %if.end43.if.end47_crit_edge, label %if.then46

if.end43.if.end47_crit_edge:                      ; preds = %if.end43
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end47

if.then46:                                        ; preds = %if.end43
  call void @__sanitizer_cov_trace_pc() #16
  %53 = ptrtoint ptr %dirty to i32
  call void @__asan_store1_noabort(i32 %53)
  store i8 1, ptr %dirty, align 1
  br label %if.end47

if.end47:                                         ; preds = %if.then46, %if.end43.if.end47_crit_edge
  %b_this_page = getelementptr inbounds %struct.buffer_head, ptr %bh.0, i32 0, i32 1
  %54 = ptrtoint ptr %b_this_page to i32
  call void @__asan_load4_noabort(i32 %54)
  %55 = load ptr, ptr %b_this_page, align 4
  %cmp.not = icmp eq ptr %55, %45
  br i1 %cmp.not, label %if.end47.cleanup_crit_edge, label %if.end47.do.body39_crit_edge

if.end47.do.body39_crit_edge:                     ; preds = %if.end47
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.body39

if.end47.cleanup_crit_edge:                       ; preds = %if.end47
  call void @__sanitizer_cov_trace_pc() #16
  br label %cleanup

cleanup:                                          ; preds = %if.end47.cleanup_crit_edge, %PagePrivate.exit.cleanup_crit_edge
  ret void
}

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #3

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #3

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local void @__wait_on_buffer(ptr noundef %bh) #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  tail call void @__might_sleep(ptr noundef nonnull @.str.13, i32 noundef 98) #14
  %0 = ptrtoint ptr %bh to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load volatile i32, ptr %bh, align 4
  %2 = and i32 %1, 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %2)
  %tobool.not.i = icmp eq i32 %2, 0
  br i1 %tobool.not.i, label %entry.wait_on_bit_io.exit_crit_edge, label %if.end.i

entry.wait_on_bit_io.exit_crit_edge:              ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  br label %wait_on_bit_io.exit

if.end.i:                                         ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  %call3.i = tail call i32 @out_of_line_wait_on_bit(ptr noundef %bh, i32 noundef 2, ptr noundef nonnull @bit_wait_io, i32 noundef 2) #14
  br label %wait_on_bit_io.exit

wait_on_bit_io.exit:                              ; preds = %if.end.i, %entry.wait_on_bit_io.exit_crit_edge
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local void @end_buffer_read_sync(ptr noundef %bh, i32 noundef %uptodate) #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %uptodate)
  %tobool.not.i = icmp eq i32 %uptodate, 0
  br i1 %tobool.not.i, label %if.else.i, label %if.then.i

if.then.i:                                        ; preds = %entry
  %0 = ptrtoint ptr %bh to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load volatile i32, ptr %bh, align 4
  %and1.i.i.i = and i32 %1, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and1.i.i.i)
  %tobool.not.i.i = icmp eq i32 %and1.i.i.i, 0
  br i1 %tobool.not.i.i, label %if.then.i.i, label %if.then.i.__end_buffer_read_notouch.exit_crit_edge

if.then.i.__end_buffer_read_notouch.exit_crit_edge: ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %__end_buffer_read_notouch.exit

if.then.i.i:                                      ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @_set_bit(i32 noundef 0, ptr noundef %bh) #14
  br label %__end_buffer_read_notouch.exit

if.else.i:                                        ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @_clear_bit(i32 noundef 0, ptr noundef %bh) #14
  br label %__end_buffer_read_notouch.exit

__end_buffer_read_notouch.exit:                   ; preds = %if.else.i, %if.then.i.i, %if.then.i.__end_buffer_read_notouch.exit_crit_edge
  %call.i.i.i.i = tail call zeroext i1 @__kasan_check_write(ptr noundef %bh, i32 noundef 4) #14
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !259
  tail call void @llvm.prefetch.p0(ptr %bh, i32 1, i32 3, i32 1) #14
  %2 = tail call { i32, i32, i32 } asm sideeffect "@ atomic_fetch_andnot\0A1:\09ldrex\09$0, [$4]\0A\09bic\09$1, $0, $5\0A\09strex\09$2, $1, [$4]\0A\09teq\09$2, #0\0A\09bne\091b", "=&r,=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %bh, ptr %bh, i32 4, ptr elementtype(i32) %bh) #14, !srcloc !260
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !261
  tail call void @wake_up_bit(ptr noundef %bh, i32 noundef 2) #14
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !268
  %b_count.i = getelementptr inbounds %struct.buffer_head, ptr %bh, i32 0, i32 11
  %call.i.i.i = tail call zeroext i1 @__kasan_check_write(ptr noundef %b_count.i, i32 noundef 4) #14
  tail call void @llvm.prefetch.p0(ptr %b_count.i, i32 1, i32 3, i32 1) #14
  %3 = tail call { i32, i32 } asm sideeffect "@ atomic_sub\0A1:\09ldrex\09$0, [$3]\0A\09sub\09$0, $0, $4\0A\09strex\09$1, $0, [$3]\0A\09teq\09$1, #0\0A\09bne\091b", "=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %b_count.i, ptr %b_count.i, i32 1, ptr elementtype(i32) %b_count.i) #14, !srcloc !269
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local void @end_buffer_write_sync(ptr noundef %bh, i32 noundef %uptodate) #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %uptodate)
  %tobool.not = icmp eq i32 %uptodate, 0
  %0 = ptrtoint ptr %bh to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load volatile i32, ptr %bh, align 4
  br i1 %tobool.not, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %and1.i.i = and i32 %1, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and1.i.i)
  %tobool.not.i = icmp eq i32 %and1.i.i, 0
  br i1 %tobool.not.i, label %if.then.i, label %if.then.if.end_crit_edge

if.then.if.end_crit_edge:                         ; preds = %if.then
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end

if.then.i:                                        ; preds = %if.then
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @_set_bit(i32 noundef 0, ptr noundef %bh) #14
  br label %if.end

if.else:                                          ; preds = %entry
  %2 = and i32 %1, 4096
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %2)
  %tobool.not.i6 = icmp eq i32 %2, 0
  br i1 %tobool.not.i6, label %if.then.i7, label %if.else.buffer_io_error.exit_crit_edge

if.else.buffer_io_error.exit_crit_edge:           ; preds = %if.else
  call void @__sanitizer_cov_trace_pc() #16
  br label %buffer_io_error.exit

if.then.i7:                                       ; preds = %if.else
  %call1.i = tail call i32 @___ratelimit(ptr noundef nonnull @buffer_io_error._rs, ptr noundef nonnull @__func__.buffer_io_error) #14
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call1.i)
  %tobool2.not.i = icmp eq i32 %call1.i, 0
  br i1 %tobool2.not.i, label %if.then.i7.buffer_io_error.exit_crit_edge, label %do.end.i

if.then.i7.buffer_io_error.exit_crit_edge:        ; preds = %if.then.i7
  call void @__sanitizer_cov_trace_pc() #16
  br label %buffer_io_error.exit

do.end.i:                                         ; preds = %if.then.i7
  call void @__sanitizer_cov_trace_pc() #16
  %b_bdev.i = getelementptr inbounds %struct.buffer_head, ptr %bh, i32 0, i32 6
  %3 = ptrtoint ptr %b_bdev.i to i32
  call void @__asan_load4_noabort(i32 %3)
  %4 = load ptr, ptr %b_bdev.i, align 8
  %b_blocknr.i = getelementptr inbounds %struct.buffer_head, ptr %bh, i32 0, i32 3
  %5 = ptrtoint ptr %b_blocknr.i to i32
  call void @__asan_load8_noabort(i32 %5)
  %6 = load i64, ptr %b_blocknr.i, align 8
  %call4.i = tail call i32 (ptr, ...) @_printk(ptr noundef nonnull @.str.17, ptr noundef %4, i64 noundef %6, ptr noundef nonnull @.str) #17
  br label %buffer_io_error.exit

buffer_io_error.exit:                             ; preds = %do.end.i, %if.then.i7.buffer_io_error.exit_crit_edge, %if.else.buffer_io_error.exit_crit_edge
  tail call void @mark_buffer_write_io_error(ptr noundef %bh)
  tail call void @_clear_bit(i32 noundef 0, ptr noundef %bh) #14
  br label %if.end

if.end:                                           ; preds = %buffer_io_error.exit, %if.then.i, %if.then.if.end_crit_edge
  %call.i.i.i = tail call zeroext i1 @__kasan_check_write(ptr noundef %bh, i32 noundef 4) #14
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !259
  tail call void @llvm.prefetch.p0(ptr %bh, i32 1, i32 3, i32 1) #14
  %7 = tail call { i32, i32, i32 } asm sideeffect "@ atomic_fetch_andnot\0A1:\09ldrex\09$0, [$4]\0A\09bic\09$1, $0, $5\0A\09strex\09$2, $1, [$4]\0A\09teq\09$2, #0\0A\09bne\091b", "=&r,=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %bh, ptr %bh, i32 4, ptr elementtype(i32) %bh) #14, !srcloc !260
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !261
  tail call void @wake_up_bit(ptr noundef %bh, i32 noundef 2) #14
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !268
  %b_count.i = getelementptr inbounds %struct.buffer_head, ptr %bh, i32 0, i32 11
  %call.i.i.i8 = tail call zeroext i1 @__kasan_check_write(ptr noundef %b_count.i, i32 noundef 4) #14
  tail call void @llvm.prefetch.p0(ptr %b_count.i, i32 1, i32 3, i32 1) #14
  %8 = tail call { i32, i32 } asm sideeffect "@ atomic_sub\0A1:\09ldrex\09$0, [$3]\0A\09sub\09$0, $0, $4\0A\09strex\09$1, $0, [$3]\0A\09teq\09$1, #0\0A\09bne\091b", "=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %b_count.i, ptr %b_count.i, i32 1, ptr elementtype(i32) %b_count.i) #14, !srcloc !269
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local void @mark_buffer_write_io_error(ptr noundef %bh) #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = ptrtoint ptr %bh to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load volatile i32, ptr %bh, align 4
  %2 = and i32 %1, 1024
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %2)
  %tobool.not.i = icmp eq i32 %2, 0
  br i1 %tobool.not.i, label %if.then.i, label %entry.set_buffer_write_io_error.exit_crit_edge

entry.set_buffer_write_io_error.exit_crit_edge:   ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  br label %set_buffer_write_io_error.exit

if.then.i:                                        ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @_set_bit(i32 noundef 10, ptr noundef %bh) #14
  br label %set_buffer_write_io_error.exit

set_buffer_write_io_error.exit:                   ; preds = %if.then.i, %entry.set_buffer_write_io_error.exit_crit_edge
  %b_page = getelementptr inbounds %struct.buffer_head, ptr %bh, i32 0, i32 2
  %3 = ptrtoint ptr %b_page to i32
  call void @__asan_load4_noabort(i32 %3)
  %4 = load ptr, ptr %b_page, align 8
  %tobool.not = icmp eq ptr %4, null
  br i1 %tobool.not, label %set_buffer_write_io_error.exit.if.end_crit_edge, label %land.lhs.true

set_buffer_write_io_error.exit.if.end_crit_edge:  ; preds = %set_buffer_write_io_error.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end

land.lhs.true:                                    ; preds = %set_buffer_write_io_error.exit
  %mapping = getelementptr inbounds %struct.page, ptr %4, i32 0, i32 1, i32 0, i32 1
  %5 = ptrtoint ptr %mapping to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load ptr, ptr %mapping, align 4
  %tobool2.not = icmp eq ptr %6, null
  br i1 %tobool2.not, label %land.lhs.true.if.end_crit_edge, label %if.then

land.lhs.true.if.end_crit_edge:                   ; preds = %land.lhs.true
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end

if.then:                                          ; preds = %land.lhs.true
  tail call void @__filemap_set_wb_err(ptr noundef nonnull %6, i32 noundef -5) #14
  %7 = ptrtoint ptr %6 to i32
  call void @__asan_load4_noabort(i32 %7)
  %8 = load ptr, ptr %6, align 4
  %tobool4.not.i = icmp eq ptr %8, null
  br i1 %tobool4.not.i, label %if.then.mapping_set_error.exit_crit_edge, label %if.then5.i

if.then.mapping_set_error.exit_crit_edge:         ; preds = %if.then
  call void @__sanitizer_cov_trace_pc() #16
  br label %mapping_set_error.exit

if.then5.i:                                       ; preds = %if.then
  call void @__sanitizer_cov_trace_pc() #16
  %i_sb.i = getelementptr inbounds %struct.inode, ptr %8, i32 0, i32 8
  %9 = ptrtoint ptr %i_sb.i to i32
  call void @__asan_load4_noabort(i32 %9)
  %10 = load ptr, ptr %i_sb.i, align 4
  %s_wb_err.i = getelementptr inbounds %struct.super_block, ptr %10, i32 0, i32 50
  %call.i24 = tail call i32 @errseq_set(ptr noundef %s_wb_err.i, i32 noundef -5) #14
  br label %mapping_set_error.exit

mapping_set_error.exit:                           ; preds = %if.then5.i, %if.then.mapping_set_error.exit_crit_edge
  %flags.i = getelementptr inbounds %struct.address_space, ptr %6, i32 0, i32 10
  tail call void @_set_bit(i32 noundef 0, ptr noundef %flags.i) #14
  br label %if.end

if.end:                                           ; preds = %mapping_set_error.exit, %land.lhs.true.if.end_crit_edge, %set_buffer_write_io_error.exit.if.end_crit_edge
  %b_assoc_map = getelementptr inbounds %struct.buffer_head, ptr %bh, i32 0, i32 10
  %11 = ptrtoint ptr %b_assoc_map to i32
  call void @__asan_load4_noabort(i32 %11)
  %12 = load ptr, ptr %b_assoc_map, align 4
  %tobool5.not = icmp eq ptr %12, null
  br i1 %tobool5.not, label %if.end.if.end8_crit_edge, label %if.then6

if.end.if.end8_crit_edge:                         ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end8

if.then6:                                         ; preds = %if.end
  tail call void @__filemap_set_wb_err(ptr noundef nonnull %12, i32 noundef -5) #14
  %13 = ptrtoint ptr %12 to i32
  call void @__asan_load4_noabort(i32 %13)
  %14 = load ptr, ptr %12, align 4
  %tobool4.not.i25 = icmp eq ptr %14, null
  br i1 %tobool4.not.i25, label %if.then6.mapping_set_error.exit31_crit_edge, label %if.then5.i29

if.then6.mapping_set_error.exit31_crit_edge:      ; preds = %if.then6
  call void @__sanitizer_cov_trace_pc() #16
  br label %mapping_set_error.exit31

if.then5.i29:                                     ; preds = %if.then6
  call void @__sanitizer_cov_trace_pc() #16
  %i_sb.i26 = getelementptr inbounds %struct.inode, ptr %14, i32 0, i32 8
  %15 = ptrtoint ptr %i_sb.i26 to i32
  call void @__asan_load4_noabort(i32 %15)
  %16 = load ptr, ptr %i_sb.i26, align 4
  %s_wb_err.i27 = getelementptr inbounds %struct.super_block, ptr %16, i32 0, i32 50
  %call.i28 = tail call i32 @errseq_set(ptr noundef %s_wb_err.i27, i32 noundef -5) #14
  br label %mapping_set_error.exit31

mapping_set_error.exit31:                         ; preds = %if.then5.i29, %if.then6.mapping_set_error.exit31_crit_edge
  %flags.i30 = getelementptr inbounds %struct.address_space, ptr %12, i32 0, i32 10
  tail call void @_set_bit(i32 noundef 0, ptr noundef %flags.i30) #14
  br label %if.end8

if.end8:                                          ; preds = %mapping_set_error.exit31, %if.end.if.end8_crit_edge
  %17 = tail call i32 @llvm.read_register.i32(metadata !243) #14
  %and.i.i.i.i.i = and i32 %17, -16384
  %18 = inttoptr i32 %and.i.i.i.i.i to ptr
  %preempt_count.i.i.i.i = getelementptr inbounds %struct.thread_info, ptr %18, i32 0, i32 1
  %19 = ptrtoint ptr %preempt_count.i.i.i.i to i32
  call void @__asan_load4_noabort(i32 %19)
  %20 = load volatile i32, ptr %preempt_count.i.i.i.i, align 4
  %add.i.i.i = add i32 %20, 1
  store volatile i32 %add.i.i.i, ptr %preempt_count.i.i.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #14, !srcloc !270
  tail call fastcc void @rcu_lock_acquire(ptr noundef nonnull @rcu_lock_map) #14
  %call.i = tail call zeroext i1 @rcu_is_watching() #14
  br i1 %call.i, label %if.end8.rcu_read_lock.exit_crit_edge, label %land.lhs.true.i

if.end8.rcu_read_lock.exit_crit_edge:             ; preds = %if.end8
  call void @__sanitizer_cov_trace_pc() #16
  br label %rcu_read_lock.exit

land.lhs.true.i:                                  ; preds = %if.end8
  %call1.i = tail call i32 @debug_lockdep_rcu_enabled() #14
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call1.i)
  %tobool.not.i22 = icmp eq i32 %call1.i, 0
  br i1 %tobool.not.i22, label %land.lhs.true.i.rcu_read_lock.exit_crit_edge, label %land.lhs.true2.i

land.lhs.true.i.rcu_read_lock.exit_crit_edge:     ; preds = %land.lhs.true.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %rcu_read_lock.exit

land.lhs.true2.i:                                 ; preds = %land.lhs.true.i
  %.b4.i = load i1, ptr @rcu_read_lock.__warned, align 1
  br i1 %.b4.i, label %land.lhs.true2.i.rcu_read_lock.exit_crit_edge, label %if.then.i23

land.lhs.true2.i.rcu_read_lock.exit_crit_edge:    ; preds = %land.lhs.true2.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %rcu_read_lock.exit

if.then.i23:                                      ; preds = %land.lhs.true2.i
  call void @__sanitizer_cov_trace_pc() #16
  store i1 true, ptr @rcu_read_lock.__warned, align 1
  tail call void @lockdep_rcu_suspicious(ptr noundef nonnull @.str.27, i32 noundef 696, ptr noundef nonnull @.str.28) #14
  br label %rcu_read_lock.exit

rcu_read_lock.exit:                               ; preds = %if.then.i23, %land.lhs.true2.i.rcu_read_lock.exit_crit_edge, %land.lhs.true.i.rcu_read_lock.exit_crit_edge, %if.end8.rcu_read_lock.exit_crit_edge
  %b_bdev = getelementptr inbounds %struct.buffer_head, ptr %bh, i32 0, i32 6
  %21 = ptrtoint ptr %b_bdev to i32
  call void @__asan_load4_noabort(i32 %21)
  %22 = load ptr, ptr %b_bdev, align 8
  %bd_super = getelementptr inbounds %struct.block_device, ptr %22, i32 0, i32 8
  %23 = ptrtoint ptr %bd_super to i32
  call void @__asan_load4_noabort(i32 %23)
  %24 = load volatile ptr, ptr %bd_super, align 8
  %tobool9.not = icmp eq ptr %24, null
  br i1 %tobool9.not, label %rcu_read_lock.exit.if.end11_crit_edge, label %if.then10

rcu_read_lock.exit.if.end11_crit_edge:            ; preds = %rcu_read_lock.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end11

if.then10:                                        ; preds = %rcu_read_lock.exit
  call void @__sanitizer_cov_trace_pc() #16
  %s_wb_err = getelementptr inbounds %struct.super_block, ptr %24, i32 0, i32 50
  %call = tail call i32 @errseq_set(ptr noundef %s_wb_err, i32 noundef -5) #14
  br label %if.end11

if.end11:                                         ; preds = %if.then10, %rcu_read_lock.exit.if.end11_crit_edge
  %call.i32 = tail call zeroext i1 @rcu_is_watching() #14
  br i1 %call.i32, label %if.end11.rcu_read_unlock.exit_crit_edge, label %land.lhs.true.i35

if.end11.rcu_read_unlock.exit_crit_edge:          ; preds = %if.end11
  call void @__sanitizer_cov_trace_pc() #16
  br label %rcu_read_unlock.exit

land.lhs.true.i35:                                ; preds = %if.end11
  %call1.i33 = tail call i32 @debug_lockdep_rcu_enabled() #14
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call1.i33)
  %tobool.not.i34 = icmp eq i32 %call1.i33, 0
  br i1 %tobool.not.i34, label %land.lhs.true.i35.rcu_read_unlock.exit_crit_edge, label %land.lhs.true2.i37

land.lhs.true.i35.rcu_read_unlock.exit_crit_edge: ; preds = %land.lhs.true.i35
  call void @__sanitizer_cov_trace_pc() #16
  br label %rcu_read_unlock.exit

land.lhs.true2.i37:                               ; preds = %land.lhs.true.i35
  %.b4.i36 = load i1, ptr @rcu_read_unlock.__warned, align 1
  br i1 %.b4.i36, label %land.lhs.true2.i37.rcu_read_unlock.exit_crit_edge, label %if.then.i38

land.lhs.true2.i37.rcu_read_unlock.exit_crit_edge: ; preds = %land.lhs.true2.i37
  call void @__sanitizer_cov_trace_pc() #16
  br label %rcu_read_unlock.exit

if.then.i38:                                      ; preds = %land.lhs.true2.i37
  call void @__sanitizer_cov_trace_pc() #16
  store i1 true, ptr @rcu_read_unlock.__warned, align 1
  tail call void @lockdep_rcu_suspicious(ptr noundef nonnull @.str.27, i32 noundef 724, ptr noundef nonnull @.str.29) #14
  br label %rcu_read_unlock.exit

rcu_read_unlock.exit:                             ; preds = %if.then.i38, %land.lhs.true2.i37.rcu_read_unlock.exit_crit_edge, %land.lhs.true.i35.rcu_read_unlock.exit_crit_edge, %if.end11.rcu_read_unlock.exit_crit_edge
  tail call void asm sideeffect "", "~{memory}"() #14, !srcloc !271
  %25 = tail call i32 @llvm.read_register.i32(metadata !243) #14
  %and.i.i.i.i.i39 = and i32 %25, -16384
  %26 = inttoptr i32 %and.i.i.i.i.i39 to ptr
  %preempt_count.i.i.i.i40 = getelementptr inbounds %struct.thread_info, ptr %26, i32 0, i32 1
  %27 = ptrtoint ptr %preempt_count.i.i.i.i40 to i32
  call void @__asan_load4_noabort(i32 %27)
  %28 = load volatile i32, ptr %preempt_count.i.i.i.i40, align 4
  %sub.i.i.i = add i32 %28, -1
  store volatile i32 %sub.i.i.i, ptr %preempt_count.i.i.i.i40, align 4
  tail call void @rcu_read_unlock_strict() #14
  tail call fastcc void @rcu_lock_release(ptr noundef nonnull @rcu_lock_map) #14
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local void @end_buffer_async_write(ptr noundef %bh, i32 noundef %uptodate) #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = ptrtoint ptr %bh to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load volatile i32, ptr %bh, align 4
  %2 = and i32 %1, 128
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %2)
  %tobool.not = icmp eq i32 %2, 0
  br i1 %tobool.not, label %do.body4, label %do.end9, !prof !262

do.body4:                                         ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22fs/buffer.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 349, 0\0A.popsection", ""() #14, !srcloc !272
  unreachable

do.end9:                                          ; preds = %entry
  %b_page = getelementptr inbounds %struct.buffer_head, ptr %bh, i32 0, i32 2
  %3 = ptrtoint ptr %b_page to i32
  call void @__asan_load4_noabort(i32 %3)
  %4 = load ptr, ptr %b_page, align 8
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %uptodate)
  %tobool10.not = icmp eq i32 %uptodate, 0
  %5 = ptrtoint ptr %bh to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load volatile i32, ptr %bh, align 4
  br i1 %tobool10.not, label %if.else, label %if.then11

if.then11:                                        ; preds = %do.end9
  %and1.i.i95 = and i32 %6, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and1.i.i95)
  %tobool.not.i = icmp eq i32 %and1.i.i95, 0
  br i1 %tobool.not.i, label %if.then.i, label %if.then11.do.body13_crit_edge

if.then11.do.body13_crit_edge:                    ; preds = %if.then11
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.body13

if.then.i:                                        ; preds = %if.then11
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @_set_bit(i32 noundef 0, ptr noundef %bh) #14
  br label %do.body13

if.else:                                          ; preds = %do.end9
  %7 = and i32 %6, 4096
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %7)
  %tobool.not.i106 = icmp eq i32 %7, 0
  br i1 %tobool.not.i106, label %if.then.i107, label %if.else.buffer_io_error.exit_crit_edge

if.else.buffer_io_error.exit_crit_edge:           ; preds = %if.else
  call void @__sanitizer_cov_trace_pc() #16
  br label %buffer_io_error.exit

if.then.i107:                                     ; preds = %if.else
  %call1.i = tail call i32 @___ratelimit(ptr noundef nonnull @buffer_io_error._rs, ptr noundef nonnull @__func__.buffer_io_error) #14
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call1.i)
  %tobool2.not.i = icmp eq i32 %call1.i, 0
  br i1 %tobool2.not.i, label %if.then.i107.buffer_io_error.exit_crit_edge, label %do.end.i

if.then.i107.buffer_io_error.exit_crit_edge:      ; preds = %if.then.i107
  call void @__sanitizer_cov_trace_pc() #16
  br label %buffer_io_error.exit

do.end.i:                                         ; preds = %if.then.i107
  call void @__sanitizer_cov_trace_pc() #16
  %b_bdev.i = getelementptr inbounds %struct.buffer_head, ptr %bh, i32 0, i32 6
  %8 = ptrtoint ptr %b_bdev.i to i32
  call void @__asan_load4_noabort(i32 %8)
  %9 = load ptr, ptr %b_bdev.i, align 8
  %b_blocknr.i = getelementptr inbounds %struct.buffer_head, ptr %bh, i32 0, i32 3
  %10 = ptrtoint ptr %b_blocknr.i to i32
  call void @__asan_load8_noabort(i32 %10)
  %11 = load i64, ptr %b_blocknr.i, align 8
  %call4.i = tail call i32 (ptr, ...) @_printk(ptr noundef nonnull @.str.17, ptr noundef %9, i64 noundef %11, ptr noundef nonnull @.str.1) #17
  br label %buffer_io_error.exit

buffer_io_error.exit:                             ; preds = %do.end.i, %if.then.i107.buffer_io_error.exit_crit_edge, %if.else.buffer_io_error.exit_crit_edge
  tail call void @mark_buffer_write_io_error(ptr noundef %bh)
  tail call void @_clear_bit(i32 noundef 0, ptr noundef %bh) #14
  %12 = getelementptr inbounds %struct.page, ptr %4, i32 0, i32 1
  %13 = ptrtoint ptr %12 to i32
  call void @__asan_load4_noabort(i32 %13)
  %14 = load volatile i32, ptr %12, align 4
  %and.i.i = and i32 %14, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i)
  %tobool.not.i96 = icmp eq i32 %and.i.i, 0
  br i1 %tobool.not.i96, label %do.body7.i, label %if.then.i97, !prof !254

if.then.i97:                                      ; preds = %buffer_io_error.exit
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %4, ptr noundef nonnull @.str.18) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 416, 0\0A.popsection", ""() #14, !srcloc !273
  unreachable

do.body7.i:                                       ; preds = %buffer_io_error.exit
  %15 = ptrtoint ptr %12 to i32
  call void @__asan_load4_noabort(i32 %15)
  %16 = load volatile i32, ptr %12, align 4
  %and.i31.i = and i32 %16, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i31.i)
  %tobool.not.i.i = icmp eq i32 %and.i31.i, 0
  br i1 %tobool.not.i.i, label %if.end.i.i, label %if.then.i.i, !prof !254

if.then.i.i:                                      ; preds = %do.body7.i
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i.i = add i32 %16, -1
  br label %_compound_head.exit.i

if.end.i.i:                                       ; preds = %do.body7.i
  call void @__sanitizer_cov_trace_pc() #16
  %17 = ptrtoint ptr %4 to i32
  br label %_compound_head.exit.i

_compound_head.exit.i:                            ; preds = %if.end.i.i, %if.then.i.i
  %retval.0.i.i = phi i32 [ %sub.i.i, %if.then.i.i ], [ %17, %if.end.i.i ]
  %18 = inttoptr i32 %retval.0.i.i to ptr
  %19 = ptrtoint ptr %18 to i32
  call void @__asan_load4_noabort(i32 %19)
  %20 = load volatile i32, ptr %18, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %20)
  %cmp.i.not.i = icmp eq i32 %20, -1
  %21 = ptrtoint ptr %12 to i32
  call void @__asan_load4_noabort(i32 %21)
  %22 = load volatile i32, ptr %12, align 4
  %and.i32.i = and i32 %22, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i32.i)
  %tobool.not.i33.i = icmp eq i32 %and.i32.i, 0
  br i1 %cmp.i.not.i, label %if.then17.i, label %do.end24.i, !prof !262

if.then17.i:                                      ; preds = %_compound_head.exit.i
  br i1 %tobool.not.i33.i, label %if.end.i36.i, label %if.then.i35.i, !prof !254

if.then.i35.i:                                    ; preds = %if.then17.i
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i34.i = add i32 %22, -1
  br label %_compound_head.exit38.i

if.end.i36.i:                                     ; preds = %if.then17.i
  call void @__sanitizer_cov_trace_pc() #16
  %23 = ptrtoint ptr %4 to i32
  br label %_compound_head.exit38.i

_compound_head.exit38.i:                          ; preds = %if.end.i36.i, %if.then.i35.i
  %retval.0.i37.i = phi i32 [ %sub.i34.i, %if.then.i35.i ], [ %23, %if.end.i36.i ]
  %24 = inttoptr i32 %retval.0.i37.i to ptr
  tail call void @dump_page(ptr noundef %24, ptr noundef nonnull @.str.14) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 416, 0\0A.popsection", ""() #14, !srcloc !274
  unreachable

do.end24.i:                                       ; preds = %_compound_head.exit.i
  br i1 %tobool.not.i33.i, label %if.end.i43.i, label %if.then.i42.i, !prof !254

if.then.i42.i:                                    ; preds = %do.end24.i
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i41.i = add i32 %22, -1
  br label %SetPageError.exit

if.end.i43.i:                                     ; preds = %do.end24.i
  call void @__sanitizer_cov_trace_pc() #16
  %25 = ptrtoint ptr %4 to i32
  br label %SetPageError.exit

SetPageError.exit:                                ; preds = %if.end.i43.i, %if.then.i42.i
  %retval.0.i44.i = phi i32 [ %sub.i41.i, %if.then.i42.i ], [ %25, %if.end.i43.i ]
  %26 = inttoptr i32 %retval.0.i44.i to ptr
  tail call void @_set_bit(i32 noundef 8, ptr noundef %26) #14
  br label %do.body13

do.body13:                                        ; preds = %SetPageError.exit, %if.then.i, %if.then11.do.body13_crit_edge
  %27 = ptrtoint ptr %4 to i32
  call void @__asan_load4_noabort(i32 %27)
  %28 = load volatile i32, ptr %4, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %28)
  %cmp.i.not.i98 = icmp eq i32 %28, -1
  br i1 %cmp.i.not.i98, label %if.then.i99, label %PagePrivate.exit, !prof !262

if.then.i99:                                      ; preds = %do.body13
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %4, ptr noundef nonnull @.str.15) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 452, 0\0A.popsection", ""() #14, !srcloc !265
  unreachable

PagePrivate.exit:                                 ; preds = %do.body13
  %29 = ptrtoint ptr %4 to i32
  call void @__asan_load4_noabort(i32 %29)
  %30 = load volatile i32, ptr %4, align 4
  %31 = and i32 %30, 8192
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %31)
  %tobool15.not = icmp eq i32 %31, 0
  br i1 %tobool15.not, label %do.body25, label %do.end33, !prof !262

do.body25:                                        ; preds = %PagePrivate.exit
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22fs/buffer.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 361, 0\0A.popsection", ""() #14, !srcloc !275
  unreachable

do.end33:                                         ; preds = %PagePrivate.exit
  %private = getelementptr inbounds %struct.page, ptr %4, i32 0, i32 1, i32 0, i32 3
  %32 = ptrtoint ptr %private to i32
  call void @__asan_load4_noabort(i32 %32)
  %33 = load i32, ptr %private, align 4
  %34 = inttoptr i32 %33 to ptr
  %b_uptodate_lock = getelementptr inbounds %struct.buffer_head, ptr %34, i32 0, i32 12
  %call39 = tail call i32 @_raw_spin_lock_irqsave(ptr noundef %b_uptodate_lock) #14
  tail call void @_clear_bit(i32 noundef 7, ptr noundef %bh) #14
  %call.i.i.i = tail call zeroext i1 @__kasan_check_write(ptr noundef %bh, i32 noundef 4) #14
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !259
  tail call void @llvm.prefetch.p0(ptr %bh, i32 1, i32 3, i32 1) #14
  %35 = tail call { i32, i32, i32 } asm sideeffect "@ atomic_fetch_andnot\0A1:\09ldrex\09$0, [$4]\0A\09bic\09$1, $0, $5\0A\09strex\09$2, $1, [$4]\0A\09teq\09$2, #0\0A\09bne\091b", "=&r,=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %bh, ptr %bh, i32 4, ptr elementtype(i32) %bh) #14, !srcloc !260
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !261
  tail call void @wake_up_bit(ptr noundef %bh, i32 noundef 2) #14
  br label %while.cond

while.cond:                                       ; preds = %while.body.while.cond_crit_edge, %do.end33
  %bh.pn = phi ptr [ %bh, %do.end33 ], [ %tmp.0, %while.body.while.cond_crit_edge ]
  %tmp.0.in = getelementptr inbounds %struct.buffer_head, ptr %bh.pn, i32 0, i32 1
  %36 = ptrtoint ptr %tmp.0.in to i32
  call void @__asan_load4_noabort(i32 %36)
  %tmp.0 = load ptr, ptr %tmp.0.in, align 4
  %cmp44.not = icmp eq ptr %tmp.0, %bh
  br i1 %cmp44.not, label %while.end, label %while.body

while.body:                                       ; preds = %while.cond
  %37 = ptrtoint ptr %tmp.0 to i32
  call void @__asan_load4_noabort(i32 %37)
  %38 = load volatile i32, ptr %tmp.0, align 4
  %39 = and i32 %38, 128
  %tobool47.not = icmp eq i32 %39, 0
  br i1 %tobool47.not, label %while.body.while.cond_crit_edge, label %do.body49

while.body.while.cond_crit_edge:                  ; preds = %while.body
  call void @__sanitizer_cov_trace_pc() #16
  br label %while.cond

do.body49:                                        ; preds = %while.body
  %40 = ptrtoint ptr %tmp.0 to i32
  call void @__asan_load4_noabort(i32 %40)
  %41 = load volatile i32, ptr %tmp.0, align 4
  %42 = and i32 %41, 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %42)
  %tobool51.not = icmp eq i32 %42, 0
  br i1 %tobool51.not, label %do.body61, label %still_busy, !prof !262

do.body61:                                        ; preds = %do.body49
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22fs/buffer.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 369, 0\0A.popsection", ""() #14, !srcloc !276
  unreachable

while.end:                                        ; preds = %while.cond
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @_raw_spin_unlock_irqrestore(ptr noundef %b_uptodate_lock, i32 noundef %call39) #14
  tail call void @end_page_writeback(ptr noundef %4) #14
  br label %cleanup

still_busy:                                       ; preds = %do.body49
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @_raw_spin_unlock_irqrestore(ptr noundef %b_uptodate_lock, i32 noundef %call39) #14
  br label %cleanup

cleanup:                                          ; preds = %still_busy, %while.end
  ret void
}

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @_raw_spin_lock_irqsave(ptr noundef) local_unnamed_addr #1 section ".spinlock.text"

; Function Attrs: null_pointer_is_valid
declare dso_local void @end_page_writeback(ptr noundef) local_unnamed_addr #1

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local void @mark_buffer_async_write(ptr noundef %bh) #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %b_end_io.i = getelementptr inbounds %struct.buffer_head, ptr %bh, i32 0, i32 7
  %0 = ptrtoint ptr %b_end_io.i to i32
  call void @__asan_store4_noabort(i32 %0)
  store ptr @end_buffer_async_write, ptr %b_end_io.i, align 4
  %1 = ptrtoint ptr %bh to i32
  call void @__asan_load4_noabort(i32 %1)
  %2 = load volatile i32, ptr %bh, align 4
  %3 = and i32 %2, 128
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %3)
  %tobool.not.i.i = icmp eq i32 %3, 0
  br i1 %tobool.not.i.i, label %if.then.i.i, label %entry.mark_buffer_async_write_endio.exit_crit_edge

entry.mark_buffer_async_write_endio.exit_crit_edge: ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  br label %mark_buffer_async_write_endio.exit

if.then.i.i:                                      ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @_set_bit(i32 noundef 7, ptr noundef %bh) #14
  br label %mark_buffer_async_write_endio.exit

mark_buffer_async_write_endio.exit:               ; preds = %if.then.i.i, %entry.mark_buffer_async_write_endio.exit_crit_edge
  ret void
}

; Function Attrs: argmemonly mustprogress nofree norecurse nounwind null_pointer_is_valid sanitize_address sspstrong willreturn uwtable(sync)
define dso_local i32 @inode_has_buffers(ptr noundef %inode) local_unnamed_addr #4 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %private_list = getelementptr inbounds %struct.inode, ptr %inode, i32 0, i32 46, i32 13
  %0 = ptrtoint ptr %private_list to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load volatile ptr, ptr %private_list, align 4
  %cmp.i = icmp ne ptr %1, %private_list
  %lnot.ext = zext i1 %cmp.i to i32
  ret i32 %lnot.ext
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local void @emergency_thaw_bdev(ptr nocapture noundef readonly %sb) local_unnamed_addr #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %s_bdev = getelementptr inbounds %struct.super_block, ptr %sb, i32 0, i32 26
  %0 = ptrtoint ptr %s_bdev to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %s_bdev, align 4
  %tobool.not7 = icmp eq ptr %1, null
  br i1 %tobool.not7, label %entry.while.end_crit_edge, label %entry.land.rhs_crit_edge

entry.land.rhs_crit_edge:                         ; preds = %entry
  br label %land.rhs

entry.while.end_crit_edge:                        ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  br label %while.end

land.rhs:                                         ; preds = %do.end.land.rhs_crit_edge, %entry.land.rhs_crit_edge
  %2 = phi ptr [ %6, %do.end.land.rhs_crit_edge ], [ %1, %entry.land.rhs_crit_edge ]
  %call = tail call i32 @thaw_bdev(ptr noundef nonnull %2) #14
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call)
  %tobool2.not = icmp eq i32 %call, 0
  br i1 %tobool2.not, label %do.end, label %land.rhs.while.end_crit_edge

land.rhs.while.end_crit_edge:                     ; preds = %land.rhs
  call void @__sanitizer_cov_trace_pc() #16
  br label %while.end

do.end:                                           ; preds = %land.rhs
  %3 = ptrtoint ptr %s_bdev to i32
  call void @__asan_load4_noabort(i32 %3)
  %4 = load ptr, ptr %s_bdev, align 4
  %call4 = tail call i32 (ptr, ...) @_printk(ptr noundef nonnull @.str.2, ptr noundef %4) #17
  %5 = ptrtoint ptr %s_bdev to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load ptr, ptr %s_bdev, align 4
  %tobool.not = icmp eq ptr %6, null
  br i1 %tobool.not, label %do.end.while.end_crit_edge, label %do.end.land.rhs_crit_edge

do.end.land.rhs_crit_edge:                        ; preds = %do.end
  call void @__sanitizer_cov_trace_pc() #16
  br label %land.rhs

do.end.while.end_crit_edge:                       ; preds = %do.end
  call void @__sanitizer_cov_trace_pc() #16
  br label %while.end

while.end:                                        ; preds = %do.end.while.end_crit_edge, %land.rhs.while.end_crit_edge, %entry.while.end_crit_edge
  ret void
}

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @thaw_bdev(ptr noundef) local_unnamed_addr #1

; Function Attrs: cold null_pointer_is_valid
declare dso_local i32 @_printk(ptr noundef, ...) local_unnamed_addr #5

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @sync_mapping_buffers(ptr noundef %mapping) #2 align 64 {
entry:
  %tmp.i = alloca %struct.list_head, align 4
  %plug.i = alloca %struct.blk_plug, align 4
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %private_data = getelementptr inbounds %struct.address_space, ptr %mapping, i32 0, i32 14
  %0 = ptrtoint ptr %private_data to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %private_data, align 4
  %cmp = icmp eq ptr %1, null
  br i1 %cmp, label %entry.cleanup_crit_edge, label %lor.lhs.false

entry.cleanup_crit_edge:                          ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  br label %cleanup

lor.lhs.false:                                    ; preds = %entry
  %private_list = getelementptr inbounds %struct.address_space, ptr %mapping, i32 0, i32 13
  %2 = ptrtoint ptr %private_list to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load volatile ptr, ptr %private_list, align 4
  %cmp.i.not = icmp eq ptr %3, %private_list
  br i1 %cmp.i.not, label %lor.lhs.false.cleanup_crit_edge, label %if.end

lor.lhs.false.cleanup_crit_edge:                  ; preds = %lor.lhs.false
  call void @__sanitizer_cov_trace_pc() #16
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false
  %private_lock = getelementptr inbounds %struct.address_space, ptr %1, i32 0, i32 12
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %tmp.i) #14
  %4 = getelementptr inbounds %struct.list_head, ptr %tmp.i, i32 0, i32 1
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %plug.i) #14
  %5 = call ptr @memset(ptr %plug.i, i32 255, i32 24)
  %6 = ptrtoint ptr %tmp.i to i32
  call void @__asan_store4_noabort(i32 %6)
  store volatile ptr %tmp.i, ptr %tmp.i, align 4
  %7 = ptrtoint ptr %4 to i32
  call void @__asan_store4_noabort(i32 %7)
  store ptr %tmp.i, ptr %4, align 4
  call void @blk_start_plug(ptr noundef nonnull %plug.i) #14
  call void @_raw_spin_lock(ptr noundef %private_lock) #14
  %8 = ptrtoint ptr %private_list to i32
  call void @__asan_load4_noabort(i32 %8)
  %9 = load volatile ptr, ptr %private_list, align 4
  %cmp.i.not128.i = icmp eq ptr %9, %private_list
  br i1 %cmp.i.not128.i, label %if.end.while.end.i_crit_edge, label %if.end.while.body.i_crit_edge

if.end.while.body.i_crit_edge:                    ; preds = %if.end
  br label %while.body.i

if.end.while.end.i_crit_edge:                     ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #16
  br label %while.end.i

while.body.i:                                     ; preds = %if.end13.i.while.body.i_crit_edge, %if.end.while.body.i_crit_edge
  %10 = phi ptr [ %45, %if.end13.i.while.body.i_crit_edge ], [ %9, %if.end.while.body.i_crit_edge ]
  %add.ptr.i = getelementptr i8, ptr %10, i32 -44
  %b_assoc_map.i = getelementptr i8, ptr %10, i32 8
  %11 = ptrtoint ptr %b_assoc_map.i to i32
  call void @__asan_load4_noabort(i32 %11)
  %12 = load ptr, ptr %b_assoc_map.i, align 4
  %call.i.i.i.i = call zeroext i1 @__list_del_entry_valid(ptr noundef %10) #14
  br i1 %call.i.i.i.i, label %if.end.i.i.i.i, label %while.body.i.list_del_init.exit.i.i_crit_edge

while.body.i.list_del_init.exit.i.i_crit_edge:    ; preds = %while.body.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %list_del_init.exit.i.i

if.end.i.i.i.i:                                   ; preds = %while.body.i
  call void @__sanitizer_cov_trace_pc() #16
  %prev.i.i.i.i = getelementptr i8, ptr %10, i32 4
  %13 = ptrtoint ptr %prev.i.i.i.i to i32
  call void @__asan_load4_noabort(i32 %13)
  %14 = load ptr, ptr %prev.i.i.i.i, align 4
  %15 = ptrtoint ptr %10 to i32
  call void @__asan_load4_noabort(i32 %15)
  %16 = load ptr, ptr %10, align 4
  %prev1.i.i.i.i.i = getelementptr inbounds %struct.list_head, ptr %16, i32 0, i32 1
  %17 = ptrtoint ptr %prev1.i.i.i.i.i to i32
  call void @__asan_store4_noabort(i32 %17)
  store ptr %14, ptr %prev1.i.i.i.i.i, align 4
  %18 = ptrtoint ptr %14 to i32
  call void @__asan_store4_noabort(i32 %18)
  store volatile ptr %16, ptr %14, align 4
  br label %list_del_init.exit.i.i

list_del_init.exit.i.i:                           ; preds = %if.end.i.i.i.i, %while.body.i.list_del_init.exit.i.i_crit_edge
  %19 = ptrtoint ptr %10 to i32
  call void @__asan_store4_noabort(i32 %19)
  store volatile ptr %10, ptr %10, align 4
  %prev.i3.i.i.i = getelementptr i8, ptr %10, i32 4
  %20 = ptrtoint ptr %prev.i3.i.i.i to i32
  call void @__asan_store4_noabort(i32 %20)
  store ptr %10, ptr %prev.i3.i.i.i, align 4
  %21 = ptrtoint ptr %b_assoc_map.i to i32
  call void @__asan_load4_noabort(i32 %21)
  %22 = load ptr, ptr %b_assoc_map.i, align 4
  %tobool.not.i.i = icmp eq ptr %22, null
  br i1 %tobool.not.i.i, label %do.end.i.i, label %list_del_init.exit.i.i.__remove_assoc_queue.exit.i_crit_edge, !prof !262

list_del_init.exit.i.i.__remove_assoc_queue.exit.i_crit_edge: ; preds = %list_del_init.exit.i.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %__remove_assoc_queue.exit.i

do.end.i.i:                                       ; preds = %list_del_init.exit.i.i
  call void @__sanitizer_cov_trace_pc() #16
  call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.4, i32 noundef 480, i32 noundef 9, ptr noundef null) #14
  br label %__remove_assoc_queue.exit.i

__remove_assoc_queue.exit.i:                      ; preds = %do.end.i.i, %list_del_init.exit.i.i.__remove_assoc_queue.exit.i_crit_edge
  %23 = ptrtoint ptr %b_assoc_map.i to i32
  call void @__asan_store4_noabort(i32 %23)
  store ptr null, ptr %b_assoc_map.i, align 4
  call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !277
  %24 = ptrtoint ptr %add.ptr.i to i32
  call void @__asan_load4_noabort(i32 %24)
  %25 = load volatile i32, ptr %add.ptr.i, align 4
  %26 = and i32 %25, 2
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %26)
  %tobool6.not.i = icmp eq i32 %26, 0
  br i1 %tobool6.not.i, label %lor.lhs.false.i, label %__remove_assoc_queue.exit.i.if.then.i_crit_edge

__remove_assoc_queue.exit.i.if.then.i_crit_edge:  ; preds = %__remove_assoc_queue.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.then.i

lor.lhs.false.i:                                  ; preds = %__remove_assoc_queue.exit.i
  %27 = ptrtoint ptr %add.ptr.i to i32
  call void @__asan_load4_noabort(i32 %27)
  %28 = load volatile i32, ptr %add.ptr.i, align 4
  %29 = and i32 %28, 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %29)
  %tobool8.not.i = icmp eq i32 %29, 0
  br i1 %tobool8.not.i, label %lor.lhs.false.i.if.end13.i_crit_edge, label %lor.lhs.false.i.if.then.i_crit_edge

lor.lhs.false.i.if.then.i_crit_edge:              ; preds = %lor.lhs.false.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.then.i

lor.lhs.false.i.if.end13.i_crit_edge:             ; preds = %lor.lhs.false.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end13.i

if.then.i:                                        ; preds = %lor.lhs.false.i.if.then.i_crit_edge, %__remove_assoc_queue.exit.i.if.then.i_crit_edge
  %30 = ptrtoint ptr %tmp.i to i32
  call void @__asan_load4_noabort(i32 %30)
  %31 = load ptr, ptr %tmp.i, align 4
  %call.i.i.i = call zeroext i1 @__list_add_valid(ptr noundef %10, ptr noundef nonnull %tmp.i, ptr noundef %31) #14
  br i1 %call.i.i.i, label %if.end.i.i.i, label %if.then.i.list_add.exit.i_crit_edge

if.then.i.list_add.exit.i_crit_edge:              ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %list_add.exit.i

if.end.i.i.i:                                     ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #16
  %prev1.i.i.i = getelementptr inbounds %struct.list_head, ptr %31, i32 0, i32 1
  %32 = ptrtoint ptr %prev1.i.i.i to i32
  call void @__asan_store4_noabort(i32 %32)
  store ptr %10, ptr %prev1.i.i.i, align 4
  %33 = ptrtoint ptr %10 to i32
  call void @__asan_store4_noabort(i32 %33)
  store ptr %31, ptr %10, align 4
  %34 = ptrtoint ptr %prev.i3.i.i.i to i32
  call void @__asan_store4_noabort(i32 %34)
  store ptr %tmp.i, ptr %prev.i3.i.i.i, align 4
  %35 = ptrtoint ptr %tmp.i to i32
  call void @__asan_store4_noabort(i32 %35)
  store volatile ptr %10, ptr %tmp.i, align 4
  br label %list_add.exit.i

list_add.exit.i:                                  ; preds = %if.end.i.i.i, %if.then.i.list_add.exit.i_crit_edge
  %36 = ptrtoint ptr %b_assoc_map.i to i32
  call void @__asan_store4_noabort(i32 %36)
  store ptr %12, ptr %b_assoc_map.i, align 4
  %37 = ptrtoint ptr %add.ptr.i to i32
  call void @__asan_load4_noabort(i32 %37)
  %38 = load volatile i32, ptr %add.ptr.i, align 4
  %39 = and i32 %38, 2
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %39)
  %tobool11.not.i = icmp eq i32 %39, 0
  br i1 %tobool11.not.i, label %list_add.exit.i.if.end13.i_crit_edge, label %if.then12.i

list_add.exit.i.if.end13.i_crit_edge:             ; preds = %list_add.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end13.i

if.then12.i:                                      ; preds = %list_add.exit.i
  %b_count.i.i = getelementptr i8, ptr %10, i32 12
  %call.i.i.i86.i = call zeroext i1 @__kasan_check_write(ptr noundef %b_count.i.i, i32 noundef 4) #14
  call void @llvm.prefetch.p0(ptr %b_count.i.i, i32 1, i32 3, i32 1) #14
  %40 = call { i32, i32 } asm sideeffect "@ atomic_add\0A1:\09ldrex\09$0, [$3]\0A\09add\09$0, $0, $4\0A\09strex\09$1, $0, [$3]\0A\09teq\09$1, #0\0A\09bne\091b", "=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %b_count.i.i, ptr %b_count.i.i, i32 1, ptr elementtype(i32) %b_count.i.i) #14, !srcloc !278
  call void @_raw_spin_unlock(ptr noundef %private_lock) #14
  call void @write_dirty_buffer(ptr noundef %add.ptr.i, i32 noundef 2048) #14
  %tobool.not.i87.i = icmp eq ptr %add.ptr.i, null
  br i1 %tobool.not.i87.i, label %if.then12.i.brelse.exit.i_crit_edge, label %if.then.i.i

if.then12.i.brelse.exit.i_crit_edge:              ; preds = %if.then12.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %brelse.exit.i

if.then.i.i:                                      ; preds = %if.then12.i
  %call.i.i.i.i.i = call zeroext i1 @__kasan_check_read(ptr noundef %b_count.i.i, i32 noundef 4) #14
  %41 = ptrtoint ptr %b_count.i.i to i32
  call void @__asan_load4_noabort(i32 %41)
  %42 = load volatile i32, ptr %b_count.i.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %42)
  %tobool.not.i.i.i = icmp eq i32 %42, 0
  br i1 %tobool.not.i.i.i, label %do.end.i.i.i, label %if.then.i.i.i

if.then.i.i.i:                                    ; preds = %if.then.i.i
  call void @__sanitizer_cov_trace_pc() #16
  call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !268
  %call.i.i.i.i.i.i = call zeroext i1 @__kasan_check_write(ptr noundef %b_count.i.i, i32 noundef 4) #14
  call void @llvm.prefetch.p0(ptr %b_count.i.i, i32 1, i32 3, i32 1) #14
  %43 = call { i32, i32 } asm sideeffect "@ atomic_sub\0A1:\09ldrex\09$0, [$3]\0A\09sub\09$0, $0, $4\0A\09strex\09$1, $0, [$3]\0A\09teq\09$1, #0\0A\09bne\091b", "=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %b_count.i.i, ptr %b_count.i.i, i32 1, ptr elementtype(i32) %b_count.i.i) #14, !srcloc !269
  br label %brelse.exit.i

do.end.i.i.i:                                     ; preds = %if.then.i.i
  call void @__sanitizer_cov_trace_pc() #16
  call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.4, i32 noundef 1148, i32 noundef 9, ptr noundef nonnull @.str.5) #14
  br label %brelse.exit.i

brelse.exit.i:                                    ; preds = %do.end.i.i.i, %if.then.i.i.i, %if.then12.i.brelse.exit.i_crit_edge
  call void @_raw_spin_lock(ptr noundef %private_lock) #14
  br label %if.end13.i

if.end13.i:                                       ; preds = %brelse.exit.i, %list_add.exit.i.if.end13.i_crit_edge, %lor.lhs.false.i.if.end13.i_crit_edge
  %44 = ptrtoint ptr %private_list to i32
  call void @__asan_load4_noabort(i32 %44)
  %45 = load volatile ptr, ptr %private_list, align 4
  %cmp.i.not.i = icmp eq ptr %45, %private_list
  br i1 %cmp.i.not.i, label %if.end13.i.while.end.i_crit_edge, label %if.end13.i.while.body.i_crit_edge

if.end13.i.while.body.i_crit_edge:                ; preds = %if.end13.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %while.body.i

if.end13.i.while.end.i_crit_edge:                 ; preds = %if.end13.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %while.end.i

while.end.i:                                      ; preds = %if.end13.i.while.end.i_crit_edge, %if.end.while.end.i_crit_edge
  call void @_raw_spin_unlock(ptr noundef %private_lock) #14
  call void @blk_finish_plug(ptr noundef nonnull %plug.i) #14
  call void @_raw_spin_lock(ptr noundef %private_lock) #14
  %46 = ptrtoint ptr %tmp.i to i32
  call void @__asan_load4_noabort(i32 %46)
  %47 = load volatile ptr, ptr %tmp.i, align 4
  %cmp.i88.not129.i = icmp eq ptr %47, %tmp.i
  br i1 %cmp.i88.not129.i, label %while.end.i.while.end39.i_crit_edge, label %while.end.i.while.body18.i_crit_edge

while.end.i.while.body18.i_crit_edge:             ; preds = %while.end.i
  br label %while.body18.i

while.end.i.while.end39.i_crit_edge:              ; preds = %while.end.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %while.end39.i

while.body18.i:                                   ; preds = %brelse.exit119.i.while.body18.i_crit_edge, %while.end.i.while.body18.i_crit_edge
  %err.0130.i = phi i32 [ %spec.select.i, %brelse.exit119.i.while.body18.i_crit_edge ], [ 0, %while.end.i.while.body18.i_crit_edge ]
  %48 = ptrtoint ptr %4 to i32
  call void @__asan_load4_noabort(i32 %48)
  %49 = load ptr, ptr %4, align 4
  %add.ptr21.i = getelementptr i8, ptr %49, i32 -44
  %b_count.i90.i = getelementptr i8, ptr %49, i32 12
  %call.i.i.i91.i = call zeroext i1 @__kasan_check_write(ptr noundef %b_count.i90.i, i32 noundef 4) #14
  call void @llvm.prefetch.p0(ptr %b_count.i90.i, i32 1, i32 3, i32 1) #14
  %50 = call { i32, i32 } asm sideeffect "@ atomic_add\0A1:\09ldrex\09$0, [$3]\0A\09add\09$0, $0, $4\0A\09strex\09$1, $0, [$3]\0A\09teq\09$1, #0\0A\09bne\091b", "=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %b_count.i90.i, ptr %b_count.i90.i, i32 1, ptr elementtype(i32) %b_count.i90.i) #14, !srcloc !278
  %b_assoc_map22.i = getelementptr i8, ptr %49, i32 8
  %51 = ptrtoint ptr %b_assoc_map22.i to i32
  call void @__asan_load4_noabort(i32 %51)
  %52 = load ptr, ptr %b_assoc_map22.i, align 4
  %call.i.i.i93.i = call zeroext i1 @__list_del_entry_valid(ptr noundef %49) #14
  br i1 %call.i.i.i93.i, label %if.end.i.i.i96.i, label %while.body18.i.list_del_init.exit.i100.i_crit_edge

while.body18.i.list_del_init.exit.i100.i_crit_edge: ; preds = %while.body18.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %list_del_init.exit.i100.i

if.end.i.i.i96.i:                                 ; preds = %while.body18.i
  call void @__sanitizer_cov_trace_pc() #16
  %prev.i.i.i94.i = getelementptr i8, ptr %49, i32 4
  %53 = ptrtoint ptr %prev.i.i.i94.i to i32
  call void @__asan_load4_noabort(i32 %53)
  %54 = load ptr, ptr %prev.i.i.i94.i, align 4
  %55 = ptrtoint ptr %49 to i32
  call void @__asan_load4_noabort(i32 %55)
  %56 = load ptr, ptr %49, align 4
  %prev1.i.i.i.i95.i = getelementptr inbounds %struct.list_head, ptr %56, i32 0, i32 1
  %57 = ptrtoint ptr %prev1.i.i.i.i95.i to i32
  call void @__asan_store4_noabort(i32 %57)
  store ptr %54, ptr %prev1.i.i.i.i95.i, align 4
  %58 = ptrtoint ptr %54 to i32
  call void @__asan_store4_noabort(i32 %58)
  store volatile ptr %56, ptr %54, align 4
  br label %list_del_init.exit.i100.i

list_del_init.exit.i100.i:                        ; preds = %if.end.i.i.i96.i, %while.body18.i.list_del_init.exit.i100.i_crit_edge
  %59 = ptrtoint ptr %49 to i32
  call void @__asan_store4_noabort(i32 %59)
  store volatile ptr %49, ptr %49, align 4
  %prev.i3.i.i97.i = getelementptr i8, ptr %49, i32 4
  %60 = ptrtoint ptr %prev.i3.i.i97.i to i32
  call void @__asan_store4_noabort(i32 %60)
  store ptr %49, ptr %prev.i3.i.i97.i, align 4
  %61 = ptrtoint ptr %b_assoc_map22.i to i32
  call void @__asan_load4_noabort(i32 %61)
  %62 = load ptr, ptr %b_assoc_map22.i, align 4
  %tobool.not.i99.i = icmp eq ptr %62, null
  br i1 %tobool.not.i99.i, label %do.end.i101.i, label %list_del_init.exit.i100.i.__remove_assoc_queue.exit102.i_crit_edge, !prof !262

list_del_init.exit.i100.i.__remove_assoc_queue.exit102.i_crit_edge: ; preds = %list_del_init.exit.i100.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %__remove_assoc_queue.exit102.i

do.end.i101.i:                                    ; preds = %list_del_init.exit.i100.i
  call void @__sanitizer_cov_trace_pc() #16
  call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.4, i32 noundef 480, i32 noundef 9, ptr noundef null) #14
  br label %__remove_assoc_queue.exit102.i

__remove_assoc_queue.exit102.i:                   ; preds = %do.end.i101.i, %list_del_init.exit.i100.i.__remove_assoc_queue.exit102.i_crit_edge
  %63 = ptrtoint ptr %b_assoc_map22.i to i32
  call void @__asan_store4_noabort(i32 %63)
  store ptr null, ptr %b_assoc_map22.i, align 4
  call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !279
  %64 = ptrtoint ptr %add.ptr21.i to i32
  call void @__asan_load4_noabort(i32 %64)
  %65 = load volatile i32, ptr %add.ptr21.i, align 4
  %66 = and i32 %65, 2
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %66)
  %tobool30.not.i = icmp eq i32 %66, 0
  br i1 %tobool30.not.i, label %__remove_assoc_queue.exit102.i.if.end34.i_crit_edge, label %if.then31.i

__remove_assoc_queue.exit102.i.if.end34.i_crit_edge: ; preds = %__remove_assoc_queue.exit102.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end34.i

if.then31.i:                                      ; preds = %__remove_assoc_queue.exit102.i
  %private_list.i = getelementptr inbounds %struct.address_space, ptr %52, i32 0, i32 13
  %67 = ptrtoint ptr %private_list.i to i32
  call void @__asan_load4_noabort(i32 %67)
  %68 = load ptr, ptr %private_list.i, align 4
  %call.i.i103.i = call zeroext i1 @__list_add_valid(ptr noundef %49, ptr noundef %private_list.i, ptr noundef %68) #14
  br i1 %call.i.i103.i, label %if.end.i.i106.i, label %if.then31.i.list_add.exit107.i_crit_edge

if.then31.i.list_add.exit107.i_crit_edge:         ; preds = %if.then31.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %list_add.exit107.i

if.end.i.i106.i:                                  ; preds = %if.then31.i
  call void @__sanitizer_cov_trace_pc() #16
  %prev1.i.i104.i = getelementptr inbounds %struct.list_head, ptr %68, i32 0, i32 1
  %69 = ptrtoint ptr %prev1.i.i104.i to i32
  call void @__asan_store4_noabort(i32 %69)
  store ptr %49, ptr %prev1.i.i104.i, align 4
  %70 = ptrtoint ptr %49 to i32
  call void @__asan_store4_noabort(i32 %70)
  store ptr %68, ptr %49, align 4
  %71 = ptrtoint ptr %prev.i3.i.i97.i to i32
  call void @__asan_store4_noabort(i32 %71)
  store ptr %private_list.i, ptr %prev.i3.i.i97.i, align 4
  %72 = ptrtoint ptr %private_list.i to i32
  call void @__asan_store4_noabort(i32 %72)
  store volatile ptr %49, ptr %private_list.i, align 4
  br label %list_add.exit107.i

list_add.exit107.i:                               ; preds = %if.end.i.i106.i, %if.then31.i.list_add.exit107.i_crit_edge
  %73 = ptrtoint ptr %b_assoc_map22.i to i32
  call void @__asan_store4_noabort(i32 %73)
  store ptr %52, ptr %b_assoc_map22.i, align 4
  br label %if.end34.i

if.end34.i:                                       ; preds = %list_add.exit107.i, %__remove_assoc_queue.exit102.i.if.end34.i_crit_edge
  call void @_raw_spin_unlock(ptr noundef %private_lock) #14
  call void @__might_sleep(ptr noundef nonnull @.str.43, i32 noundef 354) #14
  %74 = ptrtoint ptr %add.ptr21.i to i32
  call void @__asan_load4_noabort(i32 %74)
  %75 = load volatile i32, ptr %add.ptr21.i, align 4
  %76 = and i32 %75, 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %76)
  %tobool.not.i108.i = icmp eq i32 %76, 0
  br i1 %tobool.not.i108.i, label %if.end34.i.wait_on_buffer.exit.i_crit_edge, label %if.then.i109.i

if.end34.i.wait_on_buffer.exit.i_crit_edge:       ; preds = %if.end34.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %wait_on_buffer.exit.i

if.then.i109.i:                                   ; preds = %if.end34.i
  call void @__might_sleep(ptr noundef nonnull @.str.13, i32 noundef 98) #14
  %77 = ptrtoint ptr %add.ptr21.i to i32
  call void @__asan_load4_noabort(i32 %77)
  %78 = load volatile i32, ptr %add.ptr21.i, align 4
  %79 = and i32 %78, 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %79)
  %tobool.not.i.i.i.i = icmp eq i32 %79, 0
  br i1 %tobool.not.i.i.i.i, label %if.then.i109.i.wait_on_buffer.exit.i_crit_edge, label %if.end.i.i.i110.i

if.then.i109.i.wait_on_buffer.exit.i_crit_edge:   ; preds = %if.then.i109.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %wait_on_buffer.exit.i

if.end.i.i.i110.i:                                ; preds = %if.then.i109.i
  call void @__sanitizer_cov_trace_pc() #16
  %call3.i.i.i.i = call i32 @out_of_line_wait_on_bit(ptr noundef %add.ptr21.i, i32 noundef 2, ptr noundef nonnull @bit_wait_io, i32 noundef 2) #14
  br label %wait_on_buffer.exit.i

wait_on_buffer.exit.i:                            ; preds = %if.end.i.i.i110.i, %if.then.i109.i.wait_on_buffer.exit.i_crit_edge, %if.end34.i.wait_on_buffer.exit.i_crit_edge
  %80 = ptrtoint ptr %add.ptr21.i to i32
  call void @__asan_load4_noabort(i32 %80)
  %81 = load volatile i32, ptr %add.ptr21.i, align 4
  %and1.i.i85.i = and i32 %81, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and1.i.i85.i)
  %tobool36.not.i = icmp eq i32 %and1.i.i85.i, 0
  %spec.select.i = select i1 %tobool36.not.i, i32 -5, i32 %err.0130.i
  %tobool.not.i111.i = icmp eq ptr %add.ptr21.i, null
  br i1 %tobool.not.i111.i, label %wait_on_buffer.exit.i.brelse.exit119.i_crit_edge, label %if.then.i115.i

wait_on_buffer.exit.i.brelse.exit119.i_crit_edge: ; preds = %wait_on_buffer.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %brelse.exit119.i

if.then.i115.i:                                   ; preds = %wait_on_buffer.exit.i
  %call.i.i.i.i113.i = call zeroext i1 @__kasan_check_read(ptr noundef %b_count.i90.i, i32 noundef 4) #14
  %82 = ptrtoint ptr %b_count.i90.i to i32
  call void @__asan_load4_noabort(i32 %82)
  %83 = load volatile i32, ptr %b_count.i90.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %83)
  %tobool.not.i.i114.i = icmp eq i32 %83, 0
  br i1 %tobool.not.i.i114.i, label %do.end.i.i118.i, label %if.then.i.i117.i

if.then.i.i117.i:                                 ; preds = %if.then.i115.i
  call void @__sanitizer_cov_trace_pc() #16
  call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !268
  %call.i.i.i.i.i116.i = call zeroext i1 @__kasan_check_write(ptr noundef %b_count.i90.i, i32 noundef 4) #14
  call void @llvm.prefetch.p0(ptr %b_count.i90.i, i32 1, i32 3, i32 1) #14
  %84 = call { i32, i32 } asm sideeffect "@ atomic_sub\0A1:\09ldrex\09$0, [$3]\0A\09sub\09$0, $0, $4\0A\09strex\09$1, $0, [$3]\0A\09teq\09$1, #0\0A\09bne\091b", "=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %b_count.i90.i, ptr %b_count.i90.i, i32 1, ptr elementtype(i32) %b_count.i90.i) #14, !srcloc !269
  br label %brelse.exit119.i

do.end.i.i118.i:                                  ; preds = %if.then.i115.i
  call void @__sanitizer_cov_trace_pc() #16
  call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.4, i32 noundef 1148, i32 noundef 9, ptr noundef nonnull @.str.5) #14
  br label %brelse.exit119.i

brelse.exit119.i:                                 ; preds = %do.end.i.i118.i, %if.then.i.i117.i, %wait_on_buffer.exit.i.brelse.exit119.i_crit_edge
  call void @_raw_spin_lock(ptr noundef %private_lock) #14
  %85 = ptrtoint ptr %tmp.i to i32
  call void @__asan_load4_noabort(i32 %85)
  %86 = load volatile ptr, ptr %tmp.i, align 4
  %cmp.i88.not.i = icmp eq ptr %86, %tmp.i
  br i1 %cmp.i88.not.i, label %brelse.exit119.i.while.end39.i_crit_edge, label %brelse.exit119.i.while.body18.i_crit_edge

brelse.exit119.i.while.body18.i_crit_edge:        ; preds = %brelse.exit119.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %while.body18.i

brelse.exit119.i.while.end39.i_crit_edge:         ; preds = %brelse.exit119.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %while.end39.i

while.end39.i:                                    ; preds = %brelse.exit119.i.while.end39.i_crit_edge, %while.end.i.while.end39.i_crit_edge
  %err.0.lcssa.i = phi i32 [ 0, %while.end.i.while.end39.i_crit_edge ], [ %spec.select.i, %brelse.exit119.i.while.end39.i_crit_edge ]
  call void @_raw_spin_unlock(ptr noundef %private_lock) #14
  br label %repeat.i.i

repeat.i.i:                                       ; preds = %repeat.i.i.backedge, %while.end39.i
  %err.0.i.i = phi i32 [ 0, %while.end39.i ], [ %spec.select.i.i, %repeat.i.i.backedge ]
  call void @_raw_spin_lock(ptr noundef %private_lock) #14
  br label %for.cond.i.i

for.cond.i.i:                                     ; preds = %for.body.i.i.for.cond.i.i_crit_edge, %repeat.i.i
  %list.pn.i.i = phi ptr [ %private_list, %repeat.i.i ], [ %p.0.i.i, %for.body.i.i.for.cond.i.i_crit_edge ]
  %p.0.in.i.i = getelementptr inbounds %struct.list_head, ptr %list.pn.i.i, i32 0, i32 1
  %87 = ptrtoint ptr %p.0.in.i.i to i32
  call void @__asan_load4_noabort(i32 %87)
  %p.0.i.i = load ptr, ptr %p.0.in.i.i, align 4
  %cmp.i.not.i.i = icmp eq ptr %p.0.i.i, %private_list
  br i1 %cmp.i.not.i.i, label %fsync_buffers_list.exit, label %for.body.i.i

for.body.i.i:                                     ; preds = %for.cond.i.i
  %add.ptr.i.i = getelementptr i8, ptr %p.0.i.i, i32 -44
  %88 = ptrtoint ptr %add.ptr.i.i to i32
  call void @__asan_load4_noabort(i32 %88)
  %89 = load volatile i32, ptr %add.ptr.i.i, align 4
  %90 = and i32 %89, 4
  %tobool2.not.i.i = icmp eq i32 %90, 0
  br i1 %tobool2.not.i.i, label %for.body.i.i.for.cond.i.i_crit_edge, label %if.then.i123.i

for.body.i.i.for.cond.i.i_crit_edge:              ; preds = %for.body.i.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %for.cond.i.i

if.then.i123.i:                                   ; preds = %for.body.i.i
  %add.ptr.i.i.le = getelementptr i8, ptr %p.0.i.i, i32 -44
  %b_count.i.i120.i = getelementptr i8, ptr %p.0.i.i, i32 12
  %call.i.i.i.i121.i = call zeroext i1 @__kasan_check_write(ptr noundef %b_count.i.i120.i, i32 noundef 4) #14
  call void @llvm.prefetch.p0(ptr %b_count.i.i120.i, i32 1, i32 3, i32 1) #14
  %91 = call { i32, i32 } asm sideeffect "@ atomic_add\0A1:\09ldrex\09$0, [$3]\0A\09add\09$0, $0, $4\0A\09strex\09$1, $0, [$3]\0A\09teq\09$1, #0\0A\09bne\091b", "=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %b_count.i.i120.i, ptr %b_count.i.i120.i, i32 1, ptr elementtype(i32) %b_count.i.i120.i) #14, !srcloc !278
  call void @_raw_spin_unlock(ptr noundef %private_lock) #14
  call void @__might_sleep(ptr noundef nonnull @.str.43, i32 noundef 354) #14
  %92 = ptrtoint ptr %add.ptr.i.i.le to i32
  call void @__asan_load4_noabort(i32 %92)
  %93 = load volatile i32, ptr %add.ptr.i.i.le, align 4
  %94 = and i32 %93, 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %94)
  %tobool.not.i.i122.i = icmp eq i32 %94, 0
  br i1 %tobool.not.i.i122.i, label %if.then.i123.i.wait_on_buffer.exit.i.i_crit_edge, label %if.then.i.i124.i

if.then.i123.i.wait_on_buffer.exit.i.i_crit_edge: ; preds = %if.then.i123.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %wait_on_buffer.exit.i.i

if.then.i.i124.i:                                 ; preds = %if.then.i123.i
  call void @__might_sleep(ptr noundef nonnull @.str.13, i32 noundef 98) #14
  %95 = ptrtoint ptr %add.ptr.i.i.le to i32
  call void @__asan_load4_noabort(i32 %95)
  %96 = load volatile i32, ptr %add.ptr.i.i.le, align 4
  %97 = and i32 %96, 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %97)
  %tobool.not.i.i.i.i.i = icmp eq i32 %97, 0
  br i1 %tobool.not.i.i.i.i.i, label %if.then.i.i124.i.wait_on_buffer.exit.i.i_crit_edge, label %if.end.i.i.i.i.i

if.then.i.i124.i.wait_on_buffer.exit.i.i_crit_edge: ; preds = %if.then.i.i124.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %wait_on_buffer.exit.i.i

if.end.i.i.i.i.i:                                 ; preds = %if.then.i.i124.i
  call void @__sanitizer_cov_trace_pc() #16
  %call3.i.i.i.i.i = call i32 @out_of_line_wait_on_bit(ptr noundef %add.ptr.i.i.le, i32 noundef 2, ptr noundef nonnull @bit_wait_io, i32 noundef 2) #14
  br label %wait_on_buffer.exit.i.i

wait_on_buffer.exit.i.i:                          ; preds = %if.end.i.i.i.i.i, %if.then.i.i124.i.wait_on_buffer.exit.i.i_crit_edge, %if.then.i123.i.wait_on_buffer.exit.i.i_crit_edge
  %98 = ptrtoint ptr %add.ptr.i.i.le to i32
  call void @__asan_load4_noabort(i32 %98)
  %99 = load volatile i32, ptr %add.ptr.i.i.le, align 4
  %and1.i.i18.i.i = and i32 %99, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and1.i.i18.i.i)
  %tobool4.not.i.i = icmp eq i32 %and1.i.i18.i.i, 0
  %spec.select.i.i = select i1 %tobool4.not.i.i, i32 -5, i32 %err.0.i.i
  %tobool.not.i19.i.i = icmp eq ptr %add.ptr.i.i.le, null
  br i1 %tobool.not.i19.i.i, label %wait_on_buffer.exit.i.i.repeat.i.i.backedge_crit_edge, label %if.then.i20.i.i

wait_on_buffer.exit.i.i.repeat.i.i.backedge_crit_edge: ; preds = %wait_on_buffer.exit.i.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %repeat.i.i.backedge

if.then.i20.i.i:                                  ; preds = %wait_on_buffer.exit.i.i
  %call.i.i.i.i.i125.i = call zeroext i1 @__kasan_check_read(ptr noundef %b_count.i.i120.i, i32 noundef 4) #14
  %100 = ptrtoint ptr %b_count.i.i120.i to i32
  call void @__asan_load4_noabort(i32 %100)
  %101 = load volatile i32, ptr %b_count.i.i120.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %101)
  %tobool.not.i.i.i126.i = icmp eq i32 %101, 0
  br i1 %tobool.not.i.i.i126.i, label %do.end.i.i.i.i, label %if.then.i.i.i.i

if.then.i.i.i.i:                                  ; preds = %if.then.i20.i.i
  call void @__sanitizer_cov_trace_pc() #16
  call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !268
  %call.i.i.i.i.i.i.i = call zeroext i1 @__kasan_check_write(ptr noundef %b_count.i.i120.i, i32 noundef 4) #14
  call void @llvm.prefetch.p0(ptr %b_count.i.i120.i, i32 1, i32 3, i32 1) #14
  %102 = call { i32, i32 } asm sideeffect "@ atomic_sub\0A1:\09ldrex\09$0, [$3]\0A\09sub\09$0, $0, $4\0A\09strex\09$1, $0, [$3]\0A\09teq\09$1, #0\0A\09bne\091b", "=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %b_count.i.i120.i, ptr %b_count.i.i120.i, i32 1, ptr elementtype(i32) %b_count.i.i120.i) #14, !srcloc !269
  br label %repeat.i.i.backedge

do.end.i.i.i.i:                                   ; preds = %if.then.i20.i.i
  call void @__sanitizer_cov_trace_pc() #16
  call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.4, i32 noundef 1148, i32 noundef 9, ptr noundef nonnull @.str.5) #14
  br label %repeat.i.i.backedge

repeat.i.i.backedge:                              ; preds = %do.end.i.i.i.i, %if.then.i.i.i.i, %wait_on_buffer.exit.i.i.repeat.i.i.backedge_crit_edge
  br label %repeat.i.i

fsync_buffers_list.exit:                          ; preds = %for.cond.i.i
  call void @__sanitizer_cov_trace_pc() #16
  call void @_raw_spin_unlock(ptr noundef %private_lock) #14
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %err.0.lcssa.i)
  %tobool41.not.i = icmp eq i32 %err.0.lcssa.i, 0
  %call40.err.0.i = select i1 %tobool41.not.i, i32 %err.0.i.i, i32 %err.0.lcssa.i
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %plug.i) #14
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %tmp.i) #14
  br label %cleanup

cleanup:                                          ; preds = %fsync_buffers_list.exit, %lor.lhs.false.cleanup_crit_edge, %entry.cleanup_crit_edge
  %retval.0 = phi i32 [ %call40.err.0.i, %fsync_buffers_list.exit ], [ 0, %lor.lhs.false.cleanup_crit_edge ], [ 0, %entry.cleanup_crit_edge ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local void @write_boundary_block(ptr noundef %bdev, i64 noundef %bblock, i32 noundef %blocksize) local_unnamed_addr #2 align 64 {
entry:
  %bh = alloca ptr, align 4
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %bh) #14
  %add = add i64 %bblock, 1
  %call = tail call ptr @__find_get_block(ptr noundef %bdev, i64 noundef %add, i32 noundef %blocksize)
  %0 = ptrtoint ptr %bh to i32
  call void @__asan_store4_noabort(i32 %0)
  store ptr %call, ptr %bh, align 4
  %tobool.not = icmp eq ptr %call, null
  br i1 %tobool.not, label %entry.if.end4_crit_edge, label %if.then

entry.if.end4_crit_edge:                          ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end4

if.then:                                          ; preds = %entry
  %1 = ptrtoint ptr %call to i32
  call void @__asan_load4_noabort(i32 %1)
  %2 = load volatile i32, ptr %call, align 4
  %3 = and i32 %2, 2
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %3)
  %tobool2.not = icmp eq i32 %3, 0
  br i1 %tobool2.not, label %if.then.if.end_crit_edge, label %if.then3

if.then.if.end_crit_edge:                         ; preds = %if.then
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end

if.then3:                                         ; preds = %if.then
  call void @__sanitizer_cov_trace_pc() #16
  call void @ll_rw_block(i32 noundef 1, i32 noundef 0, i32 noundef 1, ptr noundef nonnull %bh)
  br label %if.end

if.end:                                           ; preds = %if.then3, %if.then.if.end_crit_edge
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !268
  %b_count.i = getelementptr inbounds %struct.buffer_head, ptr %call, i32 0, i32 11
  %call.i.i.i = tail call zeroext i1 @__kasan_check_write(ptr noundef %b_count.i, i32 noundef 4) #14
  tail call void @llvm.prefetch.p0(ptr %b_count.i, i32 1, i32 3, i32 1) #14
  %4 = tail call { i32, i32 } asm sideeffect "@ atomic_sub\0A1:\09ldrex\09$0, [$3]\0A\09sub\09$0, $0, $4\0A\09strex\09$1, $0, [$3]\0A\09teq\09$1, #0\0A\09bne\091b", "=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %b_count.i, ptr %b_count.i, i32 1, ptr elementtype(i32) %b_count.i) #14, !srcloc !269
  br label %if.end4

if.end4:                                          ; preds = %if.end, %entry.if.end4_crit_edge
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %bh) #14
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local ptr @__find_get_block(ptr noundef %bdev, i64 noundef %block, i32 noundef %size) #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ local_save_flags", "=r,~{memory},~{cc}"() #14, !srcloc !280
  %and.i.i.i = and i32 %0, 128
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i.i)
  %tobool.not.i.i = icmp eq i32 %and.i.i.i, 0
  br i1 %tobool.not.i.i, label %check_irqs_on.exit.i, label %do.body12.i.i, !prof !254

do.body12.i.i:                                    ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22fs/buffer.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 1222, 0\0A.popsection", ""() #14, !srcloc !281
  unreachable

check_irqs_on.exit.i:                             ; preds = %entry
  %1 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ local_save_flags", "=r,~{memory},~{cc}"() #14, !srcloc !280
  %and.i.i108.i = and i32 %1, 128
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i108.i)
  %tobool.not.i = icmp eq i32 %and.i.i108.i, 0
  tail call void asm sideeffect "\09cpsid i\09\09\09@ arch_local_irq_disable", "~{memory},~{cc}"() #14, !srcloc !282
  br i1 %tobool.not.i, label %if.then.i, label %check_irqs_on.exit.i.if.end.i_crit_edge

check_irqs_on.exit.i.if.end.i_crit_edge:          ; preds = %check_irqs_on.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end.i

if.then.i:                                        ; preds = %check_irqs_on.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @trace_hardirqs_off() #14
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %check_irqs_on.exit.i.if.end.i_crit_edge
  %2 = tail call i32 @llvm.read_register.i32(metadata !243) #14
  %and.i.i = and i32 %2, -16384
  %3 = inttoptr i32 %and.i.i to ptr
  %cpu.i = getelementptr inbounds %struct.thread_info, ptr %3, i32 0, i32 3
  %4 = ptrtoint ptr %cpu.i to i32
  call void @__asan_load4_noabort(i32 %4)
  %5 = load i32, ptr %cpu.i, align 4
  %arrayidx13.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %5
  %6 = ptrtoint ptr %arrayidx13.i to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load i32, ptr %arrayidx13.i, align 4
  br label %for.body.i

for.body.i:                                       ; preds = %for.inc.i.for.body.i_crit_edge, %if.end.i
  %i.0117.i = phi i32 [ 0, %if.end.i ], [ %inc.i, %for.inc.i.for.body.i_crit_edge ]
  %arrayidx.i = getelementptr [16 x ptr], ptr @bh_lrus, i32 0, i32 %i.0117.i
  %8 = ptrtoint ptr %arrayidx.i to i32
  %add.i = add i32 %7, %8
  %9 = inttoptr i32 %add.i to ptr
  %10 = ptrtoint ptr %9 to i32
  call void @__asan_load4_noabort(i32 %10)
  %11 = load ptr, ptr %9, align 4
  %tobool15.not.i = icmp eq ptr %11, null
  br i1 %tobool15.not.i, label %for.body.i.for.inc.i_crit_edge, label %land.lhs.true.i

for.body.i.for.inc.i_crit_edge:                   ; preds = %for.body.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %for.inc.i

land.lhs.true.i:                                  ; preds = %for.body.i
  %b_blocknr.i = getelementptr inbounds %struct.buffer_head, ptr %11, i32 0, i32 3
  %12 = ptrtoint ptr %b_blocknr.i to i32
  call void @__asan_load8_noabort(i32 %12)
  %13 = load i64, ptr %b_blocknr.i, align 8
  call void @__sanitizer_cov_trace_cmp8(i64 %13, i64 %block)
  %cmp16.i = icmp eq i64 %13, %block
  br i1 %cmp16.i, label %land.lhs.true17.i, label %land.lhs.true.i.for.inc.i_crit_edge

land.lhs.true.i.for.inc.i_crit_edge:              ; preds = %land.lhs.true.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %for.inc.i

land.lhs.true17.i:                                ; preds = %land.lhs.true.i
  %b_bdev.i = getelementptr inbounds %struct.buffer_head, ptr %11, i32 0, i32 6
  %14 = ptrtoint ptr %b_bdev.i to i32
  call void @__asan_load4_noabort(i32 %14)
  %15 = load ptr, ptr %b_bdev.i, align 8
  %cmp18.i = icmp eq ptr %15, %bdev
  br i1 %cmp18.i, label %land.lhs.true19.i, label %land.lhs.true17.i.for.inc.i_crit_edge

land.lhs.true17.i.for.inc.i_crit_edge:            ; preds = %land.lhs.true17.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %for.inc.i

land.lhs.true19.i:                                ; preds = %land.lhs.true17.i
  %b_size.i = getelementptr inbounds %struct.buffer_head, ptr %11, i32 0, i32 4
  %16 = ptrtoint ptr %b_size.i to i32
  call void @__asan_load4_noabort(i32 %16)
  %17 = load i32, ptr %b_size.i, align 8
  call void @__sanitizer_cov_trace_cmp4(i32 %17, i32 %size)
  %cmp20.i = icmp eq i32 %17, %size
  br i1 %cmp20.i, label %if.then21.i, label %land.lhs.true19.i.for.inc.i_crit_edge

land.lhs.true19.i.for.inc.i_crit_edge:            ; preds = %land.lhs.true19.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %for.inc.i

if.then21.i:                                      ; preds = %land.lhs.true19.i
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %i.0117.i)
  %tobool22.not.i = icmp eq i32 %i.0117.i, 0
  br i1 %tobool22.not.i, label %if.then21.i.cleanup.i_crit_edge, label %if.then21.i.while.body.i_crit_edge

if.then21.i.while.body.i_crit_edge:               ; preds = %if.then21.i
  br label %while.body.i

if.then21.i.cleanup.i_crit_edge:                  ; preds = %if.then21.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %cleanup.i

while.body.i:                                     ; preds = %while.body.i.while.body.i_crit_edge, %if.then21.i.while.body.i_crit_edge
  %i.1120.i = phi i32 [ %sub.i, %while.body.i.while.body.i_crit_edge ], [ %i.0117.i, %if.then21.i.while.body.i_crit_edge ]
  %sub.i = add nsw i32 %i.1120.i, -1
  %arrayidx44.i = getelementptr [16 x ptr], ptr @bh_lrus, i32 0, i32 %sub.i
  %18 = ptrtoint ptr %arrayidx44.i to i32
  %19 = ptrtoint ptr %cpu.i to i32
  call void @__asan_load4_noabort(i32 %19)
  %20 = load i32, ptr %cpu.i, align 4
  %arrayidx48.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %20
  %21 = ptrtoint ptr %arrayidx48.i to i32
  call void @__asan_load4_noabort(i32 %21)
  %22 = load i32, ptr %arrayidx48.i, align 4
  %add49.i = add i32 %22, %18
  %23 = inttoptr i32 %add49.i to ptr
  %24 = ptrtoint ptr %23 to i32
  call void @__asan_load4_noabort(i32 %24)
  %25 = load ptr, ptr %23, align 4
  %arrayidx57.i = getelementptr [16 x ptr], ptr @bh_lrus, i32 0, i32 %i.1120.i
  %26 = ptrtoint ptr %arrayidx57.i to i32
  %add62.i = add i32 %22, %26
  %27 = inttoptr i32 %add62.i to ptr
  %28 = ptrtoint ptr %27 to i32
  call void @__asan_store4_noabort(i32 %28)
  store ptr %25, ptr %27, align 4
  %tobool24.not.i = icmp eq i32 %sub.i, 0
  br i1 %tobool24.not.i, label %while.end.i, label %while.body.i.while.body.i_crit_edge

while.body.i.while.body.i_crit_edge:              ; preds = %while.body.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %while.body.i

while.end.i:                                      ; preds = %while.body.i
  call void @__sanitizer_cov_trace_pc() #16
  %29 = ptrtoint ptr %cpu.i to i32
  call void @__asan_load4_noabort(i32 %29)
  %30 = load i32, ptr %cpu.i, align 4
  %arrayidx82.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %30
  %31 = ptrtoint ptr %arrayidx82.i to i32
  call void @__asan_load4_noabort(i32 %31)
  %32 = load i32, ptr %arrayidx82.i, align 4
  %add83.i = add i32 %32, ptrtoint (ptr @bh_lrus to i32)
  %33 = inttoptr i32 %add83.i to ptr
  %34 = ptrtoint ptr %33 to i32
  call void @__asan_store4_noabort(i32 %34)
  store ptr %11, ptr %33, align 4
  br label %cleanup.i

cleanup.i:                                        ; preds = %while.end.i, %if.then21.i.cleanup.i_crit_edge
  %b_count.i.i = getelementptr inbounds %struct.buffer_head, ptr %11, i32 0, i32 11
  %call.i.i.i.i = tail call zeroext i1 @__kasan_check_write(ptr noundef %b_count.i.i, i32 noundef 4) #14
  tail call void @llvm.prefetch.p0(ptr %b_count.i.i, i32 1, i32 3, i32 1) #14
  %35 = tail call { i32, i32 } asm sideeffect "@ atomic_add\0A1:\09ldrex\09$0, [$3]\0A\09add\09$0, $0, $4\0A\09strex\09$1, $0, [$3]\0A\09teq\09$1, #0\0A\09bne\091b", "=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %b_count.i.i, ptr %b_count.i.i, i32 1, ptr elementtype(i32) %b_count.i.i) #14, !srcloc !278
  br label %lookup_bh_lru.exit

for.inc.i:                                        ; preds = %land.lhs.true19.i.for.inc.i_crit_edge, %land.lhs.true17.i.for.inc.i_crit_edge, %land.lhs.true.i.for.inc.i_crit_edge, %for.body.i.for.inc.i_crit_edge
  %inc.i = add nuw nsw i32 %i.0117.i, 1
  %exitcond.not.i = icmp eq i32 %inc.i, 16
  br i1 %exitcond.not.i, label %for.inc.i.lookup_bh_lru.exit_crit_edge, label %for.inc.i.for.body.i_crit_edge

for.inc.i.for.body.i_crit_edge:                   ; preds = %for.inc.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %for.body.i

for.inc.i.lookup_bh_lru.exit_crit_edge:           ; preds = %for.inc.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %lookup_bh_lru.exit

lookup_bh_lru.exit:                               ; preds = %for.inc.i.lookup_bh_lru.exit_crit_edge, %cleanup.i
  %ret.2.i = phi ptr [ %11, %cleanup.i ], [ null, %for.inc.i.lookup_bh_lru.exit_crit_edge ]
  tail call void @trace_hardirqs_on() #14
  tail call void asm sideeffect "\09cpsie i\09\09\09@ arch_local_irq_enable", "~{memory},~{cc}"() #14, !srcloc !283
  %cmp = icmp eq ptr %ret.2.i, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %lookup_bh_lru.exit
  %call1 = tail call fastcc ptr @__find_get_block_slow(ptr noundef %bdev, i64 noundef %block)
  %tobool.not = icmp eq ptr %call1, null
  br i1 %tobool.not, label %if.then.if.end3_crit_edge, label %if.then2

if.then.if.end3_crit_edge:                        ; preds = %if.then
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end3

if.then2:                                         ; preds = %if.then
  %36 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ local_save_flags", "=r,~{memory},~{cc}"() #14, !srcloc !280
  %and.i.i.i10 = and i32 %36, 128
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i.i10)
  %tobool.not.i.i11 = icmp eq i32 %and.i.i.i10, 0
  br i1 %tobool.not.i.i11, label %check_irqs_on.exit.i14, label %do.body12.i.i12, !prof !254

do.body12.i.i12:                                  ; preds = %if.then2
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22fs/buffer.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 1222, 0\0A.popsection", ""() #14, !srcloc !281
  unreachable

check_irqs_on.exit.i14:                           ; preds = %if.then2
  %call.i.i.i.i13 = tail call zeroext i1 @__kasan_check_read(ptr noundef nonnull @lru_disable_count, i32 noundef 4) #14
  call void @__asan_load4_noabort(i32 ptrtoint (ptr @lru_disable_count to i32))
  %37 = load volatile i32, ptr @lru_disable_count, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %37)
  %tobool.i.not.i = icmp eq i32 %37, 0
  br i1 %tobool.i.not.i, label %do.body.i, label %check_irqs_on.exit.i14.if.end3_crit_edge

check_irqs_on.exit.i14.if.end3_crit_edge:         ; preds = %check_irqs_on.exit.i14
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end3

do.body.i:                                        ; preds = %check_irqs_on.exit.i14
  %38 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ local_save_flags", "=r,~{memory},~{cc}"() #14, !srcloc !280
  %and.i.i35.i = and i32 %38, 128
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i35.i)
  %tobool.not.i15 = icmp eq i32 %and.i.i35.i, 0
  tail call void asm sideeffect "\09cpsid i\09\09\09@ arch_local_irq_disable", "~{memory},~{cc}"() #14, !srcloc !282
  br i1 %tobool.not.i15, label %if.then3.i, label %do.body.i.if.end4.i_crit_edge

do.body.i.if.end4.i_crit_edge:                    ; preds = %do.body.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end4.i

if.then3.i:                                       ; preds = %do.body.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @trace_hardirqs_off() #14
  br label %if.end4.i

if.end4.i:                                        ; preds = %if.then3.i, %do.body.i.if.end4.i_crit_edge
  %39 = tail call i32 @llvm.read_register.i32(metadata !243) #14
  %and.i.i16 = and i32 %39, -16384
  %40 = inttoptr i32 %and.i.i16 to ptr
  %cpu.i17 = getelementptr inbounds %struct.thread_info, ptr %40, i32 0, i32 3
  %41 = ptrtoint ptr %cpu.i17 to i32
  call void @__asan_load4_noabort(i32 %41)
  %42 = load i32, ptr %cpu.i17, align 4
  %arrayidx.i18 = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %42
  %43 = ptrtoint ptr %arrayidx.i18 to i32
  call void @__asan_load4_noabort(i32 %43)
  %44 = load i32, ptr %arrayidx.i18, align 4
  %add.i19 = add i32 %44, ptrtoint (ptr @bh_lrus to i32)
  %45 = inttoptr i32 %add.i19 to ptr
  %46 = ptrtoint ptr %45 to i32
  call void @__asan_load4_noabort(i32 %46)
  %47 = load ptr, ptr %45, align 4
  store ptr %call1, ptr %45, align 4
  %cmp16.i20 = icmp eq ptr %47, %call1
  br i1 %cmp16.i20, label %if.end4.i.do.body18.i_crit_edge, label %for.cond.i

if.end4.i.do.body18.i_crit_edge:                  ; preds = %if.end4.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.body18.i

for.cond.i:                                       ; preds = %if.end4.i
  %arrayidx11.1.i = getelementptr [16 x ptr], ptr %45, i32 0, i32 1
  %48 = ptrtoint ptr %arrayidx11.1.i to i32
  call void @__asan_load4_noabort(i32 %48)
  %49 = load ptr, ptr %arrayidx11.1.i, align 4
  store ptr %47, ptr %arrayidx11.1.i, align 4
  %cmp16.1.i = icmp eq ptr %49, %call1
  br i1 %cmp16.1.i, label %for.cond.i.do.body18.i_crit_edge, label %for.cond.1.i

for.cond.i.do.body18.i_crit_edge:                 ; preds = %for.cond.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.body18.i

for.cond.1.i:                                     ; preds = %for.cond.i
  %arrayidx11.2.i = getelementptr [16 x ptr], ptr %45, i32 0, i32 2
  %50 = ptrtoint ptr %arrayidx11.2.i to i32
  call void @__asan_load4_noabort(i32 %50)
  %51 = load ptr, ptr %arrayidx11.2.i, align 4
  store ptr %49, ptr %arrayidx11.2.i, align 4
  %cmp16.2.i = icmp eq ptr %51, %call1
  br i1 %cmp16.2.i, label %for.cond.1.i.do.body18.i_crit_edge, label %for.cond.2.i

for.cond.1.i.do.body18.i_crit_edge:               ; preds = %for.cond.1.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.body18.i

for.cond.2.i:                                     ; preds = %for.cond.1.i
  %arrayidx11.3.i = getelementptr [16 x ptr], ptr %45, i32 0, i32 3
  %52 = ptrtoint ptr %arrayidx11.3.i to i32
  call void @__asan_load4_noabort(i32 %52)
  %53 = load ptr, ptr %arrayidx11.3.i, align 4
  store ptr %51, ptr %arrayidx11.3.i, align 4
  %cmp16.3.i = icmp eq ptr %53, %call1
  br i1 %cmp16.3.i, label %for.cond.2.i.do.body18.i_crit_edge, label %for.cond.3.i

for.cond.2.i.do.body18.i_crit_edge:               ; preds = %for.cond.2.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.body18.i

for.cond.3.i:                                     ; preds = %for.cond.2.i
  %arrayidx11.4.i = getelementptr [16 x ptr], ptr %45, i32 0, i32 4
  %54 = ptrtoint ptr %arrayidx11.4.i to i32
  call void @__asan_load4_noabort(i32 %54)
  %55 = load ptr, ptr %arrayidx11.4.i, align 4
  store ptr %53, ptr %arrayidx11.4.i, align 4
  %cmp16.4.i = icmp eq ptr %55, %call1
  br i1 %cmp16.4.i, label %for.cond.3.i.do.body18.i_crit_edge, label %for.cond.4.i

for.cond.3.i.do.body18.i_crit_edge:               ; preds = %for.cond.3.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.body18.i

for.cond.4.i:                                     ; preds = %for.cond.3.i
  %arrayidx11.5.i = getelementptr [16 x ptr], ptr %45, i32 0, i32 5
  %56 = ptrtoint ptr %arrayidx11.5.i to i32
  call void @__asan_load4_noabort(i32 %56)
  %57 = load ptr, ptr %arrayidx11.5.i, align 4
  store ptr %55, ptr %arrayidx11.5.i, align 4
  %cmp16.5.i = icmp eq ptr %57, %call1
  br i1 %cmp16.5.i, label %for.cond.4.i.do.body18.i_crit_edge, label %for.cond.5.i

for.cond.4.i.do.body18.i_crit_edge:               ; preds = %for.cond.4.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.body18.i

for.cond.5.i:                                     ; preds = %for.cond.4.i
  %arrayidx11.6.i = getelementptr [16 x ptr], ptr %45, i32 0, i32 6
  %58 = ptrtoint ptr %arrayidx11.6.i to i32
  call void @__asan_load4_noabort(i32 %58)
  %59 = load ptr, ptr %arrayidx11.6.i, align 4
  store ptr %57, ptr %arrayidx11.6.i, align 4
  %cmp16.6.i = icmp eq ptr %59, %call1
  br i1 %cmp16.6.i, label %for.cond.5.i.do.body18.i_crit_edge, label %for.cond.6.i

for.cond.5.i.do.body18.i_crit_edge:               ; preds = %for.cond.5.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.body18.i

for.cond.6.i:                                     ; preds = %for.cond.5.i
  %arrayidx11.7.i = getelementptr [16 x ptr], ptr %45, i32 0, i32 7
  %60 = ptrtoint ptr %arrayidx11.7.i to i32
  call void @__asan_load4_noabort(i32 %60)
  %61 = load ptr, ptr %arrayidx11.7.i, align 4
  store ptr %59, ptr %arrayidx11.7.i, align 4
  %cmp16.7.i = icmp eq ptr %61, %call1
  br i1 %cmp16.7.i, label %for.cond.6.i.do.body18.i_crit_edge, label %for.cond.7.i

for.cond.6.i.do.body18.i_crit_edge:               ; preds = %for.cond.6.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.body18.i

for.cond.7.i:                                     ; preds = %for.cond.6.i
  %arrayidx11.8.i = getelementptr [16 x ptr], ptr %45, i32 0, i32 8
  %62 = ptrtoint ptr %arrayidx11.8.i to i32
  call void @__asan_load4_noabort(i32 %62)
  %63 = load ptr, ptr %arrayidx11.8.i, align 4
  store ptr %61, ptr %arrayidx11.8.i, align 4
  %cmp16.8.i = icmp eq ptr %63, %call1
  br i1 %cmp16.8.i, label %for.cond.7.i.do.body18.i_crit_edge, label %for.cond.8.i

for.cond.7.i.do.body18.i_crit_edge:               ; preds = %for.cond.7.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.body18.i

for.cond.8.i:                                     ; preds = %for.cond.7.i
  %arrayidx11.9.i = getelementptr [16 x ptr], ptr %45, i32 0, i32 9
  %64 = ptrtoint ptr %arrayidx11.9.i to i32
  call void @__asan_load4_noabort(i32 %64)
  %65 = load ptr, ptr %arrayidx11.9.i, align 4
  store ptr %63, ptr %arrayidx11.9.i, align 4
  %cmp16.9.i = icmp eq ptr %65, %call1
  br i1 %cmp16.9.i, label %for.cond.8.i.do.body18.i_crit_edge, label %for.cond.9.i

for.cond.8.i.do.body18.i_crit_edge:               ; preds = %for.cond.8.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.body18.i

for.cond.9.i:                                     ; preds = %for.cond.8.i
  %arrayidx11.10.i = getelementptr [16 x ptr], ptr %45, i32 0, i32 10
  %66 = ptrtoint ptr %arrayidx11.10.i to i32
  call void @__asan_load4_noabort(i32 %66)
  %67 = load ptr, ptr %arrayidx11.10.i, align 4
  store ptr %65, ptr %arrayidx11.10.i, align 4
  %cmp16.10.i = icmp eq ptr %67, %call1
  br i1 %cmp16.10.i, label %for.cond.9.i.do.body18.i_crit_edge, label %for.cond.10.i

for.cond.9.i.do.body18.i_crit_edge:               ; preds = %for.cond.9.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.body18.i

for.cond.10.i:                                    ; preds = %for.cond.9.i
  %arrayidx11.11.i = getelementptr [16 x ptr], ptr %45, i32 0, i32 11
  %68 = ptrtoint ptr %arrayidx11.11.i to i32
  call void @__asan_load4_noabort(i32 %68)
  %69 = load ptr, ptr %arrayidx11.11.i, align 4
  store ptr %67, ptr %arrayidx11.11.i, align 4
  %cmp16.11.i = icmp eq ptr %69, %call1
  br i1 %cmp16.11.i, label %for.cond.10.i.do.body18.i_crit_edge, label %for.cond.11.i

for.cond.10.i.do.body18.i_crit_edge:              ; preds = %for.cond.10.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.body18.i

for.cond.11.i:                                    ; preds = %for.cond.10.i
  %arrayidx11.12.i = getelementptr [16 x ptr], ptr %45, i32 0, i32 12
  %70 = ptrtoint ptr %arrayidx11.12.i to i32
  call void @__asan_load4_noabort(i32 %70)
  %71 = load ptr, ptr %arrayidx11.12.i, align 4
  store ptr %69, ptr %arrayidx11.12.i, align 4
  %cmp16.12.i = icmp eq ptr %71, %call1
  br i1 %cmp16.12.i, label %for.cond.11.i.do.body18.i_crit_edge, label %for.cond.12.i

for.cond.11.i.do.body18.i_crit_edge:              ; preds = %for.cond.11.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.body18.i

for.cond.12.i:                                    ; preds = %for.cond.11.i
  %arrayidx11.13.i = getelementptr [16 x ptr], ptr %45, i32 0, i32 13
  %72 = ptrtoint ptr %arrayidx11.13.i to i32
  call void @__asan_load4_noabort(i32 %72)
  %73 = load ptr, ptr %arrayidx11.13.i, align 4
  store ptr %71, ptr %arrayidx11.13.i, align 4
  %cmp16.13.i = icmp eq ptr %73, %call1
  br i1 %cmp16.13.i, label %for.cond.12.i.do.body18.i_crit_edge, label %for.cond.13.i

for.cond.12.i.do.body18.i_crit_edge:              ; preds = %for.cond.12.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.body18.i

for.cond.13.i:                                    ; preds = %for.cond.12.i
  %arrayidx11.14.i = getelementptr [16 x ptr], ptr %45, i32 0, i32 14
  %74 = ptrtoint ptr %arrayidx11.14.i to i32
  call void @__asan_load4_noabort(i32 %74)
  %75 = load ptr, ptr %arrayidx11.14.i, align 4
  store ptr %73, ptr %arrayidx11.14.i, align 4
  %cmp16.14.i = icmp eq ptr %75, %call1
  br i1 %cmp16.14.i, label %for.cond.13.i.do.body18.i_crit_edge, label %for.cond.14.i

for.cond.13.i.do.body18.i_crit_edge:              ; preds = %for.cond.13.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.body18.i

for.cond.14.i:                                    ; preds = %for.cond.13.i
  %arrayidx11.15.i = getelementptr [16 x ptr], ptr %45, i32 0, i32 15
  %76 = ptrtoint ptr %arrayidx11.15.i to i32
  call void @__asan_load4_noabort(i32 %76)
  %77 = load ptr, ptr %arrayidx11.15.i, align 4
  store ptr %75, ptr %arrayidx11.15.i, align 4
  %cmp16.15.i = icmp eq ptr %77, %call1
  br i1 %cmp16.15.i, label %for.cond.14.i.do.body18.i_crit_edge, label %for.cond.15.i

for.cond.14.i.do.body18.i_crit_edge:              ; preds = %for.cond.14.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.body18.i

for.cond.15.i:                                    ; preds = %for.cond.14.i
  %b_count.i.i21 = getelementptr inbounds %struct.buffer_head, ptr %call1, i32 0, i32 11
  %call.i.i.i36.i = tail call zeroext i1 @__kasan_check_write(ptr noundef %b_count.i.i21, i32 noundef 4) #14
  tail call void @llvm.prefetch.p0(ptr %b_count.i.i21, i32 1, i32 3, i32 1) #14
  %78 = tail call { i32, i32 } asm sideeffect "@ atomic_add\0A1:\09ldrex\09$0, [$3]\0A\09add\09$0, $0, $4\0A\09strex\09$1, $0, [$3]\0A\09teq\09$1, #0\0A\09bne\091b", "=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %b_count.i.i21, ptr %b_count.i.i21, i32 1, ptr elementtype(i32) %b_count.i.i21) #14, !srcloc !278
  tail call void @trace_hardirqs_on() #14
  tail call void asm sideeffect "\09cpsie i\09\09\09@ arch_local_irq_enable", "~{memory},~{cc}"() #14, !srcloc !283
  %tobool.not.i37.i = icmp eq ptr %77, null
  br i1 %tobool.not.i37.i, label %for.cond.15.i.if.end3_crit_edge, label %if.then.i.i

for.cond.15.i.if.end3_crit_edge:                  ; preds = %for.cond.15.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end3

do.body18.i:                                      ; preds = %for.cond.14.i.do.body18.i_crit_edge, %for.cond.13.i.do.body18.i_crit_edge, %for.cond.12.i.do.body18.i_crit_edge, %for.cond.11.i.do.body18.i_crit_edge, %for.cond.10.i.do.body18.i_crit_edge, %for.cond.9.i.do.body18.i_crit_edge, %for.cond.8.i.do.body18.i_crit_edge, %for.cond.7.i.do.body18.i_crit_edge, %for.cond.6.i.do.body18.i_crit_edge, %for.cond.5.i.do.body18.i_crit_edge, %for.cond.4.i.do.body18.i_crit_edge, %for.cond.3.i.do.body18.i_crit_edge, %for.cond.2.i.do.body18.i_crit_edge, %for.cond.1.i.do.body18.i_crit_edge, %for.cond.i.do.body18.i_crit_edge, %if.end4.i.do.body18.i_crit_edge
  tail call void @trace_hardirqs_on() #14
  tail call void asm sideeffect "\09cpsie i\09\09\09@ arch_local_irq_enable", "~{memory},~{cc}"() #14, !srcloc !283
  br label %if.end3

if.then.i.i:                                      ; preds = %for.cond.15.i
  %b_count.i.i.i = getelementptr inbounds %struct.buffer_head, ptr %77, i32 0, i32 11
  %call.i.i.i.i.i = tail call zeroext i1 @__kasan_check_read(ptr noundef %b_count.i.i.i, i32 noundef 4) #14
  %79 = ptrtoint ptr %b_count.i.i.i to i32
  call void @__asan_load4_noabort(i32 %79)
  %80 = load volatile i32, ptr %b_count.i.i.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %80)
  %tobool.not.i.i.i = icmp eq i32 %80, 0
  br i1 %tobool.not.i.i.i, label %do.end.i.i.i, label %if.then.i.i.i

if.then.i.i.i:                                    ; preds = %if.then.i.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !268
  %call.i.i.i.i.i.i = tail call zeroext i1 @__kasan_check_write(ptr noundef %b_count.i.i.i, i32 noundef 4) #14
  tail call void @llvm.prefetch.p0(ptr %b_count.i.i.i, i32 1, i32 3, i32 1) #14
  %81 = tail call { i32, i32 } asm sideeffect "@ atomic_sub\0A1:\09ldrex\09$0, [$3]\0A\09sub\09$0, $0, $4\0A\09strex\09$1, $0, [$3]\0A\09teq\09$1, #0\0A\09bne\091b", "=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %b_count.i.i.i, ptr %b_count.i.i.i, i32 1, ptr elementtype(i32) %b_count.i.i.i) #14, !srcloc !269
  br label %if.end3

do.end.i.i.i:                                     ; preds = %if.then.i.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.4, i32 noundef 1148, i32 noundef 9, ptr noundef nonnull @.str.5) #14
  br label %if.end3

if.else:                                          ; preds = %lookup_bh_lru.exit
  call void @__sanitizer_cov_trace_pc() #16
  tail call fastcc void @trace_block_touch_buffer(ptr noundef nonnull %ret.2.i) #14
  %b_page.i = getelementptr inbounds %struct.buffer_head, ptr %ret.2.i, i32 0, i32 2
  %82 = ptrtoint ptr %b_page.i to i32
  call void @__asan_load4_noabort(i32 %82)
  %83 = load ptr, ptr %b_page.i, align 8
  tail call void @mark_page_accessed(ptr noundef %83) #14
  br label %if.end3

if.end3:                                          ; preds = %if.else, %do.end.i.i.i, %if.then.i.i.i, %do.body18.i, %for.cond.15.i.if.end3_crit_edge, %check_irqs_on.exit.i14.if.end3_crit_edge, %if.then.if.end3_crit_edge
  %bh.0 = phi ptr [ null, %if.then.if.end3_crit_edge ], [ %ret.2.i, %if.else ], [ %call1, %check_irqs_on.exit.i14.if.end3_crit_edge ], [ %call1, %for.cond.15.i.if.end3_crit_edge ], [ %call1, %do.body18.i ], [ %call1, %if.then.i.i.i ], [ %call1, %do.end.i.i.i ]
  ret ptr %bh.0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local void @ll_rw_block(i32 noundef %op, i32 noundef %op_flags, i32 noundef %nr, ptr nocapture noundef readonly %bhs) #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %nr)
  %cmp35 = icmp sgt i32 %nr, 0
  br i1 %cmp35, label %for.body.lr.ph, label %entry.for.end_crit_edge

entry.for.end_crit_edge:                          ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  br label %for.end

for.body.lr.ph:                                   ; preds = %entry
  call void @__sanitizer_cov_trace_const_cmp4(i32 1, i32 %op)
  %cmp1 = icmp eq i32 %op, 1
  br label %for.body

for.body:                                         ; preds = %cleanup.for.body_crit_edge, %for.body.lr.ph
  %i.036 = phi i32 [ 0, %for.body.lr.ph ], [ %inc, %cleanup.for.body_crit_edge ]
  %arrayidx = getelementptr ptr, ptr %bhs, i32 %i.036
  %0 = ptrtoint ptr %arrayidx to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %arrayidx, align 4
  %call.i.i.i = tail call zeroext i1 @__kasan_check_write(ptr noundef %1, i32 noundef 4) #14
  %2 = ptrtoint ptr %1 to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load volatile i32, ptr %1, align 4
  %and.i.i.i = and i32 %3, 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i.i)
  %tobool.not.i.i.i = icmp eq i32 %and.i.i.i, 0
  br i1 %tobool.not.i.i.i, label %trylock_buffer.exit, label %for.body.cleanup_crit_edge

for.body.cleanup_crit_edge:                       ; preds = %for.body
  call void @__sanitizer_cov_trace_pc() #16
  br label %cleanup

trylock_buffer.exit:                              ; preds = %for.body
  tail call void @llvm.prefetch.p0(ptr %1, i32 1, i32 3, i32 1) #14
  %4 = tail call { i32, i32, i32 } asm sideeffect "@ atomic_fetch_or\0A1:\09ldrex\09$0, [$4]\0A\09orr\09$1, $0, $5\0A\09strex\09$2, $1, [$4]\0A\09teq\09$2, #0\0A\09bne\091b", "=&r,=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %1, ptr %1, i32 4, ptr elementtype(i32) %1) #14, !srcloc !284
  %asmresult.i.i.i.i.i.i = extractvalue { i32, i32, i32 } %4, 0
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !285
  %5 = and i32 %asmresult.i.i.i.i.i.i, 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %5)
  %tobool.not.not = icmp eq i32 %5, 0
  br i1 %tobool.not.not, label %if.end, label %trylock_buffer.exit.cleanup_crit_edge

trylock_buffer.exit.cleanup_crit_edge:            ; preds = %trylock_buffer.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %cleanup

if.end:                                           ; preds = %trylock_buffer.exit
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.end
  %call.i = tail call i32 @_test_and_clear_bit(i32 noundef 1, ptr noundef %1) #14
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call.i)
  %tobool4.not = icmp eq i32 %call.i, 0
  br i1 %tobool4.not, label %if.then2.if.end14_crit_edge, label %if.then5

if.then2.if.end14_crit_edge:                      ; preds = %if.then2
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end14

if.then5:                                         ; preds = %if.then2
  call void @__sanitizer_cov_trace_pc() #16
  %b_end_io = getelementptr inbounds %struct.buffer_head, ptr %1, i32 0, i32 7
  %6 = ptrtoint ptr %b_end_io to i32
  call void @__asan_store4_noabort(i32 %6)
  store ptr @end_buffer_write_sync, ptr %b_end_io, align 4
  %b_count.i = getelementptr inbounds %struct.buffer_head, ptr %1, i32 0, i32 11
  %call.i.i.i29 = tail call zeroext i1 @__kasan_check_write(ptr noundef %b_count.i, i32 noundef 4) #14
  tail call void @llvm.prefetch.p0(ptr %b_count.i, i32 1, i32 3, i32 1) #14
  %7 = tail call { i32, i32 } asm sideeffect "@ atomic_add\0A1:\09ldrex\09$0, [$3]\0A\09add\09$0, $0, $4\0A\09strex\09$1, $0, [$3]\0A\09teq\09$1, #0\0A\09bne\091b", "=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %b_count.i, ptr %b_count.i, i32 1, ptr elementtype(i32) %b_count.i) #14, !srcloc !278
  tail call fastcc void @submit_bh_wbc(i32 noundef 1, i32 noundef %op_flags, ptr noundef %1, i32 noundef 0, ptr noundef null) #14
  br label %cleanup

if.else:                                          ; preds = %if.end
  %8 = ptrtoint ptr %1 to i32
  call void @__asan_load4_noabort(i32 %8)
  %9 = load volatile i32, ptr %1, align 4
  %and1.i.i = and i32 %9, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and1.i.i)
  %tobool9.not = icmp eq i32 %and1.i.i, 0
  br i1 %tobool9.not, label %if.then10, label %if.else.if.end14_crit_edge

if.else.if.end14_crit_edge:                       ; preds = %if.else
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end14

if.then10:                                        ; preds = %if.else
  call void @__sanitizer_cov_trace_pc() #16
  %b_end_io11 = getelementptr inbounds %struct.buffer_head, ptr %1, i32 0, i32 7
  %10 = ptrtoint ptr %b_end_io11 to i32
  call void @__asan_store4_noabort(i32 %10)
  store ptr @end_buffer_read_sync, ptr %b_end_io11, align 4
  %b_count.i30 = getelementptr inbounds %struct.buffer_head, ptr %1, i32 0, i32 11
  %call.i.i.i31 = tail call zeroext i1 @__kasan_check_write(ptr noundef %b_count.i30, i32 noundef 4) #14
  tail call void @llvm.prefetch.p0(ptr %b_count.i30, i32 1, i32 3, i32 1) #14
  %11 = tail call { i32, i32 } asm sideeffect "@ atomic_add\0A1:\09ldrex\09$0, [$3]\0A\09add\09$0, $0, $4\0A\09strex\09$1, $0, [$3]\0A\09teq\09$1, #0\0A\09bne\091b", "=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %b_count.i30, ptr %b_count.i30, i32 1, ptr elementtype(i32) %b_count.i30) #14, !srcloc !278
  tail call fastcc void @submit_bh_wbc(i32 noundef %op, i32 noundef %op_flags, ptr noundef %1, i32 noundef 0, ptr noundef null) #14
  br label %cleanup

if.end14:                                         ; preds = %if.else.if.end14_crit_edge, %if.then2.if.end14_crit_edge
  %call.i.i.i32 = tail call zeroext i1 @__kasan_check_write(ptr noundef %1, i32 noundef 4) #14
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !259
  tail call void @llvm.prefetch.p0(ptr %1, i32 1, i32 3, i32 1) #14
  %12 = tail call { i32, i32, i32 } asm sideeffect "@ atomic_fetch_andnot\0A1:\09ldrex\09$0, [$4]\0A\09bic\09$1, $0, $5\0A\09strex\09$2, $1, [$4]\0A\09teq\09$2, #0\0A\09bne\091b", "=&r,=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %1, ptr %1, i32 4, ptr elementtype(i32) %1) #14, !srcloc !260
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !261
  tail call void @wake_up_bit(ptr noundef %1, i32 noundef 2) #14
  br label %cleanup

cleanup:                                          ; preds = %if.end14, %if.then10, %if.then5, %trylock_buffer.exit.cleanup_crit_edge, %for.body.cleanup_crit_edge
  %inc = add nuw nsw i32 %i.036, 1
  %exitcond.not = icmp eq i32 %inc, %nr
  br i1 %exitcond.not, label %cleanup.for.end_crit_edge, label %cleanup.for.body_crit_edge

cleanup.for.body_crit_edge:                       ; preds = %cleanup
  call void @__sanitizer_cov_trace_pc() #16
  br label %for.body

cleanup.for.end_crit_edge:                        ; preds = %cleanup
  call void @__sanitizer_cov_trace_pc() #16
  br label %for.end

for.end:                                          ; preds = %cleanup.for.end_crit_edge, %entry.for.end_crit_edge
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local void @mark_buffer_dirty_inode(ptr noundef %bh, ptr nocapture noundef readonly %inode) #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %i_mapping = getelementptr inbounds %struct.inode, ptr %inode, i32 0, i32 9
  %0 = ptrtoint ptr %i_mapping to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %i_mapping, align 8
  %b_page = getelementptr inbounds %struct.buffer_head, ptr %bh, i32 0, i32 2
  %2 = ptrtoint ptr %b_page to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load ptr, ptr %b_page, align 8
  %mapping1 = getelementptr inbounds %struct.page, ptr %3, i32 0, i32 1, i32 0, i32 1
  %4 = ptrtoint ptr %mapping1 to i32
  call void @__asan_load4_noabort(i32 %4)
  %5 = load ptr, ptr %mapping1, align 4
  tail call void @mark_buffer_dirty(ptr noundef %bh)
  %private_data = getelementptr inbounds %struct.address_space, ptr %1, i32 0, i32 14
  %6 = ptrtoint ptr %private_data to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load ptr, ptr %private_data, align 4
  %tobool.not = icmp eq ptr %7, null
  br i1 %tobool.not, label %if.then, label %do.body

if.then:                                          ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  %8 = ptrtoint ptr %private_data to i32
  call void @__asan_store4_noabort(i32 %8)
  store ptr %5, ptr %private_data, align 4
  br label %if.end13

do.body:                                          ; preds = %entry
  %cmp.not = icmp eq ptr %7, %5
  br i1 %cmp.not, label %do.body.if.end13_crit_edge, label %do.body7, !prof !254

do.body.if.end13_crit_edge:                       ; preds = %do.body
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end13

do.body7:                                         ; preds = %do.body
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22fs/buffer.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 579, 0\0A.popsection", ""() #14, !srcloc !286
  unreachable

if.end13:                                         ; preds = %do.body.if.end13_crit_edge, %if.then
  %b_assoc_map = getelementptr inbounds %struct.buffer_head, ptr %bh, i32 0, i32 10
  %9 = ptrtoint ptr %b_assoc_map to i32
  call void @__asan_load4_noabort(i32 %9)
  %10 = load ptr, ptr %b_assoc_map, align 4
  %tobool14.not = icmp eq ptr %10, null
  br i1 %tobool14.not, label %if.then15, label %if.end13.if.end18_crit_edge

if.end13.if.end18_crit_edge:                      ; preds = %if.end13
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end18

if.then15:                                        ; preds = %if.end13
  %private_lock = getelementptr inbounds %struct.address_space, ptr %5, i32 0, i32 12
  tail call void @_raw_spin_lock(ptr noundef %private_lock) #14
  %b_assoc_buffers = getelementptr inbounds %struct.buffer_head, ptr %bh, i32 0, i32 9
  %private_list = getelementptr inbounds %struct.address_space, ptr %1, i32 0, i32 13
  %call.i.i = tail call zeroext i1 @__list_del_entry_valid(ptr noundef %b_assoc_buffers) #14
  br i1 %call.i.i, label %if.end.i.i, label %if.then15.__list_del_entry.exit.i_crit_edge

if.then15.__list_del_entry.exit.i_crit_edge:      ; preds = %if.then15
  call void @__sanitizer_cov_trace_pc() #16
  br label %__list_del_entry.exit.i

if.end.i.i:                                       ; preds = %if.then15
  call void @__sanitizer_cov_trace_pc() #16
  %prev.i.i = getelementptr inbounds %struct.buffer_head, ptr %bh, i32 0, i32 9, i32 1
  %11 = ptrtoint ptr %prev.i.i to i32
  call void @__asan_load4_noabort(i32 %11)
  %12 = load ptr, ptr %prev.i.i, align 4
  %13 = ptrtoint ptr %b_assoc_buffers to i32
  call void @__asan_load4_noabort(i32 %13)
  %14 = load ptr, ptr %b_assoc_buffers, align 4
  %prev1.i.i.i = getelementptr inbounds %struct.list_head, ptr %14, i32 0, i32 1
  %15 = ptrtoint ptr %prev1.i.i.i to i32
  call void @__asan_store4_noabort(i32 %15)
  store ptr %12, ptr %prev1.i.i.i, align 4
  %16 = ptrtoint ptr %12 to i32
  call void @__asan_store4_noabort(i32 %16)
  store volatile ptr %14, ptr %12, align 4
  br label %__list_del_entry.exit.i

__list_del_entry.exit.i:                          ; preds = %if.end.i.i, %if.then15.__list_del_entry.exit.i_crit_edge
  %prev.i2.i = getelementptr inbounds %struct.address_space, ptr %1, i32 0, i32 13, i32 1
  %17 = ptrtoint ptr %prev.i2.i to i32
  call void @__asan_load4_noabort(i32 %17)
  %18 = load ptr, ptr %prev.i2.i, align 4
  %call.i.i.i = tail call zeroext i1 @__list_add_valid(ptr noundef %b_assoc_buffers, ptr noundef %18, ptr noundef %private_list) #14
  br i1 %call.i.i.i, label %if.end.i.i.i, label %__list_del_entry.exit.i.list_move_tail.exit_crit_edge

__list_del_entry.exit.i.list_move_tail.exit_crit_edge: ; preds = %__list_del_entry.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %list_move_tail.exit

if.end.i.i.i:                                     ; preds = %__list_del_entry.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  %19 = ptrtoint ptr %prev.i2.i to i32
  call void @__asan_store4_noabort(i32 %19)
  store ptr %b_assoc_buffers, ptr %prev.i2.i, align 4
  %20 = ptrtoint ptr %b_assoc_buffers to i32
  call void @__asan_store4_noabort(i32 %20)
  store ptr %private_list, ptr %b_assoc_buffers, align 4
  %prev3.i.i.i = getelementptr inbounds %struct.buffer_head, ptr %bh, i32 0, i32 9, i32 1
  %21 = ptrtoint ptr %prev3.i.i.i to i32
  call void @__asan_store4_noabort(i32 %21)
  store ptr %18, ptr %prev3.i.i.i, align 4
  %22 = ptrtoint ptr %18 to i32
  call void @__asan_store4_noabort(i32 %22)
  store volatile ptr %b_assoc_buffers, ptr %18, align 4
  br label %list_move_tail.exit

list_move_tail.exit:                              ; preds = %if.end.i.i.i, %__list_del_entry.exit.i.list_move_tail.exit_crit_edge
  %23 = ptrtoint ptr %b_assoc_map to i32
  call void @__asan_store4_noabort(i32 %23)
  store ptr %1, ptr %b_assoc_map, align 4
  tail call void @_raw_spin_unlock(ptr noundef %private_lock) #14
  br label %if.end18

if.end18:                                         ; preds = %list_move_tail.exit, %if.end13.if.end18_crit_edge
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local void @mark_buffer_dirty(ptr noundef %bh) #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = ptrtoint ptr %bh to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load volatile i32, ptr %bh, align 4
  %and1.i.i = and i32 %1, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and1.i.i)
  %tobool.not = icmp eq i32 %and1.i.i, 0
  br i1 %tobool.not, label %land.rhs, label %entry.if.end29_crit_edge

entry.if.end29_crit_edge:                         ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end29

land.rhs:                                         ; preds = %entry
  %.b80 = load i1, ptr @mark_buffer_dirty.__already_done, align 1
  br i1 %.b80, label %land.rhs.if.end29_crit_edge, label %if.then, !prof !254

land.rhs.if.end29_crit_edge:                      ; preds = %land.rhs
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end29

if.then:                                          ; preds = %land.rhs
  call void @__sanitizer_cov_trace_pc() #16
  store i1 true, ptr @mark_buffer_dirty.__already_done, align 1
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.4, i32 noundef 1084, i32 noundef 9, ptr noundef null) #14
  br label %if.end29

if.end29:                                         ; preds = %if.then, %land.rhs.if.end29_crit_edge, %entry.if.end29_crit_edge
  tail call fastcc void @trace_block_dirty_buffer(ptr noundef %bh)
  %2 = ptrtoint ptr %bh to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load volatile i32, ptr %bh, align 4
  %4 = and i32 %3, 2
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %4)
  %tobool38.not = icmp eq i32 %4, 0
  br i1 %tobool38.not, label %if.end29.if.end50_crit_edge, label %do.end43

if.end29.if.end50_crit_edge:                      ; preds = %if.end29
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end50

do.end43:                                         ; preds = %if.end29
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !287
  %5 = ptrtoint ptr %bh to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load volatile i32, ptr %bh, align 4
  %7 = and i32 %6, 2
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %7)
  %tobool47.not = icmp eq i32 %7, 0
  br i1 %tobool47.not, label %do.end43.if.end50_crit_edge, label %do.end43.if.end65_crit_edge

do.end43.if.end65_crit_edge:                      ; preds = %do.end43
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end65

do.end43.if.end50_crit_edge:                      ; preds = %do.end43
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end50

if.end50:                                         ; preds = %do.end43.if.end50_crit_edge, %if.end29.if.end50_crit_edge
  %call.i = tail call i32 @_test_and_set_bit(i32 noundef 1, ptr noundef %bh) #14
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call.i)
  %tobool52.not = icmp eq i32 %call.i, 0
  br i1 %tobool52.not, label %if.then53, label %if.end50.if.end65_crit_edge

if.end50.if.end65_crit_edge:                      ; preds = %if.end50
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end65

if.then53:                                        ; preds = %if.end50
  %b_page = getelementptr inbounds %struct.buffer_head, ptr %bh, i32 0, i32 2
  %8 = ptrtoint ptr %b_page to i32
  call void @__asan_load4_noabort(i32 %8)
  %9 = load ptr, ptr %b_page, align 8
  tail call void @lock_page_memcg(ptr noundef %9) #14
  %10 = getelementptr inbounds %struct.page, ptr %9, i32 0, i32 1
  %11 = ptrtoint ptr %10 to i32
  call void @__asan_load4_noabort(i32 %11)
  %12 = load volatile i32, ptr %10, align 4
  %and.i.i = and i32 %12, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i)
  %tobool.not.i.i = icmp eq i32 %and.i.i, 0
  br i1 %tobool.not.i.i, label %if.end.i.i, label %if.then.i.i, !prof !254

if.then.i.i:                                      ; preds = %if.then53
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i.i = add i32 %12, -1
  br label %_compound_head.exit.i

if.end.i.i:                                       ; preds = %if.then53
  call void @__sanitizer_cov_trace_pc() #16
  %13 = ptrtoint ptr %9 to i32
  br label %_compound_head.exit.i

_compound_head.exit.i:                            ; preds = %if.end.i.i, %if.then.i.i
  %retval.0.i.i = phi i32 [ %sub.i.i, %if.then.i.i ], [ %13, %if.end.i.i ]
  %14 = inttoptr i32 %retval.0.i.i to ptr
  %15 = ptrtoint ptr %14 to i32
  call void @__asan_load4_noabort(i32 %15)
  %16 = load volatile i32, ptr %14, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %16)
  %cmp.i.not.i = icmp eq i32 %16, -1
  %17 = ptrtoint ptr %10 to i32
  call void @__asan_load4_noabort(i32 %17)
  %18 = load volatile i32, ptr %10, align 4
  %and.i13.i = and i32 %18, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i13.i)
  %tobool.not.i14.i = icmp eq i32 %and.i13.i, 0
  br i1 %cmp.i.not.i, label %if.then.i, label %do.end8.i, !prof !262

if.then.i:                                        ; preds = %_compound_head.exit.i
  br i1 %tobool.not.i14.i, label %if.end.i17.i, label %if.then.i16.i, !prof !254

if.then.i16.i:                                    ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i15.i = add i32 %18, -1
  br label %_compound_head.exit19.i

if.end.i17.i:                                     ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #16
  %19 = ptrtoint ptr %9 to i32
  br label %_compound_head.exit19.i

_compound_head.exit19.i:                          ; preds = %if.end.i17.i, %if.then.i16.i
  %retval.0.i18.i = phi i32 [ %sub.i15.i, %if.then.i16.i ], [ %19, %if.end.i17.i ]
  %20 = inttoptr i32 %retval.0.i18.i to ptr
  tail call void @dump_page(ptr noundef %20, ptr noundef nonnull @.str.14) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 420, 0\0A.popsection", ""() #14, !srcloc !288
  unreachable

do.end8.i:                                        ; preds = %_compound_head.exit.i
  br i1 %tobool.not.i14.i, label %if.end.i24.i, label %if.then.i23.i, !prof !254

if.then.i23.i:                                    ; preds = %do.end8.i
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i22.i = add i32 %18, -1
  br label %TestSetPageDirty.exit

if.end.i24.i:                                     ; preds = %do.end8.i
  call void @__sanitizer_cov_trace_pc() #16
  %21 = ptrtoint ptr %9 to i32
  br label %TestSetPageDirty.exit

TestSetPageDirty.exit:                            ; preds = %if.end.i24.i, %if.then.i23.i
  %retval.0.i25.i = phi i32 [ %sub.i22.i, %if.then.i23.i ], [ %21, %if.end.i24.i ]
  %22 = inttoptr i32 %retval.0.i25.i to ptr
  %call10.i = tail call i32 @_test_and_set_bit(i32 noundef 3, ptr noundef %22) #14
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call10.i)
  %tobool55.not = icmp eq i32 %call10.i, 0
  br i1 %tobool55.not, label %if.then56, label %TestSetPageDirty.exit.if.end61.thread_crit_edge

TestSetPageDirty.exit.if.end61.thread_crit_edge:  ; preds = %TestSetPageDirty.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end61.thread

if.then56:                                        ; preds = %TestSetPageDirty.exit
  %call57 = tail call ptr @page_mapping(ptr noundef %9) #14
  %tobool58.not = icmp eq ptr %call57, null
  br i1 %tobool58.not, label %if.then56.if.end61.thread_crit_edge, label %if.then59

if.then56.if.end61.thread_crit_edge:              ; preds = %if.then56
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end61.thread

if.then59:                                        ; preds = %if.then56
  %23 = ptrtoint ptr %10 to i32
  call void @__asan_load4_noabort(i32 %23)
  %24 = load volatile i32, ptr %10, align 4
  %and.i.i84 = and i32 %24, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i84)
  %tobool.not.i.i85 = icmp eq i32 %and.i.i84, 0
  br i1 %tobool.not.i.i85, label %if.end.i.i88, label %if.then.i.i87, !prof !254

if.then.i.i87:                                    ; preds = %if.then59
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i.i86 = add i32 %24, -1
  br label %if.then63

if.end.i.i88:                                     ; preds = %if.then59
  call void @__sanitizer_cov_trace_pc() #16
  %25 = ptrtoint ptr %9 to i32
  br label %if.then63

if.end61.thread:                                  ; preds = %if.then56.if.end61.thread_crit_edge, %TestSetPageDirty.exit.if.end61.thread_crit_edge
  tail call void @unlock_page_memcg(ptr noundef %9) #14
  br label %if.end65

if.then63:                                        ; preds = %if.end.i.i88, %if.then.i.i87
  %retval.0.i.i89 = phi i32 [ %sub.i.i86, %if.then.i.i87 ], [ %25, %if.end.i.i88 ]
  %26 = inttoptr i32 %retval.0.i.i89 to ptr
  tail call void @__folio_mark_dirty(ptr noundef %26, ptr noundef nonnull %call57, i32 noundef 0) #14
  tail call void @unlock_page_memcg(ptr noundef %9) #14
  %27 = ptrtoint ptr %call57 to i32
  call void @__asan_load4_noabort(i32 %27)
  %28 = load ptr, ptr %call57, align 4
  tail call void @__mark_inode_dirty(ptr noundef %28, i32 noundef 4) #14
  br label %if.end65

if.end65:                                         ; preds = %if.then63, %if.end61.thread, %if.end50.if.end65_crit_edge, %do.end43.if.end65_crit_edge
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @__set_page_dirty_buffers(ptr noundef %page) #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %call = tail call ptr @page_mapping(ptr noundef %page) #14
  %tobool.not = icmp eq ptr %call, null
  br i1 %tobool.not, label %if.then, label %if.end, !prof !262

if.then:                                          ; preds = %entry
  %0 = getelementptr inbounds %struct.page, ptr %page, i32 0, i32 1
  %1 = ptrtoint ptr %0 to i32
  call void @__asan_load4_noabort(i32 %1)
  %2 = load volatile i32, ptr %0, align 4
  %and.i.i = and i32 %2, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i)
  %tobool.not.i.i = icmp eq i32 %and.i.i, 0
  br i1 %tobool.not.i.i, label %if.end.i.i, label %if.then.i.i, !prof !254

if.then.i.i:                                      ; preds = %if.then
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i.i = add i32 %2, -1
  br label %_compound_head.exit.i

if.end.i.i:                                       ; preds = %if.then
  call void @__sanitizer_cov_trace_pc() #16
  %3 = ptrtoint ptr %page to i32
  br label %_compound_head.exit.i

_compound_head.exit.i:                            ; preds = %if.end.i.i, %if.then.i.i
  %retval.0.i.i = phi i32 [ %sub.i.i, %if.then.i.i ], [ %3, %if.end.i.i ]
  %4 = inttoptr i32 %retval.0.i.i to ptr
  %5 = ptrtoint ptr %4 to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load volatile i32, ptr %4, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %6)
  %cmp.i.not.i = icmp eq i32 %6, -1
  %7 = ptrtoint ptr %0 to i32
  call void @__asan_load4_noabort(i32 %7)
  %8 = load volatile i32, ptr %0, align 4
  %and.i13.i = and i32 %8, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i13.i)
  %tobool.not.i14.i = icmp eq i32 %and.i13.i, 0
  br i1 %cmp.i.not.i, label %if.then.i, label %do.end8.i, !prof !262

if.then.i:                                        ; preds = %_compound_head.exit.i
  br i1 %tobool.not.i14.i, label %if.end.i17.i, label %if.then.i16.i, !prof !254

if.then.i16.i:                                    ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i15.i = add i32 %8, -1
  br label %_compound_head.exit19.i

if.end.i17.i:                                     ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #16
  %9 = ptrtoint ptr %page to i32
  br label %_compound_head.exit19.i

_compound_head.exit19.i:                          ; preds = %if.end.i17.i, %if.then.i16.i
  %retval.0.i18.i = phi i32 [ %sub.i15.i, %if.then.i16.i ], [ %9, %if.end.i17.i ]
  %10 = inttoptr i32 %retval.0.i18.i to ptr
  tail call void @dump_page(ptr noundef %10, ptr noundef nonnull @.str.14) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 420, 0\0A.popsection", ""() #14, !srcloc !288
  unreachable

do.end8.i:                                        ; preds = %_compound_head.exit.i
  br i1 %tobool.not.i14.i, label %if.end.i24.i, label %if.then.i23.i, !prof !254

if.then.i23.i:                                    ; preds = %do.end8.i
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i22.i = add i32 %8, -1
  br label %TestSetPageDirty.exit

if.end.i24.i:                                     ; preds = %do.end8.i
  call void @__sanitizer_cov_trace_pc() #16
  %11 = ptrtoint ptr %page to i32
  br label %TestSetPageDirty.exit

TestSetPageDirty.exit:                            ; preds = %if.end.i24.i, %if.then.i23.i
  %retval.0.i25.i = phi i32 [ %sub.i22.i, %if.then.i23.i ], [ %11, %if.end.i24.i ]
  %12 = inttoptr i32 %retval.0.i25.i to ptr
  %call10.i = tail call i32 @_test_and_set_bit(i32 noundef 3, ptr noundef %12) #14
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call10.i)
  %tobool5.not = icmp eq i32 %call10.i, 0
  %phi.cast = zext i1 %tobool5.not to i32
  br label %cleanup

if.end:                                           ; preds = %entry
  %private_lock = getelementptr inbounds %struct.address_space, ptr %call, i32 0, i32 12
  tail call void @_raw_spin_lock(ptr noundef %private_lock) #14
  %13 = ptrtoint ptr %page to i32
  call void @__asan_load4_noabort(i32 %13)
  %14 = load volatile i32, ptr %page, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %14)
  %cmp.i.not.i62 = icmp eq i32 %14, -1
  br i1 %cmp.i.not.i62, label %if.then.i63, label %PagePrivate.exit, !prof !262

if.then.i63:                                      ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %page, ptr noundef nonnull @.str.15) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 452, 0\0A.popsection", ""() #14, !srcloc !265
  unreachable

PagePrivate.exit:                                 ; preds = %if.end
  %15 = ptrtoint ptr %page to i32
  call void @__asan_load4_noabort(i32 %15)
  %16 = load volatile i32, ptr %page, align 4
  %17 = and i32 %16, 8192
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %17)
  %tobool9.not = icmp eq i32 %17, 0
  br i1 %tobool9.not, label %PagePrivate.exit.if.end32_crit_edge, label %if.then10

PagePrivate.exit.if.end32_crit_edge:              ; preds = %PagePrivate.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end32

if.then10:                                        ; preds = %PagePrivate.exit
  %18 = ptrtoint ptr %page to i32
  call void @__asan_load4_noabort(i32 %18)
  %19 = load volatile i32, ptr %page, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %19)
  %cmp.i.not.i64 = icmp eq i32 %19, -1
  br i1 %cmp.i.not.i64, label %if.then.i65, label %PagePrivate.exit68, !prof !262

if.then.i65:                                      ; preds = %if.then10
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %page, ptr noundef nonnull @.str.15) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 452, 0\0A.popsection", ""() #14, !srcloc !265
  unreachable

PagePrivate.exit68:                               ; preds = %if.then10
  %20 = ptrtoint ptr %page to i32
  call void @__asan_load4_noabort(i32 %20)
  %21 = load volatile i32, ptr %page, align 4
  %22 = and i32 %21, 8192
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %22)
  %tobool12.not = icmp eq i32 %22, 0
  br i1 %tobool12.not, label %do.body22, label %do.end28, !prof !262

do.body22:                                        ; preds = %PagePrivate.exit68
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22fs/buffer.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 626, 0\0A.popsection", ""() #14, !srcloc !289
  unreachable

do.end28:                                         ; preds = %PagePrivate.exit68
  %private = getelementptr inbounds %struct.page, ptr %page, i32 0, i32 1, i32 0, i32 3
  %23 = ptrtoint ptr %private to i32
  call void @__asan_load4_noabort(i32 %23)
  %24 = load i32, ptr %private, align 4
  %25 = inttoptr i32 %24 to ptr
  br label %do.body29

do.body29:                                        ; preds = %set_buffer_dirty.exit.do.body29_crit_edge, %do.end28
  %bh.0 = phi ptr [ %25, %do.end28 ], [ %30, %set_buffer_dirty.exit.do.body29_crit_edge ]
  %26 = ptrtoint ptr %bh.0 to i32
  call void @__asan_load4_noabort(i32 %26)
  %27 = load volatile i32, ptr %bh.0, align 4
  %28 = and i32 %27, 2
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %28)
  %tobool.not.i = icmp eq i32 %28, 0
  br i1 %tobool.not.i, label %if.then.i69, label %do.body29.set_buffer_dirty.exit_crit_edge

do.body29.set_buffer_dirty.exit_crit_edge:        ; preds = %do.body29
  call void @__sanitizer_cov_trace_pc() #16
  br label %set_buffer_dirty.exit

if.then.i69:                                      ; preds = %do.body29
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @_set_bit(i32 noundef 1, ptr noundef %bh.0) #14
  br label %set_buffer_dirty.exit

set_buffer_dirty.exit:                            ; preds = %if.then.i69, %do.body29.set_buffer_dirty.exit_crit_edge
  %b_this_page = getelementptr inbounds %struct.buffer_head, ptr %bh.0, i32 0, i32 1
  %29 = ptrtoint ptr %b_this_page to i32
  call void @__asan_load4_noabort(i32 %29)
  %30 = load ptr, ptr %b_this_page, align 4
  %cmp.not = icmp eq ptr %30, %25
  br i1 %cmp.not, label %set_buffer_dirty.exit.if.end32_crit_edge, label %set_buffer_dirty.exit.do.body29_crit_edge

set_buffer_dirty.exit.do.body29_crit_edge:        ; preds = %set_buffer_dirty.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.body29

set_buffer_dirty.exit.if.end32_crit_edge:         ; preds = %set_buffer_dirty.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end32

if.end32:                                         ; preds = %set_buffer_dirty.exit.if.end32_crit_edge, %PagePrivate.exit.if.end32_crit_edge
  tail call void @lock_page_memcg(ptr noundef %page) #14
  %31 = getelementptr inbounds %struct.page, ptr %page, i32 0, i32 1
  %32 = ptrtoint ptr %31 to i32
  call void @__asan_load4_noabort(i32 %32)
  %33 = load volatile i32, ptr %31, align 4
  %and.i.i70 = and i32 %33, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i70)
  %tobool.not.i.i71 = icmp eq i32 %and.i.i70, 0
  br i1 %tobool.not.i.i71, label %if.end.i.i74, label %if.then.i.i73, !prof !254

if.then.i.i73:                                    ; preds = %if.end32
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i.i72 = add i32 %33, -1
  br label %_compound_head.exit.i79

if.end.i.i74:                                     ; preds = %if.end32
  call void @__sanitizer_cov_trace_pc() #16
  %34 = ptrtoint ptr %page to i32
  br label %_compound_head.exit.i79

_compound_head.exit.i79:                          ; preds = %if.end.i.i74, %if.then.i.i73
  %retval.0.i.i75 = phi i32 [ %sub.i.i72, %if.then.i.i73 ], [ %34, %if.end.i.i74 ]
  %35 = inttoptr i32 %retval.0.i.i75 to ptr
  %36 = ptrtoint ptr %35 to i32
  call void @__asan_load4_noabort(i32 %36)
  %37 = load volatile i32, ptr %35, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %37)
  %cmp.i.not.i76 = icmp eq i32 %37, -1
  %38 = ptrtoint ptr %31 to i32
  call void @__asan_load4_noabort(i32 %38)
  %39 = load volatile i32, ptr %31, align 4
  %and.i13.i77 = and i32 %39, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i13.i77)
  %tobool.not.i14.i78 = icmp eq i32 %and.i13.i77, 0
  br i1 %cmp.i.not.i76, label %if.then.i80, label %do.end8.i86, !prof !262

if.then.i80:                                      ; preds = %_compound_head.exit.i79
  br i1 %tobool.not.i14.i78, label %if.end.i17.i83, label %if.then.i16.i82, !prof !254

if.then.i16.i82:                                  ; preds = %if.then.i80
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i15.i81 = add i32 %39, -1
  br label %_compound_head.exit19.i85

if.end.i17.i83:                                   ; preds = %if.then.i80
  call void @__sanitizer_cov_trace_pc() #16
  %40 = ptrtoint ptr %page to i32
  br label %_compound_head.exit19.i85

_compound_head.exit19.i85:                        ; preds = %if.end.i17.i83, %if.then.i16.i82
  %retval.0.i18.i84 = phi i32 [ %sub.i15.i81, %if.then.i16.i82 ], [ %40, %if.end.i17.i83 ]
  %41 = inttoptr i32 %retval.0.i18.i84 to ptr
  tail call void @dump_page(ptr noundef %41, ptr noundef nonnull @.str.14) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 420, 0\0A.popsection", ""() #14, !srcloc !288
  unreachable

do.end8.i86:                                      ; preds = %_compound_head.exit.i79
  br i1 %tobool.not.i14.i78, label %if.end.i24.i89, label %if.then.i23.i88, !prof !254

if.then.i23.i88:                                  ; preds = %do.end8.i86
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i22.i87 = add i32 %39, -1
  br label %TestSetPageDirty.exit92

if.end.i24.i89:                                   ; preds = %do.end8.i86
  call void @__sanitizer_cov_trace_pc() #16
  %42 = ptrtoint ptr %page to i32
  br label %TestSetPageDirty.exit92

TestSetPageDirty.exit92:                          ; preds = %if.end.i24.i89, %if.then.i23.i88
  %retval.0.i25.i90 = phi i32 [ %sub.i22.i87, %if.then.i23.i88 ], [ %42, %if.end.i24.i89 ]
  %43 = inttoptr i32 %retval.0.i25.i90 to ptr
  %call10.i91 = tail call i32 @_test_and_set_bit(i32 noundef 3, ptr noundef %43) #14
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call10.i91)
  %tobool34.not = icmp eq i32 %call10.i91, 0
  tail call void @_raw_spin_unlock(ptr noundef %private_lock) #14
  br i1 %tobool34.not, label %if.then39, label %if.end43.critedge

if.then39:                                        ; preds = %TestSetPageDirty.exit92
  %44 = ptrtoint ptr %31 to i32
  call void @__asan_load4_noabort(i32 %44)
  %45 = load volatile i32, ptr %31, align 4
  %and.i.i93 = and i32 %45, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i93)
  %tobool.not.i.i94 = icmp eq i32 %and.i.i93, 0
  br i1 %tobool.not.i.i94, label %if.end.i.i97, label %if.then.i.i96, !prof !254

if.then.i.i96:                                    ; preds = %if.then39
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i.i95 = add i32 %45, -1
  br label %__set_page_dirty.exit

if.end.i.i97:                                     ; preds = %if.then39
  call void @__sanitizer_cov_trace_pc() #16
  %46 = ptrtoint ptr %page to i32
  br label %__set_page_dirty.exit

__set_page_dirty.exit:                            ; preds = %if.end.i.i97, %if.then.i.i96
  %retval.0.i.i98 = phi i32 [ %sub.i.i95, %if.then.i.i96 ], [ %46, %if.end.i.i97 ]
  %47 = inttoptr i32 %retval.0.i.i98 to ptr
  tail call void @__folio_mark_dirty(ptr noundef %47, ptr noundef nonnull %call, i32 noundef 1) #14
  tail call void @unlock_page_memcg(ptr noundef %page) #14
  %48 = ptrtoint ptr %call to i32
  call void @__asan_load4_noabort(i32 %48)
  %49 = load ptr, ptr %call, align 4
  tail call void @__mark_inode_dirty(ptr noundef %49, i32 noundef 4) #14
  br label %cleanup

if.end43.critedge:                                ; preds = %TestSetPageDirty.exit92
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @unlock_page_memcg(ptr noundef %page) #14
  br label %cleanup

cleanup:                                          ; preds = %if.end43.critedge, %__set_page_dirty.exit, %TestSetPageDirty.exit
  %retval.0.in = phi i32 [ %phi.cast, %TestSetPageDirty.exit ], [ 0, %if.end43.critedge ], [ 1, %__set_page_dirty.exit ]
  ret i32 %retval.0.in
}

; Function Attrs: null_pointer_is_valid
declare dso_local ptr @page_mapping(ptr noundef) local_unnamed_addr #1

; Function Attrs: null_pointer_is_valid
declare dso_local void @lock_page_memcg(ptr noundef) local_unnamed_addr #1

; Function Attrs: null_pointer_is_valid
declare dso_local void @unlock_page_memcg(ptr noundef) local_unnamed_addr #1

; Function Attrs: null_pointer_is_valid
declare dso_local void @__mark_inode_dirty(ptr noundef, i32 noundef) local_unnamed_addr #1

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local void @invalidate_inode_buffers(ptr noundef %inode) #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %private_list.i = getelementptr inbounds %struct.inode, ptr %inode, i32 0, i32 46, i32 13
  %0 = ptrtoint ptr %private_list.i to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load volatile ptr, ptr %private_list.i, align 4
  %cmp.i.i.not = icmp eq ptr %1, %private_list.i
  br i1 %cmp.i.i.not, label %entry.if.end_crit_edge, label %if.then

entry.if.end_crit_edge:                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end

if.then:                                          ; preds = %entry
  %private_data = getelementptr inbounds %struct.inode, ptr %inode, i32 0, i32 46, i32 14
  %2 = ptrtoint ptr %private_data to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load ptr, ptr %private_data, align 4
  %private_lock = getelementptr inbounds %struct.address_space, ptr %3, i32 0, i32 12
  tail call void @_raw_spin_lock(ptr noundef %private_lock) #14
  %4 = ptrtoint ptr %private_list.i to i32
  call void @__asan_load4_noabort(i32 %4)
  %5 = load volatile ptr, ptr %private_list.i, align 4
  %cmp.i.not8 = icmp eq ptr %5, %private_list.i
  br i1 %cmp.i.not8, label %if.then.while.end_crit_edge, label %if.then.while.body_crit_edge

if.then.while.body_crit_edge:                     ; preds = %if.then
  br label %while.body

if.then.while.end_crit_edge:                      ; preds = %if.then
  call void @__sanitizer_cov_trace_pc() #16
  br label %while.end

while.body:                                       ; preds = %__remove_assoc_queue.exit.while.body_crit_edge, %if.then.while.body_crit_edge
  %6 = phi ptr [ %19, %__remove_assoc_queue.exit.while.body_crit_edge ], [ %5, %if.then.while.body_crit_edge ]
  %call.i.i.i = tail call zeroext i1 @__list_del_entry_valid(ptr noundef %6) #14
  br i1 %call.i.i.i, label %if.end.i.i.i, label %while.body.list_del_init.exit.i_crit_edge

while.body.list_del_init.exit.i_crit_edge:        ; preds = %while.body
  call void @__sanitizer_cov_trace_pc() #16
  br label %list_del_init.exit.i

if.end.i.i.i:                                     ; preds = %while.body
  call void @__sanitizer_cov_trace_pc() #16
  %prev.i.i.i = getelementptr i8, ptr %6, i32 4
  %7 = ptrtoint ptr %prev.i.i.i to i32
  call void @__asan_load4_noabort(i32 %7)
  %8 = load ptr, ptr %prev.i.i.i, align 4
  %9 = ptrtoint ptr %6 to i32
  call void @__asan_load4_noabort(i32 %9)
  %10 = load ptr, ptr %6, align 4
  %prev1.i.i.i.i = getelementptr inbounds %struct.list_head, ptr %10, i32 0, i32 1
  %11 = ptrtoint ptr %prev1.i.i.i.i to i32
  call void @__asan_store4_noabort(i32 %11)
  store ptr %8, ptr %prev1.i.i.i.i, align 4
  %12 = ptrtoint ptr %8 to i32
  call void @__asan_store4_noabort(i32 %12)
  store volatile ptr %10, ptr %8, align 4
  br label %list_del_init.exit.i

list_del_init.exit.i:                             ; preds = %if.end.i.i.i, %while.body.list_del_init.exit.i_crit_edge
  %13 = ptrtoint ptr %6 to i32
  call void @__asan_store4_noabort(i32 %13)
  store volatile ptr %6, ptr %6, align 4
  %prev.i3.i.i = getelementptr i8, ptr %6, i32 4
  %14 = ptrtoint ptr %prev.i3.i.i to i32
  call void @__asan_store4_noabort(i32 %14)
  store ptr %6, ptr %prev.i3.i.i, align 4
  %b_assoc_map.i = getelementptr i8, ptr %6, i32 8
  %15 = ptrtoint ptr %b_assoc_map.i to i32
  call void @__asan_load4_noabort(i32 %15)
  %16 = load ptr, ptr %b_assoc_map.i, align 4
  %tobool.not.i = icmp eq ptr %16, null
  br i1 %tobool.not.i, label %do.end.i, label %list_del_init.exit.i.__remove_assoc_queue.exit_crit_edge, !prof !262

list_del_init.exit.i.__remove_assoc_queue.exit_crit_edge: ; preds = %list_del_init.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %__remove_assoc_queue.exit

do.end.i:                                         ; preds = %list_del_init.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.4, i32 noundef 480, i32 noundef 9, ptr noundef null) #14
  br label %__remove_assoc_queue.exit

__remove_assoc_queue.exit:                        ; preds = %do.end.i, %list_del_init.exit.i.__remove_assoc_queue.exit_crit_edge
  %17 = ptrtoint ptr %b_assoc_map.i to i32
  call void @__asan_store4_noabort(i32 %17)
  store ptr null, ptr %b_assoc_map.i, align 4
  %18 = ptrtoint ptr %private_list.i to i32
  call void @__asan_load4_noabort(i32 %18)
  %19 = load volatile ptr, ptr %private_list.i, align 4
  %cmp.i.not = icmp eq ptr %19, %private_list.i
  br i1 %cmp.i.not, label %__remove_assoc_queue.exit.while.end_crit_edge, label %__remove_assoc_queue.exit.while.body_crit_edge

__remove_assoc_queue.exit.while.body_crit_edge:   ; preds = %__remove_assoc_queue.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %while.body

__remove_assoc_queue.exit.while.end_crit_edge:    ; preds = %__remove_assoc_queue.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %while.end

while.end:                                        ; preds = %__remove_assoc_queue.exit.while.end_crit_edge, %if.then.while.end_crit_edge
  tail call void @_raw_spin_unlock(ptr noundef %private_lock) #14
  br label %if.end

if.end:                                           ; preds = %while.end, %entry.if.end_crit_edge
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @remove_inode_buffers(ptr noundef %inode) local_unnamed_addr #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %private_list.i = getelementptr inbounds %struct.inode, ptr %inode, i32 0, i32 46, i32 13
  %0 = ptrtoint ptr %private_list.i to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load volatile ptr, ptr %private_list.i, align 4
  %cmp.i.i.not = icmp eq ptr %1, %private_list.i
  br i1 %cmp.i.i.not, label %entry.if.end7_crit_edge, label %if.then

entry.if.end7_crit_edge:                          ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end7

if.then:                                          ; preds = %entry
  %private_data = getelementptr inbounds %struct.inode, ptr %inode, i32 0, i32 46, i32 14
  %2 = ptrtoint ptr %private_data to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load ptr, ptr %private_data, align 4
  %private_lock = getelementptr inbounds %struct.address_space, ptr %3, i32 0, i32 12
  tail call void @_raw_spin_lock(ptr noundef %private_lock) #14
  %4 = ptrtoint ptr %private_list.i to i32
  call void @__asan_load4_noabort(i32 %4)
  %5 = load volatile ptr, ptr %private_list.i, align 4
  %cmp.i.not17 = icmp eq ptr %5, %private_list.i
  br i1 %cmp.i.not17, label %if.then.while.end_crit_edge, label %if.then.while.body_crit_edge

if.then.while.body_crit_edge:                     ; preds = %if.then
  br label %while.body

if.then.while.end_crit_edge:                      ; preds = %if.then
  call void @__sanitizer_cov_trace_pc() #16
  br label %while.end

while.body:                                       ; preds = %cleanup.while.body_crit_edge, %if.then.while.body_crit_edge
  %6 = phi ptr [ %22, %cleanup.while.body_crit_edge ], [ %5, %if.then.while.body_crit_edge ]
  %add.ptr = getelementptr i8, ptr %6, i32 -44
  %7 = ptrtoint ptr %add.ptr to i32
  call void @__asan_load4_noabort(i32 %7)
  %8 = load volatile i32, ptr %add.ptr, align 4
  %9 = and i32 %8, 2
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %9)
  %tobool4.not = icmp eq i32 %9, 0
  br i1 %tobool4.not, label %if.end, label %while.body.while.end_crit_edge

while.body.while.end_crit_edge:                   ; preds = %while.body
  call void @__sanitizer_cov_trace_pc() #16
  br label %while.end

if.end:                                           ; preds = %while.body
  %call.i.i.i = tail call zeroext i1 @__list_del_entry_valid(ptr noundef %6) #14
  br i1 %call.i.i.i, label %if.end.i.i.i, label %if.end.list_del_init.exit.i_crit_edge

if.end.list_del_init.exit.i_crit_edge:            ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #16
  br label %list_del_init.exit.i

if.end.i.i.i:                                     ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #16
  %prev.i.i.i = getelementptr i8, ptr %6, i32 4
  %10 = ptrtoint ptr %prev.i.i.i to i32
  call void @__asan_load4_noabort(i32 %10)
  %11 = load ptr, ptr %prev.i.i.i, align 4
  %12 = ptrtoint ptr %6 to i32
  call void @__asan_load4_noabort(i32 %12)
  %13 = load ptr, ptr %6, align 4
  %prev1.i.i.i.i = getelementptr inbounds %struct.list_head, ptr %13, i32 0, i32 1
  %14 = ptrtoint ptr %prev1.i.i.i.i to i32
  call void @__asan_store4_noabort(i32 %14)
  store ptr %11, ptr %prev1.i.i.i.i, align 4
  %15 = ptrtoint ptr %11 to i32
  call void @__asan_store4_noabort(i32 %15)
  store volatile ptr %13, ptr %11, align 4
  br label %list_del_init.exit.i

list_del_init.exit.i:                             ; preds = %if.end.i.i.i, %if.end.list_del_init.exit.i_crit_edge
  %16 = ptrtoint ptr %6 to i32
  call void @__asan_store4_noabort(i32 %16)
  store volatile ptr %6, ptr %6, align 4
  %prev.i3.i.i = getelementptr i8, ptr %6, i32 4
  %17 = ptrtoint ptr %prev.i3.i.i to i32
  call void @__asan_store4_noabort(i32 %17)
  store ptr %6, ptr %prev.i3.i.i, align 4
  %b_assoc_map.i = getelementptr i8, ptr %6, i32 8
  %18 = ptrtoint ptr %b_assoc_map.i to i32
  call void @__asan_load4_noabort(i32 %18)
  %19 = load ptr, ptr %b_assoc_map.i, align 4
  %tobool.not.i = icmp eq ptr %19, null
  br i1 %tobool.not.i, label %do.end.i, label %list_del_init.exit.i.cleanup_crit_edge, !prof !262

list_del_init.exit.i.cleanup_crit_edge:           ; preds = %list_del_init.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %cleanup

do.end.i:                                         ; preds = %list_del_init.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.4, i32 noundef 480, i32 noundef 9, ptr noundef null) #14
  br label %cleanup

cleanup:                                          ; preds = %do.end.i, %list_del_init.exit.i.cleanup_crit_edge
  %20 = ptrtoint ptr %b_assoc_map.i to i32
  call void @__asan_store4_noabort(i32 %20)
  store ptr null, ptr %b_assoc_map.i, align 4
  %21 = ptrtoint ptr %private_list.i to i32
  call void @__asan_load4_noabort(i32 %21)
  %22 = load volatile ptr, ptr %private_list.i, align 4
  %cmp.i.not = icmp eq ptr %22, %private_list.i
  br i1 %cmp.i.not, label %cleanup.while.end_crit_edge, label %cleanup.while.body_crit_edge

cleanup.while.body_crit_edge:                     ; preds = %cleanup
  call void @__sanitizer_cov_trace_pc() #16
  br label %while.body

cleanup.while.end_crit_edge:                      ; preds = %cleanup
  call void @__sanitizer_cov_trace_pc() #16
  br label %while.end

while.end:                                        ; preds = %cleanup.while.end_crit_edge, %while.body.while.end_crit_edge, %if.then.while.end_crit_edge
  %ret.2 = phi i32 [ 1, %if.then.while.end_crit_edge ], [ 0, %while.body.while.end_crit_edge ], [ 1, %cleanup.while.end_crit_edge ]
  tail call void @_raw_spin_unlock(ptr noundef %private_lock) #14
  br label %if.end7

if.end7:                                          ; preds = %while.end, %entry.if.end7_crit_edge
  %ret.3 = phi i32 [ %ret.2, %while.end ], [ 1, %entry.if.end7_crit_edge ]
  ret i32 %ret.3
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local ptr @alloc_page_buffers(ptr noundef %page, i32 noundef %size, i1 noundef zeroext %retry) #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %spec.select = select i1 %retry, i32 4230208, i32 4197440
  %0 = getelementptr inbounds %struct.page, ptr %page, i32 0, i32 1
  %1 = ptrtoint ptr %0 to i32
  call void @__asan_load4_noabort(i32 %1)
  %2 = load volatile i32, ptr %0, align 4
  %and.i.i = and i32 %2, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i)
  %tobool.not.i.i = icmp eq i32 %and.i.i, 0
  br i1 %tobool.not.i.i, label %if.end.i.i, label %if.then.i.i, !prof !254

if.then.i.i:                                      ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i.i = add i32 %2, -1
  br label %_compound_head.exit.i

if.end.i.i:                                       ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  %3 = ptrtoint ptr %page to i32
  br label %_compound_head.exit.i

_compound_head.exit.i:                            ; preds = %if.end.i.i, %if.then.i.i
  %retval.0.i.i = phi i32 [ %sub.i.i, %if.then.i.i ], [ %3, %if.end.i.i ]
  %4 = inttoptr i32 %retval.0.i.i to ptr
  %5 = getelementptr inbounds %struct.page, ptr %4, i32 0, i32 1
  %6 = ptrtoint ptr %5 to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load volatile i32, ptr %5, align 4
  %and.i.i.i.i = and i32 %7, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i.i.i)
  %tobool.not.i.i.i = icmp eq i32 %and.i.i.i.i, 0
  br i1 %tobool.not.i.i.i, label %do.body7.i.i.i, label %if.then.i.i.i, !prof !254

if.then.i.i.i:                                    ; preds = %_compound_head.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %4, ptr noundef nonnull @.str.19) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/memcontrol.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 537, 0\0A.popsection", ""() #14, !srcloc !290
  unreachable

do.body7.i.i.i:                                   ; preds = %_compound_head.exit.i
  %memcg_data.i.i.i = getelementptr inbounds %struct.anon.113, ptr %4, i32 0, i32 7
  %8 = ptrtoint ptr %memcg_data.i.i.i to i32
  call void @__asan_load4_noabort(i32 %8)
  %9 = load i32, ptr %memcg_data.i.i.i, align 4
  %and.i.i.i = and i32 %9, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i.i)
  %tobool8.not.i.i.i = icmp eq i32 %and.i.i.i, 0
  br i1 %tobool8.not.i.i.i, label %folio_memcg_kmem.exit.i.i, label %if.then15.i.i.i, !prof !254

if.then15.i.i.i:                                  ; preds = %do.body7.i.i.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %4, ptr noundef nonnull @.str.20) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/memcontrol.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 538, 0\0A.popsection", ""() #14, !srcloc !291
  unreachable

folio_memcg_kmem.exit.i.i:                        ; preds = %do.body7.i.i.i
  %and23.i.i.i = and i32 %9, 2
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and23.i.i.i)
  %tobool24.i.not.i.i = icmp eq i32 %and23.i.i.i, 0
  %10 = ptrtoint ptr %5 to i32
  call void @__asan_load4_noabort(i32 %10)
  %11 = load volatile i32, ptr %5, align 4
  %and.i.i.i.i9.i.i = and i32 %11, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i.i.i9.i.i)
  %tobool.not.i.i.i10.i.i = icmp eq i32 %and.i.i.i.i9.i.i, 0
  br i1 %tobool24.i.not.i.i, label %if.end.i3.i, label %if.then.i2.i

if.then.i2.i:                                     ; preds = %folio_memcg_kmem.exit.i.i
  br i1 %tobool.not.i.i.i10.i.i, label %folio_test_slab.exit.i.i.i, label %if.then.i.i.i.i.i, !prof !254

if.then.i.i.i.i.i:                                ; preds = %if.then.i2.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %4, ptr noundef nonnull @.str.24) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 260, 0\0A.popsection", ""() #14, !srcloc !292
  unreachable

folio_test_slab.exit.i.i.i:                       ; preds = %if.then.i2.i
  %12 = ptrtoint ptr %4 to i32
  call void @__asan_load4_noabort(i32 %12)
  %13 = load volatile i32, ptr %4, align 4
  %14 = and i32 %13, 512
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %14)
  %tobool.i.not.i.i.i = icmp eq i32 %14, 0
  br i1 %tobool.i.not.i.i.i, label %__folio_objcg.exit.i.i, label %if.then.i6.i.i, !prof !254

if.then.i6.i.i:                                   ; preds = %folio_test_slab.exit.i.i.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %4, ptr noundef nonnull @.str.21) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/memcontrol.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 417, 0\0A.popsection", ""() #14, !srcloc !293
  unreachable

__folio_objcg.exit.i.i:                           ; preds = %folio_test_slab.exit.i.i.i
  call void @__sanitizer_cov_trace_pc() #16
  %and48.i.i.i = and i32 %9, -4
  %15 = inttoptr i32 %and48.i.i.i to ptr
  %memcg.i.i.i = getelementptr inbounds %struct.obj_cgroup, ptr %15, i32 0, i32 1
  %16 = ptrtoint ptr %memcg.i.i.i to i32
  call void @__asan_load4_noabort(i32 %16)
  %17 = load volatile ptr, ptr %memcg.i.i.i, align 4
  br label %page_memcg.exit

if.end.i3.i:                                      ; preds = %folio_memcg_kmem.exit.i.i
  br i1 %tobool.not.i.i.i10.i.i, label %folio_test_slab.exit.i13.i.i, label %if.then.i.i.i11.i.i, !prof !254

if.then.i.i.i11.i.i:                              ; preds = %if.end.i3.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %4, ptr noundef nonnull @.str.24) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 260, 0\0A.popsection", ""() #14, !srcloc !292
  unreachable

folio_test_slab.exit.i13.i.i:                     ; preds = %if.end.i3.i
  %18 = ptrtoint ptr %4 to i32
  call void @__asan_load4_noabort(i32 %18)
  %19 = load volatile i32, ptr %4, align 4
  %20 = and i32 %19, 512
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %20)
  %tobool.i.not.i12.i.i = icmp eq i32 %20, 0
  br i1 %tobool.i.not.i12.i.i, label %__folio_memcg.exit.i.i, label %if.then.i14.i.i, !prof !254

if.then.i14.i.i:                                  ; preds = %folio_test_slab.exit.i13.i.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %4, ptr noundef nonnull @.str.21) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/memcontrol.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 396, 0\0A.popsection", ""() #14, !srcloc !294
  unreachable

__folio_memcg.exit.i.i:                           ; preds = %folio_test_slab.exit.i13.i.i
  call void @__sanitizer_cov_trace_pc() #16
  %and46.i.i.i = and i32 %9, -4
  %21 = inttoptr i32 %and46.i.i.i to ptr
  br label %page_memcg.exit

page_memcg.exit:                                  ; preds = %__folio_memcg.exit.i.i, %__folio_objcg.exit.i.i
  %retval.0.i4.i = phi ptr [ %17, %__folio_objcg.exit.i.i ], [ %21, %__folio_memcg.exit.i.i ]
  %22 = tail call i32 @llvm.read_register.i32(metadata !243) #14
  %and.i.i.i27 = and i32 %22, -16384
  %23 = inttoptr i32 %and.i.i.i27 to ptr
  %preempt_count.i.i = getelementptr inbounds %struct.thread_info, ptr %23, i32 0, i32 1
  %24 = ptrtoint ptr %preempt_count.i.i to i32
  call void @__asan_load4_noabort(i32 %24)
  %25 = load volatile i32, ptr %preempt_count.i.i, align 4
  %and.i = and i32 %25, 15728640
  %26 = tail call i32 @llvm.read_register.i32(metadata !243) #14
  %and.i.i78.i = and i32 %26, -16384
  %27 = inttoptr i32 %and.i.i78.i to ptr
  %preempt_count.i79.i = getelementptr inbounds %struct.thread_info, ptr %27, i32 0, i32 1
  %28 = ptrtoint ptr %preempt_count.i79.i to i32
  call void @__asan_load4_noabort(i32 %28)
  %29 = load volatile i32, ptr %preempt_count.i79.i, align 4
  %and2.i = and i32 %29, 983040
  %or.i = or i32 %and2.i, %and.i
  %30 = tail call i32 @llvm.read_register.i32(metadata !243) #14
  %and.i.i80.i = and i32 %30, -16384
  %31 = inttoptr i32 %and.i.i80.i to ptr
  %preempt_count.i81.i = getelementptr inbounds %struct.thread_info, ptr %31, i32 0, i32 1
  %32 = ptrtoint ptr %preempt_count.i81.i to i32
  call void @__asan_load4_noabort(i32 %32)
  %33 = load volatile i32, ptr %preempt_count.i81.i, align 4
  %and5.i = and i32 %33, 256
  %or6.i = or i32 %or.i, %and5.i
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %or6.i)
  %tobool.not.i = icmp eq i32 %or6.i, 0
  %34 = tail call i32 @llvm.read_register.i32(metadata !243) #14
  %and.i85.i = and i32 %34, -16384
  %35 = inttoptr i32 %and.i85.i to ptr
  br i1 %tobool.not.i, label %if.else.i, label %if.then.i

if.then.i:                                        ; preds = %page_memcg.exit
  %preempt_count.i.i.i = getelementptr inbounds %struct.thread_info, ptr %35, i32 0, i32 1
  %36 = ptrtoint ptr %preempt_count.i.i.i to i32
  call void @__asan_load4_noabort(i32 %36)
  %37 = load volatile i32, ptr %preempt_count.i.i.i, align 4
  %add.i.i = add i32 %37, 1
  store volatile i32 %add.i.i, ptr %preempt_count.i.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #14, !srcloc !295
  %38 = tail call i32 @llvm.read_register.i32(metadata !243) #14
  %and.i.i28 = and i32 %38, -16384
  %39 = inttoptr i32 %and.i.i28 to ptr
  %cpu.i = getelementptr inbounds %struct.thread_info, ptr %39, i32 0, i32 3
  %40 = ptrtoint ptr %cpu.i to i32
  call void @__asan_load4_noabort(i32 %40)
  %41 = load i32, ptr %cpu.i, align 4
  %arrayidx.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %41
  %42 = ptrtoint ptr %arrayidx.i to i32
  call void @__asan_load4_noabort(i32 %42)
  %43 = load i32, ptr %arrayidx.i, align 4
  %add.i = add i32 %43, ptrtoint (ptr @int_active_memcg to i32)
  %44 = inttoptr i32 %add.i to ptr
  %45 = ptrtoint ptr %44 to i32
  call void @__asan_load4_noabort(i32 %45)
  %46 = load volatile ptr, ptr %44, align 4
  tail call void asm sideeffect "", "~{memory}"() #14, !srcloc !296
  %47 = tail call i32 @llvm.read_register.i32(metadata !243) #14
  %and.i.i.i82.i = and i32 %47, -16384
  %48 = inttoptr i32 %and.i.i.i82.i to ptr
  %preempt_count.i.i83.i = getelementptr inbounds %struct.thread_info, ptr %48, i32 0, i32 1
  %49 = ptrtoint ptr %preempt_count.i.i83.i to i32
  call void @__asan_load4_noabort(i32 %49)
  %50 = load volatile i32, ptr %preempt_count.i.i83.i, align 4
  %sub.i.i29 = add i32 %50, -1
  store volatile i32 %sub.i.i29, ptr %preempt_count.i.i83.i, align 4
  %51 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ arch_local_irq_save\0A\09cpsid\09i", "=r,~{memory},~{cc}"() #14, !srcloc !297
  %52 = ptrtoint ptr %cpu.i to i32
  call void @__asan_load4_noabort(i32 %52)
  %53 = load i32, ptr %cpu.i, align 4
  %arrayidx47.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %53
  %54 = ptrtoint ptr %arrayidx47.i to i32
  call void @__asan_load4_noabort(i32 %54)
  %55 = load i32, ptr %arrayidx47.i, align 4
  %add48.i = add i32 %55, ptrtoint (ptr @int_active_memcg to i32)
  %56 = inttoptr i32 %add48.i to ptr
  %57 = ptrtoint ptr %56 to i32
  call void @__asan_store4_noabort(i32 %57)
  store ptr %retval.0.i4.i, ptr %56, align 4
  %58 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ local_save_flags", "=r,~{memory},~{cc}"() #14, !srcloc !280
  %and.i.i84.i = and i32 %58, 128
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i84.i)
  %tobool59.not.i = icmp eq i32 %and.i.i84.i, 0
  br i1 %tobool59.not.i, label %if.then63.i, label %if.then.i.do.end65.i_crit_edge, !prof !262

if.then.i.do.end65.i_crit_edge:                   ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.end65.i

if.then63.i:                                      ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @warn_bogus_irq_restore() #14
  br label %do.end65.i

do.end65.i:                                       ; preds = %if.then63.i, %if.then.i.do.end65.i_crit_edge
  tail call void asm sideeffect "\09msr\09cpsr_c, $0\09@ local_irq_restore", "r,~{memory},~{cc}"(i32 %51) #14, !srcloc !298
  br label %set_active_memcg.exit

if.else.i:                                        ; preds = %page_memcg.exit
  call void @__sanitizer_cov_trace_pc() #16
  %task.i = getelementptr inbounds %struct.thread_info, ptr %35, i32 0, i32 2
  %59 = ptrtoint ptr %task.i to i32
  call void @__asan_load4_noabort(i32 %59)
  %60 = load ptr, ptr %task.i, align 8
  %active_memcg.i = getelementptr inbounds %struct.task_struct, ptr %60, i32 0, i32 206
  %61 = ptrtoint ptr %active_memcg.i to i32
  call void @__asan_load4_noabort(i32 %61)
  %62 = load ptr, ptr %active_memcg.i, align 8
  store ptr %retval.0.i4.i, ptr %active_memcg.i, align 8
  br label %set_active_memcg.exit

set_active_memcg.exit:                            ; preds = %if.else.i, %do.end65.i
  %old.0.i = phi ptr [ %46, %do.end65.i ], [ %62, %if.else.i ]
  %sub68 = sub i32 4096, %size
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %sub68)
  %cmp69 = icmp sgt i32 %sub68, -1
  br i1 %cmp69, label %set_active_memcg.exit.while.body_crit_edge, label %set_active_memcg.exit.out_crit_edge

set_active_memcg.exit.out_crit_edge:              ; preds = %set_active_memcg.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %out

set_active_memcg.exit.while.body_crit_edge:       ; preds = %set_active_memcg.exit
  br label %while.body

while.body:                                       ; preds = %set_bh_page.exit.while.body_crit_edge, %set_active_memcg.exit.while.body_crit_edge
  %sub71 = phi i32 [ %sub, %set_bh_page.exit.while.body_crit_edge ], [ %sub68, %set_active_memcg.exit.while.body_crit_edge ]
  %head.070 = phi ptr [ %call2, %set_bh_page.exit.while.body_crit_edge ], [ null, %set_active_memcg.exit.while.body_crit_edge ]
  %call2 = tail call ptr @alloc_buffer_head(i32 noundef %spec.select)
  %tobool3.not = icmp eq ptr %call2, null
  br i1 %tobool3.not, label %no_grow, label %if.end5

if.end5:                                          ; preds = %while.body
  %b_this_page = getelementptr inbounds %struct.buffer_head, ptr %call2, i32 0, i32 1
  %63 = ptrtoint ptr %b_this_page to i32
  call void @__asan_store4_noabort(i32 %63)
  store ptr %head.070, ptr %b_this_page, align 4
  %b_blocknr = getelementptr inbounds %struct.buffer_head, ptr %call2, i32 0, i32 3
  %64 = ptrtoint ptr %b_blocknr to i32
  call void @__asan_store8_noabort(i32 %64)
  store i64 -1, ptr %b_blocknr, align 8
  %b_size = getelementptr inbounds %struct.buffer_head, ptr %call2, i32 0, i32 4
  %65 = ptrtoint ptr %b_size to i32
  call void @__asan_store4_noabort(i32 %65)
  store i32 %size, ptr %b_size, align 8
  %b_page.i = getelementptr inbounds %struct.buffer_head, ptr %call2, i32 0, i32 2
  %66 = ptrtoint ptr %b_page.i to i32
  call void @__asan_store4_noabort(i32 %66)
  store ptr %page, ptr %b_page.i, align 8
  call void @__sanitizer_cov_trace_const_cmp4(i32 4095, i32 %sub71)
  %cmp.i = icmp ugt i32 %sub71, 4095
  br i1 %cmp.i, label %do.body2.i, label %do.end5.i, !prof !262

do.body2.i:                                       ; preds = %if.end5
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22fs/buffer.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 1446, 0\0A.popsection", ""() #14, !srcloc !299
  unreachable

do.end5.i:                                        ; preds = %if.end5
  %67 = ptrtoint ptr %page to i32
  call void @__asan_load4_noabort(i32 %67)
  %68 = load i32, ptr %page, align 4
  %shr.i.i = lshr i32 %68, 30
  %69 = zext i32 %shr.i.i to i64
  call void @__sanitizer_cov_trace_switch(i64 %69, ptr @__sancov_gen_cov_switch_values)
  switch i32 %shr.i.i, label %do.end5.i.if.else.i30_crit_edge [
    i32 2, label %do.end5.i.if.then8.i_crit_edge
    i32 3, label %is_highmem_idx.exit.i
  ]

do.end5.i.if.then8.i_crit_edge:                   ; preds = %do.end5.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.then8.i

do.end5.i.if.else.i30_crit_edge:                  ; preds = %do.end5.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.else.i30

is_highmem_idx.exit.i:                            ; preds = %do.end5.i
  call void @__asan_load4_noabort(i32 ptrtoint (ptr @movable_zone to i32))
  %70 = load i32, ptr @movable_zone, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 2, i32 %70)
  %cmp2.i.not.i = icmp eq i32 %70, 2
  br i1 %cmp2.i.not.i, label %is_highmem_idx.exit.i.if.then8.i_crit_edge, label %is_highmem_idx.exit.i.if.else.i30_crit_edge

is_highmem_idx.exit.i.if.else.i30_crit_edge:      ; preds = %is_highmem_idx.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.else.i30

is_highmem_idx.exit.i.if.then8.i_crit_edge:       ; preds = %is_highmem_idx.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.then8.i

if.then8.i:                                       ; preds = %is_highmem_idx.exit.i.if.then8.i_crit_edge, %do.end5.i.if.then8.i_crit_edge
  %71 = inttoptr i32 %sub71 to ptr
  br label %set_bh_page.exit

if.else.i30:                                      ; preds = %is_highmem_idx.exit.i.if.else.i30_crit_edge, %do.end5.i.if.else.i30_crit_edge
  %call9.i = tail call ptr @page_address(ptr noundef %page) #14
  %add.ptr.i = getelementptr i8, ptr %call9.i, i32 %sub71
  br label %set_bh_page.exit

set_bh_page.exit:                                 ; preds = %if.else.i30, %if.then8.i
  %add.ptr.sink.i = phi ptr [ %add.ptr.i, %if.else.i30 ], [ %71, %if.then8.i ]
  %b_data10.i = getelementptr inbounds %struct.buffer_head, ptr %call2, i32 0, i32 5
  %72 = ptrtoint ptr %b_data10.i to i32
  call void @__asan_store4_noabort(i32 %72)
  store ptr %add.ptr.sink.i, ptr %b_data10.i, align 4
  %sub = sub i32 %sub71, %size
  %cmp = icmp sgt i32 %sub, -1
  br i1 %cmp, label %set_bh_page.exit.while.body_crit_edge, label %set_bh_page.exit.out_crit_edge

set_bh_page.exit.out_crit_edge:                   ; preds = %set_bh_page.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %out

set_bh_page.exit.while.body_crit_edge:            ; preds = %set_bh_page.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %while.body

out:                                              ; preds = %do.body.out_crit_edge, %no_grow.out_crit_edge, %set_bh_page.exit.out_crit_edge, %set_active_memcg.exit.out_crit_edge
  %head.1 = phi ptr [ null, %no_grow.out_crit_edge ], [ null, %set_active_memcg.exit.out_crit_edge ], [ null, %do.body.out_crit_edge ], [ %call2, %set_bh_page.exit.out_crit_edge ]
  %73 = tail call i32 @llvm.read_register.i32(metadata !243) #14
  %and.i.i.i31 = and i32 %73, -16384
  %74 = inttoptr i32 %and.i.i.i31 to ptr
  %preempt_count.i.i32 = getelementptr inbounds %struct.thread_info, ptr %74, i32 0, i32 1
  %75 = ptrtoint ptr %preempt_count.i.i32 to i32
  call void @__asan_load4_noabort(i32 %75)
  %76 = load volatile i32, ptr %preempt_count.i.i32, align 4
  %and.i33 = and i32 %76, 15728640
  %77 = tail call i32 @llvm.read_register.i32(metadata !243) #14
  %and.i.i78.i34 = and i32 %77, -16384
  %78 = inttoptr i32 %and.i.i78.i34 to ptr
  %preempt_count.i79.i35 = getelementptr inbounds %struct.thread_info, ptr %78, i32 0, i32 1
  %79 = ptrtoint ptr %preempt_count.i79.i35 to i32
  call void @__asan_load4_noabort(i32 %79)
  %80 = load volatile i32, ptr %preempt_count.i79.i35, align 4
  %and2.i36 = and i32 %80, 983040
  %or.i37 = or i32 %and2.i36, %and.i33
  %81 = tail call i32 @llvm.read_register.i32(metadata !243) #14
  %and.i.i80.i38 = and i32 %81, -16384
  %82 = inttoptr i32 %and.i.i80.i38 to ptr
  %preempt_count.i81.i39 = getelementptr inbounds %struct.thread_info, ptr %82, i32 0, i32 1
  %83 = ptrtoint ptr %preempt_count.i81.i39 to i32
  call void @__asan_load4_noabort(i32 %83)
  %84 = load volatile i32, ptr %preempt_count.i81.i39, align 4
  %and5.i40 = and i32 %84, 256
  %or6.i41 = or i32 %or.i37, %and5.i40
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %or6.i41)
  %tobool.not.i42 = icmp eq i32 %or6.i41, 0
  %85 = tail call i32 @llvm.read_register.i32(metadata !243) #14
  %and.i85.i43 = and i32 %85, -16384
  %86 = inttoptr i32 %and.i85.i43 to ptr
  br i1 %tobool.not.i42, label %if.else.i62, label %if.then.i57

if.then.i57:                                      ; preds = %out
  %preempt_count.i.i.i44 = getelementptr inbounds %struct.thread_info, ptr %86, i32 0, i32 1
  %87 = ptrtoint ptr %preempt_count.i.i.i44 to i32
  call void @__asan_load4_noabort(i32 %87)
  %88 = load volatile i32, ptr %preempt_count.i.i.i44, align 4
  %add.i.i45 = add i32 %88, 1
  store volatile i32 %add.i.i45, ptr %preempt_count.i.i.i44, align 4
  tail call void asm sideeffect "", "~{memory}"() #14, !srcloc !295
  %89 = tail call i32 @llvm.read_register.i32(metadata !243) #14
  %and.i.i46 = and i32 %89, -16384
  %90 = inttoptr i32 %and.i.i46 to ptr
  %cpu.i47 = getelementptr inbounds %struct.thread_info, ptr %90, i32 0, i32 3
  %91 = ptrtoint ptr %cpu.i47 to i32
  call void @__asan_load4_noabort(i32 %91)
  %92 = load i32, ptr %cpu.i47, align 4
  %arrayidx.i48 = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %92
  %93 = ptrtoint ptr %arrayidx.i48 to i32
  call void @__asan_load4_noabort(i32 %93)
  %94 = load i32, ptr %arrayidx.i48, align 4
  %add.i49 = add i32 %94, ptrtoint (ptr @int_active_memcg to i32)
  %95 = inttoptr i32 %add.i49 to ptr
  %96 = ptrtoint ptr %95 to i32
  call void @__asan_load4_noabort(i32 %96)
  %97 = load volatile ptr, ptr %95, align 4
  tail call void asm sideeffect "", "~{memory}"() #14, !srcloc !296
  %98 = tail call i32 @llvm.read_register.i32(metadata !243) #14
  %and.i.i.i82.i50 = and i32 %98, -16384
  %99 = inttoptr i32 %and.i.i.i82.i50 to ptr
  %preempt_count.i.i83.i51 = getelementptr inbounds %struct.thread_info, ptr %99, i32 0, i32 1
  %100 = ptrtoint ptr %preempt_count.i.i83.i51 to i32
  call void @__asan_load4_noabort(i32 %100)
  %101 = load volatile i32, ptr %preempt_count.i.i83.i51, align 4
  %sub.i.i52 = add i32 %101, -1
  store volatile i32 %sub.i.i52, ptr %preempt_count.i.i83.i51, align 4
  %102 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ arch_local_irq_save\0A\09cpsid\09i", "=r,~{memory},~{cc}"() #14, !srcloc !297
  %103 = ptrtoint ptr %cpu.i47 to i32
  call void @__asan_load4_noabort(i32 %103)
  %104 = load i32, ptr %cpu.i47, align 4
  %arrayidx47.i53 = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %104
  %105 = ptrtoint ptr %arrayidx47.i53 to i32
  call void @__asan_load4_noabort(i32 %105)
  %106 = load i32, ptr %arrayidx47.i53, align 4
  %add48.i54 = add i32 %106, ptrtoint (ptr @int_active_memcg to i32)
  %107 = inttoptr i32 %add48.i54 to ptr
  %108 = ptrtoint ptr %107 to i32
  call void @__asan_store4_noabort(i32 %108)
  store ptr %old.0.i, ptr %107, align 4
  %109 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ local_save_flags", "=r,~{memory},~{cc}"() #14, !srcloc !280
  %and.i.i84.i55 = and i32 %109, 128
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i84.i55)
  %tobool59.not.i56 = icmp eq i32 %and.i.i84.i55, 0
  br i1 %tobool59.not.i56, label %if.then63.i58, label %if.then.i57.do.end65.i59_crit_edge, !prof !262

if.then.i57.do.end65.i59_crit_edge:               ; preds = %if.then.i57
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.end65.i59

if.then63.i58:                                    ; preds = %if.then.i57
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @warn_bogus_irq_restore() #14
  br label %do.end65.i59

do.end65.i59:                                     ; preds = %if.then63.i58, %if.then.i57.do.end65.i59_crit_edge
  tail call void asm sideeffect "\09msr\09cpsr_c, $0\09@ local_irq_restore", "r,~{memory},~{cc}"(i32 %102) #14, !srcloc !298
  br label %set_active_memcg.exit64

if.else.i62:                                      ; preds = %out
  call void @__sanitizer_cov_trace_pc() #16
  %task.i60 = getelementptr inbounds %struct.thread_info, ptr %86, i32 0, i32 2
  %110 = ptrtoint ptr %task.i60 to i32
  call void @__asan_load4_noabort(i32 %110)
  %111 = load ptr, ptr %task.i60, align 8
  %active_memcg.i61 = getelementptr inbounds %struct.task_struct, ptr %111, i32 0, i32 206
  %112 = ptrtoint ptr %active_memcg.i61 to i32
  call void @__asan_store4_noabort(i32 %112)
  store ptr %old.0.i, ptr %active_memcg.i61, align 8
  br label %set_active_memcg.exit64

set_active_memcg.exit64:                          ; preds = %if.else.i62, %do.end65.i59
  ret ptr %head.1

no_grow:                                          ; preds = %while.body
  %tobool7.not = icmp eq ptr %head.070, null
  br i1 %tobool7.not, label %no_grow.out_crit_edge, label %no_grow.do.body_crit_edge

no_grow.do.body_crit_edge:                        ; preds = %no_grow
  br label %do.body

no_grow.out_crit_edge:                            ; preds = %no_grow
  call void @__sanitizer_cov_trace_pc() #16
  br label %out

do.body:                                          ; preds = %do.body.do.body_crit_edge, %no_grow.do.body_crit_edge
  %head.2 = phi ptr [ %114, %do.body.do.body_crit_edge ], [ %head.070, %no_grow.do.body_crit_edge ]
  %b_this_page9 = getelementptr inbounds %struct.buffer_head, ptr %head.2, i32 0, i32 1
  %113 = ptrtoint ptr %b_this_page9 to i32
  call void @__asan_load4_noabort(i32 %113)
  %114 = load ptr, ptr %b_this_page9, align 4
  tail call void @free_buffer_head(ptr noundef nonnull %head.2)
  %tobool10.not = icmp eq ptr %114, null
  br i1 %tobool10.not, label %do.body.out_crit_edge, label %do.body.do.body_crit_edge

do.body.do.body_crit_edge:                        ; preds = %do.body
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.body

do.body.out_crit_edge:                            ; preds = %do.body
  call void @__sanitizer_cov_trace_pc() #16
  br label %out
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local ptr @alloc_buffer_head(i32 noundef %gfp_flags) #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load ptr, ptr @bh_cachep, align 4
  %or.i = or i32 %gfp_flags, 256
  %call.i = tail call noalias align 8 ptr @kmem_cache_alloc(ptr noundef %0, i32 noundef %or.i) #14
  %tobool.not = icmp eq ptr %call.i, null
  br i1 %tobool.not, label %entry.if.end_crit_edge, label %if.then

entry.if.end_crit_edge:                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end

if.then:                                          ; preds = %entry
  %b_assoc_buffers = getelementptr inbounds %struct.buffer_head, ptr %call.i, i32 0, i32 9
  %1 = ptrtoint ptr %b_assoc_buffers to i32
  call void @__asan_store4_noabort(i32 %1)
  store volatile ptr %b_assoc_buffers, ptr %b_assoc_buffers, align 4
  %prev.i = getelementptr inbounds %struct.buffer_head, ptr %call.i, i32 0, i32 9, i32 1
  %2 = ptrtoint ptr %prev.i to i32
  call void @__asan_store4_noabort(i32 %2)
  store ptr %b_assoc_buffers, ptr %prev.i, align 8
  %b_uptodate_lock = getelementptr inbounds %struct.buffer_head, ptr %call.i, i32 0, i32 12
  tail call void @__raw_spin_lock_init(ptr noundef %b_uptodate_lock, ptr noundef nonnull @.str.6, ptr noundef nonnull @alloc_buffer_head.__key, i16 noundef signext 3) #14
  %3 = tail call i32 @llvm.read_register.i32(metadata !243) #14
  %and.i.i.i = and i32 %3, -16384
  %4 = inttoptr i32 %and.i.i.i to ptr
  %preempt_count.i.i = getelementptr inbounds %struct.thread_info, ptr %4, i32 0, i32 1
  %5 = ptrtoint ptr %preempt_count.i.i to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load volatile i32, ptr %preempt_count.i.i, align 4
  %add.i = add i32 %6, 1
  store volatile i32 %add.i, ptr %preempt_count.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #14, !srcloc !300
  %7 = tail call i32 @llvm.read_register.i32(metadata !243) #14
  %and.i = and i32 %7, -16384
  %8 = inttoptr i32 %and.i to ptr
  %cpu = getelementptr inbounds %struct.thread_info, ptr %8, i32 0, i32 3
  %9 = ptrtoint ptr %cpu to i32
  call void @__asan_load4_noabort(i32 %9)
  %10 = load i32, ptr %cpu, align 4
  %arrayidx = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %10
  %11 = ptrtoint ptr %arrayidx to i32
  call void @__asan_load4_noabort(i32 %11)
  %12 = load i32, ptr %arrayidx, align 4
  %add = add i32 %12, ptrtoint (ptr @bh_accounting to i32)
  %13 = inttoptr i32 %add to ptr
  %14 = ptrtoint ptr %13 to i32
  call void @__asan_load4_noabort(i32 %14)
  %15 = load i32, ptr %13, align 4
  %add16 = add i32 %15, 1
  store i32 %add16, ptr %13, align 4
  %16 = tail call i32 @llvm.read_register.i32(metadata !243) #14
  %and.i.i = and i32 %16, -16384
  %17 = inttoptr i32 %and.i.i to ptr
  %cpu.i = getelementptr inbounds %struct.thread_info, ptr %17, i32 0, i32 3
  %18 = ptrtoint ptr %cpu.i to i32
  call void @__asan_load4_noabort(i32 %18)
  %19 = load i32, ptr %cpu.i, align 4
  %arrayidx.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %19
  %20 = ptrtoint ptr %arrayidx.i to i32
  call void @__asan_load4_noabort(i32 %20)
  %21 = load i32, ptr %arrayidx.i, align 4
  %add.i29 = add i32 %21, ptrtoint (ptr getelementptr inbounds (%struct.bh_accounting, ptr @bh_accounting, i32 0, i32 1) to i32)
  %22 = inttoptr i32 %add.i29 to ptr
  %23 = ptrtoint ptr %22 to i32
  call void @__asan_load4_noabort(i32 %23)
  %24 = load i32, ptr %22, align 4
  %add7.i = add i32 %24, 1
  store i32 %add7.i, ptr %22, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 4096, i32 %24)
  %cmp.i = icmp slt i32 %24, 4096
  br i1 %cmp.i, label %if.then.recalc_bh_state.exit_crit_edge, label %if.end.i

if.then.recalc_bh_state.exit_crit_edge:           ; preds = %if.then
  call void @__sanitizer_cov_trace_pc() #16
  br label %recalc_bh_state.exit

if.end.i:                                         ; preds = %if.then
  %25 = ptrtoint ptr %cpu.i to i32
  call void @__asan_load4_noabort(i32 %25)
  %26 = load i32, ptr %cpu.i, align 4
  %arrayidx25.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %26
  %27 = ptrtoint ptr %arrayidx25.i to i32
  call void @__asan_load4_noabort(i32 %27)
  %28 = load i32, ptr %arrayidx25.i, align 4
  %add26.i = add i32 %28, ptrtoint (ptr getelementptr inbounds (%struct.bh_accounting, ptr @bh_accounting, i32 0, i32 1) to i32)
  %29 = inttoptr i32 %add26.i to ptr
  %30 = ptrtoint ptr %29 to i32
  call void @__asan_store4_noabort(i32 %30)
  store i32 0, ptr %29, align 4
  call void @__asan_load4_noabort(i32 ptrtoint (ptr @nr_cpu_ids to i32))
  %31 = load i32, ptr @nr_cpu_ids, align 4
  %call3149.i = tail call i32 @cpumask_next(i32 noundef -1, ptr noundef nonnull @__cpu_online_mask) #18
  call void @__sanitizer_cov_trace_cmp4(i32 %call3149.i, i32 %31)
  %cmp3250.i = icmp ult i32 %call3149.i, %31
  br i1 %cmp3250.i, label %if.end.i.do.body33.i_crit_edge, label %if.end.i.for.end.i_crit_edge

if.end.i.for.end.i_crit_edge:                     ; preds = %if.end.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %for.end.i

if.end.i.do.body33.i_crit_edge:                   ; preds = %if.end.i
  br label %do.body33.i

do.body33.i:                                      ; preds = %do.body33.i.do.body33.i_crit_edge, %if.end.i.do.body33.i_crit_edge
  %call3152.i = phi i32 [ %call31.i, %do.body33.i.do.body33.i_crit_edge ], [ %call3149.i, %if.end.i.do.body33.i_crit_edge ]
  %tot.051.i = phi i32 [ %add42.i, %do.body33.i.do.body33.i_crit_edge ], [ 0, %if.end.i.do.body33.i_crit_edge ]
  %arrayidx40.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %call3152.i
  %32 = ptrtoint ptr %arrayidx40.i to i32
  call void @__asan_load4_noabort(i32 %32)
  %33 = load i32, ptr %arrayidx40.i, align 4
  %add41.i = add i32 %33, ptrtoint (ptr @bh_accounting to i32)
  %34 = inttoptr i32 %add41.i to ptr
  %35 = ptrtoint ptr %34 to i32
  call void @__asan_load4_noabort(i32 %35)
  %36 = load i32, ptr %34, align 4
  %add42.i = add i32 %36, %tot.051.i
  %call31.i = tail call i32 @cpumask_next(i32 noundef %call3152.i, ptr noundef nonnull @__cpu_online_mask) #18
  %cmp32.i = icmp ult i32 %call31.i, %31
  br i1 %cmp32.i, label %do.body33.i.do.body33.i_crit_edge, label %do.body33.i.for.end.i_crit_edge

do.body33.i.for.end.i_crit_edge:                  ; preds = %do.body33.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %for.end.i

do.body33.i.do.body33.i_crit_edge:                ; preds = %do.body33.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.body33.i

for.end.i:                                        ; preds = %do.body33.i.for.end.i_crit_edge, %if.end.i.for.end.i_crit_edge
  %tot.0.lcssa.i = phi i32 [ 0, %if.end.i.for.end.i_crit_edge ], [ %add42.i, %do.body33.i.for.end.i_crit_edge ]
  %37 = load i32, ptr @max_buffer_heads, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %tot.0.lcssa.i, i32 %37)
  %cmp43.i = icmp ugt i32 %tot.0.lcssa.i, %37
  %conv.i = zext i1 %cmp43.i to i32
  store i32 %conv.i, ptr @buffer_heads_over_limit, align 4
  br label %recalc_bh_state.exit

recalc_bh_state.exit:                             ; preds = %for.end.i, %if.then.recalc_bh_state.exit_crit_edge
  tail call void asm sideeffect "", "~{memory}"() #14, !srcloc !301
  %38 = tail call i32 @llvm.read_register.i32(metadata !243) #14
  %and.i.i.i27 = and i32 %38, -16384
  %39 = inttoptr i32 %and.i.i.i27 to ptr
  %preempt_count.i.i28 = getelementptr inbounds %struct.thread_info, ptr %39, i32 0, i32 1
  %40 = ptrtoint ptr %preempt_count.i.i28 to i32
  call void @__asan_load4_noabort(i32 %40)
  %41 = load volatile i32, ptr %preempt_count.i.i28, align 4
  %sub.i = add i32 %41, -1
  store volatile i32 %sub.i, ptr %preempt_count.i.i28, align 4
  br label %if.end

if.end:                                           ; preds = %recalc_bh_state.exit, %entry.if.end_crit_edge
  ret ptr %call.i
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local void @set_bh_page(ptr nocapture noundef writeonly %bh, ptr noundef %page, i32 noundef %offset) #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %b_page = getelementptr inbounds %struct.buffer_head, ptr %bh, i32 0, i32 2
  %0 = ptrtoint ptr %b_page to i32
  call void @__asan_store4_noabort(i32 %0)
  store ptr %page, ptr %b_page, align 8
  call void @__sanitizer_cov_trace_const_cmp4(i32 4095, i32 %offset)
  %cmp = icmp ugt i32 %offset, 4095
  br i1 %cmp, label %do.body2, label %do.end5, !prof !262

do.body2:                                         ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22fs/buffer.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 1446, 0\0A.popsection", ""() #14, !srcloc !299
  unreachable

do.end5:                                          ; preds = %entry
  %1 = ptrtoint ptr %page to i32
  call void @__asan_load4_noabort(i32 %1)
  %2 = load i32, ptr %page, align 4
  %shr.i = lshr i32 %2, 30
  %3 = zext i32 %shr.i to i64
  call void @__sanitizer_cov_trace_switch(i64 %3, ptr @__sancov_gen_cov_switch_values.49)
  switch i32 %shr.i, label %do.end5.if.else_crit_edge [
    i32 2, label %do.end5.if.then8_crit_edge
    i32 3, label %is_highmem_idx.exit
  ]

do.end5.if.then8_crit_edge:                       ; preds = %do.end5
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.then8

do.end5.if.else_crit_edge:                        ; preds = %do.end5
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.else

is_highmem_idx.exit:                              ; preds = %do.end5
  call void @__asan_load4_noabort(i32 ptrtoint (ptr @movable_zone to i32))
  %4 = load i32, ptr @movable_zone, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 2, i32 %4)
  %cmp2.i.not = icmp eq i32 %4, 2
  br i1 %cmp2.i.not, label %is_highmem_idx.exit.if.then8_crit_edge, label %is_highmem_idx.exit.if.else_crit_edge

is_highmem_idx.exit.if.else_crit_edge:            ; preds = %is_highmem_idx.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.else

is_highmem_idx.exit.if.then8_crit_edge:           ; preds = %is_highmem_idx.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.then8

if.then8:                                         ; preds = %is_highmem_idx.exit.if.then8_crit_edge, %do.end5.if.then8_crit_edge
  %5 = inttoptr i32 %offset to ptr
  br label %if.end11

if.else:                                          ; preds = %is_highmem_idx.exit.if.else_crit_edge, %do.end5.if.else_crit_edge
  %call9 = tail call ptr @page_address(ptr noundef %page) #14
  %add.ptr = getelementptr i8, ptr %call9, i32 %offset
  br label %if.end11

if.end11:                                         ; preds = %if.else, %if.then8
  %add.ptr.sink = phi ptr [ %add.ptr, %if.else ], [ %5, %if.then8 ]
  %b_data10 = getelementptr inbounds %struct.buffer_head, ptr %bh, i32 0, i32 5
  %6 = ptrtoint ptr %b_data10 to i32
  call void @__asan_store4_noabort(i32 %6)
  store ptr %add.ptr.sink, ptr %b_data10, align 4
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local void @free_buffer_head(ptr noundef %bh) #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %b_assoc_buffers = getelementptr inbounds %struct.buffer_head, ptr %bh, i32 0, i32 9
  %0 = ptrtoint ptr %b_assoc_buffers to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load volatile ptr, ptr %b_assoc_buffers, align 4
  %cmp.i.not = icmp eq ptr %1, %b_assoc_buffers
  br i1 %cmp.i.not, label %do.end7, label %do.body4, !prof !254

do.body4:                                         ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22fs/buffer.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 3325, 0\0A.popsection", ""() #14, !srcloc !302
  unreachable

do.end7:                                          ; preds = %entry
  %2 = load ptr, ptr @bh_cachep, align 4
  tail call void @kmem_cache_free(ptr noundef %2, ptr noundef %bh) #14
  %3 = tail call i32 @llvm.read_register.i32(metadata !243) #14
  %and.i.i.i = and i32 %3, -16384
  %4 = inttoptr i32 %and.i.i.i to ptr
  %preempt_count.i.i = getelementptr inbounds %struct.thread_info, ptr %4, i32 0, i32 1
  %5 = ptrtoint ptr %preempt_count.i.i to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load volatile i32, ptr %preempt_count.i.i, align 4
  %add.i = add i32 %6, 1
  store volatile i32 %add.i, ptr %preempt_count.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #14, !srcloc !303
  %7 = tail call i32 @llvm.read_register.i32(metadata !243) #14
  %and.i = and i32 %7, -16384
  %8 = inttoptr i32 %and.i to ptr
  %cpu = getelementptr inbounds %struct.thread_info, ptr %8, i32 0, i32 3
  %9 = ptrtoint ptr %cpu to i32
  call void @__asan_load4_noabort(i32 %9)
  %10 = load i32, ptr %cpu, align 4
  %arrayidx = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %10
  %11 = ptrtoint ptr %arrayidx to i32
  call void @__asan_load4_noabort(i32 %11)
  %12 = load i32, ptr %arrayidx, align 4
  %add = add i32 %12, ptrtoint (ptr @bh_accounting to i32)
  %13 = inttoptr i32 %add to ptr
  %14 = ptrtoint ptr %13 to i32
  call void @__asan_load4_noabort(i32 %14)
  %15 = load i32, ptr %13, align 4
  %add19 = add i32 %15, -1
  store i32 %add19, ptr %13, align 4
  %16 = tail call i32 @llvm.read_register.i32(metadata !243) #14
  %and.i.i = and i32 %16, -16384
  %17 = inttoptr i32 %and.i.i to ptr
  %cpu.i = getelementptr inbounds %struct.thread_info, ptr %17, i32 0, i32 3
  %18 = ptrtoint ptr %cpu.i to i32
  call void @__asan_load4_noabort(i32 %18)
  %19 = load i32, ptr %cpu.i, align 4
  %arrayidx.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %19
  %20 = ptrtoint ptr %arrayidx.i to i32
  call void @__asan_load4_noabort(i32 %20)
  %21 = load i32, ptr %arrayidx.i, align 4
  %add.i27 = add i32 %21, ptrtoint (ptr getelementptr inbounds (%struct.bh_accounting, ptr @bh_accounting, i32 0, i32 1) to i32)
  %22 = inttoptr i32 %add.i27 to ptr
  %23 = ptrtoint ptr %22 to i32
  call void @__asan_load4_noabort(i32 %23)
  %24 = load i32, ptr %22, align 4
  %add7.i = add i32 %24, 1
  store i32 %add7.i, ptr %22, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 4096, i32 %24)
  %cmp.i28 = icmp slt i32 %24, 4096
  br i1 %cmp.i28, label %do.end7.recalc_bh_state.exit_crit_edge, label %if.end.i

do.end7.recalc_bh_state.exit_crit_edge:           ; preds = %do.end7
  call void @__sanitizer_cov_trace_pc() #16
  br label %recalc_bh_state.exit

if.end.i:                                         ; preds = %do.end7
  %25 = ptrtoint ptr %cpu.i to i32
  call void @__asan_load4_noabort(i32 %25)
  %26 = load i32, ptr %cpu.i, align 4
  %arrayidx25.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %26
  %27 = ptrtoint ptr %arrayidx25.i to i32
  call void @__asan_load4_noabort(i32 %27)
  %28 = load i32, ptr %arrayidx25.i, align 4
  %add26.i = add i32 %28, ptrtoint (ptr getelementptr inbounds (%struct.bh_accounting, ptr @bh_accounting, i32 0, i32 1) to i32)
  %29 = inttoptr i32 %add26.i to ptr
  %30 = ptrtoint ptr %29 to i32
  call void @__asan_store4_noabort(i32 %30)
  store i32 0, ptr %29, align 4
  call void @__asan_load4_noabort(i32 ptrtoint (ptr @nr_cpu_ids to i32))
  %31 = load i32, ptr @nr_cpu_ids, align 4
  %call3149.i = tail call i32 @cpumask_next(i32 noundef -1, ptr noundef nonnull @__cpu_online_mask) #18
  call void @__sanitizer_cov_trace_cmp4(i32 %call3149.i, i32 %31)
  %cmp3250.i = icmp ult i32 %call3149.i, %31
  br i1 %cmp3250.i, label %if.end.i.do.body33.i_crit_edge, label %if.end.i.for.end.i_crit_edge

if.end.i.for.end.i_crit_edge:                     ; preds = %if.end.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %for.end.i

if.end.i.do.body33.i_crit_edge:                   ; preds = %if.end.i
  br label %do.body33.i

do.body33.i:                                      ; preds = %do.body33.i.do.body33.i_crit_edge, %if.end.i.do.body33.i_crit_edge
  %call3152.i = phi i32 [ %call31.i, %do.body33.i.do.body33.i_crit_edge ], [ %call3149.i, %if.end.i.do.body33.i_crit_edge ]
  %tot.051.i = phi i32 [ %add42.i, %do.body33.i.do.body33.i_crit_edge ], [ 0, %if.end.i.do.body33.i_crit_edge ]
  %arrayidx40.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %call3152.i
  %32 = ptrtoint ptr %arrayidx40.i to i32
  call void @__asan_load4_noabort(i32 %32)
  %33 = load i32, ptr %arrayidx40.i, align 4
  %add41.i = add i32 %33, ptrtoint (ptr @bh_accounting to i32)
  %34 = inttoptr i32 %add41.i to ptr
  %35 = ptrtoint ptr %34 to i32
  call void @__asan_load4_noabort(i32 %35)
  %36 = load i32, ptr %34, align 4
  %add42.i = add i32 %36, %tot.051.i
  %call31.i = tail call i32 @cpumask_next(i32 noundef %call3152.i, ptr noundef nonnull @__cpu_online_mask) #18
  %cmp32.i = icmp ult i32 %call31.i, %31
  br i1 %cmp32.i, label %do.body33.i.do.body33.i_crit_edge, label %do.body33.i.for.end.i_crit_edge

do.body33.i.for.end.i_crit_edge:                  ; preds = %do.body33.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %for.end.i

do.body33.i.do.body33.i_crit_edge:                ; preds = %do.body33.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.body33.i

for.end.i:                                        ; preds = %do.body33.i.for.end.i_crit_edge, %if.end.i.for.end.i_crit_edge
  %tot.0.lcssa.i = phi i32 [ 0, %if.end.i.for.end.i_crit_edge ], [ %add42.i, %do.body33.i.for.end.i_crit_edge ]
  %37 = load i32, ptr @max_buffer_heads, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %tot.0.lcssa.i, i32 %37)
  %cmp43.i = icmp ugt i32 %tot.0.lcssa.i, %37
  %conv.i29 = zext i1 %cmp43.i to i32
  store i32 %conv.i29, ptr @buffer_heads_over_limit, align 4
  br label %recalc_bh_state.exit

recalc_bh_state.exit:                             ; preds = %for.end.i, %do.end7.recalc_bh_state.exit_crit_edge
  tail call void asm sideeffect "", "~{memory}"() #14, !srcloc !304
  %38 = tail call i32 @llvm.read_register.i32(metadata !243) #14
  %and.i.i.i25 = and i32 %38, -16384
  %39 = inttoptr i32 %and.i.i.i25 to ptr
  %preempt_count.i.i26 = getelementptr inbounds %struct.thread_info, ptr %39, i32 0, i32 1
  %40 = ptrtoint ptr %preempt_count.i.i26 to i32
  call void @__asan_load4_noabort(i32 %40)
  %41 = load volatile i32, ptr %preempt_count.i.i26, align 4
  %sub.i = add i32 %41, -1
  store volatile i32 %sub.i, ptr %preempt_count.i.i26, align 4
  ret void
}

; Function Attrs: null_pointer_is_valid
declare dso_local void @warn_slowpath_fmt(ptr noundef, i32 noundef, i32 noundef, ptr noundef, ...) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal fastcc void @trace_block_dirty_buffer(ptr noundef %bh) unnamed_addr #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  callbr void asm sideeffect "1:\0A\09nop\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr getelementptr inbounds (%struct.tracepoint, ptr @__tracepoint_block_dirty_buffer, i32 0, i32 1), ptr blockaddress(@trace_block_dirty_buffer, %do.body)) #14
          to label %if.end48 [label %do.body], !srcloc !253

do.body:                                          ; preds = %entry
  %0 = tail call i32 @llvm.read_register.i32(metadata !243) #14
  %and.i = and i32 %0, -16384
  %1 = inttoptr i32 %and.i to ptr
  %cpu = getelementptr inbounds %struct.thread_info, ptr %1, i32 0, i32 3
  %2 = ptrtoint ptr %cpu to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load i32, ptr %cpu, align 4
  call void @__asan_load4_noabort(i32 ptrtoint (ptr @nr_cpu_ids to i32))
  %4 = load i32, ptr @nr_cpu_ids, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %4, i32 %3)
  %cmp.not.i.i.i.i = icmp ugt i32 %4, %3
  br i1 %cmp.not.i.i.i.i, label %do.body.cpu_online.exit_crit_edge, label %land.rhs.i.i.i.i

do.body.cpu_online.exit_crit_edge:                ; preds = %do.body
  call void @__sanitizer_cov_trace_pc() #16
  br label %cpu_online.exit

land.rhs.i.i.i.i:                                 ; preds = %do.body
  %.b37.i.i.i.i = load i1, ptr @cpu_max_bits_warn.__already_done, align 1
  br i1 %.b37.i.i.i.i, label %land.rhs.i.i.i.i.cpu_online.exit_crit_edge, label %if.then.i.i.i.i, !prof !254

land.rhs.i.i.i.i.cpu_online.exit_crit_edge:       ; preds = %land.rhs.i.i.i.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %cpu_online.exit

if.then.i.i.i.i:                                  ; preds = %land.rhs.i.i.i.i
  call void @__sanitizer_cov_trace_pc() #16
  store i1 true, ptr @cpu_max_bits_warn.__already_done, align 1
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.12, i32 noundef 108, i32 noundef 9, ptr noundef null) #14
  br label %cpu_online.exit

cpu_online.exit:                                  ; preds = %if.then.i.i.i.i, %land.rhs.i.i.i.i.cpu_online.exit_crit_edge, %do.body.cpu_online.exit_crit_edge
  %div3.i.i.i = lshr i32 %3, 5
  %arrayidx.i.i.i = getelementptr i32, ptr @__cpu_online_mask, i32 %div3.i.i.i
  %5 = ptrtoint ptr %arrayidx.i.i.i to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load volatile i32, ptr %arrayidx.i.i.i, align 4
  %and.i.i.i75 = and i32 %3, 31
  %7 = shl nuw i32 1, %and.i.i.i75
  %8 = and i32 %6, %7
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %8)
  %tobool.i.not = icmp eq i32 %8, 0
  br i1 %tobool.i.not, label %cpu_online.exit.if.end69_crit_edge, label %cleanup.thread

cpu_online.exit.if.end69_crit_edge:               ; preds = %cpu_online.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end69

cleanup.thread:                                   ; preds = %cpu_online.exit
  call void @__sanitizer_cov_trace_pc() #16
  %9 = tail call i32 @llvm.read_register.i32(metadata !243) #14
  %and.i.i.i = and i32 %9, -16384
  %10 = inttoptr i32 %and.i.i.i to ptr
  %preempt_count.i.i = getelementptr inbounds %struct.thread_info, ptr %10, i32 0, i32 1
  %11 = ptrtoint ptr %preempt_count.i.i to i32
  call void @__asan_load4_noabort(i32 %11)
  %12 = load volatile i32, ptr %preempt_count.i.i, align 4
  %add.i = add i32 %12, 1
  store volatile i32 %add.i, ptr %preempt_count.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #14, !srcloc !305
  %call42 = tail call i32 @__traceiter_block_dirty_buffer(ptr noundef null, ptr noundef %bh) #14
  tail call void asm sideeffect "", "~{memory}"() #14, !srcloc !306
  %13 = tail call i32 @llvm.read_register.i32(metadata !243) #14
  %and.i.i.i73 = and i32 %13, -16384
  %14 = inttoptr i32 %and.i.i.i73 to ptr
  %preempt_count.i.i74 = getelementptr inbounds %struct.thread_info, ptr %14, i32 0, i32 1
  %15 = ptrtoint ptr %preempt_count.i.i74 to i32
  call void @__asan_load4_noabort(i32 %15)
  %16 = load volatile i32, ptr %preempt_count.i.i74, align 4
  %sub.i = add i32 %16, -1
  store volatile i32 %sub.i, ptr %preempt_count.i.i74, align 4
  br label %if.end48

if.end48:                                         ; preds = %cleanup.thread, %entry
  %17 = tail call i32 @llvm.read_register.i32(metadata !243) #14
  %and.i76 = and i32 %17, -16384
  %18 = inttoptr i32 %and.i76 to ptr
  %cpu50 = getelementptr inbounds %struct.thread_info, ptr %18, i32 0, i32 3
  %19 = ptrtoint ptr %cpu50 to i32
  call void @__asan_load4_noabort(i32 %19)
  %20 = load i32, ptr %cpu50, align 4
  call void @__asan_load4_noabort(i32 ptrtoint (ptr @nr_cpu_ids to i32))
  %21 = load i32, ptr @nr_cpu_ids, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %21, i32 %20)
  %cmp.not.i.i.i.i77 = icmp ugt i32 %21, %20
  br i1 %cmp.not.i.i.i.i77, label %if.end48.cpu_online.exit85_crit_edge, label %land.rhs.i.i.i.i79

if.end48.cpu_online.exit85_crit_edge:             ; preds = %if.end48
  call void @__sanitizer_cov_trace_pc() #16
  br label %cpu_online.exit85

land.rhs.i.i.i.i79:                               ; preds = %if.end48
  %.b37.i.i.i.i78 = load i1, ptr @cpu_max_bits_warn.__already_done, align 1
  br i1 %.b37.i.i.i.i78, label %land.rhs.i.i.i.i79.cpu_online.exit85_crit_edge, label %if.then.i.i.i.i80, !prof !254

land.rhs.i.i.i.i79.cpu_online.exit85_crit_edge:   ; preds = %land.rhs.i.i.i.i79
  call void @__sanitizer_cov_trace_pc() #16
  br label %cpu_online.exit85

if.then.i.i.i.i80:                                ; preds = %land.rhs.i.i.i.i79
  call void @__sanitizer_cov_trace_pc() #16
  store i1 true, ptr @cpu_max_bits_warn.__already_done, align 1
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.12, i32 noundef 108, i32 noundef 9, ptr noundef null) #14
  br label %cpu_online.exit85

cpu_online.exit85:                                ; preds = %if.then.i.i.i.i80, %land.rhs.i.i.i.i79.cpu_online.exit85_crit_edge, %if.end48.cpu_online.exit85_crit_edge
  %div3.i.i.i81 = lshr i32 %20, 5
  %arrayidx.i.i.i82 = getelementptr i32, ptr @__cpu_online_mask, i32 %div3.i.i.i81
  %22 = ptrtoint ptr %arrayidx.i.i.i82 to i32
  call void @__asan_load4_noabort(i32 %22)
  %23 = load volatile i32, ptr %arrayidx.i.i.i82, align 4
  %and.i.i.i83 = and i32 %20, 31
  %24 = shl nuw i32 1, %and.i.i.i83
  %25 = and i32 %23, %24
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %25)
  %tobool.i84.not = icmp eq i32 %25, 0
  br i1 %tobool.i84.not, label %cpu_online.exit85.if.end69_crit_edge, label %if.then52

cpu_online.exit85.if.end69_crit_edge:             ; preds = %cpu_online.exit85
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end69

if.then52:                                        ; preds = %cpu_online.exit85
  %26 = tail call i32 @llvm.read_register.i32(metadata !243) #14
  %and.i.i.i.i = and i32 %26, -16384
  %27 = inttoptr i32 %and.i.i.i.i to ptr
  %preempt_count.i.i.i = getelementptr inbounds %struct.thread_info, ptr %27, i32 0, i32 1
  %28 = ptrtoint ptr %preempt_count.i.i.i to i32
  call void @__asan_load4_noabort(i32 %28)
  %29 = load volatile i32, ptr %preempt_count.i.i.i, align 4
  %add.i.i = add i32 %29, 1
  store volatile i32 %add.i.i, ptr %preempt_count.i.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #14, !srcloc !257
  call void @__asan_load4_noabort(i32 ptrtoint (ptr getelementptr inbounds (%struct.tracepoint, ptr @__tracepoint_block_dirty_buffer, i32 0, i32 7) to i32))
  %30 = load volatile ptr, ptr getelementptr inbounds (%struct.tracepoint, ptr @__tracepoint_block_dirty_buffer, i32 0, i32 7), align 4
  %call58 = tail call i32 @rcu_read_lock_sched_held() #14
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call58)
  %tobool59.not = icmp eq i32 %call58, 0
  br i1 %tobool59.not, label %land.lhs.true, label %if.then52.do.end67_crit_edge

if.then52.do.end67_crit_edge:                     ; preds = %if.then52
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.end67

land.lhs.true:                                    ; preds = %if.then52
  %call60 = tail call i32 @debug_lockdep_rcu_enabled() #14
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call60)
  %tobool61.not = icmp eq i32 %call60, 0
  br i1 %tobool61.not, label %land.lhs.true.do.end67_crit_edge, label %land.lhs.true62

land.lhs.true.do.end67_crit_edge:                 ; preds = %land.lhs.true
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.end67

land.lhs.true62:                                  ; preds = %land.lhs.true
  %.b72 = load i1, ptr @trace_block_dirty_buffer.__warned, align 1
  br i1 %.b72, label %land.lhs.true62.do.end67_crit_edge, label %if.then64

land.lhs.true62.do.end67_crit_edge:               ; preds = %land.lhs.true62
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.end67

if.then64:                                        ; preds = %land.lhs.true62
  call void @__sanitizer_cov_trace_pc() #16
  store i1 true, ptr @trace_block_dirty_buffer.__warned, align 1
  tail call void @lockdep_rcu_suspicious(ptr noundef nonnull @.str.10, i32 noundef 63, ptr noundef nonnull @.str.11) #14
  br label %do.end67

do.end67:                                         ; preds = %if.then64, %land.lhs.true62.do.end67_crit_edge, %land.lhs.true.do.end67_crit_edge, %if.then52.do.end67_crit_edge
  tail call void asm sideeffect "", "~{memory}"() #14, !srcloc !258
  %31 = tail call i32 @llvm.read_register.i32(metadata !243) #14
  %and.i.i.i.i86 = and i32 %31, -16384
  %32 = inttoptr i32 %and.i.i.i.i86 to ptr
  %preempt_count.i.i.i87 = getelementptr inbounds %struct.thread_info, ptr %32, i32 0, i32 1
  %33 = ptrtoint ptr %preempt_count.i.i.i87 to i32
  call void @__asan_load4_noabort(i32 %33)
  %34 = load volatile i32, ptr %preempt_count.i.i.i87, align 4
  %sub.i.i = add i32 %34, -1
  store volatile i32 %sub.i.i, ptr %preempt_count.i.i.i87, align 4
  br label %if.end69

if.end69:                                         ; preds = %do.end67, %cpu_online.exit85.if.end69_crit_edge, %cpu_online.exit.if.end69_crit_edge
  ret void
}

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @errseq_set(ptr noundef, i32 noundef) local_unnamed_addr #1

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local void @__brelse(ptr noundef %buf) #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %b_count = getelementptr inbounds %struct.buffer_head, ptr %buf, i32 0, i32 11
  %call.i.i = tail call zeroext i1 @__kasan_check_read(ptr noundef %b_count, i32 noundef 4) #14
  %0 = ptrtoint ptr %b_count to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load volatile i32, ptr %b_count, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %1)
  %tobool.not = icmp eq i32 %1, 0
  br i1 %tobool.not, label %do.end, label %if.then

if.then:                                          ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !268
  %call.i.i.i = tail call zeroext i1 @__kasan_check_write(ptr noundef %b_count, i32 noundef 4) #14
  tail call void @llvm.prefetch.p0(ptr %b_count, i32 1, i32 3, i32 1) #14
  %2 = tail call { i32, i32 } asm sideeffect "@ atomic_sub\0A1:\09ldrex\09$0, [$3]\0A\09sub\09$0, $0, $4\0A\09strex\09$1, $0, [$3]\0A\09teq\09$1, #0\0A\09bne\091b", "=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %b_count, ptr %b_count, i32 1, ptr elementtype(i32) %b_count) #14, !srcloc !269
  br label %return

do.end:                                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.4, i32 noundef 1148, i32 noundef 9, ptr noundef nonnull @.str.5) #14
  br label %return

return:                                           ; preds = %do.end, %if.then
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local void @__bforget(ptr noundef %bh) #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  tail call void @_clear_bit(i32 noundef 1, ptr noundef %bh) #14
  %b_assoc_map = getelementptr inbounds %struct.buffer_head, ptr %bh, i32 0, i32 10
  %0 = ptrtoint ptr %b_assoc_map to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %b_assoc_map, align 4
  %tobool.not = icmp eq ptr %1, null
  br i1 %tobool.not, label %entry.if.end_crit_edge, label %if.then

entry.if.end_crit_edge:                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end

if.then:                                          ; preds = %entry
  %b_page = getelementptr inbounds %struct.buffer_head, ptr %bh, i32 0, i32 2
  %2 = ptrtoint ptr %b_page to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load ptr, ptr %b_page, align 8
  %mapping = getelementptr inbounds %struct.page, ptr %3, i32 0, i32 1, i32 0, i32 1
  %4 = ptrtoint ptr %mapping to i32
  call void @__asan_load4_noabort(i32 %4)
  %5 = load ptr, ptr %mapping, align 4
  %private_lock = getelementptr inbounds %struct.address_space, ptr %5, i32 0, i32 12
  tail call void @_raw_spin_lock(ptr noundef %private_lock) #14
  %b_assoc_buffers = getelementptr inbounds %struct.buffer_head, ptr %bh, i32 0, i32 9
  %call.i.i = tail call zeroext i1 @__list_del_entry_valid(ptr noundef %b_assoc_buffers) #14
  br i1 %call.i.i, label %if.end.i.i, label %if.then.list_del_init.exit_crit_edge

if.then.list_del_init.exit_crit_edge:             ; preds = %if.then
  call void @__sanitizer_cov_trace_pc() #16
  br label %list_del_init.exit

if.end.i.i:                                       ; preds = %if.then
  call void @__sanitizer_cov_trace_pc() #16
  %prev.i.i = getelementptr inbounds %struct.buffer_head, ptr %bh, i32 0, i32 9, i32 1
  %6 = ptrtoint ptr %prev.i.i to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load ptr, ptr %prev.i.i, align 4
  %8 = ptrtoint ptr %b_assoc_buffers to i32
  call void @__asan_load4_noabort(i32 %8)
  %9 = load ptr, ptr %b_assoc_buffers, align 4
  %prev1.i.i.i = getelementptr inbounds %struct.list_head, ptr %9, i32 0, i32 1
  %10 = ptrtoint ptr %prev1.i.i.i to i32
  call void @__asan_store4_noabort(i32 %10)
  store ptr %7, ptr %prev1.i.i.i, align 4
  %11 = ptrtoint ptr %7 to i32
  call void @__asan_store4_noabort(i32 %11)
  store volatile ptr %9, ptr %7, align 4
  br label %list_del_init.exit

list_del_init.exit:                               ; preds = %if.end.i.i, %if.then.list_del_init.exit_crit_edge
  %12 = ptrtoint ptr %b_assoc_buffers to i32
  call void @__asan_store4_noabort(i32 %12)
  store volatile ptr %b_assoc_buffers, ptr %b_assoc_buffers, align 4
  %prev.i3.i = getelementptr inbounds %struct.buffer_head, ptr %bh, i32 0, i32 9, i32 1
  %13 = ptrtoint ptr %prev.i3.i to i32
  call void @__asan_store4_noabort(i32 %13)
  store ptr %b_assoc_buffers, ptr %prev.i3.i, align 4
  %14 = ptrtoint ptr %b_assoc_map to i32
  call void @__asan_store4_noabort(i32 %14)
  store ptr null, ptr %b_assoc_map, align 4
  tail call void @_raw_spin_unlock(ptr noundef %private_lock) #14
  br label %if.end

if.end:                                           ; preds = %list_del_init.exit, %entry.if.end_crit_edge
  %b_count.i = getelementptr inbounds %struct.buffer_head, ptr %bh, i32 0, i32 11
  %call.i.i.i = tail call zeroext i1 @__kasan_check_read(ptr noundef %b_count.i, i32 noundef 4) #14
  %15 = ptrtoint ptr %b_count.i to i32
  call void @__asan_load4_noabort(i32 %15)
  %16 = load volatile i32, ptr %b_count.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %16)
  %tobool.not.i = icmp eq i32 %16, 0
  br i1 %tobool.not.i, label %do.end.i, label %if.then.i

if.then.i:                                        ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !268
  %call.i.i.i.i = tail call zeroext i1 @__kasan_check_write(ptr noundef %b_count.i, i32 noundef 4) #14
  tail call void @llvm.prefetch.p0(ptr %b_count.i, i32 1, i32 3, i32 1) #14
  %17 = tail call { i32, i32 } asm sideeffect "@ atomic_sub\0A1:\09ldrex\09$0, [$3]\0A\09sub\09$0, $0, $4\0A\09strex\09$1, $0, [$3]\0A\09teq\09$1, #0\0A\09bne\091b", "=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %b_count.i, ptr %b_count.i, i32 1, ptr elementtype(i32) %b_count.i) #14, !srcloc !269
  br label %__brelse.exit

do.end.i:                                         ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #16
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.4, i32 noundef 1148, i32 noundef 9, ptr noundef nonnull @.str.5) #14
  br label %__brelse.exit

__brelse.exit:                                    ; preds = %do.end.i, %if.then.i
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal fastcc ptr @__find_get_block_slow(ptr noundef %bdev, i64 noundef %block) unnamed_addr #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %bd_inode1 = getelementptr inbounds %struct.block_device, ptr %bdev, i32 0, i32 7
  %0 = ptrtoint ptr %bd_inode1 to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %bd_inode1, align 4
  %i_mapping = getelementptr inbounds %struct.inode, ptr %1, i32 0, i32 9
  %2 = ptrtoint ptr %i_mapping to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load ptr, ptr %i_mapping, align 8
  %i_blkbits = getelementptr inbounds %struct.inode, ptr %1, i32 0, i32 20
  %4 = ptrtoint ptr %i_blkbits to i32
  call void @__asan_load1_noabort(i32 %4)
  %5 = load i8, ptr %i_blkbits, align 2
  %conv = zext i8 %5 to i32
  %sub = sub nsw i32 12, %conv
  %sh_prom = zext i32 %sub to i64
  %shr = lshr i64 %block, %sh_prom
  %conv2 = trunc i64 %shr to i32
  %call.i = tail call ptr @pagecache_get_page(ptr noundef %3, i32 noundef %conv2, i32 noundef 1, i32 noundef 0) #14
  %tobool.not = icmp eq ptr %call.i, null
  br i1 %tobool.not, label %entry.out_crit_edge, label %if.end

entry.out_crit_edge:                              ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  br label %out

if.end:                                           ; preds = %entry
  %private_lock = getelementptr inbounds %struct.address_space, ptr %3, i32 0, i32 12
  tail call void @_raw_spin_lock(ptr noundef %private_lock) #14
  %6 = ptrtoint ptr %call.i to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load volatile i32, ptr %call.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %7)
  %cmp.i.not.i = icmp eq i32 %7, -1
  br i1 %cmp.i.not.i, label %if.then.i, label %PagePrivate.exit, !prof !262

if.then.i:                                        ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef nonnull %call.i, ptr noundef nonnull @.str.15) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 452, 0\0A.popsection", ""() #14, !srcloc !265
  unreachable

PagePrivate.exit:                                 ; preds = %if.end
  %8 = ptrtoint ptr %call.i to i32
  call void @__asan_load4_noabort(i32 %8)
  %9 = load volatile i32, ptr %call.i, align 4
  %10 = and i32 %9, 8192
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %10)
  %tobool4.not = icmp eq i32 %10, 0
  br i1 %tobool4.not, label %PagePrivate.exit.out_unlock_crit_edge, label %do.body

PagePrivate.exit.out_unlock_crit_edge:            ; preds = %PagePrivate.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %out_unlock

do.body:                                          ; preds = %PagePrivate.exit
  %11 = ptrtoint ptr %call.i to i32
  call void @__asan_load4_noabort(i32 %11)
  %12 = load volatile i32, ptr %call.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %12)
  %cmp.i.not.i66 = icmp eq i32 %12, -1
  br i1 %cmp.i.not.i66, label %if.then.i67, label %PagePrivate.exit70, !prof !262

if.then.i67:                                      ; preds = %do.body
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef nonnull %call.i, ptr noundef nonnull @.str.15) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 452, 0\0A.popsection", ""() #14, !srcloc !265
  unreachable

PagePrivate.exit70:                               ; preds = %do.body
  %13 = ptrtoint ptr %call.i to i32
  call void @__asan_load4_noabort(i32 %13)
  %14 = load volatile i32, ptr %call.i, align 4
  %15 = and i32 %14, 8192
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %15)
  %tobool8.not = icmp eq i32 %15, 0
  br i1 %tobool8.not, label %do.body13, label %do.end19, !prof !262

do.body13:                                        ; preds = %PagePrivate.exit70
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22fs/buffer.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 209, 0\0A.popsection", ""() #14, !srcloc !307
  unreachable

do.end19:                                         ; preds = %PagePrivate.exit70
  %private = getelementptr inbounds %struct.page, ptr %call.i, i32 0, i32 1, i32 0, i32 3
  %16 = ptrtoint ptr %private to i32
  call void @__asan_load4_noabort(i32 %16)
  %17 = load i32, ptr %private, align 4
  %18 = inttoptr i32 %17 to ptr
  br label %do.body20.outer

do.body20.outer:                                  ; preds = %if.end27.thread.do.body20.outer_crit_edge, %do.end19
  %bh.0.ph = phi ptr [ %28, %if.end27.thread.do.body20.outer_crit_edge ], [ %18, %do.end19 ]
  %tobool32.not = phi i1 [ true, %if.end27.thread.do.body20.outer_crit_edge ], [ false, %do.end19 ]
  br label %do.body20

do.body20:                                        ; preds = %if.end27.do.body20_crit_edge, %do.body20.outer
  %bh.0 = phi ptr [ %26, %if.end27.do.body20_crit_edge ], [ %bh.0.ph, %do.body20.outer ]
  %19 = ptrtoint ptr %bh.0 to i32
  call void @__asan_load4_noabort(i32 %19)
  %20 = load volatile i32, ptr %bh.0, align 4
  %21 = and i32 %20, 16
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %21)
  %tobool22.not = icmp eq i32 %21, 0
  br i1 %tobool22.not, label %if.end27.thread, label %if.else

if.else:                                          ; preds = %do.body20
  %b_blocknr = getelementptr inbounds %struct.buffer_head, ptr %bh.0, i32 0, i32 3
  %22 = ptrtoint ptr %b_blocknr to i32
  call void @__asan_load8_noabort(i32 %22)
  %23 = load i64, ptr %b_blocknr, align 8
  call void @__sanitizer_cov_trace_cmp8(i64 %23, i64 %block)
  %cmp = icmp eq i64 %23, %block
  br i1 %cmp, label %if.then25, label %if.end27

if.then25:                                        ; preds = %if.else
  call void @__sanitizer_cov_trace_pc() #16
  %b_count.i = getelementptr inbounds %struct.buffer_head, ptr %bh.0, i32 0, i32 11
  %call.i.i.i = tail call zeroext i1 @__kasan_check_write(ptr noundef %b_count.i, i32 noundef 4) #14
  tail call void @llvm.prefetch.p0(ptr %b_count.i, i32 1, i32 3, i32 1) #14
  %24 = tail call { i32, i32 } asm sideeffect "@ atomic_add\0A1:\09ldrex\09$0, [$3]\0A\09add\09$0, $0, $4\0A\09strex\09$1, $0, [$3]\0A\09teq\09$1, #0\0A\09bne\091b", "=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %b_count.i, ptr %b_count.i, i32 1, ptr elementtype(i32) %b_count.i) #14, !srcloc !278
  br label %out_unlock

if.end27:                                         ; preds = %if.else
  %b_this_page = getelementptr inbounds %struct.buffer_head, ptr %bh.0, i32 0, i32 1
  %25 = ptrtoint ptr %b_this_page to i32
  call void @__asan_load4_noabort(i32 %25)
  %26 = load ptr, ptr %b_this_page, align 4
  %cmp29.not = icmp eq ptr %26, %18
  br i1 %cmp29.not, label %do.end31, label %if.end27.do.body20_crit_edge

if.end27.do.body20_crit_edge:                     ; preds = %if.end27
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.body20

if.end27.thread:                                  ; preds = %do.body20
  %b_this_page74 = getelementptr inbounds %struct.buffer_head, ptr %bh.0, i32 0, i32 1
  %27 = ptrtoint ptr %b_this_page74 to i32
  call void @__asan_load4_noabort(i32 %27)
  %28 = load ptr, ptr %b_this_page74, align 4
  %cmp29.not75 = icmp eq ptr %28, %18
  br i1 %cmp29.not75, label %do.end31.thread, label %if.end27.thread.do.body20.outer_crit_edge

if.end27.thread.do.body20.outer_crit_edge:        ; preds = %if.end27.thread
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.body20.outer

do.end31.thread:                                  ; preds = %if.end27.thread
  call void @__sanitizer_cov_trace_pc() #16
  store i32 1, ptr getelementptr inbounds (%struct.ratelimit_state, ptr @__find_get_block_slow.last_warned, i32 0, i32 6), align 4
  br label %out_unlock

do.end31:                                         ; preds = %if.end27
  store i32 1, ptr getelementptr inbounds (%struct.ratelimit_state, ptr @__find_get_block_slow.last_warned, i32 0, i32 6), align 4
  br i1 %tobool32.not, label %do.end31.out_unlock_crit_edge, label %land.lhs.true

do.end31.out_unlock_crit_edge:                    ; preds = %do.end31
  call void @__sanitizer_cov_trace_pc() #16
  br label %out_unlock

land.lhs.true:                                    ; preds = %do.end31
  %call33 = tail call i32 @___ratelimit(ptr noundef nonnull @__find_get_block_slow.last_warned, ptr noundef nonnull @__func__.__find_get_block_slow) #14
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call33)
  %tobool34.not = icmp eq i32 %call33, 0
  br i1 %tobool34.not, label %land.lhs.true.out_unlock_crit_edge, label %do.end38

land.lhs.true.out_unlock_crit_edge:               ; preds = %land.lhs.true
  call void @__sanitizer_cov_trace_pc() #16
  br label %out_unlock

do.end38:                                         ; preds = %land.lhs.true
  call void @__sanitizer_cov_trace_pc() #16
  %b_blocknr40 = getelementptr inbounds %struct.buffer_head, ptr %18, i32 0, i32 3
  %29 = ptrtoint ptr %b_blocknr40 to i32
  call void @__asan_load8_noabort(i32 %29)
  %30 = load i64, ptr %b_blocknr40, align 8
  %31 = ptrtoint ptr %18 to i32
  call void @__asan_load4_noabort(i32 %31)
  %32 = load i32, ptr %18, align 8
  %b_size = getelementptr inbounds %struct.buffer_head, ptr %18, i32 0, i32 4
  %33 = ptrtoint ptr %b_size to i32
  call void @__asan_load4_noabort(i32 %33)
  %34 = load i32, ptr %b_size, align 8
  %35 = ptrtoint ptr %i_blkbits to i32
  call void @__asan_load1_noabort(i32 %35)
  %36 = load i8, ptr %i_blkbits, align 2
  %conv42 = zext i8 %36 to i32
  %shl = shl nuw i32 1, %conv42
  %call43 = tail call i32 (ptr, ...) @_printk(ptr noundef nonnull @.str.33, i64 noundef %block, i64 noundef %30, i32 noundef %32, i32 noundef %34, ptr noundef %bdev, i32 noundef %shl) #17
  br label %out_unlock

out_unlock:                                       ; preds = %do.end38, %land.lhs.true.out_unlock_crit_edge, %do.end31.out_unlock_crit_edge, %do.end31.thread, %if.then25, %PagePrivate.exit.out_unlock_crit_edge
  %ret.0 = phi ptr [ %bh.0, %if.then25 ], [ null, %do.end38 ], [ null, %land.lhs.true.out_unlock_crit_edge ], [ null, %do.end31.out_unlock_crit_edge ], [ null, %PagePrivate.exit.out_unlock_crit_edge ], [ null, %do.end31.thread ]
  tail call void @_raw_spin_unlock(ptr noundef %private_lock) #14
  %37 = getelementptr inbounds %struct.page, ptr %call.i, i32 0, i32 1
  %38 = ptrtoint ptr %37 to i32
  call void @__asan_load4_noabort(i32 %38)
  %39 = load volatile i32, ptr %37, align 4
  %and.i.i = and i32 %39, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i)
  %tobool.not.i.i = icmp eq i32 %and.i.i, 0
  br i1 %tobool.not.i.i, label %if.end.i.i, label %if.then.i.i, !prof !254

if.then.i.i:                                      ; preds = %out_unlock
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i.i = add i32 %39, -1
  br label %_compound_head.exit.i

if.end.i.i:                                       ; preds = %out_unlock
  call void @__sanitizer_cov_trace_pc() #16
  %40 = ptrtoint ptr %call.i to i32
  br label %_compound_head.exit.i

_compound_head.exit.i:                            ; preds = %if.end.i.i, %if.then.i.i
  %retval.0.i.i = phi i32 [ %sub.i.i, %if.then.i.i ], [ %40, %if.end.i.i ]
  %41 = inttoptr i32 %retval.0.i.i to ptr
  %_refcount.i.i.i.i.i = getelementptr inbounds %struct.page, ptr %41, i32 0, i32 3
  %call.i.i.i.i.i.i.i = tail call zeroext i1 @__kasan_check_read(ptr noundef %_refcount.i.i.i.i.i, i32 noundef 4) #14
  %42 = ptrtoint ptr %_refcount.i.i.i.i.i to i32
  call void @__asan_load4_noabort(i32 %42)
  %43 = load volatile i32, ptr %_refcount.i.i.i.i.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %43)
  %cmp.i.i.i.i = icmp eq i32 %43, 0
  br i1 %cmp.i.i.i.i, label %if.then.i.i.i.i, label %do.end5.i.i.i.i, !prof !262

if.then.i.i.i.i:                                  ; preds = %_compound_head.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %41, ptr noundef nonnull @.str.44) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/mm.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 717, 0\0A.popsection", ""() #14, !srcloc !308
  unreachable

do.end5.i.i.i.i:                                  ; preds = %_compound_head.exit.i
  %call.i.i.i10.i.i.i.i = tail call zeroext i1 @__kasan_check_write(ptr noundef %_refcount.i.i.i.i.i, i32 noundef 4) #14
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !309
  tail call void @llvm.prefetch.p0(ptr %_refcount.i.i.i.i.i, i32 1, i32 3, i32 1) #14
  %44 = tail call { i32, i32 } asm sideeffect "@ atomic_sub_return\0A1:\09ldrex\09$0, [$3]\0A\09sub\09$0, $0, $4\0A\09strex\09$1, $0, [$3]\0A\09teq\09$1, #0\0A\09bne\091b", "=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %_refcount.i.i.i.i.i, ptr %_refcount.i.i.i.i.i, i32 1, ptr elementtype(i32) %_refcount.i.i.i.i.i) #14, !srcloc !310
  %asmresult.i.i.i.i.i.i.i.i.i.i = extractvalue { i32, i32 } %44, 0
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !311
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %asmresult.i.i.i.i.i.i.i.i.i.i)
  %cmp.i.i.i.i.i.i.i = icmp eq i32 %asmresult.i.i.i.i.i.i.i.i.i.i, 0
  callbr void asm sideeffect "1:\0A\09nop\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr getelementptr inbounds (%struct.tracepoint, ptr @__tracepoint_page_ref_mod_and_test, i32 0, i32 1), ptr blockaddress(@__find_get_block_slow, %if.then.i.i.i.i.i)) #14
          to label %folio_put_testzero.exit.i.i [label %if.then.i.i.i.i.i], !srcloc !253

if.then.i.i.i.i.i:                                ; preds = %do.end5.i.i.i.i
  call void @__sanitizer_cov_trace_pc() #16
  %conv.i.i.i.i.i = zext i1 %cmp.i.i.i.i.i.i.i to i32
  tail call void @__page_ref_mod_and_test(ptr noundef %41, i32 noundef -1, i32 noundef %conv.i.i.i.i.i) #14
  br label %folio_put_testzero.exit.i.i

folio_put_testzero.exit.i.i:                      ; preds = %if.then.i.i.i.i.i, %do.end5.i.i.i.i
  br i1 %cmp.i.i.i.i.i.i.i, label %if.then.i4.i, label %folio_put_testzero.exit.i.i.out_crit_edge

folio_put_testzero.exit.i.i.out_crit_edge:        ; preds = %folio_put_testzero.exit.i.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %out

if.then.i4.i:                                     ; preds = %folio_put_testzero.exit.i.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @__put_page(ptr noundef %41) #14
  br label %out

out:                                              ; preds = %if.then.i4.i, %folio_put_testzero.exit.i.i.out_crit_edge, %entry.out_crit_edge
  %ret.1 = phi ptr [ null, %entry.out_crit_edge ], [ %ret.0, %folio_put_testzero.exit.i.i.out_crit_edge ], [ %ret.0, %if.then.i4.i ]
  ret ptr %ret.1
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local ptr @__getblk_gfp(ptr noundef %bdev, i64 noundef %block, i32 noundef %size, i32 noundef %gfp) #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %call = tail call ptr @__find_get_block(ptr noundef %bdev, i64 noundef %block, i32 noundef %size)
  tail call void @__might_sleep(ptr noundef nonnull @.str.4, i32 noundef 1332) #14
  %cmp = icmp eq ptr %call, null
  br i1 %cmp, label %if.then, label %entry.if.end_crit_edge

entry.if.end_crit_edge:                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end

if.then:                                          ; preds = %entry
  %bd_queue.i.i.i = getelementptr inbounds %struct.block_device, ptr %bdev, i32 0, i32 18
  %0 = ptrtoint ptr %bd_queue.i.i.i to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %bd_queue.i.i.i, align 4
  %tobool.not.i.i.i = icmp eq ptr %1, null
  br i1 %tobool.not.i.i.i, label %if.then.bdev_logical_block_size.exit.i_crit_edge, label %land.lhs.true.i.i.i

if.then.bdev_logical_block_size.exit.i_crit_edge: ; preds = %if.then
  call void @__sanitizer_cov_trace_pc() #16
  br label %bdev_logical_block_size.exit.i

land.lhs.true.i.i.i:                              ; preds = %if.then
  call void @__sanitizer_cov_trace_pc() #16
  %logical_block_size.i.i.i = getelementptr inbounds %struct.request_queue, ptr %1, i32 0, i32 37, i32 9
  %2 = ptrtoint ptr %logical_block_size.i.i.i to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load i32, ptr %logical_block_size.i.i.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %3)
  %tobool2.not.i.i.i = icmp eq i32 %3, 0
  %.op.i = add i32 %3, -1
  %phi.bo.i = select i1 %tobool2.not.i.i.i, i32 511, i32 %.op.i
  br label %bdev_logical_block_size.exit.i

bdev_logical_block_size.exit.i:                   ; preds = %land.lhs.true.i.i.i, %if.then.bdev_logical_block_size.exit.i_crit_edge
  %retval1.0.i.i.i = phi i32 [ 511, %if.then.bdev_logical_block_size.exit.i_crit_edge ], [ %phi.bo.i, %land.lhs.true.i.i.i ]
  %and.i = and i32 %retval1.0.i.i.i, %size
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i)
  %tobool.not.i = icmp ne i32 %and.i, 0
  %4 = add i32 %size, -4097
  call void @__sanitizer_cov_trace_const_cmp4(i32 -3585, i32 %4)
  %5 = icmp ult i32 %4, -3585
  %6 = or i1 %5, %tobool.not.i
  br i1 %6, label %do.end.i, label %for.cond.preheader.i, !prof !312

for.cond.preheader.i:                             ; preds = %bdev_logical_block_size.exit.i
  %7 = tail call i32 @llvm.cttz.i32(i32 %size, i1 false) #14, !range !313
  %sub.i.i = sub nsw i32 12, %7
  %sh_prom.i.i = zext i32 %sub.i.i to i64
  %shr.i.i = lshr i64 %block, %sh_prom.i.i
  call void @__sanitizer_cov_trace_const_cmp8(i64 4294967296, i64 %shr.i.i)
  %8 = icmp ult i64 %shr.i.i, 4294967296
  %conv.i.i = trunc i64 %shr.i.i to i32
  br label %for.cond.i

do.end.i:                                         ; preds = %bdev_logical_block_size.exit.i
  %call6.i = tail call i32 (ptr, ...) @_printk(ptr noundef nonnull @.str.34, i32 noundef %size) #17
  %9 = ptrtoint ptr %bd_queue.i.i.i to i32
  call void @__asan_load4_noabort(i32 %9)
  %10 = load ptr, ptr %bd_queue.i.i.i, align 4
  %tobool.not.i.i33.i = icmp eq ptr %10, null
  br i1 %tobool.not.i.i33.i, label %do.end.i.bdev_logical_block_size.exit39.i_crit_edge, label %land.lhs.true.i.i37.i

do.end.i.bdev_logical_block_size.exit39.i_crit_edge: ; preds = %do.end.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %bdev_logical_block_size.exit39.i

land.lhs.true.i.i37.i:                            ; preds = %do.end.i
  call void @__sanitizer_cov_trace_pc() #16
  %logical_block_size.i.i34.i = getelementptr inbounds %struct.request_queue, ptr %10, i32 0, i32 37, i32 9
  %11 = ptrtoint ptr %logical_block_size.i.i34.i to i32
  call void @__asan_load4_noabort(i32 %11)
  %12 = load i32, ptr %logical_block_size.i.i34.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %12)
  %tobool2.not.i.i35.i = icmp eq i32 %12, 0
  %spec.select.i.i36.i = select i1 %tobool2.not.i.i35.i, i32 512, i32 %12
  br label %bdev_logical_block_size.exit39.i

bdev_logical_block_size.exit39.i:                 ; preds = %land.lhs.true.i.i37.i, %do.end.i.bdev_logical_block_size.exit39.i_crit_edge
  %retval1.0.i.i38.i = phi i32 [ 512, %do.end.i.bdev_logical_block_size.exit39.i_crit_edge ], [ %spec.select.i.i36.i, %land.lhs.true.i.i37.i ]
  %call11.i = tail call i32 (ptr, ...) @_printk(ptr noundef nonnull @.str.37, i32 noundef %retval1.0.i.i38.i) #17
  tail call void @dump_stack() #17
  br label %if.end

for.cond.i:                                       ; preds = %cleanup.i.for.cond.i_crit_edge, %for.cond.preheader.i
  %call12.i = tail call ptr @__find_get_block(ptr noundef %bdev, i64 noundef %block, i32 noundef %size) #14
  %tobool13.not.i = icmp eq ptr %call12.i, null
  br i1 %tobool13.not.i, label %if.end15.i, label %for.cond.i.if.end_crit_edge

for.cond.i.if.end_crit_edge:                      ; preds = %for.cond.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end

if.end15.i:                                       ; preds = %for.cond.i
  br i1 %8, label %cleanup.i, label %cleanup.thread43.i, !prof !254

cleanup.thread43.i:                               ; preds = %if.end15.i
  call void @__sanitizer_cov_trace_pc() #16
  %call6.i.i = tail call i32 (ptr, ...) @_printk(ptr noundef nonnull @.str.39, ptr noundef nonnull @.str.40, i64 noundef %block, ptr noundef %bdev) #17
  br label %if.end

cleanup.i:                                        ; preds = %if.end15.i
  %call7.i.i = tail call fastcc i32 @grow_dev_page(ptr noundef %bdev, i64 noundef %block, i32 noundef %conv.i.i, i32 noundef %size, i32 noundef %sub.i.i, i32 noundef %gfp) #14
  %cmp17.i = icmp sgt i32 %call7.i.i, -1
  br i1 %cmp17.i, label %cleanup.i.for.cond.i_crit_edge, label %cleanup.i.if.end_crit_edge

cleanup.i.if.end_crit_edge:                       ; preds = %cleanup.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end

cleanup.i.for.cond.i_crit_edge:                   ; preds = %cleanup.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %for.cond.i

if.end:                                           ; preds = %cleanup.i.if.end_crit_edge, %cleanup.thread43.i, %for.cond.i.if.end_crit_edge, %bdev_logical_block_size.exit39.i, %entry.if.end_crit_edge
  %bh.0 = phi ptr [ %call, %entry.if.end_crit_edge ], [ null, %bdev_logical_block_size.exit39.i ], [ null, %cleanup.thread43.i ], [ null, %cleanup.i.if.end_crit_edge ], [ %call12.i, %for.cond.i.if.end_crit_edge ]
  ret ptr %bh.0
}

; Function Attrs: null_pointer_is_valid
declare dso_local void @__might_sleep(ptr noundef, i32 noundef) local_unnamed_addr #1

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local void @__breadahead(ptr noundef %bdev, i64 noundef %block, i32 noundef %size) #2 align 64 {
entry:
  %bh = alloca ptr, align 4
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %bh) #14
  %call.i = tail call ptr @__getblk_gfp(ptr noundef %bdev, i64 noundef %block, i32 noundef %size, i32 noundef 8) #14
  %0 = ptrtoint ptr %bh to i32
  call void @__asan_store4_noabort(i32 %0)
  store ptr %call.i, ptr %bh, align 4
  %tobool.not = icmp eq ptr %call.i, null
  br i1 %tobool.not, label %entry.if.end_crit_edge, label %if.then.i, !prof !262

entry.if.end_crit_edge:                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end

if.then.i:                                        ; preds = %entry
  call void @ll_rw_block(i32 noundef 0, i32 noundef 524288, i32 noundef 1, ptr noundef nonnull %bh)
  %b_count.i.i = getelementptr inbounds %struct.buffer_head, ptr %call.i, i32 0, i32 11
  %call.i.i.i.i = tail call zeroext i1 @__kasan_check_read(ptr noundef %b_count.i.i, i32 noundef 4) #14
  %1 = ptrtoint ptr %b_count.i.i to i32
  call void @__asan_load4_noabort(i32 %1)
  %2 = load volatile i32, ptr %b_count.i.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %2)
  %tobool.not.i.i = icmp eq i32 %2, 0
  br i1 %tobool.not.i.i, label %do.end.i.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !268
  %call.i.i.i.i.i = tail call zeroext i1 @__kasan_check_write(ptr noundef %b_count.i.i, i32 noundef 4) #14
  tail call void @llvm.prefetch.p0(ptr %b_count.i.i, i32 1, i32 3, i32 1) #14
  %3 = tail call { i32, i32 } asm sideeffect "@ atomic_sub\0A1:\09ldrex\09$0, [$3]\0A\09sub\09$0, $0, $4\0A\09strex\09$1, $0, [$3]\0A\09teq\09$1, #0\0A\09bne\091b", "=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %b_count.i.i, ptr %b_count.i.i, i32 1, ptr elementtype(i32) %b_count.i.i) #14, !srcloc !269
  br label %if.end

do.end.i.i:                                       ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.4, i32 noundef 1148, i32 noundef 9, ptr noundef nonnull @.str.5) #14
  br label %if.end

if.end:                                           ; preds = %do.end.i.i, %if.then.i.i, %entry.if.end_crit_edge
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %bh) #14
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local void @__breadahead_gfp(ptr noundef %bdev, i64 noundef %block, i32 noundef %size, i32 noundef %gfp) #2 align 64 {
entry:
  %bh = alloca ptr, align 4
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %bh) #14
  %call = tail call ptr @__getblk_gfp(ptr noundef %bdev, i64 noundef %block, i32 noundef %size, i32 noundef %gfp)
  %0 = ptrtoint ptr %bh to i32
  call void @__asan_store4_noabort(i32 %0)
  store ptr %call, ptr %bh, align 4
  %tobool.not = icmp eq ptr %call, null
  br i1 %tobool.not, label %entry.if.end_crit_edge, label %if.then.i, !prof !262

entry.if.end_crit_edge:                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end

if.then.i:                                        ; preds = %entry
  call void @ll_rw_block(i32 noundef 0, i32 noundef 524288, i32 noundef 1, ptr noundef nonnull %bh)
  %b_count.i.i = getelementptr inbounds %struct.buffer_head, ptr %call, i32 0, i32 11
  %call.i.i.i.i = tail call zeroext i1 @__kasan_check_read(ptr noundef %b_count.i.i, i32 noundef 4) #14
  %1 = ptrtoint ptr %b_count.i.i to i32
  call void @__asan_load4_noabort(i32 %1)
  %2 = load volatile i32, ptr %b_count.i.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %2)
  %tobool.not.i.i = icmp eq i32 %2, 0
  br i1 %tobool.not.i.i, label %do.end.i.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !268
  %call.i.i.i.i.i = tail call zeroext i1 @__kasan_check_write(ptr noundef %b_count.i.i, i32 noundef 4) #14
  tail call void @llvm.prefetch.p0(ptr %b_count.i.i, i32 1, i32 3, i32 1) #14
  %3 = tail call { i32, i32 } asm sideeffect "@ atomic_sub\0A1:\09ldrex\09$0, [$3]\0A\09sub\09$0, $0, $4\0A\09strex\09$1, $0, [$3]\0A\09teq\09$1, #0\0A\09bne\091b", "=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %b_count.i.i, ptr %b_count.i.i, i32 1, ptr elementtype(i32) %b_count.i.i) #14, !srcloc !269
  br label %if.end

do.end.i.i:                                       ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.4, i32 noundef 1148, i32 noundef 9, ptr noundef nonnull @.str.5) #14
  br label %if.end

if.end:                                           ; preds = %do.end.i.i, %if.then.i.i, %entry.if.end_crit_edge
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %bh) #14
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local ptr @__bread_gfp(ptr noundef %bdev, i64 noundef %block, i32 noundef %size, i32 noundef %gfp) #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %call = tail call ptr @__getblk_gfp(ptr noundef %bdev, i64 noundef %block, i32 noundef %size, i32 noundef %gfp)
  %tobool.not = icmp eq ptr %call, null
  br i1 %tobool.not, label %entry.if.end_crit_edge, label %land.lhs.true, !prof !262

entry.if.end_crit_edge:                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end

land.lhs.true:                                    ; preds = %entry
  %0 = ptrtoint ptr %call to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load volatile i32, ptr %call, align 4
  %and1.i.i = and i32 %1, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and1.i.i)
  %tobool4.not = icmp eq i32 %and1.i.i, 0
  br i1 %tobool4.not, label %if.then, label %land.lhs.true.if.end_crit_edge

land.lhs.true.if.end_crit_edge:                   ; preds = %land.lhs.true
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end

if.then:                                          ; preds = %land.lhs.true
  tail call void @__might_sleep(ptr noundef nonnull @.str.43, i32 noundef 366) #14
  %call.i.i.i.i.i = tail call zeroext i1 @__kasan_check_write(ptr noundef nonnull %call, i32 noundef 4) #14
  %2 = ptrtoint ptr %call to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load volatile i32, ptr %call, align 4
  %and.i.i.i.i.i = and i32 %3, 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i.i.i.i)
  %tobool.not.i.i.i.i.i = icmp eq i32 %and.i.i.i.i.i, 0
  br i1 %tobool.not.i.i.i.i.i, label %trylock_buffer.exit.i.i, label %if.then.if.then.i.i_crit_edge

if.then.if.then.i.i_crit_edge:                    ; preds = %if.then
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.then.i.i

trylock_buffer.exit.i.i:                          ; preds = %if.then
  tail call void @llvm.prefetch.p0(ptr nonnull %call, i32 1, i32 3, i32 1) #14
  %4 = tail call { i32, i32, i32 } asm sideeffect "@ atomic_fetch_or\0A1:\09ldrex\09$0, [$4]\0A\09orr\09$1, $0, $5\0A\09strex\09$2, $1, [$4]\0A\09teq\09$2, #0\0A\09bne\091b", "=&r,=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr nonnull elementtype(i32) %call, ptr nonnull %call, i32 4, ptr nonnull elementtype(i32) %call) #14, !srcloc !284
  %asmresult.i.i.i.i.i.i.i.i = extractvalue { i32, i32, i32 } %4, 0
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !285
  %5 = and i32 %asmresult.i.i.i.i.i.i.i.i, 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %5)
  %tobool.not.not.i.i = icmp eq i32 %5, 0
  br i1 %tobool.not.not.i.i, label %trylock_buffer.exit.i.i.lock_buffer.exit.i_crit_edge, label %trylock_buffer.exit.i.i.if.then.i.i_crit_edge

trylock_buffer.exit.i.i.if.then.i.i_crit_edge:    ; preds = %trylock_buffer.exit.i.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.then.i.i

trylock_buffer.exit.i.i.lock_buffer.exit.i_crit_edge: ; preds = %trylock_buffer.exit.i.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %lock_buffer.exit.i

if.then.i.i:                                      ; preds = %trylock_buffer.exit.i.i.if.then.i.i_crit_edge, %if.then.if.then.i.i_crit_edge
  tail call void @__might_sleep(ptr noundef nonnull @.str.13, i32 noundef 205) #14
  %call.i.i.i.i = tail call i32 @_test_and_set_bit(i32 noundef 2, ptr noundef nonnull %call) #14
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call.i.i.i.i)
  %tobool.not.i.i.i.i = icmp eq i32 %call.i.i.i.i, 0
  br i1 %tobool.not.i.i.i.i, label %if.then.i.i.lock_buffer.exit.i_crit_edge, label %if.end.i.i.i.i

if.then.i.i.lock_buffer.exit.i_crit_edge:         ; preds = %if.then.i.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %lock_buffer.exit.i

if.end.i.i.i.i:                                   ; preds = %if.then.i.i
  call void @__sanitizer_cov_trace_pc() #16
  %call3.i.i.i.i = tail call i32 @out_of_line_wait_on_bit_lock(ptr noundef nonnull %call, i32 noundef 2, ptr noundef nonnull @bit_wait_io, i32 noundef 2) #14
  br label %lock_buffer.exit.i

lock_buffer.exit.i:                               ; preds = %if.end.i.i.i.i, %if.then.i.i.lock_buffer.exit.i_crit_edge, %trylock_buffer.exit.i.i.lock_buffer.exit.i_crit_edge
  %6 = ptrtoint ptr %call to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load volatile i32, ptr %call, align 4
  %and1.i.i.i = and i32 %7, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and1.i.i.i)
  %tobool.not.i = icmp eq i32 %and1.i.i.i, 0
  br i1 %tobool.not.i, label %if.else.i, label %if.then.i

if.then.i:                                        ; preds = %lock_buffer.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  %call.i.i.i17.i = tail call zeroext i1 @__kasan_check_write(ptr noundef nonnull %call, i32 noundef 4) #14
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !259
  tail call void @llvm.prefetch.p0(ptr nonnull %call, i32 1, i32 3, i32 1) #14
  %8 = tail call { i32, i32, i32 } asm sideeffect "@ atomic_fetch_andnot\0A1:\09ldrex\09$0, [$4]\0A\09bic\09$1, $0, $5\0A\09strex\09$2, $1, [$4]\0A\09teq\09$2, #0\0A\09bne\091b", "=&r,=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr nonnull elementtype(i32) %call, ptr nonnull %call, i32 4, ptr nonnull elementtype(i32) %call) #14, !srcloc !260
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !261
  tail call void @wake_up_bit(ptr noundef nonnull %call, i32 noundef 2) #14
  br label %if.end

if.else.i:                                        ; preds = %lock_buffer.exit.i
  %b_count.i.i = getelementptr inbounds %struct.buffer_head, ptr %call, i32 0, i32 11
  %call.i.i.i18.i = tail call zeroext i1 @__kasan_check_write(ptr noundef %b_count.i.i, i32 noundef 4) #14
  tail call void @llvm.prefetch.p0(ptr %b_count.i.i, i32 1, i32 3, i32 1) #14
  %9 = tail call { i32, i32 } asm sideeffect "@ atomic_add\0A1:\09ldrex\09$0, [$3]\0A\09add\09$0, $0, $4\0A\09strex\09$1, $0, [$3]\0A\09teq\09$1, #0\0A\09bne\091b", "=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %b_count.i.i, ptr %b_count.i.i, i32 1, ptr elementtype(i32) %b_count.i.i) #14, !srcloc !278
  %b_end_io.i = getelementptr inbounds %struct.buffer_head, ptr %call, i32 0, i32 7
  %10 = ptrtoint ptr %b_end_io.i to i32
  call void @__asan_store4_noabort(i32 %10)
  store ptr @end_buffer_read_sync, ptr %b_end_io.i, align 4
  tail call fastcc void @submit_bh_wbc(i32 noundef 0, i32 noundef 0, ptr noundef nonnull %call, i32 noundef 0, ptr noundef null) #14
  tail call void @__might_sleep(ptr noundef nonnull @.str.43, i32 noundef 354) #14
  %11 = ptrtoint ptr %call to i32
  call void @__asan_load4_noabort(i32 %11)
  %12 = load volatile i32, ptr %call, align 4
  %13 = and i32 %12, 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %13)
  %tobool.not.i.i = icmp eq i32 %13, 0
  br i1 %tobool.not.i.i, label %if.else.i.wait_on_buffer.exit.i_crit_edge, label %if.then.i20.i

if.else.i.wait_on_buffer.exit.i_crit_edge:        ; preds = %if.else.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %wait_on_buffer.exit.i

if.then.i20.i:                                    ; preds = %if.else.i
  tail call void @__might_sleep(ptr noundef nonnull @.str.13, i32 noundef 98) #14
  %14 = ptrtoint ptr %call to i32
  call void @__asan_load4_noabort(i32 %14)
  %15 = load volatile i32, ptr %call, align 4
  %16 = and i32 %15, 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %16)
  %tobool.not.i.i.i19.i = icmp eq i32 %16, 0
  br i1 %tobool.not.i.i.i19.i, label %if.then.i20.i.wait_on_buffer.exit.i_crit_edge, label %if.end.i.i.i22.i

if.then.i20.i.wait_on_buffer.exit.i_crit_edge:    ; preds = %if.then.i20.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %wait_on_buffer.exit.i

if.end.i.i.i22.i:                                 ; preds = %if.then.i20.i
  call void @__sanitizer_cov_trace_pc() #16
  %call3.i.i.i21.i = tail call i32 @out_of_line_wait_on_bit(ptr noundef nonnull %call, i32 noundef 2, ptr noundef nonnull @bit_wait_io, i32 noundef 2) #14
  br label %wait_on_buffer.exit.i

wait_on_buffer.exit.i:                            ; preds = %if.end.i.i.i22.i, %if.then.i20.i.wait_on_buffer.exit.i_crit_edge, %if.else.i.wait_on_buffer.exit.i_crit_edge
  %17 = ptrtoint ptr %call to i32
  call void @__asan_load4_noabort(i32 %17)
  %18 = load volatile i32, ptr %call, align 4
  %and1.i.i16.i = and i32 %18, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and1.i.i16.i)
  %tobool3.not.i = icmp eq i32 %and1.i.i16.i, 0
  br i1 %tobool3.not.i, label %if.then.i25.i, label %wait_on_buffer.exit.i.if.end_crit_edge

wait_on_buffer.exit.i.if.end_crit_edge:           ; preds = %wait_on_buffer.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end

if.then.i25.i:                                    ; preds = %wait_on_buffer.exit.i
  %call.i.i.i.i24.i = tail call zeroext i1 @__kasan_check_read(ptr noundef %b_count.i.i, i32 noundef 4) #14
  %19 = ptrtoint ptr %b_count.i.i to i32
  call void @__asan_load4_noabort(i32 %19)
  %20 = load volatile i32, ptr %b_count.i.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %20)
  %tobool.not.i.i.i = icmp eq i32 %20, 0
  br i1 %tobool.not.i.i.i, label %do.end.i.i.i, label %if.then.i.i.i

if.then.i.i.i:                                    ; preds = %if.then.i25.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !268
  %call.i.i.i.i.i.i = tail call zeroext i1 @__kasan_check_write(ptr noundef %b_count.i.i, i32 noundef 4) #14
  tail call void @llvm.prefetch.p0(ptr %b_count.i.i, i32 1, i32 3, i32 1) #14
  %21 = tail call { i32, i32 } asm sideeffect "@ atomic_sub\0A1:\09ldrex\09$0, [$3]\0A\09sub\09$0, $0, $4\0A\09strex\09$1, $0, [$3]\0A\09teq\09$1, #0\0A\09bne\091b", "=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %b_count.i.i, ptr %b_count.i.i, i32 1, ptr elementtype(i32) %b_count.i.i) #14, !srcloc !269
  br label %if.end

do.end.i.i.i:                                     ; preds = %if.then.i25.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.4, i32 noundef 1148, i32 noundef 9, ptr noundef nonnull @.str.5) #14
  br label %if.end

if.end:                                           ; preds = %do.end.i.i.i, %if.then.i.i.i, %wait_on_buffer.exit.i.if.end_crit_edge, %if.then.i, %land.lhs.true.if.end_crit_edge, %entry.if.end_crit_edge
  %bh.0 = phi ptr [ %call, %land.lhs.true.if.end_crit_edge ], [ null, %entry.if.end_crit_edge ], [ %call, %if.then.i ], [ %call, %wait_on_buffer.exit.i.if.end_crit_edge ], [ null, %if.then.i.i.i ], [ null, %do.end.i.i.i ]
  ret ptr %bh.0
}

; Function Attrs: nofree norecurse nosync nounwind null_pointer_is_valid readonly sanitize_address sspstrong uwtable(sync)
define dso_local zeroext i1 @has_bh_in_lru(i32 noundef %cpu, ptr nocapture readnone %dummy) #6 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %arrayidx = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %cpu
  %0 = ptrtoint ptr %arrayidx to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load i32, ptr %arrayidx, align 4
  %add = add i32 %1, ptrtoint (ptr @bh_lrus to i32)
  %2 = inttoptr i32 %add to ptr
  %3 = ptrtoint ptr %2 to i32
  call void @__asan_load4_noabort(i32 %3)
  %4 = load ptr, ptr %2, align 4
  %tobool.not = icmp eq ptr %4, null
  br i1 %tobool.not, label %for.cond, label %entry.cleanup_crit_edge

entry.cleanup_crit_edge:                          ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  br label %cleanup

for.cond:                                         ; preds = %entry
  %arrayidx2.1 = getelementptr [16 x ptr], ptr %2, i32 0, i32 1
  %5 = ptrtoint ptr %arrayidx2.1 to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load ptr, ptr %arrayidx2.1, align 4
  %tobool.not.1 = icmp eq ptr %6, null
  br i1 %tobool.not.1, label %for.cond.1, label %for.cond.cleanup_crit_edge

for.cond.cleanup_crit_edge:                       ; preds = %for.cond
  call void @__sanitizer_cov_trace_pc() #16
  br label %cleanup

for.cond.1:                                       ; preds = %for.cond
  %arrayidx2.2 = getelementptr [16 x ptr], ptr %2, i32 0, i32 2
  %7 = ptrtoint ptr %arrayidx2.2 to i32
  call void @__asan_load4_noabort(i32 %7)
  %8 = load ptr, ptr %arrayidx2.2, align 4
  %tobool.not.2 = icmp eq ptr %8, null
  br i1 %tobool.not.2, label %for.cond.2, label %for.cond.1.cleanup_crit_edge

for.cond.1.cleanup_crit_edge:                     ; preds = %for.cond.1
  call void @__sanitizer_cov_trace_pc() #16
  br label %cleanup

for.cond.2:                                       ; preds = %for.cond.1
  %arrayidx2.3 = getelementptr [16 x ptr], ptr %2, i32 0, i32 3
  %9 = ptrtoint ptr %arrayidx2.3 to i32
  call void @__asan_load4_noabort(i32 %9)
  %10 = load ptr, ptr %arrayidx2.3, align 4
  %tobool.not.3 = icmp eq ptr %10, null
  br i1 %tobool.not.3, label %for.cond.3, label %for.cond.2.cleanup_crit_edge

for.cond.2.cleanup_crit_edge:                     ; preds = %for.cond.2
  call void @__sanitizer_cov_trace_pc() #16
  br label %cleanup

for.cond.3:                                       ; preds = %for.cond.2
  %arrayidx2.4 = getelementptr [16 x ptr], ptr %2, i32 0, i32 4
  %11 = ptrtoint ptr %arrayidx2.4 to i32
  call void @__asan_load4_noabort(i32 %11)
  %12 = load ptr, ptr %arrayidx2.4, align 4
  %tobool.not.4 = icmp eq ptr %12, null
  br i1 %tobool.not.4, label %for.cond.4, label %for.cond.3.cleanup_crit_edge

for.cond.3.cleanup_crit_edge:                     ; preds = %for.cond.3
  call void @__sanitizer_cov_trace_pc() #16
  br label %cleanup

for.cond.4:                                       ; preds = %for.cond.3
  %arrayidx2.5 = getelementptr [16 x ptr], ptr %2, i32 0, i32 5
  %13 = ptrtoint ptr %arrayidx2.5 to i32
  call void @__asan_load4_noabort(i32 %13)
  %14 = load ptr, ptr %arrayidx2.5, align 4
  %tobool.not.5 = icmp eq ptr %14, null
  br i1 %tobool.not.5, label %for.cond.5, label %for.cond.4.cleanup_crit_edge

for.cond.4.cleanup_crit_edge:                     ; preds = %for.cond.4
  call void @__sanitizer_cov_trace_pc() #16
  br label %cleanup

for.cond.5:                                       ; preds = %for.cond.4
  %arrayidx2.6 = getelementptr [16 x ptr], ptr %2, i32 0, i32 6
  %15 = ptrtoint ptr %arrayidx2.6 to i32
  call void @__asan_load4_noabort(i32 %15)
  %16 = load ptr, ptr %arrayidx2.6, align 4
  %tobool.not.6 = icmp eq ptr %16, null
  br i1 %tobool.not.6, label %for.cond.6, label %for.cond.5.cleanup_crit_edge

for.cond.5.cleanup_crit_edge:                     ; preds = %for.cond.5
  call void @__sanitizer_cov_trace_pc() #16
  br label %cleanup

for.cond.6:                                       ; preds = %for.cond.5
  %arrayidx2.7 = getelementptr [16 x ptr], ptr %2, i32 0, i32 7
  %17 = ptrtoint ptr %arrayidx2.7 to i32
  call void @__asan_load4_noabort(i32 %17)
  %18 = load ptr, ptr %arrayidx2.7, align 4
  %tobool.not.7 = icmp eq ptr %18, null
  br i1 %tobool.not.7, label %for.cond.7, label %for.cond.6.cleanup_crit_edge

for.cond.6.cleanup_crit_edge:                     ; preds = %for.cond.6
  call void @__sanitizer_cov_trace_pc() #16
  br label %cleanup

for.cond.7:                                       ; preds = %for.cond.6
  %arrayidx2.8 = getelementptr [16 x ptr], ptr %2, i32 0, i32 8
  %19 = ptrtoint ptr %arrayidx2.8 to i32
  call void @__asan_load4_noabort(i32 %19)
  %20 = load ptr, ptr %arrayidx2.8, align 4
  %tobool.not.8 = icmp eq ptr %20, null
  br i1 %tobool.not.8, label %for.cond.8, label %for.cond.7.cleanup_crit_edge

for.cond.7.cleanup_crit_edge:                     ; preds = %for.cond.7
  call void @__sanitizer_cov_trace_pc() #16
  br label %cleanup

for.cond.8:                                       ; preds = %for.cond.7
  %arrayidx2.9 = getelementptr [16 x ptr], ptr %2, i32 0, i32 9
  %21 = ptrtoint ptr %arrayidx2.9 to i32
  call void @__asan_load4_noabort(i32 %21)
  %22 = load ptr, ptr %arrayidx2.9, align 4
  %tobool.not.9 = icmp eq ptr %22, null
  br i1 %tobool.not.9, label %for.cond.9, label %for.cond.8.cleanup_crit_edge

for.cond.8.cleanup_crit_edge:                     ; preds = %for.cond.8
  call void @__sanitizer_cov_trace_pc() #16
  br label %cleanup

for.cond.9:                                       ; preds = %for.cond.8
  %arrayidx2.10 = getelementptr [16 x ptr], ptr %2, i32 0, i32 10
  %23 = ptrtoint ptr %arrayidx2.10 to i32
  call void @__asan_load4_noabort(i32 %23)
  %24 = load ptr, ptr %arrayidx2.10, align 4
  %tobool.not.10 = icmp eq ptr %24, null
  br i1 %tobool.not.10, label %for.cond.10, label %for.cond.9.cleanup_crit_edge

for.cond.9.cleanup_crit_edge:                     ; preds = %for.cond.9
  call void @__sanitizer_cov_trace_pc() #16
  br label %cleanup

for.cond.10:                                      ; preds = %for.cond.9
  %arrayidx2.11 = getelementptr [16 x ptr], ptr %2, i32 0, i32 11
  %25 = ptrtoint ptr %arrayidx2.11 to i32
  call void @__asan_load4_noabort(i32 %25)
  %26 = load ptr, ptr %arrayidx2.11, align 4
  %tobool.not.11 = icmp eq ptr %26, null
  br i1 %tobool.not.11, label %for.cond.11, label %for.cond.10.cleanup_crit_edge

for.cond.10.cleanup_crit_edge:                    ; preds = %for.cond.10
  call void @__sanitizer_cov_trace_pc() #16
  br label %cleanup

for.cond.11:                                      ; preds = %for.cond.10
  %arrayidx2.12 = getelementptr [16 x ptr], ptr %2, i32 0, i32 12
  %27 = ptrtoint ptr %arrayidx2.12 to i32
  call void @__asan_load4_noabort(i32 %27)
  %28 = load ptr, ptr %arrayidx2.12, align 4
  %tobool.not.12 = icmp eq ptr %28, null
  br i1 %tobool.not.12, label %for.cond.12, label %for.cond.11.cleanup_crit_edge

for.cond.11.cleanup_crit_edge:                    ; preds = %for.cond.11
  call void @__sanitizer_cov_trace_pc() #16
  br label %cleanup

for.cond.12:                                      ; preds = %for.cond.11
  %arrayidx2.13 = getelementptr [16 x ptr], ptr %2, i32 0, i32 13
  %29 = ptrtoint ptr %arrayidx2.13 to i32
  call void @__asan_load4_noabort(i32 %29)
  %30 = load ptr, ptr %arrayidx2.13, align 4
  %tobool.not.13 = icmp eq ptr %30, null
  br i1 %tobool.not.13, label %for.cond.13, label %for.cond.12.cleanup_crit_edge

for.cond.12.cleanup_crit_edge:                    ; preds = %for.cond.12
  call void @__sanitizer_cov_trace_pc() #16
  br label %cleanup

for.cond.13:                                      ; preds = %for.cond.12
  %arrayidx2.14 = getelementptr [16 x ptr], ptr %2, i32 0, i32 14
  %31 = ptrtoint ptr %arrayidx2.14 to i32
  call void @__asan_load4_noabort(i32 %31)
  %32 = load ptr, ptr %arrayidx2.14, align 4
  %tobool.not.14 = icmp eq ptr %32, null
  br i1 %tobool.not.14, label %for.cond.14, label %for.cond.13.cleanup_crit_edge

for.cond.13.cleanup_crit_edge:                    ; preds = %for.cond.13
  call void @__sanitizer_cov_trace_pc() #16
  br label %cleanup

for.cond.14:                                      ; preds = %for.cond.13
  call void @__sanitizer_cov_trace_pc() #16
  %arrayidx2.15 = getelementptr [16 x ptr], ptr %2, i32 0, i32 15
  %33 = ptrtoint ptr %arrayidx2.15 to i32
  call void @__asan_load4_noabort(i32 %33)
  %34 = load ptr, ptr %arrayidx2.15, align 4
  %tobool.not.15 = icmp ne ptr %34, null
  br label %cleanup

cleanup:                                          ; preds = %for.cond.14, %for.cond.13.cleanup_crit_edge, %for.cond.12.cleanup_crit_edge, %for.cond.11.cleanup_crit_edge, %for.cond.10.cleanup_crit_edge, %for.cond.9.cleanup_crit_edge, %for.cond.8.cleanup_crit_edge, %for.cond.7.cleanup_crit_edge, %for.cond.6.cleanup_crit_edge, %for.cond.5.cleanup_crit_edge, %for.cond.4.cleanup_crit_edge, %for.cond.3.cleanup_crit_edge, %for.cond.2.cleanup_crit_edge, %for.cond.1.cleanup_crit_edge, %for.cond.cleanup_crit_edge, %entry.cleanup_crit_edge
  %cmp.lcssa = phi i1 [ true, %entry.cleanup_crit_edge ], [ true, %for.cond.cleanup_crit_edge ], [ true, %for.cond.1.cleanup_crit_edge ], [ true, %for.cond.2.cleanup_crit_edge ], [ true, %for.cond.3.cleanup_crit_edge ], [ true, %for.cond.4.cleanup_crit_edge ], [ true, %for.cond.5.cleanup_crit_edge ], [ true, %for.cond.6.cleanup_crit_edge ], [ true, %for.cond.7.cleanup_crit_edge ], [ true, %for.cond.8.cleanup_crit_edge ], [ true, %for.cond.9.cleanup_crit_edge ], [ true, %for.cond.10.cleanup_crit_edge ], [ true, %for.cond.11.cleanup_crit_edge ], [ true, %for.cond.12.cleanup_crit_edge ], [ true, %for.cond.13.cleanup_crit_edge ], [ %tobool.not.15, %for.cond.14 ]
  ret i1 %cmp.lcssa
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local void @invalidate_bh_lrus() #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  tail call void @on_each_cpu_cond_mask(ptr noundef nonnull @has_bh_in_lru, ptr noundef nonnull @invalidate_bh_lru, ptr noundef null, i1 noundef zeroext true, ptr noundef nonnull @__cpu_online_mask) #14
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal void @invalidate_bh_lru(ptr nocapture noundef readnone %arg) #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = tail call i32 @llvm.read_register.i32(metadata !243) #14
  %and.i.i.i = and i32 %0, -16384
  %1 = inttoptr i32 %and.i.i.i to ptr
  %preempt_count.i.i = getelementptr inbounds %struct.thread_info, ptr %1, i32 0, i32 1
  %2 = ptrtoint ptr %preempt_count.i.i to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load volatile i32, ptr %preempt_count.i.i, align 4
  %add.i = add i32 %3, 1
  store volatile i32 %add.i, ptr %preempt_count.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #14, !srcloc !314
  %4 = tail call i32 @llvm.read_register.i32(metadata !243) #14
  %and.i = and i32 %4, -16384
  %5 = inttoptr i32 %and.i to ptr
  %cpu = getelementptr inbounds %struct.thread_info, ptr %5, i32 0, i32 3
  %6 = ptrtoint ptr %cpu to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load i32, ptr %cpu, align 4
  %arrayidx = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %7
  %8 = ptrtoint ptr %arrayidx to i32
  call void @__asan_load4_noabort(i32 %8)
  %9 = load i32, ptr %arrayidx, align 4
  %add = add i32 %9, ptrtoint (ptr @bh_lrus to i32)
  %10 = inttoptr i32 %add to ptr
  br label %for.body.i

for.body.i:                                       ; preds = %brelse.exit.i.for.body.i_crit_edge, %entry
  %i.07.i = phi i32 [ 0, %entry ], [ %inc.i, %brelse.exit.i.for.body.i_crit_edge ]
  %arrayidx.i = getelementptr [16 x ptr], ptr %10, i32 0, i32 %i.07.i
  %11 = ptrtoint ptr %arrayidx.i to i32
  call void @__asan_load4_noabort(i32 %11)
  %12 = load ptr, ptr %arrayidx.i, align 4
  %tobool.not.i.i = icmp eq ptr %12, null
  br i1 %tobool.not.i.i, label %for.body.i.brelse.exit.i_crit_edge, label %if.then.i.i

for.body.i.brelse.exit.i_crit_edge:               ; preds = %for.body.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %brelse.exit.i

if.then.i.i:                                      ; preds = %for.body.i
  %b_count.i.i.i = getelementptr inbounds %struct.buffer_head, ptr %12, i32 0, i32 11
  %call.i.i.i.i.i = tail call zeroext i1 @__kasan_check_read(ptr noundef %b_count.i.i.i, i32 noundef 4) #14
  %13 = ptrtoint ptr %b_count.i.i.i to i32
  call void @__asan_load4_noabort(i32 %13)
  %14 = load volatile i32, ptr %b_count.i.i.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %14)
  %tobool.not.i.i.i = icmp eq i32 %14, 0
  br i1 %tobool.not.i.i.i, label %do.end.i.i.i, label %if.then.i.i.i

if.then.i.i.i:                                    ; preds = %if.then.i.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !268
  %call.i.i.i.i.i.i = tail call zeroext i1 @__kasan_check_write(ptr noundef %b_count.i.i.i, i32 noundef 4) #14
  tail call void @llvm.prefetch.p0(ptr %b_count.i.i.i, i32 1, i32 3, i32 1) #14
  %15 = tail call { i32, i32 } asm sideeffect "@ atomic_sub\0A1:\09ldrex\09$0, [$3]\0A\09sub\09$0, $0, $4\0A\09strex\09$1, $0, [$3]\0A\09teq\09$1, #0\0A\09bne\091b", "=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %b_count.i.i.i, ptr %b_count.i.i.i, i32 1, ptr elementtype(i32) %b_count.i.i.i) #14, !srcloc !269
  br label %brelse.exit.i

do.end.i.i.i:                                     ; preds = %if.then.i.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.4, i32 noundef 1148, i32 noundef 9, ptr noundef nonnull @.str.5) #14
  br label %brelse.exit.i

brelse.exit.i:                                    ; preds = %do.end.i.i.i, %if.then.i.i.i, %for.body.i.brelse.exit.i_crit_edge
  %16 = ptrtoint ptr %arrayidx.i to i32
  call void @__asan_store4_noabort(i32 %16)
  store ptr null, ptr %arrayidx.i, align 4
  %inc.i = add nuw nsw i32 %i.07.i, 1
  %exitcond.not.i = icmp eq i32 %inc.i, 16
  br i1 %exitcond.not.i, label %__invalidate_bh_lrus.exit, label %brelse.exit.i.for.body.i_crit_edge

brelse.exit.i.for.body.i_crit_edge:               ; preds = %brelse.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %for.body.i

__invalidate_bh_lrus.exit:                        ; preds = %brelse.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "", "~{memory}"() #14, !srcloc !315
  %17 = tail call i32 @llvm.read_register.i32(metadata !243) #14
  %and.i.i.i12 = and i32 %17, -16384
  %18 = inttoptr i32 %and.i.i.i12 to ptr
  %preempt_count.i.i13 = getelementptr inbounds %struct.thread_info, ptr %18, i32 0, i32 1
  %19 = ptrtoint ptr %preempt_count.i.i13 to i32
  call void @__asan_load4_noabort(i32 %19)
  %20 = load volatile i32, ptr %preempt_count.i.i13, align 4
  %sub.i = add i32 %20, -1
  store volatile i32 %sub.i, ptr %preempt_count.i.i13, align 4
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local void @invalidate_bh_lrus_cpu() local_unnamed_addr #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ local_save_flags", "=r,~{memory},~{cc}"() #14, !srcloc !280
  %and.i.i = and i32 %0, 128
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i)
  %tobool.not = icmp eq i32 %and.i.i, 0
  tail call void asm sideeffect "\09cpsid i\09\09\09@ arch_local_irq_disable", "~{memory},~{cc}"() #14, !srcloc !282
  br i1 %tobool.not, label %if.then, label %entry.if.end_crit_edge

entry.if.end_crit_edge:                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end

if.then:                                          ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @trace_hardirqs_off() #14
  br label %if.end

if.end:                                           ; preds = %if.then, %entry.if.end_crit_edge
  %1 = tail call i32 @llvm.read_register.i32(metadata !243) #14
  %and.i = and i32 %1, -16384
  %2 = inttoptr i32 %and.i to ptr
  %cpu = getelementptr inbounds %struct.thread_info, ptr %2, i32 0, i32 3
  %3 = ptrtoint ptr %cpu to i32
  call void @__asan_load4_noabort(i32 %3)
  %4 = load i32, ptr %cpu, align 4
  %arrayidx = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %4
  %5 = ptrtoint ptr %arrayidx to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load i32, ptr %arrayidx, align 4
  %add = add i32 %6, ptrtoint (ptr @bh_lrus to i32)
  %7 = inttoptr i32 %add to ptr
  br label %for.body.i

for.body.i:                                       ; preds = %brelse.exit.i.for.body.i_crit_edge, %if.end
  %i.07.i = phi i32 [ 0, %if.end ], [ %inc.i, %brelse.exit.i.for.body.i_crit_edge ]
  %arrayidx.i = getelementptr [16 x ptr], ptr %7, i32 0, i32 %i.07.i
  %8 = ptrtoint ptr %arrayidx.i to i32
  call void @__asan_load4_noabort(i32 %8)
  %9 = load ptr, ptr %arrayidx.i, align 4
  %tobool.not.i.i = icmp eq ptr %9, null
  br i1 %tobool.not.i.i, label %for.body.i.brelse.exit.i_crit_edge, label %if.then.i.i

for.body.i.brelse.exit.i_crit_edge:               ; preds = %for.body.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %brelse.exit.i

if.then.i.i:                                      ; preds = %for.body.i
  %b_count.i.i.i = getelementptr inbounds %struct.buffer_head, ptr %9, i32 0, i32 11
  %call.i.i.i.i.i = tail call zeroext i1 @__kasan_check_read(ptr noundef %b_count.i.i.i, i32 noundef 4) #14
  %10 = ptrtoint ptr %b_count.i.i.i to i32
  call void @__asan_load4_noabort(i32 %10)
  %11 = load volatile i32, ptr %b_count.i.i.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %11)
  %tobool.not.i.i.i = icmp eq i32 %11, 0
  br i1 %tobool.not.i.i.i, label %do.end.i.i.i, label %if.then.i.i.i

if.then.i.i.i:                                    ; preds = %if.then.i.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !268
  %call.i.i.i.i.i.i = tail call zeroext i1 @__kasan_check_write(ptr noundef %b_count.i.i.i, i32 noundef 4) #14
  tail call void @llvm.prefetch.p0(ptr %b_count.i.i.i, i32 1, i32 3, i32 1) #14
  %12 = tail call { i32, i32 } asm sideeffect "@ atomic_sub\0A1:\09ldrex\09$0, [$3]\0A\09sub\09$0, $0, $4\0A\09strex\09$1, $0, [$3]\0A\09teq\09$1, #0\0A\09bne\091b", "=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %b_count.i.i.i, ptr %b_count.i.i.i, i32 1, ptr elementtype(i32) %b_count.i.i.i) #14, !srcloc !269
  br label %brelse.exit.i

do.end.i.i.i:                                     ; preds = %if.then.i.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.4, i32 noundef 1148, i32 noundef 9, ptr noundef nonnull @.str.5) #14
  br label %brelse.exit.i

brelse.exit.i:                                    ; preds = %do.end.i.i.i, %if.then.i.i.i, %for.body.i.brelse.exit.i_crit_edge
  %13 = ptrtoint ptr %arrayidx.i to i32
  call void @__asan_store4_noabort(i32 %13)
  store ptr null, ptr %arrayidx.i, align 4
  %inc.i = add nuw nsw i32 %i.07.i, 1
  %exitcond.not.i = icmp eq i32 %inc.i, 16
  br i1 %exitcond.not.i, label %__invalidate_bh_lrus.exit, label %brelse.exit.i.for.body.i_crit_edge

brelse.exit.i.for.body.i_crit_edge:               ; preds = %brelse.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %for.body.i

__invalidate_bh_lrus.exit:                        ; preds = %brelse.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @trace_hardirqs_on() #14
  tail call void asm sideeffect "\09cpsie i\09\09\09@ arch_local_irq_enable", "~{memory},~{cc}"() #14, !srcloc !283
  ret void
}

; Function Attrs: null_pointer_is_valid
declare dso_local void @trace_hardirqs_off() local_unnamed_addr #1

; Function Attrs: null_pointer_is_valid
declare dso_local void @trace_hardirqs_on() local_unnamed_addr #1

; Function Attrs: null_pointer_is_valid
declare dso_local ptr @page_address(ptr noundef) local_unnamed_addr #1

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local void @block_invalidatepage(ptr noundef %page, i32 noundef %offset, i32 noundef %length) #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %add = add i32 %length, %offset
  %0 = getelementptr inbounds %struct.page, ptr %page, i32 0, i32 1
  %1 = ptrtoint ptr %0 to i32
  call void @__asan_load4_noabort(i32 %1)
  %2 = load volatile i32, ptr %0, align 4
  %and.i.i = and i32 %2, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i)
  %tobool.not.i.i = icmp eq i32 %and.i.i, 0
  br i1 %tobool.not.i.i, label %if.end.i.i, label %if.then.i.i, !prof !254

if.then.i.i:                                      ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i.i = add i32 %2, -1
  br label %_compound_head.exit.i

if.end.i.i:                                       ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  %3 = ptrtoint ptr %page to i32
  br label %_compound_head.exit.i

_compound_head.exit.i:                            ; preds = %if.end.i.i, %if.then.i.i
  %retval.0.i.i = phi i32 [ %sub.i.i, %if.then.i.i ], [ %3, %if.end.i.i ]
  %4 = inttoptr i32 %retval.0.i.i to ptr
  %5 = ptrtoint ptr %4 to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load volatile i32, ptr %4, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %6)
  %cmp.i.not.i = icmp eq i32 %6, -1
  %7 = ptrtoint ptr %0 to i32
  call void @__asan_load4_noabort(i32 %7)
  %8 = load volatile i32, ptr %0, align 4
  %and.i16.i = and i32 %8, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i16.i)
  %tobool.not.i17.i = icmp eq i32 %and.i16.i, 0
  br i1 %cmp.i.not.i, label %if.then.i, label %do.end10.i, !prof !262

if.then.i:                                        ; preds = %_compound_head.exit.i
  br i1 %tobool.not.i17.i, label %if.end.i20.i, label %if.then.i19.i, !prof !254

if.then.i19.i:                                    ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i18.i = add i32 %8, -1
  br label %_compound_head.exit22.i

if.end.i20.i:                                     ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #16
  %9 = ptrtoint ptr %page to i32
  br label %_compound_head.exit22.i

_compound_head.exit22.i:                          ; preds = %if.end.i20.i, %if.then.i19.i
  %retval.0.i21.i = phi i32 [ %sub.i18.i, %if.then.i19.i ], [ %9, %if.end.i20.i ]
  %10 = inttoptr i32 %retval.0.i21.i to ptr
  tail call void @dump_page(ptr noundef %10, ptr noundef nonnull @.str.14) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 414, 0\0A.popsection", ""() #14, !srcloc !263
  unreachable

do.end10.i:                                       ; preds = %_compound_head.exit.i
  br i1 %tobool.not.i17.i, label %if.end.i27.i, label %if.then.i26.i, !prof !254

if.then.i26.i:                                    ; preds = %do.end10.i
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i25.i = add i32 %8, -1
  br label %PageLocked.exit

if.end.i27.i:                                     ; preds = %do.end10.i
  call void @__sanitizer_cov_trace_pc() #16
  %11 = ptrtoint ptr %page to i32
  br label %PageLocked.exit

PageLocked.exit:                                  ; preds = %if.end.i27.i, %if.then.i26.i
  %retval.0.i28.i = phi i32 [ %sub.i25.i, %if.then.i26.i ], [ %11, %if.end.i27.i ]
  %12 = inttoptr i32 %retval.0.i28.i to ptr
  %13 = ptrtoint ptr %12 to i32
  call void @__asan_load4_noabort(i32 %13)
  %14 = load volatile i32, ptr %12, align 4
  %and1.i.i = and i32 %14, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and1.i.i)
  %tobool.not = icmp eq i32 %and1.i.i, 0
  br i1 %tobool.not, label %do.body4, label %do.end9, !prof !262

do.body4:                                         ; preds = %PageLocked.exit
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22fs/buffer.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 1507, 0\0A.popsection", ""() #14, !srcloc !316
  unreachable

do.end9:                                          ; preds = %PageLocked.exit
  %15 = ptrtoint ptr %page to i32
  call void @__asan_load4_noabort(i32 %15)
  %16 = load volatile i32, ptr %page, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %16)
  %cmp.i.not.i89 = icmp eq i32 %16, -1
  br i1 %cmp.i.not.i89, label %if.then.i90, label %PagePrivate.exit, !prof !262

if.then.i90:                                      ; preds = %do.end9
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %page, ptr noundef nonnull @.str.15) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 452, 0\0A.popsection", ""() #14, !srcloc !265
  unreachable

PagePrivate.exit:                                 ; preds = %do.end9
  %17 = ptrtoint ptr %page to i32
  call void @__asan_load4_noabort(i32 %17)
  %18 = load volatile i32, ptr %page, align 4
  %19 = and i32 %18, 8192
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %19)
  %tobool11.not = icmp eq i32 %19, 0
  br i1 %tobool11.not, label %PagePrivate.exit.cleanup68_crit_edge, label %do.body14

PagePrivate.exit.cleanup68_crit_edge:             ; preds = %PagePrivate.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %cleanup68

do.body14:                                        ; preds = %PagePrivate.exit
  call void @__sanitizer_cov_trace_const_cmp4(i32 4096, i32 %add)
  %cmp = icmp ugt i32 %add, 4096
  call void @__sanitizer_cov_trace_cmp4(i32 %add, i32 %length)
  %cmp15 = icmp ult i32 %add, %length
  %spec.select = or i1 %cmp, %cmp15
  br i1 %spec.select, label %do.body23, label %do.body32, !prof !262

do.body23:                                        ; preds = %do.body14
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22fs/buffer.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 1514, 0\0A.popsection", ""() #14, !srcloc !317
  unreachable

do.body32:                                        ; preds = %do.body14
  %20 = ptrtoint ptr %page to i32
  call void @__asan_load4_noabort(i32 %20)
  %21 = load volatile i32, ptr %page, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %21)
  %cmp.i.not.i92 = icmp eq i32 %21, -1
  br i1 %cmp.i.not.i92, label %if.then.i93, label %PagePrivate.exit96, !prof !262

if.then.i93:                                      ; preds = %do.body32
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %page, ptr noundef nonnull @.str.15) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 452, 0\0A.popsection", ""() #14, !srcloc !265
  unreachable

PagePrivate.exit96:                               ; preds = %do.body32
  %22 = ptrtoint ptr %page to i32
  call void @__asan_load4_noabort(i32 %22)
  %23 = load volatile i32, ptr %page, align 4
  %24 = and i32 %23, 8192
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %24)
  %tobool34.not = icmp eq i32 %24, 0
  br i1 %tobool34.not, label %do.body44, label %do.end52, !prof !262

do.body44:                                        ; preds = %PagePrivate.exit96
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22fs/buffer.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 1516, 0\0A.popsection", ""() #14, !srcloc !318
  unreachable

do.end52:                                         ; preds = %PagePrivate.exit96
  %private = getelementptr inbounds %struct.page, ptr %page, i32 0, i32 1, i32 0, i32 3
  %25 = ptrtoint ptr %private to i32
  call void @__asan_load4_noabort(i32 %25)
  %26 = load i32, ptr %private, align 4
  %27 = inttoptr i32 %26 to ptr
  br label %do.body53

do.body53:                                        ; preds = %do.cond61.do.body53_crit_edge, %do.end52
  %bh.0 = phi ptr [ %27, %do.end52 ], [ %31, %do.cond61.do.body53_crit_edge ]
  %curr_off.0 = phi i32 [ 0, %do.end52 ], [ %add54, %do.cond61.do.body53_crit_edge ]
  %b_size = getelementptr inbounds %struct.buffer_head, ptr %bh.0, i32 0, i32 4
  %28 = ptrtoint ptr %b_size to i32
  call void @__asan_load4_noabort(i32 %28)
  %29 = load i32, ptr %b_size, align 8
  %add54 = add i32 %29, %curr_off.0
  %b_this_page = getelementptr inbounds %struct.buffer_head, ptr %bh.0, i32 0, i32 1
  %30 = ptrtoint ptr %b_this_page to i32
  call void @__asan_load4_noabort(i32 %30)
  %31 = load ptr, ptr %b_this_page, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %add54, i32 %add)
  %cmp55 = icmp ugt i32 %add54, %add
  br i1 %cmp55, label %do.body53.cleanup68_crit_edge, label %if.end57

do.body53.cleanup68_crit_edge:                    ; preds = %do.body53
  call void @__sanitizer_cov_trace_pc() #16
  br label %cleanup68

if.end57:                                         ; preds = %do.body53
  call void @__sanitizer_cov_trace_cmp4(i32 %curr_off.0, i32 %offset)
  %cmp58.not = icmp ult i32 %curr_off.0, %offset
  br i1 %cmp58.not, label %if.end57.do.cond61_crit_edge, label %if.then59

if.end57.do.cond61_crit_edge:                     ; preds = %if.end57
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.cond61

if.then59:                                        ; preds = %if.end57
  tail call void @__might_sleep(ptr noundef nonnull @.str.43, i32 noundef 366) #14
  %call.i.i.i.i.i = tail call zeroext i1 @__kasan_check_write(ptr noundef %bh.0, i32 noundef 4) #14
  %32 = ptrtoint ptr %bh.0 to i32
  call void @__asan_load4_noabort(i32 %32)
  %33 = load volatile i32, ptr %bh.0, align 4
  %and.i.i.i.i.i = and i32 %33, 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i.i.i.i)
  %tobool.not.i.i.i.i.i = icmp eq i32 %and.i.i.i.i.i, 0
  br i1 %tobool.not.i.i.i.i.i, label %trylock_buffer.exit.i.i, label %if.then59.if.then.i.i97_crit_edge

if.then59.if.then.i.i97_crit_edge:                ; preds = %if.then59
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.then.i.i97

trylock_buffer.exit.i.i:                          ; preds = %if.then59
  tail call void @llvm.prefetch.p0(ptr %bh.0, i32 1, i32 3, i32 1) #14
  %34 = tail call { i32, i32, i32 } asm sideeffect "@ atomic_fetch_or\0A1:\09ldrex\09$0, [$4]\0A\09orr\09$1, $0, $5\0A\09strex\09$2, $1, [$4]\0A\09teq\09$2, #0\0A\09bne\091b", "=&r,=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %bh.0, ptr %bh.0, i32 4, ptr elementtype(i32) %bh.0) #14, !srcloc !284
  %asmresult.i.i.i.i.i.i.i.i = extractvalue { i32, i32, i32 } %34, 0
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !285
  %35 = and i32 %asmresult.i.i.i.i.i.i.i.i, 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %35)
  %tobool.not.not.i.i = icmp eq i32 %35, 0
  br i1 %tobool.not.not.i.i, label %trylock_buffer.exit.i.i.lock_buffer.exit.i_crit_edge, label %trylock_buffer.exit.i.i.if.then.i.i97_crit_edge

trylock_buffer.exit.i.i.if.then.i.i97_crit_edge:  ; preds = %trylock_buffer.exit.i.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.then.i.i97

trylock_buffer.exit.i.i.lock_buffer.exit.i_crit_edge: ; preds = %trylock_buffer.exit.i.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %lock_buffer.exit.i

if.then.i.i97:                                    ; preds = %trylock_buffer.exit.i.i.if.then.i.i97_crit_edge, %if.then59.if.then.i.i97_crit_edge
  tail call void @__might_sleep(ptr noundef nonnull @.str.13, i32 noundef 205) #14
  %call.i.i.i.i = tail call i32 @_test_and_set_bit(i32 noundef 2, ptr noundef %bh.0) #14
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call.i.i.i.i)
  %tobool.not.i.i.i.i = icmp eq i32 %call.i.i.i.i, 0
  br i1 %tobool.not.i.i.i.i, label %if.then.i.i97.lock_buffer.exit.i_crit_edge, label %if.end.i.i.i.i

if.then.i.i97.lock_buffer.exit.i_crit_edge:       ; preds = %if.then.i.i97
  call void @__sanitizer_cov_trace_pc() #16
  br label %lock_buffer.exit.i

if.end.i.i.i.i:                                   ; preds = %if.then.i.i97
  call void @__sanitizer_cov_trace_pc() #16
  %call3.i.i.i.i = tail call i32 @out_of_line_wait_on_bit_lock(ptr noundef %bh.0, i32 noundef 2, ptr noundef nonnull @bit_wait_io, i32 noundef 2) #14
  br label %lock_buffer.exit.i

lock_buffer.exit.i:                               ; preds = %if.end.i.i.i.i, %if.then.i.i97.lock_buffer.exit.i_crit_edge, %trylock_buffer.exit.i.i.lock_buffer.exit.i_crit_edge
  tail call void @_clear_bit(i32 noundef 1, ptr noundef %bh.0) #14
  %b_bdev.i = getelementptr inbounds %struct.buffer_head, ptr %bh.0, i32 0, i32 6
  %36 = ptrtoint ptr %b_bdev.i to i32
  call void @__asan_store4_noabort(i32 %36)
  store ptr null, ptr %b_bdev.i, align 8
  %37 = ptrtoint ptr %bh.0 to i32
  call void @__asan_load4_noabort(i32 %37)
  %38 = load i32, ptr %bh.0, align 8
  br label %for.cond.i

for.cond.i:                                       ; preds = %__cmpxchg.exit.i.for.cond.i_crit_edge, %lock_buffer.exit.i
  %b_state.0.i = phi i32 [ %38, %lock_buffer.exit.i ], [ %asmresult1.i.i, %__cmpxchg.exit.i.for.cond.i_crit_edge ]
  %call.i.i = tail call zeroext i1 @__kasan_check_write(ptr noundef %bh.0, i32 noundef 4) #14
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !319
  %and.i = and i32 %b_state.0.i, -2361
  tail call void @llvm.prefetch.p0(ptr %bh.0, i32 1, i32 3, i32 1) #14
  br label %do.body.i.i

do.body.i.i:                                      ; preds = %do.body.i.i.do.body.i.i_crit_edge, %for.cond.i
  %39 = tail call { i32, i32 } asm sideeffect "@ __cmpxchg4\0A\09ldrex\09$1, [$2]\0A\09mov\09$0, #0\0A\09teq\09$1, $3\0A\09strexeq $0, $4, [$2]\0A", "=&r,=&r,r,Ir,r,~{memory},~{cc}"(ptr %bh.0, i32 %b_state.0.i, i32 %and.i) #14, !srcloc !320
  %asmresult.i.i = extractvalue { i32, i32 } %39, 0
  %tobool.not.i.i98 = icmp eq i32 %asmresult.i.i, 0
  br i1 %tobool.not.i.i98, label %__cmpxchg.exit.i, label %do.body.i.i.do.body.i.i_crit_edge

do.body.i.i.do.body.i.i_crit_edge:                ; preds = %do.body.i.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.body.i.i

__cmpxchg.exit.i:                                 ; preds = %do.body.i.i
  %asmresult1.i.i = extractvalue { i32, i32 } %39, 1
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !321
  %cmp.i = icmp eq i32 %asmresult1.i.i, %b_state.0.i
  br i1 %cmp.i, label %discard_buffer.exit, label %__cmpxchg.exit.i.for.cond.i_crit_edge

__cmpxchg.exit.i.for.cond.i_crit_edge:            ; preds = %__cmpxchg.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %for.cond.i

discard_buffer.exit:                              ; preds = %__cmpxchg.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  %call.i.i.i26.i = tail call zeroext i1 @__kasan_check_write(ptr noundef %bh.0, i32 noundef 4) #14
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !259
  tail call void @llvm.prefetch.p0(ptr %bh.0, i32 1, i32 3, i32 1) #14
  %40 = tail call { i32, i32, i32 } asm sideeffect "@ atomic_fetch_andnot\0A1:\09ldrex\09$0, [$4]\0A\09bic\09$1, $0, $5\0A\09strex\09$2, $1, [$4]\0A\09teq\09$2, #0\0A\09bne\091b", "=&r,=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %bh.0, ptr %bh.0, i32 4, ptr elementtype(i32) %bh.0) #14, !srcloc !260
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !261
  tail call void @wake_up_bit(ptr noundef %bh.0, i32 noundef 2) #14
  br label %do.cond61

do.cond61:                                        ; preds = %discard_buffer.exit, %if.end57.do.cond61_crit_edge
  %cmp62.not = icmp eq ptr %31, %27
  br i1 %cmp62.not, label %do.end63, label %do.cond61.do.body53_crit_edge

do.cond61.do.body53_crit_edge:                    ; preds = %do.cond61
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.body53

do.end63:                                         ; preds = %do.cond61
  call void @__sanitizer_cov_trace_const_cmp4(i32 4096, i32 %length)
  %cmp64 = icmp eq i32 %length, 4096
  br i1 %cmp64, label %if.then65, label %do.end63.cleanup68_crit_edge

do.end63.cleanup68_crit_edge:                     ; preds = %do.end63
  call void @__sanitizer_cov_trace_pc() #16
  br label %cleanup68

if.then65:                                        ; preds = %do.end63
  call void @__sanitizer_cov_trace_pc() #16
  %call66 = tail call i32 @try_to_release_page(ptr noundef %page, i32 noundef 0) #14
  br label %cleanup68

cleanup68:                                        ; preds = %if.then65, %do.end63.cleanup68_crit_edge, %do.body53.cleanup68_crit_edge, %PagePrivate.exit.cleanup68_crit_edge
  ret void
}

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @try_to_release_page(ptr noundef, i32 noundef) local_unnamed_addr #1

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local void @create_empty_buffers(ptr noundef %page, i32 noundef %blocksize, i32 noundef %b_state) #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %call = tail call ptr @alloc_page_buffers(ptr noundef %page, i32 noundef %blocksize, i1 noundef zeroext true)
  br label %do.body

do.body:                                          ; preds = %do.body.do.body_crit_edge, %entry
  %bh.0 = phi ptr [ %call, %entry ], [ %3, %do.body.do.body_crit_edge ]
  %0 = ptrtoint ptr %bh.0 to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load i32, ptr %bh.0, align 8
  %or = or i32 %1, %b_state
  store i32 %or, ptr %bh.0, align 8
  %b_this_page = getelementptr inbounds %struct.buffer_head, ptr %bh.0, i32 0, i32 1
  %2 = ptrtoint ptr %b_this_page to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load ptr, ptr %b_this_page, align 4
  %tobool.not = icmp eq ptr %3, null
  br i1 %tobool.not, label %do.end, label %do.body.do.body_crit_edge

do.body.do.body_crit_edge:                        ; preds = %do.body
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.body

do.end:                                           ; preds = %do.body
  %b_this_page.le = getelementptr inbounds %struct.buffer_head, ptr %bh.0, i32 0, i32 1
  %4 = ptrtoint ptr %b_this_page.le to i32
  call void @__asan_store4_noabort(i32 %4)
  store ptr %call, ptr %b_this_page.le, align 4
  %mapping = getelementptr inbounds %struct.page, ptr %page, i32 0, i32 1, i32 0, i32 1
  %5 = ptrtoint ptr %mapping to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load ptr, ptr %mapping, align 4
  %private_lock = getelementptr inbounds %struct.address_space, ptr %6, i32 0, i32 12
  tail call void @_raw_spin_lock(ptr noundef %private_lock) #14
  %7 = getelementptr inbounds %struct.page, ptr %page, i32 0, i32 1
  %8 = ptrtoint ptr %7 to i32
  call void @__asan_load4_noabort(i32 %8)
  %9 = load volatile i32, ptr %7, align 4
  %and.i.i67 = and i32 %9, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i67)
  %tobool.not.i.i68 = icmp eq i32 %and.i.i67, 0
  br i1 %tobool.not.i.i68, label %if.end.i.i71, label %if.then.i.i70, !prof !254

if.then.i.i70:                                    ; preds = %do.end
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i.i69 = add i32 %9, -1
  br label %_compound_head.exit.i73

if.end.i.i71:                                     ; preds = %do.end
  call void @__sanitizer_cov_trace_pc() #16
  %10 = ptrtoint ptr %page to i32
  br label %_compound_head.exit.i73

_compound_head.exit.i73:                          ; preds = %if.end.i.i71, %if.then.i.i70
  %retval.0.i.i72 = phi i32 [ %sub.i.i69, %if.then.i.i70 ], [ %10, %if.end.i.i71 ]
  %11 = inttoptr i32 %retval.0.i.i72 to ptr
  %12 = getelementptr inbounds %struct.page, ptr %11, i32 0, i32 1
  %13 = ptrtoint ptr %12 to i32
  call void @__asan_load4_noabort(i32 %13)
  %14 = load volatile i32, ptr %12, align 4
  %and.i.i.i.i = and i32 %14, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i.i.i)
  %tobool.not.i.i.i = icmp eq i32 %and.i.i.i.i, 0
  br i1 %tobool.not.i.i.i, label %folio_flags.exit.i.i, label %if.then.i.i.i, !prof !254

if.then.i.i.i:                                    ; preds = %_compound_head.exit.i73
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %11, ptr noundef nonnull @.str.24) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 260, 0\0A.popsection", ""() #14, !srcloc !292
  unreachable

folio_flags.exit.i.i:                             ; preds = %_compound_head.exit.i73
  %15 = ptrtoint ptr %11 to i32
  call void @__asan_load4_noabort(i32 %15)
  %16 = load volatile i32, ptr %11, align 4
  %17 = and i32 %16, 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %17)
  %tobool.i.not.i = icmp eq i32 %17, 0
  br i1 %tobool.i.not.i, label %lor.lhs.false, label %PageUptodate.exit

PageUptodate.exit:                                ; preds = %folio_flags.exit.i.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !322
  br label %if.then

lor.lhs.false:                                    ; preds = %folio_flags.exit.i.i
  %18 = ptrtoint ptr %7 to i32
  call void @__asan_load4_noabort(i32 %18)
  %19 = load volatile i32, ptr %7, align 4
  %and.i.i = and i32 %19, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i)
  %tobool.not.i.i = icmp eq i32 %and.i.i, 0
  br i1 %tobool.not.i.i, label %if.end.i.i, label %if.then.i.i, !prof !254

if.then.i.i:                                      ; preds = %lor.lhs.false
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i.i = add i32 %19, -1
  br label %_compound_head.exit.i

if.end.i.i:                                       ; preds = %lor.lhs.false
  call void @__sanitizer_cov_trace_pc() #16
  %20 = ptrtoint ptr %page to i32
  br label %_compound_head.exit.i

_compound_head.exit.i:                            ; preds = %if.end.i.i, %if.then.i.i
  %retval.0.i.i = phi i32 [ %sub.i.i, %if.then.i.i ], [ %20, %if.end.i.i ]
  %21 = inttoptr i32 %retval.0.i.i to ptr
  %22 = ptrtoint ptr %21 to i32
  call void @__asan_load4_noabort(i32 %22)
  %23 = load volatile i32, ptr %21, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %23)
  %cmp.i.not.i = icmp eq i32 %23, -1
  %24 = ptrtoint ptr %7 to i32
  call void @__asan_load4_noabort(i32 %24)
  %25 = load volatile i32, ptr %7, align 4
  %and.i13.i = and i32 %25, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i13.i)
  %tobool.not.i14.i = icmp eq i32 %and.i13.i, 0
  br i1 %cmp.i.not.i, label %if.then.i, label %do.end8.i, !prof !262

if.then.i:                                        ; preds = %_compound_head.exit.i
  br i1 %tobool.not.i14.i, label %if.end.i17.i, label %if.then.i16.i, !prof !254

if.then.i16.i:                                    ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i15.i = add i32 %25, -1
  br label %_compound_head.exit19.i

if.end.i17.i:                                     ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #16
  %26 = ptrtoint ptr %page to i32
  br label %_compound_head.exit19.i

_compound_head.exit19.i:                          ; preds = %if.end.i17.i, %if.then.i16.i
  %retval.0.i18.i = phi i32 [ %sub.i15.i, %if.then.i16.i ], [ %26, %if.end.i17.i ]
  %27 = inttoptr i32 %retval.0.i18.i to ptr
  tail call void @dump_page(ptr noundef %27, ptr noundef nonnull @.str.14) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 420, 0\0A.popsection", ""() #14, !srcloc !323
  unreachable

do.end8.i:                                        ; preds = %_compound_head.exit.i
  br i1 %tobool.not.i14.i, label %if.end.i24.i, label %if.then.i23.i, !prof !254

if.then.i23.i:                                    ; preds = %do.end8.i
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i22.i = add i32 %25, -1
  br label %PageDirty.exit

if.end.i24.i:                                     ; preds = %do.end8.i
  call void @__sanitizer_cov_trace_pc() #16
  %28 = ptrtoint ptr %page to i32
  br label %PageDirty.exit

PageDirty.exit:                                   ; preds = %if.end.i24.i, %if.then.i23.i
  %retval.0.i25.i = phi i32 [ %sub.i22.i, %if.then.i23.i ], [ %28, %if.end.i24.i ]
  %29 = inttoptr i32 %retval.0.i25.i to ptr
  %30 = ptrtoint ptr %29 to i32
  call void @__asan_load4_noabort(i32 %30)
  %31 = load volatile i32, ptr %29, align 4
  %32 = and i32 %31, 8
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %32)
  %tobool6.not = icmp eq i32 %32, 0
  br i1 %tobool6.not, label %PageDirty.exit.if.end18_crit_edge, label %PageDirty.exit.if.then_crit_edge

PageDirty.exit.if.then_crit_edge:                 ; preds = %PageDirty.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.then

PageDirty.exit.if.end18_crit_edge:                ; preds = %PageDirty.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end18

if.then:                                          ; preds = %PageDirty.exit.if.then_crit_edge, %PageUptodate.exit
  %33 = ptrtoint ptr %page to i32
  br label %do.body7

do.body7:                                         ; preds = %if.end14.do.body7_crit_edge, %if.then
  %bh.1 = phi ptr [ %call, %if.then ], [ %62, %if.end14.do.body7_crit_edge ]
  %34 = ptrtoint ptr %7 to i32
  call void @__asan_load4_noabort(i32 %34)
  %35 = load volatile i32, ptr %7, align 4
  %and.i.i39 = and i32 %35, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i39)
  %tobool.not.i.i40 = icmp eq i32 %and.i.i39, 0
  br i1 %tobool.not.i.i40, label %do.body7._compound_head.exit.i48_crit_edge, label %if.then.i.i42, !prof !254

do.body7._compound_head.exit.i48_crit_edge:       ; preds = %do.body7
  call void @__sanitizer_cov_trace_pc() #16
  br label %_compound_head.exit.i48

if.then.i.i42:                                    ; preds = %do.body7
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i.i41 = add i32 %35, -1
  br label %_compound_head.exit.i48

_compound_head.exit.i48:                          ; preds = %if.then.i.i42, %do.body7._compound_head.exit.i48_crit_edge
  %retval.0.i.i44 = phi i32 [ %sub.i.i41, %if.then.i.i42 ], [ %33, %do.body7._compound_head.exit.i48_crit_edge ]
  %36 = inttoptr i32 %retval.0.i.i44 to ptr
  %37 = ptrtoint ptr %36 to i32
  call void @__asan_load4_noabort(i32 %37)
  %38 = load volatile i32, ptr %36, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %38)
  %cmp.i.not.i45 = icmp eq i32 %38, -1
  %39 = ptrtoint ptr %7 to i32
  call void @__asan_load4_noabort(i32 %39)
  %40 = load volatile i32, ptr %7, align 4
  %and.i13.i46 = and i32 %40, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i13.i46)
  %tobool.not.i14.i47 = icmp eq i32 %and.i13.i46, 0
  br i1 %cmp.i.not.i45, label %if.then.i49, label %do.end8.i55, !prof !262

if.then.i49:                                      ; preds = %_compound_head.exit.i48
  br i1 %tobool.not.i14.i47, label %if.then.i49._compound_head.exit19.i54_crit_edge, label %if.then.i16.i51, !prof !254

if.then.i49._compound_head.exit19.i54_crit_edge:  ; preds = %if.then.i49
  call void @__sanitizer_cov_trace_pc() #16
  br label %_compound_head.exit19.i54

if.then.i16.i51:                                  ; preds = %if.then.i49
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i15.i50 = add i32 %40, -1
  br label %_compound_head.exit19.i54

_compound_head.exit19.i54:                        ; preds = %if.then.i16.i51, %if.then.i49._compound_head.exit19.i54_crit_edge
  %retval.0.i18.i53 = phi i32 [ %sub.i15.i50, %if.then.i16.i51 ], [ %33, %if.then.i49._compound_head.exit19.i54_crit_edge ]
  %41 = inttoptr i32 %retval.0.i18.i53 to ptr
  tail call void @dump_page(ptr noundef %41, ptr noundef nonnull @.str.14) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 420, 0\0A.popsection", ""() #14, !srcloc !323
  unreachable

do.end8.i55:                                      ; preds = %_compound_head.exit.i48
  br i1 %tobool.not.i14.i47, label %do.end8.i55.PageDirty.exit62_crit_edge, label %if.then.i23.i57, !prof !254

do.end8.i55.PageDirty.exit62_crit_edge:           ; preds = %do.end8.i55
  call void @__sanitizer_cov_trace_pc() #16
  br label %PageDirty.exit62

if.then.i23.i57:                                  ; preds = %do.end8.i55
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i22.i56 = add i32 %40, -1
  br label %PageDirty.exit62

PageDirty.exit62:                                 ; preds = %if.then.i23.i57, %do.end8.i55.PageDirty.exit62_crit_edge
  %retval.0.i25.i59 = phi i32 [ %sub.i22.i56, %if.then.i23.i57 ], [ %33, %do.end8.i55.PageDirty.exit62_crit_edge ]
  %42 = inttoptr i32 %retval.0.i25.i59 to ptr
  %43 = ptrtoint ptr %42 to i32
  call void @__asan_load4_noabort(i32 %43)
  %44 = load volatile i32, ptr %42, align 4
  %45 = and i32 %44, 8
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %45)
  %tobool9.not = icmp eq i32 %45, 0
  br i1 %tobool9.not, label %PageDirty.exit62.if.end_crit_edge, label %if.then10

PageDirty.exit62.if.end_crit_edge:                ; preds = %PageDirty.exit62
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end

if.then10:                                        ; preds = %PageDirty.exit62
  %46 = ptrtoint ptr %bh.1 to i32
  call void @__asan_load4_noabort(i32 %46)
  %47 = load volatile i32, ptr %bh.1, align 4
  %48 = and i32 %47, 2
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %48)
  %tobool.not.i = icmp eq i32 %48, 0
  br i1 %tobool.not.i, label %if.then.i63, label %if.then10.if.end_crit_edge

if.then10.if.end_crit_edge:                       ; preds = %if.then10
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end

if.then.i63:                                      ; preds = %if.then10
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @_set_bit(i32 noundef 1, ptr noundef %bh.1) #14
  br label %if.end

if.end:                                           ; preds = %if.then.i63, %if.then10.if.end_crit_edge, %PageDirty.exit62.if.end_crit_edge
  %49 = ptrtoint ptr %7 to i32
  call void @__asan_load4_noabort(i32 %49)
  %50 = load volatile i32, ptr %7, align 4
  %and.i.i74 = and i32 %50, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i74)
  %tobool.not.i.i75 = icmp eq i32 %and.i.i74, 0
  br i1 %tobool.not.i.i75, label %if.end._compound_head.exit.i82_crit_edge, label %if.then.i.i77, !prof !254

if.end._compound_head.exit.i82_crit_edge:         ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #16
  br label %_compound_head.exit.i82

if.then.i.i77:                                    ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i.i76 = add i32 %50, -1
  br label %_compound_head.exit.i82

_compound_head.exit.i82:                          ; preds = %if.then.i.i77, %if.end._compound_head.exit.i82_crit_edge
  %retval.0.i.i79 = phi i32 [ %sub.i.i76, %if.then.i.i77 ], [ %33, %if.end._compound_head.exit.i82_crit_edge ]
  %51 = inttoptr i32 %retval.0.i.i79 to ptr
  %52 = getelementptr inbounds %struct.page, ptr %51, i32 0, i32 1
  %53 = ptrtoint ptr %52 to i32
  call void @__asan_load4_noabort(i32 %53)
  %54 = load volatile i32, ptr %52, align 4
  %and.i.i.i.i80 = and i32 %54, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i.i.i80)
  %tobool.not.i.i.i81 = icmp eq i32 %and.i.i.i.i80, 0
  br i1 %tobool.not.i.i.i81, label %folio_flags.exit.i.i85, label %if.then.i.i.i83, !prof !254

if.then.i.i.i83:                                  ; preds = %_compound_head.exit.i82
  call void @__sanitizer_cov_trace_pc() #16
  %55 = inttoptr i32 %retval.0.i.i79 to ptr
  tail call void @dump_page(ptr noundef %55, ptr noundef nonnull @.str.24) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 260, 0\0A.popsection", ""() #14, !srcloc !292
  unreachable

folio_flags.exit.i.i85:                           ; preds = %_compound_head.exit.i82
  %56 = ptrtoint ptr %51 to i32
  call void @__asan_load4_noabort(i32 %56)
  %57 = load volatile i32, ptr %51, align 4
  %58 = and i32 %57, 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %58)
  %tobool.i.not.i84 = icmp eq i32 %58, 0
  br i1 %tobool.i.not.i84, label %folio_flags.exit.i.i85.if.end14_crit_edge, label %PageUptodate.exit88

folio_flags.exit.i.i85.if.end14_crit_edge:        ; preds = %folio_flags.exit.i.i85
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end14

PageUptodate.exit88:                              ; preds = %folio_flags.exit.i.i85
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !322
  %59 = ptrtoint ptr %bh.1 to i32
  call void @__asan_load4_noabort(i32 %59)
  %60 = load volatile i32, ptr %bh.1, align 4
  %and1.i.i64 = and i32 %60, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and1.i.i64)
  %tobool.not.i65 = icmp eq i32 %and1.i.i64, 0
  br i1 %tobool.not.i65, label %if.then.i66, label %PageUptodate.exit88.if.end14_crit_edge

PageUptodate.exit88.if.end14_crit_edge:           ; preds = %PageUptodate.exit88
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end14

if.then.i66:                                      ; preds = %PageUptodate.exit88
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @_set_bit(i32 noundef 0, ptr noundef %bh.1) #14
  br label %if.end14

if.end14:                                         ; preds = %if.then.i66, %PageUptodate.exit88.if.end14_crit_edge, %folio_flags.exit.i.i85.if.end14_crit_edge
  %b_this_page15 = getelementptr inbounds %struct.buffer_head, ptr %bh.1, i32 0, i32 1
  %61 = ptrtoint ptr %b_this_page15 to i32
  call void @__asan_load4_noabort(i32 %61)
  %62 = load ptr, ptr %b_this_page15, align 4
  %cmp.not = icmp eq ptr %62, %call
  br i1 %cmp.not, label %if.end14.if.end18_crit_edge, label %if.end14.do.body7_crit_edge

if.end14.do.body7_crit_edge:                      ; preds = %if.end14
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.body7

if.end14.if.end18_crit_edge:                      ; preds = %if.end14
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end18

if.end18:                                         ; preds = %if.end14.if.end18_crit_edge, %PageDirty.exit.if.end18_crit_edge
  tail call fastcc void @attach_page_private(ptr noundef %page, ptr noundef %call)
  %63 = ptrtoint ptr %mapping to i32
  call void @__asan_load4_noabort(i32 %63)
  %64 = load ptr, ptr %mapping, align 4
  %private_lock20 = getelementptr inbounds %struct.address_space, ptr %64, i32 0, i32 12
  tail call void @_raw_spin_unlock(ptr noundef %private_lock20) #14
  ret void
}

; Function Attrs: inlinehint nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal fastcc i32 @PageUptodate(ptr noundef %page) unnamed_addr #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  %0 = getelementptr inbounds %struct.page, ptr %page, i32 0, i32 1
  %1 = ptrtoint ptr %0 to i32
  call void @__asan_load4_noabort(i32 %1)
  %2 = load volatile i32, ptr %0, align 4
  %and.i = and i32 %2, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i)
  %tobool.not.i = icmp eq i32 %and.i, 0
  br i1 %tobool.not.i, label %if.end.i, label %if.then.i, !prof !254

if.then.i:                                        ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i = add i32 %2, -1
  br label %_compound_head.exit

if.end.i:                                         ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  %3 = ptrtoint ptr %page to i32
  br label %_compound_head.exit

_compound_head.exit:                              ; preds = %if.end.i, %if.then.i
  %retval.0.i = phi i32 [ %sub.i, %if.then.i ], [ %3, %if.end.i ]
  %4 = inttoptr i32 %retval.0.i to ptr
  %5 = getelementptr inbounds %struct.page, ptr %4, i32 0, i32 1
  %6 = ptrtoint ptr %5 to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load volatile i32, ptr %5, align 4
  %and.i.i.i = and i32 %7, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i.i)
  %tobool.not.i.i = icmp eq i32 %and.i.i.i, 0
  br i1 %tobool.not.i.i, label %folio_flags.exit.i, label %if.then.i.i, !prof !254

if.then.i.i:                                      ; preds = %_compound_head.exit
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %4, ptr noundef nonnull @.str.24) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 260, 0\0A.popsection", ""() #14, !srcloc !292
  unreachable

folio_flags.exit.i:                               ; preds = %_compound_head.exit
  %8 = ptrtoint ptr %4 to i32
  call void @__asan_load4_noabort(i32 %8)
  %9 = load volatile i32, ptr %4, align 4
  %10 = and i32 %9, 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %10)
  %tobool.i.not = icmp eq i32 %10, 0
  br i1 %tobool.i.not, label %folio_flags.exit.i.folio_test_uptodate.exit_crit_edge, label %do.end.i

folio_flags.exit.i.folio_test_uptodate.exit_crit_edge: ; preds = %folio_flags.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %folio_test_uptodate.exit

do.end.i:                                         ; preds = %folio_flags.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !322
  br label %folio_test_uptodate.exit

folio_test_uptodate.exit:                         ; preds = %do.end.i, %folio_flags.exit.i.folio_test_uptodate.exit_crit_edge
  %.lobit = lshr exact i32 %10, 2
  ret i32 %.lobit
}

; Function Attrs: inlinehint nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal fastcc void @attach_page_private(ptr noundef %page, ptr noundef %data) unnamed_addr #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  %0 = getelementptr inbounds %struct.page, ptr %page, i32 0, i32 1
  %1 = ptrtoint ptr %0 to i32
  call void @__asan_load4_noabort(i32 %1)
  %2 = load volatile i32, ptr %0, align 4
  %and.i = and i32 %2, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i)
  %tobool.not.i = icmp eq i32 %and.i, 0
  br i1 %tobool.not.i, label %if.end.i, label %if.then.i, !prof !254

if.then.i:                                        ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i = add i32 %2, -1
  br label %_compound_head.exit

if.end.i:                                         ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  %3 = ptrtoint ptr %page to i32
  br label %_compound_head.exit

_compound_head.exit:                              ; preds = %if.end.i, %if.then.i
  %retval.0.i = phi i32 [ %sub.i, %if.then.i ], [ %3, %if.end.i ]
  %4 = inttoptr i32 %retval.0.i to ptr
  %_refcount.i.i.i.i = getelementptr inbounds %struct.page, ptr %4, i32 0, i32 3
  %call.i.i.i.i.i.i = tail call zeroext i1 @__kasan_check_read(ptr noundef %_refcount.i.i.i.i, i32 noundef 4) #14
  %5 = ptrtoint ptr %_refcount.i.i.i.i to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load volatile i32, ptr %_refcount.i.i.i.i, align 4
  %add.i.i = add i32 %6, 127
  call void @__sanitizer_cov_trace_const_cmp4(i32 128, i32 %add.i.i)
  %cmp.i.i = icmp ult i32 %add.i.i, 128
  br i1 %cmp.i.i, label %if.then.i.i, label %do.end5.i.i, !prof !262

if.then.i.i:                                      ; preds = %_compound_head.exit
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %4, ptr noundef nonnull @.str.41) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/mm.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 1160, 0\0A.popsection", ""() #14, !srcloc !324
  unreachable

do.end5.i.i:                                      ; preds = %_compound_head.exit
  %call.i.i.i.i9.i.i = tail call zeroext i1 @__kasan_check_write(ptr noundef %_refcount.i.i.i.i, i32 noundef 4) #14
  tail call void @llvm.prefetch.p0(ptr %_refcount.i.i.i.i, i32 1, i32 3, i32 1) #14
  %7 = tail call { i32, i32 } asm sideeffect "@ atomic_add\0A1:\09ldrex\09$0, [$3]\0A\09add\09$0, $0, $4\0A\09strex\09$1, $0, [$3]\0A\09teq\09$1, #0\0A\09bne\091b", "=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %_refcount.i.i.i.i, ptr %_refcount.i.i.i.i, i32 1, ptr elementtype(i32) %_refcount.i.i.i.i) #14, !srcloc !278
  callbr void asm sideeffect "1:\0A\09nop\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr getelementptr inbounds (%struct.tracepoint, ptr @__tracepoint_page_ref_mod, i32 0, i32 1), ptr blockaddress(@attach_page_private, %if.then.i.i.i.i)) #14
          to label %folio_get.exit.i [label %if.then.i.i.i.i], !srcloc !253

if.then.i.i.i.i:                                  ; preds = %do.end5.i.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @__page_ref_mod(ptr noundef %4, i32 noundef 1) #14
  br label %folio_get.exit.i

folio_get.exit.i:                                 ; preds = %if.then.i.i.i.i, %do.end5.i.i
  %private.i = getelementptr inbounds %struct.anon.113, ptr %4, i32 0, i32 4
  %8 = ptrtoint ptr %private.i to i32
  call void @__asan_store4_noabort(i32 %8)
  store ptr %data, ptr %private.i, align 4
  %9 = getelementptr inbounds %struct.page, ptr %4, i32 0, i32 1
  %10 = ptrtoint ptr %9 to i32
  call void @__asan_load4_noabort(i32 %10)
  %11 = load volatile i32, ptr %9, align 4
  %and.i.i.i.i = and i32 %11, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i.i.i)
  %tobool.not.i.i.i = icmp eq i32 %and.i.i.i.i, 0
  br i1 %tobool.not.i.i.i, label %folio_attach_private.exit, label %if.then.i.i.i, !prof !254

if.then.i.i.i:                                    ; preds = %folio_get.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %4, ptr noundef nonnull @.str.24) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 260, 0\0A.popsection", ""() #14, !srcloc !292
  unreachable

folio_attach_private.exit:                        ; preds = %folio_get.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @_set_bit(i32 noundef 13, ptr noundef %4) #14
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local void @clean_bdev_aliases(ptr nocapture noundef readonly %bdev, i64 noundef %block, i64 noundef %len) #2 align 64 {
entry:
  %pvec = alloca %struct.pagevec, align 4
  %index = alloca i32, align 4
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %bd_inode1 = getelementptr inbounds %struct.block_device, ptr %bdev, i32 0, i32 7
  %0 = ptrtoint ptr %bd_inode1 to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %bd_inode1, align 4
  %i_mapping = getelementptr inbounds %struct.inode, ptr %1, i32 0, i32 9
  %2 = ptrtoint ptr %i_mapping to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load ptr, ptr %i_mapping, align 8
  call void @llvm.lifetime.start.p0(i64 64, ptr nonnull %pvec) #14
  %4 = call ptr @memset(ptr %pvec, i32 255, i32 64)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %index) #14
  %i_blkbits = getelementptr inbounds %struct.inode, ptr %1, i32 0, i32 20
  %5 = ptrtoint ptr %i_blkbits to i32
  call void @__asan_load1_noabort(i32 %5)
  %6 = load i8, ptr %i_blkbits, align 2
  %conv = zext i8 %6 to i32
  %sub = sub nsw i32 12, %conv
  %sh_prom = zext i32 %sub to i64
  %shr = lshr i64 %block, %sh_prom
  %conv2 = trunc i64 %shr to i32
  %7 = ptrtoint ptr %index to i32
  call void @__asan_store4_noabort(i32 %7)
  store i32 %conv2, ptr %index, align 4
  %add = add i64 %len, %block
  %sub3 = add i64 %add, -1
  %shr8 = lshr i64 %sub3, %sh_prom
  %conv9 = trunc i64 %shr8 to i32
  %8 = ptrtoint ptr %pvec to i32
  call void @__asan_store1_noabort(i32 %8)
  store i8 0, ptr %pvec, align 4
  %percpu_pvec_drained.i = getelementptr inbounds %struct.pagevec, ptr %pvec, i32 0, i32 1
  %9 = ptrtoint ptr %percpu_pvec_drained.i to i32
  call void @__asan_store1_noabort(i32 %9)
  store i8 0, ptr %percpu_pvec_drained.i, align 1
  br label %while.cond

while.cond:                                       ; preds = %pagevec_release.exit.while.cond_crit_edge, %entry
  %call = call i32 @pagevec_lookup_range(ptr noundef nonnull %pvec, ptr noundef %3, ptr noundef nonnull %index, i32 noundef %conv9) #14
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call)
  %tobool.not = icmp eq i32 %call, 0
  br i1 %tobool.not, label %while.cond.while.end_crit_edge, label %while.body

while.cond.while.end_crit_edge:                   ; preds = %while.cond
  call void @__sanitizer_cov_trace_pc() #16
  br label %while.end

while.body:                                       ; preds = %while.cond
  %10 = ptrtoint ptr %pvec to i32
  call void @__asan_load1_noabort(i32 %10)
  %11 = load i8, ptr %pvec, align 4
  %conv.i = zext i8 %11 to i32
  call void @__sanitizer_cov_trace_const_cmp1(i8 0, i8 %11)
  %cmp105.not = icmp eq i8 %11, 0
  br i1 %cmp105.not, label %while.body.pagevec_release.exit_crit_edge, label %while.body.for.body_crit_edge

while.body.for.body_crit_edge:                    ; preds = %while.body
  br label %for.body

while.body.pagevec_release.exit_crit_edge:        ; preds = %while.body
  call void @__sanitizer_cov_trace_pc() #16
  br label %pagevec_release.exit

for.body:                                         ; preds = %cleanup.for.body_crit_edge, %while.body.for.body_crit_edge
  %i.0106 = phi i32 [ %inc, %cleanup.for.body_crit_edge ], [ 0, %while.body.for.body_crit_edge ]
  %arrayidx = getelementptr %struct.pagevec, ptr %pvec, i32 0, i32 2, i32 %i.0106
  %12 = ptrtoint ptr %arrayidx to i32
  call void @__asan_load4_noabort(i32 %12)
  %13 = load ptr, ptr %arrayidx, align 4
  %14 = ptrtoint ptr %13 to i32
  call void @__asan_load4_noabort(i32 %14)
  %15 = load volatile i32, ptr %13, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %15)
  %cmp.i.not.i = icmp eq i32 %15, -1
  br i1 %cmp.i.not.i, label %if.then.i, label %PagePrivate.exit, !prof !262

if.then.i:                                        ; preds = %for.body
  call void @__sanitizer_cov_trace_pc() #16
  call void @dump_page(ptr noundef %13, ptr noundef nonnull @.str.15) #14
  call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 452, 0\0A.popsection", ""() #14, !srcloc !265
  unreachable

PagePrivate.exit:                                 ; preds = %for.body
  %16 = ptrtoint ptr %13 to i32
  call void @__asan_load4_noabort(i32 %16)
  %17 = load volatile i32, ptr %13, align 4
  %18 = and i32 %17, 8192
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %18)
  %tobool13.not = icmp eq i32 %18, 0
  br i1 %tobool13.not, label %PagePrivate.exit.cleanup_crit_edge, label %if.end

PagePrivate.exit.cleanup_crit_edge:               ; preds = %PagePrivate.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %cleanup

if.end:                                           ; preds = %PagePrivate.exit
  call void @__might_sleep(ptr noundef nonnull @.str.42, i32 noundef 788) #14
  %19 = getelementptr inbounds %struct.page, ptr %13, i32 0, i32 1
  %20 = ptrtoint ptr %19 to i32
  call void @__asan_load4_noabort(i32 %20)
  %21 = load volatile i32, ptr %19, align 4
  %and.i.i = and i32 %21, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i)
  %tobool.not.i.i = icmp eq i32 %and.i.i, 0
  br i1 %tobool.not.i.i, label %if.end.i.i, label %if.then.i.i, !prof !254

if.then.i.i:                                      ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i.i = add i32 %21, -1
  br label %_compound_head.exit.i

if.end.i.i:                                       ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #16
  %22 = ptrtoint ptr %13 to i32
  br label %_compound_head.exit.i

_compound_head.exit.i:                            ; preds = %if.end.i.i, %if.then.i.i
  %retval.0.i.i = phi i32 [ %sub.i.i, %if.then.i.i ], [ %22, %if.end.i.i ]
  %23 = inttoptr i32 %retval.0.i.i to ptr
  %24 = getelementptr inbounds %struct.page, ptr %23, i32 0, i32 1
  %25 = ptrtoint ptr %24 to i32
  call void @__asan_load4_noabort(i32 %25)
  %26 = load volatile i32, ptr %24, align 4
  %and.i.i.i.i = and i32 %26, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i.i.i)
  %tobool.not.i.i.i = icmp eq i32 %and.i.i.i.i, 0
  br i1 %tobool.not.i.i.i, label %folio_flags.exit.i.i, label %if.then.i.i.i, !prof !254

if.then.i.i.i:                                    ; preds = %_compound_head.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  %27 = inttoptr i32 %retval.0.i.i to ptr
  call void @dump_page(ptr noundef %27, ptr noundef nonnull @.str.24) #14
  call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 260, 0\0A.popsection", ""() #14, !srcloc !292
  unreachable

folio_flags.exit.i.i:                             ; preds = %_compound_head.exit.i
  %call.i.i.i.i = call zeroext i1 @__kasan_check_write(ptr noundef %23, i32 noundef 4) #14
  %28 = ptrtoint ptr %23 to i32
  call void @__asan_load4_noabort(i32 %28)
  %29 = load volatile i32, ptr %23, align 4
  %and.i.i4.i.i = and i32 %29, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i4.i.i)
  %tobool.not.i.i.i.i = icmp eq i32 %and.i.i4.i.i, 0
  br i1 %tobool.not.i.i.i.i, label %folio_trylock.exit.i, label %folio_flags.exit.i.i.if.then.i92_crit_edge

folio_flags.exit.i.i.if.then.i92_crit_edge:       ; preds = %folio_flags.exit.i.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.then.i92

folio_trylock.exit.i:                             ; preds = %folio_flags.exit.i.i
  call void @llvm.prefetch.p0(ptr %23, i32 1, i32 3, i32 1) #14
  %30 = call { i32, i32, i32 } asm sideeffect "@ atomic_fetch_or\0A1:\09ldrex\09$0, [$4]\0A\09orr\09$1, $0, $5\0A\09strex\09$2, $1, [$4]\0A\09teq\09$2, #0\0A\09bne\091b", "=&r,=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %23, ptr %23, i32 1, ptr elementtype(i32) %23) #14, !srcloc !284
  %asmresult.i.i.i.i.i.i.i = extractvalue { i32, i32, i32 } %30, 0
  call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !285
  %31 = and i32 %asmresult.i.i.i.i.i.i.i, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %31)
  %phi.cmp.i.i.i = icmp eq i32 %31, 0
  br i1 %phi.cmp.i.i.i, label %folio_trylock.exit.i.lock_page.exit_crit_edge, label %folio_trylock.exit.i.if.then.i92_crit_edge

folio_trylock.exit.i.if.then.i92_crit_edge:       ; preds = %folio_trylock.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.then.i92

folio_trylock.exit.i.lock_page.exit_crit_edge:    ; preds = %folio_trylock.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %lock_page.exit

if.then.i92:                                      ; preds = %folio_trylock.exit.i.if.then.i92_crit_edge, %folio_flags.exit.i.i.if.then.i92_crit_edge
  call void @__folio_lock(ptr noundef %23) #14
  br label %lock_page.exit

lock_page.exit:                                   ; preds = %if.then.i92, %folio_trylock.exit.i.lock_page.exit_crit_edge
  %32 = ptrtoint ptr %13 to i32
  call void @__asan_load4_noabort(i32 %32)
  %33 = load volatile i32, ptr %13, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %33)
  %cmp.i.not.i80 = icmp eq i32 %33, -1
  br i1 %cmp.i.not.i80, label %if.then.i81, label %PagePrivate.exit84, !prof !262

if.then.i81:                                      ; preds = %lock_page.exit
  call void @__sanitizer_cov_trace_pc() #16
  call void @dump_page(ptr noundef %13, ptr noundef nonnull @.str.15) #14
  call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 452, 0\0A.popsection", ""() #14, !srcloc !265
  unreachable

PagePrivate.exit84:                               ; preds = %lock_page.exit
  %34 = ptrtoint ptr %13 to i32
  call void @__asan_load4_noabort(i32 %34)
  %35 = load volatile i32, ptr %13, align 4
  %36 = and i32 %35, 8192
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %36)
  %tobool15.not = icmp eq i32 %36, 0
  br i1 %tobool15.not, label %PagePrivate.exit84.unlock_page_crit_edge, label %do.body

PagePrivate.exit84.unlock_page_crit_edge:         ; preds = %PagePrivate.exit84
  call void @__sanitizer_cov_trace_pc() #16
  br label %unlock_page

do.body:                                          ; preds = %PagePrivate.exit84
  %37 = ptrtoint ptr %13 to i32
  call void @__asan_load4_noabort(i32 %37)
  %38 = load volatile i32, ptr %13, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %38)
  %cmp.i.not.i85 = icmp eq i32 %38, -1
  br i1 %cmp.i.not.i85, label %if.then.i86, label %PagePrivate.exit89, !prof !262

if.then.i86:                                      ; preds = %do.body
  call void @__sanitizer_cov_trace_pc() #16
  call void @dump_page(ptr noundef %13, ptr noundef nonnull @.str.15) #14
  call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 452, 0\0A.popsection", ""() #14, !srcloc !265
  unreachable

PagePrivate.exit89:                               ; preds = %do.body
  %39 = ptrtoint ptr %13 to i32
  call void @__asan_load4_noabort(i32 %39)
  %40 = load volatile i32, ptr %13, align 4
  %41 = and i32 %40, 8192
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %41)
  %tobool19.not = icmp eq i32 %41, 0
  br i1 %tobool19.not, label %do.body24, label %do.end30, !prof !262

do.body24:                                        ; preds = %PagePrivate.exit89
  call void @__sanitizer_cov_trace_pc() #16
  call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22fs/buffer.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 1634, 0\0A.popsection", ""() #14, !srcloc !325
  unreachable

do.end30:                                         ; preds = %PagePrivate.exit89
  %private = getelementptr inbounds %struct.page, ptr %13, i32 0, i32 1, i32 0, i32 3
  %42 = ptrtoint ptr %private to i32
  call void @__asan_load4_noabort(i32 %42)
  %43 = load i32, ptr %private, align 4
  %44 = inttoptr i32 %43 to ptr
  br label %do.body31

do.body31:                                        ; preds = %next.do.body31_crit_edge, %do.end30
  %bh.0 = phi ptr [ %44, %do.end30 ], [ %57, %next.do.body31_crit_edge ]
  %45 = ptrtoint ptr %bh.0 to i32
  call void @__asan_load4_noabort(i32 %45)
  %46 = load volatile i32, ptr %bh.0, align 4
  %47 = and i32 %46, 16
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %47)
  %tobool33.not = icmp eq i32 %47, 0
  br i1 %tobool33.not, label %do.body31.next_crit_edge, label %lor.lhs.false

do.body31.next_crit_edge:                         ; preds = %do.body31
  call void @__sanitizer_cov_trace_pc() #16
  br label %next

lor.lhs.false:                                    ; preds = %do.body31
  %b_blocknr = getelementptr inbounds %struct.buffer_head, ptr %bh.0, i32 0, i32 3
  %48 = ptrtoint ptr %b_blocknr to i32
  call void @__asan_load8_noabort(i32 %48)
  %49 = load i64, ptr %b_blocknr, align 8
  call void @__sanitizer_cov_trace_cmp8(i64 %49, i64 %block)
  %cmp34 = icmp ult i64 %49, %block
  br i1 %cmp34, label %lor.lhs.false.next_crit_edge, label %if.end37

lor.lhs.false.next_crit_edge:                     ; preds = %lor.lhs.false
  call void @__sanitizer_cov_trace_pc() #16
  br label %next

if.end37:                                         ; preds = %lor.lhs.false
  call void @__sanitizer_cov_trace_cmp8(i64 %49, i64 %add)
  %cmp40.not = icmp ult i64 %49, %add
  br i1 %cmp40.not, label %if.end43, label %if.end37.unlock_page_crit_edge

if.end37.unlock_page_crit_edge:                   ; preds = %if.end37
  call void @__sanitizer_cov_trace_pc() #16
  br label %unlock_page

if.end43:                                         ; preds = %if.end37
  call void @_clear_bit(i32 noundef 1, ptr noundef %bh.0) #14
  call void @__might_sleep(ptr noundef nonnull @.str.43, i32 noundef 354) #14
  %50 = ptrtoint ptr %bh.0 to i32
  call void @__asan_load4_noabort(i32 %50)
  %51 = load volatile i32, ptr %bh.0, align 4
  %52 = and i32 %51, 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %52)
  %tobool.not.i = icmp eq i32 %52, 0
  br i1 %tobool.not.i, label %if.end43.wait_on_buffer.exit_crit_edge, label %if.then.i94

if.end43.wait_on_buffer.exit_crit_edge:           ; preds = %if.end43
  call void @__sanitizer_cov_trace_pc() #16
  br label %wait_on_buffer.exit

if.then.i94:                                      ; preds = %if.end43
  call void @__might_sleep(ptr noundef nonnull @.str.13, i32 noundef 98) #14
  %53 = ptrtoint ptr %bh.0 to i32
  call void @__asan_load4_noabort(i32 %53)
  %54 = load volatile i32, ptr %bh.0, align 4
  %55 = and i32 %54, 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %55)
  %tobool.not.i.i.i93 = icmp eq i32 %55, 0
  br i1 %tobool.not.i.i.i93, label %if.then.i94.wait_on_buffer.exit_crit_edge, label %if.end.i.i.i

if.then.i94.wait_on_buffer.exit_crit_edge:        ; preds = %if.then.i94
  call void @__sanitizer_cov_trace_pc() #16
  br label %wait_on_buffer.exit

if.end.i.i.i:                                     ; preds = %if.then.i94
  call void @__sanitizer_cov_trace_pc() #16
  %call3.i.i.i = call i32 @out_of_line_wait_on_bit(ptr noundef %bh.0, i32 noundef 2, ptr noundef nonnull @bit_wait_io, i32 noundef 2) #14
  br label %wait_on_buffer.exit

wait_on_buffer.exit:                              ; preds = %if.end.i.i.i, %if.then.i94.wait_on_buffer.exit_crit_edge, %if.end43.wait_on_buffer.exit_crit_edge
  call void @_clear_bit(i32 noundef 3, ptr noundef %bh.0) #14
  br label %next

next:                                             ; preds = %wait_on_buffer.exit, %lor.lhs.false.next_crit_edge, %do.body31.next_crit_edge
  %b_this_page = getelementptr inbounds %struct.buffer_head, ptr %bh.0, i32 0, i32 1
  %56 = ptrtoint ptr %b_this_page to i32
  call void @__asan_load4_noabort(i32 %56)
  %57 = load ptr, ptr %b_this_page, align 4
  %cmp45.not = icmp eq ptr %57, %44
  br i1 %cmp45.not, label %next.unlock_page_crit_edge, label %next.do.body31_crit_edge

next.do.body31_crit_edge:                         ; preds = %next
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.body31

next.unlock_page_crit_edge:                       ; preds = %next
  call void @__sanitizer_cov_trace_pc() #16
  br label %unlock_page

unlock_page:                                      ; preds = %next.unlock_page_crit_edge, %if.end37.unlock_page_crit_edge, %PagePrivate.exit84.unlock_page_crit_edge
  call void @unlock_page(ptr noundef %13) #14
  br label %cleanup

cleanup:                                          ; preds = %unlock_page, %PagePrivate.exit.cleanup_crit_edge
  %inc = add nuw nsw i32 %i.0106, 1
  %exitcond.not = icmp eq i32 %inc, %conv.i
  br i1 %exitcond.not, label %for.end, label %cleanup.for.body_crit_edge

cleanup.for.body_crit_edge:                       ; preds = %cleanup
  call void @__sanitizer_cov_trace_pc() #16
  br label %for.body

for.end:                                          ; preds = %cleanup
  %58 = ptrtoint ptr %pvec to i32
  call void @__asan_load1_noabort(i32 %58)
  %.pr = load i8, ptr %pvec, align 4
  call void @__sanitizer_cov_trace_const_cmp1(i8 0, i8 %.pr)
  %tobool.not.i95 = icmp eq i8 %.pr, 0
  br i1 %tobool.not.i95, label %for.end.pagevec_release.exit_crit_edge, label %if.then.i96

for.end.pagevec_release.exit_crit_edge:           ; preds = %for.end
  call void @__sanitizer_cov_trace_pc() #16
  br label %pagevec_release.exit

if.then.i96:                                      ; preds = %for.end
  call void @__sanitizer_cov_trace_pc() #16
  call void @__pagevec_release(ptr noundef nonnull %pvec) #14
  br label %pagevec_release.exit

pagevec_release.exit:                             ; preds = %if.then.i96, %for.end.pagevec_release.exit_crit_edge, %while.body.pagevec_release.exit_crit_edge
  call void @__might_resched(ptr noundef nonnull @.str.4, i32 noundef 1651, i32 noundef 0) #14
  %call.i = call i32 @__cond_resched() #14
  %59 = ptrtoint ptr %index to i32
  call void @__asan_load4_noabort(i32 %59)
  %60 = load i32, ptr %index, align 4
  %61 = add i32 %60, -1
  %.not = icmp ult i32 %61, %conv9
  br i1 %.not, label %pagevec_release.exit.while.cond_crit_edge, label %pagevec_release.exit.while.end_crit_edge

pagevec_release.exit.while.end_crit_edge:         ; preds = %pagevec_release.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %while.end

pagevec_release.exit.while.cond_crit_edge:        ; preds = %pagevec_release.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %while.cond

while.end:                                        ; preds = %pagevec_release.exit.while.end_crit_edge, %while.cond.while.end_crit_edge
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %index) #14
  call void @llvm.lifetime.end.p0(i64 64, ptr nonnull %pvec) #14
  ret void
}

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @pagevec_lookup_range(ptr noundef, ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal fastcc void @lock_page(ptr noundef %page) unnamed_addr #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @__might_sleep(ptr noundef nonnull @.str.42, i32 noundef 788) #14
  %0 = getelementptr inbounds %struct.page, ptr %page, i32 0, i32 1
  %1 = ptrtoint ptr %0 to i32
  call void @__asan_load4_noabort(i32 %1)
  %2 = load volatile i32, ptr %0, align 4
  %and.i = and i32 %2, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i)
  %tobool.not.i = icmp eq i32 %and.i, 0
  br i1 %tobool.not.i, label %if.end.i, label %if.then.i, !prof !254

if.then.i:                                        ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i = add i32 %2, -1
  br label %_compound_head.exit

if.end.i:                                         ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  %3 = ptrtoint ptr %page to i32
  br label %_compound_head.exit

_compound_head.exit:                              ; preds = %if.end.i, %if.then.i
  %retval.0.i = phi i32 [ %sub.i, %if.then.i ], [ %3, %if.end.i ]
  %4 = inttoptr i32 %retval.0.i to ptr
  %5 = getelementptr inbounds %struct.page, ptr %4, i32 0, i32 1
  %6 = ptrtoint ptr %5 to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load volatile i32, ptr %5, align 4
  %and.i.i.i = and i32 %7, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i.i)
  %tobool.not.i.i = icmp eq i32 %and.i.i.i, 0
  br i1 %tobool.not.i.i, label %folio_flags.exit.i, label %if.then.i.i, !prof !254

if.then.i.i:                                      ; preds = %_compound_head.exit
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %4, ptr noundef nonnull @.str.24) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 260, 0\0A.popsection", ""() #14, !srcloc !292
  unreachable

folio_flags.exit.i:                               ; preds = %_compound_head.exit
  %call.i.i.i = tail call zeroext i1 @__kasan_check_write(ptr noundef %4, i32 noundef 4) #14
  %8 = ptrtoint ptr %4 to i32
  call void @__asan_load4_noabort(i32 %8)
  %9 = load volatile i32, ptr %4, align 4
  %and.i.i4.i = and i32 %9, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i4.i)
  %tobool.not.i.i.i = icmp eq i32 %and.i.i4.i, 0
  br i1 %tobool.not.i.i.i, label %folio_trylock.exit, label %folio_flags.exit.i.if.then_crit_edge

folio_flags.exit.i.if.then_crit_edge:             ; preds = %folio_flags.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.then

folio_trylock.exit:                               ; preds = %folio_flags.exit.i
  tail call void @llvm.prefetch.p0(ptr %4, i32 1, i32 3, i32 1) #14
  %10 = tail call { i32, i32, i32 } asm sideeffect "@ atomic_fetch_or\0A1:\09ldrex\09$0, [$4]\0A\09orr\09$1, $0, $5\0A\09strex\09$2, $1, [$4]\0A\09teq\09$2, #0\0A\09bne\091b", "=&r,=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %4, ptr %4, i32 1, ptr elementtype(i32) %4) #14, !srcloc !284
  %asmresult.i.i.i.i.i.i = extractvalue { i32, i32, i32 } %10, 0
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !285
  %11 = and i32 %asmresult.i.i.i.i.i.i, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %11)
  %phi.cmp.i.i = icmp eq i32 %11, 0
  br i1 %phi.cmp.i.i, label %folio_trylock.exit.if.end_crit_edge, label %folio_trylock.exit.if.then_crit_edge

folio_trylock.exit.if.then_crit_edge:             ; preds = %folio_trylock.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.then

folio_trylock.exit.if.end_crit_edge:              ; preds = %folio_trylock.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end

if.then:                                          ; preds = %folio_trylock.exit.if.then_crit_edge, %folio_flags.exit.i.if.then_crit_edge
  tail call void @__folio_lock(ptr noundef %4) #14
  br label %if.end

if.end:                                           ; preds = %if.then, %folio_trylock.exit.if.end_crit_edge
  ret void
}

; Function Attrs: null_pointer_is_valid
declare dso_local void @unlock_page(ptr noundef) local_unnamed_addr #1

; Function Attrs: null_pointer_is_valid
declare dso_local void @__might_resched(ptr noundef, i32 noundef, i32 noundef) local_unnamed_addr #1

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @__block_write_full_page(ptr noundef %inode, ptr noundef %page, ptr nocapture noundef readonly %get_block, ptr noundef %wbc, ptr noundef %handler) #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %punt_to_cgroup.i = getelementptr inbounds %struct.writeback_control, ptr %wbc, i32 0, i32 5
  %0 = ptrtoint ptr %punt_to_cgroup.i to i32
  call void @__asan_load2_noabort(i32 %0)
  %bf.load.i = load i16, ptr %punt_to_cgroup.i, align 4
  %1 = and i16 %bf.load.i, 128
  %2 = zext i16 %1 to i32
  %3 = shl nuw nsw i32 %2, 15
  %sync_mode.i = getelementptr inbounds %struct.writeback_control, ptr %wbc, i32 0, i32 4
  %4 = ptrtoint ptr %sync_mode.i to i32
  call void @__asan_load4_noabort(i32 %4)
  %5 = load i32, ptr %sync_mode.i, align 8
  call void @__sanitizer_cov_trace_const_cmp4(i32 1, i32 %5)
  %cmp.i = icmp eq i32 %5, 1
  %6 = or i32 %3, 2048
  call void @__sanitizer_cov_trace_const_cmp2(i16 16384, i16 %bf.load.i)
  %7 = icmp ult i16 %bf.load.i, 16384
  %8 = or i32 %3, 1048576
  %spec.select.i = select i1 %7, i32 %3, i32 %8
  %flags.0.i = select i1 %cmp.i, i32 %6, i32 %spec.select.i
  %call1 = tail call fastcc ptr @create_page_buffers(ptr noundef %page, ptr noundef %inode, i32 noundef 3)
  %b_size = getelementptr inbounds %struct.buffer_head, ptr %call1, i32 0, i32 4
  %9 = ptrtoint ptr %b_size to i32
  call void @__asan_load4_noabort(i32 %9)
  %10 = load i32, ptr %b_size, align 8
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %10)
  %tobool.not.i.i.i = icmp eq i32 %10, 0
  %11 = tail call i32 @llvm.ctlz.i32(i32 %10, i1 true) #14, !range !313
  %sub.i.op.i.i = xor i32 %11, 31
  %sub.i.i300 = select i1 %tobool.not.i.i.i, i32 -1, i32 %sub.i.op.i.i
  %index = getelementptr inbounds %struct.page, ptr %page, i32 0, i32 1, i32 0, i32 2
  %12 = ptrtoint ptr %index to i32
  call void @__asan_load4_noabort(i32 %12)
  %13 = load i32, ptr %index, align 4
  %conv = zext i32 %13 to i64
  %sub = sub nsw i32 12, %sub.i.i300
  %sh_prom = zext i32 %sub to i64
  %shl = shl i64 %conv, %sh_prom
  %call3 = tail call fastcc i64 @i_size_read(ptr noundef %inode)
  %sub4 = add i64 %call3, -1
  %sh_prom5 = zext i32 %sub.i.i300 to i64
  %shr = ashr i64 %sub4, %sh_prom5
  br label %do.body

do.body:                                          ; preds = %if.end46.do.body_crit_edge, %entry
  %bh.0 = phi ptr [ %call1, %entry ], [ %35, %if.end46.do.body_crit_edge ]
  %block.0 = phi i64 [ %shl, %entry ], [ %inc, %if.end46.do.body_crit_edge ]
  call void @__sanitizer_cov_trace_cmp8(i64 %block.0, i64 %shr)
  %cmp = icmp ugt i64 %block.0, %shr
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %do.body
  tail call void @_clear_bit(i32 noundef 1, ptr noundef %bh.0) #14
  %14 = ptrtoint ptr %bh.0 to i32
  call void @__asan_load4_noabort(i32 %14)
  %15 = load volatile i32, ptr %bh.0, align 4
  %and1.i.i = and i32 %15, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and1.i.i)
  %tobool.not.i = icmp eq i32 %and1.i.i, 0
  br i1 %tobool.not.i, label %if.then.i, label %if.then.if.end46_crit_edge

if.then.if.end46_crit_edge:                       ; preds = %if.then
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end46

if.then.i:                                        ; preds = %if.then
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @_set_bit(i32 noundef 0, ptr noundef %bh.0) #14
  br label %if.end46

if.else:                                          ; preds = %do.body
  %16 = ptrtoint ptr %bh.0 to i32
  call void @__asan_load4_noabort(i32 %16)
  %17 = load volatile i32, ptr %bh.0, align 4
  %18 = and i32 %17, 16
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %18)
  %tobool.not = icmp eq i32 %18, 0
  br i1 %tobool.not, label %if.else.land.lhs.true_crit_edge, label %lor.lhs.false

if.else.land.lhs.true_crit_edge:                  ; preds = %if.else
  call void @__sanitizer_cov_trace_pc() #16
  br label %land.lhs.true

lor.lhs.false:                                    ; preds = %if.else
  %19 = ptrtoint ptr %bh.0 to i32
  call void @__asan_load4_noabort(i32 %19)
  %20 = load volatile i32, ptr %bh.0, align 4
  %21 = and i32 %20, 256
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %21)
  %tobool9.not = icmp eq i32 %21, 0
  br i1 %tobool9.not, label %lor.lhs.false.if.end46_crit_edge, label %lor.lhs.false.land.lhs.true_crit_edge

lor.lhs.false.land.lhs.true_crit_edge:            ; preds = %lor.lhs.false
  call void @__sanitizer_cov_trace_pc() #16
  br label %land.lhs.true

lor.lhs.false.if.end46_crit_edge:                 ; preds = %lor.lhs.false
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end46

land.lhs.true:                                    ; preds = %lor.lhs.false.land.lhs.true_crit_edge, %if.else.land.lhs.true_crit_edge
  %22 = ptrtoint ptr %bh.0 to i32
  call void @__asan_load4_noabort(i32 %22)
  %23 = load volatile i32, ptr %bh.0, align 4
  %24 = and i32 %23, 2
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %24)
  %tobool11.not = icmp eq i32 %24, 0
  br i1 %tobool11.not, label %land.lhs.true.if.end46_crit_edge, label %if.then12

land.lhs.true.if.end46_crit_edge:                 ; preds = %land.lhs.true
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end46

if.then12:                                        ; preds = %land.lhs.true
  %b_size13 = getelementptr inbounds %struct.buffer_head, ptr %bh.0, i32 0, i32 4
  %25 = ptrtoint ptr %b_size13 to i32
  call void @__asan_load4_noabort(i32 %25)
  %26 = load i32, ptr %b_size13, align 8
  call void @__sanitizer_cov_trace_cmp4(i32 %26, i32 %10)
  %cmp14.not = icmp eq i32 %26, %10
  br i1 %cmp14.not, label %if.then12.if.end_crit_edge, label %do.end, !prof !254

if.then12.if.end_crit_edge:                       ; preds = %if.then12
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end

do.end:                                           ; preds = %if.then12
  call void @__sanitizer_cov_trace_pc() #16
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.4, i32 noundef 1761, i32 noundef 9, ptr noundef null) #14
  br label %if.end

if.end:                                           ; preds = %do.end, %if.then12.if.end_crit_edge
  %call37 = tail call i32 %get_block(ptr noundef %inode, i64 noundef %block.0, ptr noundef %bh.0, i32 noundef 1) #14
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call37)
  %tobool38.not = icmp eq i32 %call37, 0
  br i1 %tobool38.not, label %if.end40, label %if.end.do.body113_crit_edge

if.end.do.body113_crit_edge:                      ; preds = %if.end
  br label %do.body113

if.end40:                                         ; preds = %if.end
  tail call void @_clear_bit(i32 noundef 8, ptr noundef %bh.0) #14
  %27 = ptrtoint ptr %bh.0 to i32
  call void @__asan_load4_noabort(i32 %27)
  %28 = load volatile i32, ptr %bh.0, align 4
  %29 = and i32 %28, 32
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %29)
  %tobool42.not = icmp eq i32 %29, 0
  br i1 %tobool42.not, label %if.end40.if.end46_crit_edge, label %if.then43

if.end40.if.end46_crit_edge:                      ; preds = %if.end40
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end46

if.then43:                                        ; preds = %if.end40
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @_clear_bit(i32 noundef 5, ptr noundef %bh.0) #14
  %b_bdev.i = getelementptr inbounds %struct.buffer_head, ptr %bh.0, i32 0, i32 6
  %30 = ptrtoint ptr %b_bdev.i to i32
  call void @__asan_load4_noabort(i32 %30)
  %31 = load ptr, ptr %b_bdev.i, align 8
  %b_blocknr.i = getelementptr inbounds %struct.buffer_head, ptr %bh.0, i32 0, i32 3
  %32 = ptrtoint ptr %b_blocknr.i to i32
  call void @__asan_load8_noabort(i32 %32)
  %33 = load i64, ptr %b_blocknr.i, align 8
  tail call void @clean_bdev_aliases(ptr noundef %31, i64 noundef %33, i64 noundef 1) #14
  br label %if.end46

if.end46:                                         ; preds = %if.then43, %if.end40.if.end46_crit_edge, %land.lhs.true.if.end46_crit_edge, %lor.lhs.false.if.end46_crit_edge, %if.then.i, %if.then.if.end46_crit_edge
  %b_this_page = getelementptr inbounds %struct.buffer_head, ptr %bh.0, i32 0, i32 1
  %34 = ptrtoint ptr %b_this_page to i32
  call void @__asan_load4_noabort(i32 %34)
  %35 = load ptr, ptr %b_this_page, align 4
  %inc = add i64 %block.0, 1
  %cmp48.not = icmp eq ptr %35, %call1
  br i1 %cmp48.not, label %if.end46.do.body51_crit_edge, label %if.end46.do.body_crit_edge

if.end46.do.body_crit_edge:                       ; preds = %if.end46
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.body

if.end46.do.body51_crit_edge:                     ; preds = %if.end46
  br label %do.body51

do.body51:                                        ; preds = %do.cond71.do.body51_crit_edge, %if.end46.do.body51_crit_edge
  %bh.1 = phi ptr [ %55, %do.cond71.do.body51_crit_edge ], [ %call1, %if.end46.do.body51_crit_edge ]
  %36 = ptrtoint ptr %bh.1 to i32
  call void @__asan_load4_noabort(i32 %36)
  %37 = load volatile i32, ptr %bh.1, align 4
  %38 = and i32 %37, 16
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %38)
  %tobool53.not = icmp eq i32 %38, 0
  br i1 %tobool53.not, label %do.body51.do.cond71_crit_edge, label %if.end55

do.body51.do.cond71_crit_edge:                    ; preds = %do.body51
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.cond71

if.end55:                                         ; preds = %do.body51
  %39 = ptrtoint ptr %sync_mode.i to i32
  call void @__asan_load4_noabort(i32 %39)
  %40 = load i32, ptr %sync_mode.i, align 8
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %40)
  %cmp56.not = icmp eq i32 %40, 0
  br i1 %cmp56.not, label %if.else59, label %if.then58

if.then58:                                        ; preds = %if.end55
  tail call void @__might_sleep(ptr noundef nonnull @.str.43, i32 noundef 366) #14
  %call.i.i.i.i = tail call zeroext i1 @__kasan_check_write(ptr noundef %bh.1, i32 noundef 4) #14
  %41 = ptrtoint ptr %bh.1 to i32
  call void @__asan_load4_noabort(i32 %41)
  %42 = load volatile i32, ptr %bh.1, align 4
  %and.i.i.i.i = and i32 %42, 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i.i.i)
  %tobool.not.i.i.i.i = icmp eq i32 %and.i.i.i.i, 0
  br i1 %tobool.not.i.i.i.i, label %trylock_buffer.exit.i, label %if.then58.if.then.i302_crit_edge

if.then58.if.then.i302_crit_edge:                 ; preds = %if.then58
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.then.i302

trylock_buffer.exit.i:                            ; preds = %if.then58
  tail call void @llvm.prefetch.p0(ptr %bh.1, i32 1, i32 3, i32 1) #14
  %43 = tail call { i32, i32, i32 } asm sideeffect "@ atomic_fetch_or\0A1:\09ldrex\09$0, [$4]\0A\09orr\09$1, $0, $5\0A\09strex\09$2, $1, [$4]\0A\09teq\09$2, #0\0A\09bne\091b", "=&r,=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %bh.1, ptr %bh.1, i32 4, ptr elementtype(i32) %bh.1) #14, !srcloc !284
  %asmresult.i.i.i.i.i.i.i = extractvalue { i32, i32, i32 } %43, 0
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !285
  %44 = and i32 %asmresult.i.i.i.i.i.i.i, 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %44)
  %tobool.not.not.i = icmp eq i32 %44, 0
  br i1 %tobool.not.not.i, label %trylock_buffer.exit.i.if.end65_crit_edge, label %trylock_buffer.exit.i.if.then.i302_crit_edge

trylock_buffer.exit.i.if.then.i302_crit_edge:     ; preds = %trylock_buffer.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.then.i302

trylock_buffer.exit.i.if.end65_crit_edge:         ; preds = %trylock_buffer.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end65

if.then.i302:                                     ; preds = %trylock_buffer.exit.i.if.then.i302_crit_edge, %if.then58.if.then.i302_crit_edge
  tail call void @__might_sleep(ptr noundef nonnull @.str.13, i32 noundef 205) #14
  %call.i.i.i = tail call i32 @_test_and_set_bit(i32 noundef 2, ptr noundef %bh.1) #14
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call.i.i.i)
  %tobool.not.i.i.i301 = icmp eq i32 %call.i.i.i, 0
  br i1 %tobool.not.i.i.i301, label %if.then.i302.if.end65_crit_edge, label %if.end.i.i.i

if.then.i302.if.end65_crit_edge:                  ; preds = %if.then.i302
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end65

if.end.i.i.i:                                     ; preds = %if.then.i302
  call void @__sanitizer_cov_trace_pc() #16
  %call3.i.i.i = tail call i32 @out_of_line_wait_on_bit_lock(ptr noundef %bh.1, i32 noundef 2, ptr noundef nonnull @bit_wait_io, i32 noundef 2) #14
  br label %if.end65

if.else59:                                        ; preds = %if.end55
  %call.i.i.i303 = tail call zeroext i1 @__kasan_check_write(ptr noundef %bh.1, i32 noundef 4) #14
  %45 = ptrtoint ptr %bh.1 to i32
  call void @__asan_load4_noabort(i32 %45)
  %46 = load volatile i32, ptr %bh.1, align 4
  %and.i.i.i = and i32 %46, 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i.i)
  %tobool.not.i.i.i304 = icmp eq i32 %and.i.i.i, 0
  br i1 %tobool.not.i.i.i304, label %trylock_buffer.exit, label %if.else59.if.then62_crit_edge

if.else59.if.then62_crit_edge:                    ; preds = %if.else59
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.then62

trylock_buffer.exit:                              ; preds = %if.else59
  tail call void @llvm.prefetch.p0(ptr %bh.1, i32 1, i32 3, i32 1) #14
  %47 = tail call { i32, i32, i32 } asm sideeffect "@ atomic_fetch_or\0A1:\09ldrex\09$0, [$4]\0A\09orr\09$1, $0, $5\0A\09strex\09$2, $1, [$4]\0A\09teq\09$2, #0\0A\09bne\091b", "=&r,=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %bh.1, ptr %bh.1, i32 4, ptr elementtype(i32) %bh.1) #14, !srcloc !284
  %asmresult.i.i.i.i.i.i = extractvalue { i32, i32, i32 } %47, 0
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !285
  %48 = and i32 %asmresult.i.i.i.i.i.i, 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %48)
  %tobool61.not.not = icmp eq i32 %48, 0
  br i1 %tobool61.not.not, label %trylock_buffer.exit.if.end65_crit_edge, label %trylock_buffer.exit.if.then62_crit_edge

trylock_buffer.exit.if.then62_crit_edge:          ; preds = %trylock_buffer.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.then62

trylock_buffer.exit.if.end65_crit_edge:           ; preds = %trylock_buffer.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end65

if.then62:                                        ; preds = %trylock_buffer.exit.if.then62_crit_edge, %if.else59.if.then62_crit_edge
  %call63 = tail call zeroext i1 @redirty_page_for_writepage(ptr noundef %wbc, ptr noundef %page) #14
  br label %do.cond71

if.end65:                                         ; preds = %trylock_buffer.exit.if.end65_crit_edge, %if.end.i.i.i, %if.then.i302.if.end65_crit_edge, %trylock_buffer.exit.i.if.end65_crit_edge
  %call.i = tail call i32 @_test_and_clear_bit(i32 noundef 1, ptr noundef %bh.1) #14
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call.i)
  %tobool67.not = icmp eq i32 %call.i, 0
  br i1 %tobool67.not, label %if.else69, label %if.then68

if.then68:                                        ; preds = %if.end65
  %b_end_io.i = getelementptr inbounds %struct.buffer_head, ptr %bh.1, i32 0, i32 7
  %49 = ptrtoint ptr %b_end_io.i to i32
  call void @__asan_store4_noabort(i32 %49)
  store ptr %handler, ptr %b_end_io.i, align 4
  %50 = ptrtoint ptr %bh.1 to i32
  call void @__asan_load4_noabort(i32 %50)
  %51 = load volatile i32, ptr %bh.1, align 4
  %52 = and i32 %51, 128
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %52)
  %tobool.not.i.i306 = icmp eq i32 %52, 0
  br i1 %tobool.not.i.i306, label %if.then.i.i307, label %if.then68.do.cond71_crit_edge

if.then68.do.cond71_crit_edge:                    ; preds = %if.then68
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.cond71

if.then.i.i307:                                   ; preds = %if.then68
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @_set_bit(i32 noundef 7, ptr noundef %bh.1) #14
  br label %do.cond71

if.else69:                                        ; preds = %if.end65
  call void @__sanitizer_cov_trace_pc() #16
  %call.i.i.i308 = tail call zeroext i1 @__kasan_check_write(ptr noundef %bh.1, i32 noundef 4) #14
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !259
  tail call void @llvm.prefetch.p0(ptr %bh.1, i32 1, i32 3, i32 1) #14
  %53 = tail call { i32, i32, i32 } asm sideeffect "@ atomic_fetch_andnot\0A1:\09ldrex\09$0, [$4]\0A\09bic\09$1, $0, $5\0A\09strex\09$2, $1, [$4]\0A\09teq\09$2, #0\0A\09bne\091b", "=&r,=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %bh.1, ptr %bh.1, i32 4, ptr elementtype(i32) %bh.1) #14, !srcloc !260
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !261
  tail call void @wake_up_bit(ptr noundef %bh.1, i32 noundef 2) #14
  br label %do.cond71

do.cond71:                                        ; preds = %if.else69, %if.then.i.i307, %if.then68.do.cond71_crit_edge, %if.then62, %do.body51.do.cond71_crit_edge
  %b_this_page72 = getelementptr inbounds %struct.buffer_head, ptr %bh.1, i32 0, i32 1
  %54 = ptrtoint ptr %b_this_page72 to i32
  call void @__asan_load4_noabort(i32 %54)
  %55 = load ptr, ptr %b_this_page72, align 4
  %cmp73.not = icmp eq ptr %55, %call1
  br i1 %cmp73.not, label %do.body76, label %do.cond71.do.body51_crit_edge

do.cond71.do.body51_crit_edge:                    ; preds = %do.cond71
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.body51

do.body76:                                        ; preds = %do.cond71
  %56 = getelementptr inbounds %struct.page, ptr %page, i32 0, i32 1
  %57 = ptrtoint ptr %56 to i32
  call void @__asan_load4_noabort(i32 %57)
  %58 = load volatile i32, ptr %56, align 4
  %and.i.i = and i32 %58, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i)
  %tobool.not.i.i = icmp eq i32 %and.i.i, 0
  br i1 %tobool.not.i.i, label %if.end.i.i, label %if.then.i.i, !prof !254

if.then.i.i:                                      ; preds = %do.body76
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i.i = add i32 %58, -1
  br label %_compound_head.exit.i

if.end.i.i:                                       ; preds = %do.body76
  call void @__sanitizer_cov_trace_pc() #16
  %59 = ptrtoint ptr %page to i32
  br label %_compound_head.exit.i

_compound_head.exit.i:                            ; preds = %if.end.i.i, %if.then.i.i
  %retval.0.i.i = phi i32 [ %sub.i.i, %if.then.i.i ], [ %59, %if.end.i.i ]
  %60 = inttoptr i32 %retval.0.i.i to ptr
  %61 = ptrtoint ptr %60 to i32
  call void @__asan_load4_noabort(i32 %61)
  %62 = load volatile i32, ptr %60, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %62)
  %cmp.i.not.i = icmp eq i32 %62, -1
  %63 = ptrtoint ptr %56 to i32
  call void @__asan_load4_noabort(i32 %63)
  %64 = load volatile i32, ptr %56, align 4
  %and.i16.i = and i32 %64, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i16.i)
  %tobool.not.i17.i = icmp eq i32 %and.i16.i, 0
  br i1 %cmp.i.not.i, label %if.then.i252, label %do.end10.i, !prof !262

if.then.i252:                                     ; preds = %_compound_head.exit.i
  br i1 %tobool.not.i17.i, label %if.end.i20.i, label %if.then.i19.i, !prof !254

if.then.i19.i:                                    ; preds = %if.then.i252
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i18.i = add i32 %64, -1
  br label %_compound_head.exit22.i

if.end.i20.i:                                     ; preds = %if.then.i252
  call void @__sanitizer_cov_trace_pc() #16
  %65 = ptrtoint ptr %page to i32
  br label %_compound_head.exit22.i

_compound_head.exit22.i:                          ; preds = %if.end.i20.i, %if.then.i19.i
  %retval.0.i21.i = phi i32 [ %sub.i18.i, %if.then.i19.i ], [ %65, %if.end.i20.i ]
  %66 = inttoptr i32 %retval.0.i21.i to ptr
  tail call void @dump_page(ptr noundef %66, ptr noundef nonnull @.str.14) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 461, 0\0A.popsection", ""() #14, !srcloc !266
  unreachable

do.end10.i:                                       ; preds = %_compound_head.exit.i
  br i1 %tobool.not.i17.i, label %if.end.i27.i, label %if.then.i26.i, !prof !254

if.then.i26.i:                                    ; preds = %do.end10.i
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i25.i = add i32 %64, -1
  br label %PageWriteback.exit

if.end.i27.i:                                     ; preds = %do.end10.i
  call void @__sanitizer_cov_trace_pc() #16
  %67 = ptrtoint ptr %page to i32
  br label %PageWriteback.exit

PageWriteback.exit:                               ; preds = %if.end.i27.i, %if.then.i26.i
  %retval.0.i28.i = phi i32 [ %sub.i25.i, %if.then.i26.i ], [ %67, %if.end.i27.i ]
  %68 = inttoptr i32 %retval.0.i28.i to ptr
  %69 = ptrtoint ptr %68 to i32
  call void @__asan_load4_noabort(i32 %69)
  %70 = load volatile i32, ptr %68, align 4
  %71 = and i32 %70, 32768
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %71)
  %tobool78.not = icmp eq i32 %71, 0
  br i1 %tobool78.not, label %do.end94, label %do.body86, !prof !254

do.body86:                                        ; preds = %PageWriteback.exit
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22fs/buffer.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 1803, 0\0A.popsection", ""() #14, !srcloc !326
  unreachable

do.end94:                                         ; preds = %PageWriteback.exit
  %call95 = tail call zeroext i1 @set_page_writeback(ptr noundef %page) #14
  %i_write_hint = getelementptr inbounds %struct.inode, ptr %inode, i32 0, i32 21
  br label %do.body96

do.body96:                                        ; preds = %if.end104.do.body96_crit_edge, %do.end94
  %bh.2 = phi ptr [ %call1, %do.end94 ], [ %73, %if.end104.do.body96_crit_edge ]
  %nr_underway.0 = phi i32 [ 0, %do.end94 ], [ %nr_underway.1, %if.end104.do.body96_crit_edge ]
  %b_this_page97 = getelementptr inbounds %struct.buffer_head, ptr %bh.2, i32 0, i32 1
  %72 = ptrtoint ptr %b_this_page97 to i32
  call void @__asan_load4_noabort(i32 %72)
  %73 = load ptr, ptr %b_this_page97, align 4
  %74 = ptrtoint ptr %bh.2 to i32
  call void @__asan_load4_noabort(i32 %74)
  %75 = load volatile i32, ptr %bh.2, align 4
  %76 = and i32 %75, 128
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %76)
  %tobool99.not = icmp eq i32 %76, 0
  br i1 %tobool99.not, label %do.body96.if.end104_crit_edge, label %if.then100

do.body96.if.end104_crit_edge:                    ; preds = %do.body96
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end104

if.then100:                                       ; preds = %do.body96
  call void @__sanitizer_cov_trace_pc() #16
  %77 = ptrtoint ptr %i_write_hint to i32
  call void @__asan_load1_noabort(i32 %77)
  %78 = load i8, ptr %i_write_hint, align 1
  %conv101 = zext i8 %78 to i32
  tail call fastcc void @submit_bh_wbc(i32 noundef 1, i32 noundef %flags.0.i, ptr noundef %bh.2, i32 noundef %conv101, ptr noundef %wbc)
  %inc103 = add i32 %nr_underway.0, 1
  br label %if.end104

if.end104:                                        ; preds = %if.then100, %do.body96.if.end104_crit_edge
  %nr_underway.1 = phi i32 [ %inc103, %if.then100 ], [ %nr_underway.0, %do.body96.if.end104_crit_edge ]
  %cmp106.not = icmp eq ptr %73, %call1
  br i1 %cmp106.not, label %if.end104.done_crit_edge, label %if.end104.do.body96_crit_edge

if.end104.do.body96_crit_edge:                    ; preds = %if.end104
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.body96

if.end104.done_crit_edge:                         ; preds = %if.end104
  call void @__sanitizer_cov_trace_pc() #16
  br label %done

done:                                             ; preds = %if.end160.done_crit_edge, %if.end104.done_crit_edge
  %nr_underway.2 = phi i32 [ %nr_underway.1, %if.end104.done_crit_edge ], [ %nr_underway.4, %if.end160.done_crit_edge ]
  %err.0 = phi i32 [ 0, %if.end104.done_crit_edge ], [ %call37, %if.end160.done_crit_edge ]
  tail call void @unlock_page(ptr noundef %page) #14
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %nr_underway.2)
  %cmp109 = icmp eq i32 %nr_underway.2, 0
  br i1 %cmp109, label %if.then111, label %done.if.end112_crit_edge

done.if.end112_crit_edge:                         ; preds = %done
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end112

if.then111:                                       ; preds = %done
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @end_page_writeback(ptr noundef %page) #14
  br label %if.end112

if.end112:                                        ; preds = %if.then111, %done.if.end112_crit_edge
  ret i32 %err.0

do.body113:                                       ; preds = %do.cond125.do.body113_crit_edge, %if.end.do.body113_crit_edge
  %bh.3 = phi ptr [ %97, %do.cond125.do.body113_crit_edge ], [ %call1, %if.end.do.body113_crit_edge ]
  %79 = ptrtoint ptr %bh.3 to i32
  call void @__asan_load4_noabort(i32 %79)
  %80 = load volatile i32, ptr %bh.3, align 4
  %81 = and i32 %80, 16
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %81)
  %tobool115.not = icmp eq i32 %81, 0
  br i1 %tobool115.not, label %do.body113.if.else123_crit_edge, label %land.lhs.true116

do.body113.if.else123_crit_edge:                  ; preds = %do.body113
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.else123

land.lhs.true116:                                 ; preds = %do.body113
  %82 = ptrtoint ptr %bh.3 to i32
  call void @__asan_load4_noabort(i32 %82)
  %83 = load volatile i32, ptr %bh.3, align 4
  %84 = and i32 %83, 2
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %84)
  %tobool118.not = icmp eq i32 %84, 0
  br i1 %tobool118.not, label %land.lhs.true116.if.else123_crit_edge, label %land.lhs.true119

land.lhs.true116.if.else123_crit_edge:            ; preds = %land.lhs.true116
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.else123

land.lhs.true119:                                 ; preds = %land.lhs.true116
  %85 = ptrtoint ptr %bh.3 to i32
  call void @__asan_load4_noabort(i32 %85)
  %86 = load volatile i32, ptr %bh.3, align 4
  %87 = and i32 %86, 256
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %87)
  %tobool121.not = icmp eq i32 %87, 0
  br i1 %tobool121.not, label %if.then122, label %land.lhs.true119.if.else123_crit_edge

land.lhs.true119.if.else123_crit_edge:            ; preds = %land.lhs.true119
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.else123

if.then122:                                       ; preds = %land.lhs.true119
  tail call void @__might_sleep(ptr noundef nonnull @.str.43, i32 noundef 366) #14
  %call.i.i.i.i309 = tail call zeroext i1 @__kasan_check_write(ptr noundef %bh.3, i32 noundef 4) #14
  %88 = ptrtoint ptr %bh.3 to i32
  call void @__asan_load4_noabort(i32 %88)
  %89 = load volatile i32, ptr %bh.3, align 4
  %and.i.i.i.i310 = and i32 %89, 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i.i.i310)
  %tobool.not.i.i.i.i311 = icmp eq i32 %and.i.i.i.i310, 0
  br i1 %tobool.not.i.i.i.i311, label %trylock_buffer.exit.i314, label %if.then122.if.then.i317_crit_edge

if.then122.if.then.i317_crit_edge:                ; preds = %if.then122
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.then.i317

trylock_buffer.exit.i314:                         ; preds = %if.then122
  tail call void @llvm.prefetch.p0(ptr %bh.3, i32 1, i32 3, i32 1) #14
  %90 = tail call { i32, i32, i32 } asm sideeffect "@ atomic_fetch_or\0A1:\09ldrex\09$0, [$4]\0A\09orr\09$1, $0, $5\0A\09strex\09$2, $1, [$4]\0A\09teq\09$2, #0\0A\09bne\091b", "=&r,=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %bh.3, ptr %bh.3, i32 4, ptr elementtype(i32) %bh.3) #14, !srcloc !284
  %asmresult.i.i.i.i.i.i.i312 = extractvalue { i32, i32, i32 } %90, 0
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !285
  %91 = and i32 %asmresult.i.i.i.i.i.i.i312, 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %91)
  %tobool.not.not.i313 = icmp eq i32 %91, 0
  br i1 %tobool.not.not.i313, label %trylock_buffer.exit.i314.lock_buffer.exit320_crit_edge, label %trylock_buffer.exit.i314.if.then.i317_crit_edge

trylock_buffer.exit.i314.if.then.i317_crit_edge:  ; preds = %trylock_buffer.exit.i314
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.then.i317

trylock_buffer.exit.i314.lock_buffer.exit320_crit_edge: ; preds = %trylock_buffer.exit.i314
  call void @__sanitizer_cov_trace_pc() #16
  br label %lock_buffer.exit320

if.then.i317:                                     ; preds = %trylock_buffer.exit.i314.if.then.i317_crit_edge, %if.then122.if.then.i317_crit_edge
  tail call void @__might_sleep(ptr noundef nonnull @.str.13, i32 noundef 205) #14
  %call.i.i.i315 = tail call i32 @_test_and_set_bit(i32 noundef 2, ptr noundef %bh.3) #14
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call.i.i.i315)
  %tobool.not.i.i.i316 = icmp eq i32 %call.i.i.i315, 0
  br i1 %tobool.not.i.i.i316, label %if.then.i317.lock_buffer.exit320_crit_edge, label %if.end.i.i.i319

if.then.i317.lock_buffer.exit320_crit_edge:       ; preds = %if.then.i317
  call void @__sanitizer_cov_trace_pc() #16
  br label %lock_buffer.exit320

if.end.i.i.i319:                                  ; preds = %if.then.i317
  call void @__sanitizer_cov_trace_pc() #16
  %call3.i.i.i318 = tail call i32 @out_of_line_wait_on_bit_lock(ptr noundef %bh.3, i32 noundef 2, ptr noundef nonnull @bit_wait_io, i32 noundef 2) #14
  br label %lock_buffer.exit320

lock_buffer.exit320:                              ; preds = %if.end.i.i.i319, %if.then.i317.lock_buffer.exit320_crit_edge, %trylock_buffer.exit.i314.lock_buffer.exit320_crit_edge
  %b_end_io.i321 = getelementptr inbounds %struct.buffer_head, ptr %bh.3, i32 0, i32 7
  %92 = ptrtoint ptr %b_end_io.i321 to i32
  call void @__asan_store4_noabort(i32 %92)
  store ptr %handler, ptr %b_end_io.i321, align 4
  %93 = ptrtoint ptr %bh.3 to i32
  call void @__asan_load4_noabort(i32 %93)
  %94 = load volatile i32, ptr %bh.3, align 4
  %95 = and i32 %94, 128
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %95)
  %tobool.not.i.i322 = icmp eq i32 %95, 0
  br i1 %tobool.not.i.i322, label %if.then.i.i323, label %lock_buffer.exit320.do.cond125_crit_edge

lock_buffer.exit320.do.cond125_crit_edge:         ; preds = %lock_buffer.exit320
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.cond125

if.then.i.i323:                                   ; preds = %lock_buffer.exit320
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @_set_bit(i32 noundef 7, ptr noundef %bh.3) #14
  br label %do.cond125

if.else123:                                       ; preds = %land.lhs.true119.if.else123_crit_edge, %land.lhs.true116.if.else123_crit_edge, %do.body113.if.else123_crit_edge
  tail call void @_clear_bit(i32 noundef 1, ptr noundef %bh.3) #14
  br label %do.cond125

do.cond125:                                       ; preds = %if.else123, %if.then.i.i323, %lock_buffer.exit320.do.cond125_crit_edge
  %b_this_page126 = getelementptr inbounds %struct.buffer_head, ptr %bh.3, i32 0, i32 1
  %96 = ptrtoint ptr %b_this_page126 to i32
  call void @__asan_load4_noabort(i32 %96)
  %97 = load ptr, ptr %b_this_page126, align 4
  %cmp127.not = icmp eq ptr %97, %call1
  br i1 %cmp127.not, label %do.end129, label %do.cond125.do.body113_crit_edge

do.cond125.do.body113_crit_edge:                  ; preds = %do.cond125
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.body113

do.end129:                                        ; preds = %do.cond125
  %98 = getelementptr inbounds %struct.page, ptr %page, i32 0, i32 1
  %99 = ptrtoint ptr %98 to i32
  call void @__asan_load4_noabort(i32 %99)
  %100 = load volatile i32, ptr %98, align 4
  %and.i.i263 = and i32 %100, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i263)
  %tobool.not.i264 = icmp eq i32 %and.i.i263, 0
  br i1 %tobool.not.i264, label %do.body7.i, label %if.then.i265, !prof !254

if.then.i265:                                     ; preds = %do.end129
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %page, ptr noundef nonnull @.str.18) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 416, 0\0A.popsection", ""() #14, !srcloc !273
  unreachable

do.body7.i:                                       ; preds = %do.end129
  %101 = ptrtoint ptr %98 to i32
  call void @__asan_load4_noabort(i32 %101)
  %102 = load volatile i32, ptr %98, align 4
  %and.i31.i = and i32 %102, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i31.i)
  %tobool.not.i.i266 = icmp eq i32 %and.i31.i, 0
  br i1 %tobool.not.i.i266, label %if.end.i.i269, label %if.then.i.i268, !prof !254

if.then.i.i268:                                   ; preds = %do.body7.i
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i.i267 = add i32 %102, -1
  br label %_compound_head.exit.i272

if.end.i.i269:                                    ; preds = %do.body7.i
  call void @__sanitizer_cov_trace_pc() #16
  %103 = ptrtoint ptr %page to i32
  br label %_compound_head.exit.i272

_compound_head.exit.i272:                         ; preds = %if.end.i.i269, %if.then.i.i268
  %retval.0.i.i270 = phi i32 [ %sub.i.i267, %if.then.i.i268 ], [ %103, %if.end.i.i269 ]
  %104 = inttoptr i32 %retval.0.i.i270 to ptr
  %105 = ptrtoint ptr %104 to i32
  call void @__asan_load4_noabort(i32 %105)
  %106 = load volatile i32, ptr %104, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %106)
  %cmp.i.not.i271 = icmp eq i32 %106, -1
  %107 = ptrtoint ptr %98 to i32
  call void @__asan_load4_noabort(i32 %107)
  %108 = load volatile i32, ptr %98, align 4
  %and.i32.i = and i32 %108, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i32.i)
  %tobool.not.i33.i = icmp eq i32 %and.i32.i, 0
  br i1 %cmp.i.not.i271, label %if.then17.i, label %do.end24.i, !prof !262

if.then17.i:                                      ; preds = %_compound_head.exit.i272
  br i1 %tobool.not.i33.i, label %if.end.i36.i, label %if.then.i35.i, !prof !254

if.then.i35.i:                                    ; preds = %if.then17.i
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i34.i = add i32 %108, -1
  br label %_compound_head.exit38.i

if.end.i36.i:                                     ; preds = %if.then17.i
  call void @__sanitizer_cov_trace_pc() #16
  %109 = ptrtoint ptr %page to i32
  br label %_compound_head.exit38.i

_compound_head.exit38.i:                          ; preds = %if.end.i36.i, %if.then.i35.i
  %retval.0.i37.i = phi i32 [ %sub.i34.i, %if.then.i35.i ], [ %109, %if.end.i36.i ]
  %110 = inttoptr i32 %retval.0.i37.i to ptr
  tail call void @dump_page(ptr noundef %110, ptr noundef nonnull @.str.14) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 416, 0\0A.popsection", ""() #14, !srcloc !274
  unreachable

do.end24.i:                                       ; preds = %_compound_head.exit.i272
  br i1 %tobool.not.i33.i, label %if.end.i43.i, label %if.then.i42.i, !prof !254

if.then.i42.i:                                    ; preds = %do.end24.i
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i41.i = add i32 %108, -1
  br label %SetPageError.exit

if.end.i43.i:                                     ; preds = %do.end24.i
  call void @__sanitizer_cov_trace_pc() #16
  %111 = ptrtoint ptr %page to i32
  br label %SetPageError.exit

SetPageError.exit:                                ; preds = %if.end.i43.i, %if.then.i42.i
  %retval.0.i44.i = phi i32 [ %sub.i41.i, %if.then.i42.i ], [ %111, %if.end.i43.i ]
  %112 = inttoptr i32 %retval.0.i44.i to ptr
  tail call void @_set_bit(i32 noundef 8, ptr noundef %112) #14
  %113 = ptrtoint ptr %98 to i32
  call void @__asan_load4_noabort(i32 %113)
  %114 = load volatile i32, ptr %98, align 4
  %and.i.i273 = and i32 %114, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i273)
  %tobool.not.i.i274 = icmp eq i32 %and.i.i273, 0
  br i1 %tobool.not.i.i274, label %if.end.i.i277, label %if.then.i.i276, !prof !254

if.then.i.i276:                                   ; preds = %SetPageError.exit
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i.i275 = add i32 %114, -1
  br label %_compound_head.exit.i282

if.end.i.i277:                                    ; preds = %SetPageError.exit
  call void @__sanitizer_cov_trace_pc() #16
  %115 = ptrtoint ptr %page to i32
  br label %_compound_head.exit.i282

_compound_head.exit.i282:                         ; preds = %if.end.i.i277, %if.then.i.i276
  %retval.0.i.i278 = phi i32 [ %sub.i.i275, %if.then.i.i276 ], [ %115, %if.end.i.i277 ]
  %116 = inttoptr i32 %retval.0.i.i278 to ptr
  %117 = ptrtoint ptr %116 to i32
  call void @__asan_load4_noabort(i32 %117)
  %118 = load volatile i32, ptr %116, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %118)
  %cmp.i.not.i279 = icmp eq i32 %118, -1
  %119 = ptrtoint ptr %98 to i32
  call void @__asan_load4_noabort(i32 %119)
  %120 = load volatile i32, ptr %98, align 4
  %and.i16.i280 = and i32 %120, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i16.i280)
  %tobool.not.i17.i281 = icmp eq i32 %and.i16.i280, 0
  br i1 %cmp.i.not.i279, label %if.then.i283, label %do.end10.i289, !prof !262

if.then.i283:                                     ; preds = %_compound_head.exit.i282
  br i1 %tobool.not.i17.i281, label %if.end.i20.i286, label %if.then.i19.i285, !prof !254

if.then.i19.i285:                                 ; preds = %if.then.i283
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i18.i284 = add i32 %120, -1
  br label %_compound_head.exit22.i288

if.end.i20.i286:                                  ; preds = %if.then.i283
  call void @__sanitizer_cov_trace_pc() #16
  %121 = ptrtoint ptr %page to i32
  br label %_compound_head.exit22.i288

_compound_head.exit22.i288:                       ; preds = %if.end.i20.i286, %if.then.i19.i285
  %retval.0.i21.i287 = phi i32 [ %sub.i18.i284, %if.then.i19.i285 ], [ %121, %if.end.i20.i286 ]
  %122 = inttoptr i32 %retval.0.i21.i287 to ptr
  tail call void @dump_page(ptr noundef %122, ptr noundef nonnull @.str.14) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 461, 0\0A.popsection", ""() #14, !srcloc !266
  unreachable

do.end10.i289:                                    ; preds = %_compound_head.exit.i282
  br i1 %tobool.not.i17.i281, label %if.end.i27.i292, label %if.then.i26.i291, !prof !254

if.then.i26.i291:                                 ; preds = %do.end10.i289
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i25.i290 = add i32 %120, -1
  br label %PageWriteback.exit296

if.end.i27.i292:                                  ; preds = %do.end10.i289
  call void @__sanitizer_cov_trace_pc() #16
  %123 = ptrtoint ptr %page to i32
  br label %PageWriteback.exit296

PageWriteback.exit296:                            ; preds = %if.end.i27.i292, %if.then.i26.i291
  %retval.0.i28.i293 = phi i32 [ %sub.i25.i290, %if.then.i26.i291 ], [ %123, %if.end.i27.i292 ]
  %124 = inttoptr i32 %retval.0.i28.i293 to ptr
  %125 = ptrtoint ptr %124 to i32
  call void @__asan_load4_noabort(i32 %125)
  %126 = load volatile i32, ptr %124, align 4
  %127 = and i32 %126, 32768
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %127)
  %tobool132.not = icmp eq i32 %127, 0
  br i1 %tobool132.not, label %do.end148, label %do.body140, !prof !254

do.body140:                                       ; preds = %PageWriteback.exit296
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22fs/buffer.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 1857, 0\0A.popsection", ""() #14, !srcloc !327
  unreachable

do.end148:                                        ; preds = %PageWriteback.exit296
  %mapping = getelementptr inbounds %struct.page, ptr %page, i32 0, i32 1, i32 0, i32 1
  %128 = ptrtoint ptr %mapping to i32
  call void @__asan_load4_noabort(i32 %128)
  %129 = load ptr, ptr %mapping, align 4
  tail call void @__filemap_set_wb_err(ptr noundef %129, i32 noundef %call37) #14
  %130 = ptrtoint ptr %129 to i32
  call void @__asan_load4_noabort(i32 %130)
  %131 = load ptr, ptr %129, align 4
  %tobool4.not.i = icmp eq ptr %131, null
  br i1 %tobool4.not.i, label %do.end148.mapping_set_error.exit_crit_edge, label %if.then5.i

do.end148.mapping_set_error.exit_crit_edge:       ; preds = %do.end148
  call void @__sanitizer_cov_trace_pc() #16
  br label %mapping_set_error.exit

if.then5.i:                                       ; preds = %do.end148
  call void @__sanitizer_cov_trace_pc() #16
  %i_sb.i = getelementptr inbounds %struct.inode, ptr %131, i32 0, i32 8
  %132 = ptrtoint ptr %i_sb.i to i32
  call void @__asan_load4_noabort(i32 %132)
  %133 = load ptr, ptr %i_sb.i, align 4
  %s_wb_err.i = getelementptr inbounds %struct.super_block, ptr %133, i32 0, i32 50
  %call.i325 = tail call i32 @errseq_set(ptr noundef %s_wb_err.i, i32 noundef %call37) #14
  br label %mapping_set_error.exit

mapping_set_error.exit:                           ; preds = %if.then5.i, %do.end148.mapping_set_error.exit_crit_edge
  call void @__sanitizer_cov_trace_const_cmp4(i32 -28, i32 %call37)
  %cmp.i326 = icmp eq i32 %call37, -28
  %flags.i = getelementptr inbounds %struct.address_space, ptr %129, i32 0, i32 10
  %..i = zext i1 %cmp.i326 to i32
  tail call void @_set_bit(i32 noundef %..i, ptr noundef %flags.i) #14
  %call149 = tail call zeroext i1 @set_page_writeback(ptr noundef %page) #14
  %i_write_hint156 = getelementptr inbounds %struct.inode, ptr %inode, i32 0, i32 21
  br label %do.body150

do.body150:                                       ; preds = %if.end160.do.body150_crit_edge, %mapping_set_error.exit
  %bh.4 = phi ptr [ %call1, %mapping_set_error.exit ], [ %135, %if.end160.do.body150_crit_edge ]
  %nr_underway.3 = phi i32 [ 0, %mapping_set_error.exit ], [ %nr_underway.4, %if.end160.do.body150_crit_edge ]
  %b_this_page152 = getelementptr inbounds %struct.buffer_head, ptr %bh.4, i32 0, i32 1
  %134 = ptrtoint ptr %b_this_page152 to i32
  call void @__asan_load4_noabort(i32 %134)
  %135 = load ptr, ptr %b_this_page152, align 4
  %136 = ptrtoint ptr %bh.4 to i32
  call void @__asan_load4_noabort(i32 %136)
  %137 = load volatile i32, ptr %bh.4, align 4
  %138 = and i32 %137, 128
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %138)
  %tobool154.not = icmp eq i32 %138, 0
  br i1 %tobool154.not, label %do.body150.if.end160_crit_edge, label %if.then155

do.body150.if.end160_crit_edge:                   ; preds = %do.body150
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end160

if.then155:                                       ; preds = %do.body150
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @_clear_bit(i32 noundef 1, ptr noundef %bh.4) #14
  %139 = ptrtoint ptr %i_write_hint156 to i32
  call void @__asan_load1_noabort(i32 %139)
  %140 = load i8, ptr %i_write_hint156, align 1
  %conv157 = zext i8 %140 to i32
  tail call fastcc void @submit_bh_wbc(i32 noundef 1, i32 noundef %flags.0.i, ptr noundef %bh.4, i32 noundef %conv157, ptr noundef %wbc)
  %inc159 = add i32 %nr_underway.3, 1
  br label %if.end160

if.end160:                                        ; preds = %if.then155, %do.body150.if.end160_crit_edge
  %nr_underway.4 = phi i32 [ %inc159, %if.then155 ], [ %nr_underway.3, %do.body150.if.end160_crit_edge ]
  %cmp162.not = icmp eq ptr %135, %call1
  br i1 %cmp162.not, label %if.end160.done_crit_edge, label %if.end160.do.body150_crit_edge

if.end160.do.body150_crit_edge:                   ; preds = %if.end160
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.body150

if.end160.done_crit_edge:                         ; preds = %if.end160
  call void @__sanitizer_cov_trace_pc() #16
  br label %done
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal fastcc ptr @create_page_buffers(ptr noundef %page, ptr noundef %inode, i32 noundef %b_state) unnamed_addr #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = getelementptr inbounds %struct.page, ptr %page, i32 0, i32 1
  %1 = ptrtoint ptr %0 to i32
  call void @__asan_load4_noabort(i32 %1)
  %2 = load volatile i32, ptr %0, align 4
  %and.i.i = and i32 %2, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i)
  %tobool.not.i.i = icmp eq i32 %and.i.i, 0
  br i1 %tobool.not.i.i, label %if.end.i.i, label %if.then.i.i, !prof !254

if.then.i.i:                                      ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i.i = add i32 %2, -1
  br label %_compound_head.exit.i

if.end.i.i:                                       ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  %3 = ptrtoint ptr %page to i32
  br label %_compound_head.exit.i

_compound_head.exit.i:                            ; preds = %if.end.i.i, %if.then.i.i
  %retval.0.i.i = phi i32 [ %sub.i.i, %if.then.i.i ], [ %3, %if.end.i.i ]
  %4 = inttoptr i32 %retval.0.i.i to ptr
  %5 = ptrtoint ptr %4 to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load volatile i32, ptr %4, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %6)
  %cmp.i.not.i = icmp eq i32 %6, -1
  %7 = ptrtoint ptr %0 to i32
  call void @__asan_load4_noabort(i32 %7)
  %8 = load volatile i32, ptr %0, align 4
  %and.i16.i = and i32 %8, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i16.i)
  %tobool.not.i17.i = icmp eq i32 %and.i16.i, 0
  br i1 %cmp.i.not.i, label %if.then.i, label %do.end10.i, !prof !262

if.then.i:                                        ; preds = %_compound_head.exit.i
  br i1 %tobool.not.i17.i, label %if.end.i20.i, label %if.then.i19.i, !prof !254

if.then.i19.i:                                    ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i18.i = add i32 %8, -1
  br label %_compound_head.exit22.i

if.end.i20.i:                                     ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #16
  %9 = ptrtoint ptr %page to i32
  br label %_compound_head.exit22.i

_compound_head.exit22.i:                          ; preds = %if.end.i20.i, %if.then.i19.i
  %retval.0.i21.i = phi i32 [ %sub.i18.i, %if.then.i19.i ], [ %9, %if.end.i20.i ]
  %10 = inttoptr i32 %retval.0.i21.i to ptr
  tail call void @dump_page(ptr noundef %10, ptr noundef nonnull @.str.14) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 414, 0\0A.popsection", ""() #14, !srcloc !263
  unreachable

do.end10.i:                                       ; preds = %_compound_head.exit.i
  br i1 %tobool.not.i17.i, label %if.end.i27.i, label %if.then.i26.i, !prof !254

if.then.i26.i:                                    ; preds = %do.end10.i
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i25.i = add i32 %8, -1
  br label %PageLocked.exit

if.end.i27.i:                                     ; preds = %do.end10.i
  call void @__sanitizer_cov_trace_pc() #16
  %11 = ptrtoint ptr %page to i32
  br label %PageLocked.exit

PageLocked.exit:                                  ; preds = %if.end.i27.i, %if.then.i26.i
  %retval.0.i28.i = phi i32 [ %sub.i25.i, %if.then.i26.i ], [ %11, %if.end.i27.i ]
  %12 = inttoptr i32 %retval.0.i28.i to ptr
  %13 = ptrtoint ptr %12 to i32
  call void @__asan_load4_noabort(i32 %13)
  %14 = load volatile i32, ptr %12, align 4
  %and1.i.i = and i32 %14, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and1.i.i)
  %tobool.not = icmp eq i32 %and1.i.i, 0
  br i1 %tobool.not, label %do.body4, label %do.end7, !prof !262

do.body4:                                         ; preds = %PageLocked.exit
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22fs/buffer.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 1674, 0\0A.popsection", ""() #14, !srcloc !328
  unreachable

do.end7:                                          ; preds = %PageLocked.exit
  %15 = ptrtoint ptr %page to i32
  call void @__asan_load4_noabort(i32 %15)
  %16 = load volatile i32, ptr %page, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %16)
  %cmp.i.not.i37 = icmp eq i32 %16, -1
  br i1 %cmp.i.not.i37, label %if.then.i38, label %PagePrivate.exit, !prof !262

if.then.i38:                                      ; preds = %do.end7
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %page, ptr noundef nonnull @.str.15) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 452, 0\0A.popsection", ""() #14, !srcloc !265
  unreachable

PagePrivate.exit:                                 ; preds = %do.end7
  %17 = ptrtoint ptr %page to i32
  call void @__asan_load4_noabort(i32 %17)
  %18 = load volatile i32, ptr %page, align 4
  %19 = and i32 %18, 8192
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %19)
  %tobool9.not = icmp eq i32 %19, 0
  br i1 %tobool9.not, label %if.then10, label %PagePrivate.exit.do.body14_crit_edge

PagePrivate.exit.do.body14_crit_edge:             ; preds = %PagePrivate.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.body14

if.then10:                                        ; preds = %PagePrivate.exit
  call void @__sanitizer_cov_trace_pc() #16
  %i_blkbits = getelementptr inbounds %struct.inode, ptr %inode, i32 0, i32 20
  %20 = ptrtoint ptr %i_blkbits to i32
  call void @__asan_load1_noabort(i32 %20)
  %21 = load volatile i8, ptr %i_blkbits, align 2
  %conv = zext i8 %21 to i32
  %shl = shl nuw i32 1, %conv
  tail call void @create_empty_buffers(ptr noundef %page, i32 noundef %shl, i32 noundef %b_state)
  br label %do.body14

do.body14:                                        ; preds = %if.then10, %PagePrivate.exit.do.body14_crit_edge
  %22 = ptrtoint ptr %page to i32
  call void @__asan_load4_noabort(i32 %22)
  %23 = load volatile i32, ptr %page, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %23)
  %cmp.i.not.i40 = icmp eq i32 %23, -1
  br i1 %cmp.i.not.i40, label %if.then.i41, label %PagePrivate.exit44, !prof !262

if.then.i41:                                      ; preds = %do.body14
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %page, ptr noundef nonnull @.str.15) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 452, 0\0A.popsection", ""() #14, !srcloc !265
  unreachable

PagePrivate.exit44:                               ; preds = %do.body14
  %24 = ptrtoint ptr %page to i32
  call void @__asan_load4_noabort(i32 %24)
  %25 = load volatile i32, ptr %page, align 4
  %26 = and i32 %25, 8192
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %26)
  %tobool16.not = icmp eq i32 %26, 0
  br i1 %tobool16.not, label %do.body26, label %do.end31, !prof !262

do.body26:                                        ; preds = %PagePrivate.exit44
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22fs/buffer.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 1679, 0\0A.popsection", ""() #14, !srcloc !329
  unreachable

do.end31:                                         ; preds = %PagePrivate.exit44
  call void @__sanitizer_cov_trace_pc() #16
  %private = getelementptr inbounds %struct.page, ptr %page, i32 0, i32 1, i32 0, i32 3
  %27 = ptrtoint ptr %private to i32
  call void @__asan_load4_noabort(i32 %27)
  %28 = load i32, ptr %private, align 4
  %29 = inttoptr i32 %28 to ptr
  ret ptr %29
}

; Function Attrs: inlinehint nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal fastcc i64 @i_size_read(ptr noundef %inode) unnamed_addr #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  %i_size_seqcount = getelementptr inbounds %struct.inode, ptr %inode, i32 0, i32 23
  %dep_map.c48.i = getelementptr inbounds %struct.inode, ptr %inode, i32 0, i32 23, i32 1
  %i_size18 = getelementptr inbounds %struct.inode, ptr %inode, i32 0, i32 14
  br label %do.body

do.body:                                          ; preds = %while.end.do.body_crit_edge, %entry
  %0 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ arch_local_irq_save\0A\09cpsid\09i", "=r,~{memory},~{cc}"() #14, !srcloc !297
  %and.i.i = and i32 %0, 128
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i)
  %tobool.not.i = icmp eq i32 %and.i.i, 0
  br i1 %tobool.not.i, label %if.then.i, label %do.body24.critedge.i

if.then.i:                                        ; preds = %do.body
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @trace_hardirqs_off() #14
  %1 = tail call ptr @llvm.returnaddress(i32 0) #14
  %2 = ptrtoint ptr %1 to i32
  tail call void @lock_acquire(ptr noundef %dep_map.c48.i, i32 noundef 0, i32 noundef 0, i32 noundef 2, i32 noundef 1, ptr noundef null, i32 noundef %2) #14
  tail call void @lock_release(ptr noundef %dep_map.c48.i, i32 noundef %2) #14
  tail call void @trace_hardirqs_on() #14
  br label %do.body24.i

do.body24.critedge.i:                             ; preds = %do.body
  call void @__sanitizer_cov_trace_pc() #16
  %3 = tail call ptr @llvm.returnaddress(i32 0) #14
  %4 = ptrtoint ptr %3 to i32
  tail call void @lock_acquire(ptr noundef %dep_map.c48.i, i32 noundef 0, i32 noundef 0, i32 noundef 2, i32 noundef 1, ptr noundef null, i32 noundef %4) #14
  tail call void @lock_release(ptr noundef %dep_map.c48.i, i32 noundef %4) #14
  br label %do.body24.i

do.body24.i:                                      ; preds = %do.body24.critedge.i, %if.then.i
  %5 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ local_save_flags", "=r,~{memory},~{cc}"() #14, !srcloc !280
  %and.i.i.i = and i32 %5, 128
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i.i)
  %tobool32.not.i = icmp eq i32 %and.i.i.i, 0
  br i1 %tobool32.not.i, label %if.then36.i, label %do.body24.i.seqcount_lockdep_reader_access.exit_crit_edge, !prof !262

do.body24.i.seqcount_lockdep_reader_access.exit_crit_edge: ; preds = %do.body24.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %seqcount_lockdep_reader_access.exit

if.then36.i:                                      ; preds = %do.body24.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @warn_bogus_irq_restore() #14
  br label %seqcount_lockdep_reader_access.exit

seqcount_lockdep_reader_access.exit:              ; preds = %if.then36.i, %do.body24.i.seqcount_lockdep_reader_access.exit_crit_edge
  tail call void asm sideeffect "\09msr\09cpsr_c, $0\09@ local_irq_restore", "r,~{memory},~{cc}"(i32 %0) #14, !srcloc !298
  %6 = ptrtoint ptr %i_size_seqcount to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load volatile i32, ptr %i_size_seqcount, align 4
  %and29 = and i32 %7, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and29)
  %tobool.not30 = icmp eq i32 %and29, 0
  br i1 %tobool.not30, label %seqcount_lockdep_reader_access.exit.while.end_crit_edge, label %seqcount_lockdep_reader_access.exit.do.end_crit_edge

seqcount_lockdep_reader_access.exit.do.end_crit_edge: ; preds = %seqcount_lockdep_reader_access.exit
  br label %do.end

seqcount_lockdep_reader_access.exit.while.end_crit_edge: ; preds = %seqcount_lockdep_reader_access.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %while.end

do.end:                                           ; preds = %do.end.do.end_crit_edge, %seqcount_lockdep_reader_access.exit.do.end_crit_edge
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !330
  tail call void asm sideeffect "nop; nop; nop; nop; nop; nop; nop; nop; nop; nop;", ""() #14, !srcloc !331
  %8 = ptrtoint ptr %i_size_seqcount to i32
  call void @__asan_load4_noabort(i32 %8)
  %9 = load volatile i32, ptr %i_size_seqcount, align 4
  %and = and i32 %9, 1
  %tobool.not = icmp eq i32 %and, 0
  br i1 %tobool.not, label %do.end.while.end_crit_edge, label %do.end.do.end_crit_edge

do.end.do.end_crit_edge:                          ; preds = %do.end
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.end

do.end.while.end_crit_edge:                       ; preds = %do.end
  call void @__sanitizer_cov_trace_pc() #16
  br label %while.end

while.end:                                        ; preds = %do.end.while.end_crit_edge, %seqcount_lockdep_reader_access.exit.while.end_crit_edge
  %.lcssa = phi i32 [ %7, %seqcount_lockdep_reader_access.exit.while.end_crit_edge ], [ %9, %do.end.while.end_crit_edge ]
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !332
  %10 = ptrtoint ptr %i_size18 to i32
  call void @__asan_load8_noabort(i32 %10)
  %11 = load i64, ptr %i_size18, align 8
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !333
  %12 = ptrtoint ptr %i_size_seqcount to i32
  call void @__asan_load4_noabort(i32 %12)
  %13 = load volatile i32, ptr %i_size_seqcount, align 4
  %cmp.i.i.not = icmp eq i32 %13, %.lcssa
  br i1 %cmp.i.i.not, label %do.end24, label %while.end.do.body_crit_edge

while.end.do.body_crit_edge:                      ; preds = %while.end
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.body

do.end24:                                         ; preds = %while.end
  call void @__sanitizer_cov_trace_pc() #16
  ret i64 %11
}

; Function Attrs: inlinehint nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal fastcc void @lock_buffer(ptr noundef %bh) unnamed_addr #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @__might_sleep(ptr noundef nonnull @.str.43, i32 noundef 366) #14
  %call.i.i.i = tail call zeroext i1 @__kasan_check_write(ptr noundef %bh, i32 noundef 4) #14
  %0 = ptrtoint ptr %bh to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load volatile i32, ptr %bh, align 4
  %and.i.i.i = and i32 %1, 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i.i)
  %tobool.not.i.i.i = icmp eq i32 %and.i.i.i, 0
  br i1 %tobool.not.i.i.i, label %trylock_buffer.exit, label %entry.if.then_crit_edge

entry.if.then_crit_edge:                          ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.then

trylock_buffer.exit:                              ; preds = %entry
  tail call void @llvm.prefetch.p0(ptr %bh, i32 1, i32 3, i32 1) #14
  %2 = tail call { i32, i32, i32 } asm sideeffect "@ atomic_fetch_or\0A1:\09ldrex\09$0, [$4]\0A\09orr\09$1, $0, $5\0A\09strex\09$2, $1, [$4]\0A\09teq\09$2, #0\0A\09bne\091b", "=&r,=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %bh, ptr %bh, i32 4, ptr elementtype(i32) %bh) #14, !srcloc !284
  %asmresult.i.i.i.i.i.i = extractvalue { i32, i32, i32 } %2, 0
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !285
  %3 = and i32 %asmresult.i.i.i.i.i.i, 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %3)
  %tobool.not.not = icmp eq i32 %3, 0
  br i1 %tobool.not.not, label %trylock_buffer.exit.if.end_crit_edge, label %trylock_buffer.exit.if.then_crit_edge

trylock_buffer.exit.if.then_crit_edge:            ; preds = %trylock_buffer.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.then

trylock_buffer.exit.if.end_crit_edge:             ; preds = %trylock_buffer.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end

if.then:                                          ; preds = %trylock_buffer.exit.if.then_crit_edge, %entry.if.then_crit_edge
  tail call void @__might_sleep(ptr noundef nonnull @.str.13, i32 noundef 205) #14
  %call.i.i = tail call i32 @_test_and_set_bit(i32 noundef 2, ptr noundef %bh) #14
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call.i.i)
  %tobool.not.i.i = icmp eq i32 %call.i.i, 0
  br i1 %tobool.not.i.i, label %if.then.if.end_crit_edge, label %if.end.i.i

if.then.if.end_crit_edge:                         ; preds = %if.then
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end

if.end.i.i:                                       ; preds = %if.then
  call void @__sanitizer_cov_trace_pc() #16
  %call3.i.i = tail call i32 @out_of_line_wait_on_bit_lock(ptr noundef %bh, i32 noundef 2, ptr noundef nonnull @bit_wait_io, i32 noundef 2) #14
  br label %if.end

if.end:                                           ; preds = %if.end.i.i, %if.then.if.end_crit_edge, %trylock_buffer.exit.if.end_crit_edge
  ret void
}

; Function Attrs: null_pointer_is_valid
declare dso_local zeroext i1 @redirty_page_for_writepage(ptr noundef, ptr noundef) local_unnamed_addr #1

; Function Attrs: null_pointer_is_valid
declare dso_local zeroext i1 @set_page_writeback(ptr noundef) local_unnamed_addr #1

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal fastcc void @submit_bh_wbc(i32 noundef %op, i32 noundef %op_flags, ptr noundef %bh, i32 noundef %write_hint, ptr noundef %wbc) unnamed_addr #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = ptrtoint ptr %bh to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load volatile i32, ptr %bh, align 4
  %2 = and i32 %1, 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %2)
  %tobool.not = icmp eq i32 %2, 0
  br i1 %tobool.not, label %do.body4, label %do.body10, !prof !262

do.body4:                                         ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22fs/buffer.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 3015, 0\0A.popsection", ""() #14, !srcloc !334
  unreachable

do.body10:                                        ; preds = %entry
  %3 = ptrtoint ptr %bh to i32
  call void @__asan_load4_noabort(i32 %3)
  %4 = load volatile i32, ptr %bh, align 4
  %5 = and i32 %4, 16
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %5)
  %tobool12.not = icmp eq i32 %5, 0
  br i1 %tobool12.not, label %do.body22, label %do.body31, !prof !262

do.body22:                                        ; preds = %do.body10
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22fs/buffer.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 3016, 0\0A.popsection", ""() #14, !srcloc !335
  unreachable

do.body31:                                        ; preds = %do.body10
  %b_end_io = getelementptr inbounds %struct.buffer_head, ptr %bh, i32 0, i32 7
  %6 = ptrtoint ptr %b_end_io to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load ptr, ptr %b_end_io, align 4
  %tobool32.not = icmp eq ptr %7, null
  br i1 %tobool32.not, label %do.body42, label %do.body51, !prof !262

do.body42:                                        ; preds = %do.body31
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22fs/buffer.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 3017, 0\0A.popsection", ""() #14, !srcloc !336
  unreachable

do.body51:                                        ; preds = %do.body31
  %8 = ptrtoint ptr %bh to i32
  call void @__asan_load4_noabort(i32 %8)
  %9 = load volatile i32, ptr %bh, align 4
  %10 = and i32 %9, 256
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %10)
  %tobool53.not = icmp eq i32 %10, 0
  br i1 %tobool53.not, label %do.body70, label %do.body61, !prof !254

do.body61:                                        ; preds = %do.body51
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22fs/buffer.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 3018, 0\0A.popsection", ""() #14, !srcloc !337
  unreachable

do.body70:                                        ; preds = %do.body51
  %11 = ptrtoint ptr %bh to i32
  call void @__asan_load4_noabort(i32 %11)
  %12 = load volatile i32, ptr %bh, align 4
  %13 = and i32 %12, 2048
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %13)
  %tobool72.not = icmp eq i32 %13, 0
  br i1 %tobool72.not, label %do.end88, label %do.body80, !prof !254

do.body80:                                        ; preds = %do.body70
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22fs/buffer.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 3019, 0\0A.popsection", ""() #14, !srcloc !338
  unreachable

do.end88:                                         ; preds = %do.body70
  %call.i = tail call i32 @_test_and_set_bit(i32 noundef 3, ptr noundef %bh) #14
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call.i)
  %tobool90.not = icmp ne i32 %call.i, 0
  call void @__sanitizer_cov_trace_const_cmp4(i32 1, i32 %op)
  %cmp = icmp eq i32 %op, 1
  %or.cond = and i1 %cmp, %tobool90.not
  br i1 %or.cond, label %if.then91, label %do.end88.if.end92_crit_edge

do.end88.if.end92_crit_edge:                      ; preds = %do.end88
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end92

if.then91:                                        ; preds = %do.end88
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @_clear_bit(i32 noundef 10, ptr noundef %bh) #14
  br label %if.end92

if.end92:                                         ; preds = %if.then91, %do.end88.if.end92_crit_edge
  %call.i11 = tail call ptr @bio_alloc_bioset(i32 noundef 3072, i16 noundef zeroext 1, ptr noundef nonnull @fs_bio_set) #14
  tail call void @fscrypt_set_bio_crypt_ctx_bh(ptr noundef %call.i11, ptr noundef %bh, i32 noundef 3072) #14
  %b_blocknr = getelementptr inbounds %struct.buffer_head, ptr %bh, i32 0, i32 3
  %14 = ptrtoint ptr %b_blocknr to i32
  call void @__asan_load8_noabort(i32 %14)
  %15 = load i64, ptr %b_blocknr, align 8
  %b_size = getelementptr inbounds %struct.buffer_head, ptr %bh, i32 0, i32 4
  %16 = ptrtoint ptr %b_size to i32
  call void @__asan_load4_noabort(i32 %16)
  %17 = load i32, ptr %b_size, align 8
  %shr = lshr i32 %17, 9
  %conv = zext i32 %shr to i64
  %mul = mul i64 %15, %conv
  %bi_iter = getelementptr inbounds %struct.bio, ptr %call.i11, i32 0, i32 8
  %18 = ptrtoint ptr %bi_iter to i32
  call void @__asan_store8_noabort(i32 %18)
  store i64 %mul, ptr %bi_iter, align 8
  %b_bdev = getelementptr inbounds %struct.buffer_head, ptr %bh, i32 0, i32 6
  %19 = ptrtoint ptr %b_bdev to i32
  call void @__asan_load4_noabort(i32 %19)
  %20 = load ptr, ptr %b_bdev, align 8
  %bi_flags.i.i = getelementptr inbounds %struct.bio, ptr %call.i11, i32 0, i32 3
  %21 = ptrtoint ptr %bi_flags.i.i to i32
  call void @__asan_load2_noabort(i32 %21)
  %22 = load i16, ptr %bi_flags.i.i, align 4
  %conv1.i.i = and i16 %22, -2049
  store i16 %conv1.i.i, ptr %bi_flags.i.i, align 4
  %bi_bdev.i = getelementptr inbounds %struct.bio, ptr %call.i11, i32 0, i32 1
  %23 = ptrtoint ptr %bi_bdev.i to i32
  call void @__asan_load4_noabort(i32 %23)
  %24 = load ptr, ptr %bi_bdev.i, align 4
  %cmp.not.i = icmp eq ptr %24, %20
  br i1 %cmp.not.i, label %if.end92.bio_set_dev.exit_crit_edge, label %if.then.i

if.end92.bio_set_dev.exit_crit_edge:              ; preds = %if.end92
  call void @__sanitizer_cov_trace_pc() #16
  br label %bio_set_dev.exit

if.then.i:                                        ; preds = %if.end92
  call void @__sanitizer_cov_trace_pc() #16
  %conv1.i8.i = and i16 %22, -2177
  %25 = ptrtoint ptr %bi_flags.i.i to i32
  call void @__asan_store2_noabort(i32 %25)
  store i16 %conv1.i8.i, ptr %bi_flags.i.i, align 4
  br label %bio_set_dev.exit

bio_set_dev.exit:                                 ; preds = %if.then.i, %if.end92.bio_set_dev.exit_crit_edge
  %26 = ptrtoint ptr %bi_bdev.i to i32
  call void @__asan_store4_noabort(i32 %26)
  store ptr %20, ptr %bi_bdev.i, align 4
  tail call void @bio_associate_blkg(ptr noundef %call.i11) #14
  %conv94 = trunc i32 %write_hint to i16
  %bi_write_hint = getelementptr inbounds %struct.bio, ptr %call.i11, i32 0, i32 5
  %27 = ptrtoint ptr %bi_write_hint to i32
  call void @__asan_store2_noabort(i32 %27)
  store i16 %conv94, ptr %bi_write_hint, align 8
  %b_page = getelementptr inbounds %struct.buffer_head, ptr %bh, i32 0, i32 2
  %28 = ptrtoint ptr %b_page to i32
  call void @__asan_load4_noabort(i32 %28)
  %29 = load ptr, ptr %b_page, align 8
  %30 = ptrtoint ptr %b_size to i32
  call void @__asan_load4_noabort(i32 %30)
  %31 = load i32, ptr %b_size, align 8
  %b_data = getelementptr inbounds %struct.buffer_head, ptr %bh, i32 0, i32 5
  %32 = ptrtoint ptr %b_data to i32
  call void @__asan_load4_noabort(i32 %32)
  %33 = load ptr, ptr %b_data, align 4
  %34 = ptrtoint ptr %33 to i32
  %and = and i32 %34, 4095
  %call96 = tail call i32 @bio_add_page(ptr noundef %call.i11, ptr noundef %29, i32 noundef %31, i32 noundef %and) #14
  %bi_size = getelementptr inbounds %struct.bio, ptr %call.i11, i32 0, i32 8, i32 1
  %35 = ptrtoint ptr %bi_size to i32
  call void @__asan_load4_noabort(i32 %35)
  %36 = load i32, ptr %bi_size, align 8
  %37 = ptrtoint ptr %b_size to i32
  call void @__asan_load4_noabort(i32 %37)
  %38 = load i32, ptr %b_size, align 8
  call void @__sanitizer_cov_trace_cmp4(i32 %36, i32 %38)
  %cmp100.not = icmp eq i32 %36, %38
  br i1 %cmp100.not, label %do.end117, label %do.body109, !prof !254

do.body109:                                       ; preds = %bio_set_dev.exit
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22fs/buffer.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 3036, 0\0A.popsection", ""() #14, !srcloc !339
  unreachable

do.end117:                                        ; preds = %bio_set_dev.exit
  %bi_end_io = getelementptr inbounds %struct.bio, ptr %call.i11, i32 0, i32 10
  %39 = ptrtoint ptr %bi_end_io to i32
  call void @__asan_store4_noabort(i32 %39)
  store ptr @end_bio_bh_io_sync, ptr %bi_end_io, align 8
  %bi_private = getelementptr inbounds %struct.bio, ptr %call.i11, i32 0, i32 11
  %40 = ptrtoint ptr %bi_private to i32
  call void @__asan_store4_noabort(i32 %40)
  store ptr %bh, ptr %bi_private, align 4
  %41 = ptrtoint ptr %bh to i32
  call void @__asan_load4_noabort(i32 %41)
  %42 = load volatile i32, ptr %bh, align 4
  %43 = lshr i32 %42, 1
  %44 = and i32 %43, 4096
  %45 = load volatile i32, ptr %bh, align 4
  %46 = lshr i32 %45, 1
  %47 = and i32 %46, 8192
  %48 = or i32 %op_flags, %op
  %49 = or i32 %48, %44
  %or.i = or i32 %49, %47
  %bi_opf.i = getelementptr inbounds %struct.bio, ptr %call.i11, i32 0, i32 2
  %50 = ptrtoint ptr %bi_opf.i to i32
  call void @__asan_store4_noabort(i32 %50)
  store i32 %or.i, ptr %bi_opf.i, align 8
  tail call void @guard_bio_eod(ptr noundef %call.i11) #14
  %tobool131.not = icmp eq ptr %wbc, null
  br i1 %tobool131.not, label %do.end117.if.end135_crit_edge, label %if.then132

do.end117.if.end135_crit_edge:                    ; preds = %do.end117
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end135

if.then132:                                       ; preds = %do.end117
  %wb.i = getelementptr inbounds %struct.writeback_control, ptr %wbc, i32 0, i32 6
  %51 = ptrtoint ptr %wb.i to i32
  call void @__asan_load4_noabort(i32 %51)
  %52 = load ptr, ptr %wb.i, align 8
  %tobool.not.i = icmp eq ptr %52, null
  br i1 %tobool.not.i, label %if.then132.wbc_init_bio.exit_crit_edge, label %if.then.i12

if.then132.wbc_init_bio.exit_crit_edge:           ; preds = %if.then132
  call void @__sanitizer_cov_trace_pc() #16
  br label %wbc_init_bio.exit

if.then.i12:                                      ; preds = %if.then132
  call void @__sanitizer_cov_trace_pc() #16
  %blkcg_css.i = getelementptr inbounds %struct.bdi_writeback, ptr %52, i32 0, i32 30
  %53 = ptrtoint ptr %blkcg_css.i to i32
  call void @__asan_load4_noabort(i32 %53)
  %54 = load ptr, ptr %blkcg_css.i, align 4
  tail call void @bio_associate_blkg_from_css(ptr noundef %call.i11, ptr noundef %54) #14
  br label %wbc_init_bio.exit

wbc_init_bio.exit:                                ; preds = %if.then.i12, %if.then132.wbc_init_bio.exit_crit_edge
  %55 = ptrtoint ptr %b_page to i32
  call void @__asan_load4_noabort(i32 %55)
  %56 = load ptr, ptr %b_page, align 8
  %57 = ptrtoint ptr %b_size to i32
  call void @__asan_load4_noabort(i32 %57)
  %58 = load i32, ptr %b_size, align 8
  tail call void @wbc_account_cgroup_owner(ptr noundef nonnull %wbc, ptr noundef %56, i32 noundef %58) #14
  br label %if.end135

if.end135:                                        ; preds = %wbc_init_bio.exit, %do.end117.if.end135_crit_edge
  tail call void @submit_bio(ptr noundef %call.i11) #14
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local void @page_zero_new_buffers(ptr noundef %page, i32 noundef %from, i32 noundef %to) #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = getelementptr inbounds %struct.page, ptr %page, i32 0, i32 1
  %1 = ptrtoint ptr %0 to i32
  call void @__asan_load4_noabort(i32 %1)
  %2 = load volatile i32, ptr %0, align 4
  %and.i.i = and i32 %2, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i)
  %tobool.not.i.i = icmp eq i32 %and.i.i, 0
  br i1 %tobool.not.i.i, label %if.end.i.i, label %if.then.i.i, !prof !254

if.then.i.i:                                      ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i.i = add i32 %2, -1
  br label %_compound_head.exit.i

if.end.i.i:                                       ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  %3 = ptrtoint ptr %page to i32
  br label %_compound_head.exit.i

_compound_head.exit.i:                            ; preds = %if.end.i.i, %if.then.i.i
  %retval.0.i.i = phi i32 [ %sub.i.i, %if.then.i.i ], [ %3, %if.end.i.i ]
  %4 = inttoptr i32 %retval.0.i.i to ptr
  %5 = ptrtoint ptr %4 to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load volatile i32, ptr %4, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %6)
  %cmp.i.not.i = icmp eq i32 %6, -1
  %7 = ptrtoint ptr %0 to i32
  call void @__asan_load4_noabort(i32 %7)
  %8 = load volatile i32, ptr %0, align 4
  %and.i16.i = and i32 %8, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i16.i)
  %tobool.not.i17.i = icmp eq i32 %and.i16.i, 0
  br i1 %cmp.i.not.i, label %if.then.i, label %do.end10.i, !prof !262

if.then.i:                                        ; preds = %_compound_head.exit.i
  br i1 %tobool.not.i17.i, label %if.end.i20.i, label %if.then.i19.i, !prof !254

if.then.i19.i:                                    ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i18.i = add i32 %8, -1
  br label %_compound_head.exit22.i

if.end.i20.i:                                     ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #16
  %9 = ptrtoint ptr %page to i32
  br label %_compound_head.exit22.i

_compound_head.exit22.i:                          ; preds = %if.end.i20.i, %if.then.i19.i
  %retval.0.i21.i = phi i32 [ %sub.i18.i, %if.then.i19.i ], [ %9, %if.end.i20.i ]
  %10 = inttoptr i32 %retval.0.i21.i to ptr
  tail call void @dump_page(ptr noundef %10, ptr noundef nonnull @.str.14) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 414, 0\0A.popsection", ""() #14, !srcloc !263
  unreachable

do.end10.i:                                       ; preds = %_compound_head.exit.i
  br i1 %tobool.not.i17.i, label %if.end.i27.i, label %if.then.i26.i, !prof !254

if.then.i26.i:                                    ; preds = %do.end10.i
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i25.i = add i32 %8, -1
  br label %PageLocked.exit

if.end.i27.i:                                     ; preds = %do.end10.i
  call void @__sanitizer_cov_trace_pc() #16
  %11 = ptrtoint ptr %page to i32
  br label %PageLocked.exit

PageLocked.exit:                                  ; preds = %if.end.i27.i, %if.then.i26.i
  %retval.0.i28.i = phi i32 [ %sub.i25.i, %if.then.i26.i ], [ %11, %if.end.i27.i ]
  %12 = inttoptr i32 %retval.0.i28.i to ptr
  %13 = ptrtoint ptr %12 to i32
  call void @__asan_load4_noabort(i32 %13)
  %14 = load volatile i32, ptr %12, align 4
  %and1.i.i = and i32 %14, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and1.i.i)
  %tobool.not = icmp eq i32 %and1.i.i, 0
  br i1 %tobool.not, label %do.body4, label %do.end9, !prof !262

do.body4:                                         ; preds = %PageLocked.exit
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22fs/buffer.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 1885, 0\0A.popsection", ""() #14, !srcloc !340
  unreachable

do.end9:                                          ; preds = %PageLocked.exit
  %15 = ptrtoint ptr %page to i32
  call void @__asan_load4_noabort(i32 %15)
  %16 = load volatile i32, ptr %page, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %16)
  %cmp.i.not.i84 = icmp eq i32 %16, -1
  br i1 %cmp.i.not.i84, label %if.then.i85, label %PagePrivate.exit, !prof !262

if.then.i85:                                      ; preds = %do.end9
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %page, ptr noundef nonnull @.str.15) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 452, 0\0A.popsection", ""() #14, !srcloc !265
  unreachable

PagePrivate.exit:                                 ; preds = %do.end9
  %17 = ptrtoint ptr %page to i32
  call void @__asan_load4_noabort(i32 %17)
  %18 = load volatile i32, ptr %page, align 4
  %19 = and i32 %18, 8192
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %19)
  %tobool11.not = icmp eq i32 %19, 0
  br i1 %tobool11.not, label %PagePrivate.exit.cleanup_crit_edge, label %do.body14

PagePrivate.exit.cleanup_crit_edge:               ; preds = %PagePrivate.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %cleanup

do.body14:                                        ; preds = %PagePrivate.exit
  %20 = ptrtoint ptr %page to i32
  call void @__asan_load4_noabort(i32 %20)
  %21 = load volatile i32, ptr %page, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %21)
  %cmp.i.not.i87 = icmp eq i32 %21, -1
  br i1 %cmp.i.not.i87, label %if.then.i88, label %PagePrivate.exit91, !prof !262

if.then.i88:                                      ; preds = %do.body14
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %page, ptr noundef nonnull @.str.15) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 452, 0\0A.popsection", ""() #14, !srcloc !265
  unreachable

PagePrivate.exit91:                               ; preds = %do.body14
  %22 = ptrtoint ptr %page to i32
  call void @__asan_load4_noabort(i32 %22)
  %23 = load volatile i32, ptr %page, align 4
  %24 = and i32 %23, 8192
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %24)
  %tobool16.not = icmp eq i32 %24, 0
  br i1 %tobool16.not, label %do.body26, label %do.end34, !prof !262

do.body26:                                        ; preds = %PagePrivate.exit91
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22fs/buffer.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 1889, 0\0A.popsection", ""() #14, !srcloc !341
  unreachable

do.end34:                                         ; preds = %PagePrivate.exit91
  %private = getelementptr inbounds %struct.page, ptr %page, i32 0, i32 1, i32 0, i32 3
  %25 = ptrtoint ptr %private to i32
  call void @__asan_load4_noabort(i32 %25)
  %26 = load i32, ptr %private, align 4
  %27 = inttoptr i32 %26 to ptr
  %28 = ptrtoint ptr %page to i32
  br label %do.body35

do.body35:                                        ; preds = %if.end54.do.body35_crit_edge, %do.end34
  %bh.0 = phi ptr [ %27, %do.end34 ], [ %49, %if.end54.do.body35_crit_edge ]
  %block_start.0 = phi i32 [ 0, %do.end34 ], [ %add, %if.end54.do.body35_crit_edge ]
  %b_size = getelementptr inbounds %struct.buffer_head, ptr %bh.0, i32 0, i32 4
  %29 = ptrtoint ptr %b_size to i32
  call void @__asan_load4_noabort(i32 %29)
  %30 = load i32, ptr %b_size, align 8
  %add = add i32 %30, %block_start.0
  %31 = ptrtoint ptr %bh.0 to i32
  call void @__asan_load4_noabort(i32 %31)
  %32 = load volatile i32, ptr %bh.0, align 4
  %33 = and i32 %32, 32
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %33)
  %tobool37.not = icmp ne i32 %33, 0
  call void @__sanitizer_cov_trace_cmp4(i32 %add, i32 %from)
  %cmp = icmp ugt i32 %add, %from
  %or.cond = select i1 %tobool37.not, i1 %cmp, i1 false
  call void @__sanitizer_cov_trace_cmp4(i32 %block_start.0, i32 %to)
  %cmp39 = icmp ult i32 %block_start.0, %to
  %or.cond83 = select i1 %or.cond, i1 %cmp39, i1 false
  br i1 %or.cond83, label %if.then40, label %do.body35.if.end54_crit_edge

do.body35.if.end54_crit_edge:                     ; preds = %do.body35
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end54

if.then40:                                        ; preds = %do.body35
  %34 = ptrtoint ptr %0 to i32
  call void @__asan_load4_noabort(i32 %34)
  %35 = load volatile i32, ptr %0, align 4
  %and.i.i96 = and i32 %35, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i96)
  %tobool.not.i.i97 = icmp eq i32 %and.i.i96, 0
  br i1 %tobool.not.i.i97, label %if.then40._compound_head.exit.i102_crit_edge, label %if.then.i.i99, !prof !254

if.then40._compound_head.exit.i102_crit_edge:     ; preds = %if.then40
  call void @__sanitizer_cov_trace_pc() #16
  br label %_compound_head.exit.i102

if.then.i.i99:                                    ; preds = %if.then40
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i.i98 = add i32 %35, -1
  br label %_compound_head.exit.i102

_compound_head.exit.i102:                         ; preds = %if.then.i.i99, %if.then40._compound_head.exit.i102_crit_edge
  %retval.0.i.i101 = phi i32 [ %sub.i.i98, %if.then.i.i99 ], [ %28, %if.then40._compound_head.exit.i102_crit_edge ]
  %36 = inttoptr i32 %retval.0.i.i101 to ptr
  %37 = getelementptr inbounds %struct.page, ptr %36, i32 0, i32 1
  %38 = ptrtoint ptr %37 to i32
  call void @__asan_load4_noabort(i32 %38)
  %39 = load volatile i32, ptr %37, align 4
  %and.i.i.i.i = and i32 %39, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i.i.i)
  %tobool.not.i.i.i = icmp eq i32 %and.i.i.i.i, 0
  br i1 %tobool.not.i.i.i, label %folio_flags.exit.i.i, label %if.then.i.i.i, !prof !254

if.then.i.i.i:                                    ; preds = %_compound_head.exit.i102
  call void @__sanitizer_cov_trace_pc() #16
  %40 = inttoptr i32 %retval.0.i.i101 to ptr
  tail call void @dump_page(ptr noundef %40, ptr noundef nonnull @.str.24) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 260, 0\0A.popsection", ""() #14, !srcloc !292
  unreachable

folio_flags.exit.i.i:                             ; preds = %_compound_head.exit.i102
  %41 = ptrtoint ptr %36 to i32
  call void @__asan_load4_noabort(i32 %41)
  %42 = load volatile i32, ptr %36, align 4
  %43 = and i32 %42, 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %43)
  %tobool.i.not.i = icmp eq i32 %43, 0
  br i1 %tobool.i.not.i, label %if.then43, label %PageUptodate.exit

PageUptodate.exit:                                ; preds = %folio_flags.exit.i.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !322
  br label %if.end52

if.then43:                                        ; preds = %folio_flags.exit.i.i
  %44 = tail call i32 @llvm.umax.i32(i32 %block_start.0, i32 %from)
  %45 = tail call i32 @llvm.umin.i32(i32 %add, i32 %to)
  tail call void @zero_user_segments(ptr noundef %page, i32 noundef %44, i32 noundef %45, i32 noundef 0, i32 noundef 0) #14
  %46 = ptrtoint ptr %bh.0 to i32
  call void @__asan_load4_noabort(i32 %46)
  %47 = load volatile i32, ptr %bh.0, align 4
  %and1.i.i94 = and i32 %47, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and1.i.i94)
  %tobool.not.i = icmp eq i32 %and1.i.i94, 0
  br i1 %tobool.not.i, label %if.then.i95, label %if.then43.if.end52_crit_edge

if.then43.if.end52_crit_edge:                     ; preds = %if.then43
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end52

if.then.i95:                                      ; preds = %if.then43
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @_set_bit(i32 noundef 0, ptr noundef %bh.0) #14
  br label %if.end52

if.end52:                                         ; preds = %if.then.i95, %if.then43.if.end52_crit_edge, %PageUptodate.exit
  tail call void @_clear_bit(i32 noundef 5, ptr noundef %bh.0) #14
  tail call void @mark_buffer_dirty(ptr noundef %bh.0)
  br label %if.end54

if.end54:                                         ; preds = %if.end52, %do.body35.if.end54_crit_edge
  %b_this_page = getelementptr inbounds %struct.buffer_head, ptr %bh.0, i32 0, i32 1
  %48 = ptrtoint ptr %b_this_page to i32
  call void @__asan_load4_noabort(i32 %48)
  %49 = load ptr, ptr %b_this_page, align 4
  %cmp56.not = icmp eq ptr %49, %27
  br i1 %cmp56.not, label %if.end54.cleanup_crit_edge, label %if.end54.do.body35_crit_edge

if.end54.do.body35_crit_edge:                     ; preds = %if.end54
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.body35

if.end54.cleanup_crit_edge:                       ; preds = %if.end54
  call void @__sanitizer_cov_trace_pc() #16
  br label %cleanup

cleanup:                                          ; preds = %if.end54.cleanup_crit_edge, %PagePrivate.exit.cleanup_crit_edge
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @__block_write_begin_int(ptr noundef %folio, i64 noundef %pos, i32 noundef %len, ptr noundef readonly %get_block, ptr nocapture noundef readonly %iomap) local_unnamed_addr #2 align 64 {
entry:
  %bh = alloca ptr, align 4
  %wait = alloca [2 x ptr], align 4
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = trunc i64 %pos to i32
  %conv = and i32 %0, 4095
  %add = add i32 %conv, %len
  %mapping = getelementptr inbounds %struct.anon.113, ptr %folio, i32 0, i32 2
  %1 = ptrtoint ptr %mapping to i32
  call void @__asan_load4_noabort(i32 %1)
  %2 = load ptr, ptr %mapping, align 4
  %3 = ptrtoint ptr %2 to i32
  call void @__asan_load4_noabort(i32 %3)
  %4 = load ptr, ptr %2, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %bh) #14
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %wait) #14
  %5 = ptrtoint ptr %wait to i32
  call void @__asan_store4_noabort(i32 %5)
  store ptr inttoptr (i32 -1 to ptr), ptr %wait, align 4, !annotation !342
  %6 = getelementptr inbounds [2 x ptr], ptr %wait, i32 0, i32 1
  %7 = ptrtoint ptr %6 to i32
  call void @__asan_store4_noabort(i32 %7)
  store ptr inttoptr (i32 -1 to ptr), ptr %6, align 4, !annotation !342
  %8 = getelementptr inbounds %struct.page, ptr %folio, i32 0, i32 1
  %9 = ptrtoint ptr %8 to i32
  call void @__asan_load4_noabort(i32 %9)
  %10 = load volatile i32, ptr %8, align 4
  %and.i.i.i = and i32 %10, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i.i)
  %tobool.not.i.i = icmp eq i32 %and.i.i.i, 0
  br i1 %tobool.not.i.i, label %folio_test_locked.exit, label %if.then.i.i, !prof !254

if.then.i.i:                                      ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %folio, ptr noundef nonnull @.str.24) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 260, 0\0A.popsection", ""() #14, !srcloc !292
  unreachable

folio_test_locked.exit:                           ; preds = %entry
  %11 = ptrtoint ptr %folio to i32
  call void @__asan_load4_noabort(i32 %11)
  %12 = load volatile i32, ptr %folio, align 4
  %and1.i.i = and i32 %12, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and1.i.i)
  %tobool.i.not = icmp eq i32 %and1.i.i, 0
  br i1 %tobool.i.not, label %do.body3, label %do.body27, !prof !262

do.body3:                                         ; preds = %folio_test_locked.exit
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22fs/buffer.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 1984, 0\0A.popsection", ""() #14, !srcloc !343
  unreachable

do.body27:                                        ; preds = %folio_test_locked.exit
  call void @__sanitizer_cov_trace_const_cmp4(i32 4096, i32 %add)
  %cmp28 = icmp ugt i32 %add, 4096
  br i1 %cmp28, label %do.body37, label %do.body46, !prof !262

do.body37:                                        ; preds = %do.body27
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22fs/buffer.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 1986, 0\0A.popsection", ""() #14, !srcloc !344
  unreachable

do.body46:                                        ; preds = %do.body27
  call void @__sanitizer_cov_trace_cmp4(i32 %conv, i32 %add)
  %cmp47 = icmp ugt i32 %conv, %add
  br i1 %cmp47, label %do.body56, label %do.end64, !prof !262

do.body56:                                        ; preds = %do.body46
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22fs/buffer.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 1987, 0\0A.popsection", ""() #14, !srcloc !345
  unreachable

do.end64:                                         ; preds = %do.body46
  %call65 = tail call fastcc ptr @create_page_buffers(ptr noundef %folio, ptr noundef %4, i32 noundef 0)
  %b_size = getelementptr inbounds %struct.buffer_head, ptr %call65, i32 0, i32 4
  %13 = ptrtoint ptr %b_size to i32
  call void @__asan_load4_noabort(i32 %13)
  %14 = load i32, ptr %b_size, align 8
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %14)
  %tobool.not.i.i.i = icmp eq i32 %14, 0
  %15 = tail call i32 @llvm.ctlz.i32(i32 %14, i1 true) #14, !range !313
  %index = getelementptr inbounds %struct.anon.113, ptr %folio, i32 0, i32 3
  %16 = ptrtoint ptr %index to i32
  call void @__asan_load4_noabort(i32 %16)
  %17 = load i32, ptr %index, align 4
  %conv67 = zext i32 %17 to i64
  %sub.i.op.i.i.neg.op = add nsw i32 %15, -19
  %sub = select i1 %tobool.not.i.i.i, i32 13, i32 %sub.i.op.i.i.neg.op
  %sh_prom = zext i32 %sub to i64
  %shl = shl i64 %conv67, %sh_prom
  %18 = ptrtoint ptr %bh to i32
  call void @__asan_store4_noabort(i32 %18)
  store ptr %call65, ptr %bh, align 4
  %tobool125.not = icmp eq ptr %get_block, null
  %i_blkbits.i = getelementptr inbounds %struct.inode, ptr %4, i32 0, i32 20
  %bdev.i = getelementptr inbounds %struct.iomap, ptr %iomap, i32 0, i32 5
  %offset1.i = getelementptr inbounds %struct.iomap, ptr %iomap, i32 0, i32 1
  %length.i = getelementptr inbounds %struct.iomap, ptr %iomap, i32 0, i32 2
  %type.i = getelementptr inbounds %struct.iomap, ptr %iomap, i32 0, i32 3
  %flags.i = getelementptr inbounds %struct.iomap, ptr %iomap, i32 0, i32 4
  br label %for.body

for.body:                                         ; preds = %for.inc.for.body_crit_edge, %do.end64
  %wait_bh.0292 = phi ptr [ %wait, %do.end64 ], [ %wait_bh.1, %for.inc.for.body_crit_edge ]
  %block.0288 = phi i64 [ %shl, %do.end64 ], [ %inc, %for.inc.for.body_crit_edge ]
  %block_start.0286 = phi i32 [ 0, %do.end64 ], [ %add73, %for.inc.for.body_crit_edge ]
  %storemerge285 = phi ptr [ %call65, %do.end64 ], [ %137, %for.inc.for.body_crit_edge ]
  %add73 = add i32 %block_start.0286, %14
  call void @__sanitizer_cov_trace_cmp4(i32 %add73, i32 %conv)
  %cmp74.not = icmp ugt i32 %add73, %conv
  call void @__sanitizer_cov_trace_cmp4(i32 %block_start.0286, i32 %add)
  %cmp76.not = icmp ult i32 %block_start.0286, %add
  %or.cond231 = and i1 %cmp76.not, %cmp74.not
  br i1 %or.cond231, label %if.end86, label %if.then78

if.then78:                                        ; preds = %for.body
  %19 = ptrtoint ptr %8 to i32
  call void @__asan_load4_noabort(i32 %19)
  %20 = load volatile i32, ptr %8, align 4
  %and.i.i.i256 = and i32 %20, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i.i256)
  %tobool.not.i.i257 = icmp eq i32 %and.i.i.i256, 0
  br i1 %tobool.not.i.i257, label %folio_flags.exit.i, label %if.then.i.i258, !prof !254

if.then.i.i258:                                   ; preds = %if.then78
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %folio, ptr noundef nonnull @.str.24) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 260, 0\0A.popsection", ""() #14, !srcloc !292
  unreachable

folio_flags.exit.i:                               ; preds = %if.then78
  %21 = ptrtoint ptr %folio to i32
  call void @__asan_load4_noabort(i32 %21)
  %22 = load volatile i32, ptr %folio, align 4
  %23 = and i32 %22, 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %23)
  %tobool.i259.not = icmp eq i32 %23, 0
  br i1 %tobool.i259.not, label %folio_flags.exit.i.for.inc_crit_edge, label %if.then80

folio_flags.exit.i.for.inc_crit_edge:             ; preds = %folio_flags.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %for.inc

if.then80:                                        ; preds = %folio_flags.exit.i
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !322
  %24 = ptrtoint ptr %storemerge285 to i32
  call void @__asan_load4_noabort(i32 %24)
  %25 = load volatile i32, ptr %storemerge285, align 4
  %and1.i.i234 = and i32 %25, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and1.i.i234)
  %tobool82.not = icmp eq i32 %and1.i.i234, 0
  br i1 %tobool82.not, label %if.then83, label %if.then80.for.inc_crit_edge

if.then80.for.inc_crit_edge:                      ; preds = %if.then80
  call void @__sanitizer_cov_trace_pc() #16
  br label %for.inc

if.then83:                                        ; preds = %if.then80
  %26 = ptrtoint ptr %storemerge285 to i32
  call void @__asan_load4_noabort(i32 %26)
  %27 = load volatile i32, ptr %storemerge285, align 4
  %and1.i.i235 = and i32 %27, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and1.i.i235)
  %tobool.not.i = icmp eq i32 %and1.i.i235, 0
  br i1 %tobool.not.i, label %if.then.i, label %if.then83.for.inc_crit_edge

if.then83.for.inc_crit_edge:                      ; preds = %if.then83
  call void @__sanitizer_cov_trace_pc() #16
  br label %for.inc

if.then.i:                                        ; preds = %if.then83
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @_set_bit(i32 noundef 0, ptr noundef %storemerge285) #14
  br label %for.inc

if.end86:                                         ; preds = %for.body
  %28 = ptrtoint ptr %storemerge285 to i32
  call void @__asan_load4_noabort(i32 %28)
  %29 = load volatile i32, ptr %storemerge285, align 4
  %30 = and i32 %29, 32
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %30)
  %tobool88.not = icmp eq i32 %30, 0
  br i1 %tobool88.not, label %if.end86.if.end90_crit_edge, label %if.then89

if.end86.if.end90_crit_edge:                      ; preds = %if.end86
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end90

if.then89:                                        ; preds = %if.end86
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @_clear_bit(i32 noundef 5, ptr noundef %storemerge285) #14
  br label %if.end90

if.end90:                                         ; preds = %if.then89, %if.end86.if.end90_crit_edge
  %31 = ptrtoint ptr %bh to i32
  call void @__asan_load4_noabort(i32 %31)
  %32 = load ptr, ptr %bh, align 4
  %33 = ptrtoint ptr %32 to i32
  call void @__asan_load4_noabort(i32 %33)
  %34 = load volatile i32, ptr %32, align 4
  %35 = and i32 %34, 16
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %35)
  %tobool92.not = icmp eq i32 %35, 0
  br i1 %tobool92.not, label %if.then93, label %if.end90.if.end146_crit_edge

if.end90.if.end146_crit_edge:                     ; preds = %if.end90
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end146

if.then93:                                        ; preds = %if.end90
  %b_size94 = getelementptr inbounds %struct.buffer_head, ptr %32, i32 0, i32 4
  %36 = ptrtoint ptr %b_size94 to i32
  call void @__asan_load4_noabort(i32 %36)
  %37 = load i32, ptr %b_size94, align 8
  call void @__sanitizer_cov_trace_cmp4(i32 %37, i32 %14)
  %cmp95.not = icmp eq i32 %37, %14
  br i1 %cmp95.not, label %if.then93.if.end118_crit_edge, label %do.end112, !prof !254

if.then93.if.end118_crit_edge:                    ; preds = %if.then93
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end118

do.end112:                                        ; preds = %if.then93
  call void @__sanitizer_cov_trace_pc() #16
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.4, i32 noundef 2008, i32 noundef 9, ptr noundef null) #14
  br label %if.end118

if.end118:                                        ; preds = %do.end112, %if.then93.if.end118_crit_edge
  %38 = ptrtoint ptr %bh to i32
  call void @__asan_load4_noabort(i32 %38)
  %39 = load ptr, ptr %bh, align 4
  br i1 %tobool125.not, label %if.else, label %if.then126

if.then126:                                       ; preds = %if.end118
  %call127 = tail call i32 %get_block(ptr noundef %4, i64 noundef %block.0288, ptr noundef %39, i32 noundef 1) #14
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call127)
  %tobool128.not = icmp eq i32 %call127, 0
  br i1 %tobool128.not, label %if.then126.if.end131_crit_edge, label %if.then126.for.end_crit_edge

if.then126.for.end_crit_edge:                     ; preds = %if.then126
  call void @__sanitizer_cov_trace_pc() #16
  br label %for.end

if.then126.if.end131_crit_edge:                   ; preds = %if.then126
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end131

if.else:                                          ; preds = %if.end118
  %40 = ptrtoint ptr %i_blkbits.i to i32
  call void @__asan_load1_noabort(i32 %40)
  %41 = load i8, ptr %i_blkbits.i, align 2
  %sh_prom.i = zext i8 %41 to i64
  %shl.i = shl i64 %block.0288, %sh_prom.i
  %42 = ptrtoint ptr %bdev.i to i32
  call void @__asan_load4_noabort(i32 %42)
  %43 = load ptr, ptr %bdev.i, align 4
  %b_bdev.i = getelementptr inbounds %struct.buffer_head, ptr %39, i32 0, i32 6
  %44 = ptrtoint ptr %b_bdev.i to i32
  call void @__asan_store4_noabort(i32 %44)
  store ptr %43, ptr %b_bdev.i, align 8
  %45 = ptrtoint ptr %offset1.i to i32
  call void @__asan_load8_noabort(i32 %45)
  %46 = load i64, ptr %offset1.i, align 8
  %47 = ptrtoint ptr %length.i to i32
  call void @__asan_load8_noabort(i32 %47)
  %48 = load i64, ptr %length.i, align 8
  %add.i = add i64 %48, %46
  call void @__sanitizer_cov_trace_cmp8(i64 %shl.i, i64 %add.i)
  %cmp.not.i = icmp ult i64 %shl.i, %add.i
  br i1 %cmp.not.i, label %do.end9.i, label %do.body4.i, !prof !254

do.body4.i:                                       ; preds = %if.else
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22fs/buffer.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 1931, 0\0A.popsection", ""() #14, !srcloc !346
  unreachable

do.end9.i:                                        ; preds = %if.else
  %49 = ptrtoint ptr %type.i to i32
  call void @__asan_load2_noabort(i32 %49)
  %50 = load i16, ptr %type.i, align 8
  %51 = zext i16 %50 to i64
  call void @__sanitizer_cov_trace_switch(i64 %51, ptr @__sancov_gen_cov_switch_values.50)
  switch i16 %50, label %do.end9.i.if.end131_crit_edge [
    i16 0, label %sw.bb.i
    i16 1, label %sw.bb17.i
    i16 3, label %sw.bb26.i
    i16 2, label %do.end9.i.sw.bb27.i_crit_edge
  ]

do.end9.i.sw.bb27.i_crit_edge:                    ; preds = %do.end9.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %sw.bb27.i

do.end9.i.if.end131_crit_edge:                    ; preds = %do.end9.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end131

sw.bb.i:                                          ; preds = %do.end9.i
  %52 = ptrtoint ptr %39 to i32
  call void @__asan_load4_noabort(i32 %52)
  %53 = load volatile i32, ptr %39, align 4
  %and1.i.i.i = and i32 %53, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and1.i.i.i)
  %tobool11.not.i = icmp eq i32 %and1.i.i.i, 0
  br i1 %tobool11.not.i, label %sw.bb.i.if.then15.i_crit_edge, label %lor.lhs.false.i

sw.bb.i.if.then15.i_crit_edge:                    ; preds = %sw.bb.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.then15.i

lor.lhs.false.i:                                  ; preds = %sw.bb.i
  %call12.i = tail call fastcc i64 @i_size_read(ptr noundef %4) #14
  call void @__sanitizer_cov_trace_cmp8(i64 %shl.i, i64 %call12.i)
  %cmp13.not.i = icmp slt i64 %shl.i, %call12.i
  br i1 %cmp13.not.i, label %lor.lhs.false.i.if.end131_crit_edge, label %lor.lhs.false.i.if.then15.i_crit_edge

lor.lhs.false.i.if.then15.i_crit_edge:            ; preds = %lor.lhs.false.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.then15.i

lor.lhs.false.i.if.end131_crit_edge:              ; preds = %lor.lhs.false.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end131

if.then15.i:                                      ; preds = %lor.lhs.false.i.if.then15.i_crit_edge, %sw.bb.i.if.then15.i_crit_edge
  %54 = ptrtoint ptr %39 to i32
  call void @__asan_load4_noabort(i32 %54)
  %55 = load volatile i32, ptr %39, align 4
  %56 = and i32 %55, 32
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %56)
  %tobool.not.i.i260 = icmp eq i32 %56, 0
  br i1 %tobool.not.i.i260, label %if.then15.i.sw.epilog.sink.split.i_crit_edge, label %if.then15.i.if.end131_crit_edge

if.then15.i.if.end131_crit_edge:                  ; preds = %if.then15.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end131

if.then15.i.sw.epilog.sink.split.i_crit_edge:     ; preds = %if.then15.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %sw.epilog.sink.split.i

sw.bb17.i:                                        ; preds = %do.end9.i
  %57 = ptrtoint ptr %39 to i32
  call void @__asan_load4_noabort(i32 %57)
  %58 = load volatile i32, ptr %39, align 4
  %and1.i.i67.i = and i32 %58, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and1.i.i67.i)
  %tobool19.not.i = icmp eq i32 %and1.i.i67.i, 0
  br i1 %tobool19.not.i, label %sw.bb17.i.if.then24.i_crit_edge, label %lor.lhs.false20.i

sw.bb17.i.if.then24.i_crit_edge:                  ; preds = %sw.bb17.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.then24.i

lor.lhs.false20.i:                                ; preds = %sw.bb17.i
  %call21.i = tail call fastcc i64 @i_size_read(ptr noundef %4) #14
  call void @__sanitizer_cov_trace_cmp8(i64 %shl.i, i64 %call21.i)
  %cmp22.not.i = icmp slt i64 %shl.i, %call21.i
  br i1 %cmp22.not.i, label %lor.lhs.false20.i.if.end25.i_crit_edge, label %lor.lhs.false20.i.if.then24.i_crit_edge

lor.lhs.false20.i.if.then24.i_crit_edge:          ; preds = %lor.lhs.false20.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.then24.i

lor.lhs.false20.i.if.end25.i_crit_edge:           ; preds = %lor.lhs.false20.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end25.i

if.then24.i:                                      ; preds = %lor.lhs.false20.i.if.then24.i_crit_edge, %sw.bb17.i.if.then24.i_crit_edge
  %59 = ptrtoint ptr %39 to i32
  call void @__asan_load4_noabort(i32 %59)
  %60 = load volatile i32, ptr %39, align 4
  %61 = and i32 %60, 32
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %61)
  %tobool.not.i68.i = icmp eq i32 %61, 0
  br i1 %tobool.not.i68.i, label %if.then.i69.i, label %if.then24.i.if.end25.i_crit_edge

if.then24.i.if.end25.i_crit_edge:                 ; preds = %if.then24.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end25.i

if.then.i69.i:                                    ; preds = %if.then24.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @_set_bit(i32 noundef 5, ptr noundef %39) #14
  br label %if.end25.i

if.end25.i:                                       ; preds = %if.then.i69.i, %if.then24.i.if.end25.i_crit_edge, %lor.lhs.false20.i.if.end25.i_crit_edge
  %62 = ptrtoint ptr %39 to i32
  call void @__asan_load4_noabort(i32 %62)
  %63 = load volatile i32, ptr %39, align 4
  %and1.i.i71.i = and i32 %63, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and1.i.i71.i)
  %tobool.not.i72.i = icmp eq i32 %and1.i.i71.i, 0
  br i1 %tobool.not.i72.i, label %if.then.i73.i, label %if.end25.i.set_buffer_uptodate.exit.i_crit_edge

if.end25.i.set_buffer_uptodate.exit.i_crit_edge:  ; preds = %if.end25.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %set_buffer_uptodate.exit.i

if.then.i73.i:                                    ; preds = %if.end25.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @_set_bit(i32 noundef 0, ptr noundef %39) #14
  br label %set_buffer_uptodate.exit.i

set_buffer_uptodate.exit.i:                       ; preds = %if.then.i73.i, %if.end25.i.set_buffer_uptodate.exit.i_crit_edge
  %64 = ptrtoint ptr %39 to i32
  call void @__asan_load4_noabort(i32 %64)
  %65 = load volatile i32, ptr %39, align 4
  %66 = and i32 %65, 16
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %66)
  %tobool.not.i74.i = icmp eq i32 %66, 0
  br i1 %tobool.not.i74.i, label %if.then.i75.i, label %set_buffer_uptodate.exit.i.set_buffer_mapped.exit.i_crit_edge

set_buffer_uptodate.exit.i.set_buffer_mapped.exit.i_crit_edge: ; preds = %set_buffer_uptodate.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %set_buffer_mapped.exit.i

if.then.i75.i:                                    ; preds = %set_buffer_uptodate.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @_set_bit(i32 noundef 4, ptr noundef %39) #14
  br label %set_buffer_mapped.exit.i

set_buffer_mapped.exit.i:                         ; preds = %if.then.i75.i, %set_buffer_uptodate.exit.i.set_buffer_mapped.exit.i_crit_edge
  %67 = ptrtoint ptr %39 to i32
  call void @__asan_load4_noabort(i32 %67)
  %68 = load volatile i32, ptr %39, align 4
  %69 = and i32 %68, 256
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %69)
  %tobool.not.i76.i = icmp eq i32 %69, 0
  br i1 %tobool.not.i76.i, label %set_buffer_mapped.exit.i.sw.epilog.sink.split.i_crit_edge, label %set_buffer_mapped.exit.i.if.end131_crit_edge

set_buffer_mapped.exit.i.if.end131_crit_edge:     ; preds = %set_buffer_mapped.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end131

set_buffer_mapped.exit.i.sw.epilog.sink.split.i_crit_edge: ; preds = %set_buffer_mapped.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %sw.epilog.sink.split.i

sw.bb26.i:                                        ; preds = %do.end9.i
  %70 = ptrtoint ptr %39 to i32
  call void @__asan_load4_noabort(i32 %70)
  %71 = load volatile i32, ptr %39, align 4
  %72 = and i32 %71, 32
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %72)
  %tobool.not.i78.i = icmp eq i32 %72, 0
  br i1 %tobool.not.i78.i, label %if.then.i79.i, label %sw.bb26.i.set_buffer_new.exit80.i_crit_edge

sw.bb26.i.set_buffer_new.exit80.i_crit_edge:      ; preds = %sw.bb26.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %set_buffer_new.exit80.i

if.then.i79.i:                                    ; preds = %sw.bb26.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @_set_bit(i32 noundef 5, ptr noundef %39) #14
  br label %set_buffer_new.exit80.i

set_buffer_new.exit80.i:                          ; preds = %if.then.i79.i, %sw.bb26.i.set_buffer_new.exit80.i_crit_edge
  %73 = ptrtoint ptr %39 to i32
  call void @__asan_load4_noabort(i32 %73)
  %74 = load volatile i32, ptr %39, align 4
  %75 = and i32 %74, 2048
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %75)
  %tobool.not.i81.i = icmp eq i32 %75, 0
  br i1 %tobool.not.i81.i, label %if.then.i82.i, label %set_buffer_new.exit80.i.sw.bb27.i_crit_edge

set_buffer_new.exit80.i.sw.bb27.i_crit_edge:      ; preds = %set_buffer_new.exit80.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %sw.bb27.i

if.then.i82.i:                                    ; preds = %set_buffer_new.exit80.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @_set_bit(i32 noundef 11, ptr noundef %39) #14
  br label %sw.bb27.i

sw.bb27.i:                                        ; preds = %if.then.i82.i, %set_buffer_new.exit80.i.sw.bb27.i_crit_edge, %do.end9.i.sw.bb27.i_crit_edge
  %76 = ptrtoint ptr %flags.i to i32
  call void @__asan_load2_noabort(i32 %76)
  %77 = load i16, ptr %flags.i, align 2
  %78 = and i16 %77, 1
  call void @__sanitizer_cov_trace_const_cmp2(i16 0, i16 %78)
  %tobool29.not.i = icmp eq i16 %78, 0
  br i1 %tobool29.not.i, label %lor.lhs.false30.i, label %sw.bb27.i.if.then34.i_crit_edge

sw.bb27.i.if.then34.i_crit_edge:                  ; preds = %sw.bb27.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.then34.i

lor.lhs.false30.i:                                ; preds = %sw.bb27.i
  %call31.i = tail call fastcc i64 @i_size_read(ptr noundef %4) #14
  call void @__sanitizer_cov_trace_cmp8(i64 %shl.i, i64 %call31.i)
  %cmp32.not.i = icmp slt i64 %shl.i, %call31.i
  br i1 %cmp32.not.i, label %lor.lhs.false30.i.if.end35.i_crit_edge, label %lor.lhs.false30.i.if.then34.i_crit_edge

lor.lhs.false30.i.if.then34.i_crit_edge:          ; preds = %lor.lhs.false30.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.then34.i

lor.lhs.false30.i.if.end35.i_crit_edge:           ; preds = %lor.lhs.false30.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end35.i

if.then34.i:                                      ; preds = %lor.lhs.false30.i.if.then34.i_crit_edge, %sw.bb27.i.if.then34.i_crit_edge
  %79 = ptrtoint ptr %39 to i32
  call void @__asan_load4_noabort(i32 %79)
  %80 = load volatile i32, ptr %39, align 4
  %81 = and i32 %80, 32
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %81)
  %tobool.not.i83.i = icmp eq i32 %81, 0
  br i1 %tobool.not.i83.i, label %if.then.i84.i, label %if.then34.i.if.end35.i_crit_edge

if.then34.i.if.end35.i_crit_edge:                 ; preds = %if.then34.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end35.i

if.then.i84.i:                                    ; preds = %if.then34.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @_set_bit(i32 noundef 5, ptr noundef %39) #14
  br label %if.end35.i

if.end35.i:                                       ; preds = %if.then.i84.i, %if.then34.i.if.end35.i_crit_edge, %lor.lhs.false30.i.if.end35.i_crit_edge
  %82 = ptrtoint ptr %iomap to i32
  call void @__asan_load8_noabort(i32 %82)
  %83 = load i64, ptr %iomap, align 8
  %add36.i = add i64 %83, %shl.i
  %84 = ptrtoint ptr %offset1.i to i32
  call void @__asan_load8_noabort(i32 %84)
  %85 = load i64, ptr %offset1.i, align 8
  %sub.i261 = sub i64 %add36.i, %85
  %86 = ptrtoint ptr %i_blkbits.i to i32
  call void @__asan_load1_noabort(i32 %86)
  %87 = load i8, ptr %i_blkbits.i, align 2
  %sh_prom40.i = zext i8 %87 to i64
  %shr.i = lshr i64 %sub.i261, %sh_prom40.i
  %b_blocknr.i = getelementptr inbounds %struct.buffer_head, ptr %39, i32 0, i32 3
  %88 = ptrtoint ptr %b_blocknr.i to i32
  call void @__asan_store8_noabort(i32 %88)
  store i64 %shr.i, ptr %b_blocknr.i, align 8
  %89 = ptrtoint ptr %39 to i32
  call void @__asan_load4_noabort(i32 %89)
  %90 = load volatile i32, ptr %39, align 4
  %91 = and i32 %90, 16
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %91)
  %tobool.not.i86.i = icmp eq i32 %91, 0
  br i1 %tobool.not.i86.i, label %if.end35.i.sw.epilog.sink.split.i_crit_edge, label %if.end35.i.if.end131_crit_edge

if.end35.i.if.end131_crit_edge:                   ; preds = %if.end35.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end131

if.end35.i.sw.epilog.sink.split.i_crit_edge:      ; preds = %if.end35.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %sw.epilog.sink.split.i

sw.epilog.sink.split.i:                           ; preds = %if.end35.i.sw.epilog.sink.split.i_crit_edge, %set_buffer_mapped.exit.i.sw.epilog.sink.split.i_crit_edge, %if.then15.i.sw.epilog.sink.split.i_crit_edge
  %.sink.i = phi i32 [ 5, %if.then15.i.sw.epilog.sink.split.i_crit_edge ], [ 8, %set_buffer_mapped.exit.i.sw.epilog.sink.split.i_crit_edge ], [ 4, %if.end35.i.sw.epilog.sink.split.i_crit_edge ]
  tail call void @_set_bit(i32 noundef %.sink.i, ptr noundef %39) #14
  br label %if.end131

if.end131:                                        ; preds = %sw.epilog.sink.split.i, %if.end35.i.if.end131_crit_edge, %set_buffer_mapped.exit.i.if.end131_crit_edge, %if.then15.i.if.end131_crit_edge, %lor.lhs.false.i.if.end131_crit_edge, %do.end9.i.if.end131_crit_edge, %if.then126.if.end131_crit_edge
  %92 = ptrtoint ptr %bh to i32
  call void @__asan_load4_noabort(i32 %92)
  %93 = load ptr, ptr %bh, align 4
  %94 = ptrtoint ptr %93 to i32
  call void @__asan_load4_noabort(i32 %94)
  %95 = load volatile i32, ptr %93, align 4
  %96 = and i32 %95, 32
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %96)
  %tobool133.not = icmp eq i32 %96, 0
  br i1 %tobool133.not, label %if.end131.if.end146_crit_edge, label %if.then134

if.end131.if.end146_crit_edge:                    ; preds = %if.end131
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end146

if.then134:                                       ; preds = %if.end131
  %b_bdev.i262 = getelementptr inbounds %struct.buffer_head, ptr %93, i32 0, i32 6
  %97 = ptrtoint ptr %b_bdev.i262 to i32
  call void @__asan_load4_noabort(i32 %97)
  %98 = load ptr, ptr %b_bdev.i262, align 8
  %b_blocknr.i263 = getelementptr inbounds %struct.buffer_head, ptr %93, i32 0, i32 3
  %99 = ptrtoint ptr %b_blocknr.i263 to i32
  call void @__asan_load8_noabort(i32 %99)
  %100 = load i64, ptr %b_blocknr.i263, align 8
  tail call void @clean_bdev_aliases(ptr noundef %98, i64 noundef %100, i64 noundef 1) #14
  %101 = ptrtoint ptr %8 to i32
  call void @__asan_load4_noabort(i32 %101)
  %102 = load volatile i32, ptr %8, align 4
  %and.i.i.i264 = and i32 %102, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i.i264)
  %tobool.not.i.i265 = icmp eq i32 %and.i.i.i264, 0
  br i1 %tobool.not.i.i265, label %folio_flags.exit.i268, label %if.then.i.i266, !prof !254

if.then.i.i266:                                   ; preds = %if.then134
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %folio, ptr noundef nonnull @.str.24) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 260, 0\0A.popsection", ""() #14, !srcloc !292
  unreachable

folio_flags.exit.i268:                            ; preds = %if.then134
  %103 = ptrtoint ptr %folio to i32
  call void @__asan_load4_noabort(i32 %103)
  %104 = load volatile i32, ptr %folio, align 4
  %105 = and i32 %104, 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %105)
  %tobool.i267.not = icmp eq i32 %105, 0
  br i1 %tobool.i267.not, label %if.end137, label %if.then136

if.then136:                                       ; preds = %folio_flags.exit.i268
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !322
  %106 = ptrtoint ptr %bh to i32
  call void @__asan_load4_noabort(i32 %106)
  %107 = load ptr, ptr %bh, align 4
  tail call void @_clear_bit(i32 noundef 5, ptr noundef %107) #14
  %108 = ptrtoint ptr %107 to i32
  call void @__asan_load4_noabort(i32 %108)
  %109 = load volatile i32, ptr %107, align 4
  %and1.i.i241 = and i32 %109, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and1.i.i241)
  %tobool.not.i242 = icmp eq i32 %and1.i.i241, 0
  br i1 %tobool.not.i242, label %if.then.i243, label %if.then136.set_buffer_uptodate.exit244_crit_edge

if.then136.set_buffer_uptodate.exit244_crit_edge: ; preds = %if.then136
  call void @__sanitizer_cov_trace_pc() #16
  br label %set_buffer_uptodate.exit244

if.then.i243:                                     ; preds = %if.then136
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @_set_bit(i32 noundef 0, ptr noundef %107) #14
  br label %set_buffer_uptodate.exit244

set_buffer_uptodate.exit244:                      ; preds = %if.then.i243, %if.then136.set_buffer_uptodate.exit244_crit_edge
  %110 = ptrtoint ptr %bh to i32
  call void @__asan_load4_noabort(i32 %110)
  %111 = load ptr, ptr %bh, align 4
  tail call void @mark_buffer_dirty(ptr noundef %111)
  br label %for.inc

if.end137:                                        ; preds = %folio_flags.exit.i268
  call void @__sanitizer_cov_trace_cmp4(i32 %add73, i32 %add)
  %cmp138 = icmp ugt i32 %add73, %add
  call void @__sanitizer_cov_trace_cmp4(i32 %block_start.0286, i32 %conv)
  %cmp141 = icmp ult i32 %block_start.0286, %conv
  %or.cond232 = or i1 %cmp141, %cmp138
  br i1 %or.cond232, label %if.then143, label %if.end137.for.inc_crit_edge

if.end137.for.inc_crit_edge:                      ; preds = %if.end137
  call void @__sanitizer_cov_trace_pc() #16
  br label %for.inc

if.then143:                                       ; preds = %if.end137
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @zero_user_segments(ptr noundef %folio, i32 noundef %add, i32 noundef %add73, i32 noundef %block_start.0286, i32 noundef %conv) #14
  br label %for.inc

if.end146:                                        ; preds = %if.end131.if.end146_crit_edge, %if.end90.if.end146_crit_edge
  %112 = ptrtoint ptr %8 to i32
  call void @__asan_load4_noabort(i32 %112)
  %113 = load volatile i32, ptr %8, align 4
  %and.i.i.i271 = and i32 %113, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i.i271)
  %tobool.not.i.i272 = icmp eq i32 %and.i.i.i271, 0
  br i1 %tobool.not.i.i272, label %folio_flags.exit.i275, label %if.then.i.i273, !prof !254

if.then.i.i273:                                   ; preds = %if.end146
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %folio, ptr noundef nonnull @.str.24) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 260, 0\0A.popsection", ""() #14, !srcloc !292
  unreachable

folio_flags.exit.i275:                            ; preds = %if.end146
  %114 = ptrtoint ptr %folio to i32
  call void @__asan_load4_noabort(i32 %114)
  %115 = load volatile i32, ptr %folio, align 4
  %116 = and i32 %115, 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %116)
  %tobool.i274.not = icmp eq i32 %116, 0
  br i1 %tobool.i274.not, label %if.end153, label %if.then148

if.then148:                                       ; preds = %folio_flags.exit.i275
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !322
  %117 = ptrtoint ptr %bh to i32
  call void @__asan_load4_noabort(i32 %117)
  %118 = load ptr, ptr %bh, align 4
  %119 = ptrtoint ptr %118 to i32
  call void @__asan_load4_noabort(i32 %119)
  %120 = load volatile i32, ptr %118, align 4
  %and1.i.i245 = and i32 %120, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and1.i.i245)
  %tobool150.not = icmp eq i32 %and1.i.i245, 0
  br i1 %tobool150.not, label %if.then151, label %if.then148.for.inc_crit_edge

if.then148.for.inc_crit_edge:                     ; preds = %if.then148
  call void @__sanitizer_cov_trace_pc() #16
  br label %for.inc

if.then151:                                       ; preds = %if.then148
  %121 = ptrtoint ptr %118 to i32
  call void @__asan_load4_noabort(i32 %121)
  %122 = load volatile i32, ptr %118, align 4
  %and1.i.i246 = and i32 %122, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and1.i.i246)
  %tobool.not.i247 = icmp eq i32 %and1.i.i246, 0
  br i1 %tobool.not.i247, label %if.then.i248, label %if.then151.for.inc_crit_edge

if.then151.for.inc_crit_edge:                     ; preds = %if.then151
  call void @__sanitizer_cov_trace_pc() #16
  br label %for.inc

if.then.i248:                                     ; preds = %if.then151
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @_set_bit(i32 noundef 0, ptr noundef %118) #14
  br label %for.inc

if.end153:                                        ; preds = %folio_flags.exit.i275
  %123 = ptrtoint ptr %bh to i32
  call void @__asan_load4_noabort(i32 %123)
  %124 = load ptr, ptr %bh, align 4
  %125 = ptrtoint ptr %124 to i32
  call void @__asan_load4_noabort(i32 %125)
  %126 = load volatile i32, ptr %124, align 4
  %and1.i.i250 = and i32 %126, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and1.i.i250)
  %tobool155.not = icmp eq i32 %and1.i.i250, 0
  br i1 %tobool155.not, label %land.lhs.true, label %if.end153.for.inc_crit_edge

if.end153.for.inc_crit_edge:                      ; preds = %if.end153
  call void @__sanitizer_cov_trace_pc() #16
  br label %for.inc

land.lhs.true:                                    ; preds = %if.end153
  %127 = ptrtoint ptr %124 to i32
  call void @__asan_load4_noabort(i32 %127)
  %128 = load volatile i32, ptr %124, align 4
  %129 = and i32 %128, 256
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %129)
  %tobool157.not = icmp eq i32 %129, 0
  br i1 %tobool157.not, label %land.lhs.true158, label %land.lhs.true.for.inc_crit_edge

land.lhs.true.for.inc_crit_edge:                  ; preds = %land.lhs.true
  call void @__sanitizer_cov_trace_pc() #16
  br label %for.inc

land.lhs.true158:                                 ; preds = %land.lhs.true
  %130 = ptrtoint ptr %124 to i32
  call void @__asan_load4_noabort(i32 %130)
  %131 = load volatile i32, ptr %124, align 4
  %132 = and i32 %131, 2048
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %132)
  %tobool160.not = icmp eq i32 %132, 0
  br i1 %tobool160.not, label %land.lhs.true161, label %land.lhs.true158.for.inc_crit_edge

land.lhs.true158.for.inc_crit_edge:               ; preds = %land.lhs.true158
  call void @__sanitizer_cov_trace_pc() #16
  br label %for.inc

land.lhs.true161:                                 ; preds = %land.lhs.true158
  call void @__sanitizer_cov_trace_cmp4(i32 %block_start.0286, i32 %conv)
  %cmp162 = icmp ult i32 %block_start.0286, %conv
  call void @__sanitizer_cov_trace_cmp4(i32 %add73, i32 %add)
  %cmp165 = icmp ugt i32 %add73, %add
  %or.cond233 = or i1 %cmp162, %cmp165
  br i1 %or.cond233, label %if.then167, label %land.lhs.true161.for.inc_crit_edge

land.lhs.true161.for.inc_crit_edge:               ; preds = %land.lhs.true161
  call void @__sanitizer_cov_trace_pc() #16
  br label %for.inc

if.then167:                                       ; preds = %land.lhs.true161
  call void @__sanitizer_cov_trace_pc() #16
  call void @ll_rw_block(i32 noundef 0, i32 noundef 0, i32 noundef 1, ptr noundef nonnull %bh)
  %incdec.ptr = getelementptr ptr, ptr %wait_bh.0292, i32 1
  %133 = ptrtoint ptr %wait_bh.0292 to i32
  call void @__asan_store4_noabort(i32 %133)
  store ptr %124, ptr %wait_bh.0292, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.then167, %land.lhs.true161.for.inc_crit_edge, %land.lhs.true158.for.inc_crit_edge, %land.lhs.true.for.inc_crit_edge, %if.end153.for.inc_crit_edge, %if.then.i248, %if.then151.for.inc_crit_edge, %if.then148.for.inc_crit_edge, %if.then143, %if.end137.for.inc_crit_edge, %set_buffer_uptodate.exit244, %if.then.i, %if.then83.for.inc_crit_edge, %if.then80.for.inc_crit_edge, %folio_flags.exit.i.for.inc_crit_edge
  %wait_bh.1 = phi ptr [ %wait_bh.0292, %if.then80.for.inc_crit_edge ], [ %wait_bh.0292, %if.then148.for.inc_crit_edge ], [ %wait_bh.0292, %if.end153.for.inc_crit_edge ], [ %wait_bh.0292, %land.lhs.true.for.inc_crit_edge ], [ %wait_bh.0292, %land.lhs.true158.for.inc_crit_edge ], [ %incdec.ptr, %if.then167 ], [ %wait_bh.0292, %set_buffer_uptodate.exit244 ], [ %wait_bh.0292, %if.then143 ], [ %wait_bh.0292, %if.end137.for.inc_crit_edge ], [ %wait_bh.0292, %land.lhs.true161.for.inc_crit_edge ], [ %wait_bh.0292, %folio_flags.exit.i.for.inc_crit_edge ], [ %wait_bh.0292, %if.then83.for.inc_crit_edge ], [ %wait_bh.0292, %if.then.i ], [ %wait_bh.0292, %if.then151.for.inc_crit_edge ], [ %wait_bh.0292, %if.then.i248 ]
  %inc = add i64 %block.0288, 1
  %134 = ptrtoint ptr %bh to i32
  call void @__asan_load4_noabort(i32 %134)
  %135 = load ptr, ptr %bh, align 4
  %b_this_page = getelementptr inbounds %struct.buffer_head, ptr %135, i32 0, i32 1
  %136 = ptrtoint ptr %b_this_page to i32
  call void @__asan_load4_noabort(i32 %136)
  %137 = load ptr, ptr %b_this_page, align 4
  store ptr %137, ptr %bh, align 4
  %cmp68.not = icmp ne ptr %137, %call65
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %add73)
  %tobool70.not = icmp eq i32 %add73, 0
  %or.cond = select i1 %cmp68.not, i1 true, i1 %tobool70.not
  br i1 %or.cond, label %for.inc.for.body_crit_edge, label %for.inc.for.end_crit_edge

for.inc.for.end_crit_edge:                        ; preds = %for.inc
  call void @__sanitizer_cov_trace_pc() #16
  br label %for.end

for.inc.for.body_crit_edge:                       ; preds = %for.inc
  call void @__sanitizer_cov_trace_pc() #16
  br label %for.body

for.end:                                          ; preds = %for.inc.for.end_crit_edge, %if.then126.for.end_crit_edge
  %wait_bh.0.lcssa = phi ptr [ %wait_bh.1, %for.inc.for.end_crit_edge ], [ %wait_bh.0292, %if.then126.for.end_crit_edge ]
  %err.4 = phi i32 [ 0, %for.inc.for.end_crit_edge ], [ %call127, %if.then126.for.end_crit_edge ]
  %cmp170295 = icmp ugt ptr %wait_bh.0.lcssa, %wait
  br i1 %cmp170295, label %for.end.while.body_crit_edge, label %for.end.while.end_crit_edge

for.end.while.end_crit_edge:                      ; preds = %for.end
  call void @__sanitizer_cov_trace_pc() #16
  br label %while.end

for.end.while.body_crit_edge:                     ; preds = %for.end
  br label %while.body

while.body:                                       ; preds = %wait_on_buffer.exit.while.body_crit_edge, %for.end.while.body_crit_edge
  %wait_bh.2297 = phi ptr [ %incdec.ptr172, %wait_on_buffer.exit.while.body_crit_edge ], [ %wait_bh.0.lcssa, %for.end.while.body_crit_edge ]
  %err.5296 = phi i32 [ %spec.select, %wait_on_buffer.exit.while.body_crit_edge ], [ %err.4, %for.end.while.body_crit_edge ]
  %incdec.ptr172 = getelementptr ptr, ptr %wait_bh.2297, i32 -1
  %138 = ptrtoint ptr %incdec.ptr172 to i32
  call void @__asan_load4_noabort(i32 %138)
  %139 = load ptr, ptr %incdec.ptr172, align 4
  call void @__might_sleep(ptr noundef nonnull @.str.43, i32 noundef 354) #14
  %140 = ptrtoint ptr %139 to i32
  call void @__asan_load4_noabort(i32 %140)
  %141 = load volatile i32, ptr %139, align 4
  %142 = and i32 %141, 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %142)
  %tobool.not.i278 = icmp eq i32 %142, 0
  br i1 %tobool.not.i278, label %while.body.wait_on_buffer.exit_crit_edge, label %if.then.i280

while.body.wait_on_buffer.exit_crit_edge:         ; preds = %while.body
  call void @__sanitizer_cov_trace_pc() #16
  br label %wait_on_buffer.exit

if.then.i280:                                     ; preds = %while.body
  call void @__might_sleep(ptr noundef nonnull @.str.13, i32 noundef 98) #14
  %143 = ptrtoint ptr %139 to i32
  call void @__asan_load4_noabort(i32 %143)
  %144 = load volatile i32, ptr %139, align 4
  %145 = and i32 %144, 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %145)
  %tobool.not.i.i.i279 = icmp eq i32 %145, 0
  br i1 %tobool.not.i.i.i279, label %if.then.i280.wait_on_buffer.exit_crit_edge, label %if.end.i.i.i

if.then.i280.wait_on_buffer.exit_crit_edge:       ; preds = %if.then.i280
  call void @__sanitizer_cov_trace_pc() #16
  br label %wait_on_buffer.exit

if.end.i.i.i:                                     ; preds = %if.then.i280
  call void @__sanitizer_cov_trace_pc() #16
  %call3.i.i.i = call i32 @out_of_line_wait_on_bit(ptr noundef %139, i32 noundef 2, ptr noundef nonnull @bit_wait_io, i32 noundef 2) #14
  br label %wait_on_buffer.exit

wait_on_buffer.exit:                              ; preds = %if.end.i.i.i, %if.then.i280.wait_on_buffer.exit_crit_edge, %while.body.wait_on_buffer.exit_crit_edge
  %146 = ptrtoint ptr %incdec.ptr172 to i32
  call void @__asan_load4_noabort(i32 %146)
  %147 = load ptr, ptr %incdec.ptr172, align 4
  %148 = ptrtoint ptr %147 to i32
  call void @__asan_load4_noabort(i32 %148)
  %149 = load volatile i32, ptr %147, align 4
  %and1.i.i255 = and i32 %149, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and1.i.i255)
  %tobool174.not = icmp eq i32 %and1.i.i255, 0
  %spec.select = select i1 %tobool174.not, i32 -5, i32 %err.5296
  %cmp170 = icmp ugt ptr %incdec.ptr172, %wait
  br i1 %cmp170, label %wait_on_buffer.exit.while.body_crit_edge, label %wait_on_buffer.exit.while.end_crit_edge

wait_on_buffer.exit.while.end_crit_edge:          ; preds = %wait_on_buffer.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %while.end

wait_on_buffer.exit.while.body_crit_edge:         ; preds = %wait_on_buffer.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %while.body

while.end:                                        ; preds = %wait_on_buffer.exit.while.end_crit_edge, %for.end.while.end_crit_edge
  %err.5.lcssa = phi i32 [ %err.4, %for.end.while.end_crit_edge ], [ %spec.select, %wait_on_buffer.exit.while.end_crit_edge ]
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %err.5.lcssa)
  %tobool177.not = icmp eq i32 %err.5.lcssa, 0
  br i1 %tobool177.not, label %while.end.if.end185_crit_edge, label %if.then184, !prof !254

while.end.if.end185_crit_edge:                    ; preds = %while.end
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end185

if.then184:                                       ; preds = %while.end
  call void @__sanitizer_cov_trace_pc() #16
  call void @page_zero_new_buffers(ptr noundef %folio, i32 noundef %conv, i32 noundef %add)
  br label %if.end185

if.end185:                                        ; preds = %if.then184, %while.end.if.end185_crit_edge
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %wait) #14
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %bh) #14
  ret i32 %err.5.lcssa
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @__block_write_begin(ptr noundef %page, i64 noundef %pos, i32 noundef %len, ptr noundef %get_block) #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = getelementptr inbounds %struct.page, ptr %page, i32 0, i32 1
  %1 = ptrtoint ptr %0 to i32
  call void @__asan_load4_noabort(i32 %1)
  %2 = load volatile i32, ptr %0, align 4
  %and.i = and i32 %2, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i)
  %tobool.not.i = icmp eq i32 %and.i, 0
  br i1 %tobool.not.i, label %if.end.i, label %if.then.i, !prof !254

if.then.i:                                        ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i = add i32 %2, -1
  br label %_compound_head.exit

if.end.i:                                         ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  %3 = ptrtoint ptr %page to i32
  br label %_compound_head.exit

_compound_head.exit:                              ; preds = %if.end.i, %if.then.i
  %retval.0.i = phi i32 [ %sub.i, %if.then.i ], [ %3, %if.end.i ]
  %4 = inttoptr i32 %retval.0.i to ptr
  %call1 = tail call i32 @__block_write_begin_int(ptr noundef %4, i64 noundef %pos, i32 noundef %len, ptr noundef %get_block, ptr noundef null)
  ret i32 %call1
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @block_write_begin(ptr noundef %mapping, i64 noundef %pos, i32 noundef %len, i32 noundef %flags, ptr nocapture noundef writeonly %pagep, ptr noundef %get_block) #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = lshr i64 %pos, 12
  %conv = trunc i64 %0 to i32
  %call = tail call ptr @grab_cache_page_write_begin(ptr noundef %mapping, i32 noundef %conv, i32 noundef %flags) #14
  %tobool.not = icmp eq ptr %call, null
  br i1 %tobool.not, label %entry.cleanup_crit_edge, label %if.end

entry.cleanup_crit_edge:                          ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  br label %cleanup

if.end:                                           ; preds = %entry
  %1 = getelementptr inbounds %struct.page, ptr %call, i32 0, i32 1
  %2 = ptrtoint ptr %1 to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load volatile i32, ptr %1, align 4
  %and.i.i = and i32 %3, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i)
  %tobool.not.i.i = icmp eq i32 %and.i.i, 0
  br i1 %tobool.not.i.i, label %if.end.i.i, label %if.then.i.i, !prof !254

if.then.i.i:                                      ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i.i = add i32 %3, -1
  br label %__block_write_begin.exit

if.end.i.i:                                       ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #16
  %4 = ptrtoint ptr %call to i32
  br label %__block_write_begin.exit

__block_write_begin.exit:                         ; preds = %if.end.i.i, %if.then.i.i
  %retval.0.i.i = phi i32 [ %sub.i.i, %if.then.i.i ], [ %4, %if.end.i.i ]
  %5 = inttoptr i32 %retval.0.i.i to ptr
  %call1.i = tail call i32 @__block_write_begin_int(ptr noundef %5, i64 noundef %pos, i32 noundef %len, ptr noundef %get_block, ptr noundef null) #14
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call1.i)
  %tobool2.not = icmp eq i32 %call1.i, 0
  br i1 %tobool2.not, label %__block_write_begin.exit.if.end6_crit_edge, label %if.then5, !prof !254

__block_write_begin.exit.if.end6_crit_edge:       ; preds = %__block_write_begin.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end6

if.then5:                                         ; preds = %__block_write_begin.exit
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @unlock_page(ptr noundef nonnull %call) #14
  tail call fastcc void @put_page(ptr noundef nonnull %call)
  br label %if.end6

if.end6:                                          ; preds = %if.then5, %__block_write_begin.exit.if.end6_crit_edge
  %page.0 = phi ptr [ null, %if.then5 ], [ %call, %__block_write_begin.exit.if.end6_crit_edge ]
  %6 = ptrtoint ptr %pagep to i32
  call void @__asan_store4_noabort(i32 %6)
  store ptr %page.0, ptr %pagep, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end6, %entry.cleanup_crit_edge
  %retval.0 = phi i32 [ %call1.i, %if.end6 ], [ -12, %entry.cleanup_crit_edge ]
  ret i32 %retval.0
}

; Function Attrs: null_pointer_is_valid
declare dso_local ptr @grab_cache_page_write_begin(ptr noundef, i32 noundef, i32 noundef) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal fastcc void @put_page(ptr noundef %page) unnamed_addr #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  %0 = getelementptr inbounds %struct.page, ptr %page, i32 0, i32 1
  %1 = ptrtoint ptr %0 to i32
  call void @__asan_load4_noabort(i32 %1)
  %2 = load volatile i32, ptr %0, align 4
  %and.i = and i32 %2, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i)
  %tobool.not.i = icmp eq i32 %and.i, 0
  br i1 %tobool.not.i, label %if.end.i, label %if.then.i, !prof !254

if.then.i:                                        ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i = add i32 %2, -1
  br label %_compound_head.exit

if.end.i:                                         ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  %3 = ptrtoint ptr %page to i32
  br label %_compound_head.exit

_compound_head.exit:                              ; preds = %if.end.i, %if.then.i
  %retval.0.i = phi i32 [ %sub.i, %if.then.i ], [ %3, %if.end.i ]
  %4 = inttoptr i32 %retval.0.i to ptr
  %_refcount.i.i.i.i = getelementptr inbounds %struct.page, ptr %4, i32 0, i32 3
  %call.i.i.i.i.i.i = tail call zeroext i1 @__kasan_check_read(ptr noundef %_refcount.i.i.i.i, i32 noundef 4) #14
  %5 = ptrtoint ptr %_refcount.i.i.i.i to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load volatile i32, ptr %_refcount.i.i.i.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %6)
  %cmp.i.i.i = icmp eq i32 %6, 0
  br i1 %cmp.i.i.i, label %if.then.i.i.i, label %do.end5.i.i.i, !prof !262

if.then.i.i.i:                                    ; preds = %_compound_head.exit
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %4, ptr noundef nonnull @.str.44) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/mm.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 717, 0\0A.popsection", ""() #14, !srcloc !308
  unreachable

do.end5.i.i.i:                                    ; preds = %_compound_head.exit
  %call.i.i.i10.i.i.i = tail call zeroext i1 @__kasan_check_write(ptr noundef %_refcount.i.i.i.i, i32 noundef 4) #14
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !309
  tail call void @llvm.prefetch.p0(ptr %_refcount.i.i.i.i, i32 1, i32 3, i32 1) #14
  %7 = tail call { i32, i32 } asm sideeffect "@ atomic_sub_return\0A1:\09ldrex\09$0, [$3]\0A\09sub\09$0, $0, $4\0A\09strex\09$1, $0, [$3]\0A\09teq\09$1, #0\0A\09bne\091b", "=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %_refcount.i.i.i.i, ptr %_refcount.i.i.i.i, i32 1, ptr elementtype(i32) %_refcount.i.i.i.i) #14, !srcloc !310
  %asmresult.i.i.i.i.i.i.i.i.i = extractvalue { i32, i32 } %7, 0
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !311
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %asmresult.i.i.i.i.i.i.i.i.i)
  %cmp.i.i.i.i.i.i = icmp eq i32 %asmresult.i.i.i.i.i.i.i.i.i, 0
  callbr void asm sideeffect "1:\0A\09nop\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr getelementptr inbounds (%struct.tracepoint, ptr @__tracepoint_page_ref_mod_and_test, i32 0, i32 1), ptr blockaddress(@put_page, %if.then.i.i.i.i)) #14
          to label %folio_put_testzero.exit.i [label %if.then.i.i.i.i], !srcloc !253

if.then.i.i.i.i:                                  ; preds = %do.end5.i.i.i
  call void @__sanitizer_cov_trace_pc() #16
  %conv.i.i.i.i = zext i1 %cmp.i.i.i.i.i.i to i32
  tail call void @__page_ref_mod_and_test(ptr noundef %4, i32 noundef -1, i32 noundef %conv.i.i.i.i) #14
  br label %folio_put_testzero.exit.i

folio_put_testzero.exit.i:                        ; preds = %if.then.i.i.i.i, %do.end5.i.i.i
  br i1 %cmp.i.i.i.i.i.i, label %if.then.i4, label %folio_put_testzero.exit.i.folio_put.exit_crit_edge

folio_put_testzero.exit.i.folio_put.exit_crit_edge: ; preds = %folio_put_testzero.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %folio_put.exit

if.then.i4:                                       ; preds = %folio_put_testzero.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @__put_page(ptr noundef %4) #14
  br label %folio_put.exit

folio_put.exit:                                   ; preds = %if.then.i4, %folio_put_testzero.exit.i.folio_put.exit_crit_edge
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @block_write_end(ptr nocapture readnone %file, ptr nocapture noundef readnone %mapping, i64 noundef %pos, i32 noundef %len, i32 noundef %copied, ptr noundef %page, ptr nocapture readnone %fsdata) #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = trunc i64 %pos to i32
  %conv = and i32 %0, 4095
  call void @__sanitizer_cov_trace_cmp4(i32 %copied, i32 %len)
  %cmp = icmp ult i32 %copied, %len
  br i1 %cmp, label %if.then, label %entry.if.end6_crit_edge, !prof !262

entry.if.end6_crit_edge:                          ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end6

if.then:                                          ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  %call = tail call fastcc i32 @PageUptodate(ptr noundef %page)
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call)
  %tobool3.not = icmp eq i32 %call, 0
  %spec.select = select i1 %tobool3.not, i32 0, i32 %copied
  %add = add i32 %spec.select, %conv
  %add5 = add i32 %conv, %len
  tail call void @page_zero_new_buffers(ptr noundef %page, i32 noundef %add, i32 noundef %add5)
  br label %if.end6

if.end6:                                          ; preds = %if.then, %entry.if.end6_crit_edge
  %copied.addr.1 = phi i32 [ %spec.select, %if.then ], [ %copied, %entry.if.end6_crit_edge ]
  tail call void @flush_dcache_page(ptr noundef %page) #14
  %add7 = add i32 %copied.addr.1, %conv
  tail call fastcc void @__block_commit_write(ptr noundef %page, i32 noundef %conv, i32 noundef %add7)
  ret i32 %copied.addr.1
}

; Function Attrs: null_pointer_is_valid
declare dso_local void @flush_dcache_page(ptr noundef) local_unnamed_addr #1

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal fastcc void @__block_commit_write(ptr noundef %page, i32 noundef %from, i32 noundef %to) unnamed_addr #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = ptrtoint ptr %page to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load volatile i32, ptr %page, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %1)
  %cmp.i.not.i = icmp eq i32 %1, -1
  br i1 %cmp.i.not.i, label %if.then.i, label %PagePrivate.exit, !prof !262

if.then.i:                                        ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %page, ptr noundef nonnull @.str.15) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 452, 0\0A.popsection", ""() #14, !srcloc !265
  unreachable

PagePrivate.exit:                                 ; preds = %entry
  %2 = ptrtoint ptr %page to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load volatile i32, ptr %page, align 4
  %4 = and i32 %3, 8192
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %4)
  %tobool.not = icmp eq i32 %4, 0
  br i1 %tobool.not, label %do.body4, label %do.end9, !prof !262

do.body4:                                         ; preds = %PagePrivate.exit
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22fs/buffer.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 2073, 0\0A.popsection", ""() #14, !srcloc !347
  unreachable

do.end9:                                          ; preds = %PagePrivate.exit
  %private = getelementptr inbounds %struct.page, ptr %page, i32 0, i32 1, i32 0, i32 3
  %5 = ptrtoint ptr %private to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load i32, ptr %private, align 4
  %7 = inttoptr i32 %6 to ptr
  %b_size = getelementptr inbounds %struct.buffer_head, ptr %7, i32 0, i32 4
  %8 = ptrtoint ptr %b_size to i32
  call void @__asan_load4_noabort(i32 %8)
  %9 = load i32, ptr %b_size, align 8
  br label %do.body10

do.body10:                                        ; preds = %if.end21.do.body10_crit_edge, %do.end9
  %partial.0 = phi i32 [ 0, %do.end9 ], [ %partial.1, %if.end21.do.body10_crit_edge ]
  %bh.0 = phi ptr [ %7, %do.end9 ], [ %16, %if.end21.do.body10_crit_edge ]
  %block_start.0 = phi i32 [ 0, %do.end9 ], [ %add, %if.end21.do.body10_crit_edge ]
  %add = add i32 %block_start.0, %9
  call void @__sanitizer_cov_trace_cmp4(i32 %add, i32 %from)
  %cmp.not = icmp ugt i32 %add, %from
  call void @__sanitizer_cov_trace_cmp4(i32 %block_start.0, i32 %to)
  %cmp11.not = icmp ult i32 %block_start.0, %to
  %or.cond = and i1 %cmp11.not, %cmp.not
  %10 = ptrtoint ptr %bh.0 to i32
  call void @__asan_load4_noabort(i32 %10)
  %11 = load volatile i32, ptr %bh.0, align 4
  %and1.i.i2 = and i32 %11, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and1.i.i2)
  %tobool.not.i = icmp eq i32 %and1.i.i2, 0
  br i1 %or.cond, label %if.else, label %if.then12

if.then12:                                        ; preds = %do.body10
  call void @__sanitizer_cov_trace_pc() #16
  %spec.select = select i1 %tobool.not.i, i32 1, i32 %partial.0
  br label %if.end17

if.else:                                          ; preds = %do.body10
  br i1 %tobool.not.i, label %if.then.i3, label %if.else.set_buffer_uptodate.exit_crit_edge

if.else.set_buffer_uptodate.exit_crit_edge:       ; preds = %if.else
  call void @__sanitizer_cov_trace_pc() #16
  br label %set_buffer_uptodate.exit

if.then.i3:                                       ; preds = %if.else
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @_set_bit(i32 noundef 0, ptr noundef %bh.0) #14
  br label %set_buffer_uptodate.exit

set_buffer_uptodate.exit:                         ; preds = %if.then.i3, %if.else.set_buffer_uptodate.exit_crit_edge
  tail call void @mark_buffer_dirty(ptr noundef %bh.0)
  br label %if.end17

if.end17:                                         ; preds = %set_buffer_uptodate.exit, %if.then12
  %partial.1 = phi i32 [ %partial.0, %set_buffer_uptodate.exit ], [ %spec.select, %if.then12 ]
  %12 = ptrtoint ptr %bh.0 to i32
  call void @__asan_load4_noabort(i32 %12)
  %13 = load volatile i32, ptr %bh.0, align 4
  %14 = and i32 %13, 32
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %14)
  %tobool19.not = icmp eq i32 %14, 0
  br i1 %tobool19.not, label %if.end17.if.end21_crit_edge, label %if.then20

if.end17.if.end21_crit_edge:                      ; preds = %if.end17
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end21

if.then20:                                        ; preds = %if.end17
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @_clear_bit(i32 noundef 5, ptr noundef %bh.0) #14
  br label %if.end21

if.end21:                                         ; preds = %if.then20, %if.end17.if.end21_crit_edge
  %b_this_page = getelementptr inbounds %struct.buffer_head, ptr %bh.0, i32 0, i32 1
  %15 = ptrtoint ptr %b_this_page to i32
  call void @__asan_load4_noabort(i32 %15)
  %16 = load ptr, ptr %b_this_page, align 4
  %cmp23.not = icmp eq ptr %16, %7
  br i1 %cmp23.not, label %do.end24, label %if.end21.do.body10_crit_edge

if.end21.do.body10_crit_edge:                     ; preds = %if.end21
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.body10

do.end24:                                         ; preds = %if.end21
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %partial.1)
  %tobool25.not = icmp eq i32 %partial.1, 0
  br i1 %tobool25.not, label %if.then26, label %do.end24.if.end27_crit_edge

do.end24.if.end27_crit_edge:                      ; preds = %do.end24
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end27

if.then26:                                        ; preds = %do.end24
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !348
  %17 = getelementptr inbounds %struct.page, ptr %page, i32 0, i32 1
  %18 = ptrtoint ptr %17 to i32
  call void @__asan_load4_noabort(i32 %18)
  %19 = load volatile i32, ptr %17, align 4
  %and.i.i.i.i = and i32 %19, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i.i.i)
  %tobool.not.i.i.i = icmp eq i32 %and.i.i.i.i, 0
  br i1 %tobool.not.i.i.i, label %SetPageUptodate.exit, label %if.then.i.i.i, !prof !254

if.then.i.i.i:                                    ; preds = %if.then26
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %page, ptr noundef nonnull @.str.24) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 260, 0\0A.popsection", ""() #14, !srcloc !292
  unreachable

SetPageUptodate.exit:                             ; preds = %if.then26
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @_set_bit(i32 noundef 2, ptr noundef %page) #14
  br label %if.end27

if.end27:                                         ; preds = %SetPageUptodate.exit, %do.end24.if.end27_crit_edge
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @generic_write_end(ptr nocapture readnone %file, ptr nocapture noundef readonly %mapping, i64 noundef %pos, i32 noundef %len, i32 noundef %copied, ptr noundef %page, ptr nocapture readnone %fsdata) #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = ptrtoint ptr %mapping to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %mapping, align 4
  %i_size = getelementptr inbounds %struct.inode, ptr %1, i32 0, i32 14
  %2 = ptrtoint ptr %i_size to i32
  call void @__asan_load8_noabort(i32 %2)
  %3 = load i64, ptr %i_size, align 8
  %4 = trunc i64 %pos to i32
  %conv.i = and i32 %4, 4095
  call void @__sanitizer_cov_trace_cmp4(i32 %copied, i32 %len)
  %cmp.i = icmp ult i32 %copied, %len
  br i1 %cmp.i, label %if.then.i, label %entry.block_write_end.exit_crit_edge, !prof !262

entry.block_write_end.exit_crit_edge:             ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  br label %block_write_end.exit

if.then.i:                                        ; preds = %entry
  %5 = getelementptr inbounds %struct.page, ptr %page, i32 0, i32 1
  %6 = ptrtoint ptr %5 to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load volatile i32, ptr %5, align 4
  %and.i.i26 = and i32 %7, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i26)
  %tobool.not.i.i27 = icmp eq i32 %and.i.i26, 0
  br i1 %tobool.not.i.i27, label %if.end.i.i30, label %if.then.i.i29, !prof !254

if.then.i.i29:                                    ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i.i28 = add i32 %7, -1
  br label %_compound_head.exit.i32

if.end.i.i30:                                     ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #16
  %8 = ptrtoint ptr %page to i32
  br label %_compound_head.exit.i32

_compound_head.exit.i32:                          ; preds = %if.end.i.i30, %if.then.i.i29
  %retval.0.i.i31 = phi i32 [ %sub.i.i28, %if.then.i.i29 ], [ %8, %if.end.i.i30 ]
  %9 = inttoptr i32 %retval.0.i.i31 to ptr
  %10 = getelementptr inbounds %struct.page, ptr %9, i32 0, i32 1
  %11 = ptrtoint ptr %10 to i32
  call void @__asan_load4_noabort(i32 %11)
  %12 = load volatile i32, ptr %10, align 4
  %and.i.i.i.i = and i32 %12, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i.i.i)
  %tobool.not.i.i.i = icmp eq i32 %and.i.i.i.i, 0
  br i1 %tobool.not.i.i.i, label %folio_flags.exit.i.i, label %if.then.i.i.i, !prof !254

if.then.i.i.i:                                    ; preds = %_compound_head.exit.i32
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %9, ptr noundef nonnull @.str.24) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 260, 0\0A.popsection", ""() #14, !srcloc !292
  unreachable

folio_flags.exit.i.i:                             ; preds = %_compound_head.exit.i32
  %13 = ptrtoint ptr %9 to i32
  call void @__asan_load4_noabort(i32 %13)
  %14 = load volatile i32, ptr %9, align 4
  %15 = and i32 %14, 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %15)
  %tobool.i.not.i = icmp eq i32 %15, 0
  br i1 %tobool.i.not.i, label %folio_flags.exit.i.i.PageUptodate.exit_crit_edge, label %do.end.i.i

folio_flags.exit.i.i.PageUptodate.exit_crit_edge: ; preds = %folio_flags.exit.i.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %PageUptodate.exit

do.end.i.i:                                       ; preds = %folio_flags.exit.i.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !322
  br label %PageUptodate.exit

PageUptodate.exit:                                ; preds = %do.end.i.i, %folio_flags.exit.i.i.PageUptodate.exit_crit_edge
  %spec.select.i = phi i32 [ 0, %folio_flags.exit.i.i.PageUptodate.exit_crit_edge ], [ %copied, %do.end.i.i ]
  %add.i = add i32 %spec.select.i, %conv.i
  %add5.i = add i32 %conv.i, %len
  tail call void @page_zero_new_buffers(ptr noundef %page, i32 noundef %add.i, i32 noundef %add5.i) #14
  br label %block_write_end.exit

block_write_end.exit:                             ; preds = %PageUptodate.exit, %entry.block_write_end.exit_crit_edge
  %copied.addr.1.i = phi i32 [ %spec.select.i, %PageUptodate.exit ], [ %copied, %entry.block_write_end.exit_crit_edge ]
  tail call void @flush_dcache_page(ptr noundef %page) #14
  %add7.i = add i32 %copied.addr.1.i, %conv.i
  tail call fastcc void @__block_commit_write(ptr noundef %page, i32 noundef %conv.i, i32 noundef %add7.i) #14
  %conv = zext i32 %copied.addr.1.i to i64
  %add = add i64 %conv, %pos
  %16 = ptrtoint ptr %i_size to i32
  call void @__asan_load8_noabort(i32 %16)
  %17 = load i64, ptr %i_size, align 8
  call void @__sanitizer_cov_trace_cmp8(i64 %add, i64 %17)
  %cmp = icmp sgt i64 %add, %17
  br i1 %cmp, label %if.then, label %block_write_end.exit.if.end_crit_edge

block_write_end.exit.if.end_crit_edge:            ; preds = %block_write_end.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end

if.then:                                          ; preds = %block_write_end.exit
  call void @__sanitizer_cov_trace_pc() #16
  tail call fastcc void @i_size_write(ptr noundef %1, i64 noundef %add)
  br label %if.end

if.end:                                           ; preds = %if.then, %block_write_end.exit.if.end_crit_edge
  tail call void @unlock_page(ptr noundef %page) #14
  %18 = getelementptr inbounds %struct.page, ptr %page, i32 0, i32 1
  %19 = ptrtoint ptr %18 to i32
  call void @__asan_load4_noabort(i32 %19)
  %20 = load volatile i32, ptr %18, align 4
  %and.i.i = and i32 %20, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i)
  %tobool.not.i.i = icmp eq i32 %and.i.i, 0
  br i1 %tobool.not.i.i, label %if.end.i.i, label %if.then.i.i, !prof !254

if.then.i.i:                                      ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i.i = add i32 %20, -1
  br label %_compound_head.exit.i

if.end.i.i:                                       ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #16
  %21 = ptrtoint ptr %page to i32
  br label %_compound_head.exit.i

_compound_head.exit.i:                            ; preds = %if.end.i.i, %if.then.i.i
  %retval.0.i.i = phi i32 [ %sub.i.i, %if.then.i.i ], [ %21, %if.end.i.i ]
  %22 = inttoptr i32 %retval.0.i.i to ptr
  %_refcount.i.i.i.i.i = getelementptr inbounds %struct.page, ptr %22, i32 0, i32 3
  %call.i.i.i.i.i.i.i = tail call zeroext i1 @__kasan_check_read(ptr noundef %_refcount.i.i.i.i.i, i32 noundef 4) #14
  %23 = ptrtoint ptr %_refcount.i.i.i.i.i to i32
  call void @__asan_load4_noabort(i32 %23)
  %24 = load volatile i32, ptr %_refcount.i.i.i.i.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %24)
  %cmp.i.i.i.i = icmp eq i32 %24, 0
  br i1 %cmp.i.i.i.i, label %if.then.i.i.i.i, label %do.end5.i.i.i.i, !prof !262

if.then.i.i.i.i:                                  ; preds = %_compound_head.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %22, ptr noundef nonnull @.str.44) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/mm.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 717, 0\0A.popsection", ""() #14, !srcloc !308
  unreachable

do.end5.i.i.i.i:                                  ; preds = %_compound_head.exit.i
  %call.i.i.i10.i.i.i.i = tail call zeroext i1 @__kasan_check_write(ptr noundef %_refcount.i.i.i.i.i, i32 noundef 4) #14
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !309
  tail call void @llvm.prefetch.p0(ptr %_refcount.i.i.i.i.i, i32 1, i32 3, i32 1) #14
  %25 = tail call { i32, i32 } asm sideeffect "@ atomic_sub_return\0A1:\09ldrex\09$0, [$3]\0A\09sub\09$0, $0, $4\0A\09strex\09$1, $0, [$3]\0A\09teq\09$1, #0\0A\09bne\091b", "=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %_refcount.i.i.i.i.i, ptr %_refcount.i.i.i.i.i, i32 1, ptr elementtype(i32) %_refcount.i.i.i.i.i) #14, !srcloc !310
  %asmresult.i.i.i.i.i.i.i.i.i.i = extractvalue { i32, i32 } %25, 0
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !311
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %asmresult.i.i.i.i.i.i.i.i.i.i)
  %cmp.i.i.i.i.i.i.i = icmp eq i32 %asmresult.i.i.i.i.i.i.i.i.i.i, 0
  callbr void asm sideeffect "1:\0A\09nop\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr getelementptr inbounds (%struct.tracepoint, ptr @__tracepoint_page_ref_mod_and_test, i32 0, i32 1), ptr blockaddress(@generic_write_end, %if.then.i.i.i.i.i)) #14
          to label %folio_put_testzero.exit.i.i [label %if.then.i.i.i.i.i], !srcloc !253

if.then.i.i.i.i.i:                                ; preds = %do.end5.i.i.i.i
  call void @__sanitizer_cov_trace_pc() #16
  %conv.i.i.i.i.i = zext i1 %cmp.i.i.i.i.i.i.i to i32
  tail call void @__page_ref_mod_and_test(ptr noundef %22, i32 noundef -1, i32 noundef %conv.i.i.i.i.i) #14
  br label %folio_put_testzero.exit.i.i

folio_put_testzero.exit.i.i:                      ; preds = %if.then.i.i.i.i.i, %do.end5.i.i.i.i
  br i1 %cmp.i.i.i.i.i.i.i, label %if.then.i4.i, label %folio_put_testzero.exit.i.i.put_page.exit_crit_edge

folio_put_testzero.exit.i.i.put_page.exit_crit_edge: ; preds = %folio_put_testzero.exit.i.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %put_page.exit

if.then.i4.i:                                     ; preds = %folio_put_testzero.exit.i.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @__put_page(ptr noundef %22) #14
  br label %put_page.exit

put_page.exit:                                    ; preds = %if.then.i4.i, %folio_put_testzero.exit.i.i.put_page.exit_crit_edge
  call void @__sanitizer_cov_trace_cmp8(i64 %3, i64 %pos)
  %cmp5 = icmp slt i64 %3, %pos
  br i1 %cmp5, label %if.then7, label %put_page.exit.if.end8_crit_edge

put_page.exit.if.end8_crit_edge:                  ; preds = %put_page.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end8

if.then7:                                         ; preds = %put_page.exit
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @pagecache_isize_extended(ptr noundef %1, i64 noundef %3, i64 noundef %pos) #14
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %put_page.exit.if.end8_crit_edge
  br i1 %cmp, label %if.then9, label %if.end8.if.end10_crit_edge

if.end8.if.end10_crit_edge:                       ; preds = %if.end8
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end10

if.then9:                                         ; preds = %if.end8
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @__mark_inode_dirty(ptr noundef %1, i32 noundef 7) #14
  br label %if.end10

if.end10:                                         ; preds = %if.then9, %if.end8.if.end10_crit_edge
  ret i32 %copied.addr.1.i
}

; Function Attrs: inlinehint nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal fastcc void @i_size_write(ptr noundef %inode, i64 noundef %i_size) unnamed_addr #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  %0 = tail call i32 @llvm.read_register.i32(metadata !243) #14
  %and.i.i.i = and i32 %0, -16384
  %1 = inttoptr i32 %and.i.i.i to ptr
  %preempt_count.i.i = getelementptr inbounds %struct.thread_info, ptr %1, i32 0, i32 1
  %2 = ptrtoint ptr %preempt_count.i.i to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load volatile i32, ptr %preempt_count.i.i, align 4
  %add.i = add i32 %3, 1
  store volatile i32 %add.i, ptr %preempt_count.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #14, !srcloc !349
  call void @__asan_load4_noabort(i32 ptrtoint (ptr @debug_locks to i32))
  %4 = load i32, ptr @debug_locks, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %4)
  %tobool.not.i = icmp eq i32 %4, 0
  br i1 %tobool.not.i, label %entry.__seqprop_assert.exit_crit_edge, label %land.lhs.true.i

entry.__seqprop_assert.exit_crit_edge:            ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  br label %__seqprop_assert.exit

land.lhs.true.i:                                  ; preds = %entry
  %5 = tail call i32 @llvm.read_register.i32(metadata !243) #14
  %and.i.i.i.i = and i32 %5, -16384
  %6 = inttoptr i32 %and.i.i.i.i to ptr
  %preempt_count.i.i.i = getelementptr inbounds %struct.thread_info, ptr %6, i32 0, i32 1
  %7 = ptrtoint ptr %preempt_count.i.i.i to i32
  call void @__asan_load4_noabort(i32 %7)
  %8 = load volatile i32, ptr %preempt_count.i.i.i, align 4
  %add.i.i = add i32 %8, 1
  store volatile i32 %add.i.i, ptr %preempt_count.i.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #14, !srcloc !350
  %9 = tail call i32 @llvm.read_register.i32(metadata !243) #14
  %and.i.i = and i32 %9, -16384
  %10 = inttoptr i32 %and.i.i to ptr
  %cpu.i = getelementptr inbounds %struct.thread_info, ptr %10, i32 0, i32 3
  %11 = ptrtoint ptr %cpu.i to i32
  call void @__asan_load4_noabort(i32 %11)
  %12 = load i32, ptr %cpu.i, align 4
  %arrayidx.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %12
  %13 = ptrtoint ptr %arrayidx.i to i32
  call void @__asan_load4_noabort(i32 %13)
  %14 = load i32, ptr %arrayidx.i, align 4
  %add.i28 = add i32 %14, ptrtoint (ptr @lockdep_recursion to i32)
  %15 = inttoptr i32 %add.i28 to ptr
  %16 = ptrtoint ptr %15 to i32
  call void @__asan_load4_noabort(i32 %16)
  %17 = load volatile i32, ptr %15, align 4
  tail call void asm sideeffect "", "~{memory}"() #14, !srcloc !351
  %18 = tail call i32 @llvm.read_register.i32(metadata !243) #14
  %and.i.i.i7.i = and i32 %18, -16384
  %19 = inttoptr i32 %and.i.i.i7.i to ptr
  %preempt_count.i.i8.i = getelementptr inbounds %struct.thread_info, ptr %19, i32 0, i32 1
  %20 = ptrtoint ptr %preempt_count.i.i8.i to i32
  call void @__asan_load4_noabort(i32 %20)
  %21 = load volatile i32, ptr %preempt_count.i.i8.i, align 4
  %sub.i.i = add i32 %21, -1
  store volatile i32 %sub.i.i, ptr %preempt_count.i.i8.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %17)
  %tobool20.not.i = icmp eq i32 %17, 0
  br i1 %tobool20.not.i, label %land.rhs.i, label %land.lhs.true.i.__seqprop_assert.exit_crit_edge

land.lhs.true.i.__seqprop_assert.exit_crit_edge:  ; preds = %land.lhs.true.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %__seqprop_assert.exit

land.rhs.i:                                       ; preds = %land.lhs.true.i
  %22 = tail call i32 @llvm.read_register.i32(metadata !243) #14
  %and.i.i.i29 = and i32 %22, -16384
  %23 = inttoptr i32 %and.i.i.i29 to ptr
  %preempt_count.i.i30 = getelementptr inbounds %struct.thread_info, ptr %23, i32 0, i32 1
  %24 = ptrtoint ptr %preempt_count.i.i30 to i32
  call void @__asan_load4_noabort(i32 %24)
  %25 = load volatile i32, ptr %preempt_count.i.i30, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %25)
  %cmp.i = icmp eq i32 %25, 0
  br i1 %cmp.i, label %land.rhs22.i, label %land.rhs.i.__seqprop_assert.exit_crit_edge

land.rhs.i.__seqprop_assert.exit_crit_edge:       ; preds = %land.rhs.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %__seqprop_assert.exit

land.rhs22.i:                                     ; preds = %land.rhs.i
  %26 = tail call i32 @llvm.read_register.i32(metadata !243) #14
  %and.i.i.i9.i = and i32 %26, -16384
  %27 = inttoptr i32 %and.i.i.i9.i to ptr
  %preempt_count.i.i10.i = getelementptr inbounds %struct.thread_info, ptr %27, i32 0, i32 1
  %28 = ptrtoint ptr %preempt_count.i.i10.i to i32
  call void @__asan_load4_noabort(i32 %28)
  %29 = load volatile i32, ptr %preempt_count.i.i10.i, align 4
  %add.i11.i = add i32 %29, 1
  store volatile i32 %add.i11.i, ptr %preempt_count.i.i10.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #14, !srcloc !352
  %30 = ptrtoint ptr %cpu.i to i32
  call void @__asan_load4_noabort(i32 %30)
  %31 = load i32, ptr %cpu.i, align 4
  %arrayidx46.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %31
  %32 = ptrtoint ptr %arrayidx46.i to i32
  call void @__asan_load4_noabort(i32 %32)
  %33 = load i32, ptr %arrayidx46.i, align 4
  %add47.i = add i32 %33, ptrtoint (ptr @hardirqs_enabled to i32)
  %34 = inttoptr i32 %add47.i to ptr
  %35 = ptrtoint ptr %34 to i32
  call void @__asan_load4_noabort(i32 %35)
  %36 = load volatile i32, ptr %34, align 4
  tail call void asm sideeffect "", "~{memory}"() #14, !srcloc !353
  %37 = tail call i32 @llvm.read_register.i32(metadata !243) #14
  %and.i.i.i12.i = and i32 %37, -16384
  %38 = inttoptr i32 %and.i.i.i12.i to ptr
  %preempt_count.i.i13.i = getelementptr inbounds %struct.thread_info, ptr %38, i32 0, i32 1
  %39 = ptrtoint ptr %preempt_count.i.i13.i to i32
  call void @__asan_load4_noabort(i32 %39)
  %40 = load volatile i32, ptr %preempt_count.i.i13.i, align 4
  %sub.i14.i = add i32 %40, -1
  store volatile i32 %sub.i14.i, ptr %preempt_count.i.i13.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %36)
  %tobool54.not.i = icmp eq i32 %36, 0
  br i1 %tobool54.not.i, label %land.rhs22.i.__seqprop_assert.exit_crit_edge, label %land.rhs58.i

land.rhs22.i.__seqprop_assert.exit_crit_edge:     ; preds = %land.rhs22.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %__seqprop_assert.exit

land.rhs58.i:                                     ; preds = %land.rhs22.i
  %.b1.i = load i1, ptr @__seqprop_assert.__already_done, align 1
  br i1 %.b1.i, label %land.rhs58.i.__seqprop_assert.exit_crit_edge, label %if.then.i, !prof !254

land.rhs58.i.__seqprop_assert.exit_crit_edge:     ; preds = %land.rhs58.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %__seqprop_assert.exit

if.then.i:                                        ; preds = %land.rhs58.i
  call void @__sanitizer_cov_trace_pc() #16
  store i1 true, ptr @__seqprop_assert.__already_done, align 1
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.45, i32 noundef 271, i32 noundef 9, ptr noundef null) #14
  br label %__seqprop_assert.exit

__seqprop_assert.exit:                            ; preds = %if.then.i, %land.rhs58.i.__seqprop_assert.exit_crit_edge, %land.rhs22.i.__seqprop_assert.exit_crit_edge, %land.rhs.i.__seqprop_assert.exit_crit_edge, %land.lhs.true.i.__seqprop_assert.exit_crit_edge, %entry.__seqprop_assert.exit_crit_edge
  %i_size_seqcount = getelementptr inbounds %struct.inode, ptr %inode, i32 0, i32 23
  %41 = ptrtoint ptr %i_size_seqcount to i32
  call void @__asan_load4_noabort(i32 %41)
  %42 = load i32, ptr %i_size_seqcount, align 4
  %inc.i.i.i = add i32 %42, 1
  store i32 %inc.i.i.i, ptr %i_size_seqcount, align 4
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !354
  %dep_map.i.i = getelementptr inbounds %struct.inode, ptr %inode, i32 0, i32 23, i32 1
  %43 = tail call ptr @llvm.returnaddress(i32 0) #14
  %44 = ptrtoint ptr %43 to i32
  tail call void @lock_acquire(ptr noundef %dep_map.i.i, i32 noundef 0, i32 noundef 0, i32 noundef 0, i32 noundef 1, ptr noundef null, i32 noundef %44) #14
  %i_size8 = getelementptr inbounds %struct.inode, ptr %inode, i32 0, i32 14
  %45 = ptrtoint ptr %i_size8 to i32
  call void @__asan_store8_noabort(i32 %45)
  store i64 %i_size, ptr %i_size8, align 8
  tail call void @lock_release(ptr noundef %dep_map.i.i, i32 noundef %44) #14
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !355
  %46 = ptrtoint ptr %i_size_seqcount to i32
  call void @__asan_load4_noabort(i32 %46)
  %47 = load i32, ptr %i_size_seqcount, align 4
  %inc.i.i = add i32 %47, 1
  store i32 %inc.i.i, ptr %i_size_seqcount, align 4
  tail call void asm sideeffect "", "~{memory}"() #14, !srcloc !356
  %48 = tail call i32 @llvm.read_register.i32(metadata !243) #14
  %and.i.i.i26 = and i32 %48, -16384
  %49 = inttoptr i32 %and.i.i.i26 to ptr
  %preempt_count.i.i27 = getelementptr inbounds %struct.thread_info, ptr %49, i32 0, i32 1
  %50 = ptrtoint ptr %preempt_count.i.i27 to i32
  call void @__asan_load4_noabort(i32 %50)
  %51 = load volatile i32, ptr %preempt_count.i.i27, align 4
  %sub.i = add i32 %51, -1
  store volatile i32 %sub.i, ptr %preempt_count.i.i27, align 4
  ret void
}

; Function Attrs: null_pointer_is_valid
declare dso_local void @pagecache_isize_extended(ptr noundef, i64 noundef, i64 noundef) local_unnamed_addr #1

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @block_is_partially_uptodate(ptr noundef %page, i32 noundef %from, i32 noundef %count) #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = ptrtoint ptr %page to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load volatile i32, ptr %page, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %1)
  %cmp.i.not.i = icmp eq i32 %1, -1
  br i1 %cmp.i.not.i, label %if.then.i, label %PagePrivate.exit, !prof !262

if.then.i:                                        ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %page, ptr noundef nonnull @.str.15) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 452, 0\0A.popsection", ""() #14, !srcloc !265
  unreachable

PagePrivate.exit:                                 ; preds = %entry
  %2 = ptrtoint ptr %page to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load volatile i32, ptr %page, align 4
  %4 = and i32 %3, 8192
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %4)
  %tobool.not = icmp eq i32 %4, 0
  br i1 %tobool.not, label %PagePrivate.exit.cleanup_crit_edge, label %do.body

PagePrivate.exit.cleanup_crit_edge:               ; preds = %PagePrivate.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %cleanup

do.body:                                          ; preds = %PagePrivate.exit
  %5 = ptrtoint ptr %page to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load volatile i32, ptr %page, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %6)
  %cmp.i.not.i64 = icmp eq i32 %6, -1
  br i1 %cmp.i.not.i64, label %if.then.i65, label %PagePrivate.exit68, !prof !262

if.then.i65:                                      ; preds = %do.body
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %page, ptr noundef nonnull @.str.15) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 452, 0\0A.popsection", ""() #14, !srcloc !265
  unreachable

PagePrivate.exit68:                               ; preds = %do.body
  %7 = ptrtoint ptr %page to i32
  call void @__asan_load4_noabort(i32 %7)
  %8 = load volatile i32, ptr %page, align 4
  %9 = and i32 %8, 8192
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %9)
  %tobool2.not = icmp eq i32 %9, 0
  br i1 %tobool2.not, label %do.body7, label %do.end13, !prof !262

do.body7:                                         ; preds = %PagePrivate.exit68
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22fs/buffer.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 2226, 0\0A.popsection", ""() #14, !srcloc !357
  unreachable

do.end13:                                         ; preds = %PagePrivate.exit68
  %private = getelementptr inbounds %struct.page, ptr %page, i32 0, i32 1, i32 0, i32 3
  %10 = ptrtoint ptr %private to i32
  call void @__asan_load4_noabort(i32 %10)
  %11 = load i32, ptr %private, align 4
  %12 = inttoptr i32 %11 to ptr
  %b_size = getelementptr inbounds %struct.buffer_head, ptr %12, i32 0, i32 4
  %13 = ptrtoint ptr %b_size to i32
  call void @__asan_load4_noabort(i32 %13)
  %14 = load i32, ptr %b_size, align 8
  %sub = sub i32 4096, %from
  %15 = tail call i32 @llvm.umin.i32(i32 %sub, i32 %count)
  %add = add i32 %15, %from
  call void @__sanitizer_cov_trace_cmp4(i32 %14, i32 %from)
  %cmp15 = icmp ugt i32 %14, %from
  %sub16 = sub i32 4096, %14
  call void @__sanitizer_cov_trace_cmp4(i32 %add, i32 %sub16)
  %cmp17 = icmp ugt i32 %add, %sub16
  %or.cond = and i1 %cmp15, %cmp17
  br i1 %or.cond, label %do.end13.cleanup_crit_edge, label %do.end13.do.body20_crit_edge

do.end13.do.body20_crit_edge:                     ; preds = %do.end13
  br label %do.body20

do.end13.cleanup_crit_edge:                       ; preds = %do.end13
  call void @__sanitizer_cov_trace_pc() #16
  br label %cleanup

do.body20:                                        ; preds = %if.end33.do.body20_crit_edge, %do.end13.do.body20_crit_edge
  %bh.0 = phi ptr [ %19, %if.end33.do.body20_crit_edge ], [ %12, %do.end13.do.body20_crit_edge ]
  %block_start.0 = phi i32 [ %add21, %if.end33.do.body20_crit_edge ], [ 0, %do.end13.do.body20_crit_edge ]
  %add21 = add i32 %block_start.0, %14
  call void @__sanitizer_cov_trace_cmp4(i32 %add21, i32 %from)
  %cmp22 = icmp ugt i32 %add21, %from
  call void @__sanitizer_cov_trace_cmp4(i32 %block_start.0, i32 %add)
  %cmp24 = icmp ult i32 %block_start.0, %add
  %or.cond63 = and i1 %cmp24, %cmp22
  br i1 %or.cond63, label %if.then25, label %do.body20.if.end33_crit_edge

do.body20.if.end33_crit_edge:                     ; preds = %do.body20
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end33

if.then25:                                        ; preds = %do.body20
  %16 = ptrtoint ptr %bh.0 to i32
  call void @__asan_load4_noabort(i32 %16)
  %17 = load volatile i32, ptr %bh.0, align 4
  %and1.i.i69 = and i32 %17, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and1.i.i69)
  %tobool27.not = icmp eq i32 %and1.i.i69, 0
  br i1 %tobool27.not, label %if.then25.cleanup_crit_edge, label %if.end29

if.then25.cleanup_crit_edge:                      ; preds = %if.then25
  call void @__sanitizer_cov_trace_pc() #16
  br label %cleanup

if.end29:                                         ; preds = %if.then25
  call void @__sanitizer_cov_trace_cmp4(i32 %add21, i32 %add)
  %cmp30.not = icmp ult i32 %add21, %add
  br i1 %cmp30.not, label %if.end29.if.end33_crit_edge, label %if.end29.cleanup_crit_edge

if.end29.cleanup_crit_edge:                       ; preds = %if.end29
  call void @__sanitizer_cov_trace_pc() #16
  br label %cleanup

if.end29.if.end33_crit_edge:                      ; preds = %if.end29
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end33

if.end33:                                         ; preds = %if.end29.if.end33_crit_edge, %do.body20.if.end33_crit_edge
  %b_this_page = getelementptr inbounds %struct.buffer_head, ptr %bh.0, i32 0, i32 1
  %18 = ptrtoint ptr %b_this_page to i32
  call void @__asan_load4_noabort(i32 %18)
  %19 = load ptr, ptr %b_this_page, align 4
  %cmp35.not = icmp eq ptr %19, %12
  br i1 %cmp35.not, label %if.end33.cleanup_crit_edge, label %if.end33.do.body20_crit_edge

if.end33.do.body20_crit_edge:                     ; preds = %if.end33
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.body20

if.end33.cleanup_crit_edge:                       ; preds = %if.end33
  call void @__sanitizer_cov_trace_pc() #16
  br label %cleanup

cleanup:                                          ; preds = %if.end33.cleanup_crit_edge, %if.end29.cleanup_crit_edge, %if.then25.cleanup_crit_edge, %do.end13.cleanup_crit_edge, %PagePrivate.exit.cleanup_crit_edge
  %retval.0 = phi i32 [ 0, %PagePrivate.exit.cleanup_crit_edge ], [ 0, %do.end13.cleanup_crit_edge ], [ 0, %if.then25.cleanup_crit_edge ], [ 1, %if.end33.cleanup_crit_edge ], [ 1, %if.end29.cleanup_crit_edge ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @block_read_full_page(ptr noundef %page, ptr nocapture noundef readonly %get_block) #2 align 64 {
entry:
  %arr = alloca [8 x ptr], align 4
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %mapping = getelementptr inbounds %struct.page, ptr %page, i32 0, i32 1, i32 0, i32 1
  %0 = ptrtoint ptr %mapping to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %mapping, align 4
  %2 = ptrtoint ptr %1 to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load ptr, ptr %1, align 4
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %arr) #14
  %4 = call ptr @memset(ptr %arr, i32 255, i32 32)
  %call = tail call fastcc ptr @create_page_buffers(ptr noundef %page, ptr noundef %3, i32 noundef 0)
  %b_size = getelementptr inbounds %struct.buffer_head, ptr %call, i32 0, i32 4
  %5 = ptrtoint ptr %b_size to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load i32, ptr %b_size, align 8
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %6)
  %tobool.not.i.i.i186 = icmp eq i32 %6, 0
  %7 = tail call i32 @llvm.ctlz.i32(i32 %6, i1 true) #14, !range !313
  %sub.i.op.i.i = xor i32 %7, 31
  %sub.i.i187 = select i1 %tobool.not.i.i.i186, i32 -1, i32 %sub.i.op.i.i
  %index = getelementptr inbounds %struct.page, ptr %page, i32 0, i32 1, i32 0, i32 2
  %8 = ptrtoint ptr %index to i32
  call void @__asan_load4_noabort(i32 %8)
  %9 = load i32, ptr %index, align 4
  %conv = zext i32 %9 to i64
  %sub = sub nsw i32 12, %sub.i.i187
  %sh_prom = zext i32 %sub to i64
  %shl = shl i64 %conv, %sh_prom
  %call2 = tail call fastcc i64 @i_size_read(ptr noundef %3)
  %conv3 = zext i32 %6 to i64
  %add = add nsw i64 %conv3, -1
  %sub4 = add i64 %add, %call2
  %sh_prom5 = zext i32 %sub.i.i187 to i64
  %shr = ashr i64 %sub4, %sh_prom5
  %10 = getelementptr inbounds %struct.page, ptr %page, i32 0, i32 1
  %11 = ptrtoint ptr %page to i32
  br label %do.body.outer

do.body.outer:                                    ; preds = %do.cond54.do.body.outer_crit_edge, %entry
  %iblock.0.ph = phi i64 [ %inc56, %do.cond54.do.body.outer_crit_edge ], [ %shl, %entry ]
  %bh.0.ph = phi ptr [ %39, %do.cond54.do.body.outer_crit_edge ], [ %call, %entry ]
  %nr.0.ph = phi i32 [ %nr.1, %do.cond54.do.body.outer_crit_edge ], [ 0, %entry ]
  %i.0.ph = phi i32 [ %inc55, %do.cond54.do.body.outer_crit_edge ], [ 0, %entry ]
  %fully_mapped.0.ph = phi i32 [ %fully_mapped.2, %do.cond54.do.body.outer_crit_edge ], [ 1, %entry ]
  br label %do.body

do.body:                                          ; preds = %do.cond54.thread.do.body_crit_edge, %do.body.outer
  %iblock.0 = phi i64 [ %inc56198, %do.cond54.thread.do.body_crit_edge ], [ %iblock.0.ph, %do.body.outer ]
  %bh.0 = phi ptr [ %41, %do.cond54.thread.do.body_crit_edge ], [ %bh.0.ph, %do.body.outer ]
  %i.0 = phi i32 [ %inc55197, %do.cond54.thread.do.body_crit_edge ], [ %i.0.ph, %do.body.outer ]
  %fully_mapped.0 = phi i32 [ 0, %do.cond54.thread.do.body_crit_edge ], [ %fully_mapped.0.ph, %do.body.outer ]
  %12 = ptrtoint ptr %bh.0 to i32
  call void @__asan_load4_noabort(i32 %12)
  %13 = load volatile i32, ptr %bh.0, align 4
  %and1.i.i = and i32 %13, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and1.i.i)
  %tobool.not = icmp eq i32 %and1.i.i, 0
  br i1 %tobool.not, label %if.end, label %do.body.do.cond54_crit_edge

do.body.do.cond54_crit_edge:                      ; preds = %do.body
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.cond54

if.end:                                           ; preds = %do.body
  %14 = ptrtoint ptr %bh.0 to i32
  call void @__asan_load4_noabort(i32 %14)
  %15 = load volatile i32, ptr %bh.0, align 4
  %16 = and i32 %15, 16
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %16)
  %tobool8.not = icmp eq i32 %16, 0
  br i1 %tobool8.not, label %if.then9, label %if.end.if.end53_crit_edge

if.end.if.end53_crit_edge:                        ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end53

if.then9:                                         ; preds = %if.end
  call void @__sanitizer_cov_trace_cmp8(i64 %iblock.0, i64 %shr)
  %cmp = icmp ult i64 %iblock.0, %shr
  br i1 %cmp, label %if.then11, label %if.then9.if.end41_crit_edge

if.then9.if.end41_crit_edge:                      ; preds = %if.then9
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end41

if.then11:                                        ; preds = %if.then9
  %b_size12 = getelementptr inbounds %struct.buffer_head, ptr %bh.0, i32 0, i32 4
  %17 = ptrtoint ptr %b_size12 to i32
  call void @__asan_load4_noabort(i32 %17)
  %18 = load i32, ptr %b_size12, align 8
  call void @__sanitizer_cov_trace_cmp4(i32 %18, i32 %6)
  %cmp13.not = icmp eq i32 %18, %6
  br i1 %cmp13.not, label %if.then11.if.end30_crit_edge, label %do.end, !prof !254

if.then11.if.end30_crit_edge:                     ; preds = %if.then11
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end30

do.end:                                           ; preds = %if.then11
  call void @__sanitizer_cov_trace_pc() #16
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.4, i32 noundef 2288, i32 noundef 9, ptr noundef null) #14
  br label %if.end30

if.end30:                                         ; preds = %do.end, %if.then11.if.end30_crit_edge
  %call37 = tail call i32 %get_block(ptr noundef %3, i64 noundef %iblock.0, ptr noundef %bh.0, i32 noundef 0) #14
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call37)
  %tobool38.not = icmp eq i32 %call37, 0
  br i1 %tobool38.not, label %if.end30.if.end41_crit_edge, label %if.then39

if.end30.if.end41_crit_edge:                      ; preds = %if.end30
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end41

if.then39:                                        ; preds = %if.end30
  %19 = ptrtoint ptr %10 to i32
  call void @__asan_load4_noabort(i32 %19)
  %20 = load volatile i32, ptr %10, align 4
  %and.i.i = and i32 %20, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i)
  %tobool.not.i = icmp eq i32 %and.i.i, 0
  br i1 %tobool.not.i, label %do.body7.i, label %if.then.i, !prof !254

if.then.i:                                        ; preds = %if.then39
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %page, ptr noundef nonnull @.str.18) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 416, 0\0A.popsection", ""() #14, !srcloc !273
  unreachable

do.body7.i:                                       ; preds = %if.then39
  %21 = ptrtoint ptr %10 to i32
  call void @__asan_load4_noabort(i32 %21)
  %22 = load volatile i32, ptr %10, align 4
  %and.i31.i = and i32 %22, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i31.i)
  %tobool.not.i.i = icmp eq i32 %and.i31.i, 0
  br i1 %tobool.not.i.i, label %do.body7.i._compound_head.exit.i_crit_edge, label %if.then.i.i, !prof !254

do.body7.i._compound_head.exit.i_crit_edge:       ; preds = %do.body7.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %_compound_head.exit.i

if.then.i.i:                                      ; preds = %do.body7.i
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i.i = add i32 %22, -1
  br label %_compound_head.exit.i

_compound_head.exit.i:                            ; preds = %if.then.i.i, %do.body7.i._compound_head.exit.i_crit_edge
  %retval.0.i.i = phi i32 [ %sub.i.i, %if.then.i.i ], [ %11, %do.body7.i._compound_head.exit.i_crit_edge ]
  %23 = inttoptr i32 %retval.0.i.i to ptr
  %24 = ptrtoint ptr %23 to i32
  call void @__asan_load4_noabort(i32 %24)
  %25 = load volatile i32, ptr %23, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %25)
  %cmp.i.not.i = icmp eq i32 %25, -1
  %26 = ptrtoint ptr %10 to i32
  call void @__asan_load4_noabort(i32 %26)
  %27 = load volatile i32, ptr %10, align 4
  %and.i32.i = and i32 %27, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i32.i)
  %tobool.not.i33.i = icmp eq i32 %and.i32.i, 0
  br i1 %cmp.i.not.i, label %if.then17.i, label %do.end24.i, !prof !262

if.then17.i:                                      ; preds = %_compound_head.exit.i
  br i1 %tobool.not.i33.i, label %if.then17.i._compound_head.exit38.i_crit_edge, label %if.then.i35.i, !prof !254

if.then17.i._compound_head.exit38.i_crit_edge:    ; preds = %if.then17.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %_compound_head.exit38.i

if.then.i35.i:                                    ; preds = %if.then17.i
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i34.i = add i32 %27, -1
  br label %_compound_head.exit38.i

_compound_head.exit38.i:                          ; preds = %if.then.i35.i, %if.then17.i._compound_head.exit38.i_crit_edge
  %retval.0.i37.i = phi i32 [ %sub.i34.i, %if.then.i35.i ], [ %11, %if.then17.i._compound_head.exit38.i_crit_edge ]
  %28 = inttoptr i32 %retval.0.i37.i to ptr
  tail call void @dump_page(ptr noundef %28, ptr noundef nonnull @.str.14) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 416, 0\0A.popsection", ""() #14, !srcloc !274
  unreachable

do.end24.i:                                       ; preds = %_compound_head.exit.i
  br i1 %tobool.not.i33.i, label %do.end24.i.SetPageError.exit_crit_edge, label %if.then.i42.i, !prof !254

do.end24.i.SetPageError.exit_crit_edge:           ; preds = %do.end24.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %SetPageError.exit

if.then.i42.i:                                    ; preds = %do.end24.i
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i41.i = add i32 %27, -1
  br label %SetPageError.exit

SetPageError.exit:                                ; preds = %if.then.i42.i, %do.end24.i.SetPageError.exit_crit_edge
  %retval.0.i44.i = phi i32 [ %sub.i41.i, %if.then.i42.i ], [ %11, %do.end24.i.SetPageError.exit_crit_edge ]
  %29 = inttoptr i32 %retval.0.i44.i to ptr
  tail call void @_set_bit(i32 noundef 8, ptr noundef %29) #14
  br label %if.end41

if.end41:                                         ; preds = %SetPageError.exit, %if.end30.if.end41_crit_edge, %if.then9.if.end41_crit_edge
  %tobool45.not = phi i1 [ true, %if.end30.if.end41_crit_edge ], [ false, %SetPageError.exit ], [ true, %if.then9.if.end41_crit_edge ]
  %30 = ptrtoint ptr %bh.0 to i32
  call void @__asan_load4_noabort(i32 %30)
  %31 = load volatile i32, ptr %bh.0, align 4
  %32 = and i32 %31, 16
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %32)
  %tobool43.not = icmp eq i32 %32, 0
  br i1 %tobool43.not, label %if.then44, label %if.end48

if.then44:                                        ; preds = %if.end41
  %mul = mul i32 %i.0, %6
  %add.i = add i32 %mul, %6
  tail call void @zero_user_segments(ptr noundef %page, i32 noundef %mul, i32 noundef %add.i, i32 noundef 0, i32 noundef 0) #14
  br i1 %tobool45.not, label %if.then46, label %if.then44.do.cond54.thread_crit_edge

if.then44.do.cond54.thread_crit_edge:             ; preds = %if.then44
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.cond54.thread

if.then46:                                        ; preds = %if.then44
  %33 = ptrtoint ptr %bh.0 to i32
  call void @__asan_load4_noabort(i32 %33)
  %34 = load volatile i32, ptr %bh.0, align 4
  %and1.i.i145 = and i32 %34, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and1.i.i145)
  %tobool.not.i146 = icmp eq i32 %and1.i.i145, 0
  br i1 %tobool.not.i146, label %if.then.i147, label %if.then46.do.cond54.thread_crit_edge

if.then46.do.cond54.thread_crit_edge:             ; preds = %if.then46
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.cond54.thread

if.then.i147:                                     ; preds = %if.then46
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @_set_bit(i32 noundef 0, ptr noundef %bh.0) #14
  br label %do.cond54.thread

if.end48:                                         ; preds = %if.end41
  %35 = ptrtoint ptr %bh.0 to i32
  call void @__asan_load4_noabort(i32 %35)
  %36 = load volatile i32, ptr %bh.0, align 4
  %and1.i.i148 = and i32 %36, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and1.i.i148)
  %tobool50.not = icmp eq i32 %and1.i.i148, 0
  br i1 %tobool50.not, label %if.end48.if.end53_crit_edge, label %if.end48.do.cond54.thread_crit_edge

if.end48.do.cond54.thread_crit_edge:              ; preds = %if.end48
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.cond54.thread

if.end48.if.end53_crit_edge:                      ; preds = %if.end48
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end53

if.end53:                                         ; preds = %if.end48.if.end53_crit_edge, %if.end.if.end53_crit_edge
  %fully_mapped.1 = phi i32 [ %fully_mapped.0, %if.end.if.end53_crit_edge ], [ 0, %if.end48.if.end53_crit_edge ]
  %inc = add i32 %nr.0.ph, 1
  %arrayidx = getelementptr [8 x ptr], ptr %arr, i32 0, i32 %nr.0.ph
  %37 = ptrtoint ptr %arrayidx to i32
  call void @__asan_store4_noabort(i32 %37)
  store ptr %bh.0, ptr %arrayidx, align 4
  br label %do.cond54

do.cond54:                                        ; preds = %if.end53, %do.body.do.cond54_crit_edge
  %nr.1 = phi i32 [ %inc, %if.end53 ], [ %nr.0.ph, %do.body.do.cond54_crit_edge ]
  %fully_mapped.2 = phi i32 [ %fully_mapped.1, %if.end53 ], [ %fully_mapped.0, %do.body.do.cond54_crit_edge ]
  %inc55 = add i32 %i.0, 1
  %inc56 = add i64 %iblock.0, 1
  %b_this_page = getelementptr inbounds %struct.buffer_head, ptr %bh.0, i32 0, i32 1
  %38 = ptrtoint ptr %b_this_page to i32
  call void @__asan_load4_noabort(i32 %38)
  %39 = load ptr, ptr %b_this_page, align 4
  %cmp57.not = icmp eq ptr %39, %call
  br i1 %cmp57.not, label %do.end59, label %do.cond54.do.body.outer_crit_edge

do.cond54.do.body.outer_crit_edge:                ; preds = %do.cond54
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.body.outer

do.cond54.thread:                                 ; preds = %if.end48.do.cond54.thread_crit_edge, %if.then.i147, %if.then46.do.cond54.thread_crit_edge, %if.then44.do.cond54.thread_crit_edge
  %inc55197 = add i32 %i.0, 1
  %inc56198 = add i64 %iblock.0, 1
  %b_this_page199 = getelementptr inbounds %struct.buffer_head, ptr %bh.0, i32 0, i32 1
  %40 = ptrtoint ptr %b_this_page199 to i32
  call void @__asan_load4_noabort(i32 %40)
  %41 = load ptr, ptr %b_this_page199, align 4
  %cmp57.not200 = icmp eq ptr %41, %call
  br i1 %cmp57.not200, label %do.cond54.thread.if.end62_crit_edge, label %do.cond54.thread.do.body_crit_edge

do.cond54.thread.do.body_crit_edge:               ; preds = %do.cond54.thread
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.body

do.cond54.thread.if.end62_crit_edge:              ; preds = %do.cond54.thread
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end62

do.end59:                                         ; preds = %do.cond54
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %fully_mapped.2)
  %tobool60.not = icmp eq i32 %fully_mapped.2, 0
  br i1 %tobool60.not, label %do.end59.if.end62_crit_edge, label %if.then61

do.end59.if.end62_crit_edge:                      ; preds = %do.end59
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end62

if.then61:                                        ; preds = %do.end59
  %42 = ptrtoint ptr %10 to i32
  call void @__asan_load4_noabort(i32 %42)
  %43 = load volatile i32, ptr %10, align 4
  %and.i.i149 = and i32 %43, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i149)
  %tobool.not.i150 = icmp eq i32 %and.i.i149, 0
  br i1 %tobool.not.i150, label %do.body7.i154, label %if.then.i151, !prof !254

if.then.i151:                                     ; preds = %if.then61
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %page, ptr noundef nonnull @.str.18) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 463, 0\0A.popsection", ""() #14, !srcloc !358
  unreachable

do.body7.i154:                                    ; preds = %if.then61
  %44 = ptrtoint ptr %10 to i32
  call void @__asan_load4_noabort(i32 %44)
  %45 = load volatile i32, ptr %10, align 4
  %and.i31.i152 = and i32 %45, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i31.i152)
  %tobool.not.i.i153 = icmp eq i32 %and.i31.i152, 0
  br i1 %tobool.not.i.i153, label %do.body7.i154._compound_head.exit.i162_crit_edge, label %if.then.i.i156, !prof !254

do.body7.i154._compound_head.exit.i162_crit_edge: ; preds = %do.body7.i154
  call void @__sanitizer_cov_trace_pc() #16
  br label %_compound_head.exit.i162

if.then.i.i156:                                   ; preds = %do.body7.i154
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i.i155 = add i32 %45, -1
  br label %_compound_head.exit.i162

_compound_head.exit.i162:                         ; preds = %if.then.i.i156, %do.body7.i154._compound_head.exit.i162_crit_edge
  %retval.0.i.i158 = phi i32 [ %sub.i.i155, %if.then.i.i156 ], [ %11, %do.body7.i154._compound_head.exit.i162_crit_edge ]
  %46 = inttoptr i32 %retval.0.i.i158 to ptr
  %47 = ptrtoint ptr %46 to i32
  call void @__asan_load4_noabort(i32 %47)
  %48 = load volatile i32, ptr %46, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %48)
  %cmp.i.not.i159 = icmp eq i32 %48, -1
  %49 = ptrtoint ptr %10 to i32
  call void @__asan_load4_noabort(i32 %49)
  %50 = load volatile i32, ptr %10, align 4
  %and.i32.i160 = and i32 %50, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i32.i160)
  %tobool.not.i33.i161 = icmp eq i32 %and.i32.i160, 0
  br i1 %cmp.i.not.i159, label %if.then17.i163, label %do.end24.i169, !prof !262

if.then17.i163:                                   ; preds = %_compound_head.exit.i162
  br i1 %tobool.not.i33.i161, label %if.then17.i163._compound_head.exit38.i168_crit_edge, label %if.then.i35.i165, !prof !254

if.then17.i163._compound_head.exit38.i168_crit_edge: ; preds = %if.then17.i163
  call void @__sanitizer_cov_trace_pc() #16
  br label %_compound_head.exit38.i168

if.then.i35.i165:                                 ; preds = %if.then17.i163
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i34.i164 = add i32 %50, -1
  br label %_compound_head.exit38.i168

_compound_head.exit38.i168:                       ; preds = %if.then.i35.i165, %if.then17.i163._compound_head.exit38.i168_crit_edge
  %retval.0.i37.i167 = phi i32 [ %sub.i34.i164, %if.then.i35.i165 ], [ %11, %if.then17.i163._compound_head.exit38.i168_crit_edge ]
  %51 = inttoptr i32 %retval.0.i37.i167 to ptr
  tail call void @dump_page(ptr noundef %51, ptr noundef nonnull @.str.14) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 463, 0\0A.popsection", ""() #14, !srcloc !359
  unreachable

do.end24.i169:                                    ; preds = %_compound_head.exit.i162
  br i1 %tobool.not.i33.i161, label %do.end24.i169.SetPageMappedToDisk.exit_crit_edge, label %if.then.i42.i171, !prof !254

do.end24.i169.SetPageMappedToDisk.exit_crit_edge: ; preds = %do.end24.i169
  call void @__sanitizer_cov_trace_pc() #16
  br label %SetPageMappedToDisk.exit

if.then.i42.i171:                                 ; preds = %do.end24.i169
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i41.i170 = add i32 %50, -1
  br label %SetPageMappedToDisk.exit

SetPageMappedToDisk.exit:                         ; preds = %if.then.i42.i171, %do.end24.i169.SetPageMappedToDisk.exit_crit_edge
  %retval.0.i44.i173 = phi i32 [ %sub.i41.i170, %if.then.i42.i171 ], [ %11, %do.end24.i169.SetPageMappedToDisk.exit_crit_edge ]
  %52 = inttoptr i32 %retval.0.i44.i173 to ptr
  tail call void @_set_bit(i32 noundef 17, ptr noundef %52) #14
  br label %if.end62

if.end62:                                         ; preds = %SetPageMappedToDisk.exit, %do.end59.if.end62_crit_edge, %do.cond54.thread.if.end62_crit_edge
  %nr.1201206 = phi i32 [ %nr.1, %SetPageMappedToDisk.exit ], [ %nr.1, %do.end59.if.end62_crit_edge ], [ %nr.0.ph, %do.cond54.thread.if.end62_crit_edge ]
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %nr.1201206)
  %tobool63.not = icmp eq i32 %nr.1201206, 0
  br i1 %tobool63.not, label %if.then64, label %for.cond.preheader

for.cond.preheader:                               ; preds = %if.end62
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %nr.1201206)
  %cmp70229 = icmp sgt i32 %nr.1201206, 0
  br i1 %cmp70229, label %for.cond.preheader.for.body_crit_edge, label %for.cond.preheader.cleanup87_crit_edge

for.cond.preheader.cleanup87_crit_edge:           ; preds = %for.cond.preheader
  call void @__sanitizer_cov_trace_pc() #16
  br label %cleanup87

for.cond.preheader.for.body_crit_edge:            ; preds = %for.cond.preheader
  br label %for.body

if.then64:                                        ; preds = %if.end62
  %53 = ptrtoint ptr %10 to i32
  call void @__asan_load4_noabort(i32 %53)
  %54 = load volatile i32, ptr %10, align 4
  %and.i.i174 = and i32 %54, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i174)
  %tobool.not.i.i175 = icmp eq i32 %and.i.i174, 0
  br i1 %tobool.not.i.i175, label %if.then64._compound_head.exit.i181_crit_edge, label %if.then.i.i177, !prof !254

if.then64._compound_head.exit.i181_crit_edge:     ; preds = %if.then64
  call void @__sanitizer_cov_trace_pc() #16
  br label %_compound_head.exit.i181

if.then.i.i177:                                   ; preds = %if.then64
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i.i176 = add i32 %54, -1
  br label %_compound_head.exit.i181

_compound_head.exit.i181:                         ; preds = %if.then.i.i177, %if.then64._compound_head.exit.i181_crit_edge
  %retval.0.i.i179 = phi i32 [ %sub.i.i176, %if.then.i.i177 ], [ %11, %if.then64._compound_head.exit.i181_crit_edge ]
  %55 = inttoptr i32 %retval.0.i.i179 to ptr
  %56 = ptrtoint ptr %55 to i32
  call void @__asan_load4_noabort(i32 %56)
  %57 = load volatile i32, ptr %55, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %57)
  %cmp.i.not.i180 = icmp eq i32 %57, -1
  %58 = ptrtoint ptr %10 to i32
  call void @__asan_load4_noabort(i32 %58)
  %59 = load volatile i32, ptr %10, align 4
  %and.i16.i = and i32 %59, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i16.i)
  %tobool.not.i17.i = icmp eq i32 %and.i16.i, 0
  br i1 %cmp.i.not.i180, label %if.then.i182, label %do.end10.i, !prof !262

if.then.i182:                                     ; preds = %_compound_head.exit.i181
  br i1 %tobool.not.i17.i, label %if.then.i182._compound_head.exit22.i_crit_edge, label %if.then.i19.i, !prof !254

if.then.i182._compound_head.exit22.i_crit_edge:   ; preds = %if.then.i182
  call void @__sanitizer_cov_trace_pc() #16
  br label %_compound_head.exit22.i

if.then.i19.i:                                    ; preds = %if.then.i182
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i18.i = add i32 %59, -1
  br label %_compound_head.exit22.i

_compound_head.exit22.i:                          ; preds = %if.then.i19.i, %if.then.i182._compound_head.exit22.i_crit_edge
  %retval.0.i21.i = phi i32 [ %sub.i18.i, %if.then.i19.i ], [ %11, %if.then.i182._compound_head.exit22.i_crit_edge ]
  %60 = inttoptr i32 %retval.0.i21.i to ptr
  tail call void @dump_page(ptr noundef %60, ptr noundef nonnull @.str.14) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 416, 0\0A.popsection", ""() #14, !srcloc !360
  unreachable

do.end10.i:                                       ; preds = %_compound_head.exit.i181
  br i1 %tobool.not.i17.i, label %do.end10.i.PageError.exit_crit_edge, label %if.then.i26.i, !prof !254

do.end10.i.PageError.exit_crit_edge:              ; preds = %do.end10.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %PageError.exit

if.then.i26.i:                                    ; preds = %do.end10.i
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i25.i = add i32 %59, -1
  br label %PageError.exit

PageError.exit:                                   ; preds = %if.then.i26.i, %do.end10.i.PageError.exit_crit_edge
  %retval.0.i28.i = phi i32 [ %sub.i25.i, %if.then.i26.i ], [ %11, %do.end10.i.PageError.exit_crit_edge ]
  %61 = inttoptr i32 %retval.0.i28.i to ptr
  %62 = ptrtoint ptr %61 to i32
  call void @__asan_load4_noabort(i32 %62)
  %63 = load volatile i32, ptr %61, align 4
  %64 = and i32 %63, 256
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %64)
  %tobool66.not = icmp eq i32 %64, 0
  br i1 %tobool66.not, label %if.then67, label %PageError.exit.if.end68_crit_edge

PageError.exit.if.end68_crit_edge:                ; preds = %PageError.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end68

if.then67:                                        ; preds = %PageError.exit
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !348
  %65 = ptrtoint ptr %10 to i32
  call void @__asan_load4_noabort(i32 %65)
  %66 = load volatile i32, ptr %10, align 4
  %and.i.i.i.i = and i32 %66, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i.i.i)
  %tobool.not.i.i.i = icmp eq i32 %and.i.i.i.i, 0
  br i1 %tobool.not.i.i.i, label %SetPageUptodate.exit, label %if.then.i.i.i, !prof !254

if.then.i.i.i:                                    ; preds = %if.then67
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %page, ptr noundef nonnull @.str.24) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 260, 0\0A.popsection", ""() #14, !srcloc !292
  unreachable

SetPageUptodate.exit:                             ; preds = %if.then67
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @_set_bit(i32 noundef 2, ptr noundef %page) #14
  br label %if.end68

if.end68:                                         ; preds = %SetPageUptodate.exit, %PageError.exit.if.end68_crit_edge
  tail call void @unlock_page(ptr noundef %page) #14
  br label %cleanup87

for.cond74.preheader:                             ; preds = %mark_buffer_async_read.exit
  br i1 %cmp70229, label %for.cond74.preheader.for.body77_crit_edge, label %for.cond74.preheader.cleanup87_crit_edge

for.cond74.preheader.cleanup87_crit_edge:         ; preds = %for.cond74.preheader
  call void @__sanitizer_cov_trace_pc() #16
  br label %cleanup87

for.cond74.preheader.for.body77_crit_edge:        ; preds = %for.cond74.preheader
  br label %for.body77

for.body:                                         ; preds = %mark_buffer_async_read.exit.for.body_crit_edge, %for.cond.preheader.for.body_crit_edge
  %i.1230 = phi i32 [ %inc73, %mark_buffer_async_read.exit.for.body_crit_edge ], [ 0, %for.cond.preheader.for.body_crit_edge ]
  %arrayidx72 = getelementptr [8 x ptr], ptr %arr, i32 0, i32 %i.1230
  %67 = ptrtoint ptr %arrayidx72 to i32
  call void @__asan_load4_noabort(i32 %67)
  %68 = load ptr, ptr %arrayidx72, align 4
  tail call void @__might_sleep(ptr noundef nonnull @.str.43, i32 noundef 366) #14
  %call.i.i.i.i = tail call zeroext i1 @__kasan_check_write(ptr noundef %68, i32 noundef 4) #14
  %69 = ptrtoint ptr %68 to i32
  call void @__asan_load4_noabort(i32 %69)
  %70 = load volatile i32, ptr %68, align 4
  %and.i.i.i.i188 = and i32 %70, 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i.i.i188)
  %tobool.not.i.i.i.i = icmp eq i32 %and.i.i.i.i188, 0
  br i1 %tobool.not.i.i.i.i, label %trylock_buffer.exit.i, label %for.body.if.then.i190_crit_edge

for.body.if.then.i190_crit_edge:                  ; preds = %for.body
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.then.i190

trylock_buffer.exit.i:                            ; preds = %for.body
  tail call void @llvm.prefetch.p0(ptr %68, i32 1, i32 3, i32 1) #14
  %71 = tail call { i32, i32, i32 } asm sideeffect "@ atomic_fetch_or\0A1:\09ldrex\09$0, [$4]\0A\09orr\09$1, $0, $5\0A\09strex\09$2, $1, [$4]\0A\09teq\09$2, #0\0A\09bne\091b", "=&r,=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %68, ptr %68, i32 4, ptr elementtype(i32) %68) #14, !srcloc !284
  %asmresult.i.i.i.i.i.i.i = extractvalue { i32, i32, i32 } %71, 0
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !285
  %72 = and i32 %asmresult.i.i.i.i.i.i.i, 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %72)
  %tobool.not.not.i = icmp eq i32 %72, 0
  br i1 %tobool.not.not.i, label %trylock_buffer.exit.i.lock_buffer.exit_crit_edge, label %trylock_buffer.exit.i.if.then.i190_crit_edge

trylock_buffer.exit.i.if.then.i190_crit_edge:     ; preds = %trylock_buffer.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.then.i190

trylock_buffer.exit.i.lock_buffer.exit_crit_edge: ; preds = %trylock_buffer.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %lock_buffer.exit

if.then.i190:                                     ; preds = %trylock_buffer.exit.i.if.then.i190_crit_edge, %for.body.if.then.i190_crit_edge
  tail call void @__might_sleep(ptr noundef nonnull @.str.13, i32 noundef 205) #14
  %call.i.i.i = tail call i32 @_test_and_set_bit(i32 noundef 2, ptr noundef %68) #14
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call.i.i.i)
  %tobool.not.i.i.i189 = icmp eq i32 %call.i.i.i, 0
  br i1 %tobool.not.i.i.i189, label %if.then.i190.lock_buffer.exit_crit_edge, label %if.end.i.i.i

if.then.i190.lock_buffer.exit_crit_edge:          ; preds = %if.then.i190
  call void @__sanitizer_cov_trace_pc() #16
  br label %lock_buffer.exit

if.end.i.i.i:                                     ; preds = %if.then.i190
  call void @__sanitizer_cov_trace_pc() #16
  %call3.i.i.i = tail call i32 @out_of_line_wait_on_bit_lock(ptr noundef %68, i32 noundef 2, ptr noundef nonnull @bit_wait_io, i32 noundef 2) #14
  br label %lock_buffer.exit

lock_buffer.exit:                                 ; preds = %if.end.i.i.i, %if.then.i190.lock_buffer.exit_crit_edge, %trylock_buffer.exit.i.lock_buffer.exit_crit_edge
  %b_end_io.i = getelementptr inbounds %struct.buffer_head, ptr %68, i32 0, i32 7
  %73 = ptrtoint ptr %b_end_io.i to i32
  call void @__asan_store4_noabort(i32 %73)
  store ptr @end_buffer_async_read_io, ptr %b_end_io.i, align 4
  %74 = ptrtoint ptr %68 to i32
  call void @__asan_load4_noabort(i32 %74)
  %75 = load volatile i32, ptr %68, align 4
  %76 = and i32 %75, 64
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %76)
  %tobool.not.i.i191 = icmp eq i32 %76, 0
  br i1 %tobool.not.i.i191, label %if.then.i.i192, label %lock_buffer.exit.mark_buffer_async_read.exit_crit_edge

lock_buffer.exit.mark_buffer_async_read.exit_crit_edge: ; preds = %lock_buffer.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %mark_buffer_async_read.exit

if.then.i.i192:                                   ; preds = %lock_buffer.exit
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @_set_bit(i32 noundef 6, ptr noundef %68) #14
  br label %mark_buffer_async_read.exit

mark_buffer_async_read.exit:                      ; preds = %if.then.i.i192, %lock_buffer.exit.mark_buffer_async_read.exit_crit_edge
  %inc73 = add nuw nsw i32 %i.1230, 1
  %exitcond.not = icmp eq i32 %inc73, %nr.1201206
  br i1 %exitcond.not, label %for.cond74.preheader, label %mark_buffer_async_read.exit.for.body_crit_edge

mark_buffer_async_read.exit.for.body_crit_edge:   ; preds = %mark_buffer_async_read.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %for.body

for.body77:                                       ; preds = %for.inc84.for.body77_crit_edge, %for.cond74.preheader.for.body77_crit_edge
  %i.2232 = phi i32 [ %inc85, %for.inc84.for.body77_crit_edge ], [ 0, %for.cond74.preheader.for.body77_crit_edge ]
  %arrayidx78 = getelementptr [8 x ptr], ptr %arr, i32 0, i32 %i.2232
  %77 = ptrtoint ptr %arrayidx78 to i32
  call void @__asan_load4_noabort(i32 %77)
  %78 = load ptr, ptr %arrayidx78, align 4
  %79 = ptrtoint ptr %78 to i32
  call void @__asan_load4_noabort(i32 %79)
  %80 = load volatile i32, ptr %78, align 4
  %and1.i.i185 = and i32 %80, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and1.i.i185)
  %tobool80.not = icmp eq i32 %and1.i.i185, 0
  br i1 %tobool80.not, label %if.else, label %if.then81

if.then81:                                        ; preds = %for.body77
  call void @__sanitizer_cov_trace_pc() #16
  tail call fastcc void @end_buffer_async_read(ptr noundef %78, i32 noundef 1)
  br label %for.inc84

if.else:                                          ; preds = %for.body77
  call void @__sanitizer_cov_trace_pc() #16
  tail call fastcc void @submit_bh_wbc(i32 noundef 0, i32 noundef 0, ptr noundef %78, i32 noundef 0, ptr noundef null) #14
  br label %for.inc84

for.inc84:                                        ; preds = %if.else, %if.then81
  %inc85 = add nuw nsw i32 %i.2232, 1
  %exitcond255.not = icmp eq i32 %inc85, %nr.1201206
  br i1 %exitcond255.not, label %for.inc84.cleanup87_crit_edge, label %for.inc84.for.body77_crit_edge

for.inc84.for.body77_crit_edge:                   ; preds = %for.inc84
  call void @__sanitizer_cov_trace_pc() #16
  br label %for.body77

for.inc84.cleanup87_crit_edge:                    ; preds = %for.inc84
  call void @__sanitizer_cov_trace_pc() #16
  br label %cleanup87

cleanup87:                                        ; preds = %for.inc84.cleanup87_crit_edge, %for.cond74.preheader.cleanup87_crit_edge, %if.end68, %for.cond.preheader.cleanup87_crit_edge
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %arr) #14
  ret i32 0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal fastcc void @end_buffer_async_read(ptr noundef %bh, i32 noundef %uptodate) unnamed_addr #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = ptrtoint ptr %bh to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load volatile i32, ptr %bh, align 4
  %2 = and i32 %1, 64
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %2)
  %tobool.not = icmp eq i32 %2, 0
  br i1 %tobool.not, label %do.body4, label %do.end9, !prof !262

do.body4:                                         ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22fs/buffer.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 252, 0\0A.popsection", ""() #14, !srcloc !361
  unreachable

do.end9:                                          ; preds = %entry
  %b_page = getelementptr inbounds %struct.buffer_head, ptr %bh, i32 0, i32 2
  %3 = ptrtoint ptr %b_page to i32
  call void @__asan_load4_noabort(i32 %3)
  %4 = load ptr, ptr %b_page, align 8
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %uptodate)
  %tobool10.not = icmp eq i32 %uptodate, 0
  br i1 %tobool10.not, label %if.else, label %if.then11

if.then11:                                        ; preds = %do.end9
  %5 = ptrtoint ptr %bh to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load volatile i32, ptr %bh, align 4
  %and1.i.i109 = and i32 %6, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and1.i.i109)
  %tobool.not.i = icmp eq i32 %and1.i.i109, 0
  br i1 %tobool.not.i, label %if.then.i, label %if.then11.do.body13_crit_edge

if.then11.do.body13_crit_edge:                    ; preds = %if.then11
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.body13

if.then.i:                                        ; preds = %if.then11
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @_set_bit(i32 noundef 0, ptr noundef %bh) #14
  br label %do.body13

if.else:                                          ; preds = %do.end9
  tail call void @_clear_bit(i32 noundef 0, ptr noundef %bh) #14
  %7 = ptrtoint ptr %bh to i32
  call void @__asan_load4_noabort(i32 %7)
  %8 = load volatile i32, ptr %bh, align 4
  %9 = and i32 %8, 4096
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %9)
  %tobool.not.i132 = icmp eq i32 %9, 0
  br i1 %tobool.not.i132, label %if.then.i133, label %if.else.buffer_io_error.exit_crit_edge

if.else.buffer_io_error.exit_crit_edge:           ; preds = %if.else
  call void @__sanitizer_cov_trace_pc() #16
  br label %buffer_io_error.exit

if.then.i133:                                     ; preds = %if.else
  %call1.i = tail call i32 @___ratelimit(ptr noundef nonnull @buffer_io_error._rs, ptr noundef nonnull @__func__.buffer_io_error) #14
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call1.i)
  %tobool2.not.i = icmp eq i32 %call1.i, 0
  br i1 %tobool2.not.i, label %if.then.i133.buffer_io_error.exit_crit_edge, label %do.end.i

if.then.i133.buffer_io_error.exit_crit_edge:      ; preds = %if.then.i133
  call void @__sanitizer_cov_trace_pc() #16
  br label %buffer_io_error.exit

do.end.i:                                         ; preds = %if.then.i133
  call void @__sanitizer_cov_trace_pc() #16
  %b_bdev.i = getelementptr inbounds %struct.buffer_head, ptr %bh, i32 0, i32 6
  %10 = ptrtoint ptr %b_bdev.i to i32
  call void @__asan_load4_noabort(i32 %10)
  %11 = load ptr, ptr %b_bdev.i, align 8
  %b_blocknr.i = getelementptr inbounds %struct.buffer_head, ptr %bh, i32 0, i32 3
  %12 = ptrtoint ptr %b_blocknr.i to i32
  call void @__asan_load8_noabort(i32 %12)
  %13 = load i64, ptr %b_blocknr.i, align 8
  %call4.i = tail call i32 (ptr, ...) @_printk(ptr noundef nonnull @.str.17, ptr noundef %11, i64 noundef %13, ptr noundef nonnull @.str.47) #17
  br label %buffer_io_error.exit

buffer_io_error.exit:                             ; preds = %do.end.i, %if.then.i133.buffer_io_error.exit_crit_edge, %if.else.buffer_io_error.exit_crit_edge
  %14 = getelementptr inbounds %struct.page, ptr %4, i32 0, i32 1
  %15 = ptrtoint ptr %14 to i32
  call void @__asan_load4_noabort(i32 %15)
  %16 = load volatile i32, ptr %14, align 4
  %and.i.i = and i32 %16, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i)
  %tobool.not.i110 = icmp eq i32 %and.i.i, 0
  br i1 %tobool.not.i110, label %do.body7.i, label %if.then.i111, !prof !254

if.then.i111:                                     ; preds = %buffer_io_error.exit
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %4, ptr noundef nonnull @.str.18) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 416, 0\0A.popsection", ""() #14, !srcloc !273
  unreachable

do.body7.i:                                       ; preds = %buffer_io_error.exit
  %17 = ptrtoint ptr %14 to i32
  call void @__asan_load4_noabort(i32 %17)
  %18 = load volatile i32, ptr %14, align 4
  %and.i31.i = and i32 %18, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i31.i)
  %tobool.not.i.i = icmp eq i32 %and.i31.i, 0
  br i1 %tobool.not.i.i, label %if.end.i.i, label %if.then.i.i, !prof !254

if.then.i.i:                                      ; preds = %do.body7.i
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i.i = add i32 %18, -1
  br label %_compound_head.exit.i

if.end.i.i:                                       ; preds = %do.body7.i
  call void @__sanitizer_cov_trace_pc() #16
  %19 = ptrtoint ptr %4 to i32
  br label %_compound_head.exit.i

_compound_head.exit.i:                            ; preds = %if.end.i.i, %if.then.i.i
  %retval.0.i.i = phi i32 [ %sub.i.i, %if.then.i.i ], [ %19, %if.end.i.i ]
  %20 = inttoptr i32 %retval.0.i.i to ptr
  %21 = ptrtoint ptr %20 to i32
  call void @__asan_load4_noabort(i32 %21)
  %22 = load volatile i32, ptr %20, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %22)
  %cmp.i.not.i = icmp eq i32 %22, -1
  %23 = ptrtoint ptr %14 to i32
  call void @__asan_load4_noabort(i32 %23)
  %24 = load volatile i32, ptr %14, align 4
  %and.i32.i = and i32 %24, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i32.i)
  %tobool.not.i33.i = icmp eq i32 %and.i32.i, 0
  br i1 %cmp.i.not.i, label %if.then17.i, label %do.end24.i, !prof !262

if.then17.i:                                      ; preds = %_compound_head.exit.i
  br i1 %tobool.not.i33.i, label %if.end.i36.i, label %if.then.i35.i, !prof !254

if.then.i35.i:                                    ; preds = %if.then17.i
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i34.i = add i32 %24, -1
  br label %_compound_head.exit38.i

if.end.i36.i:                                     ; preds = %if.then17.i
  call void @__sanitizer_cov_trace_pc() #16
  %25 = ptrtoint ptr %4 to i32
  br label %_compound_head.exit38.i

_compound_head.exit38.i:                          ; preds = %if.end.i36.i, %if.then.i35.i
  %retval.0.i37.i = phi i32 [ %sub.i34.i, %if.then.i35.i ], [ %25, %if.end.i36.i ]
  %26 = inttoptr i32 %retval.0.i37.i to ptr
  tail call void @dump_page(ptr noundef %26, ptr noundef nonnull @.str.14) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 416, 0\0A.popsection", ""() #14, !srcloc !274
  unreachable

do.end24.i:                                       ; preds = %_compound_head.exit.i
  br i1 %tobool.not.i33.i, label %if.end.i43.i, label %if.then.i42.i, !prof !254

if.then.i42.i:                                    ; preds = %do.end24.i
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i41.i = add i32 %24, -1
  br label %SetPageError.exit

if.end.i43.i:                                     ; preds = %do.end24.i
  call void @__sanitizer_cov_trace_pc() #16
  %27 = ptrtoint ptr %4 to i32
  br label %SetPageError.exit

SetPageError.exit:                                ; preds = %if.end.i43.i, %if.then.i42.i
  %retval.0.i44.i = phi i32 [ %sub.i41.i, %if.then.i42.i ], [ %27, %if.end.i43.i ]
  %28 = inttoptr i32 %retval.0.i44.i to ptr
  tail call void @_set_bit(i32 noundef 8, ptr noundef %28) #14
  br label %do.body13

do.body13:                                        ; preds = %SetPageError.exit, %if.then.i, %if.then11.do.body13_crit_edge
  %29 = ptrtoint ptr %4 to i32
  call void @__asan_load4_noabort(i32 %29)
  %30 = load volatile i32, ptr %4, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %30)
  %cmp.i.not.i112 = icmp eq i32 %30, -1
  br i1 %cmp.i.not.i112, label %if.then.i113, label %PagePrivate.exit, !prof !262

if.then.i113:                                     ; preds = %do.body13
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %4, ptr noundef nonnull @.str.15) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 452, 0\0A.popsection", ""() #14, !srcloc !265
  unreachable

PagePrivate.exit:                                 ; preds = %do.body13
  %31 = ptrtoint ptr %4 to i32
  call void @__asan_load4_noabort(i32 %31)
  %32 = load volatile i32, ptr %4, align 4
  %33 = and i32 %32, 8192
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %33)
  %tobool15.not = icmp eq i32 %33, 0
  br i1 %tobool15.not, label %do.body25, label %do.end33, !prof !262

do.body25:                                        ; preds = %PagePrivate.exit
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22fs/buffer.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 268, 0\0A.popsection", ""() #14, !srcloc !362
  unreachable

do.end33:                                         ; preds = %PagePrivate.exit
  %private = getelementptr inbounds %struct.page, ptr %4, i32 0, i32 1, i32 0, i32 3
  %34 = ptrtoint ptr %private to i32
  call void @__asan_load4_noabort(i32 %34)
  %35 = load i32, ptr %private, align 4
  %36 = inttoptr i32 %35 to ptr
  %b_uptodate_lock = getelementptr inbounds %struct.buffer_head, ptr %36, i32 0, i32 12
  %call39 = tail call i32 @_raw_spin_lock_irqsave(ptr noundef %b_uptodate_lock) #14
  tail call void @_clear_bit(i32 noundef 6, ptr noundef %bh) #14
  %call.i.i.i = tail call zeroext i1 @__kasan_check_write(ptr noundef %bh, i32 noundef 4) #14
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !259
  tail call void @llvm.prefetch.p0(ptr %bh, i32 1, i32 3, i32 1) #14
  %37 = tail call { i32, i32, i32 } asm sideeffect "@ atomic_fetch_andnot\0A1:\09ldrex\09$0, [$4]\0A\09bic\09$1, $0, $5\0A\09strex\09$2, $1, [$4]\0A\09teq\09$2, #0\0A\09bne\091b", "=&r,=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %bh, ptr %bh, i32 4, ptr elementtype(i32) %bh) #14, !srcloc !260
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !261
  tail call void @wake_up_bit(ptr noundef %bh, i32 noundef 2) #14
  br label %do.body44

do.body44:                                        ; preds = %if.end73.do.body44_crit_edge, %do.end33
  %tmp.0 = phi ptr [ %bh, %do.end33 ], [ %46, %if.end73.do.body44_crit_edge ]
  %page_uptodate.0 = phi i32 [ 1, %do.end33 ], [ %spec.select, %if.end73.do.body44_crit_edge ]
  %38 = ptrtoint ptr %tmp.0 to i32
  call void @__asan_load4_noabort(i32 %38)
  %39 = load volatile i32, ptr %tmp.0, align 4
  %40 = load volatile i32, ptr %tmp.0, align 4
  %41 = and i32 %40, 64
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %41)
  %tobool50.not = icmp eq i32 %41, 0
  br i1 %tobool50.not, label %if.end73, label %do.body52

do.body52:                                        ; preds = %do.body44
  %42 = ptrtoint ptr %tmp.0 to i32
  call void @__asan_load4_noabort(i32 %42)
  %43 = load volatile i32, ptr %tmp.0, align 4
  %44 = and i32 %43, 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %44)
  %tobool54.not = icmp eq i32 %44, 0
  br i1 %tobool54.not, label %do.body64, label %still_busy, !prof !262

do.body64:                                        ; preds = %do.body52
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22fs/buffer.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 277, 0\0A.popsection", ""() #14, !srcloc !363
  unreachable

if.end73:                                         ; preds = %do.body44
  %and1.i.i116 = and i32 %39, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and1.i.i116)
  %tobool46.not = icmp eq i32 %and1.i.i116, 0
  %spec.select = select i1 %tobool46.not, i32 0, i32 %page_uptodate.0
  %b_this_page = getelementptr inbounds %struct.buffer_head, ptr %tmp.0, i32 0, i32 1
  %45 = ptrtoint ptr %b_this_page to i32
  call void @__asan_load4_noabort(i32 %45)
  %46 = load ptr, ptr %b_this_page, align 4
  %cmp75.not = icmp eq ptr %46, %bh
  br i1 %cmp75.not, label %do.end77, label %if.end73.do.body44_crit_edge

if.end73.do.body44_crit_edge:                     ; preds = %if.end73
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.body44

do.end77:                                         ; preds = %if.end73
  tail call void @_raw_spin_unlock_irqrestore(ptr noundef %b_uptodate_lock, i32 noundef %call39) #14
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %spec.select)
  %tobool79.not = icmp eq i32 %spec.select, 0
  br i1 %tobool79.not, label %do.end77.if.end83_crit_edge, label %land.lhs.true

do.end77.if.end83_crit_edge:                      ; preds = %do.end77
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end83

land.lhs.true:                                    ; preds = %do.end77
  %47 = getelementptr inbounds %struct.page, ptr %4, i32 0, i32 1
  %48 = ptrtoint ptr %47 to i32
  call void @__asan_load4_noabort(i32 %48)
  %49 = load volatile i32, ptr %47, align 4
  %and.i.i121 = and i32 %49, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i121)
  %tobool.not.i.i122 = icmp eq i32 %and.i.i121, 0
  br i1 %tobool.not.i.i122, label %if.end.i.i125, label %if.then.i.i124, !prof !254

if.then.i.i124:                                   ; preds = %land.lhs.true
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i.i123 = add i32 %49, -1
  br label %_compound_head.exit.i128

if.end.i.i125:                                    ; preds = %land.lhs.true
  call void @__sanitizer_cov_trace_pc() #16
  %50 = ptrtoint ptr %4 to i32
  br label %_compound_head.exit.i128

_compound_head.exit.i128:                         ; preds = %if.end.i.i125, %if.then.i.i124
  %retval.0.i.i126 = phi i32 [ %sub.i.i123, %if.then.i.i124 ], [ %50, %if.end.i.i125 ]
  %51 = inttoptr i32 %retval.0.i.i126 to ptr
  %52 = ptrtoint ptr %51 to i32
  call void @__asan_load4_noabort(i32 %52)
  %53 = load volatile i32, ptr %51, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %53)
  %cmp.i.not.i127 = icmp eq i32 %53, -1
  %54 = ptrtoint ptr %47 to i32
  call void @__asan_load4_noabort(i32 %54)
  %55 = load volatile i32, ptr %47, align 4
  %and.i16.i = and i32 %55, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i16.i)
  %tobool.not.i17.i = icmp eq i32 %and.i16.i, 0
  br i1 %cmp.i.not.i127, label %if.then.i129, label %do.end10.i, !prof !262

if.then.i129:                                     ; preds = %_compound_head.exit.i128
  br i1 %tobool.not.i17.i, label %if.end.i20.i, label %if.then.i19.i, !prof !254

if.then.i19.i:                                    ; preds = %if.then.i129
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i18.i = add i32 %55, -1
  br label %_compound_head.exit22.i

if.end.i20.i:                                     ; preds = %if.then.i129
  call void @__sanitizer_cov_trace_pc() #16
  %56 = ptrtoint ptr %4 to i32
  br label %_compound_head.exit22.i

_compound_head.exit22.i:                          ; preds = %if.end.i20.i, %if.then.i19.i
  %retval.0.i21.i = phi i32 [ %sub.i18.i, %if.then.i19.i ], [ %56, %if.end.i20.i ]
  %57 = inttoptr i32 %retval.0.i21.i to ptr
  tail call void @dump_page(ptr noundef %57, ptr noundef nonnull @.str.14) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 416, 0\0A.popsection", ""() #14, !srcloc !360
  unreachable

do.end10.i:                                       ; preds = %_compound_head.exit.i128
  br i1 %tobool.not.i17.i, label %if.end.i27.i, label %if.then.i26.i, !prof !254

if.then.i26.i:                                    ; preds = %do.end10.i
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i25.i = add i32 %55, -1
  br label %PageError.exit

if.end.i27.i:                                     ; preds = %do.end10.i
  call void @__sanitizer_cov_trace_pc() #16
  %58 = ptrtoint ptr %4 to i32
  br label %PageError.exit

PageError.exit:                                   ; preds = %if.end.i27.i, %if.then.i26.i
  %retval.0.i28.i = phi i32 [ %sub.i25.i, %if.then.i26.i ], [ %58, %if.end.i27.i ]
  %59 = inttoptr i32 %retval.0.i28.i to ptr
  %60 = ptrtoint ptr %59 to i32
  call void @__asan_load4_noabort(i32 %60)
  %61 = load volatile i32, ptr %59, align 4
  %62 = and i32 %61, 256
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %62)
  %tobool81.not = icmp eq i32 %62, 0
  br i1 %tobool81.not, label %if.then82, label %PageError.exit.if.end83_crit_edge

PageError.exit.if.end83_crit_edge:                ; preds = %PageError.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end83

if.then82:                                        ; preds = %PageError.exit
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !348
  %63 = ptrtoint ptr %47 to i32
  call void @__asan_load4_noabort(i32 %63)
  %64 = load volatile i32, ptr %47, align 4
  %and.i.i.i.i = and i32 %64, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i.i.i)
  %tobool.not.i.i.i = icmp eq i32 %and.i.i.i.i, 0
  br i1 %tobool.not.i.i.i, label %SetPageUptodate.exit, label %if.then.i.i.i, !prof !254

if.then.i.i.i:                                    ; preds = %if.then82
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %4, ptr noundef nonnull @.str.24) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 260, 0\0A.popsection", ""() #14, !srcloc !292
  unreachable

SetPageUptodate.exit:                             ; preds = %if.then82
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @_set_bit(i32 noundef 2, ptr noundef %4) #14
  br label %if.end83

if.end83:                                         ; preds = %SetPageUptodate.exit, %PageError.exit.if.end83_crit_edge, %do.end77.if.end83_crit_edge
  tail call void @unlock_page(ptr noundef %4) #14
  br label %cleanup

still_busy:                                       ; preds = %do.body52
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @_raw_spin_unlock_irqrestore(ptr noundef %b_uptodate_lock, i32 noundef %call39) #14
  br label %cleanup

cleanup:                                          ; preds = %still_busy, %if.end83
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @submit_bh(i32 noundef %op, i32 noundef %op_flags, ptr noundef %bh) #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  tail call fastcc void @submit_bh_wbc(i32 noundef %op, i32 noundef %op_flags, ptr noundef %bh, i32 noundef 0, ptr noundef null)
  ret i32 0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @generic_cont_expand_simple(ptr noundef %inode, i64 noundef %size) #2 align 64 {
entry:
  %page = alloca ptr, align 4
  %fsdata = alloca ptr, align 4
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %i_mapping = getelementptr inbounds %struct.inode, ptr %inode, i32 0, i32 9
  %0 = ptrtoint ptr %i_mapping to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %i_mapping, align 8
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %page) #14
  %2 = ptrtoint ptr %page to i32
  call void @__asan_store4_noabort(i32 %2)
  store ptr inttoptr (i32 -1 to ptr), ptr %page, align 4, !annotation !342
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %fsdata) #14
  %3 = ptrtoint ptr %fsdata to i32
  call void @__asan_store4_noabort(i32 %3)
  store ptr inttoptr (i32 -1 to ptr), ptr %fsdata, align 4, !annotation !342
  %call = tail call i32 @inode_newsize_ok(ptr noundef %inode, i64 noundef %size) #14
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call)
  %tobool.not = icmp eq i32 %call, 0
  br i1 %tobool.not, label %if.end, label %entry.out_crit_edge

entry.out_crit_edge:                              ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  br label %out

if.end:                                           ; preds = %entry
  %call1 = call i32 @pagecache_write_begin(ptr noundef null, ptr noundef %1, i64 noundef %size, i32 noundef 0, i32 noundef 1, ptr noundef nonnull %page, ptr noundef nonnull %fsdata) #14
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call1)
  %tobool2.not = icmp eq i32 %call1, 0
  br i1 %tobool2.not, label %if.end4, label %if.end.out_crit_edge

if.end.out_crit_edge:                             ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #16
  br label %out

if.end4:                                          ; preds = %if.end
  %4 = ptrtoint ptr %page to i32
  call void @__asan_load4_noabort(i32 %4)
  %5 = load ptr, ptr %page, align 4
  %6 = ptrtoint ptr %fsdata to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load ptr, ptr %fsdata, align 4
  %call5 = call i32 @pagecache_write_end(ptr noundef null, ptr noundef %1, i64 noundef %size, i32 noundef 0, i32 noundef 0, ptr noundef %5, ptr noundef %7) #14
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call5)
  %cmp = icmp sgt i32 %call5, 0
  br i1 %cmp, label %do.body9, label %if.end4.out_crit_edge, !prof !262

if.end4.out_crit_edge:                            ; preds = %if.end4
  call void @__sanitizer_cov_trace_pc() #16
  br label %out

do.body9:                                         ; preds = %if.end4
  call void @__sanitizer_cov_trace_pc() #16
  call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22fs/buffer.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 2367, 0\0A.popsection", ""() #14, !srcloc !364
  unreachable

out:                                              ; preds = %if.end4.out_crit_edge, %if.end.out_crit_edge, %entry.out_crit_edge
  %err.0 = phi i32 [ %call, %entry.out_crit_edge ], [ %call1, %if.end.out_crit_edge ], [ %call5, %if.end4.out_crit_edge ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %fsdata) #14
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %page) #14
  ret i32 %err.0
}

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @inode_newsize_ok(ptr noundef, i64 noundef) local_unnamed_addr #1

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @pagecache_write_begin(ptr noundef, ptr noundef, i64 noundef, i32 noundef, i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #1

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @pagecache_write_end(ptr noundef, ptr noundef, i64 noundef, i32 noundef, i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #1

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @cont_write_begin(ptr noundef %file, ptr noundef %mapping, i64 noundef %pos, i32 noundef %len, i32 noundef %flags, ptr nocapture noundef writeonly %pagep, ptr nocapture readnone %fsdata, ptr noundef %get_block, ptr nocapture noundef %bytes) #2 align 64 {
entry:
  %page.i = alloca ptr, align 4
  %fsdata.i = alloca ptr, align 4
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = ptrtoint ptr %mapping to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %mapping, align 4
  %i_blkbits.i = getelementptr inbounds %struct.inode, ptr %1, i32 0, i32 20
  %2 = ptrtoint ptr %i_blkbits.i to i32
  call void @__asan_load1_noabort(i32 %2)
  %3 = load i8, ptr %i_blkbits.i, align 2
  %conv.i = zext i8 %3 to i32
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %page.i) #14
  %4 = ptrtoint ptr %page.i to i32
  call void @__asan_store4_noabort(i32 %4)
  store ptr inttoptr (i32 -1 to ptr), ptr %page.i, align 4, !annotation !342
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %fsdata.i) #14
  %5 = ptrtoint ptr %fsdata.i to i32
  call void @__asan_store4_noabort(i32 %5)
  store ptr inttoptr (i32 -1 to ptr), ptr %fsdata.i, align 4, !annotation !342
  %6 = lshr i64 %pos, 12
  %conv.i25 = trunc i64 %6 to i32
  %7 = trunc i64 %pos to i32
  %conv1.i = and i32 %7, 4095
  %notmask.i = shl nsw i32 -1, %conv.i
  %sub.i = xor i32 %notmask.i, -1
  %conv9.i = zext i32 %sub.i to i64
  br label %while.cond.i

while.cond.i:                                     ; preds = %fatal_signal_pending.exit.i.while.cond.i_crit_edge, %entry
  %8 = ptrtoint ptr %bytes to i32
  call void @__asan_load8_noabort(i32 %8)
  %9 = load i64, ptr %bytes, align 8
  %10 = lshr i64 %9, 12
  %conv3.i = trunc i64 %10 to i32
  call void @__sanitizer_cov_trace_cmp4(i32 %conv.i25, i32 %conv3.i)
  %cmp.i = icmp ugt i32 %conv.i25, %conv3.i
  br i1 %cmp.i, label %while.body.i, label %while.end.i

while.body.i:                                     ; preds = %while.cond.i
  %11 = trunc i64 %9 to i32
  %conv6.i = and i32 %11, 4095
  %and7.i = and i32 %conv6.i, %sub.i
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and7.i)
  %tobool.not.i = icmp eq i32 %and7.i, 0
  br i1 %tobool.not.i, label %while.body.i.if.end.i_crit_edge, label %if.then.i

while.body.i.if.end.i_crit_edge:                  ; preds = %while.body.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end.i

if.then.i:                                        ; preds = %while.body.i
  call void @__sanitizer_cov_trace_pc() #16
  %or.i = or i64 %9, %conv9.i
  %inc.i = add i64 %or.i, 1
  %12 = ptrtoint ptr %bytes to i32
  call void @__asan_store8_noabort(i32 %12)
  store i64 %inc.i, ptr %bytes, align 8
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %while.body.i.if.end.i_crit_edge
  %sub10.i = sub nuw nsw i32 4096, %conv6.i
  %call11.i = call i32 @pagecache_write_begin(ptr noundef %file, ptr noundef %mapping, i64 noundef %9, i32 noundef %sub10.i, i32 noundef 0, ptr noundef nonnull %page.i, ptr noundef nonnull %fsdata.i) #14
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call11.i)
  %tobool12.not.i = icmp eq i32 %call11.i, 0
  br i1 %tobool12.not.i, label %if.end14.i, label %if.end.i.cont_expand_zero.exit.thread_crit_edge

if.end.i.cont_expand_zero.exit.thread_crit_edge:  ; preds = %if.end.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %cont_expand_zero.exit.thread

if.end14.i:                                       ; preds = %if.end.i
  %13 = ptrtoint ptr %page.i to i32
  call void @__asan_load4_noabort(i32 %13)
  %14 = load ptr, ptr %page.i, align 4
  call void @zero_user_segments(ptr noundef %14, i32 noundef %conv6.i, i32 noundef 4096, i32 noundef 0, i32 noundef 0) #14
  %15 = ptrtoint ptr %page.i to i32
  call void @__asan_load4_noabort(i32 %15)
  %16 = load ptr, ptr %page.i, align 4
  %17 = ptrtoint ptr %fsdata.i to i32
  call void @__asan_load4_noabort(i32 %17)
  %18 = load ptr, ptr %fsdata.i, align 4
  %call15.i = call i32 @pagecache_write_end(ptr noundef %file, ptr noundef %mapping, i64 noundef %9, i32 noundef %sub10.i, i32 noundef %sub10.i, ptr noundef %16, ptr noundef %18) #14
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call15.i)
  %cmp16.i = icmp slt i32 %call15.i, 0
  br i1 %cmp16.i, label %if.end14.i.cont_expand_zero.exit.thread_crit_edge, label %do.body.i

if.end14.i.cont_expand_zero.exit.thread_crit_edge: ; preds = %if.end14.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %cont_expand_zero.exit.thread

do.body.i:                                        ; preds = %if.end14.i
  call void @__sanitizer_cov_trace_cmp4(i32 %call15.i, i32 %sub10.i)
  %cmp20.not.i = icmp eq i32 %call15.i, %sub10.i
  br i1 %cmp20.not.i, label %do.end31.i, label %do.body25.i, !prof !254

do.body25.i:                                      ; preds = %do.body.i
  call void @__sanitizer_cov_trace_pc() #16
  call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22fs/buffer.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 2406, 0\0A.popsection", ""() #14, !srcloc !365
  unreachable

do.end31.i:                                       ; preds = %do.body.i
  call void @balance_dirty_pages_ratelimited(ptr noundef %mapping) #14
  %19 = call i32 @llvm.read_register.i32(metadata !243) #14
  %and.i.i = and i32 %19, -16384
  %20 = inttoptr i32 %and.i.i to ptr
  %task.i = getelementptr inbounds %struct.thread_info, ptr %20, i32 0, i32 2
  %21 = ptrtoint ptr %task.i to i32
  call void @__asan_load4_noabort(i32 %21)
  %22 = load ptr, ptr %task.i, align 8
  %stack.i.i.i.i = getelementptr inbounds %struct.task_struct, ptr %22, i32 0, i32 1
  %23 = ptrtoint ptr %stack.i.i.i.i to i32
  call void @__asan_load4_noabort(i32 %23)
  %24 = load ptr, ptr %stack.i.i.i.i, align 4
  %25 = ptrtoint ptr %24 to i32
  call void @__asan_load4_noabort(i32 %25)
  %26 = load volatile i32, ptr %24, align 4
  %and1.i.i.i.i.i.i = and i32 %26, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and1.i.i.i.i.i.i)
  %tobool.not.i.i = icmp eq i32 %and1.i.i.i.i.i.i, 0
  br i1 %tobool.not.i.i, label %do.end31.i.fatal_signal_pending.exit.i_crit_edge, label %land.rhs.i.i

do.end31.i.fatal_signal_pending.exit.i_crit_edge: ; preds = %do.end31.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %fatal_signal_pending.exit.i

land.rhs.i.i:                                     ; preds = %do.end31.i
  call void @__sanitizer_cov_trace_pc() #16
  %signal.i.i.i = getelementptr inbounds %struct.task_struct, ptr %22, i32 0, i32 116, i32 1
  %27 = ptrtoint ptr %signal.i.i.i to i32
  call void @__asan_load4_noabort(i32 %27)
  %28 = load i32, ptr %signal.i.i.i, align 4
  %29 = lshr i32 %28, 8
  %.lobit.i.i = and i32 %29, 1
  br label %fatal_signal_pending.exit.i

fatal_signal_pending.exit.i:                      ; preds = %land.rhs.i.i, %do.end31.i.fatal_signal_pending.exit.i_crit_edge
  %30 = phi i32 [ 0, %do.end31.i.fatal_signal_pending.exit.i_crit_edge ], [ %.lobit.i.i, %land.rhs.i.i ]
  %tobool34.not.i = icmp eq i32 %30, 0
  br i1 %tobool34.not.i, label %fatal_signal_pending.exit.i.while.cond.i_crit_edge, label %fatal_signal_pending.exit.i.cont_expand_zero.exit.thread_crit_edge

fatal_signal_pending.exit.i.cont_expand_zero.exit.thread_crit_edge: ; preds = %fatal_signal_pending.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %cont_expand_zero.exit.thread

fatal_signal_pending.exit.i.while.cond.i_crit_edge: ; preds = %fatal_signal_pending.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %while.cond.i

while.end.i:                                      ; preds = %while.cond.i
  %conv3.i.le = trunc i64 %10 to i32
  call void @__sanitizer_cov_trace_cmp4(i32 %conv.i25, i32 %conv3.i.le)
  %cmp37.i = icmp eq i32 %conv.i25, %conv3.i.le
  br i1 %cmp37.i, label %if.then39.i, label %while.end.i.if.end_crit_edge

while.end.i.if.end_crit_edge:                     ; preds = %while.end.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end

if.then39.i:                                      ; preds = %while.end.i
  %31 = trunc i64 %9 to i32
  %conv41.i = and i32 %31, 4095
  call void @__sanitizer_cov_trace_cmp4(i32 %conv1.i, i32 %conv41.i)
  %cmp42.not.i = icmp ugt i32 %conv1.i, %conv41.i
  br i1 %cmp42.not.i, label %if.end45.i, label %if.then39.i.if.end_crit_edge

if.then39.i.if.end_crit_edge:                     ; preds = %if.then39.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end

if.end45.i:                                       ; preds = %if.then39.i
  %and47.i = and i32 %conv41.i, %sub.i
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and47.i)
  %tobool48.not.i = icmp eq i32 %and47.i, 0
  br i1 %tobool48.not.i, label %if.end45.i.if.end54.i_crit_edge, label %if.then49.i

if.end45.i.if.end54.i_crit_edge:                  ; preds = %if.end45.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end54.i

if.then49.i:                                      ; preds = %if.end45.i
  call void @__sanitizer_cov_trace_pc() #16
  %or52.i = or i64 %9, %conv9.i
  %inc53.i = add i64 %or52.i, 1
  %32 = ptrtoint ptr %bytes to i32
  call void @__asan_store8_noabort(i32 %32)
  store i64 %inc53.i, ptr %bytes, align 8
  br label %if.end54.i

if.end54.i:                                       ; preds = %if.then49.i, %if.end45.i.if.end54.i_crit_edge
  %sub55.i = sub nsw i32 %conv1.i, %conv41.i
  %call56.i = call i32 @pagecache_write_begin(ptr noundef %file, ptr noundef %mapping, i64 noundef %9, i32 noundef %sub55.i, i32 noundef 0, ptr noundef nonnull %page.i, ptr noundef nonnull %fsdata.i) #14
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call56.i)
  %tobool57.not.i = icmp eq i32 %call56.i, 0
  br i1 %tobool57.not.i, label %if.end59.i, label %if.end54.i.cont_expand_zero.exit.thread_crit_edge

if.end54.i.cont_expand_zero.exit.thread_crit_edge: ; preds = %if.end54.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %cont_expand_zero.exit.thread

if.end59.i:                                       ; preds = %if.end54.i
  %33 = ptrtoint ptr %page.i to i32
  call void @__asan_load4_noabort(i32 %33)
  %34 = load ptr, ptr %page.i, align 4
  call void @zero_user_segments(ptr noundef %34, i32 noundef %conv41.i, i32 noundef %conv1.i, i32 noundef 0, i32 noundef 0) #14
  %35 = ptrtoint ptr %page.i to i32
  call void @__asan_load4_noabort(i32 %35)
  %36 = load ptr, ptr %page.i, align 4
  %37 = ptrtoint ptr %fsdata.i to i32
  call void @__asan_load4_noabort(i32 %37)
  %38 = load ptr, ptr %fsdata.i, align 4
  %call60.i = call i32 @pagecache_write_end(ptr noundef %file, ptr noundef %mapping, i64 noundef %9, i32 noundef %sub55.i, i32 noundef %sub55.i, ptr noundef %36, ptr noundef %38) #14
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call60.i)
  %cmp61.i = icmp slt i32 %call60.i, 0
  br i1 %cmp61.i, label %if.end59.i.cont_expand_zero.exit.thread_crit_edge, label %do.body65.i

if.end59.i.cont_expand_zero.exit.thread_crit_edge: ; preds = %if.end59.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %cont_expand_zero.exit.thread

do.body65.i:                                      ; preds = %if.end59.i
  call void @__sanitizer_cov_trace_cmp4(i32 %call60.i, i32 %sub55.i)
  %cmp66.not.i = icmp eq i32 %call60.i, %sub55.i
  br i1 %cmp66.not.i, label %do.body65.i.if.end_crit_edge, label %do.body75.i, !prof !254

do.body65.i.if.end_crit_edge:                     ; preds = %do.body65.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end

do.body75.i:                                      ; preds = %do.body65.i
  call void @__sanitizer_cov_trace_pc() #16
  call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22fs/buffer.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 2439, 0\0A.popsection", ""() #14, !srcloc !366
  unreachable

cont_expand_zero.exit.thread:                     ; preds = %if.end59.i.cont_expand_zero.exit.thread_crit_edge, %if.end54.i.cont_expand_zero.exit.thread_crit_edge, %fatal_signal_pending.exit.i.cont_expand_zero.exit.thread_crit_edge, %if.end14.i.cont_expand_zero.exit.thread_crit_edge, %if.end.i.cont_expand_zero.exit.thread_crit_edge
  %err.1.i.ph = phi i32 [ %call60.i, %if.end59.i.cont_expand_zero.exit.thread_crit_edge ], [ %call56.i, %if.end54.i.cont_expand_zero.exit.thread_crit_edge ], [ -4, %fatal_signal_pending.exit.i.cont_expand_zero.exit.thread_crit_edge ], [ %call15.i, %if.end14.i.cont_expand_zero.exit.thread_crit_edge ], [ %call11.i, %if.end.i.cont_expand_zero.exit.thread_crit_edge ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %fsdata.i) #14
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %page.i) #14
  br label %cleanup

if.end:                                           ; preds = %do.body65.i.if.end_crit_edge, %if.then39.i.if.end_crit_edge, %while.end.i.if.end_crit_edge
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %fsdata.i) #14
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %page.i) #14
  %39 = ptrtoint ptr %bytes to i32
  call void @__asan_load8_noabort(i32 %39)
  %40 = load i64, ptr %bytes, align 8
  %conv2 = zext i32 %len to i64
  %add = add i64 %conv2, %pos
  call void @__sanitizer_cov_trace_cmp8(i64 %add, i64 %40)
  %cmp = icmp sgt i64 %add, %40
  br i1 %cmp, label %land.lhs.true, label %if.end.if.end9_crit_edge

if.end.if.end9_crit_edge:                         ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end9

land.lhs.true:                                    ; preds = %if.end
  %41 = trunc i64 %40 to i32
  %conv = and i32 %sub.i, 4095
  %and4 = and i32 %conv, %41
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and4)
  %tobool5.not = icmp eq i32 %and4, 0
  br i1 %tobool5.not, label %land.lhs.true.if.end9_crit_edge, label %if.then6

land.lhs.true.if.end9_crit_edge:                  ; preds = %land.lhs.true
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end9

if.then6:                                         ; preds = %land.lhs.true
  call void @__sanitizer_cov_trace_pc() #16
  %or = or i64 %40, %conv9.i
  %inc = add i64 %or, 1
  %42 = ptrtoint ptr %bytes to i32
  call void @__asan_store8_noabort(i32 %42)
  store i64 %inc, ptr %bytes, align 8
  br label %if.end9

if.end9:                                          ; preds = %if.then6, %land.lhs.true.if.end9_crit_edge, %if.end.if.end9_crit_edge
  %call.i = call ptr @grab_cache_page_write_begin(ptr noundef %mapping, i32 noundef %conv.i25, i32 noundef %flags) #14
  %tobool.not.i27 = icmp eq ptr %call.i, null
  br i1 %tobool.not.i27, label %if.end9.cleanup_crit_edge, label %if.end.i28

if.end9.cleanup_crit_edge:                        ; preds = %if.end9
  call void @__sanitizer_cov_trace_pc() #16
  br label %cleanup

if.end.i28:                                       ; preds = %if.end9
  %43 = getelementptr inbounds %struct.page, ptr %call.i, i32 0, i32 1
  %44 = ptrtoint ptr %43 to i32
  call void @__asan_load4_noabort(i32 %44)
  %45 = load volatile i32, ptr %43, align 4
  %and.i.i.i = and i32 %45, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i.i)
  %tobool.not.i.i.i = icmp eq i32 %and.i.i.i, 0
  br i1 %tobool.not.i.i.i, label %if.end.i.i.i, label %if.then.i.i.i, !prof !254

if.then.i.i.i:                                    ; preds = %if.end.i28
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i.i.i = add i32 %45, -1
  br label %__block_write_begin.exit.i

if.end.i.i.i:                                     ; preds = %if.end.i28
  call void @__sanitizer_cov_trace_pc() #16
  %46 = ptrtoint ptr %call.i to i32
  br label %__block_write_begin.exit.i

__block_write_begin.exit.i:                       ; preds = %if.end.i.i.i, %if.then.i.i.i
  %retval.0.i.i.i = phi i32 [ %sub.i.i.i, %if.then.i.i.i ], [ %46, %if.end.i.i.i ]
  %47 = inttoptr i32 %retval.0.i.i.i to ptr
  %call1.i.i = call i32 @__block_write_begin_int(ptr noundef %47, i64 noundef %pos, i32 noundef %len, ptr noundef %get_block, ptr noundef null) #14
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call1.i.i)
  %tobool2.not.i = icmp eq i32 %call1.i.i, 0
  br i1 %tobool2.not.i, label %__block_write_begin.exit.i.if.end6.i_crit_edge, label %if.then5.i, !prof !254

__block_write_begin.exit.i.if.end6.i_crit_edge:   ; preds = %__block_write_begin.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end6.i

if.then5.i:                                       ; preds = %__block_write_begin.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  call void @unlock_page(ptr noundef nonnull %call.i) #14
  call fastcc void @put_page(ptr noundef nonnull %call.i) #14
  br label %if.end6.i

if.end6.i:                                        ; preds = %if.then5.i, %__block_write_begin.exit.i.if.end6.i_crit_edge
  %page.0.i = phi ptr [ null, %if.then5.i ], [ %call.i, %__block_write_begin.exit.i.if.end6.i_crit_edge ]
  %48 = ptrtoint ptr %pagep to i32
  call void @__asan_store4_noabort(i32 %48)
  store ptr %page.0.i, ptr %pagep, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end6.i, %if.end9.cleanup_crit_edge, %cont_expand_zero.exit.thread
  %retval.0 = phi i32 [ %err.1.i.ph, %cont_expand_zero.exit.thread ], [ %call1.i.i, %if.end6.i ], [ -12, %if.end9.cleanup_crit_edge ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @block_commit_write(ptr noundef %page, i32 noundef %from, i32 noundef %to) #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  tail call fastcc void @__block_commit_write(ptr noundef %page, i32 noundef %from, i32 noundef %to)
  ret i32 0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @block_page_mkwrite(ptr nocapture noundef readonly %vma, ptr nocapture noundef readonly %vmf, ptr noundef %get_block) #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %page1 = getelementptr inbounds %struct.vm_fault, ptr %vmf, i32 0, i32 6
  %0 = ptrtoint ptr %page1 to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %page1, align 4
  %vm_file = getelementptr inbounds %struct.vm_area_struct, ptr %vma, i32 0, i32 14
  %2 = ptrtoint ptr %vm_file to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load ptr, ptr %vm_file, align 4
  %f_inode.i = getelementptr inbounds %struct.file, ptr %3, i32 0, i32 2
  %4 = ptrtoint ptr %f_inode.i to i32
  call void @__asan_load4_noabort(i32 %4)
  %5 = load ptr, ptr %f_inode.i, align 8
  tail call void @__might_sleep(ptr noundef nonnull @.str.42, i32 noundef 788) #14
  %6 = getelementptr inbounds %struct.page, ptr %1, i32 0, i32 1
  %7 = ptrtoint ptr %6 to i32
  call void @__asan_load4_noabort(i32 %7)
  %8 = load volatile i32, ptr %6, align 4
  %and.i.i = and i32 %8, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i)
  %tobool.not.i.i = icmp eq i32 %and.i.i, 0
  br i1 %tobool.not.i.i, label %if.end.i.i, label %if.then.i.i, !prof !254

if.then.i.i:                                      ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i.i = add i32 %8, -1
  br label %_compound_head.exit.i

if.end.i.i:                                       ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  %9 = ptrtoint ptr %1 to i32
  br label %_compound_head.exit.i

_compound_head.exit.i:                            ; preds = %if.end.i.i, %if.then.i.i
  %retval.0.i.i = phi i32 [ %sub.i.i, %if.then.i.i ], [ %9, %if.end.i.i ]
  %10 = inttoptr i32 %retval.0.i.i to ptr
  %11 = getelementptr inbounds %struct.page, ptr %10, i32 0, i32 1
  %12 = ptrtoint ptr %11 to i32
  call void @__asan_load4_noabort(i32 %12)
  %13 = load volatile i32, ptr %11, align 4
  %and.i.i.i.i = and i32 %13, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i.i.i)
  %tobool.not.i.i.i = icmp eq i32 %and.i.i.i.i, 0
  br i1 %tobool.not.i.i.i, label %folio_flags.exit.i.i, label %if.then.i.i.i, !prof !254

if.then.i.i.i:                                    ; preds = %_compound_head.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %10, ptr noundef nonnull @.str.24) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 260, 0\0A.popsection", ""() #14, !srcloc !292
  unreachable

folio_flags.exit.i.i:                             ; preds = %_compound_head.exit.i
  %call.i.i.i.i = tail call zeroext i1 @__kasan_check_write(ptr noundef %10, i32 noundef 4) #14
  %14 = ptrtoint ptr %10 to i32
  call void @__asan_load4_noabort(i32 %14)
  %15 = load volatile i32, ptr %10, align 4
  %and.i.i4.i.i = and i32 %15, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i4.i.i)
  %tobool.not.i.i.i.i = icmp eq i32 %and.i.i4.i.i, 0
  br i1 %tobool.not.i.i.i.i, label %folio_trylock.exit.i, label %folio_flags.exit.i.i.if.then.i_crit_edge

folio_flags.exit.i.i.if.then.i_crit_edge:         ; preds = %folio_flags.exit.i.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.then.i

folio_trylock.exit.i:                             ; preds = %folio_flags.exit.i.i
  tail call void @llvm.prefetch.p0(ptr %10, i32 1, i32 3, i32 1) #14
  %16 = tail call { i32, i32, i32 } asm sideeffect "@ atomic_fetch_or\0A1:\09ldrex\09$0, [$4]\0A\09orr\09$1, $0, $5\0A\09strex\09$2, $1, [$4]\0A\09teq\09$2, #0\0A\09bne\091b", "=&r,=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %10, ptr %10, i32 1, ptr elementtype(i32) %10) #14, !srcloc !284
  %asmresult.i.i.i.i.i.i.i = extractvalue { i32, i32, i32 } %16, 0
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !285
  %17 = and i32 %asmresult.i.i.i.i.i.i.i, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %17)
  %phi.cmp.i.i.i = icmp eq i32 %17, 0
  br i1 %phi.cmp.i.i.i, label %folio_trylock.exit.i.lock_page.exit_crit_edge, label %folio_trylock.exit.i.if.then.i_crit_edge

folio_trylock.exit.i.if.then.i_crit_edge:         ; preds = %folio_trylock.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.then.i

folio_trylock.exit.i.lock_page.exit_crit_edge:    ; preds = %folio_trylock.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %lock_page.exit

if.then.i:                                        ; preds = %folio_trylock.exit.i.if.then.i_crit_edge, %folio_flags.exit.i.i.if.then.i_crit_edge
  tail call void @__folio_lock(ptr noundef %10) #14
  br label %lock_page.exit

lock_page.exit:                                   ; preds = %if.then.i, %folio_trylock.exit.i.lock_page.exit_crit_edge
  %call2 = tail call fastcc i64 @i_size_read(ptr noundef %5)
  %mapping = getelementptr inbounds %struct.page, ptr %1, i32 0, i32 1, i32 0, i32 1
  %18 = ptrtoint ptr %mapping to i32
  call void @__asan_load4_noabort(i32 %18)
  %19 = load ptr, ptr %mapping, align 4
  %i_mapping = getelementptr inbounds %struct.inode, ptr %5, i32 0, i32 9
  %20 = ptrtoint ptr %i_mapping to i32
  call void @__asan_load4_noabort(i32 %20)
  %21 = load ptr, ptr %i_mapping, align 8
  %cmp.not = icmp eq ptr %19, %21
  br i1 %cmp.not, label %lor.lhs.false, label %lock_page.exit.out_unlock_crit_edge

lock_page.exit.out_unlock_crit_edge:              ; preds = %lock_page.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %out_unlock

lor.lhs.false:                                    ; preds = %lock_page.exit
  %index.i = getelementptr inbounds %struct.page, ptr %1, i32 0, i32 1, i32 0, i32 2
  %22 = ptrtoint ptr %index.i to i32
  call void @__asan_load4_noabort(i32 %22)
  %23 = load i32, ptr %index.i, align 4
  %conv.i = zext i32 %23 to i64
  %shl.i = shl nuw nsw i64 %conv.i, 12
  call void @__sanitizer_cov_trace_cmp8(i64 %shl.i, i64 %call2)
  %cmp4 = icmp sgt i64 %shl.i, %call2
  br i1 %cmp4, label %lor.lhs.false.out_unlock_crit_edge, label %if.end

lor.lhs.false.out_unlock_crit_edge:               ; preds = %lor.lhs.false
  call void @__sanitizer_cov_trace_pc() #16
  br label %out_unlock

if.end:                                           ; preds = %lor.lhs.false
  %add = shl i32 %23, 12
  %shl = add i32 %add, 4096
  %conv = zext i32 %shl to i64
  call void @__sanitizer_cov_trace_cmp8(i64 %call2, i64 %conv)
  %cmp5 = icmp slt i64 %call2, %conv
  %24 = trunc i64 %call2 to i32
  %conv8 = and i32 %24, 4095
  %end.0 = select i1 %cmp5, i32 %conv8, i32 4096
  %25 = ptrtoint ptr %6 to i32
  call void @__asan_load4_noabort(i32 %25)
  %26 = load volatile i32, ptr %6, align 4
  %and.i.i39 = and i32 %26, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i39)
  %tobool.not.i.i40 = icmp eq i32 %and.i.i39, 0
  br i1 %tobool.not.i.i40, label %if.end.i.i43, label %if.then.i.i42, !prof !254

if.then.i.i42:                                    ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i.i41 = add i32 %26, -1
  br label %__block_write_begin.exit

if.end.i.i43:                                     ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #16
  %27 = ptrtoint ptr %1 to i32
  br label %__block_write_begin.exit

__block_write_begin.exit:                         ; preds = %if.end.i.i43, %if.then.i.i42
  %retval.0.i.i44 = phi i32 [ %sub.i.i41, %if.then.i.i42 ], [ %27, %if.end.i.i43 ]
  %28 = inttoptr i32 %retval.0.i.i44 to ptr
  %call1.i = tail call i32 @__block_write_begin_int(ptr noundef %28, i64 noundef 0, i32 noundef %end.0, ptr noundef %get_block, ptr noundef null) #14
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call1.i)
  %tobool.not = icmp eq i32 %call1.i, 0
  br i1 %tobool.not, label %if.end13.thread, label %if.end13

if.end13.thread:                                  ; preds = %__block_write_begin.exit
  call void @__sanitizer_cov_trace_pc() #16
  tail call fastcc void @__block_commit_write(ptr noundef %1, i32 noundef 0, i32 noundef %end.0) #14
  br label %if.end19

if.end13:                                         ; preds = %__block_write_begin.exit
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call1.i)
  %cmp14 = icmp slt i32 %call1.i, 0
  br i1 %cmp14, label %if.end13.out_unlock_crit_edge, label %if.end13.if.end19_crit_edge, !prof !262

if.end13.if.end19_crit_edge:                      ; preds = %if.end13
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end19

if.end13.out_unlock_crit_edge:                    ; preds = %if.end13
  call void @__sanitizer_cov_trace_pc() #16
  br label %out_unlock

if.end19:                                         ; preds = %if.end13.if.end19_crit_edge, %if.end13.thread
  %call20 = tail call zeroext i1 @set_page_dirty(ptr noundef %1) #14
  tail call void @wait_for_stable_page(ptr noundef %1) #14
  br label %cleanup

out_unlock:                                       ; preds = %if.end13.out_unlock_crit_edge, %lor.lhs.false.out_unlock_crit_edge, %lock_page.exit.out_unlock_crit_edge
  %ret.1 = phi i32 [ %call1.i, %if.end13.out_unlock_crit_edge ], [ -14, %lor.lhs.false.out_unlock_crit_edge ], [ -14, %lock_page.exit.out_unlock_crit_edge ]
  tail call void @unlock_page(ptr noundef %1) #14
  br label %cleanup

cleanup:                                          ; preds = %out_unlock, %if.end19
  %retval.0 = phi i32 [ %ret.1, %out_unlock ], [ 0, %if.end19 ]
  ret i32 %retval.0
}

; Function Attrs: null_pointer_is_valid
declare dso_local zeroext i1 @set_page_dirty(ptr noundef) local_unnamed_addr #1

; Function Attrs: null_pointer_is_valid
declare dso_local void @wait_for_stable_page(ptr noundef) local_unnamed_addr #1

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @nobh_write_begin(ptr noundef %mapping, i64 noundef %pos, i32 noundef %len, i32 noundef %flags, ptr nocapture noundef writeonly %pagep, ptr nocapture noundef writeonly %fsdata, ptr noundef %get_block) #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = ptrtoint ptr %mapping to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %mapping, align 4
  %i_blkbits = getelementptr inbounds %struct.inode, ptr %1, i32 0, i32 20
  %2 = ptrtoint ptr %i_blkbits to i32
  call void @__asan_load1_noabort(i32 %2)
  %3 = load i8, ptr %i_blkbits, align 2
  %conv = zext i8 %3 to i32
  %shl = shl nuw i32 1, %conv
  %4 = lshr i64 %pos, 12
  %conv1 = trunc i64 %4 to i32
  %5 = trunc i64 %pos to i32
  %conv2 = and i32 %5, 4095
  %add = add i32 %conv2, %len
  %call = tail call ptr @grab_cache_page_write_begin(ptr noundef %mapping, i32 noundef %conv1, i32 noundef %flags) #14
  %tobool.not = icmp eq ptr %call, null
  br i1 %tobool.not, label %entry.cleanup104_crit_edge, label %if.end

entry.cleanup104_crit_edge:                       ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  br label %cleanup104

if.end:                                           ; preds = %entry
  %6 = ptrtoint ptr %pagep to i32
  call void @__asan_store4_noabort(i32 %6)
  store ptr %call, ptr %pagep, align 4
  %7 = ptrtoint ptr %fsdata to i32
  call void @__asan_store4_noabort(i32 %7)
  store ptr null, ptr %fsdata, align 4
  %8 = ptrtoint ptr %call to i32
  call void @__asan_load4_noabort(i32 %8)
  %9 = load volatile i32, ptr %call, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %9)
  %cmp.i.not.i = icmp eq i32 %9, -1
  br i1 %cmp.i.not.i, label %if.then.i, label %PagePrivate.exit, !prof !262

if.then.i:                                        ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef nonnull %call, ptr noundef nonnull @.str.15) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 452, 0\0A.popsection", ""() #14, !srcloc !265
  unreachable

PagePrivate.exit:                                 ; preds = %if.end
  %10 = ptrtoint ptr %call to i32
  call void @__asan_load4_noabort(i32 %10)
  %11 = load volatile i32, ptr %call, align 4
  %12 = and i32 %11, 8192
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %12)
  %tobool4.not = icmp eq i32 %12, 0
  %13 = getelementptr inbounds %struct.page, ptr %call, i32 0, i32 1
  %14 = ptrtoint ptr %13 to i32
  call void @__asan_load4_noabort(i32 %14)
  %15 = load volatile i32, ptr %13, align 4
  %and.i.i = and i32 %15, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i)
  %tobool.not.i.i = icmp eq i32 %and.i.i, 0
  br i1 %tobool4.not, label %if.end12, label %if.then5

if.then5:                                         ; preds = %PagePrivate.exit
  br i1 %tobool.not.i.i, label %if.end.i.i214, label %if.then.i.i213, !prof !254

if.then.i.i213:                                   ; preds = %if.then5
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i.i212 = add i32 %15, -1
  br label %__block_write_begin.exit

if.end.i.i214:                                    ; preds = %if.then5
  call void @__sanitizer_cov_trace_pc() #16
  %16 = ptrtoint ptr %call to i32
  br label %__block_write_begin.exit

__block_write_begin.exit:                         ; preds = %if.end.i.i214, %if.then.i.i213
  %retval.0.i.i215 = phi i32 [ %sub.i.i212, %if.then.i.i213 ], [ %16, %if.end.i.i214 ]
  %17 = inttoptr i32 %retval.0.i.i215 to ptr
  %call1.i = tail call i32 @__block_write_begin_int(ptr noundef %17, i64 noundef %pos, i32 noundef %len, ptr noundef %get_block, ptr noundef null) #14
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call1.i)
  %tobool7.not = icmp eq i32 %call1.i, 0
  br i1 %tobool7.not, label %__block_write_begin.exit.cleanup104_crit_edge, label %__block_write_begin.exit.out_release_crit_edge, !prof !254

__block_write_begin.exit.out_release_crit_edge:   ; preds = %__block_write_begin.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %out_release

__block_write_begin.exit.cleanup104_crit_edge:    ; preds = %__block_write_begin.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %cleanup104

if.end12:                                         ; preds = %PagePrivate.exit
  br i1 %tobool.not.i.i, label %if.end.i.i, label %if.then.i.i, !prof !254

if.then.i.i:                                      ; preds = %if.end12
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i.i = add i32 %15, -1
  br label %_compound_head.exit.i

if.end.i.i:                                       ; preds = %if.end12
  call void @__sanitizer_cov_trace_pc() #16
  %18 = ptrtoint ptr %call to i32
  br label %_compound_head.exit.i

_compound_head.exit.i:                            ; preds = %if.end.i.i, %if.then.i.i
  %retval.0.i.i = phi i32 [ %sub.i.i, %if.then.i.i ], [ %18, %if.end.i.i ]
  %19 = inttoptr i32 %retval.0.i.i to ptr
  %20 = ptrtoint ptr %19 to i32
  call void @__asan_load4_noabort(i32 %20)
  %21 = load volatile i32, ptr %19, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %21)
  %cmp.i.not.i184 = icmp eq i32 %21, -1
  %22 = ptrtoint ptr %13 to i32
  call void @__asan_load4_noabort(i32 %22)
  %23 = load volatile i32, ptr %13, align 4
  %and.i16.i = and i32 %23, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i16.i)
  %tobool.not.i17.i = icmp eq i32 %and.i16.i, 0
  br i1 %cmp.i.not.i184, label %if.then.i185, label %do.end10.i, !prof !262

if.then.i185:                                     ; preds = %_compound_head.exit.i
  br i1 %tobool.not.i17.i, label %if.end.i20.i, label %if.then.i19.i, !prof !254

if.then.i19.i:                                    ; preds = %if.then.i185
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i18.i = add i32 %23, -1
  br label %_compound_head.exit22.i

if.end.i20.i:                                     ; preds = %if.then.i185
  call void @__sanitizer_cov_trace_pc() #16
  %24 = ptrtoint ptr %call to i32
  br label %_compound_head.exit22.i

_compound_head.exit22.i:                          ; preds = %if.end.i20.i, %if.then.i19.i
  %retval.0.i21.i = phi i32 [ %sub.i18.i, %if.then.i19.i ], [ %24, %if.end.i20.i ]
  %25 = inttoptr i32 %retval.0.i21.i to ptr
  tail call void @dump_page(ptr noundef %25, ptr noundef nonnull @.str.14) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 463, 0\0A.popsection", ""() #14, !srcloc !367
  unreachable

do.end10.i:                                       ; preds = %_compound_head.exit.i
  br i1 %tobool.not.i17.i, label %if.end.i27.i, label %if.then.i26.i, !prof !254

if.then.i26.i:                                    ; preds = %do.end10.i
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i25.i = add i32 %23, -1
  br label %PageMappedToDisk.exit

if.end.i27.i:                                     ; preds = %do.end10.i
  call void @__sanitizer_cov_trace_pc() #16
  %26 = ptrtoint ptr %call to i32
  br label %PageMappedToDisk.exit

PageMappedToDisk.exit:                            ; preds = %if.end.i27.i, %if.then.i26.i
  %retval.0.i28.i = phi i32 [ %sub.i25.i, %if.then.i26.i ], [ %26, %if.end.i27.i ]
  %27 = inttoptr i32 %retval.0.i28.i to ptr
  %28 = ptrtoint ptr %27 to i32
  call void @__asan_load4_noabort(i32 %28)
  %29 = load volatile i32, ptr %27, align 4
  %30 = and i32 %29, 131072
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %30)
  %tobool14.not = icmp eq i32 %30, 0
  br i1 %tobool14.not, label %if.end16, label %PageMappedToDisk.exit.cleanup104_crit_edge

PageMappedToDisk.exit.cleanup104_crit_edge:       ; preds = %PageMappedToDisk.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %cleanup104

if.end16:                                         ; preds = %PageMappedToDisk.exit
  %call17 = tail call ptr @alloc_page_buffers(ptr noundef nonnull %call, i32 noundef %shl, i1 noundef zeroext false)
  %tobool18.not = icmp eq ptr %call17, null
  br i1 %tobool18.not, label %if.end16.out_release_crit_edge, label %if.end20

if.end16.out_release_crit_edge:                   ; preds = %if.end16
  call void @__sanitizer_cov_trace_pc() #16
  br label %out_release

if.end20:                                         ; preds = %if.end16
  %index21 = getelementptr inbounds %struct.page, ptr %call, i32 0, i32 1, i32 0, i32 2
  %31 = ptrtoint ptr %index21 to i32
  call void @__asan_load4_noabort(i32 %31)
  %32 = load i32, ptr %index21, align 4
  %conv22 = zext i32 %32 to i64
  %sub = sub nsw i32 12, %conv
  %sh_prom = zext i32 %sub to i64
  %shl23 = shl i64 %conv22, %sh_prom
  %33 = ptrtoint ptr %call to i32
  br label %for.body

for.body:                                         ; preds = %for.inc.for.body_crit_edge, %if.end20
  %is_mapped_to_disk.0252 = phi i32 [ 1, %if.end20 ], [ %spec.select, %for.inc.for.body_crit_edge ]
  %nr_reads.0251 = phi i32 [ 0, %if.end20 ], [ %nr_reads.2.ph, %for.inc.for.body_crit_edge ]
  %block_start.0250 = phi i32 [ 0, %if.end20 ], [ %add25, %for.inc.for.body_crit_edge ]
  %block_in_page.0249 = phi i32 [ 0, %if.end20 ], [ %inc66, %for.inc.for.body_crit_edge ]
  %bh.0246 = phi ptr [ %call17, %if.end20 ], [ %67, %for.inc.for.body_crit_edge ]
  %add25 = add i32 %block_start.0250, %shl
  %34 = ptrtoint ptr %bh.0246 to i32
  call void @__asan_store4_noabort(i32 %34)
  store i32 0, ptr %bh.0246, align 8
  call void @__sanitizer_cov_trace_cmp4(i32 %block_start.0250, i32 %add)
  %cmp26.not = icmp ult i32 %block_start.0250, %add
  %spec.store.select = zext i1 %cmp26.not to i32
  %conv30 = zext i32 %block_in_page.0249 to i64
  %add31 = add i64 %shl23, %conv30
  %call32 = tail call i32 %get_block(ptr noundef %1, i64 noundef %add31, ptr noundef %bh.0246, i32 noundef %spec.store.select) #14
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call32)
  %tobool33.not = icmp eq i32 %call32, 0
  br i1 %tobool33.not, label %if.end35, label %for.body.do.end103_crit_edge

for.body.do.end103_crit_edge:                     ; preds = %for.body
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.end103

if.end35:                                         ; preds = %for.body
  %35 = ptrtoint ptr %bh.0246 to i32
  call void @__asan_load4_noabort(i32 %35)
  %36 = load volatile i32, ptr %bh.0246, align 4
  %37 = and i32 %36, 16
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %37)
  %tobool37.not = icmp eq i32 %37, 0
  %spec.select = select i1 %tobool37.not, i32 0, i32 %is_mapped_to_disk.0252
  %38 = ptrtoint ptr %bh.0246 to i32
  call void @__asan_load4_noabort(i32 %38)
  %39 = load volatile i32, ptr %bh.0246, align 4
  %40 = and i32 %39, 32
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %40)
  %tobool41.not = icmp eq i32 %40, 0
  br i1 %tobool41.not, label %if.end35.if.end43_crit_edge, label %if.then42

if.end35.if.end43_crit_edge:                      ; preds = %if.end35
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end43

if.then42:                                        ; preds = %if.end35
  call void @__sanitizer_cov_trace_pc() #16
  %b_bdev.i = getelementptr inbounds %struct.buffer_head, ptr %bh.0246, i32 0, i32 6
  %41 = ptrtoint ptr %b_bdev.i to i32
  call void @__asan_load4_noabort(i32 %41)
  %42 = load ptr, ptr %b_bdev.i, align 8
  %b_blocknr.i = getelementptr inbounds %struct.buffer_head, ptr %bh.0246, i32 0, i32 3
  %43 = ptrtoint ptr %b_blocknr.i to i32
  call void @__asan_load8_noabort(i32 %43)
  %44 = load i64, ptr %b_blocknr.i, align 8
  tail call void @clean_bdev_aliases(ptr noundef %42, i64 noundef %44, i64 noundef 1) #14
  br label %if.end43

if.end43:                                         ; preds = %if.then42, %if.end35.if.end43_crit_edge
  %45 = ptrtoint ptr %13 to i32
  call void @__asan_load4_noabort(i32 %45)
  %46 = load volatile i32, ptr %13, align 4
  %and.i.i217 = and i32 %46, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i217)
  %tobool.not.i.i218 = icmp eq i32 %and.i.i217, 0
  br i1 %tobool.not.i.i218, label %if.end43._compound_head.exit.i223_crit_edge, label %if.then.i.i220, !prof !254

if.end43._compound_head.exit.i223_crit_edge:      ; preds = %if.end43
  call void @__sanitizer_cov_trace_pc() #16
  br label %_compound_head.exit.i223

if.then.i.i220:                                   ; preds = %if.end43
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i.i219 = add i32 %46, -1
  br label %_compound_head.exit.i223

_compound_head.exit.i223:                         ; preds = %if.then.i.i220, %if.end43._compound_head.exit.i223_crit_edge
  %retval.0.i.i222 = phi i32 [ %sub.i.i219, %if.then.i.i220 ], [ %33, %if.end43._compound_head.exit.i223_crit_edge ]
  %47 = inttoptr i32 %retval.0.i.i222 to ptr
  %48 = getelementptr inbounds %struct.page, ptr %47, i32 0, i32 1
  %49 = ptrtoint ptr %48 to i32
  call void @__asan_load4_noabort(i32 %49)
  %50 = load volatile i32, ptr %48, align 4
  %and.i.i.i.i = and i32 %50, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i.i.i)
  %tobool.not.i.i.i = icmp eq i32 %and.i.i.i.i, 0
  br i1 %tobool.not.i.i.i, label %folio_flags.exit.i.i, label %if.then.i.i.i, !prof !254

if.then.i.i.i:                                    ; preds = %_compound_head.exit.i223
  call void @__sanitizer_cov_trace_pc() #16
  %51 = inttoptr i32 %retval.0.i.i222 to ptr
  tail call void @dump_page(ptr noundef %51, ptr noundef nonnull @.str.24) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 260, 0\0A.popsection", ""() #14, !srcloc !292
  unreachable

folio_flags.exit.i.i:                             ; preds = %_compound_head.exit.i223
  %52 = ptrtoint ptr %47 to i32
  call void @__asan_load4_noabort(i32 %52)
  %53 = load volatile i32, ptr %47, align 4
  %54 = and i32 %53, 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %54)
  %tobool.i.not.i = icmp eq i32 %54, 0
  br i1 %tobool.i.not.i, label %if.end47, label %PageUptodate.exit

PageUptodate.exit:                                ; preds = %folio_flags.exit.i.i
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !322
  %55 = ptrtoint ptr %bh.0246 to i32
  call void @__asan_load4_noabort(i32 %55)
  %56 = load volatile i32, ptr %bh.0246, align 4
  %and1.i.i192 = and i32 %56, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and1.i.i192)
  %tobool.not.i = icmp eq i32 %and1.i.i192, 0
  br i1 %tobool.not.i, label %if.then.i193, label %PageUptodate.exit.for.inc_crit_edge

PageUptodate.exit.for.inc_crit_edge:              ; preds = %PageUptodate.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %for.inc

if.then.i193:                                     ; preds = %PageUptodate.exit
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @_set_bit(i32 noundef 0, ptr noundef %bh.0246) #14
  br label %for.inc

if.end47:                                         ; preds = %folio_flags.exit.i.i
  %57 = ptrtoint ptr %bh.0246 to i32
  call void @__asan_load4_noabort(i32 %57)
  %58 = load volatile i32, ptr %bh.0246, align 4
  %59 = and i32 %58, 32
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %59)
  %tobool49.not = icmp eq i32 %59, 0
  br i1 %tobool49.not, label %lor.lhs.false, label %if.end47.if.then52_crit_edge

if.end47.if.then52_crit_edge:                     ; preds = %if.end47
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.then52

lor.lhs.false:                                    ; preds = %if.end47
  %60 = ptrtoint ptr %bh.0246 to i32
  call void @__asan_load4_noabort(i32 %60)
  %61 = load volatile i32, ptr %bh.0246, align 4
  %62 = and i32 %61, 16
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %62)
  %tobool51.not = icmp eq i32 %62, 0
  br i1 %tobool51.not, label %lor.lhs.false.if.then52_crit_edge, label %if.end53

lor.lhs.false.if.then52_crit_edge:                ; preds = %lor.lhs.false
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.then52

if.then52:                                        ; preds = %lor.lhs.false.if.then52_crit_edge, %if.end47.if.then52_crit_edge
  tail call void @zero_user_segments(ptr noundef nonnull %call, i32 noundef %block_start.0250, i32 noundef %conv2, i32 noundef %add, i32 noundef %add25) #14
  br label %for.inc

if.end53:                                         ; preds = %lor.lhs.false
  %63 = ptrtoint ptr %bh.0246 to i32
  call void @__asan_load4_noabort(i32 %63)
  %64 = load volatile i32, ptr %bh.0246, align 4
  %and1.i.i198 = and i32 %64, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and1.i.i198)
  %tobool55.not = icmp eq i32 %and1.i.i198, 0
  br i1 %tobool55.not, label %if.end57, label %if.end53.for.inc_crit_edge

if.end53.for.inc_crit_edge:                       ; preds = %if.end53
  call void @__sanitizer_cov_trace_pc() #16
  br label %for.inc

if.end57:                                         ; preds = %if.end53
  call void @__sanitizer_cov_trace_cmp4(i32 %block_start.0250, i32 %conv2)
  %cmp58 = icmp ult i32 %block_start.0250, %conv2
  call void @__sanitizer_cov_trace_cmp4(i32 %add25, i32 %add)
  %cmp61 = icmp ugt i32 %add25, %add
  %or.cond = select i1 %cmp58, i1 true, i1 %cmp61
  br i1 %or.cond, label %if.then63, label %if.end57.for.inc_crit_edge

if.end57.for.inc_crit_edge:                       ; preds = %if.end57
  call void @__sanitizer_cov_trace_pc() #16
  br label %for.inc

if.then63:                                        ; preds = %if.end57
  call void @__sanitizer_cov_trace_pc() #16
  tail call fastcc void @lock_buffer(ptr noundef %bh.0246)
  %b_end_io = getelementptr inbounds %struct.buffer_head, ptr %bh.0246, i32 0, i32 7
  %65 = ptrtoint ptr %b_end_io to i32
  call void @__asan_store4_noabort(i32 %65)
  store ptr @end_buffer_read_nobh, ptr %b_end_io, align 4
  tail call fastcc void @submit_bh_wbc(i32 noundef 0, i32 noundef 0, ptr noundef %bh.0246, i32 noundef 0, ptr noundef null) #14
  %inc = add i32 %nr_reads.0251, 1
  br label %for.inc

for.inc:                                          ; preds = %if.then63, %if.end57.for.inc_crit_edge, %if.end53.for.inc_crit_edge, %if.then52, %if.then.i193, %PageUptodate.exit.for.inc_crit_edge
  %nr_reads.2.ph = phi i32 [ %nr_reads.0251, %if.then.i193 ], [ %nr_reads.0251, %PageUptodate.exit.for.inc_crit_edge ], [ %nr_reads.0251, %if.end57.for.inc_crit_edge ], [ %inc, %if.then63 ], [ %nr_reads.0251, %if.end53.for.inc_crit_edge ], [ %nr_reads.0251, %if.then52 ]
  %inc66 = add i32 %block_in_page.0249, 1
  %b_this_page = getelementptr inbounds %struct.buffer_head, ptr %bh.0246, i32 0, i32 1
  %66 = ptrtoint ptr %b_this_page to i32
  call void @__asan_load4_noabort(i32 %66)
  %67 = load ptr, ptr %b_this_page, align 4
  %cmp = icmp ult i32 %add25, 4096
  br i1 %cmp, label %for.inc.for.body_crit_edge, label %for.end

for.inc.for.body_crit_edge:                       ; preds = %for.inc
  call void @__sanitizer_cov_trace_pc() #16
  br label %for.body

for.end:                                          ; preds = %for.inc
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %nr_reads.2.ph)
  %tobool68.not = icmp eq i32 %nr_reads.2.ph, 0
  br i1 %tobool68.not, label %for.end.if.end83_crit_edge, label %for.end.for.body72_crit_edge

for.end.for.body72_crit_edge:                     ; preds = %for.end
  br label %for.body72

for.end.if.end83_crit_edge:                       ; preds = %for.end
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end83

for.body72:                                       ; preds = %wait_on_buffer.exit.for.body72_crit_edge, %for.end.for.body72_crit_edge
  %ret.1256 = phi i32 [ %spec.select183, %wait_on_buffer.exit.for.body72_crit_edge ], [ 0, %for.end.for.body72_crit_edge ]
  %bh.1254 = phi ptr [ %77, %wait_on_buffer.exit.for.body72_crit_edge ], [ %call17, %for.end.for.body72_crit_edge ]
  tail call void @__might_sleep(ptr noundef nonnull @.str.43, i32 noundef 354) #14
  %68 = ptrtoint ptr %bh.1254 to i32
  call void @__asan_load4_noabort(i32 %68)
  %69 = load volatile i32, ptr %bh.1254, align 4
  %70 = and i32 %69, 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %70)
  %tobool.not.i224 = icmp eq i32 %70, 0
  br i1 %tobool.not.i224, label %for.body72.wait_on_buffer.exit_crit_edge, label %if.then.i226

for.body72.wait_on_buffer.exit_crit_edge:         ; preds = %for.body72
  call void @__sanitizer_cov_trace_pc() #16
  br label %wait_on_buffer.exit

if.then.i226:                                     ; preds = %for.body72
  tail call void @__might_sleep(ptr noundef nonnull @.str.13, i32 noundef 98) #14
  %71 = ptrtoint ptr %bh.1254 to i32
  call void @__asan_load4_noabort(i32 %71)
  %72 = load volatile i32, ptr %bh.1254, align 4
  %73 = and i32 %72, 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %73)
  %tobool.not.i.i.i225 = icmp eq i32 %73, 0
  br i1 %tobool.not.i.i.i225, label %if.then.i226.wait_on_buffer.exit_crit_edge, label %if.end.i.i.i

if.then.i226.wait_on_buffer.exit_crit_edge:       ; preds = %if.then.i226
  call void @__sanitizer_cov_trace_pc() #16
  br label %wait_on_buffer.exit

if.end.i.i.i:                                     ; preds = %if.then.i226
  call void @__sanitizer_cov_trace_pc() #16
  %call3.i.i.i = tail call i32 @out_of_line_wait_on_bit(ptr noundef nonnull %bh.1254, i32 noundef 2, ptr noundef nonnull @bit_wait_io, i32 noundef 2) #14
  br label %wait_on_buffer.exit

wait_on_buffer.exit:                              ; preds = %if.end.i.i.i, %if.then.i226.wait_on_buffer.exit_crit_edge, %for.body72.wait_on_buffer.exit_crit_edge
  %74 = ptrtoint ptr %bh.1254 to i32
  call void @__asan_load4_noabort(i32 %74)
  %75 = load volatile i32, ptr %bh.1254, align 4
  %and1.i.i199 = and i32 %75, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and1.i.i199)
  %tobool74.not = icmp eq i32 %and1.i.i199, 0
  %spec.select183 = select i1 %tobool74.not, i32 -5, i32 %ret.1256
  %b_this_page78 = getelementptr inbounds %struct.buffer_head, ptr %bh.1254, i32 0, i32 1
  %76 = ptrtoint ptr %b_this_page78 to i32
  call void @__asan_load4_noabort(i32 %76)
  %77 = load ptr, ptr %b_this_page78, align 4
  %tobool71.not = icmp eq ptr %77, null
  br i1 %tobool71.not, label %for.end79, label %wait_on_buffer.exit.for.body72_crit_edge

wait_on_buffer.exit.for.body72_crit_edge:         ; preds = %wait_on_buffer.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %for.body72

for.end79:                                        ; preds = %wait_on_buffer.exit
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %spec.select183)
  %tobool80.not = icmp eq i32 %spec.select183, 0
  br i1 %tobool80.not, label %for.end79.if.end83_crit_edge, label %for.end79.do.end103_crit_edge

for.end79.do.end103_crit_edge:                    ; preds = %for.end79
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.end103

for.end79.if.end83_crit_edge:                     ; preds = %for.end79
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end83

if.end83:                                         ; preds = %for.end79.if.end83_crit_edge, %for.end.if.end83_crit_edge
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %spec.select)
  %tobool84.not = icmp eq i32 %spec.select, 0
  br i1 %tobool84.not, label %if.end83.if.end86_crit_edge, label %if.then85

if.end83.if.end86_crit_edge:                      ; preds = %if.end83
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end86

if.then85:                                        ; preds = %if.end83
  %78 = ptrtoint ptr %13 to i32
  call void @__asan_load4_noabort(i32 %78)
  %79 = load volatile i32, ptr %13, align 4
  %and.i.i200 = and i32 %79, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i200)
  %tobool.not.i201 = icmp eq i32 %and.i.i200, 0
  br i1 %tobool.not.i201, label %do.body7.i, label %if.then.i202, !prof !254

if.then.i202:                                     ; preds = %if.then85
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef nonnull %call, ptr noundef nonnull @.str.18) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 463, 0\0A.popsection", ""() #14, !srcloc !358
  unreachable

do.body7.i:                                       ; preds = %if.then85
  %80 = ptrtoint ptr %13 to i32
  call void @__asan_load4_noabort(i32 %80)
  %81 = load volatile i32, ptr %13, align 4
  %and.i31.i = and i32 %81, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i31.i)
  %tobool.not.i.i203 = icmp eq i32 %and.i31.i, 0
  br i1 %tobool.not.i.i203, label %do.body7.i._compound_head.exit.i209_crit_edge, label %if.then.i.i205, !prof !254

do.body7.i._compound_head.exit.i209_crit_edge:    ; preds = %do.body7.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %_compound_head.exit.i209

if.then.i.i205:                                   ; preds = %do.body7.i
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i.i204 = add i32 %81, -1
  br label %_compound_head.exit.i209

_compound_head.exit.i209:                         ; preds = %if.then.i.i205, %do.body7.i._compound_head.exit.i209_crit_edge
  %retval.0.i.i207 = phi i32 [ %sub.i.i204, %if.then.i.i205 ], [ %33, %do.body7.i._compound_head.exit.i209_crit_edge ]
  %82 = inttoptr i32 %retval.0.i.i207 to ptr
  %83 = ptrtoint ptr %82 to i32
  call void @__asan_load4_noabort(i32 %83)
  %84 = load volatile i32, ptr %82, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %84)
  %cmp.i.not.i208 = icmp eq i32 %84, -1
  %85 = ptrtoint ptr %13 to i32
  call void @__asan_load4_noabort(i32 %85)
  %86 = load volatile i32, ptr %13, align 4
  %and.i32.i = and i32 %86, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i32.i)
  %tobool.not.i33.i = icmp eq i32 %and.i32.i, 0
  br i1 %cmp.i.not.i208, label %if.then17.i, label %do.end24.i, !prof !262

if.then17.i:                                      ; preds = %_compound_head.exit.i209
  br i1 %tobool.not.i33.i, label %if.then17.i._compound_head.exit38.i_crit_edge, label %if.then.i35.i, !prof !254

if.then17.i._compound_head.exit38.i_crit_edge:    ; preds = %if.then17.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %_compound_head.exit38.i

if.then.i35.i:                                    ; preds = %if.then17.i
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i34.i = add i32 %86, -1
  br label %_compound_head.exit38.i

_compound_head.exit38.i:                          ; preds = %if.then.i35.i, %if.then17.i._compound_head.exit38.i_crit_edge
  %retval.0.i37.i = phi i32 [ %sub.i34.i, %if.then.i35.i ], [ %33, %if.then17.i._compound_head.exit38.i_crit_edge ]
  %87 = inttoptr i32 %retval.0.i37.i to ptr
  tail call void @dump_page(ptr noundef %87, ptr noundef nonnull @.str.14) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 463, 0\0A.popsection", ""() #14, !srcloc !359
  unreachable

do.end24.i:                                       ; preds = %_compound_head.exit.i209
  br i1 %tobool.not.i33.i, label %do.end24.i.SetPageMappedToDisk.exit_crit_edge, label %if.then.i42.i, !prof !254

do.end24.i.SetPageMappedToDisk.exit_crit_edge:    ; preds = %do.end24.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %SetPageMappedToDisk.exit

if.then.i42.i:                                    ; preds = %do.end24.i
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i41.i = add i32 %86, -1
  br label %SetPageMappedToDisk.exit

SetPageMappedToDisk.exit:                         ; preds = %if.then.i42.i, %do.end24.i.SetPageMappedToDisk.exit_crit_edge
  %retval.0.i44.i = phi i32 [ %sub.i41.i, %if.then.i42.i ], [ %33, %do.end24.i.SetPageMappedToDisk.exit_crit_edge ]
  %88 = inttoptr i32 %retval.0.i44.i to ptr
  tail call void @_set_bit(i32 noundef 17, ptr noundef %88) #14
  br label %if.end86

if.end86:                                         ; preds = %SetPageMappedToDisk.exit, %if.end83.if.end86_crit_edge
  %89 = ptrtoint ptr %fsdata to i32
  call void @__asan_store4_noabort(i32 %89)
  store ptr %call17, ptr %fsdata, align 4
  br label %cleanup104

do.end103:                                        ; preds = %for.end79.do.end103_crit_edge, %for.body.do.end103_crit_edge
  %ret.3 = phi i32 [ %spec.select183, %for.end79.do.end103_crit_edge ], [ %call32, %for.body.do.end103_crit_edge ]
  tail call fastcc void @attach_nobh_buffers(ptr noundef nonnull %call, ptr noundef nonnull %call17)
  tail call void @page_zero_new_buffers(ptr noundef nonnull %call, i32 noundef %conv2, i32 noundef %add)
  br label %out_release

out_release:                                      ; preds = %do.end103, %if.end16.out_release_crit_edge, %__block_write_begin.exit.out_release_crit_edge
  %ret.4 = phi i32 [ %call1.i, %__block_write_begin.exit.out_release_crit_edge ], [ %ret.3, %do.end103 ], [ -12, %if.end16.out_release_crit_edge ]
  tail call void @unlock_page(ptr noundef nonnull %call) #14
  %90 = getelementptr inbounds %struct.page, ptr %call, i32 0, i32 1
  %91 = ptrtoint ptr %90 to i32
  call void @__asan_load4_noabort(i32 %91)
  %92 = load volatile i32, ptr %90, align 4
  %and.i.i227 = and i32 %92, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i227)
  %tobool.not.i.i228 = icmp eq i32 %and.i.i227, 0
  br i1 %tobool.not.i.i228, label %if.end.i.i231, label %if.then.i.i230, !prof !254

if.then.i.i230:                                   ; preds = %out_release
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i.i229 = add i32 %92, -1
  br label %_compound_head.exit.i233

if.end.i.i231:                                    ; preds = %out_release
  call void @__sanitizer_cov_trace_pc() #16
  %93 = ptrtoint ptr %call to i32
  br label %_compound_head.exit.i233

_compound_head.exit.i233:                         ; preds = %if.end.i.i231, %if.then.i.i230
  %retval.0.i.i232 = phi i32 [ %sub.i.i229, %if.then.i.i230 ], [ %93, %if.end.i.i231 ]
  %94 = inttoptr i32 %retval.0.i.i232 to ptr
  %_refcount.i.i.i.i.i = getelementptr inbounds %struct.page, ptr %94, i32 0, i32 3
  %call.i.i.i.i.i.i.i = tail call zeroext i1 @__kasan_check_read(ptr noundef %_refcount.i.i.i.i.i, i32 noundef 4) #14
  %95 = ptrtoint ptr %_refcount.i.i.i.i.i to i32
  call void @__asan_load4_noabort(i32 %95)
  %96 = load volatile i32, ptr %_refcount.i.i.i.i.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %96)
  %cmp.i.i.i.i = icmp eq i32 %96, 0
  br i1 %cmp.i.i.i.i, label %if.then.i.i.i.i, label %do.end5.i.i.i.i, !prof !262

if.then.i.i.i.i:                                  ; preds = %_compound_head.exit.i233
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %94, ptr noundef nonnull @.str.44) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/mm.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 717, 0\0A.popsection", ""() #14, !srcloc !308
  unreachable

do.end5.i.i.i.i:                                  ; preds = %_compound_head.exit.i233
  %call.i.i.i10.i.i.i.i = tail call zeroext i1 @__kasan_check_write(ptr noundef %_refcount.i.i.i.i.i, i32 noundef 4) #14
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !309
  tail call void @llvm.prefetch.p0(ptr %_refcount.i.i.i.i.i, i32 1, i32 3, i32 1) #14
  %97 = tail call { i32, i32 } asm sideeffect "@ atomic_sub_return\0A1:\09ldrex\09$0, [$3]\0A\09sub\09$0, $0, $4\0A\09strex\09$1, $0, [$3]\0A\09teq\09$1, #0\0A\09bne\091b", "=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %_refcount.i.i.i.i.i, ptr %_refcount.i.i.i.i.i, i32 1, ptr elementtype(i32) %_refcount.i.i.i.i.i) #14, !srcloc !310
  %asmresult.i.i.i.i.i.i.i.i.i.i = extractvalue { i32, i32 } %97, 0
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !311
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %asmresult.i.i.i.i.i.i.i.i.i.i)
  %cmp.i.i.i.i.i.i.i = icmp eq i32 %asmresult.i.i.i.i.i.i.i.i.i.i, 0
  callbr void asm sideeffect "1:\0A\09nop\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr getelementptr inbounds (%struct.tracepoint, ptr @__tracepoint_page_ref_mod_and_test, i32 0, i32 1), ptr blockaddress(@nobh_write_begin, %if.then.i.i.i.i.i)) #14
          to label %folio_put_testzero.exit.i.i [label %if.then.i.i.i.i.i], !srcloc !253

if.then.i.i.i.i.i:                                ; preds = %do.end5.i.i.i.i
  call void @__sanitizer_cov_trace_pc() #16
  %conv.i.i.i.i.i = zext i1 %cmp.i.i.i.i.i.i.i to i32
  tail call void @__page_ref_mod_and_test(ptr noundef %94, i32 noundef -1, i32 noundef %conv.i.i.i.i.i) #14
  br label %folio_put_testzero.exit.i.i

folio_put_testzero.exit.i.i:                      ; preds = %if.then.i.i.i.i.i, %do.end5.i.i.i.i
  br i1 %cmp.i.i.i.i.i.i.i, label %if.then.i4.i, label %folio_put_testzero.exit.i.i.put_page.exit_crit_edge

folio_put_testzero.exit.i.i.put_page.exit_crit_edge: ; preds = %folio_put_testzero.exit.i.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %put_page.exit

if.then.i4.i:                                     ; preds = %folio_put_testzero.exit.i.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @__put_page(ptr noundef %94) #14
  br label %put_page.exit

put_page.exit:                                    ; preds = %if.then.i4.i, %folio_put_testzero.exit.i.i.put_page.exit_crit_edge
  %98 = ptrtoint ptr %pagep to i32
  call void @__asan_store4_noabort(i32 %98)
  store ptr null, ptr %pagep, align 4
  br label %cleanup104

cleanup104:                                       ; preds = %put_page.exit, %if.end86, %PageMappedToDisk.exit.cleanup104_crit_edge, %__block_write_begin.exit.cleanup104_crit_edge, %entry.cleanup104_crit_edge
  %retval.0 = phi i32 [ %ret.4, %put_page.exit ], [ 0, %if.end86 ], [ -12, %entry.cleanup104_crit_edge ], [ 0, %__block_write_begin.exit.cleanup104_crit_edge ], [ 0, %PageMappedToDisk.exit.cleanup104_crit_edge ]
  ret i32 %retval.0
}

; Function Attrs: null_pointer_is_valid
declare dso_local void @zero_user_segments(ptr noundef, i32 noundef, i32 noundef, i32 noundef, i32 noundef) local_unnamed_addr #1

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal void @end_buffer_read_nobh(ptr noundef %bh, i32 noundef %uptodate) #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %uptodate)
  %tobool.not.i = icmp eq i32 %uptodate, 0
  br i1 %tobool.not.i, label %if.else.i, label %if.then.i

if.then.i:                                        ; preds = %entry
  %0 = ptrtoint ptr %bh to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load volatile i32, ptr %bh, align 4
  %and1.i.i.i = and i32 %1, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and1.i.i.i)
  %tobool.not.i.i = icmp eq i32 %and1.i.i.i, 0
  br i1 %tobool.not.i.i, label %if.then.i.i, label %if.then.i.__end_buffer_read_notouch.exit_crit_edge

if.then.i.__end_buffer_read_notouch.exit_crit_edge: ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %__end_buffer_read_notouch.exit

if.then.i.i:                                      ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @_set_bit(i32 noundef 0, ptr noundef %bh) #14
  br label %__end_buffer_read_notouch.exit

if.else.i:                                        ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @_clear_bit(i32 noundef 0, ptr noundef %bh) #14
  br label %__end_buffer_read_notouch.exit

__end_buffer_read_notouch.exit:                   ; preds = %if.else.i, %if.then.i.i, %if.then.i.__end_buffer_read_notouch.exit_crit_edge
  %call.i.i.i.i = tail call zeroext i1 @__kasan_check_write(ptr noundef %bh, i32 noundef 4) #14
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !259
  tail call void @llvm.prefetch.p0(ptr %bh, i32 1, i32 3, i32 1) #14
  %2 = tail call { i32, i32, i32 } asm sideeffect "@ atomic_fetch_andnot\0A1:\09ldrex\09$0, [$4]\0A\09bic\09$1, $0, $5\0A\09strex\09$2, $1, [$4]\0A\09teq\09$2, #0\0A\09bne\091b", "=&r,=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %bh, ptr %bh, i32 4, ptr elementtype(i32) %bh) #14, !srcloc !260
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !261
  tail call void @wake_up_bit(ptr noundef %bh, i32 noundef 2) #14
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal fastcc void @attach_nobh_buffers(ptr noundef %page, ptr noundef %head) unnamed_addr #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = getelementptr inbounds %struct.page, ptr %page, i32 0, i32 1
  %1 = ptrtoint ptr %0 to i32
  call void @__asan_load4_noabort(i32 %1)
  %2 = load volatile i32, ptr %0, align 4
  %and.i.i = and i32 %2, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i)
  %tobool.not.i.i = icmp eq i32 %and.i.i, 0
  br i1 %tobool.not.i.i, label %if.end.i.i, label %if.then.i.i, !prof !254

if.then.i.i:                                      ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i.i = add i32 %2, -1
  br label %_compound_head.exit.i

if.end.i.i:                                       ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  %3 = ptrtoint ptr %page to i32
  br label %_compound_head.exit.i

_compound_head.exit.i:                            ; preds = %if.end.i.i, %if.then.i.i
  %retval.0.i.i = phi i32 [ %sub.i.i, %if.then.i.i ], [ %3, %if.end.i.i ]
  %4 = inttoptr i32 %retval.0.i.i to ptr
  %5 = ptrtoint ptr %4 to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load volatile i32, ptr %4, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %6)
  %cmp.i.not.i = icmp eq i32 %6, -1
  %7 = ptrtoint ptr %0 to i32
  call void @__asan_load4_noabort(i32 %7)
  %8 = load volatile i32, ptr %0, align 4
  %and.i16.i = and i32 %8, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i16.i)
  %tobool.not.i17.i = icmp eq i32 %and.i16.i, 0
  br i1 %cmp.i.not.i, label %if.then.i, label %do.end10.i, !prof !262

if.then.i:                                        ; preds = %_compound_head.exit.i
  br i1 %tobool.not.i17.i, label %if.end.i20.i, label %if.then.i19.i, !prof !254

if.then.i19.i:                                    ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i18.i = add i32 %8, -1
  br label %_compound_head.exit22.i

if.end.i20.i:                                     ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #16
  %9 = ptrtoint ptr %page to i32
  br label %_compound_head.exit22.i

_compound_head.exit22.i:                          ; preds = %if.end.i20.i, %if.then.i19.i
  %retval.0.i21.i = phi i32 [ %sub.i18.i, %if.then.i19.i ], [ %9, %if.end.i20.i ]
  %10 = inttoptr i32 %retval.0.i21.i to ptr
  tail call void @dump_page(ptr noundef %10, ptr noundef nonnull @.str.14) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 414, 0\0A.popsection", ""() #14, !srcloc !263
  unreachable

do.end10.i:                                       ; preds = %_compound_head.exit.i
  br i1 %tobool.not.i17.i, label %if.end.i27.i, label %if.then.i26.i, !prof !254

if.then.i26.i:                                    ; preds = %do.end10.i
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i25.i = add i32 %8, -1
  br label %PageLocked.exit

if.end.i27.i:                                     ; preds = %do.end10.i
  call void @__sanitizer_cov_trace_pc() #16
  %11 = ptrtoint ptr %page to i32
  br label %PageLocked.exit

PageLocked.exit:                                  ; preds = %if.end.i27.i, %if.then.i26.i
  %retval.0.i28.i = phi i32 [ %sub.i25.i, %if.then.i26.i ], [ %11, %if.end.i27.i ]
  %12 = inttoptr i32 %retval.0.i28.i to ptr
  %13 = ptrtoint ptr %12 to i32
  call void @__asan_load4_noabort(i32 %13)
  %14 = load volatile i32, ptr %12, align 4
  %and1.i.i = and i32 %14, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and1.i.i)
  %tobool.not = icmp eq i32 %and1.i.i, 0
  br i1 %tobool.not, label %do.body4, label %do.end9, !prof !262

do.body4:                                         ; preds = %PageLocked.exit
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22fs/buffer.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 2558, 0\0A.popsection", ""() #14, !srcloc !368
  unreachable

do.end9:                                          ; preds = %PageLocked.exit
  %mapping = getelementptr inbounds %struct.page, ptr %page, i32 0, i32 1, i32 0, i32 1
  %15 = ptrtoint ptr %mapping to i32
  call void @__asan_load4_noabort(i32 %15)
  %16 = load ptr, ptr %mapping, align 4
  %private_lock = getelementptr inbounds %struct.address_space, ptr %16, i32 0, i32 12
  tail call void @_raw_spin_lock(ptr noundef %private_lock) #14
  %17 = ptrtoint ptr %page to i32
  br label %do.body10

do.body10:                                        ; preds = %if.end18.do.body10_crit_edge, %do.end9
  %bh.0 = phi ptr [ %head, %do.end9 ], [ %37, %if.end18.do.body10_crit_edge ]
  %18 = ptrtoint ptr %0 to i32
  call void @__asan_load4_noabort(i32 %18)
  %19 = load volatile i32, ptr %0, align 4
  %and.i.i35 = and i32 %19, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i35)
  %tobool.not.i.i36 = icmp eq i32 %and.i.i35, 0
  br i1 %tobool.not.i.i36, label %do.body10._compound_head.exit.i42_crit_edge, label %if.then.i.i38, !prof !254

do.body10._compound_head.exit.i42_crit_edge:      ; preds = %do.body10
  call void @__sanitizer_cov_trace_pc() #16
  br label %_compound_head.exit.i42

if.then.i.i38:                                    ; preds = %do.body10
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i.i37 = add i32 %19, -1
  br label %_compound_head.exit.i42

_compound_head.exit.i42:                          ; preds = %if.then.i.i38, %do.body10._compound_head.exit.i42_crit_edge
  %retval.0.i.i40 = phi i32 [ %sub.i.i37, %if.then.i.i38 ], [ %17, %do.body10._compound_head.exit.i42_crit_edge ]
  %20 = inttoptr i32 %retval.0.i.i40 to ptr
  %21 = ptrtoint ptr %20 to i32
  call void @__asan_load4_noabort(i32 %21)
  %22 = load volatile i32, ptr %20, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %22)
  %cmp.i.not.i41 = icmp eq i32 %22, -1
  %23 = ptrtoint ptr %0 to i32
  call void @__asan_load4_noabort(i32 %23)
  %24 = load volatile i32, ptr %0, align 4
  %and.i13.i = and i32 %24, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i13.i)
  %tobool.not.i14.i = icmp eq i32 %and.i13.i, 0
  br i1 %cmp.i.not.i41, label %if.then.i43, label %do.end8.i, !prof !262

if.then.i43:                                      ; preds = %_compound_head.exit.i42
  br i1 %tobool.not.i14.i, label %if.then.i43._compound_head.exit19.i_crit_edge, label %if.then.i16.i, !prof !254

if.then.i43._compound_head.exit19.i_crit_edge:    ; preds = %if.then.i43
  call void @__sanitizer_cov_trace_pc() #16
  br label %_compound_head.exit19.i

if.then.i16.i:                                    ; preds = %if.then.i43
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i15.i = add i32 %24, -1
  br label %_compound_head.exit19.i

_compound_head.exit19.i:                          ; preds = %if.then.i16.i, %if.then.i43._compound_head.exit19.i_crit_edge
  %retval.0.i18.i = phi i32 [ %sub.i15.i, %if.then.i16.i ], [ %17, %if.then.i43._compound_head.exit19.i_crit_edge ]
  %25 = inttoptr i32 %retval.0.i18.i to ptr
  tail call void @dump_page(ptr noundef %25, ptr noundef nonnull @.str.14) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 420, 0\0A.popsection", ""() #14, !srcloc !323
  unreachable

do.end8.i:                                        ; preds = %_compound_head.exit.i42
  br i1 %tobool.not.i14.i, label %do.end8.i.PageDirty.exit_crit_edge, label %if.then.i23.i, !prof !254

do.end8.i.PageDirty.exit_crit_edge:               ; preds = %do.end8.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %PageDirty.exit

if.then.i23.i:                                    ; preds = %do.end8.i
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i22.i = add i32 %24, -1
  br label %PageDirty.exit

PageDirty.exit:                                   ; preds = %if.then.i23.i, %do.end8.i.PageDirty.exit_crit_edge
  %retval.0.i25.i = phi i32 [ %sub.i22.i, %if.then.i23.i ], [ %17, %do.end8.i.PageDirty.exit_crit_edge ]
  %26 = inttoptr i32 %retval.0.i25.i to ptr
  %27 = ptrtoint ptr %26 to i32
  call void @__asan_load4_noabort(i32 %27)
  %28 = load volatile i32, ptr %26, align 4
  %29 = and i32 %28, 8
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %29)
  %tobool12.not = icmp eq i32 %29, 0
  br i1 %tobool12.not, label %PageDirty.exit.if.end14_crit_edge, label %if.then13

PageDirty.exit.if.end14_crit_edge:                ; preds = %PageDirty.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end14

if.then13:                                        ; preds = %PageDirty.exit
  %30 = ptrtoint ptr %bh.0 to i32
  call void @__asan_load4_noabort(i32 %30)
  %31 = load volatile i32, ptr %bh.0, align 4
  %32 = and i32 %31, 2
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %32)
  %tobool.not.i = icmp eq i32 %32, 0
  br i1 %tobool.not.i, label %if.then.i45, label %if.then13.if.end14_crit_edge

if.then13.if.end14_crit_edge:                     ; preds = %if.then13
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end14

if.then.i45:                                      ; preds = %if.then13
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @_set_bit(i32 noundef 1, ptr noundef %bh.0) #14
  br label %if.end14

if.end14:                                         ; preds = %if.then.i45, %if.then13.if.end14_crit_edge, %PageDirty.exit.if.end14_crit_edge
  %b_this_page = getelementptr inbounds %struct.buffer_head, ptr %bh.0, i32 0, i32 1
  %33 = ptrtoint ptr %b_this_page to i32
  call void @__asan_load4_noabort(i32 %33)
  %34 = load ptr, ptr %b_this_page, align 4
  %tobool15.not = icmp eq ptr %34, null
  br i1 %tobool15.not, label %if.then16, label %if.end14.if.end18_crit_edge

if.end14.if.end18_crit_edge:                      ; preds = %if.end14
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end18

if.then16:                                        ; preds = %if.end14
  call void @__sanitizer_cov_trace_pc() #16
  %35 = ptrtoint ptr %b_this_page to i32
  call void @__asan_store4_noabort(i32 %35)
  store ptr %head, ptr %b_this_page, align 4
  br label %if.end18

if.end18:                                         ; preds = %if.then16, %if.end14.if.end18_crit_edge
  %36 = ptrtoint ptr %b_this_page to i32
  call void @__asan_load4_noabort(i32 %36)
  %37 = load ptr, ptr %b_this_page, align 4
  %cmp.not = icmp eq ptr %37, %head
  br i1 %cmp.not, label %do.end21, label %if.end18.do.body10_crit_edge

if.end18.do.body10_crit_edge:                     ; preds = %if.end18
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.body10

do.end21:                                         ; preds = %if.end18
  call void @__sanitizer_cov_trace_pc() #16
  tail call fastcc void @attach_page_private(ptr noundef %page, ptr noundef %head)
  %38 = ptrtoint ptr %mapping to i32
  call void @__asan_load4_noabort(i32 %38)
  %39 = load ptr, ptr %mapping, align 4
  %private_lock23 = getelementptr inbounds %struct.address_space, ptr %39, i32 0, i32 12
  tail call void @_raw_spin_unlock(ptr noundef %private_lock23) #14
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @nobh_write_end(ptr nocapture readnone %file, ptr nocapture noundef readonly %mapping, i64 noundef %pos, i32 noundef %len, i32 noundef %copied, ptr noundef %page, ptr noundef %fsdata) #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %mapping1 = getelementptr inbounds %struct.page, ptr %page, i32 0, i32 1, i32 0, i32 1
  %0 = ptrtoint ptr %mapping1 to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %mapping1, align 4
  %2 = ptrtoint ptr %1 to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load ptr, ptr %1, align 4
  %cmp.not = icmp eq ptr %fsdata, null
  br i1 %cmp.not, label %entry.if.end19_crit_edge, label %land.rhs

entry.if.end19_crit_edge:                         ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end19

land.rhs:                                         ; preds = %entry
  %4 = ptrtoint ptr %page to i32
  call void @__asan_load4_noabort(i32 %4)
  %5 = load volatile i32, ptr %page, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %5)
  %cmp.i.not.i = icmp eq i32 %5, -1
  br i1 %cmp.i.not.i, label %if.then.i, label %PagePrivate.exit, !prof !262

if.then.i:                                        ; preds = %land.rhs
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %page, ptr noundef nonnull @.str.15) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 452, 0\0A.popsection", ""() #14, !srcloc !265
  unreachable

PagePrivate.exit:                                 ; preds = %land.rhs
  %6 = ptrtoint ptr %page to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load volatile i32, ptr %page, align 4
  %8 = and i32 %7, 8192
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %8)
  %tobool.not = icmp eq i32 %8, 0
  br i1 %tobool.not, label %do.end9, label %do.body4, !prof !254

do.body4:                                         ; preds = %PagePrivate.exit
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22fs/buffer.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 2726, 0\0A.popsection", ""() #14, !srcloc !369
  unreachable

do.end9:                                          ; preds = %PagePrivate.exit
  call void @__sanitizer_cov_trace_cmp4(i32 %copied, i32 %len)
  %cmp10.not = icmp ult i32 %copied, %len
  br i1 %cmp10.not, label %if.then18, label %do.end9.if.end19_crit_edge, !prof !370

do.end9.if.end19_crit_edge:                       ; preds = %do.end9
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end19

if.then18:                                        ; preds = %do.end9
  call void @__sanitizer_cov_trace_pc() #16
  tail call fastcc void @attach_nobh_buffers(ptr noundef %page, ptr noundef nonnull %fsdata)
  br label %if.end19

if.end19:                                         ; preds = %if.then18, %do.end9.if.end19_crit_edge, %entry.if.end19_crit_edge
  %9 = ptrtoint ptr %page to i32
  call void @__asan_load4_noabort(i32 %9)
  %10 = load volatile i32, ptr %page, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %10)
  %cmp.i.not.i58 = icmp eq i32 %10, -1
  br i1 %cmp.i.not.i58, label %if.then.i59, label %PagePrivate.exit62, !prof !262

if.then.i59:                                      ; preds = %if.end19
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %page, ptr noundef nonnull @.str.15) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 452, 0\0A.popsection", ""() #14, !srcloc !265
  unreachable

PagePrivate.exit62:                               ; preds = %if.end19
  %11 = ptrtoint ptr %page to i32
  call void @__asan_load4_noabort(i32 %11)
  %12 = load volatile i32, ptr %page, align 4
  %13 = and i32 %12, 8192
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %13)
  %tobool21.not = icmp eq i32 %13, 0
  br i1 %tobool21.not, label %if.end24, label %if.then22

if.then22:                                        ; preds = %PagePrivate.exit62
  call void @__sanitizer_cov_trace_pc() #16
  %call23 = tail call i32 @generic_write_end(ptr undef, ptr noundef %mapping, i64 noundef %pos, i32 noundef %len, i32 noundef %copied, ptr noundef %page, ptr undef)
  br label %cleanup

if.end24:                                         ; preds = %PagePrivate.exit62
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !348
  %14 = getelementptr inbounds %struct.page, ptr %page, i32 0, i32 1
  %15 = ptrtoint ptr %14 to i32
  call void @__asan_load4_noabort(i32 %15)
  %16 = load volatile i32, ptr %14, align 4
  %and.i.i.i.i = and i32 %16, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i.i.i)
  %tobool.not.i.i.i = icmp eq i32 %and.i.i.i.i, 0
  br i1 %tobool.not.i.i.i, label %SetPageUptodate.exit, label %if.then.i.i.i, !prof !254

if.then.i.i.i:                                    ; preds = %if.end24
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %page, ptr noundef nonnull @.str.24) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 260, 0\0A.popsection", ""() #14, !srcloc !292
  unreachable

SetPageUptodate.exit:                             ; preds = %if.end24
  tail call void @_set_bit(i32 noundef 2, ptr noundef %page) #14
  %call25 = tail call zeroext i1 @set_page_dirty(ptr noundef %page) #14
  %conv = zext i32 %copied to i64
  %add = add i64 %conv, %pos
  %i_size = getelementptr inbounds %struct.inode, ptr %3, i32 0, i32 14
  %17 = ptrtoint ptr %i_size to i32
  call void @__asan_load8_noabort(i32 %17)
  %18 = load i64, ptr %i_size, align 8
  call void @__sanitizer_cov_trace_cmp8(i64 %add, i64 %18)
  %cmp26 = icmp sgt i64 %add, %18
  br i1 %cmp26, label %if.then28, label %SetPageUptodate.exit.if.end31_crit_edge

SetPageUptodate.exit.if.end31_crit_edge:          ; preds = %SetPageUptodate.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end31

if.then28:                                        ; preds = %SetPageUptodate.exit
  call void @__sanitizer_cov_trace_pc() #16
  tail call fastcc void @i_size_write(ptr noundef %3, i64 noundef %add)
  tail call void @__mark_inode_dirty(ptr noundef %3, i32 noundef 7) #14
  br label %if.end31

if.end31:                                         ; preds = %if.then28, %SetPageUptodate.exit.if.end31_crit_edge
  tail call void @unlock_page(ptr noundef %page) #14
  %19 = ptrtoint ptr %14 to i32
  call void @__asan_load4_noabort(i32 %19)
  %20 = load volatile i32, ptr %14, align 4
  %and.i.i = and i32 %20, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i)
  %tobool.not.i.i = icmp eq i32 %and.i.i, 0
  br i1 %tobool.not.i.i, label %if.end.i.i, label %if.then.i.i, !prof !254

if.then.i.i:                                      ; preds = %if.end31
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i.i = add i32 %20, -1
  br label %_compound_head.exit.i

if.end.i.i:                                       ; preds = %if.end31
  call void @__sanitizer_cov_trace_pc() #16
  %21 = ptrtoint ptr %page to i32
  br label %_compound_head.exit.i

_compound_head.exit.i:                            ; preds = %if.end.i.i, %if.then.i.i
  %retval.0.i.i = phi i32 [ %sub.i.i, %if.then.i.i ], [ %21, %if.end.i.i ]
  %22 = inttoptr i32 %retval.0.i.i to ptr
  %_refcount.i.i.i.i.i = getelementptr inbounds %struct.page, ptr %22, i32 0, i32 3
  %call.i.i.i.i.i.i.i = tail call zeroext i1 @__kasan_check_read(ptr noundef %_refcount.i.i.i.i.i, i32 noundef 4) #14
  %23 = ptrtoint ptr %_refcount.i.i.i.i.i to i32
  call void @__asan_load4_noabort(i32 %23)
  %24 = load volatile i32, ptr %_refcount.i.i.i.i.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %24)
  %cmp.i.i.i.i = icmp eq i32 %24, 0
  br i1 %cmp.i.i.i.i, label %if.then.i.i.i.i, label %do.end5.i.i.i.i, !prof !262

if.then.i.i.i.i:                                  ; preds = %_compound_head.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %22, ptr noundef nonnull @.str.44) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/mm.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 717, 0\0A.popsection", ""() #14, !srcloc !308
  unreachable

do.end5.i.i.i.i:                                  ; preds = %_compound_head.exit.i
  %call.i.i.i10.i.i.i.i = tail call zeroext i1 @__kasan_check_write(ptr noundef %_refcount.i.i.i.i.i, i32 noundef 4) #14
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !309
  tail call void @llvm.prefetch.p0(ptr %_refcount.i.i.i.i.i, i32 1, i32 3, i32 1) #14
  %25 = tail call { i32, i32 } asm sideeffect "@ atomic_sub_return\0A1:\09ldrex\09$0, [$3]\0A\09sub\09$0, $0, $4\0A\09strex\09$1, $0, [$3]\0A\09teq\09$1, #0\0A\09bne\091b", "=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %_refcount.i.i.i.i.i, ptr %_refcount.i.i.i.i.i, i32 1, ptr elementtype(i32) %_refcount.i.i.i.i.i) #14, !srcloc !310
  %asmresult.i.i.i.i.i.i.i.i.i.i = extractvalue { i32, i32 } %25, 0
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !311
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %asmresult.i.i.i.i.i.i.i.i.i.i)
  %cmp.i.i.i.i.i.i.i = icmp eq i32 %asmresult.i.i.i.i.i.i.i.i.i.i, 0
  callbr void asm sideeffect "1:\0A\09nop\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr getelementptr inbounds (%struct.tracepoint, ptr @__tracepoint_page_ref_mod_and_test, i32 0, i32 1), ptr blockaddress(@nobh_write_end, %if.then.i.i.i.i.i)) #14
          to label %folio_put_testzero.exit.i.i [label %if.then.i.i.i.i.i], !srcloc !253

if.then.i.i.i.i.i:                                ; preds = %do.end5.i.i.i.i
  call void @__sanitizer_cov_trace_pc() #16
  %conv.i.i.i.i.i = zext i1 %cmp.i.i.i.i.i.i.i to i32
  tail call void @__page_ref_mod_and_test(ptr noundef %22, i32 noundef -1, i32 noundef %conv.i.i.i.i.i) #14
  br label %folio_put_testzero.exit.i.i

folio_put_testzero.exit.i.i:                      ; preds = %if.then.i.i.i.i.i, %do.end5.i.i.i.i
  br i1 %cmp.i.i.i.i.i.i.i, label %if.then.i4.i, label %folio_put_testzero.exit.i.i.put_page.exit_crit_edge

folio_put_testzero.exit.i.i.put_page.exit_crit_edge: ; preds = %folio_put_testzero.exit.i.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %put_page.exit

if.then.i4.i:                                     ; preds = %folio_put_testzero.exit.i.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @__put_page(ptr noundef %22) #14
  br label %put_page.exit

put_page.exit:                                    ; preds = %if.then.i4.i, %folio_put_testzero.exit.i.i.put_page.exit_crit_edge
  br i1 %cmp.not, label %put_page.exit.cleanup_crit_edge, label %put_page.exit.while.body_crit_edge

put_page.exit.while.body_crit_edge:               ; preds = %put_page.exit
  br label %while.body

put_page.exit.cleanup_crit_edge:                  ; preds = %put_page.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %cleanup

while.body:                                       ; preds = %while.body.while.body_crit_edge, %put_page.exit.while.body_crit_edge
  %head.067 = phi ptr [ %27, %while.body.while.body_crit_edge ], [ %fsdata, %put_page.exit.while.body_crit_edge ]
  %b_this_page = getelementptr inbounds %struct.buffer_head, ptr %head.067, i32 0, i32 1
  %26 = ptrtoint ptr %b_this_page to i32
  call void @__asan_load4_noabort(i32 %26)
  %27 = load ptr, ptr %b_this_page, align 4
  tail call void @free_buffer_head(ptr noundef nonnull %head.067)
  %tobool32.not = icmp eq ptr %27, null
  br i1 %tobool32.not, label %while.body.cleanup_crit_edge, label %while.body.while.body_crit_edge

while.body.while.body_crit_edge:                  ; preds = %while.body
  call void @__sanitizer_cov_trace_pc() #16
  br label %while.body

while.body.cleanup_crit_edge:                     ; preds = %while.body
  call void @__sanitizer_cov_trace_pc() #16
  br label %cleanup

cleanup:                                          ; preds = %while.body.cleanup_crit_edge, %put_page.exit.cleanup_crit_edge, %if.then22
  %retval.0 = phi i32 [ %call23, %if.then22 ], [ %copied, %put_page.exit.cleanup_crit_edge ], [ %copied, %while.body.cleanup_crit_edge ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @nobh_writepage(ptr noundef %page, ptr noundef %get_block, ptr noundef %wbc) #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %mapping = getelementptr inbounds %struct.page, ptr %page, i32 0, i32 1, i32 0, i32 1
  %0 = ptrtoint ptr %mapping to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %mapping, align 4
  %2 = ptrtoint ptr %1 to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load ptr, ptr %1, align 4
  %call = tail call fastcc i64 @i_size_read(ptr noundef %3)
  %4 = lshr i64 %call, 12
  %conv = trunc i64 %4 to i32
  %index = getelementptr inbounds %struct.page, ptr %page, i32 0, i32 1, i32 0, i32 2
  %5 = ptrtoint ptr %index to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load i32, ptr %index, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %6, i32 %conv)
  %cmp = icmp ult i32 %6, %conv
  br i1 %cmp, label %entry.out_crit_edge, label %if.end

entry.out_crit_edge:                              ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  br label %out

if.end:                                           ; preds = %entry
  %7 = trunc i64 %call to i32
  %conv2 = and i32 %7, 4095
  %add = add i32 %conv, 1
  call void @__sanitizer_cov_trace_cmp4(i32 %6, i32 %add)
  %cmp4.not = icmp uge i32 %6, %add
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %conv2)
  %tobool.not = icmp eq i32 %conv2, 0
  %or.cond = select i1 %cmp4.not, i1 true, i1 %tobool.not
  br i1 %or.cond, label %if.then6, label %if.end7

if.then6:                                         ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @unlock_page(ptr noundef %page) #14
  br label %cleanup

if.end7:                                          ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @zero_user_segments(ptr noundef %page, i32 noundef %conv2, i32 noundef 4096, i32 noundef 0, i32 noundef 0) #14
  br label %out

out:                                              ; preds = %if.end7, %entry.out_crit_edge
  %call8 = tail call i32 @mpage_writepage(ptr noundef %page, ptr noundef %get_block, ptr noundef %wbc) #14
  call void @__sanitizer_cov_trace_const_cmp4(i32 -11, i32 %call8)
  %cmp9 = icmp eq i32 %call8, -11
  br i1 %cmp9, label %if.then11, label %out.cleanup_crit_edge

out.cleanup_crit_edge:                            ; preds = %out
  call void @__sanitizer_cov_trace_pc() #16
  br label %cleanup

if.then11:                                        ; preds = %out
  call void @__sanitizer_cov_trace_pc() #16
  %call12 = tail call i32 @__block_write_full_page(ptr noundef %3, ptr noundef %page, ptr noundef %get_block, ptr noundef %wbc, ptr noundef nonnull @end_buffer_async_write)
  br label %cleanup

cleanup:                                          ; preds = %if.then11, %out.cleanup_crit_edge, %if.then6
  %retval.0 = phi i32 [ 0, %if.then6 ], [ %call12, %if.then11 ], [ %call8, %out.cleanup_crit_edge ]
  ret i32 %retval.0
}

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @mpage_writepage(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #1

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @nobh_truncate_page(ptr noundef %mapping, i64 noundef %from, ptr nocapture noundef readonly %get_block) #2 align 64 {
entry:
  %map_bh = alloca %struct.buffer_head, align 8
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = trunc i64 %from to i32
  %conv1 = and i32 %0, 4095
  %1 = ptrtoint ptr %mapping to i32
  call void @__asan_load4_noabort(i32 %1)
  %2 = load ptr, ptr %mapping, align 4
  call void @llvm.lifetime.start.p0(i64 104, ptr nonnull %map_bh) #14
  %3 = call ptr @memset(ptr %map_bh, i32 255, i32 104)
  %i_blkbits.i = getelementptr inbounds %struct.inode, ptr %2, i32 0, i32 20
  %4 = ptrtoint ptr %i_blkbits.i to i32
  call void @__asan_load1_noabort(i32 %4)
  %5 = load i8, ptr %i_blkbits.i, align 2
  %conv.i = zext i8 %5 to i32
  %shl.i = shl nuw i32 1, %conv.i
  %sub = add nuw i32 %shl.i, 4095
  %and2 = and i32 %sub, %conv1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and2)
  %tobool.not = icmp eq i32 %and2, 0
  br i1 %tobool.not, label %entry.cleanup_crit_edge, label %if.end

entry.cleanup_crit_edge:                          ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  br label %cleanup

if.end:                                           ; preds = %entry
  %6 = lshr i64 %from, 12
  %conv = trunc i64 %6 to i32
  %conv4 = and i64 %6, 4294967295
  %sub6 = sub nsw i32 12, %conv.i
  %sh_prom = zext i32 %sub6 to i64
  %shl = shl i64 %conv4, %sh_prom
  %gfp_mask.i.i = getelementptr inbounds %struct.address_space, ptr %mapping, i32 0, i32 3
  %7 = ptrtoint ptr %gfp_mask.i.i to i32
  call void @__asan_load4_noabort(i32 %7)
  %8 = load i32, ptr %gfp_mask.i.i, align 4
  %call.i.i = tail call ptr @pagecache_get_page(ptr noundef %mapping, i32 noundef %conv, i32 noundef 7, i32 noundef %8) #14
  %tobool8.not = icmp eq ptr %call.i.i, null
  br i1 %tobool8.not, label %if.end.cleanup_crit_edge, label %if.end10

if.end.cleanup_crit_edge:                         ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #16
  br label %cleanup

if.end10:                                         ; preds = %if.end
  %9 = ptrtoint ptr %call.i.i to i32
  call void @__asan_load4_noabort(i32 %9)
  %10 = load volatile i32, ptr %call.i.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %10)
  %cmp.i.not.i = icmp eq i32 %10, -1
  br i1 %cmp.i.not.i, label %if.then.i, label %PagePrivate.exit, !prof !262

if.then.i:                                        ; preds = %if.end10
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef nonnull %call.i.i, ptr noundef nonnull @.str.15) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 452, 0\0A.popsection", ""() #14, !srcloc !265
  unreachable

PagePrivate.exit:                                 ; preds = %if.end10
  %11 = ptrtoint ptr %call.i.i to i32
  call void @__asan_load4_noabort(i32 %11)
  %12 = load volatile i32, ptr %call.i.i, align 4
  %13 = and i32 %12, 8192
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %13)
  %tobool12.not = icmp eq i32 %13, 0
  br i1 %tobool12.not, label %while.cond.preheader, label %PagePrivate.exit.has_buffers_crit_edge

PagePrivate.exit.has_buffers_crit_edge:           ; preds = %PagePrivate.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %has_buffers

while.cond.preheader:                             ; preds = %PagePrivate.exit
  call void @__sanitizer_cov_trace_cmp4(i32 %conv1, i32 %shl.i)
  %cmp.not121 = icmp ult i32 %conv1, %shl.i
  br i1 %cmp.not121, label %while.cond.preheader.while.end_crit_edge, label %while.cond.preheader.while.body_crit_edge

while.cond.preheader.while.body_crit_edge:        ; preds = %while.cond.preheader
  br label %while.body

while.cond.preheader.while.end_crit_edge:         ; preds = %while.cond.preheader
  call void @__sanitizer_cov_trace_pc() #16
  br label %while.end

has_buffers:                                      ; preds = %PagePrivate.exit91.has_buffers_crit_edge, %PagePrivate.exit.has_buffers_crit_edge
  call void @unlock_page(ptr noundef nonnull %call.i.i) #14
  %14 = getelementptr inbounds %struct.page, ptr %call.i.i, i32 0, i32 1
  %15 = ptrtoint ptr %14 to i32
  call void @__asan_load4_noabort(i32 %15)
  %16 = load volatile i32, ptr %14, align 4
  %and.i.i = and i32 %16, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i)
  %tobool.not.i.i = icmp eq i32 %and.i.i, 0
  br i1 %tobool.not.i.i, label %if.end.i.i, label %if.then.i.i, !prof !254

if.then.i.i:                                      ; preds = %has_buffers
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i.i = add i32 %16, -1
  br label %_compound_head.exit.i

if.end.i.i:                                       ; preds = %has_buffers
  call void @__sanitizer_cov_trace_pc() #16
  %17 = ptrtoint ptr %call.i.i to i32
  br label %_compound_head.exit.i

_compound_head.exit.i:                            ; preds = %if.end.i.i, %if.then.i.i
  %retval.0.i.i = phi i32 [ %sub.i.i, %if.then.i.i ], [ %17, %if.end.i.i ]
  %18 = inttoptr i32 %retval.0.i.i to ptr
  %_refcount.i.i.i.i.i = getelementptr inbounds %struct.page, ptr %18, i32 0, i32 3
  %call.i.i.i.i.i.i.i = call zeroext i1 @__kasan_check_read(ptr noundef %_refcount.i.i.i.i.i, i32 noundef 4) #14
  %19 = ptrtoint ptr %_refcount.i.i.i.i.i to i32
  call void @__asan_load4_noabort(i32 %19)
  %20 = load volatile i32, ptr %_refcount.i.i.i.i.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %20)
  %cmp.i.i.i.i = icmp eq i32 %20, 0
  br i1 %cmp.i.i.i.i, label %if.then.i.i.i.i, label %do.end5.i.i.i.i, !prof !262

if.then.i.i.i.i:                                  ; preds = %_compound_head.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  call void @dump_page(ptr noundef %18, ptr noundef nonnull @.str.44) #14
  call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/mm.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 717, 0\0A.popsection", ""() #14, !srcloc !308
  unreachable

do.end5.i.i.i.i:                                  ; preds = %_compound_head.exit.i
  %call.i.i.i10.i.i.i.i = call zeroext i1 @__kasan_check_write(ptr noundef %_refcount.i.i.i.i.i, i32 noundef 4) #14
  call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !309
  call void @llvm.prefetch.p0(ptr %_refcount.i.i.i.i.i, i32 1, i32 3, i32 1) #14
  %21 = call { i32, i32 } asm sideeffect "@ atomic_sub_return\0A1:\09ldrex\09$0, [$3]\0A\09sub\09$0, $0, $4\0A\09strex\09$1, $0, [$3]\0A\09teq\09$1, #0\0A\09bne\091b", "=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %_refcount.i.i.i.i.i, ptr %_refcount.i.i.i.i.i, i32 1, ptr elementtype(i32) %_refcount.i.i.i.i.i) #14, !srcloc !310
  %asmresult.i.i.i.i.i.i.i.i.i.i = extractvalue { i32, i32 } %21, 0
  call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !311
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %asmresult.i.i.i.i.i.i.i.i.i.i)
  %cmp.i.i.i.i.i.i.i = icmp eq i32 %asmresult.i.i.i.i.i.i.i.i.i.i, 0
  callbr void asm sideeffect "1:\0A\09nop\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr getelementptr inbounds (%struct.tracepoint, ptr @__tracepoint_page_ref_mod_and_test, i32 0, i32 1), ptr blockaddress(@nobh_truncate_page, %if.then.i.i.i.i.i)) #14
          to label %folio_put_testzero.exit.i.i [label %if.then.i.i.i.i.i], !srcloc !253

if.then.i.i.i.i.i:                                ; preds = %do.end5.i.i.i.i
  call void @__sanitizer_cov_trace_pc() #16
  %conv.i.i.i.i.i = zext i1 %cmp.i.i.i.i.i.i.i to i32
  call void @__page_ref_mod_and_test(ptr noundef %18, i32 noundef -1, i32 noundef %conv.i.i.i.i.i) #14
  br label %folio_put_testzero.exit.i.i

folio_put_testzero.exit.i.i:                      ; preds = %if.then.i.i.i.i.i, %do.end5.i.i.i.i
  br i1 %cmp.i.i.i.i.i.i.i, label %if.then.i4.i, label %folio_put_testzero.exit.i.i.put_page.exit_crit_edge

folio_put_testzero.exit.i.i.put_page.exit_crit_edge: ; preds = %folio_put_testzero.exit.i.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %put_page.exit

if.then.i4.i:                                     ; preds = %folio_put_testzero.exit.i.i
  call void @__sanitizer_cov_trace_pc() #16
  call void @__put_page(ptr noundef %18) #14
  br label %put_page.exit

put_page.exit:                                    ; preds = %if.then.i4.i, %folio_put_testzero.exit.i.i.put_page.exit_crit_edge
  %call14 = call i32 @block_truncate_page(ptr noundef %mapping, i64 noundef %from, ptr noundef %get_block)
  br label %cleanup

while.body:                                       ; preds = %while.body.while.body_crit_edge, %while.cond.preheader.while.body_crit_edge
  %pos.0123 = phi i32 [ %add, %while.body.while.body_crit_edge ], [ %shl.i, %while.cond.preheader.while.body_crit_edge ]
  %iblock.0122 = phi i64 [ %inc, %while.body.while.body_crit_edge ], [ %shl, %while.cond.preheader.while.body_crit_edge ]
  %inc = add i64 %iblock.0122, 1
  %add = add i32 %pos.0123, %shl.i
  %cmp.not = icmp ult i32 %conv1, %add
  br i1 %cmp.not, label %while.body.while.end_crit_edge, label %while.body.while.body_crit_edge

while.body.while.body_crit_edge:                  ; preds = %while.body
  call void @__sanitizer_cov_trace_pc() #16
  br label %while.body

while.body.while.end_crit_edge:                   ; preds = %while.body
  call void @__sanitizer_cov_trace_pc() #16
  br label %while.end

while.end:                                        ; preds = %while.body.while.end_crit_edge, %while.cond.preheader.while.end_crit_edge
  %iblock.0.lcssa = phi i64 [ %shl, %while.cond.preheader.while.end_crit_edge ], [ %inc, %while.body.while.end_crit_edge ]
  %b_size = getelementptr inbounds %struct.buffer_head, ptr %map_bh, i32 0, i32 4
  %22 = ptrtoint ptr %b_size to i32
  call void @__asan_store4_noabort(i32 %22)
  store i32 %shl.i, ptr %b_size, align 8
  %23 = ptrtoint ptr %map_bh to i32
  call void @__asan_store4_noabort(i32 %23)
  store i32 0, ptr %map_bh, align 8
  %call17 = call i32 %get_block(ptr noundef %2, i64 noundef %iblock.0.lcssa, ptr noundef nonnull %map_bh, i32 noundef 0) #14
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call17)
  %tobool18.not = icmp eq i32 %call17, 0
  br i1 %tobool18.not, label %if.end20, label %while.end.unlock_crit_edge

while.end.unlock_crit_edge:                       ; preds = %while.end
  call void @__sanitizer_cov_trace_pc() #16
  br label %unlock

if.end20:                                         ; preds = %while.end
  %24 = ptrtoint ptr %map_bh to i32
  call void @__asan_load4_noabort(i32 %24)
  %25 = load volatile i32, ptr %map_bh, align 8
  %26 = and i32 %25, 16
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %26)
  %tobool22.not = icmp eq i32 %26, 0
  br i1 %tobool22.not, label %if.end20.unlock_crit_edge, label %if.end24

if.end20.unlock_crit_edge:                        ; preds = %if.end20
  call void @__sanitizer_cov_trace_pc() #16
  br label %unlock

if.end24:                                         ; preds = %if.end20
  %27 = getelementptr inbounds %struct.page, ptr %call.i.i, i32 0, i32 1
  %28 = ptrtoint ptr %27 to i32
  call void @__asan_load4_noabort(i32 %28)
  %29 = load volatile i32, ptr %27, align 4
  %and.i.i92 = and i32 %29, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i92)
  %tobool.not.i.i93 = icmp eq i32 %and.i.i92, 0
  br i1 %tobool.not.i.i93, label %if.end.i.i96, label %if.then.i.i95, !prof !254

if.then.i.i95:                                    ; preds = %if.end24
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i.i94 = add i32 %29, -1
  br label %_compound_head.exit.i98

if.end.i.i96:                                     ; preds = %if.end24
  call void @__sanitizer_cov_trace_pc() #16
  %30 = ptrtoint ptr %call.i.i to i32
  br label %_compound_head.exit.i98

_compound_head.exit.i98:                          ; preds = %if.end.i.i96, %if.then.i.i95
  %retval.0.i.i97 = phi i32 [ %sub.i.i94, %if.then.i.i95 ], [ %30, %if.end.i.i96 ]
  %31 = inttoptr i32 %retval.0.i.i97 to ptr
  %32 = getelementptr inbounds %struct.page, ptr %31, i32 0, i32 1
  %33 = ptrtoint ptr %32 to i32
  call void @__asan_load4_noabort(i32 %33)
  %34 = load volatile i32, ptr %32, align 4
  %and.i.i.i.i = and i32 %34, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i.i.i)
  %tobool.not.i.i.i = icmp eq i32 %and.i.i.i.i, 0
  br i1 %tobool.not.i.i.i, label %folio_flags.exit.i.i, label %if.then.i.i.i, !prof !254

if.then.i.i.i:                                    ; preds = %_compound_head.exit.i98
  call void @__sanitizer_cov_trace_pc() #16
  call void @dump_page(ptr noundef %31, ptr noundef nonnull @.str.24) #14
  call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 260, 0\0A.popsection", ""() #14, !srcloc !292
  unreachable

folio_flags.exit.i.i:                             ; preds = %_compound_head.exit.i98
  %35 = ptrtoint ptr %31 to i32
  call void @__asan_load4_noabort(i32 %35)
  %36 = load volatile i32, ptr %31, align 4
  %37 = and i32 %36, 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %37)
  %tobool.i.not.i = icmp eq i32 %37, 0
  br i1 %tobool.i.not.i, label %if.then27, label %PageUptodate.exit

PageUptodate.exit:                                ; preds = %folio_flags.exit.i.i
  call void @__sanitizer_cov_trace_pc() #16
  call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !322
  br label %if.end40

if.then27:                                        ; preds = %folio_flags.exit.i.i
  %a_ops = getelementptr inbounds %struct.address_space, ptr %mapping, i32 0, i32 9
  %38 = ptrtoint ptr %a_ops to i32
  call void @__asan_load4_noabort(i32 %38)
  %39 = load ptr, ptr %a_ops, align 4
  %readpage = getelementptr inbounds %struct.address_space_operations, ptr %39, i32 0, i32 1
  %40 = ptrtoint ptr %readpage to i32
  call void @__asan_load4_noabort(i32 %40)
  %41 = load ptr, ptr %readpage, align 4
  %call28 = call i32 %41(ptr noundef null, ptr noundef nonnull %call.i.i) #14
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call28)
  %tobool29.not = icmp eq i32 %call28, 0
  br i1 %tobool29.not, label %if.end31, label %if.then30

if.then30:                                        ; preds = %if.then27
  call void @__sanitizer_cov_trace_pc() #16
  call fastcc void @put_page(ptr noundef nonnull %call.i.i)
  br label %cleanup

if.end31:                                         ; preds = %if.then27
  call fastcc void @lock_page(ptr noundef nonnull %call.i.i)
  %call32 = call fastcc i32 @PageUptodate(ptr noundef nonnull %call.i.i)
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call32)
  %tobool33.not = icmp eq i32 %call32, 0
  br i1 %tobool33.not, label %if.end31.unlock_crit_edge, label %if.end35

if.end31.unlock_crit_edge:                        ; preds = %if.end31
  call void @__sanitizer_cov_trace_pc() #16
  br label %unlock

if.end35:                                         ; preds = %if.end31
  %42 = ptrtoint ptr %call.i.i to i32
  call void @__asan_load4_noabort(i32 %42)
  %43 = load volatile i32, ptr %call.i.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %43)
  %cmp.i.not.i87 = icmp eq i32 %43, -1
  br i1 %cmp.i.not.i87, label %if.then.i88, label %PagePrivate.exit91, !prof !262

if.then.i88:                                      ; preds = %if.end35
  call void @__sanitizer_cov_trace_pc() #16
  call void @dump_page(ptr noundef nonnull %call.i.i, ptr noundef nonnull @.str.15) #14
  call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 452, 0\0A.popsection", ""() #14, !srcloc !265
  unreachable

PagePrivate.exit91:                               ; preds = %if.end35
  %44 = ptrtoint ptr %call.i.i to i32
  call void @__asan_load4_noabort(i32 %44)
  %45 = load volatile i32, ptr %call.i.i, align 4
  %46 = and i32 %45, 8192
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %46)
  %tobool37.not = icmp eq i32 %46, 0
  br i1 %tobool37.not, label %PagePrivate.exit91.if.end40_crit_edge, label %PagePrivate.exit91.has_buffers_crit_edge

PagePrivate.exit91.has_buffers_crit_edge:         ; preds = %PagePrivate.exit91
  call void @__sanitizer_cov_trace_pc() #16
  br label %has_buffers

PagePrivate.exit91.if.end40_crit_edge:            ; preds = %PagePrivate.exit91
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end40

if.end40:                                         ; preds = %PagePrivate.exit91.if.end40_crit_edge, %PageUptodate.exit
  %sub3 = add nuw i32 %shl.i, %conv1
  %add.i = sub i32 %sub3, %and2
  call void @zero_user_segments(ptr noundef nonnull %call.i.i, i32 noundef %conv1, i32 noundef %add.i, i32 noundef 0, i32 noundef 0) #14
  %call41 = call zeroext i1 @set_page_dirty(ptr noundef nonnull %call.i.i) #14
  br label %unlock

unlock:                                           ; preds = %if.end40, %if.end31.unlock_crit_edge, %if.end20.unlock_crit_edge, %while.end.unlock_crit_edge
  %err.0 = phi i32 [ %call17, %while.end.unlock_crit_edge ], [ 0, %if.end40 ], [ 0, %if.end20.unlock_crit_edge ], [ -5, %if.end31.unlock_crit_edge ]
  call void @unlock_page(ptr noundef nonnull %call.i.i) #14
  %47 = getelementptr inbounds %struct.page, ptr %call.i.i, i32 0, i32 1
  %48 = ptrtoint ptr %47 to i32
  call void @__asan_load4_noabort(i32 %48)
  %49 = load volatile i32, ptr %47, align 4
  %and.i.i99 = and i32 %49, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i99)
  %tobool.not.i.i100 = icmp eq i32 %and.i.i99, 0
  br i1 %tobool.not.i.i100, label %if.end.i.i103, label %if.then.i.i102, !prof !254

if.then.i.i102:                                   ; preds = %unlock
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i.i101 = add i32 %49, -1
  br label %_compound_head.exit.i108

if.end.i.i103:                                    ; preds = %unlock
  call void @__sanitizer_cov_trace_pc() #16
  %50 = ptrtoint ptr %call.i.i to i32
  br label %_compound_head.exit.i108

_compound_head.exit.i108:                         ; preds = %if.end.i.i103, %if.then.i.i102
  %retval.0.i.i104 = phi i32 [ %sub.i.i101, %if.then.i.i102 ], [ %50, %if.end.i.i103 ]
  %51 = inttoptr i32 %retval.0.i.i104 to ptr
  %_refcount.i.i.i.i.i105 = getelementptr inbounds %struct.page, ptr %51, i32 0, i32 3
  %call.i.i.i.i.i.i.i106 = call zeroext i1 @__kasan_check_read(ptr noundef %_refcount.i.i.i.i.i105, i32 noundef 4) #14
  %52 = ptrtoint ptr %_refcount.i.i.i.i.i105 to i32
  call void @__asan_load4_noabort(i32 %52)
  %53 = load volatile i32, ptr %_refcount.i.i.i.i.i105, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %53)
  %cmp.i.i.i.i107 = icmp eq i32 %53, 0
  br i1 %cmp.i.i.i.i107, label %if.then.i.i.i.i109, label %do.end5.i.i.i.i113, !prof !262

if.then.i.i.i.i109:                               ; preds = %_compound_head.exit.i108
  call void @__sanitizer_cov_trace_pc() #16
  call void @dump_page(ptr noundef %51, ptr noundef nonnull @.str.44) #14
  call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/mm.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 717, 0\0A.popsection", ""() #14, !srcloc !308
  unreachable

do.end5.i.i.i.i113:                               ; preds = %_compound_head.exit.i108
  %call.i.i.i10.i.i.i.i110 = call zeroext i1 @__kasan_check_write(ptr noundef %_refcount.i.i.i.i.i105, i32 noundef 4) #14
  call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !309
  call void @llvm.prefetch.p0(ptr %_refcount.i.i.i.i.i105, i32 1, i32 3, i32 1) #14
  %54 = call { i32, i32 } asm sideeffect "@ atomic_sub_return\0A1:\09ldrex\09$0, [$3]\0A\09sub\09$0, $0, $4\0A\09strex\09$1, $0, [$3]\0A\09teq\09$1, #0\0A\09bne\091b", "=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %_refcount.i.i.i.i.i105, ptr %_refcount.i.i.i.i.i105, i32 1, ptr elementtype(i32) %_refcount.i.i.i.i.i105) #14, !srcloc !310
  %asmresult.i.i.i.i.i.i.i.i.i.i111 = extractvalue { i32, i32 } %54, 0
  call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !311
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %asmresult.i.i.i.i.i.i.i.i.i.i111)
  %cmp.i.i.i.i.i.i.i112 = icmp eq i32 %asmresult.i.i.i.i.i.i.i.i.i.i111, 0
  callbr void asm sideeffect "1:\0A\09nop\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr getelementptr inbounds (%struct.tracepoint, ptr @__tracepoint_page_ref_mod_and_test, i32 0, i32 1), ptr blockaddress(@nobh_truncate_page, %if.then.i.i.i.i.i115)) #14
          to label %folio_put_testzero.exit.i.i116 [label %if.then.i.i.i.i.i115], !srcloc !253

if.then.i.i.i.i.i115:                             ; preds = %do.end5.i.i.i.i113
  call void @__sanitizer_cov_trace_pc() #16
  %conv.i.i.i.i.i114 = zext i1 %cmp.i.i.i.i.i.i.i112 to i32
  call void @__page_ref_mod_and_test(ptr noundef %51, i32 noundef -1, i32 noundef %conv.i.i.i.i.i114) #14
  br label %folio_put_testzero.exit.i.i116

folio_put_testzero.exit.i.i116:                   ; preds = %if.then.i.i.i.i.i115, %do.end5.i.i.i.i113
  br i1 %cmp.i.i.i.i.i.i.i112, label %if.then.i4.i117, label %folio_put_testzero.exit.i.i116.cleanup_crit_edge

folio_put_testzero.exit.i.i116.cleanup_crit_edge: ; preds = %folio_put_testzero.exit.i.i116
  call void @__sanitizer_cov_trace_pc() #16
  br label %cleanup

if.then.i4.i117:                                  ; preds = %folio_put_testzero.exit.i.i116
  call void @__sanitizer_cov_trace_pc() #16
  call void @__put_page(ptr noundef %51) #14
  br label %cleanup

cleanup:                                          ; preds = %if.then.i4.i117, %folio_put_testzero.exit.i.i116.cleanup_crit_edge, %if.then30, %put_page.exit, %if.end.cleanup_crit_edge, %entry.cleanup_crit_edge
  %retval.0 = phi i32 [ %call14, %put_page.exit ], [ 0, %entry.cleanup_crit_edge ], [ %call28, %if.then30 ], [ -12, %if.end.cleanup_crit_edge ], [ %err.0, %folio_put_testzero.exit.i.i116.cleanup_crit_edge ], [ %err.0, %if.then.i4.i117 ]
  call void @llvm.lifetime.end.p0(i64 104, ptr nonnull %map_bh) #14
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @block_truncate_page(ptr noundef %mapping, i64 noundef %from, ptr nocapture noundef readonly %get_block) #2 align 64 {
entry:
  %bh = alloca ptr, align 4
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = trunc i64 %from to i32
  %conv1 = and i32 %0, 4095
  %1 = ptrtoint ptr %mapping to i32
  call void @__asan_load4_noabort(i32 %1)
  %2 = load ptr, ptr %mapping, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %bh) #14
  %i_blkbits.i = getelementptr inbounds %struct.inode, ptr %2, i32 0, i32 20
  %3 = ptrtoint ptr %i_blkbits.i to i32
  call void @__asan_load1_noabort(i32 %3)
  %4 = load i8, ptr %i_blkbits.i, align 2
  %conv.i = zext i8 %4 to i32
  %shl.i = shl nuw i32 1, %conv.i
  %sub = add nuw i32 %shl.i, 4095
  %and2 = and i32 %sub, %conv1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and2)
  %tobool.not = icmp eq i32 %and2, 0
  br i1 %tobool.not, label %entry.cleanup_crit_edge, label %if.end

entry.cleanup_crit_edge:                          ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  br label %cleanup

if.end:                                           ; preds = %entry
  %5 = lshr i64 %from, 12
  %conv = trunc i64 %5 to i32
  %conv4 = and i64 %5, 4294967295
  %sub6 = sub nsw i32 12, %conv.i
  %sh_prom = zext i32 %sub6 to i64
  %shl = shl i64 %conv4, %sh_prom
  %gfp_mask.i.i = getelementptr inbounds %struct.address_space, ptr %mapping, i32 0, i32 3
  %6 = ptrtoint ptr %gfp_mask.i.i to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load i32, ptr %gfp_mask.i.i, align 4
  %call.i.i = tail call ptr @pagecache_get_page(ptr noundef %mapping, i32 noundef %conv, i32 noundef 7, i32 noundef %7) #14
  %tobool8.not = icmp eq ptr %call.i.i, null
  br i1 %tobool8.not, label %if.end.cleanup_crit_edge, label %if.end10

if.end.cleanup_crit_edge:                         ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #16
  br label %cleanup

if.end10:                                         ; preds = %if.end
  %8 = ptrtoint ptr %call.i.i to i32
  call void @__asan_load4_noabort(i32 %8)
  %9 = load volatile i32, ptr %call.i.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %9)
  %cmp.i.not.i = icmp eq i32 %9, -1
  br i1 %cmp.i.not.i, label %if.then.i, label %PagePrivate.exit, !prof !262

if.then.i:                                        ; preds = %if.end10
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef nonnull %call.i.i, ptr noundef nonnull @.str.15) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 452, 0\0A.popsection", ""() #14, !srcloc !265
  unreachable

PagePrivate.exit:                                 ; preds = %if.end10
  %10 = ptrtoint ptr %call.i.i to i32
  call void @__asan_load4_noabort(i32 %10)
  %11 = load volatile i32, ptr %call.i.i, align 4
  %12 = and i32 %11, 8192
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %12)
  %tobool12.not = icmp eq i32 %12, 0
  br i1 %tobool12.not, label %if.then13, label %PagePrivate.exit.do.body_crit_edge

PagePrivate.exit.do.body_crit_edge:               ; preds = %PagePrivate.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.body

if.then13:                                        ; preds = %PagePrivate.exit
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @create_empty_buffers(ptr noundef nonnull %call.i.i, i32 noundef %shl.i, i32 noundef 0)
  br label %do.body

do.body:                                          ; preds = %if.then13, %PagePrivate.exit.do.body_crit_edge
  %13 = ptrtoint ptr %call.i.i to i32
  call void @__asan_load4_noabort(i32 %13)
  %14 = load volatile i32, ptr %call.i.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %14)
  %cmp.i.not.i124 = icmp eq i32 %14, -1
  br i1 %cmp.i.not.i124, label %if.then.i125, label %PagePrivate.exit128, !prof !262

if.then.i125:                                     ; preds = %do.body
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef nonnull %call.i.i, ptr noundef nonnull @.str.15) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 452, 0\0A.popsection", ""() #14, !srcloc !265
  unreachable

PagePrivate.exit128:                              ; preds = %do.body
  %15 = ptrtoint ptr %call.i.i to i32
  call void @__asan_load4_noabort(i32 %15)
  %16 = load volatile i32, ptr %call.i.i, align 4
  %17 = and i32 %16, 8192
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %17)
  %tobool16.not = icmp eq i32 %17, 0
  br i1 %tobool16.not, label %do.body21, label %do.end27, !prof !262

do.body21:                                        ; preds = %PagePrivate.exit128
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22fs/buffer.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 2906, 0\0A.popsection", ""() #14, !srcloc !371
  unreachable

do.end27:                                         ; preds = %PagePrivate.exit128
  %private = getelementptr inbounds %struct.page, ptr %call.i.i, i32 0, i32 1, i32 0, i32 3
  %18 = ptrtoint ptr %private to i32
  call void @__asan_load4_noabort(i32 %18)
  %19 = load i32, ptr %private, align 4
  %20 = inttoptr i32 %19 to ptr
  call void @__sanitizer_cov_trace_cmp4(i32 %conv1, i32 %shl.i)
  %cmp.not153 = icmp ult i32 %conv1, %shl.i
  br i1 %cmp.not153, label %do.end27.while.end_crit_edge, label %do.end27.while.body_crit_edge

do.end27.while.body_crit_edge:                    ; preds = %do.end27
  br label %while.body

do.end27.while.end_crit_edge:                     ; preds = %do.end27
  call void @__sanitizer_cov_trace_pc() #16
  br label %while.end

while.body:                                       ; preds = %while.body.while.body_crit_edge, %do.end27.while.body_crit_edge
  %pos.0155 = phi i32 [ %add, %while.body.while.body_crit_edge ], [ %shl.i, %do.end27.while.body_crit_edge ]
  %iblock.0154 = phi i64 [ %inc, %while.body.while.body_crit_edge ], [ %shl, %do.end27.while.body_crit_edge ]
  %21 = phi ptr [ %23, %while.body.while.body_crit_edge ], [ %20, %do.end27.while.body_crit_edge ]
  %b_this_page = getelementptr inbounds %struct.buffer_head, ptr %21, i32 0, i32 1
  %22 = ptrtoint ptr %b_this_page to i32
  call void @__asan_load4_noabort(i32 %22)
  %23 = load ptr, ptr %b_this_page, align 4
  %inc = add i64 %iblock.0154, 1
  %add = add i32 %pos.0155, %shl.i
  %cmp.not = icmp ult i32 %conv1, %add
  br i1 %cmp.not, label %while.body.while.end_crit_edge, label %while.body.while.body_crit_edge

while.body.while.body_crit_edge:                  ; preds = %while.body
  call void @__sanitizer_cov_trace_pc() #16
  br label %while.body

while.body.while.end_crit_edge:                   ; preds = %while.body
  call void @__sanitizer_cov_trace_pc() #16
  br label %while.end

while.end:                                        ; preds = %while.body.while.end_crit_edge, %do.end27.while.end_crit_edge
  %.lcssa = phi ptr [ %20, %do.end27.while.end_crit_edge ], [ %23, %while.body.while.end_crit_edge ]
  %iblock.0.lcssa = phi i64 [ %shl, %do.end27.while.end_crit_edge ], [ %inc, %while.body.while.end_crit_edge ]
  %24 = ptrtoint ptr %bh to i32
  call void @__asan_store4_noabort(i32 %24)
  store ptr %.lcssa, ptr %bh, align 4
  %25 = ptrtoint ptr %.lcssa to i32
  call void @__asan_load4_noabort(i32 %25)
  %26 = load volatile i32, ptr %.lcssa, align 4
  %27 = and i32 %26, 16
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %27)
  %tobool30.not = icmp eq i32 %27, 0
  br i1 %tobool30.not, label %if.then31, label %while.end.if.end71_crit_edge

while.end.if.end71_crit_edge:                     ; preds = %while.end
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end71

if.then31:                                        ; preds = %while.end
  %b_size = getelementptr inbounds %struct.buffer_head, ptr %.lcssa, i32 0, i32 4
  %28 = ptrtoint ptr %b_size to i32
  call void @__asan_load4_noabort(i32 %28)
  %29 = load i32, ptr %b_size, align 8
  call void @__sanitizer_cov_trace_cmp4(i32 %29, i32 %shl.i)
  %cmp32.not = icmp eq i32 %29, %shl.i
  br i1 %cmp32.not, label %if.then31.if.end55_crit_edge, label %do.end49, !prof !254

if.then31.if.end55_crit_edge:                     ; preds = %if.then31
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end55

do.end49:                                         ; preds = %if.then31
  call void @__sanitizer_cov_trace_pc() #16
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.4, i32 noundef 2916, i32 noundef 9, ptr noundef null) #14
  br label %if.end55

if.end55:                                         ; preds = %do.end49, %if.then31.if.end55_crit_edge
  %call63 = tail call i32 %get_block(ptr noundef %2, i64 noundef %iblock.0.lcssa, ptr noundef %.lcssa, i32 noundef 0) #14
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call63)
  %tobool64.not = icmp eq i32 %call63, 0
  br i1 %tobool64.not, label %if.end66, label %if.end55.unlock_crit_edge

if.end55.unlock_crit_edge:                        ; preds = %if.end55
  call void @__sanitizer_cov_trace_pc() #16
  br label %unlock

if.end66:                                         ; preds = %if.end55
  %30 = ptrtoint ptr %.lcssa to i32
  call void @__asan_load4_noabort(i32 %30)
  %31 = load volatile i32, ptr %.lcssa, align 4
  %32 = and i32 %31, 16
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %32)
  %tobool68.not = icmp eq i32 %32, 0
  br i1 %tobool68.not, label %if.end66.unlock_crit_edge, label %if.end66.if.end71_crit_edge

if.end66.if.end71_crit_edge:                      ; preds = %if.end66
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end71

if.end66.unlock_crit_edge:                        ; preds = %if.end66
  call void @__sanitizer_cov_trace_pc() #16
  br label %unlock

if.end71:                                         ; preds = %if.end66.if.end71_crit_edge, %while.end.if.end71_crit_edge
  %33 = getelementptr inbounds %struct.page, ptr %call.i.i, i32 0, i32 1
  %34 = ptrtoint ptr %33 to i32
  call void @__asan_load4_noabort(i32 %34)
  %35 = load volatile i32, ptr %33, align 4
  %and.i.i = and i32 %35, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i)
  %tobool.not.i.i = icmp eq i32 %and.i.i, 0
  br i1 %tobool.not.i.i, label %if.end.i.i, label %if.then.i.i, !prof !254

if.then.i.i:                                      ; preds = %if.end71
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i.i = add i32 %35, -1
  br label %_compound_head.exit.i

if.end.i.i:                                       ; preds = %if.end71
  call void @__sanitizer_cov_trace_pc() #16
  %36 = ptrtoint ptr %call.i.i to i32
  br label %_compound_head.exit.i

_compound_head.exit.i:                            ; preds = %if.end.i.i, %if.then.i.i
  %retval.0.i.i = phi i32 [ %sub.i.i, %if.then.i.i ], [ %36, %if.end.i.i ]
  %37 = inttoptr i32 %retval.0.i.i to ptr
  %38 = getelementptr inbounds %struct.page, ptr %37, i32 0, i32 1
  %39 = ptrtoint ptr %38 to i32
  call void @__asan_load4_noabort(i32 %39)
  %40 = load volatile i32, ptr %38, align 4
  %and.i.i.i.i = and i32 %40, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i.i.i)
  %tobool.not.i.i.i = icmp eq i32 %and.i.i.i.i, 0
  br i1 %tobool.not.i.i.i, label %folio_flags.exit.i.i, label %if.then.i.i.i, !prof !254

if.then.i.i.i:                                    ; preds = %_compound_head.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %37, ptr noundef nonnull @.str.24) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 260, 0\0A.popsection", ""() #14, !srcloc !292
  unreachable

folio_flags.exit.i.i:                             ; preds = %_compound_head.exit.i
  %41 = ptrtoint ptr %37 to i32
  call void @__asan_load4_noabort(i32 %41)
  %42 = load volatile i32, ptr %37, align 4
  %43 = and i32 %42, 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %43)
  %tobool.i.not.i = icmp eq i32 %43, 0
  br i1 %tobool.i.not.i, label %folio_flags.exit.i.i.if.end75_crit_edge, label %PageUptodate.exit

folio_flags.exit.i.i.if.end75_crit_edge:          ; preds = %folio_flags.exit.i.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end75

PageUptodate.exit:                                ; preds = %folio_flags.exit.i.i
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !322
  %44 = ptrtoint ptr %.lcssa to i32
  call void @__asan_load4_noabort(i32 %44)
  %45 = load volatile i32, ptr %.lcssa, align 4
  %and1.i.i133 = and i32 %45, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and1.i.i133)
  %tobool.not.i = icmp eq i32 %and1.i.i133, 0
  br i1 %tobool.not.i, label %if.then.i134, label %PageUptodate.exit.if.end75_crit_edge

PageUptodate.exit.if.end75_crit_edge:             ; preds = %PageUptodate.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end75

if.then.i134:                                     ; preds = %PageUptodate.exit
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @_set_bit(i32 noundef 0, ptr noundef %.lcssa) #14
  br label %if.end75

if.end75:                                         ; preds = %if.then.i134, %PageUptodate.exit.if.end75_crit_edge, %folio_flags.exit.i.i.if.end75_crit_edge
  %46 = ptrtoint ptr %.lcssa to i32
  call void @__asan_load4_noabort(i32 %46)
  %47 = load volatile i32, ptr %.lcssa, align 4
  %and1.i.i135 = and i32 %47, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and1.i.i135)
  %tobool77.not = icmp eq i32 %and1.i.i135, 0
  br i1 %tobool77.not, label %land.lhs.true, label %if.end75.if.end88_crit_edge

if.end75.if.end88_crit_edge:                      ; preds = %if.end75
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end88

land.lhs.true:                                    ; preds = %if.end75
  %48 = ptrtoint ptr %.lcssa to i32
  call void @__asan_load4_noabort(i32 %48)
  %49 = load volatile i32, ptr %.lcssa, align 4
  %50 = and i32 %49, 256
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %50)
  %tobool79.not = icmp eq i32 %50, 0
  br i1 %tobool79.not, label %land.lhs.true80, label %land.lhs.true.if.end88_crit_edge

land.lhs.true.if.end88_crit_edge:                 ; preds = %land.lhs.true
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end88

land.lhs.true80:                                  ; preds = %land.lhs.true
  %51 = ptrtoint ptr %.lcssa to i32
  call void @__asan_load4_noabort(i32 %51)
  %52 = load volatile i32, ptr %.lcssa, align 4
  %53 = and i32 %52, 2048
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %53)
  %tobool82.not = icmp eq i32 %53, 0
  br i1 %tobool82.not, label %if.then83, label %land.lhs.true80.if.end88_crit_edge

land.lhs.true80.if.end88_crit_edge:               ; preds = %land.lhs.true80
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end88

if.then83:                                        ; preds = %land.lhs.true80
  call void @ll_rw_block(i32 noundef 0, i32 noundef 0, i32 noundef 1, ptr noundef nonnull %bh)
  tail call void @__might_sleep(ptr noundef nonnull @.str.43, i32 noundef 354) #14
  %54 = ptrtoint ptr %.lcssa to i32
  call void @__asan_load4_noabort(i32 %54)
  %55 = load volatile i32, ptr %.lcssa, align 4
  %56 = and i32 %55, 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %56)
  %tobool.not.i141 = icmp eq i32 %56, 0
  br i1 %tobool.not.i141, label %if.then83.wait_on_buffer.exit_crit_edge, label %if.then.i143

if.then83.wait_on_buffer.exit_crit_edge:          ; preds = %if.then83
  call void @__sanitizer_cov_trace_pc() #16
  br label %wait_on_buffer.exit

if.then.i143:                                     ; preds = %if.then83
  tail call void @__might_sleep(ptr noundef nonnull @.str.13, i32 noundef 98) #14
  %57 = ptrtoint ptr %.lcssa to i32
  call void @__asan_load4_noabort(i32 %57)
  %58 = load volatile i32, ptr %.lcssa, align 4
  %59 = and i32 %58, 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %59)
  %tobool.not.i.i.i142 = icmp eq i32 %59, 0
  br i1 %tobool.not.i.i.i142, label %if.then.i143.wait_on_buffer.exit_crit_edge, label %if.end.i.i.i

if.then.i143.wait_on_buffer.exit_crit_edge:       ; preds = %if.then.i143
  call void @__sanitizer_cov_trace_pc() #16
  br label %wait_on_buffer.exit

if.end.i.i.i:                                     ; preds = %if.then.i143
  call void @__sanitizer_cov_trace_pc() #16
  %call3.i.i.i = tail call i32 @out_of_line_wait_on_bit(ptr noundef %.lcssa, i32 noundef 2, ptr noundef nonnull @bit_wait_io, i32 noundef 2) #14
  br label %wait_on_buffer.exit

wait_on_buffer.exit:                              ; preds = %if.end.i.i.i, %if.then.i143.wait_on_buffer.exit_crit_edge, %if.then83.wait_on_buffer.exit_crit_edge
  %60 = ptrtoint ptr %.lcssa to i32
  call void @__asan_load4_noabort(i32 %60)
  %61 = load volatile i32, ptr %.lcssa, align 4
  %and1.i.i140 = and i32 %61, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and1.i.i140)
  %tobool85.not = icmp eq i32 %and1.i.i140, 0
  br i1 %tobool85.not, label %wait_on_buffer.exit.unlock_crit_edge, label %wait_on_buffer.exit.if.end88_crit_edge

wait_on_buffer.exit.if.end88_crit_edge:           ; preds = %wait_on_buffer.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end88

wait_on_buffer.exit.unlock_crit_edge:             ; preds = %wait_on_buffer.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %unlock

if.end88:                                         ; preds = %wait_on_buffer.exit.if.end88_crit_edge, %land.lhs.true80.if.end88_crit_edge, %land.lhs.true.if.end88_crit_edge, %if.end75.if.end88_crit_edge
  %sub3 = add nuw i32 %shl.i, %conv1
  %add.i = sub i32 %sub3, %and2
  tail call void @zero_user_segments(ptr noundef nonnull %call.i.i, i32 noundef %conv1, i32 noundef %add.i, i32 noundef 0, i32 noundef 0) #14
  tail call void @mark_buffer_dirty(ptr noundef %.lcssa)
  br label %unlock

unlock:                                           ; preds = %if.end88, %wait_on_buffer.exit.unlock_crit_edge, %if.end66.unlock_crit_edge, %if.end55.unlock_crit_edge
  %err.0 = phi i32 [ 0, %if.end88 ], [ -5, %wait_on_buffer.exit.unlock_crit_edge ], [ %call63, %if.end55.unlock_crit_edge ], [ 0, %if.end66.unlock_crit_edge ]
  tail call void @unlock_page(ptr noundef nonnull %call.i.i) #14
  %62 = getelementptr inbounds %struct.page, ptr %call.i.i, i32 0, i32 1
  %63 = ptrtoint ptr %62 to i32
  call void @__asan_load4_noabort(i32 %63)
  %64 = load volatile i32, ptr %62, align 4
  %and.i.i144 = and i32 %64, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i144)
  %tobool.not.i.i145 = icmp eq i32 %and.i.i144, 0
  br i1 %tobool.not.i.i145, label %if.end.i.i148, label %if.then.i.i147, !prof !254

if.then.i.i147:                                   ; preds = %unlock
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i.i146 = add i32 %64, -1
  br label %_compound_head.exit.i150

if.end.i.i148:                                    ; preds = %unlock
  call void @__sanitizer_cov_trace_pc() #16
  %65 = ptrtoint ptr %call.i.i to i32
  br label %_compound_head.exit.i150

_compound_head.exit.i150:                         ; preds = %if.end.i.i148, %if.then.i.i147
  %retval.0.i.i149 = phi i32 [ %sub.i.i146, %if.then.i.i147 ], [ %65, %if.end.i.i148 ]
  %66 = inttoptr i32 %retval.0.i.i149 to ptr
  %_refcount.i.i.i.i.i = getelementptr inbounds %struct.page, ptr %66, i32 0, i32 3
  %call.i.i.i.i.i.i.i = tail call zeroext i1 @__kasan_check_read(ptr noundef %_refcount.i.i.i.i.i, i32 noundef 4) #14
  %67 = ptrtoint ptr %_refcount.i.i.i.i.i to i32
  call void @__asan_load4_noabort(i32 %67)
  %68 = load volatile i32, ptr %_refcount.i.i.i.i.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %68)
  %cmp.i.i.i.i = icmp eq i32 %68, 0
  br i1 %cmp.i.i.i.i, label %if.then.i.i.i.i, label %do.end5.i.i.i.i, !prof !262

if.then.i.i.i.i:                                  ; preds = %_compound_head.exit.i150
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %66, ptr noundef nonnull @.str.44) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/mm.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 717, 0\0A.popsection", ""() #14, !srcloc !308
  unreachable

do.end5.i.i.i.i:                                  ; preds = %_compound_head.exit.i150
  %call.i.i.i10.i.i.i.i = tail call zeroext i1 @__kasan_check_write(ptr noundef %_refcount.i.i.i.i.i, i32 noundef 4) #14
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !309
  tail call void @llvm.prefetch.p0(ptr %_refcount.i.i.i.i.i, i32 1, i32 3, i32 1) #14
  %69 = tail call { i32, i32 } asm sideeffect "@ atomic_sub_return\0A1:\09ldrex\09$0, [$3]\0A\09sub\09$0, $0, $4\0A\09strex\09$1, $0, [$3]\0A\09teq\09$1, #0\0A\09bne\091b", "=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %_refcount.i.i.i.i.i, ptr %_refcount.i.i.i.i.i, i32 1, ptr elementtype(i32) %_refcount.i.i.i.i.i) #14, !srcloc !310
  %asmresult.i.i.i.i.i.i.i.i.i.i = extractvalue { i32, i32 } %69, 0
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !311
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %asmresult.i.i.i.i.i.i.i.i.i.i)
  %cmp.i.i.i.i.i.i.i = icmp eq i32 %asmresult.i.i.i.i.i.i.i.i.i.i, 0
  callbr void asm sideeffect "1:\0A\09nop\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr getelementptr inbounds (%struct.tracepoint, ptr @__tracepoint_page_ref_mod_and_test, i32 0, i32 1), ptr blockaddress(@block_truncate_page, %if.then.i.i.i.i.i)) #14
          to label %folio_put_testzero.exit.i.i [label %if.then.i.i.i.i.i], !srcloc !253

if.then.i.i.i.i.i:                                ; preds = %do.end5.i.i.i.i
  call void @__sanitizer_cov_trace_pc() #16
  %conv.i.i.i.i.i = zext i1 %cmp.i.i.i.i.i.i.i to i32
  tail call void @__page_ref_mod_and_test(ptr noundef %66, i32 noundef -1, i32 noundef %conv.i.i.i.i.i) #14
  br label %folio_put_testzero.exit.i.i

folio_put_testzero.exit.i.i:                      ; preds = %if.then.i.i.i.i.i, %do.end5.i.i.i.i
  br i1 %cmp.i.i.i.i.i.i.i, label %if.then.i4.i, label %folio_put_testzero.exit.i.i.cleanup_crit_edge

folio_put_testzero.exit.i.i.cleanup_crit_edge:    ; preds = %folio_put_testzero.exit.i.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %cleanup

if.then.i4.i:                                     ; preds = %folio_put_testzero.exit.i.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @__put_page(ptr noundef %66) #14
  br label %cleanup

cleanup:                                          ; preds = %if.then.i4.i, %folio_put_testzero.exit.i.i.cleanup_crit_edge, %if.end.cleanup_crit_edge, %entry.cleanup_crit_edge
  %retval.0 = phi i32 [ 0, %entry.cleanup_crit_edge ], [ -12, %if.end.cleanup_crit_edge ], [ %err.0, %folio_put_testzero.exit.i.i.cleanup_crit_edge ], [ %err.0, %if.then.i4.i ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %bh) #14
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @block_write_full_page(ptr noundef %page, ptr nocapture noundef readonly %get_block, ptr noundef %wbc) #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %mapping = getelementptr inbounds %struct.page, ptr %page, i32 0, i32 1, i32 0, i32 1
  %0 = ptrtoint ptr %mapping to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %mapping, align 4
  %2 = ptrtoint ptr %1 to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load ptr, ptr %1, align 4
  %call = tail call fastcc i64 @i_size_read(ptr noundef %3)
  %4 = lshr i64 %call, 12
  %conv = trunc i64 %4 to i32
  %index = getelementptr inbounds %struct.page, ptr %page, i32 0, i32 1, i32 0, i32 2
  %5 = ptrtoint ptr %index to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load i32, ptr %index, align 4
  call void @__sanitizer_cov_trace_cmp4(i32 %6, i32 %conv)
  %cmp = icmp ult i32 %6, %conv
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  %call2 = tail call i32 @__block_write_full_page(ptr noundef %3, ptr noundef %page, ptr noundef %get_block, ptr noundef %wbc, ptr noundef nonnull @end_buffer_async_write)
  br label %cleanup

if.end:                                           ; preds = %entry
  %7 = trunc i64 %call to i32
  %conv3 = and i32 %7, 4095
  %add = add i32 %conv, 1
  call void @__sanitizer_cov_trace_cmp4(i32 %6, i32 %add)
  %cmp5.not = icmp uge i32 %6, %add
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %conv3)
  %tobool.not = icmp eq i32 %conv3, 0
  %or.cond = select i1 %cmp5.not, i1 true, i1 %tobool.not
  br i1 %or.cond, label %if.then7, label %if.end8

if.then7:                                         ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @unlock_page(ptr noundef %page) #14
  br label %cleanup

if.end8:                                          ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @zero_user_segments(ptr noundef %page, i32 noundef %conv3, i32 noundef 4096, i32 noundef 0, i32 noundef 0) #14
  %call9 = tail call i32 @__block_write_full_page(ptr noundef %3, ptr noundef %page, ptr noundef %get_block, ptr noundef %wbc, ptr noundef nonnull @end_buffer_async_write)
  br label %cleanup

cleanup:                                          ; preds = %if.end8, %if.then7, %if.then
  %retval.0 = phi i32 [ %call2, %if.then ], [ 0, %if.then7 ], [ %call9, %if.end8 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i64 @generic_block_bmap(ptr nocapture noundef readonly %mapping, i64 noundef %block, ptr nocapture noundef readonly %get_block) #2 align 64 {
entry:
  %tmp = alloca %struct.buffer_head, align 8
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = ptrtoint ptr %mapping to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %mapping, align 4
  call void @llvm.lifetime.start.p0(i64 104, ptr nonnull %tmp) #14
  %2 = call ptr @memset(ptr %tmp, i32 0, i32 104)
  %b_size = getelementptr inbounds %struct.buffer_head, ptr %tmp, i32 0, i32 4
  %i_blkbits.i = getelementptr inbounds %struct.inode, ptr %1, i32 0, i32 20
  %3 = ptrtoint ptr %i_blkbits.i to i32
  call void @__asan_load1_noabort(i32 %3)
  %4 = load i8, ptr %i_blkbits.i, align 2
  %conv.i = zext i8 %4 to i32
  %shl.i = shl nuw i32 1, %conv.i
  %5 = ptrtoint ptr %b_size to i32
  call void @__asan_store4_noabort(i32 %5)
  store i32 %shl.i, ptr %b_size, align 8
  %call1 = call i32 %get_block(ptr noundef %1, i64 noundef %block, ptr noundef nonnull %tmp, i32 noundef 0) #14
  %b_blocknr = getelementptr inbounds %struct.buffer_head, ptr %tmp, i32 0, i32 3
  %6 = ptrtoint ptr %b_blocknr to i32
  call void @__asan_load8_noabort(i32 %6)
  %7 = load i64, ptr %b_blocknr, align 8
  call void @llvm.lifetime.end.p0(i64 104, ptr nonnull %tmp) #14
  ret i64 %7
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local void @write_dirty_buffer(ptr noundef %bh, i32 noundef %op_flags) #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  tail call void @__might_sleep(ptr noundef nonnull @.str.43, i32 noundef 366) #14
  %call.i.i.i.i = tail call zeroext i1 @__kasan_check_write(ptr noundef %bh, i32 noundef 4) #14
  %0 = ptrtoint ptr %bh to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load volatile i32, ptr %bh, align 4
  %and.i.i.i.i = and i32 %1, 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i.i.i)
  %tobool.not.i.i.i.i = icmp eq i32 %and.i.i.i.i, 0
  br i1 %tobool.not.i.i.i.i, label %trylock_buffer.exit.i, label %entry.if.then.i_crit_edge

entry.if.then.i_crit_edge:                        ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.then.i

trylock_buffer.exit.i:                            ; preds = %entry
  tail call void @llvm.prefetch.p0(ptr %bh, i32 1, i32 3, i32 1) #14
  %2 = tail call { i32, i32, i32 } asm sideeffect "@ atomic_fetch_or\0A1:\09ldrex\09$0, [$4]\0A\09orr\09$1, $0, $5\0A\09strex\09$2, $1, [$4]\0A\09teq\09$2, #0\0A\09bne\091b", "=&r,=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %bh, ptr %bh, i32 4, ptr elementtype(i32) %bh) #14, !srcloc !284
  %asmresult.i.i.i.i.i.i.i = extractvalue { i32, i32, i32 } %2, 0
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !285
  %3 = and i32 %asmresult.i.i.i.i.i.i.i, 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %3)
  %tobool.not.not.i = icmp eq i32 %3, 0
  br i1 %tobool.not.not.i, label %trylock_buffer.exit.i.lock_buffer.exit_crit_edge, label %trylock_buffer.exit.i.if.then.i_crit_edge

trylock_buffer.exit.i.if.then.i_crit_edge:        ; preds = %trylock_buffer.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.then.i

trylock_buffer.exit.i.lock_buffer.exit_crit_edge: ; preds = %trylock_buffer.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %lock_buffer.exit

if.then.i:                                        ; preds = %trylock_buffer.exit.i.if.then.i_crit_edge, %entry.if.then.i_crit_edge
  tail call void @__might_sleep(ptr noundef nonnull @.str.13, i32 noundef 205) #14
  %call.i.i.i = tail call i32 @_test_and_set_bit(i32 noundef 2, ptr noundef %bh) #14
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call.i.i.i)
  %tobool.not.i.i.i = icmp eq i32 %call.i.i.i, 0
  br i1 %tobool.not.i.i.i, label %if.then.i.lock_buffer.exit_crit_edge, label %if.end.i.i.i

if.then.i.lock_buffer.exit_crit_edge:             ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %lock_buffer.exit

if.end.i.i.i:                                     ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #16
  %call3.i.i.i = tail call i32 @out_of_line_wait_on_bit_lock(ptr noundef %bh, i32 noundef 2, ptr noundef nonnull @bit_wait_io, i32 noundef 2) #14
  br label %lock_buffer.exit

lock_buffer.exit:                                 ; preds = %if.end.i.i.i, %if.then.i.lock_buffer.exit_crit_edge, %trylock_buffer.exit.i.lock_buffer.exit_crit_edge
  %call.i = tail call i32 @_test_and_clear_bit(i32 noundef 1, ptr noundef %bh) #14
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call.i)
  %tobool.not = icmp eq i32 %call.i, 0
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %lock_buffer.exit
  call void @__sanitizer_cov_trace_pc() #16
  %call.i.i.i7 = tail call zeroext i1 @__kasan_check_write(ptr noundef %bh, i32 noundef 4) #14
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !259
  tail call void @llvm.prefetch.p0(ptr %bh, i32 1, i32 3, i32 1) #14
  %4 = tail call { i32, i32, i32 } asm sideeffect "@ atomic_fetch_andnot\0A1:\09ldrex\09$0, [$4]\0A\09bic\09$1, $0, $5\0A\09strex\09$2, $1, [$4]\0A\09teq\09$2, #0\0A\09bne\091b", "=&r,=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %bh, ptr %bh, i32 4, ptr elementtype(i32) %bh) #14, !srcloc !260
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !261
  tail call void @wake_up_bit(ptr noundef %bh, i32 noundef 2) #14
  br label %return

if.end:                                           ; preds = %lock_buffer.exit
  call void @__sanitizer_cov_trace_pc() #16
  %b_end_io = getelementptr inbounds %struct.buffer_head, ptr %bh, i32 0, i32 7
  %5 = ptrtoint ptr %b_end_io to i32
  call void @__asan_store4_noabort(i32 %5)
  store ptr @end_buffer_write_sync, ptr %b_end_io, align 4
  %b_count.i = getelementptr inbounds %struct.buffer_head, ptr %bh, i32 0, i32 11
  %call.i.i.i8 = tail call zeroext i1 @__kasan_check_write(ptr noundef %b_count.i, i32 noundef 4) #14
  tail call void @llvm.prefetch.p0(ptr %b_count.i, i32 1, i32 3, i32 1) #14
  %6 = tail call { i32, i32 } asm sideeffect "@ atomic_add\0A1:\09ldrex\09$0, [$3]\0A\09add\09$0, $0, $4\0A\09strex\09$1, $0, [$3]\0A\09teq\09$1, #0\0A\09bne\091b", "=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %b_count.i, ptr %b_count.i, i32 1, ptr elementtype(i32) %b_count.i) #14, !srcloc !278
  tail call fastcc void @submit_bh_wbc(i32 noundef 1, i32 noundef %op_flags, ptr noundef %bh, i32 noundef 0, ptr noundef null) #14
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @__sync_dirty_buffer(ptr noundef %bh, i32 noundef %op_flags) #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %b_count = getelementptr inbounds %struct.buffer_head, ptr %bh, i32 0, i32 11
  %call.i.i = tail call zeroext i1 @__kasan_check_read(ptr noundef %b_count, i32 noundef 4) #14
  %0 = ptrtoint ptr %b_count to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load volatile i32, ptr %b_count, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 1, i32 %1)
  %cmp = icmp slt i32 %1, 1
  br i1 %cmp, label %do.end, label %entry.if.end_crit_edge, !prof !262

entry.if.end_crit_edge:                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end

do.end:                                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.4, i32 noundef 3142, i32 noundef 9, ptr noundef null) #14
  br label %if.end

if.end:                                           ; preds = %do.end, %entry.if.end_crit_edge
  tail call void @__might_sleep(ptr noundef nonnull @.str.43, i32 noundef 366) #14
  %call.i.i.i.i = tail call zeroext i1 @__kasan_check_write(ptr noundef %bh, i32 noundef 4) #14
  %2 = ptrtoint ptr %bh to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load volatile i32, ptr %bh, align 4
  %and.i.i.i.i = and i32 %3, 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i.i.i)
  %tobool.not.i.i.i.i = icmp eq i32 %and.i.i.i.i, 0
  br i1 %tobool.not.i.i.i.i, label %trylock_buffer.exit.i, label %if.end.if.then.i_crit_edge

if.end.if.then.i_crit_edge:                       ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.then.i

trylock_buffer.exit.i:                            ; preds = %if.end
  tail call void @llvm.prefetch.p0(ptr %bh, i32 1, i32 3, i32 1) #14
  %4 = tail call { i32, i32, i32 } asm sideeffect "@ atomic_fetch_or\0A1:\09ldrex\09$0, [$4]\0A\09orr\09$1, $0, $5\0A\09strex\09$2, $1, [$4]\0A\09teq\09$2, #0\0A\09bne\091b", "=&r,=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %bh, ptr %bh, i32 4, ptr elementtype(i32) %bh) #14, !srcloc !284
  %asmresult.i.i.i.i.i.i.i = extractvalue { i32, i32, i32 } %4, 0
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !285
  %5 = and i32 %asmresult.i.i.i.i.i.i.i, 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %5)
  %tobool.not.not.i = icmp eq i32 %5, 0
  br i1 %tobool.not.not.i, label %trylock_buffer.exit.i.lock_buffer.exit_crit_edge, label %trylock_buffer.exit.i.if.then.i_crit_edge

trylock_buffer.exit.i.if.then.i_crit_edge:        ; preds = %trylock_buffer.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.then.i

trylock_buffer.exit.i.lock_buffer.exit_crit_edge: ; preds = %trylock_buffer.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %lock_buffer.exit

if.then.i:                                        ; preds = %trylock_buffer.exit.i.if.then.i_crit_edge, %if.end.if.then.i_crit_edge
  tail call void @__might_sleep(ptr noundef nonnull @.str.13, i32 noundef 205) #14
  %call.i.i.i = tail call i32 @_test_and_set_bit(i32 noundef 2, ptr noundef %bh) #14
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call.i.i.i)
  %tobool.not.i.i.i = icmp eq i32 %call.i.i.i, 0
  br i1 %tobool.not.i.i.i, label %if.then.i.lock_buffer.exit_crit_edge, label %if.end.i.i.i

if.then.i.lock_buffer.exit_crit_edge:             ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %lock_buffer.exit

if.end.i.i.i:                                     ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #16
  %call3.i.i.i = tail call i32 @out_of_line_wait_on_bit_lock(ptr noundef %bh, i32 noundef 2, ptr noundef nonnull @bit_wait_io, i32 noundef 2) #14
  br label %lock_buffer.exit

lock_buffer.exit:                                 ; preds = %if.end.i.i.i, %if.then.i.lock_buffer.exit_crit_edge, %trylock_buffer.exit.i.lock_buffer.exit_crit_edge
  %call.i = tail call i32 @_test_and_clear_bit(i32 noundef 1, ptr noundef %bh) #14
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call.i)
  %tobool20.not = icmp eq i32 %call.i, 0
  br i1 %tobool20.not, label %if.else, label %if.then21

if.then21:                                        ; preds = %lock_buffer.exit
  %6 = ptrtoint ptr %bh to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load volatile i32, ptr %bh, align 4
  %8 = and i32 %7, 16
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %8)
  %tobool23.not = icmp eq i32 %8, 0
  br i1 %tobool23.not, label %if.then24, label %if.end25

if.then24:                                        ; preds = %if.then21
  call void @__sanitizer_cov_trace_pc() #16
  %call.i.i.i46 = tail call zeroext i1 @__kasan_check_write(ptr noundef %bh, i32 noundef 4) #14
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !259
  tail call void @llvm.prefetch.p0(ptr %bh, i32 1, i32 3, i32 1) #14
  %9 = tail call { i32, i32, i32 } asm sideeffect "@ atomic_fetch_andnot\0A1:\09ldrex\09$0, [$4]\0A\09bic\09$1, $0, $5\0A\09strex\09$2, $1, [$4]\0A\09teq\09$2, #0\0A\09bne\091b", "=&r,=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %bh, ptr %bh, i32 4, ptr elementtype(i32) %bh) #14, !srcloc !260
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !261
  tail call void @wake_up_bit(ptr noundef %bh, i32 noundef 2) #14
  br label %cleanup

if.end25:                                         ; preds = %if.then21
  %call.i.i.i47 = tail call zeroext i1 @__kasan_check_write(ptr noundef %b_count, i32 noundef 4) #14
  tail call void @llvm.prefetch.p0(ptr %b_count, i32 1, i32 3, i32 1) #14
  %10 = tail call { i32, i32 } asm sideeffect "@ atomic_add\0A1:\09ldrex\09$0, [$3]\0A\09add\09$0, $0, $4\0A\09strex\09$1, $0, [$3]\0A\09teq\09$1, #0\0A\09bne\091b", "=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %b_count, ptr %b_count, i32 1, ptr elementtype(i32) %b_count) #14, !srcloc !278
  %b_end_io = getelementptr inbounds %struct.buffer_head, ptr %bh, i32 0, i32 7
  %11 = ptrtoint ptr %b_end_io to i32
  call void @__asan_store4_noabort(i32 %11)
  store ptr @end_buffer_write_sync, ptr %b_end_io, align 4
  tail call fastcc void @submit_bh_wbc(i32 noundef 1, i32 noundef %op_flags, ptr noundef %bh, i32 noundef 0, ptr noundef null) #14
  tail call void @__might_sleep(ptr noundef nonnull @.str.43, i32 noundef 354) #14
  %12 = ptrtoint ptr %bh to i32
  call void @__asan_load4_noabort(i32 %12)
  %13 = load volatile i32, ptr %bh, align 4
  %14 = and i32 %13, 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %14)
  %tobool.not.i = icmp eq i32 %14, 0
  br i1 %tobool.not.i, label %if.end25.wait_on_buffer.exit_crit_edge, label %if.then.i49

if.end25.wait_on_buffer.exit_crit_edge:           ; preds = %if.end25
  call void @__sanitizer_cov_trace_pc() #16
  br label %wait_on_buffer.exit

if.then.i49:                                      ; preds = %if.end25
  tail call void @__might_sleep(ptr noundef nonnull @.str.13, i32 noundef 98) #14
  %15 = ptrtoint ptr %bh to i32
  call void @__asan_load4_noabort(i32 %15)
  %16 = load volatile i32, ptr %bh, align 4
  %17 = and i32 %16, 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %17)
  %tobool.not.i.i.i48 = icmp eq i32 %17, 0
  br i1 %tobool.not.i.i.i48, label %if.then.i49.wait_on_buffer.exit_crit_edge, label %if.end.i.i.i51

if.then.i49.wait_on_buffer.exit_crit_edge:        ; preds = %if.then.i49
  call void @__sanitizer_cov_trace_pc() #16
  br label %wait_on_buffer.exit

if.end.i.i.i51:                                   ; preds = %if.then.i49
  call void @__sanitizer_cov_trace_pc() #16
  %call3.i.i.i50 = tail call i32 @out_of_line_wait_on_bit(ptr noundef %bh, i32 noundef 2, ptr noundef nonnull @bit_wait_io, i32 noundef 2) #14
  br label %wait_on_buffer.exit

wait_on_buffer.exit:                              ; preds = %if.end.i.i.i51, %if.then.i49.wait_on_buffer.exit_crit_edge, %if.end25.wait_on_buffer.exit_crit_edge
  %18 = ptrtoint ptr %bh to i32
  call void @__asan_load4_noabort(i32 %18)
  %19 = load volatile i32, ptr %bh, align 4
  %and1.i.i45 = and i32 %19, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and1.i.i45)
  %tobool29.not = icmp eq i32 %and1.i.i45, 0
  %spec.select = select i1 %tobool29.not, i32 -5, i32 0
  br label %cleanup

if.else:                                          ; preds = %lock_buffer.exit
  call void @__sanitizer_cov_trace_pc() #16
  %call.i.i.i52 = tail call zeroext i1 @__kasan_check_write(ptr noundef %bh, i32 noundef 4) #14
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !259
  tail call void @llvm.prefetch.p0(ptr %bh, i32 1, i32 3, i32 1) #14
  %20 = tail call { i32, i32, i32 } asm sideeffect "@ atomic_fetch_andnot\0A1:\09ldrex\09$0, [$4]\0A\09bic\09$1, $0, $5\0A\09strex\09$2, $1, [$4]\0A\09teq\09$2, #0\0A\09bne\091b", "=&r,=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %bh, ptr %bh, i32 4, ptr elementtype(i32) %bh) #14, !srcloc !260
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !261
  tail call void @wake_up_bit(ptr noundef %bh, i32 noundef 2) #14
  br label %cleanup

cleanup:                                          ; preds = %if.else, %wait_on_buffer.exit, %if.then24
  %retval.0 = phi i32 [ -5, %if.then24 ], [ 0, %if.else ], [ %spec.select, %wait_on_buffer.exit ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @sync_dirty_buffer(ptr noundef %bh) #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %call = tail call i32 @__sync_dirty_buffer(ptr noundef %bh, i32 noundef 2048)
  ret i32 %call
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @try_to_free_buffers(ptr noundef %page) #2 align 64 {
entry:
  %buffers_to_free = alloca ptr, align 4
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %mapping1 = getelementptr inbounds %struct.page, ptr %page, i32 0, i32 1, i32 0, i32 1
  %0 = ptrtoint ptr %mapping1 to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %mapping1, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %buffers_to_free) #14
  %2 = ptrtoint ptr %buffers_to_free to i32
  call void @__asan_store4_noabort(i32 %2)
  store ptr null, ptr %buffers_to_free, align 4
  %3 = getelementptr inbounds %struct.page, ptr %page, i32 0, i32 1
  %4 = ptrtoint ptr %3 to i32
  call void @__asan_load4_noabort(i32 %4)
  %5 = load volatile i32, ptr %3, align 4
  %and.i.i = and i32 %5, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i)
  %tobool.not.i.i = icmp eq i32 %and.i.i, 0
  br i1 %tobool.not.i.i, label %if.end.i.i, label %if.then.i.i, !prof !254

if.then.i.i:                                      ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i.i = add i32 %5, -1
  br label %_compound_head.exit.i

if.end.i.i:                                       ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  %6 = ptrtoint ptr %page to i32
  br label %_compound_head.exit.i

_compound_head.exit.i:                            ; preds = %if.end.i.i, %if.then.i.i
  %retval.0.i.i = phi i32 [ %sub.i.i, %if.then.i.i ], [ %6, %if.end.i.i ]
  %7 = inttoptr i32 %retval.0.i.i to ptr
  %8 = ptrtoint ptr %7 to i32
  call void @__asan_load4_noabort(i32 %8)
  %9 = load volatile i32, ptr %7, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %9)
  %cmp.i.not.i = icmp eq i32 %9, -1
  %10 = ptrtoint ptr %3 to i32
  call void @__asan_load4_noabort(i32 %10)
  %11 = load volatile i32, ptr %3, align 4
  %and.i16.i = and i32 %11, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i16.i)
  %tobool.not.i17.i = icmp eq i32 %and.i16.i, 0
  br i1 %cmp.i.not.i, label %if.then.i, label %do.end10.i, !prof !262

if.then.i:                                        ; preds = %_compound_head.exit.i
  br i1 %tobool.not.i17.i, label %if.end.i20.i, label %if.then.i19.i, !prof !254

if.then.i19.i:                                    ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i18.i = add i32 %11, -1
  br label %_compound_head.exit22.i

if.end.i20.i:                                     ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #16
  %12 = ptrtoint ptr %page to i32
  br label %_compound_head.exit22.i

_compound_head.exit22.i:                          ; preds = %if.end.i20.i, %if.then.i19.i
  %retval.0.i21.i = phi i32 [ %sub.i18.i, %if.then.i19.i ], [ %12, %if.end.i20.i ]
  %13 = inttoptr i32 %retval.0.i21.i to ptr
  tail call void @dump_page(ptr noundef %13, ptr noundef nonnull @.str.14) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 414, 0\0A.popsection", ""() #14, !srcloc !263
  unreachable

do.end10.i:                                       ; preds = %_compound_head.exit.i
  br i1 %tobool.not.i17.i, label %if.end.i27.i, label %if.then.i26.i, !prof !254

if.then.i26.i:                                    ; preds = %do.end10.i
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i25.i = add i32 %11, -1
  br label %PageLocked.exit

if.end.i27.i:                                     ; preds = %do.end10.i
  call void @__sanitizer_cov_trace_pc() #16
  %14 = ptrtoint ptr %page to i32
  br label %PageLocked.exit

PageLocked.exit:                                  ; preds = %if.end.i27.i, %if.then.i26.i
  %retval.0.i28.i = phi i32 [ %sub.i25.i, %if.then.i26.i ], [ %14, %if.end.i27.i ]
  %15 = inttoptr i32 %retval.0.i28.i to ptr
  %16 = ptrtoint ptr %15 to i32
  call void @__asan_load4_noabort(i32 %16)
  %17 = load volatile i32, ptr %15, align 4
  %and1.i.i = and i32 %17, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and1.i.i)
  %tobool.not = icmp eq i32 %and1.i.i, 0
  br i1 %tobool.not, label %do.body5, label %do.end10, !prof !262

do.body5:                                         ; preds = %PageLocked.exit
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22fs/buffer.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 3232, 0\0A.popsection", ""() #14, !srcloc !372
  unreachable

do.end10:                                         ; preds = %PageLocked.exit
  %18 = ptrtoint ptr %3 to i32
  call void @__asan_load4_noabort(i32 %18)
  %19 = load volatile i32, ptr %3, align 4
  %and.i.i43 = and i32 %19, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i43)
  %tobool.not.i.i44 = icmp eq i32 %and.i.i43, 0
  br i1 %tobool.not.i.i44, label %if.end.i.i47, label %if.then.i.i46, !prof !254

if.then.i.i46:                                    ; preds = %do.end10
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i.i45 = add i32 %19, -1
  br label %_compound_head.exit.i52

if.end.i.i47:                                     ; preds = %do.end10
  call void @__sanitizer_cov_trace_pc() #16
  %20 = ptrtoint ptr %page to i32
  br label %_compound_head.exit.i52

_compound_head.exit.i52:                          ; preds = %if.end.i.i47, %if.then.i.i46
  %retval.0.i.i48 = phi i32 [ %sub.i.i45, %if.then.i.i46 ], [ %20, %if.end.i.i47 ]
  %21 = inttoptr i32 %retval.0.i.i48 to ptr
  %22 = ptrtoint ptr %21 to i32
  call void @__asan_load4_noabort(i32 %22)
  %23 = load volatile i32, ptr %21, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %23)
  %cmp.i.not.i49 = icmp eq i32 %23, -1
  %24 = ptrtoint ptr %3 to i32
  call void @__asan_load4_noabort(i32 %24)
  %25 = load volatile i32, ptr %3, align 4
  %and.i16.i50 = and i32 %25, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i16.i50)
  %tobool.not.i17.i51 = icmp eq i32 %and.i16.i50, 0
  br i1 %cmp.i.not.i49, label %if.then.i53, label %do.end10.i59, !prof !262

if.then.i53:                                      ; preds = %_compound_head.exit.i52
  br i1 %tobool.not.i17.i51, label %if.end.i20.i56, label %if.then.i19.i55, !prof !254

if.then.i19.i55:                                  ; preds = %if.then.i53
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i18.i54 = add i32 %25, -1
  br label %_compound_head.exit22.i58

if.end.i20.i56:                                   ; preds = %if.then.i53
  call void @__sanitizer_cov_trace_pc() #16
  %26 = ptrtoint ptr %page to i32
  br label %_compound_head.exit22.i58

_compound_head.exit22.i58:                        ; preds = %if.end.i20.i56, %if.then.i19.i55
  %retval.0.i21.i57 = phi i32 [ %sub.i18.i54, %if.then.i19.i55 ], [ %26, %if.end.i20.i56 ]
  %27 = inttoptr i32 %retval.0.i21.i57 to ptr
  tail call void @dump_page(ptr noundef %27, ptr noundef nonnull @.str.14) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 461, 0\0A.popsection", ""() #14, !srcloc !266
  unreachable

do.end10.i59:                                     ; preds = %_compound_head.exit.i52
  br i1 %tobool.not.i17.i51, label %if.end.i27.i62, label %if.then.i26.i61, !prof !254

if.then.i26.i61:                                  ; preds = %do.end10.i59
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i25.i60 = add i32 %25, -1
  br label %PageWriteback.exit

if.end.i27.i62:                                   ; preds = %do.end10.i59
  call void @__sanitizer_cov_trace_pc() #16
  %28 = ptrtoint ptr %page to i32
  br label %PageWriteback.exit

PageWriteback.exit:                               ; preds = %if.end.i27.i62, %if.then.i26.i61
  %retval.0.i28.i63 = phi i32 [ %sub.i25.i60, %if.then.i26.i61 ], [ %28, %if.end.i27.i62 ]
  %29 = inttoptr i32 %retval.0.i28.i63 to ptr
  %30 = ptrtoint ptr %29 to i32
  call void @__asan_load4_noabort(i32 %30)
  %31 = load volatile i32, ptr %29, align 4
  %32 = and i32 %31, 32768
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %32)
  %tobool12.not = icmp eq i32 %32, 0
  br i1 %tobool12.not, label %if.end14, label %PageWriteback.exit.cleanup_crit_edge

PageWriteback.exit.cleanup_crit_edge:             ; preds = %PageWriteback.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %cleanup

if.end14:                                         ; preds = %PageWriteback.exit
  %cmp = icmp eq ptr %1, null
  br i1 %cmp, label %if.then15, label %if.end17

if.then15:                                        ; preds = %if.end14
  call void @__sanitizer_cov_trace_pc() #16
  %call16 = call fastcc i32 @drop_buffers(ptr noundef %page, ptr noundef nonnull %buffers_to_free)
  br label %out

if.end17:                                         ; preds = %if.end14
  %private_lock = getelementptr inbounds %struct.address_space, ptr %1, i32 0, i32 12
  tail call void @_raw_spin_lock(ptr noundef %private_lock) #14
  %call18 = call fastcc i32 @drop_buffers(ptr noundef %page, ptr noundef nonnull %buffers_to_free)
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call18)
  %tobool19.not = icmp eq i32 %call18, 0
  br i1 %tobool19.not, label %if.end17.if.end21_crit_edge, label %if.then20

if.end17.if.end21_crit_edge:                      ; preds = %if.end17
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end21

if.then20:                                        ; preds = %if.end17
  %33 = ptrtoint ptr %3 to i32
  call void @__asan_load4_noabort(i32 %33)
  %34 = load volatile i32, ptr %3, align 4
  %and.i.i65 = and i32 %34, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i65)
  %tobool.not.i.i66 = icmp eq i32 %and.i.i65, 0
  br i1 %tobool.not.i.i66, label %if.end.i.i69, label %if.then.i.i68, !prof !254

if.then.i.i68:                                    ; preds = %if.then20
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i.i67 = add i32 %34, -1
  br label %_compound_head.exit.i71

if.end.i.i69:                                     ; preds = %if.then20
  call void @__sanitizer_cov_trace_pc() #16
  %35 = ptrtoint ptr %page to i32
  br label %_compound_head.exit.i71

_compound_head.exit.i71:                          ; preds = %if.end.i.i69, %if.then.i.i68
  %retval.0.i.i70 = phi i32 [ %sub.i.i67, %if.then.i.i68 ], [ %35, %if.end.i.i69 ]
  %36 = inttoptr i32 %retval.0.i.i70 to ptr
  %37 = getelementptr inbounds %struct.page, ptr %36, i32 0, i32 1
  %38 = ptrtoint ptr %37 to i32
  call void @__asan_load4_noabort(i32 %38)
  %39 = load volatile i32, ptr %37, align 4
  %and.i.i.i.i.i = and i32 %39, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i.i.i.i)
  %tobool.not.i.i.i.i = icmp eq i32 %and.i.i.i.i.i, 0
  br i1 %tobool.not.i.i.i.i, label %folio_test_dirty.exit.i.i, label %if.then.i.i.i.i, !prof !254

if.then.i.i.i.i:                                  ; preds = %_compound_head.exit.i71
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %36, ptr noundef nonnull @.str.24) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 260, 0\0A.popsection", ""() #14, !srcloc !292
  unreachable

folio_test_dirty.exit.i.i:                        ; preds = %_compound_head.exit.i71
  %40 = ptrtoint ptr %36 to i32
  call void @__asan_load4_noabort(i32 %40)
  %41 = load volatile i32, ptr %36, align 4
  %42 = and i32 %41, 8
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %42)
  %tobool.i.not.i.i = icmp eq i32 %42, 0
  br i1 %tobool.i.not.i.i, label %folio_test_dirty.exit.i.i.if.end21_crit_edge, label %if.then.i1.i

folio_test_dirty.exit.i.i.if.end21_crit_edge:     ; preds = %folio_test_dirty.exit.i.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end21

if.then.i1.i:                                     ; preds = %folio_test_dirty.exit.i.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @__folio_cancel_dirty(ptr noundef %36) #14
  br label %if.end21

if.end21:                                         ; preds = %if.then.i1.i, %folio_test_dirty.exit.i.i.if.end21_crit_edge, %if.end17.if.end21_crit_edge
  tail call void @_raw_spin_unlock(ptr noundef %private_lock) #14
  br label %out

out:                                              ; preds = %if.end21, %if.then15
  %ret.0 = phi i32 [ %call16, %if.then15 ], [ %call18, %if.end21 ]
  %43 = ptrtoint ptr %buffers_to_free to i32
  call void @__asan_load4_noabort(i32 %43)
  %44 = load ptr, ptr %buffers_to_free, align 4
  %tobool23.not = icmp eq ptr %44, null
  br i1 %tobool23.not, label %out.cleanup_crit_edge, label %out.do.body25_crit_edge

out.do.body25_crit_edge:                          ; preds = %out
  br label %do.body25

out.cleanup_crit_edge:                            ; preds = %out
  call void @__sanitizer_cov_trace_pc() #16
  br label %cleanup

do.body25:                                        ; preds = %do.body25.do.body25_crit_edge, %out.do.body25_crit_edge
  %bh.0 = phi ptr [ %46, %do.body25.do.body25_crit_edge ], [ %44, %out.do.body25_crit_edge ]
  %b_this_page = getelementptr inbounds %struct.buffer_head, ptr %bh.0, i32 0, i32 1
  %45 = ptrtoint ptr %b_this_page to i32
  call void @__asan_load4_noabort(i32 %45)
  %46 = load ptr, ptr %b_this_page, align 4
  tail call void @free_buffer_head(ptr noundef %bh.0)
  %cmp27.not = icmp eq ptr %46, %44
  br i1 %cmp27.not, label %do.body25.cleanup_crit_edge, label %do.body25.do.body25_crit_edge

do.body25.do.body25_crit_edge:                    ; preds = %do.body25
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.body25

do.body25.cleanup_crit_edge:                      ; preds = %do.body25
  call void @__sanitizer_cov_trace_pc() #16
  br label %cleanup

cleanup:                                          ; preds = %do.body25.cleanup_crit_edge, %out.cleanup_crit_edge, %PageWriteback.exit.cleanup_crit_edge
  %retval.0 = phi i32 [ 0, %PageWriteback.exit.cleanup_crit_edge ], [ %ret.0, %out.cleanup_crit_edge ], [ %ret.0, %do.body25.cleanup_crit_edge ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %buffers_to_free) #14
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal fastcc i32 @drop_buffers(ptr noundef %page, ptr nocapture noundef writeonly %buffers_to_free) unnamed_addr #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = ptrtoint ptr %page to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load volatile i32, ptr %page, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %1)
  %cmp.i.not.i = icmp eq i32 %1, -1
  br i1 %cmp.i.not.i, label %if.then.i, label %PagePrivate.exit, !prof !262

if.then.i:                                        ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %page, ptr noundef nonnull @.str.15) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 452, 0\0A.popsection", ""() #14, !srcloc !265
  unreachable

PagePrivate.exit:                                 ; preds = %entry
  %2 = ptrtoint ptr %page to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load volatile i32, ptr %page, align 4
  %4 = and i32 %3, 8192
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %4)
  %tobool.not = icmp eq i32 %4, 0
  br i1 %tobool.not, label %do.body4, label %do.end9, !prof !262

do.body4:                                         ; preds = %PagePrivate.exit
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22fs/buffer.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 3202, 0\0A.popsection", ""() #14, !srcloc !373
  unreachable

do.end9:                                          ; preds = %PagePrivate.exit
  %private = getelementptr inbounds %struct.page, ptr %page, i32 0, i32 1, i32 0, i32 3
  %5 = ptrtoint ptr %private to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load i32, ptr %private, align 4
  %7 = inttoptr i32 %6 to ptr
  br label %do.body10

do.body10:                                        ; preds = %if.end14.do.body10_crit_edge, %do.end9
  %bh.0 = phi ptr [ %7, %do.end9 ], [ %13, %if.end14.do.body10_crit_edge ]
  %b_count.i = getelementptr inbounds %struct.buffer_head, ptr %bh.0, i32 0, i32 11
  %call.i.i.i = tail call zeroext i1 @__kasan_check_read(ptr noundef %b_count.i, i32 noundef 4) #14
  %8 = ptrtoint ptr %b_count.i to i32
  call void @__asan_load4_noabort(i32 %8)
  %9 = load volatile i32, ptr %b_count.i, align 4
  %10 = ptrtoint ptr %bh.0 to i32
  call void @__asan_load4_noabort(i32 %10)
  %11 = load i32, ptr %bh.0, align 8
  %and.i = and i32 %11, 6
  %or.i = or i32 %and.i, %9
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %or.i)
  %tobool12.not = icmp eq i32 %or.i, 0
  br i1 %tobool12.not, label %if.end14, label %do.body10.cleanup_crit_edge

do.body10.cleanup_crit_edge:                      ; preds = %do.body10
  call void @__sanitizer_cov_trace_pc() #16
  br label %cleanup

if.end14:                                         ; preds = %do.body10
  %b_this_page = getelementptr inbounds %struct.buffer_head, ptr %bh.0, i32 0, i32 1
  %12 = ptrtoint ptr %b_this_page to i32
  call void @__asan_load4_noabort(i32 %12)
  %13 = load ptr, ptr %b_this_page, align 4
  %cmp.not = icmp eq ptr %13, %7
  br i1 %cmp.not, label %if.end14.do.body17_crit_edge, label %if.end14.do.body10_crit_edge

if.end14.do.body10_crit_edge:                     ; preds = %if.end14
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.body10

if.end14.do.body17_crit_edge:                     ; preds = %if.end14
  br label %do.body17

do.body17:                                        ; preds = %if.end21.do.body17_crit_edge, %if.end14.do.body17_crit_edge
  %bh.1 = phi ptr [ %15, %if.end21.do.body17_crit_edge ], [ %7, %if.end14.do.body17_crit_edge ]
  %b_this_page18 = getelementptr inbounds %struct.buffer_head, ptr %bh.1, i32 0, i32 1
  %14 = ptrtoint ptr %b_this_page18 to i32
  call void @__asan_load4_noabort(i32 %14)
  %15 = load ptr, ptr %b_this_page18, align 4
  %b_assoc_map = getelementptr inbounds %struct.buffer_head, ptr %bh.1, i32 0, i32 10
  %16 = ptrtoint ptr %b_assoc_map to i32
  call void @__asan_load4_noabort(i32 %16)
  %17 = load ptr, ptr %b_assoc_map, align 4
  %tobool19.not = icmp eq ptr %17, null
  br i1 %tobool19.not, label %do.body17.if.end21_crit_edge, label %if.then20

do.body17.if.end21_crit_edge:                     ; preds = %do.body17
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end21

if.then20:                                        ; preds = %do.body17
  %b_assoc_buffers.i = getelementptr inbounds %struct.buffer_head, ptr %bh.1, i32 0, i32 9
  %call.i.i.i40 = tail call zeroext i1 @__list_del_entry_valid(ptr noundef %b_assoc_buffers.i) #14
  br i1 %call.i.i.i40, label %if.end.i.i.i, label %if.then20.list_del_init.exit.i_crit_edge

if.then20.list_del_init.exit.i_crit_edge:         ; preds = %if.then20
  call void @__sanitizer_cov_trace_pc() #16
  br label %list_del_init.exit.i

if.end.i.i.i:                                     ; preds = %if.then20
  call void @__sanitizer_cov_trace_pc() #16
  %prev.i.i.i = getelementptr inbounds %struct.buffer_head, ptr %bh.1, i32 0, i32 9, i32 1
  %18 = ptrtoint ptr %prev.i.i.i to i32
  call void @__asan_load4_noabort(i32 %18)
  %19 = load ptr, ptr %prev.i.i.i, align 4
  %20 = ptrtoint ptr %b_assoc_buffers.i to i32
  call void @__asan_load4_noabort(i32 %20)
  %21 = load ptr, ptr %b_assoc_buffers.i, align 4
  %prev1.i.i.i.i = getelementptr inbounds %struct.list_head, ptr %21, i32 0, i32 1
  %22 = ptrtoint ptr %prev1.i.i.i.i to i32
  call void @__asan_store4_noabort(i32 %22)
  store ptr %19, ptr %prev1.i.i.i.i, align 4
  %23 = ptrtoint ptr %19 to i32
  call void @__asan_store4_noabort(i32 %23)
  store volatile ptr %21, ptr %19, align 4
  br label %list_del_init.exit.i

list_del_init.exit.i:                             ; preds = %if.end.i.i.i, %if.then20.list_del_init.exit.i_crit_edge
  %24 = ptrtoint ptr %b_assoc_buffers.i to i32
  call void @__asan_store4_noabort(i32 %24)
  store volatile ptr %b_assoc_buffers.i, ptr %b_assoc_buffers.i, align 4
  %prev.i3.i.i = getelementptr inbounds %struct.buffer_head, ptr %bh.1, i32 0, i32 9, i32 1
  %25 = ptrtoint ptr %prev.i3.i.i to i32
  call void @__asan_store4_noabort(i32 %25)
  store ptr %b_assoc_buffers.i, ptr %prev.i3.i.i, align 4
  %26 = ptrtoint ptr %b_assoc_map to i32
  call void @__asan_load4_noabort(i32 %26)
  %27 = load ptr, ptr %b_assoc_map, align 4
  %tobool.not.i = icmp eq ptr %27, null
  br i1 %tobool.not.i, label %do.end.i, label %list_del_init.exit.i.__remove_assoc_queue.exit_crit_edge, !prof !262

list_del_init.exit.i.__remove_assoc_queue.exit_crit_edge: ; preds = %list_del_init.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %__remove_assoc_queue.exit

do.end.i:                                         ; preds = %list_del_init.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.4, i32 noundef 480, i32 noundef 9, ptr noundef null) #14
  br label %__remove_assoc_queue.exit

__remove_assoc_queue.exit:                        ; preds = %do.end.i, %list_del_init.exit.i.__remove_assoc_queue.exit_crit_edge
  %28 = ptrtoint ptr %b_assoc_map to i32
  call void @__asan_store4_noabort(i32 %28)
  store ptr null, ptr %b_assoc_map, align 4
  br label %if.end21

if.end21:                                         ; preds = %__remove_assoc_queue.exit, %do.body17.if.end21_crit_edge
  %cmp23.not = icmp eq ptr %15, %7
  br i1 %cmp23.not, label %do.end24, label %if.end21.do.body17_crit_edge

if.end21.do.body17_crit_edge:                     ; preds = %if.end21
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.body17

do.end24:                                         ; preds = %if.end21
  %29 = ptrtoint ptr %buffers_to_free to i32
  call void @__asan_store4_noabort(i32 %29)
  store ptr %7, ptr %buffers_to_free, align 4
  %30 = getelementptr inbounds %struct.page, ptr %page, i32 0, i32 1
  %31 = ptrtoint ptr %30 to i32
  call void @__asan_load4_noabort(i32 %31)
  %32 = load volatile i32, ptr %30, align 4
  %and.i.i = and i32 %32, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i)
  %tobool.not.i.i = icmp eq i32 %and.i.i, 0
  br i1 %tobool.not.i.i, label %if.end.i.i, label %if.then.i.i, !prof !254

if.then.i.i:                                      ; preds = %do.end24
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i.i = add i32 %32, -1
  br label %detach_page_private.exit

if.end.i.i:                                       ; preds = %do.end24
  call void @__sanitizer_cov_trace_pc() #16
  %33 = ptrtoint ptr %page to i32
  br label %detach_page_private.exit

detach_page_private.exit:                         ; preds = %if.end.i.i, %if.then.i.i
  %retval.0.i.i = phi i32 [ %sub.i.i, %if.then.i.i ], [ %33, %if.end.i.i ]
  %34 = inttoptr i32 %retval.0.i.i to ptr
  tail call fastcc void @folio_detach_private(ptr noundef %34) #14
  br label %cleanup

cleanup:                                          ; preds = %detach_page_private.exit, %do.body10.cleanup_crit_edge
  %retval.0 = phi i32 [ 1, %detach_page_private.exit ], [ 0, %do.body10.cleanup_crit_edge ]
  ret i32 %retval.0
}

; Function Attrs: null_pointer_is_valid
declare dso_local void @__raw_spin_lock_init(ptr noundef, ptr noundef, ptr noundef, i16 noundef signext) local_unnamed_addr #1

; Function Attrs: null_pointer_is_valid
declare dso_local void @kmem_cache_free(ptr noundef, ptr noundef) local_unnamed_addr #1

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @bh_uptodate_or_lock(ptr noundef %bh) #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = ptrtoint ptr %bh to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load volatile i32, ptr %bh, align 4
  %and1.i.i = and i32 %1, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and1.i.i)
  %tobool.not = icmp eq i32 %and1.i.i, 0
  br i1 %tobool.not, label %if.then, label %entry.return_crit_edge

entry.return_crit_edge:                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  br label %return

if.then:                                          ; preds = %entry
  tail call void @__might_sleep(ptr noundef nonnull @.str.43, i32 noundef 366) #14
  %call.i.i.i.i = tail call zeroext i1 @__kasan_check_write(ptr noundef %bh, i32 noundef 4) #14
  %2 = ptrtoint ptr %bh to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load volatile i32, ptr %bh, align 4
  %and.i.i.i.i = and i32 %3, 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i.i.i)
  %tobool.not.i.i.i.i = icmp eq i32 %and.i.i.i.i, 0
  br i1 %tobool.not.i.i.i.i, label %trylock_buffer.exit.i, label %if.then.if.then.i_crit_edge

if.then.if.then.i_crit_edge:                      ; preds = %if.then
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.then.i

trylock_buffer.exit.i:                            ; preds = %if.then
  tail call void @llvm.prefetch.p0(ptr %bh, i32 1, i32 3, i32 1) #14
  %4 = tail call { i32, i32, i32 } asm sideeffect "@ atomic_fetch_or\0A1:\09ldrex\09$0, [$4]\0A\09orr\09$1, $0, $5\0A\09strex\09$2, $1, [$4]\0A\09teq\09$2, #0\0A\09bne\091b", "=&r,=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %bh, ptr %bh, i32 4, ptr elementtype(i32) %bh) #14, !srcloc !284
  %asmresult.i.i.i.i.i.i.i = extractvalue { i32, i32, i32 } %4, 0
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !285
  %5 = and i32 %asmresult.i.i.i.i.i.i.i, 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %5)
  %tobool.not.not.i = icmp eq i32 %5, 0
  br i1 %tobool.not.not.i, label %trylock_buffer.exit.i.lock_buffer.exit_crit_edge, label %trylock_buffer.exit.i.if.then.i_crit_edge

trylock_buffer.exit.i.if.then.i_crit_edge:        ; preds = %trylock_buffer.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.then.i

trylock_buffer.exit.i.lock_buffer.exit_crit_edge: ; preds = %trylock_buffer.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %lock_buffer.exit

if.then.i:                                        ; preds = %trylock_buffer.exit.i.if.then.i_crit_edge, %if.then.if.then.i_crit_edge
  tail call void @__might_sleep(ptr noundef nonnull @.str.13, i32 noundef 205) #14
  %call.i.i.i = tail call i32 @_test_and_set_bit(i32 noundef 2, ptr noundef %bh) #14
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call.i.i.i)
  %tobool.not.i.i.i = icmp eq i32 %call.i.i.i, 0
  br i1 %tobool.not.i.i.i, label %if.then.i.lock_buffer.exit_crit_edge, label %if.end.i.i.i

if.then.i.lock_buffer.exit_crit_edge:             ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %lock_buffer.exit

if.end.i.i.i:                                     ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #16
  %call3.i.i.i = tail call i32 @out_of_line_wait_on_bit_lock(ptr noundef %bh, i32 noundef 2, ptr noundef nonnull @bit_wait_io, i32 noundef 2) #14
  br label %lock_buffer.exit

lock_buffer.exit:                                 ; preds = %if.end.i.i.i, %if.then.i.lock_buffer.exit_crit_edge, %trylock_buffer.exit.i.lock_buffer.exit_crit_edge
  %6 = ptrtoint ptr %bh to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load volatile i32, ptr %bh, align 4
  %and1.i.i8 = and i32 %7, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and1.i.i8)
  %tobool2.not = icmp eq i32 %and1.i.i8, 0
  br i1 %tobool2.not, label %lock_buffer.exit.return_crit_edge, label %if.end

lock_buffer.exit.return_crit_edge:                ; preds = %lock_buffer.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %return

if.end:                                           ; preds = %lock_buffer.exit
  call void @__sanitizer_cov_trace_pc() #16
  %call.i.i.i9 = tail call zeroext i1 @__kasan_check_write(ptr noundef %bh, i32 noundef 4) #14
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !259
  tail call void @llvm.prefetch.p0(ptr %bh, i32 1, i32 3, i32 1) #14
  %8 = tail call { i32, i32, i32 } asm sideeffect "@ atomic_fetch_andnot\0A1:\09ldrex\09$0, [$4]\0A\09bic\09$1, $0, $5\0A\09strex\09$2, $1, [$4]\0A\09teq\09$2, #0\0A\09bne\091b", "=&r,=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %bh, ptr %bh, i32 4, ptr elementtype(i32) %bh) #14, !srcloc !260
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !261
  tail call void @wake_up_bit(ptr noundef %bh, i32 noundef 2) #14
  br label %return

return:                                           ; preds = %if.end, %lock_buffer.exit.return_crit_edge, %entry.return_crit_edge
  %retval.0 = phi i32 [ 0, %lock_buffer.exit.return_crit_edge ], [ 1, %if.end ], [ 1, %entry.return_crit_edge ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define dso_local i32 @bh_submit_read(ptr noundef %bh) #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = ptrtoint ptr %bh to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load volatile i32, ptr %bh, align 4
  %2 = and i32 %1, 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %2)
  %tobool.not = icmp eq i32 %2, 0
  br i1 %tobool.not, label %do.body4, label %do.end7, !prof !262

do.body4:                                         ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22fs/buffer.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 3375, 0\0A.popsection", ""() #14, !srcloc !374
  unreachable

do.end7:                                          ; preds = %entry
  %3 = ptrtoint ptr %bh to i32
  call void @__asan_load4_noabort(i32 %3)
  %4 = load volatile i32, ptr %bh, align 4
  %and1.i.i24 = and i32 %4, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and1.i.i24)
  %tobool9.not = icmp eq i32 %and1.i.i24, 0
  br i1 %tobool9.not, label %if.end11, label %if.then10

if.then10:                                        ; preds = %do.end7
  call void @__sanitizer_cov_trace_pc() #16
  %call.i.i.i = tail call zeroext i1 @__kasan_check_write(ptr noundef %bh, i32 noundef 4) #14
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !259
  tail call void @llvm.prefetch.p0(ptr %bh, i32 1, i32 3, i32 1) #14
  %5 = tail call { i32, i32, i32 } asm sideeffect "@ atomic_fetch_andnot\0A1:\09ldrex\09$0, [$4]\0A\09bic\09$1, $0, $5\0A\09strex\09$2, $1, [$4]\0A\09teq\09$2, #0\0A\09bne\091b", "=&r,=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %bh, ptr %bh, i32 4, ptr elementtype(i32) %bh) #14, !srcloc !260
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !261
  tail call void @wake_up_bit(ptr noundef %bh, i32 noundef 2) #14
  br label %return

if.end11:                                         ; preds = %do.end7
  %b_count.i = getelementptr inbounds %struct.buffer_head, ptr %bh, i32 0, i32 11
  %call.i.i.i26 = tail call zeroext i1 @__kasan_check_write(ptr noundef %b_count.i, i32 noundef 4) #14
  tail call void @llvm.prefetch.p0(ptr %b_count.i, i32 1, i32 3, i32 1) #14
  %6 = tail call { i32, i32 } asm sideeffect "@ atomic_add\0A1:\09ldrex\09$0, [$3]\0A\09add\09$0, $0, $4\0A\09strex\09$1, $0, [$3]\0A\09teq\09$1, #0\0A\09bne\091b", "=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %b_count.i, ptr %b_count.i, i32 1, ptr elementtype(i32) %b_count.i) #14, !srcloc !278
  %b_end_io = getelementptr inbounds %struct.buffer_head, ptr %bh, i32 0, i32 7
  %7 = ptrtoint ptr %b_end_io to i32
  call void @__asan_store4_noabort(i32 %7)
  store ptr @end_buffer_read_sync, ptr %b_end_io, align 4
  tail call fastcc void @submit_bh_wbc(i32 noundef 0, i32 noundef 0, ptr noundef %bh, i32 noundef 0, ptr noundef null) #14
  tail call void @__might_sleep(ptr noundef nonnull @.str.43, i32 noundef 354) #14
  %8 = ptrtoint ptr %bh to i32
  call void @__asan_load4_noabort(i32 %8)
  %9 = load volatile i32, ptr %bh, align 4
  %10 = and i32 %9, 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %10)
  %tobool.not.i = icmp eq i32 %10, 0
  br i1 %tobool.not.i, label %if.end11.wait_on_buffer.exit_crit_edge, label %if.then.i

if.end11.wait_on_buffer.exit_crit_edge:           ; preds = %if.end11
  call void @__sanitizer_cov_trace_pc() #16
  br label %wait_on_buffer.exit

if.then.i:                                        ; preds = %if.end11
  tail call void @__might_sleep(ptr noundef nonnull @.str.13, i32 noundef 98) #14
  %11 = ptrtoint ptr %bh to i32
  call void @__asan_load4_noabort(i32 %11)
  %12 = load volatile i32, ptr %bh, align 4
  %13 = and i32 %12, 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %13)
  %tobool.not.i.i.i = icmp eq i32 %13, 0
  br i1 %tobool.not.i.i.i, label %if.then.i.wait_on_buffer.exit_crit_edge, label %if.end.i.i.i

if.then.i.wait_on_buffer.exit_crit_edge:          ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %wait_on_buffer.exit

if.end.i.i.i:                                     ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #16
  %call3.i.i.i = tail call i32 @out_of_line_wait_on_bit(ptr noundef %bh, i32 noundef 2, ptr noundef nonnull @bit_wait_io, i32 noundef 2) #14
  br label %wait_on_buffer.exit

wait_on_buffer.exit:                              ; preds = %if.end.i.i.i, %if.then.i.wait_on_buffer.exit_crit_edge, %if.end11.wait_on_buffer.exit_crit_edge
  %14 = ptrtoint ptr %bh to i32
  call void @__asan_load4_noabort(i32 %14)
  %15 = load volatile i32, ptr %bh, align 4
  %and1.i.i25 = and i32 %15, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and1.i.i25)
  %tobool14.not = icmp eq i32 %and1.i.i25, 0
  %. = select i1 %tobool14.not, i32 -5, i32 0
  br label %return

return:                                           ; preds = %wait_on_buffer.exit, %if.then10
  %retval.0 = phi i32 [ 0, %if.then10 ], [ %., %wait_on_buffer.exit ]
  ret i32 %retval.0
}

; Function Attrs: cold nounwind null_pointer_is_valid optsize sanitize_address sspstrong uwtable(sync)
define dso_local void @buffer_init() local_unnamed_addr #7 section ".init.text" align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %call = tail call ptr @kmem_cache_create(ptr noundef nonnull @.str.8, i32 noundef 104, i32 noundef 0, i32 noundef 1441792, ptr noundef null) #14
  store ptr %call, ptr @bh_cachep, align 4
  %call1 = tail call i32 @nr_free_buffer_pages() #14
  %mul = mul i32 %call1, 10
  %div = udiv i32 %mul, 100
  %mul2 = mul nuw nsw i32 %div, 39
  store i32 %mul2, ptr @max_buffer_heads, align 4
  %call.i = tail call i32 @__cpuhp_setup_state(i32 noundef 27, ptr noundef nonnull @.str.9, i1 noundef zeroext false, ptr noundef null, ptr noundef nonnull @buffer_exit_cpu_dead, i1 noundef zeroext false) #14
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call.i)
  %cmp = icmp slt i32 %call.i, 0
  br i1 %cmp, label %do.end, label %entry.if.end_crit_edge, !prof !262

entry.if.end_crit_edge:                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end

do.end:                                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.4, i32 noundef 3410, i32 noundef 9, ptr noundef null) #14
  br label %if.end

if.end:                                           ; preds = %do.end, %entry.if.end_crit_edge
  ret void
}

; Function Attrs: null_pointer_is_valid
declare dso_local ptr @kmem_cache_create(ptr noundef, i32 noundef, i32 noundef, i32 noundef, ptr noundef) local_unnamed_addr #1

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @nr_free_buffer_pages() local_unnamed_addr #1

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal i32 @buffer_exit_cpu_dead(i32 noundef %cpu) #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %arrayidx = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %cpu
  %0 = ptrtoint ptr %arrayidx to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load i32, ptr %arrayidx, align 4
  %add = add i32 %1, ptrtoint (ptr @bh_lrus to i32)
  %2 = inttoptr i32 %add to ptr
  br label %for.body

for.body:                                         ; preds = %brelse.exit.for.body_crit_edge, %entry
  %i.075 = phi i32 [ 0, %entry ], [ %inc, %brelse.exit.for.body_crit_edge ]
  %arrayidx2 = getelementptr [16 x ptr], ptr %2, i32 0, i32 %i.075
  %3 = ptrtoint ptr %arrayidx2 to i32
  call void @__asan_load4_noabort(i32 %3)
  %4 = load ptr, ptr %arrayidx2, align 4
  %tobool.not.i = icmp eq ptr %4, null
  br i1 %tobool.not.i, label %for.body.brelse.exit_crit_edge, label %if.then.i

for.body.brelse.exit_crit_edge:                   ; preds = %for.body
  call void @__sanitizer_cov_trace_pc() #16
  br label %brelse.exit

if.then.i:                                        ; preds = %for.body
  %b_count.i.i = getelementptr inbounds %struct.buffer_head, ptr %4, i32 0, i32 11
  %call.i.i.i.i = tail call zeroext i1 @__kasan_check_read(ptr noundef %b_count.i.i, i32 noundef 4) #14
  %5 = ptrtoint ptr %b_count.i.i to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load volatile i32, ptr %b_count.i.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %6)
  %tobool.not.i.i = icmp eq i32 %6, 0
  br i1 %tobool.not.i.i, label %do.end.i.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !268
  %call.i.i.i.i.i = tail call zeroext i1 @__kasan_check_write(ptr noundef %b_count.i.i, i32 noundef 4) #14
  tail call void @llvm.prefetch.p0(ptr %b_count.i.i, i32 1, i32 3, i32 1) #14
  %7 = tail call { i32, i32 } asm sideeffect "@ atomic_sub\0A1:\09ldrex\09$0, [$3]\0A\09sub\09$0, $0, $4\0A\09strex\09$1, $0, [$3]\0A\09teq\09$1, #0\0A\09bne\091b", "=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %b_count.i.i, ptr %b_count.i.i, i32 1, ptr elementtype(i32) %b_count.i.i) #14, !srcloc !269
  br label %brelse.exit

do.end.i.i:                                       ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.4, i32 noundef 1148, i32 noundef 9, ptr noundef nonnull @.str.5) #14
  br label %brelse.exit

brelse.exit:                                      ; preds = %do.end.i.i, %if.then.i.i, %for.body.brelse.exit_crit_edge
  %8 = ptrtoint ptr %arrayidx2 to i32
  call void @__asan_store4_noabort(i32 %8)
  store ptr null, ptr %arrayidx2, align 4
  %inc = add nuw nsw i32 %i.075, 1
  %exitcond.not = icmp eq i32 %inc, 16
  br i1 %exitcond.not, label %do.body6, label %brelse.exit.for.body_crit_edge

brelse.exit.for.body_crit_edge:                   ; preds = %brelse.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %for.body

do.body6:                                         ; preds = %brelse.exit
  %9 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ arch_local_irq_save\0A\09cpsid\09i", "=r,~{memory},~{cc}"() #14, !srcloc !297
  %10 = ptrtoint ptr %arrayidx to i32
  call void @__asan_load4_noabort(i32 %10)
  %11 = load i32, ptr %arrayidx, align 4
  %add25 = add i32 %11, ptrtoint (ptr @bh_accounting to i32)
  %12 = inttoptr i32 %add25 to ptr
  %13 = ptrtoint ptr %12 to i32
  call void @__asan_load4_noabort(i32 %13)
  %14 = load i32, ptr %12, align 4
  %15 = tail call i32 @llvm.read_register.i32(metadata !243) #14
  %and.i = and i32 %15, -16384
  %16 = inttoptr i32 %and.i to ptr
  %cpu34 = getelementptr inbounds %struct.thread_info, ptr %16, i32 0, i32 3
  %17 = ptrtoint ptr %cpu34 to i32
  call void @__asan_load4_noabort(i32 %17)
  %18 = load i32, ptr %cpu34, align 4
  %arrayidx35 = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %18
  %19 = ptrtoint ptr %arrayidx35 to i32
  call void @__asan_load4_noabort(i32 %19)
  %20 = load i32, ptr %arrayidx35, align 4
  %add36 = add i32 %20, ptrtoint (ptr @bh_accounting to i32)
  %21 = inttoptr i32 %add36 to ptr
  %22 = ptrtoint ptr %21 to i32
  call void @__asan_load4_noabort(i32 %22)
  %23 = load i32, ptr %21, align 4
  %add37 = add i32 %23, %14
  store i32 %add37, ptr %21, align 4
  %24 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ local_save_flags", "=r,~{memory},~{cc}"() #14, !srcloc !280
  %and.i.i = and i32 %24, 128
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i)
  %tobool.not = icmp eq i32 %and.i.i, 0
  br i1 %tobool.not, label %if.then, label %do.body6.do.end52_crit_edge, !prof !262

do.body6.do.end52_crit_edge:                      ; preds = %do.body6
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.end52

if.then:                                          ; preds = %do.body6
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @warn_bogus_irq_restore() #14
  br label %do.end52

do.end52:                                         ; preds = %if.then, %do.body6.do.end52_crit_edge
  tail call void asm sideeffect "\09msr\09cpsr_c, $0\09@ local_irq_restore", "r,~{memory},~{cc}"(i32 %9) #14, !srcloc !298
  %25 = ptrtoint ptr %arrayidx to i32
  call void @__asan_load4_noabort(i32 %25)
  %26 = load i32, ptr %arrayidx, align 4
  %add67 = add i32 %26, ptrtoint (ptr @bh_accounting to i32)
  %27 = inttoptr i32 %add67 to ptr
  %28 = ptrtoint ptr %27 to i32
  call void @__asan_store4_noabort(i32 %28)
  store i32 0, ptr %27, align 4
  ret i32 0
}

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @__traceiter_block_touch_buffer(ptr noundef, ptr noundef) local_unnamed_addr #1

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @rcu_read_lock_sched_held() local_unnamed_addr #1

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @debug_lockdep_rcu_enabled() local_unnamed_addr #1

; Function Attrs: null_pointer_is_valid
declare dso_local void @lockdep_rcu_suspicious(ptr noundef, i32 noundef, ptr noundef) local_unnamed_addr #1

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @_test_and_set_bit(i32 noundef, ptr noundef) local_unnamed_addr #1

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @out_of_line_wait_on_bit_lock(ptr noundef, i32 noundef, ptr noundef, i32 noundef) local_unnamed_addr #1

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @bit_wait_io(ptr noundef, i32 noundef) #1

; Function Attrs: null_pointer_is_valid
declare dso_local zeroext i1 @__kasan_check_write(ptr noundef, i32 noundef) local_unnamed_addr #1

; Function Attrs: inaccessiblemem_or_argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.prefetch.p0(ptr nocapture readonly, i32 immarg, i32 immarg, i32) #8

; Function Attrs: null_pointer_is_valid
declare dso_local void @dump_page(ptr noundef, ptr noundef) local_unnamed_addr #1

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @out_of_line_wait_on_bit(ptr noundef, i32 noundef, ptr noundef, i32 noundef) local_unnamed_addr #1

; Function Attrs: null_pointer_is_valid
declare dso_local void @_set_bit(i32 noundef, ptr noundef) local_unnamed_addr #1

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @___ratelimit(ptr noundef, ptr noundef) local_unnamed_addr #1

; Function Attrs: null_pointer_is_valid
declare dso_local void @_clear_bit(i32 noundef, ptr noundef) local_unnamed_addr #1

; Function Attrs: null_pointer_is_valid
declare dso_local void @_raw_spin_unlock_irqrestore(ptr noundef, i32 noundef) local_unnamed_addr #1 section ".spinlock.text"

; Function Attrs: null_pointer_is_valid
declare dso_local void @_raw_spin_lock(ptr noundef) local_unnamed_addr #1 section ".spinlock.text"

; Function Attrs: null_pointer_is_valid
declare dso_local zeroext i1 @__list_del_entry_valid(ptr noundef) local_unnamed_addr #1

; Function Attrs: null_pointer_is_valid
declare dso_local zeroext i1 @__list_add_valid(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #1

; Function Attrs: null_pointer_is_valid
declare dso_local void @_raw_spin_unlock(ptr noundef) local_unnamed_addr #1 section ".spinlock.text"

; Function Attrs: null_pointer_is_valid
declare dso_local void @__folio_mark_dirty(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #1

; Function Attrs: null_pointer_is_valid
declare dso_local void @blk_start_plug(ptr noundef) local_unnamed_addr #1

; Function Attrs: null_pointer_is_valid
declare dso_local void @blk_finish_plug(ptr noundef) local_unnamed_addr #1

; Function Attrs: null_pointer_is_valid
declare dso_local void @warn_bogus_irq_restore() local_unnamed_addr #1

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @__traceiter_block_dirty_buffer(ptr noundef, ptr noundef) local_unnamed_addr #1

; Function Attrs: null_pointer_is_valid
declare dso_local void @__filemap_set_wb_err(ptr noundef, i32 noundef) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal fastcc void @rcu_lock_acquire(ptr nocapture noundef readnone %map) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  br label %__here

__here:                                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @lock_acquire(ptr noundef nonnull @rcu_lock_map, i32 noundef 0, i32 noundef 0, i32 noundef 2, i32 noundef 0, ptr noundef null, i32 noundef ptrtoint (ptr blockaddress(@rcu_lock_acquire, %__here) to i32)) #14
  ret void
}

; Function Attrs: null_pointer_is_valid
declare dso_local zeroext i1 @rcu_is_watching() local_unnamed_addr #1

; Function Attrs: null_pointer_is_valid
declare dso_local void @lock_acquire(ptr noundef, i32 noundef, i32 noundef, i32 noundef, i32 noundef, ptr noundef, i32 noundef) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal fastcc void @rcu_lock_release(ptr nocapture noundef readnone %map) #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  br label %__here

__here:                                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @lock_release(ptr noundef nonnull @rcu_lock_map, i32 noundef ptrtoint (ptr blockaddress(@rcu_lock_release, %__here) to i32)) #14
  ret void
}

; Function Attrs: null_pointer_is_valid
declare dso_local void @rcu_read_unlock_strict() local_unnamed_addr #1

; Function Attrs: null_pointer_is_valid
declare dso_local void @lock_release(ptr noundef, i32 noundef) local_unnamed_addr #1

; Function Attrs: null_pointer_is_valid
declare dso_local zeroext i1 @__kasan_check_read(ptr noundef, i32 noundef) local_unnamed_addr #1

; Function Attrs: null_pointer_is_valid
declare dso_local ptr @pagecache_get_page(ptr noundef, i32 noundef, i32 noundef, i32 noundef) local_unnamed_addr #1

; Function Attrs: cold null_pointer_is_valid
declare dso_local void @dump_stack() local_unnamed_addr #5

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal fastcc i32 @grow_dev_page(ptr noundef %bdev, i64 noundef %block, i32 noundef %index, i32 noundef %size, i32 noundef %sizebits, i32 noundef %gfp) unnamed_addr #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %bd_inode = getelementptr inbounds %struct.block_device, ptr %bdev, i32 0, i32 7
  %0 = ptrtoint ptr %bd_inode to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %bd_inode, align 4
  %i_mapping = getelementptr inbounds %struct.inode, ptr %1, i32 0, i32 9
  %2 = ptrtoint ptr %i_mapping to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load ptr, ptr %i_mapping, align 8
  %gfp_mask.i.i = getelementptr inbounds %struct.address_space, ptr %3, i32 0, i32 3
  %4 = ptrtoint ptr %gfp_mask.i.i to i32
  call void @__asan_load4_noabort(i32 %4)
  %5 = load i32, ptr %gfp_mask.i.i, align 4
  %and.i = and i32 %5, -32897
  %or = or i32 %and.i, %gfp
  %or1 = or i32 %or, 32768
  %call.i = tail call ptr @pagecache_get_page(ptr noundef %3, i32 noundef %index, i32 noundef 7, i32 noundef %or1) #14
  %6 = getelementptr inbounds %struct.page, ptr %call.i, i32 0, i32 1
  %7 = ptrtoint ptr %6 to i32
  call void @__asan_load4_noabort(i32 %7)
  %8 = load volatile i32, ptr %6, align 4
  %and.i.i = and i32 %8, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i)
  %tobool.not.i.i = icmp eq i32 %and.i.i, 0
  br i1 %tobool.not.i.i, label %if.end.i.i, label %if.then.i.i, !prof !254

if.then.i.i:                                      ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i.i = add i32 %8, -1
  br label %_compound_head.exit.i

if.end.i.i:                                       ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  %9 = ptrtoint ptr %call.i to i32
  br label %_compound_head.exit.i

_compound_head.exit.i:                            ; preds = %if.end.i.i, %if.then.i.i
  %retval.0.i.i = phi i32 [ %sub.i.i, %if.then.i.i ], [ %9, %if.end.i.i ]
  %10 = inttoptr i32 %retval.0.i.i to ptr
  %11 = ptrtoint ptr %10 to i32
  call void @__asan_load4_noabort(i32 %11)
  %12 = load volatile i32, ptr %10, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %12)
  %cmp.i.not.i = icmp eq i32 %12, -1
  %13 = ptrtoint ptr %6 to i32
  call void @__asan_load4_noabort(i32 %13)
  %14 = load volatile i32, ptr %6, align 4
  %and.i16.i = and i32 %14, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i16.i)
  %tobool.not.i17.i = icmp eq i32 %and.i16.i, 0
  br i1 %cmp.i.not.i, label %if.then.i, label %do.end10.i, !prof !262

if.then.i:                                        ; preds = %_compound_head.exit.i
  br i1 %tobool.not.i17.i, label %if.end.i20.i, label %if.then.i19.i, !prof !254

if.then.i19.i:                                    ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i18.i = add i32 %14, -1
  br label %_compound_head.exit22.i

if.end.i20.i:                                     ; preds = %if.then.i
  call void @__sanitizer_cov_trace_pc() #16
  %15 = ptrtoint ptr %call.i to i32
  br label %_compound_head.exit22.i

_compound_head.exit22.i:                          ; preds = %if.end.i20.i, %if.then.i19.i
  %retval.0.i21.i = phi i32 [ %sub.i18.i, %if.then.i19.i ], [ %15, %if.end.i20.i ]
  %16 = inttoptr i32 %retval.0.i21.i to ptr
  tail call void @dump_page(ptr noundef %16, ptr noundef nonnull @.str.14) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 414, 0\0A.popsection", ""() #14, !srcloc !263
  unreachable

do.end10.i:                                       ; preds = %_compound_head.exit.i
  br i1 %tobool.not.i17.i, label %if.end.i27.i, label %if.then.i26.i, !prof !254

if.then.i26.i:                                    ; preds = %do.end10.i
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i25.i = add i32 %14, -1
  br label %PageLocked.exit

if.end.i27.i:                                     ; preds = %do.end10.i
  call void @__sanitizer_cov_trace_pc() #16
  %17 = ptrtoint ptr %call.i to i32
  br label %PageLocked.exit

PageLocked.exit:                                  ; preds = %if.end.i27.i, %if.then.i26.i
  %retval.0.i28.i = phi i32 [ %sub.i25.i, %if.then.i26.i ], [ %17, %if.end.i27.i ]
  %18 = inttoptr i32 %retval.0.i28.i to ptr
  %19 = ptrtoint ptr %18 to i32
  call void @__asan_load4_noabort(i32 %19)
  %20 = load volatile i32, ptr %18, align 4
  %and1.i.i = and i32 %20, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and1.i.i)
  %tobool.not = icmp eq i32 %and1.i.i, 0
  br i1 %tobool.not, label %do.body8, label %do.end13, !prof !262

do.body8:                                         ; preds = %PageLocked.exit
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22fs/buffer.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 951, 0\0A.popsection", ""() #14, !srcloc !375
  unreachable

do.end13:                                         ; preds = %PageLocked.exit
  %21 = ptrtoint ptr %call.i to i32
  call void @__asan_load4_noabort(i32 %21)
  %22 = load volatile i32, ptr %call.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %22)
  %cmp.i.not.i79 = icmp eq i32 %22, -1
  br i1 %cmp.i.not.i79, label %if.then.i80, label %PagePrivate.exit, !prof !262

if.then.i80:                                      ; preds = %do.end13
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %call.i, ptr noundef nonnull @.str.15) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 452, 0\0A.popsection", ""() #14, !srcloc !265
  unreachable

PagePrivate.exit:                                 ; preds = %do.end13
  %23 = ptrtoint ptr %call.i to i32
  call void @__asan_load4_noabort(i32 %23)
  %24 = load volatile i32, ptr %call.i, align 4
  %25 = and i32 %24, 8192
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %25)
  %tobool15.not = icmp eq i32 %25, 0
  br i1 %tobool15.not, label %PagePrivate.exit.if.end45_crit_edge, label %do.body17

PagePrivate.exit.if.end45_crit_edge:              ; preds = %PagePrivate.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end45

do.body17:                                        ; preds = %PagePrivate.exit
  %26 = ptrtoint ptr %call.i to i32
  call void @__asan_load4_noabort(i32 %26)
  %27 = load volatile i32, ptr %call.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %27)
  %cmp.i.not.i82 = icmp eq i32 %27, -1
  br i1 %cmp.i.not.i82, label %if.then.i83, label %PagePrivate.exit86, !prof !262

if.then.i83:                                      ; preds = %do.body17
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %call.i, ptr noundef nonnull @.str.15) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 452, 0\0A.popsection", ""() #14, !srcloc !265
  unreachable

PagePrivate.exit86:                               ; preds = %do.body17
  %28 = ptrtoint ptr %call.i to i32
  call void @__asan_load4_noabort(i32 %28)
  %29 = load volatile i32, ptr %call.i, align 4
  %30 = and i32 %29, 8192
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %30)
  %tobool19.not = icmp eq i32 %30, 0
  br i1 %tobool19.not, label %do.body29, label %do.end37, !prof !262

do.body29:                                        ; preds = %PagePrivate.exit86
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22fs/buffer.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 954, 0\0A.popsection", ""() #14, !srcloc !376
  unreachable

do.end37:                                         ; preds = %PagePrivate.exit86
  %private = getelementptr inbounds %struct.page, ptr %call.i, i32 0, i32 1, i32 0, i32 3
  %31 = ptrtoint ptr %private to i32
  call void @__asan_load4_noabort(i32 %31)
  %32 = load i32, ptr %private, align 4
  %33 = inttoptr i32 %32 to ptr
  %b_size = getelementptr inbounds %struct.buffer_head, ptr %33, i32 0, i32 4
  %34 = ptrtoint ptr %b_size to i32
  call void @__asan_load4_noabort(i32 %34)
  %35 = load i32, ptr %b_size, align 8
  call void @__sanitizer_cov_trace_cmp4(i32 %35, i32 %size)
  %cmp = icmp eq i32 %35, %size
  br i1 %cmp, label %if.then38, label %if.end40

if.then38:                                        ; preds = %do.end37
  call void @__sanitizer_cov_trace_pc() #16
  %conv = zext i32 %index to i64
  %sh_prom = zext i32 %sizebits to i64
  %shl = shl i64 %conv, %sh_prom
  %call39 = tail call fastcc i64 @init_page_buffers(ptr noundef %call.i, ptr noundef %bdev, i64 noundef %shl, i32 noundef %size)
  br label %done

if.end40:                                         ; preds = %do.end37
  %call41 = tail call i32 @try_to_free_buffers(ptr noundef %call.i)
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call41)
  %tobool42.not = icmp eq i32 %call41, 0
  br i1 %tobool42.not, label %if.end40.failed_crit_edge, label %if.end40.if.end45_crit_edge

if.end40.if.end45_crit_edge:                      ; preds = %if.end40
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end45

if.end40.failed_crit_edge:                        ; preds = %if.end40
  call void @__sanitizer_cov_trace_pc() #16
  br label %failed

if.end45:                                         ; preds = %if.end40.if.end45_crit_edge, %PagePrivate.exit.if.end45_crit_edge
  %call46 = tail call ptr @alloc_page_buffers(ptr noundef %call.i, i32 noundef %size, i1 noundef zeroext true)
  %36 = ptrtoint ptr %i_mapping to i32
  call void @__asan_load4_noabort(i32 %36)
  %37 = load ptr, ptr %i_mapping, align 8
  %private_lock = getelementptr inbounds %struct.address_space, ptr %37, i32 0, i32 12
  tail call void @_raw_spin_lock(ptr noundef %private_lock) #14
  br label %do.body.i

do.body.i:                                        ; preds = %do.body.i.do.body.i_crit_edge, %if.end45
  %bh.0.i = phi ptr [ %call46, %if.end45 ], [ %39, %do.body.i.do.body.i_crit_edge ]
  %b_this_page.i = getelementptr inbounds %struct.buffer_head, ptr %bh.0.i, i32 0, i32 1
  %38 = ptrtoint ptr %b_this_page.i to i32
  call void @__asan_load4_noabort(i32 %38)
  %39 = load ptr, ptr %b_this_page.i, align 4
  %tobool.not.i = icmp eq ptr %39, null
  br i1 %tobool.not.i, label %link_dev_buffers.exit, label %do.body.i.do.body.i_crit_edge

do.body.i.do.body.i_crit_edge:                    ; preds = %do.body.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.body.i

link_dev_buffers.exit:                            ; preds = %do.body.i
  call void @__sanitizer_cov_trace_pc() #16
  %b_this_page.i.le = getelementptr inbounds %struct.buffer_head, ptr %bh.0.i, i32 0, i32 1
  %40 = ptrtoint ptr %b_this_page.i.le to i32
  call void @__asan_store4_noabort(i32 %40)
  store ptr %call46, ptr %b_this_page.i.le, align 4
  tail call fastcc void @attach_page_private(ptr noundef %call.i, ptr noundef %call46) #14
  %conv48 = zext i32 %index to i64
  %sh_prom49 = zext i32 %sizebits to i64
  %shl50 = shl i64 %conv48, %sh_prom49
  %call51 = tail call fastcc i64 @init_page_buffers(ptr noundef %call.i, ptr noundef %bdev, i64 noundef %shl50, i32 noundef %size)
  %41 = ptrtoint ptr %i_mapping to i32
  call void @__asan_load4_noabort(i32 %41)
  %42 = load ptr, ptr %i_mapping, align 8
  %private_lock53 = getelementptr inbounds %struct.address_space, ptr %42, i32 0, i32 12
  tail call void @_raw_spin_unlock(ptr noundef %private_lock53) #14
  br label %done

done:                                             ; preds = %link_dev_buffers.exit, %if.then38
  %end_block.0 = phi i64 [ %call39, %if.then38 ], [ %call51, %link_dev_buffers.exit ]
  call void @__sanitizer_cov_trace_cmp8(i64 %end_block.0, i64 %block)
  %cmp54 = icmp ugt i64 %end_block.0, %block
  %cond = select i1 %cmp54, i32 1, i32 -6
  br label %failed

failed:                                           ; preds = %done, %if.end40.failed_crit_edge
  %ret.0 = phi i32 [ %cond, %done ], [ 0, %if.end40.failed_crit_edge ]
  tail call void @unlock_page(ptr noundef %call.i) #14
  %43 = ptrtoint ptr %6 to i32
  call void @__asan_load4_noabort(i32 %43)
  %44 = load volatile i32, ptr %6, align 4
  %and.i.i87 = and i32 %44, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i87)
  %tobool.not.i.i88 = icmp eq i32 %and.i.i87, 0
  br i1 %tobool.not.i.i88, label %if.end.i.i91, label %if.then.i.i90, !prof !254

if.then.i.i90:                                    ; preds = %failed
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i.i89 = add i32 %44, -1
  br label %_compound_head.exit.i93

if.end.i.i91:                                     ; preds = %failed
  call void @__sanitizer_cov_trace_pc() #16
  %45 = ptrtoint ptr %call.i to i32
  br label %_compound_head.exit.i93

_compound_head.exit.i93:                          ; preds = %if.end.i.i91, %if.then.i.i90
  %retval.0.i.i92 = phi i32 [ %sub.i.i89, %if.then.i.i90 ], [ %45, %if.end.i.i91 ]
  %46 = inttoptr i32 %retval.0.i.i92 to ptr
  %_refcount.i.i.i.i.i = getelementptr inbounds %struct.page, ptr %46, i32 0, i32 3
  %call.i.i.i.i.i.i.i = tail call zeroext i1 @__kasan_check_read(ptr noundef %_refcount.i.i.i.i.i, i32 noundef 4) #14
  %47 = ptrtoint ptr %_refcount.i.i.i.i.i to i32
  call void @__asan_load4_noabort(i32 %47)
  %48 = load volatile i32, ptr %_refcount.i.i.i.i.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %48)
  %cmp.i.i.i.i = icmp eq i32 %48, 0
  br i1 %cmp.i.i.i.i, label %if.then.i.i.i.i, label %do.end5.i.i.i.i, !prof !262

if.then.i.i.i.i:                                  ; preds = %_compound_head.exit.i93
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %46, ptr noundef nonnull @.str.44) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/mm.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 717, 0\0A.popsection", ""() #14, !srcloc !308
  unreachable

do.end5.i.i.i.i:                                  ; preds = %_compound_head.exit.i93
  %call.i.i.i10.i.i.i.i = tail call zeroext i1 @__kasan_check_write(ptr noundef %_refcount.i.i.i.i.i, i32 noundef 4) #14
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !309
  tail call void @llvm.prefetch.p0(ptr %_refcount.i.i.i.i.i, i32 1, i32 3, i32 1) #14
  %49 = tail call { i32, i32 } asm sideeffect "@ atomic_sub_return\0A1:\09ldrex\09$0, [$3]\0A\09sub\09$0, $0, $4\0A\09strex\09$1, $0, [$3]\0A\09teq\09$1, #0\0A\09bne\091b", "=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %_refcount.i.i.i.i.i, ptr %_refcount.i.i.i.i.i, i32 1, ptr elementtype(i32) %_refcount.i.i.i.i.i) #14, !srcloc !310
  %asmresult.i.i.i.i.i.i.i.i.i.i = extractvalue { i32, i32 } %49, 0
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !311
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %asmresult.i.i.i.i.i.i.i.i.i.i)
  %cmp.i.i.i.i.i.i.i = icmp eq i32 %asmresult.i.i.i.i.i.i.i.i.i.i, 0
  callbr void asm sideeffect "1:\0A\09nop\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr getelementptr inbounds (%struct.tracepoint, ptr @__tracepoint_page_ref_mod_and_test, i32 0, i32 1), ptr blockaddress(@grow_dev_page, %if.then.i.i.i.i.i)) #14
          to label %folio_put_testzero.exit.i.i [label %if.then.i.i.i.i.i], !srcloc !253

if.then.i.i.i.i.i:                                ; preds = %do.end5.i.i.i.i
  call void @__sanitizer_cov_trace_pc() #16
  %conv.i.i.i.i.i = zext i1 %cmp.i.i.i.i.i.i.i to i32
  tail call void @__page_ref_mod_and_test(ptr noundef %46, i32 noundef -1, i32 noundef %conv.i.i.i.i.i) #14
  br label %folio_put_testzero.exit.i.i

folio_put_testzero.exit.i.i:                      ; preds = %if.then.i.i.i.i.i, %do.end5.i.i.i.i
  br i1 %cmp.i.i.i.i.i.i.i, label %if.then.i4.i, label %folio_put_testzero.exit.i.i.put_page.exit_crit_edge

folio_put_testzero.exit.i.i.put_page.exit_crit_edge: ; preds = %folio_put_testzero.exit.i.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %put_page.exit

if.then.i4.i:                                     ; preds = %folio_put_testzero.exit.i.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @__put_page(ptr noundef %46) #14
  br label %put_page.exit

put_page.exit:                                    ; preds = %if.then.i4.i, %folio_put_testzero.exit.i.i.put_page.exit_crit_edge
  ret i32 %ret.0
}

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.cttz.i32(i32, i1 immarg) #9

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal fastcc i64 @init_page_buffers(ptr noundef %page, ptr noundef %bdev, i64 noundef %block, i32 noundef %size) unnamed_addr #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = ptrtoint ptr %page to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load volatile i32, ptr %page, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 -1, i32 %1)
  %cmp.i.not.i = icmp eq i32 %1, -1
  br i1 %cmp.i.not.i, label %if.then.i, label %PagePrivate.exit, !prof !262

if.then.i:                                        ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %page, ptr noundef nonnull @.str.15) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 452, 0\0A.popsection", ""() #14, !srcloc !265
  unreachable

PagePrivate.exit:                                 ; preds = %entry
  %2 = ptrtoint ptr %page to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load volatile i32, ptr %page, align 4
  %4 = and i32 %3, 8192
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %4)
  %tobool.not = icmp eq i32 %4, 0
  br i1 %tobool.not, label %do.body4, label %do.end9, !prof !262

do.body4:                                         ; preds = %PagePrivate.exit
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22fs/buffer.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 897, 0\0A.popsection", ""() #14, !srcloc !377
  unreachable

do.end9:                                          ; preds = %PagePrivate.exit
  %private = getelementptr inbounds %struct.page, ptr %page, i32 0, i32 1, i32 0, i32 3
  %5 = ptrtoint ptr %private to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load i32, ptr %private, align 4
  %7 = inttoptr i32 %6 to ptr
  %8 = getelementptr inbounds %struct.page, ptr %page, i32 0, i32 1
  %9 = ptrtoint ptr %8 to i32
  call void @__asan_load4_noabort(i32 %9)
  %10 = load volatile i32, ptr %8, align 4
  %and.i.i = and i32 %10, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i)
  %tobool.not.i.i = icmp eq i32 %and.i.i, 0
  br i1 %tobool.not.i.i, label %if.end.i.i, label %if.then.i.i, !prof !254

if.then.i.i:                                      ; preds = %do.end9
  call void @__sanitizer_cov_trace_pc() #16
  %sub.i.i = add i32 %10, -1
  br label %_compound_head.exit.i

if.end.i.i:                                       ; preds = %do.end9
  call void @__sanitizer_cov_trace_pc() #16
  %11 = ptrtoint ptr %page to i32
  br label %_compound_head.exit.i

_compound_head.exit.i:                            ; preds = %if.end.i.i, %if.then.i.i
  %retval.0.i.i = phi i32 [ %sub.i.i, %if.then.i.i ], [ %11, %if.end.i.i ]
  %12 = inttoptr i32 %retval.0.i.i to ptr
  %13 = getelementptr inbounds %struct.page, ptr %12, i32 0, i32 1
  %14 = ptrtoint ptr %13 to i32
  call void @__asan_load4_noabort(i32 %14)
  %15 = load volatile i32, ptr %13, align 4
  %and.i.i.i.i = and i32 %15, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i.i.i)
  %tobool.not.i.i.i = icmp eq i32 %and.i.i.i.i, 0
  br i1 %tobool.not.i.i.i, label %folio_flags.exit.i.i, label %if.then.i.i.i, !prof !254

if.then.i.i.i:                                    ; preds = %_compound_head.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %12, ptr noundef nonnull @.str.24) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 260, 0\0A.popsection", ""() #14, !srcloc !292
  unreachable

folio_flags.exit.i.i:                             ; preds = %_compound_head.exit.i
  %16 = ptrtoint ptr %12 to i32
  call void @__asan_load4_noabort(i32 %16)
  %17 = load volatile i32, ptr %12, align 4
  %18 = and i32 %17, 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %18)
  %tobool.i.not.i = icmp eq i32 %18, 0
  br i1 %tobool.i.not.i, label %folio_flags.exit.i.i.PageUptodate.exit_crit_edge, label %do.end.i.i

folio_flags.exit.i.i.PageUptodate.exit_crit_edge: ; preds = %folio_flags.exit.i.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %PageUptodate.exit

do.end.i.i:                                       ; preds = %folio_flags.exit.i.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !322
  br label %PageUptodate.exit

PageUptodate.exit:                                ; preds = %do.end.i.i, %folio_flags.exit.i.i.PageUptodate.exit_crit_edge
  %bd_nr_sectors.i.i.i = getelementptr inbounds %struct.block_device, ptr %bdev, i32 0, i32 1
  %19 = ptrtoint ptr %bd_nr_sectors.i.i.i to i32
  call void @__asan_load8_noabort(i32 %19)
  %20 = load i64, ptr %bd_nr_sectors.i.i.i, align 8
  %shl.i.i = shl i64 %20, 9
  call void @__sanitizer_cov_trace_const_cmp8(i64 0, i64 %shl.i.i)
  %tobool.not.i46 = icmp eq i64 %shl.i.i, 0
  br i1 %tobool.not.i46, label %PageUptodate.exit.blkdev_max_block.exit_crit_edge, label %PageUptodate.exit.do.body.i.i_crit_edge

PageUptodate.exit.do.body.i.i_crit_edge:          ; preds = %PageUptodate.exit
  br label %do.body.i.i

PageUptodate.exit.blkdev_max_block.exit_crit_edge: ; preds = %PageUptodate.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %blkdev_max_block.exit

do.body.i.i:                                      ; preds = %do.body.i.i.do.body.i.i_crit_edge, %PageUptodate.exit.do.body.i.i_crit_edge
  %size.addr.0.i.i = phi i32 [ %shr.i.i47, %do.body.i.i.do.body.i.i_crit_edge ], [ %size, %PageUptodate.exit.do.body.i.i_crit_edge ]
  %bits.0.i.i = phi i32 [ %inc.i.i, %do.body.i.i.do.body.i.i_crit_edge ], [ 8, %PageUptodate.exit.do.body.i.i_crit_edge ]
  %inc.i.i = add nuw nsw i32 %bits.0.i.i, 1
  %shr.i.i47 = lshr i32 %size.addr.0.i.i, 1
  %cmp.i.i = icmp ugt i32 %size.addr.0.i.i, 513
  br i1 %cmp.i.i, label %do.body.i.i.do.body.i.i_crit_edge, label %blksize_bits.exit.i

do.body.i.i.do.body.i.i_crit_edge:                ; preds = %do.body.i.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.body.i.i

blksize_bits.exit.i:                              ; preds = %do.body.i.i
  call void @__sanitizer_cov_trace_pc() #16
  %sh_prom.i = zext i32 %inc.i.i to i64
  %shr.i = ashr i64 %shl.i.i, %sh_prom.i
  br label %blkdev_max_block.exit

blkdev_max_block.exit:                            ; preds = %blksize_bits.exit.i, %PageUptodate.exit.blkdev_max_block.exit_crit_edge
  %retval1.0.i = phi i64 [ %shr.i, %blksize_bits.exit.i ], [ -1, %PageUptodate.exit.blkdev_max_block.exit_crit_edge ]
  br label %do.body12

do.body12:                                        ; preds = %if.end21.do.body12_crit_edge, %blkdev_max_block.exit
  %block.addr.0 = phi i64 [ %block, %blkdev_max_block.exit ], [ %inc, %if.end21.do.body12_crit_edge ]
  %bh.0 = phi ptr [ %7, %blkdev_max_block.exit ], [ %34, %if.end21.do.body12_crit_edge ]
  %21 = ptrtoint ptr %bh.0 to i32
  call void @__asan_load4_noabort(i32 %21)
  %22 = load volatile i32, ptr %bh.0, align 4
  %23 = and i32 %22, 16
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %23)
  %tobool14.not = icmp eq i32 %23, 0
  br i1 %tobool14.not, label %if.then15, label %do.body12.if.end21_crit_edge

do.body12.if.end21_crit_edge:                     ; preds = %do.body12
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end21

if.then15:                                        ; preds = %do.body12
  %b_end_io = getelementptr inbounds %struct.buffer_head, ptr %bh.0, i32 0, i32 7
  %24 = ptrtoint ptr %b_end_io to i32
  call void @__asan_store4_noabort(i32 %24)
  store ptr null, ptr %b_end_io, align 4
  %b_private = getelementptr inbounds %struct.buffer_head, ptr %bh.0, i32 0, i32 8
  %25 = ptrtoint ptr %b_private to i32
  call void @__asan_store4_noabort(i32 %25)
  store ptr null, ptr %b_private, align 8
  %b_bdev = getelementptr inbounds %struct.buffer_head, ptr %bh.0, i32 0, i32 6
  %26 = ptrtoint ptr %b_bdev to i32
  call void @__asan_store4_noabort(i32 %26)
  store ptr %bdev, ptr %b_bdev, align 8
  %b_blocknr = getelementptr inbounds %struct.buffer_head, ptr %bh.0, i32 0, i32 3
  %27 = ptrtoint ptr %b_blocknr to i32
  call void @__asan_store8_noabort(i32 %27)
  store i64 %block.addr.0, ptr %b_blocknr, align 8
  br i1 %tobool.i.not.i, label %if.then15.if.end18_crit_edge, label %if.then17

if.then15.if.end18_crit_edge:                     ; preds = %if.then15
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end18

if.then17:                                        ; preds = %if.then15
  %28 = ptrtoint ptr %bh.0 to i32
  call void @__asan_load4_noabort(i32 %28)
  %29 = load volatile i32, ptr %bh.0, align 4
  %and1.i.i42 = and i32 %29, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and1.i.i42)
  %tobool.not.i = icmp eq i32 %and1.i.i42, 0
  br i1 %tobool.not.i, label %if.then.i43, label %if.then17.if.end18_crit_edge

if.then17.if.end18_crit_edge:                     ; preds = %if.then17
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end18

if.then.i43:                                      ; preds = %if.then17
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @_set_bit(i32 noundef 0, ptr noundef %bh.0) #14
  br label %if.end18

if.end18:                                         ; preds = %if.then.i43, %if.then17.if.end18_crit_edge, %if.then15.if.end18_crit_edge
  call void @__sanitizer_cov_trace_cmp8(i64 %block.addr.0, i64 %retval1.0.i)
  %cmp = icmp ult i64 %block.addr.0, %retval1.0.i
  br i1 %cmp, label %if.then19, label %if.end18.if.end21_crit_edge

if.end18.if.end21_crit_edge:                      ; preds = %if.end18
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end21

if.then19:                                        ; preds = %if.end18
  %30 = ptrtoint ptr %bh.0 to i32
  call void @__asan_load4_noabort(i32 %30)
  %31 = load volatile i32, ptr %bh.0, align 4
  %32 = and i32 %31, 16
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %32)
  %tobool.not.i44 = icmp eq i32 %32, 0
  br i1 %tobool.not.i44, label %if.then.i45, label %if.then19.if.end21_crit_edge

if.then19.if.end21_crit_edge:                     ; preds = %if.then19
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end21

if.then.i45:                                      ; preds = %if.then19
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @_set_bit(i32 noundef 4, ptr noundef %bh.0) #14
  br label %if.end21

if.end21:                                         ; preds = %if.then.i45, %if.then19.if.end21_crit_edge, %if.end18.if.end21_crit_edge, %do.body12.if.end21_crit_edge
  %inc = add i64 %block.addr.0, 1
  %b_this_page = getelementptr inbounds %struct.buffer_head, ptr %bh.0, i32 0, i32 1
  %33 = ptrtoint ptr %b_this_page to i32
  call void @__asan_load4_noabort(i32 %33)
  %34 = load ptr, ptr %b_this_page, align 4
  %cmp23.not = icmp eq ptr %34, %7
  br i1 %cmp23.not, label %do.end24, label %if.end21.do.body12_crit_edge

if.end21.do.body12_crit_edge:                     ; preds = %if.end21
  call void @__sanitizer_cov_trace_pc() #16
  br label %do.body12

do.end24:                                         ; preds = %if.end21
  call void @__sanitizer_cov_trace_pc() #16
  ret i64 %retval1.0.i
}

; Function Attrs: null_pointer_is_valid
declare dso_local void @on_each_cpu_cond_mask(ptr noundef, ptr noundef, ptr noundef, i1 noundef zeroext, ptr noundef) local_unnamed_addr #1

; Function Attrs: nounwind readonly
declare i32 @llvm.read_register.i32(metadata) #10

; Function Attrs: null_pointer_is_valid
declare dso_local void @__page_ref_mod(ptr noundef, i32 noundef) local_unnamed_addr #1

; Function Attrs: null_pointer_is_valid
declare dso_local void @__folio_lock(ptr noundef) local_unnamed_addr #1

; Function Attrs: null_pointer_is_valid
declare dso_local void @__pagevec_release(ptr noundef) local_unnamed_addr #1

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @__cond_resched() local_unnamed_addr #1

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #9

; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
declare ptr @llvm.returnaddress(i32 immarg) #11

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @_test_and_clear_bit(i32 noundef, ptr noundef) local_unnamed_addr #1

; Function Attrs: null_pointer_is_valid
declare dso_local void @__put_page(ptr noundef) local_unnamed_addr #1

; Function Attrs: null_pointer_is_valid
declare dso_local void @__page_ref_mod_and_test(ptr noundef, i32 noundef, i32 noundef) local_unnamed_addr #1

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal void @end_buffer_async_read_io(ptr noundef %bh, i32 noundef %uptodate) #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %uptodate)
  %tobool.not = icmp eq i32 %uptodate, 0
  br i1 %tobool.not, label %entry.if.end11_crit_edge, label %land.lhs.true

entry.if.end11_crit_edge:                         ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end11

land.lhs.true:                                    ; preds = %entry
  %b_page = getelementptr inbounds %struct.buffer_head, ptr %bh, i32 0, i32 2
  %0 = ptrtoint ptr %b_page to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %b_page, align 8
  %mapping = getelementptr inbounds %struct.page, ptr %1, i32 0, i32 1, i32 0, i32 1
  %2 = ptrtoint ptr %mapping to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load ptr, ptr %mapping, align 4
  %4 = ptrtoint ptr %3 to i32
  call void @__asan_load4_noabort(i32 %4)
  %5 = load ptr, ptr %3, align 4
  %i_flags.i.i = getelementptr inbounds %struct.inode, ptr %5, i32 0, i32 4
  %6 = ptrtoint ptr %i_flags.i.i to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load i32, ptr %i_flags.i.i, align 4
  %and.i.i = and i32 %7, 16384
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i)
  %tobool.not.i.i = icmp eq i32 %and.i.i, 0
  br i1 %tobool.not.i.i, label %land.lhs.true.if.end11_crit_edge, label %fscrypt_needs_contents_encryption.exit.i

land.lhs.true.if.end11_crit_edge:                 ; preds = %land.lhs.true
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end11

fscrypt_needs_contents_encryption.exit.i:         ; preds = %land.lhs.true
  %8 = ptrtoint ptr %5 to i32
  call void @__asan_load2_noabort(i32 %8)
  %9 = load i16, ptr %5, align 8
  %10 = and i16 %9, -4096
  call void @__sanitizer_cov_trace_const_cmp2(i16 -32768, i16 %10)
  %cmp.i.i = icmp eq i16 %10, -32768
  br i1 %cmp.i.i, label %fscrypt_inode_uses_fs_layer_crypto.exit, label %fscrypt_needs_contents_encryption.exit.i.if.end11_crit_edge

fscrypt_needs_contents_encryption.exit.i.if.end11_crit_edge: ; preds = %fscrypt_needs_contents_encryption.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end11

fscrypt_inode_uses_fs_layer_crypto.exit:          ; preds = %fscrypt_needs_contents_encryption.exit.i
  %call1.i = tail call zeroext i1 @__fscrypt_inode_uses_inline_crypto(ptr noundef %5) #14
  br i1 %call1.i, label %fscrypt_inode_uses_fs_layer_crypto.exit.if.end11_crit_edge, label %if.then

fscrypt_inode_uses_fs_layer_crypto.exit.if.end11_crit_edge: ; preds = %fscrypt_inode_uses_fs_layer_crypto.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end11

if.then:                                          ; preds = %fscrypt_inode_uses_fs_layer_crypto.exit
  call void @__asan_load4_noabort(i32 ptrtoint (ptr getelementptr inbounds ([4 x [14 x ptr]], ptr @kmalloc_caches, i32 0, i32 0, i32 7) to i32))
  %11 = load ptr, ptr getelementptr inbounds ([4 x [14 x ptr]], ptr @kmalloc_caches, i32 0, i32 0, i32 7), align 4
  %call7.i = tail call noalias align 8 ptr @kmem_cache_alloc_trace(ptr noundef %11, i32 noundef 2592, i32 noundef 48) #19
  %tobool2.not = icmp eq ptr %call7.i, null
  br i1 %tobool2.not, label %if.then.if.end11_crit_edge, label %cleanup

if.then.if.end11_crit_edge:                       ; preds = %if.then
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end11

cleanup:                                          ; preds = %if.then
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @__init_work(ptr noundef nonnull %call7.i, i32 noundef 0) #14
  %12 = ptrtoint ptr %call7.i to i32
  call void @__asan_store4_noabort(i32 %12)
  store i32 -64, ptr %call7.i, align 8
  %lockdep_map = getelementptr inbounds %struct.work_struct, ptr %call7.i, i32 0, i32 3
  tail call void @lockdep_init_map_type(ptr noundef %lockdep_map, ptr noundef nonnull @.str.46, ptr noundef nonnull @end_buffer_async_read_io.__key, i32 noundef 0, i8 noundef zeroext 0, i8 noundef zeroext 0, i8 noundef zeroext 0) #14
  %entry7 = getelementptr inbounds %struct.work_struct, ptr %call7.i, i32 0, i32 1
  %13 = ptrtoint ptr %entry7 to i32
  call void @__asan_store4_noabort(i32 %13)
  store volatile ptr %entry7, ptr %entry7, align 4
  %prev.i = getelementptr inbounds %struct.work_struct, ptr %call7.i, i32 0, i32 1, i32 1
  %14 = ptrtoint ptr %prev.i to i32
  call void @__asan_store4_noabort(i32 %14)
  store ptr %entry7, ptr %prev.i, align 8
  %func = getelementptr inbounds %struct.work_struct, ptr %call7.i, i32 0, i32 2
  %15 = ptrtoint ptr %func to i32
  call void @__asan_store4_noabort(i32 %15)
  store ptr @decrypt_bh, ptr %func, align 4
  %bh9 = getelementptr inbounds %struct.decrypt_bh_ctx, ptr %call7.i, i32 0, i32 1
  %16 = ptrtoint ptr %bh9 to i32
  call void @__asan_store4_noabort(i32 %16)
  store ptr %bh, ptr %bh9, align 4
  tail call void @fscrypt_enqueue_decrypt_work(ptr noundef nonnull %call7.i) #14
  br label %return

if.end11:                                         ; preds = %if.then.if.end11_crit_edge, %fscrypt_inode_uses_fs_layer_crypto.exit.if.end11_crit_edge, %fscrypt_needs_contents_encryption.exit.i.if.end11_crit_edge, %land.lhs.true.if.end11_crit_edge, %entry.if.end11_crit_edge
  %uptodate.addr.1 = phi i32 [ %uptodate, %fscrypt_inode_uses_fs_layer_crypto.exit.if.end11_crit_edge ], [ 0, %entry.if.end11_crit_edge ], [ %uptodate, %fscrypt_needs_contents_encryption.exit.i.if.end11_crit_edge ], [ %uptodate, %land.lhs.true.if.end11_crit_edge ], [ 0, %if.then.if.end11_crit_edge ]
  tail call fastcc void @end_buffer_async_read(ptr noundef %bh, i32 noundef %uptodate.addr.1)
  br label %return

return:                                           ; preds = %if.end11, %cleanup
  ret void
}

; Function Attrs: null_pointer_is_valid
declare dso_local void @__init_work(ptr noundef, i32 noundef) local_unnamed_addr #1

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal void @decrypt_bh(ptr noundef %work) #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %bh1 = getelementptr inbounds %struct.decrypt_bh_ctx, ptr %work, i32 0, i32 1
  %0 = ptrtoint ptr %bh1 to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %bh1, align 4
  %b_page = getelementptr inbounds %struct.buffer_head, ptr %1, i32 0, i32 2
  %2 = ptrtoint ptr %b_page to i32
  call void @__asan_load4_noabort(i32 %2)
  %3 = load ptr, ptr %b_page, align 8
  %b_size = getelementptr inbounds %struct.buffer_head, ptr %1, i32 0, i32 4
  %4 = ptrtoint ptr %b_size to i32
  call void @__asan_load4_noabort(i32 %4)
  %5 = load i32, ptr %b_size, align 8
  %b_data = getelementptr inbounds %struct.buffer_head, ptr %1, i32 0, i32 5
  %6 = ptrtoint ptr %b_data to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load ptr, ptr %b_data, align 4
  %8 = ptrtoint ptr %7 to i32
  %and = and i32 %8, 4095
  %call = tail call i32 @fscrypt_decrypt_pagecache_blocks(ptr noundef %3, i32 noundef %5, i32 noundef %and) #14
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %call)
  %cmp = icmp eq i32 %call, 0
  %conv = zext i1 %cmp to i32
  tail call fastcc void @end_buffer_async_read(ptr noundef %1, i32 noundef %conv)
  tail call void @kfree(ptr noundef %work) #14
  ret void
}

; Function Attrs: null_pointer_is_valid
declare dso_local void @fscrypt_enqueue_decrypt_work(ptr noundef) local_unnamed_addr #1

; Function Attrs: null_pointer_is_valid
declare dso_local zeroext i1 @__fscrypt_inode_uses_inline_crypto(ptr noundef) local_unnamed_addr #1

; Function Attrs: null_pointer_is_valid allocsize(2)
declare dso_local noalias ptr @kmem_cache_alloc_trace(ptr noundef, i32 noundef, i32 noundef) local_unnamed_addr #12

; Function Attrs: null_pointer_is_valid
declare dso_local void @lockdep_init_map_type(ptr noundef, ptr noundef, ptr noundef, i32 noundef, i8 noundef zeroext, i8 noundef zeroext, i8 noundef zeroext) local_unnamed_addr #1

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @fscrypt_decrypt_pagecache_blocks(ptr noundef, i32 noundef, i32 noundef) local_unnamed_addr #1

; Function Attrs: null_pointer_is_valid
declare dso_local void @kfree(ptr noundef) local_unnamed_addr #1

; Function Attrs: null_pointer_is_valid
declare dso_local void @balance_dirty_pages_ratelimited(ptr noundef) local_unnamed_addr #1

; Function Attrs: null_pointer_is_valid
declare dso_local void @fscrypt_set_bio_crypt_ctx_bh(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #1

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @bio_add_page(ptr noundef, ptr noundef, i32 noundef, i32 noundef) local_unnamed_addr #1

; Function Attrs: nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal void @end_bio_bh_io_sync(ptr noundef %bio) #2 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  call void @llvm.arm.gnu.eabi.mcount()
  %bi_private = getelementptr inbounds %struct.bio, ptr %bio, i32 0, i32 11
  %0 = ptrtoint ptr %bi_private to i32
  call void @__asan_load4_noabort(i32 %0)
  %1 = load ptr, ptr %bi_private, align 4
  %bi_flags.i = getelementptr inbounds %struct.bio, ptr %bio, i32 0, i32 3
  %2 = ptrtoint ptr %bi_flags.i to i32
  call void @__asan_load2_noabort(i32 %2)
  %3 = load i16, ptr %bi_flags.i, align 4
  %4 = and i16 %3, 16
  call void @__sanitizer_cov_trace_const_cmp2(i16 0, i16 %4)
  %cmp.i.not = icmp eq i16 %4, 0
  br i1 %cmp.i.not, label %entry.if.end_crit_edge, label %if.then, !prof !254

entry.if.end_crit_edge:                           ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  br label %if.end

if.then:                                          ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @_set_bit(i32 noundef 12, ptr noundef %1) #14
  br label %if.end

if.end:                                           ; preds = %if.then, %entry.if.end_crit_edge
  %b_end_io = getelementptr inbounds %struct.buffer_head, ptr %1, i32 0, i32 7
  %5 = ptrtoint ptr %b_end_io to i32
  call void @__asan_load4_noabort(i32 %5)
  %6 = load ptr, ptr %b_end_io, align 4
  %bi_status = getelementptr inbounds %struct.bio, ptr %bio, i32 0, i32 6
  %7 = ptrtoint ptr %bi_status to i32
  call void @__asan_load1_noabort(i32 %7)
  %8 = load i8, ptr %bi_status, align 2
  call void @__sanitizer_cov_trace_const_cmp1(i8 0, i8 %8)
  %tobool2.not = icmp eq i8 %8, 0
  %lnot.ext4 = zext i1 %tobool2.not to i32
  tail call void %6(ptr noundef %1, i32 noundef %lnot.ext4) #14
  tail call void @bio_put(ptr noundef %bio) #14
  ret void
}

; Function Attrs: null_pointer_is_valid
declare dso_local void @guard_bio_eod(ptr noundef) local_unnamed_addr #1

; Function Attrs: null_pointer_is_valid
declare dso_local void @wbc_account_cgroup_owner(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #1

; Function Attrs: null_pointer_is_valid
declare dso_local void @submit_bio(ptr noundef) local_unnamed_addr #1

; Function Attrs: null_pointer_is_valid
declare dso_local ptr @bio_alloc_bioset(i32 noundef, i16 noundef zeroext, ptr noundef) local_unnamed_addr #1

; Function Attrs: null_pointer_is_valid
declare dso_local void @bio_associate_blkg(ptr noundef) local_unnamed_addr #1

; Function Attrs: null_pointer_is_valid
declare dso_local void @bio_put(ptr noundef) local_unnamed_addr #1

; Function Attrs: null_pointer_is_valid
declare dso_local void @bio_associate_blkg_from_css(ptr noundef, ptr noundef) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync)
define internal fastcc void @folio_detach_private(ptr noundef %folio) unnamed_addr #0 align 64 {
entry:
  call void @__sanitizer_cov_trace_pc() #16
  %private.i = getelementptr inbounds %struct.anon.113, ptr %folio, i32 0, i32 4
  %0 = getelementptr inbounds %struct.page, ptr %folio, i32 0, i32 1
  %1 = ptrtoint ptr %0 to i32
  call void @__asan_load4_noabort(i32 %1)
  %2 = load volatile i32, ptr %0, align 4
  %and.i.i.i = and i32 %2, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i.i)
  %tobool.not.i.i = icmp eq i32 %and.i.i.i, 0
  br i1 %tobool.not.i.i, label %folio_test_private.exit, label %if.then.i.i, !prof !254

if.then.i.i:                                      ; preds = %entry
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %folio, ptr noundef nonnull @.str.24) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 260, 0\0A.popsection", ""() #14, !srcloc !292
  unreachable

folio_test_private.exit:                          ; preds = %entry
  %3 = ptrtoint ptr %folio to i32
  call void @__asan_load4_noabort(i32 %3)
  %4 = load volatile i32, ptr %folio, align 4
  %5 = and i32 %4, 8192
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %5)
  %tobool.i.not = icmp eq i32 %5, 0
  br i1 %tobool.i.not, label %folio_test_private.exit.cleanup_crit_edge, label %if.end

folio_test_private.exit.cleanup_crit_edge:        ; preds = %folio_test_private.exit
  call void @__sanitizer_cov_trace_pc() #16
  br label %cleanup

if.end:                                           ; preds = %folio_test_private.exit
  %6 = ptrtoint ptr %0 to i32
  call void @__asan_load4_noabort(i32 %6)
  %7 = load volatile i32, ptr %0, align 4
  %and.i.i.i1 = and i32 %7, 1
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %and.i.i.i1)
  %tobool.not.i.i2 = icmp eq i32 %and.i.i.i1, 0
  br i1 %tobool.not.i.i2, label %folio_clear_private.exit, label %if.then.i.i3, !prof !254

if.then.i.i3:                                     ; preds = %if.end
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %folio, ptr noundef nonnull @.str.24) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 260, 0\0A.popsection", ""() #14, !srcloc !292
  unreachable

folio_clear_private.exit:                         ; preds = %if.end
  tail call void @_clear_bit(i32 noundef 13, ptr noundef %folio) #14
  %8 = ptrtoint ptr %private.i to i32
  call void @__asan_store4_noabort(i32 %8)
  store ptr null, ptr %private.i, align 4
  %_refcount.i.i.i.i = getelementptr inbounds %struct.page, ptr %folio, i32 0, i32 3
  %call.i.i.i.i.i.i = tail call zeroext i1 @__kasan_check_read(ptr noundef %_refcount.i.i.i.i, i32 noundef 4) #14
  %9 = ptrtoint ptr %_refcount.i.i.i.i to i32
  call void @__asan_load4_noabort(i32 %9)
  %10 = load volatile i32, ptr %_refcount.i.i.i.i, align 4
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %10)
  %cmp.i.i.i = icmp eq i32 %10, 0
  br i1 %cmp.i.i.i, label %if.then.i.i.i, label %do.end5.i.i.i, !prof !262

if.then.i.i.i:                                    ; preds = %folio_clear_private.exit
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @dump_page(ptr noundef %folio, ptr noundef nonnull @.str.44) #14
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/mm.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 717, 0\0A.popsection", ""() #14, !srcloc !308
  unreachable

do.end5.i.i.i:                                    ; preds = %folio_clear_private.exit
  %call.i.i.i10.i.i.i = tail call zeroext i1 @__kasan_check_write(ptr noundef %_refcount.i.i.i.i, i32 noundef 4) #14
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !309
  tail call void @llvm.prefetch.p0(ptr %_refcount.i.i.i.i, i32 1, i32 3, i32 1) #14
  %11 = tail call { i32, i32 } asm sideeffect "@ atomic_sub_return\0A1:\09ldrex\09$0, [$3]\0A\09sub\09$0, $0, $4\0A\09strex\09$1, $0, [$3]\0A\09teq\09$1, #0\0A\09bne\091b", "=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %_refcount.i.i.i.i, ptr %_refcount.i.i.i.i, i32 1, ptr elementtype(i32) %_refcount.i.i.i.i) #14, !srcloc !310
  %asmresult.i.i.i.i.i.i.i.i.i = extractvalue { i32, i32 } %11, 0
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #14, !srcloc !311
  call void @__sanitizer_cov_trace_const_cmp4(i32 0, i32 %asmresult.i.i.i.i.i.i.i.i.i)
  %cmp.i.i.i.i.i.i = icmp eq i32 %asmresult.i.i.i.i.i.i.i.i.i, 0
  callbr void asm sideeffect "1:\0A\09nop\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr getelementptr inbounds (%struct.tracepoint, ptr @__tracepoint_page_ref_mod_and_test, i32 0, i32 1), ptr blockaddress(@folio_detach_private, %if.then.i.i.i.i)) #14
          to label %folio_put_testzero.exit.i [label %if.then.i.i.i.i], !srcloc !253

if.then.i.i.i.i:                                  ; preds = %do.end5.i.i.i
  call void @__sanitizer_cov_trace_pc() #16
  %conv.i.i.i.i = zext i1 %cmp.i.i.i.i.i.i to i32
  tail call void @__page_ref_mod_and_test(ptr noundef %folio, i32 noundef -1, i32 noundef %conv.i.i.i.i) #14
  br label %folio_put_testzero.exit.i

folio_put_testzero.exit.i:                        ; preds = %if.then.i.i.i.i, %do.end5.i.i.i
  br i1 %cmp.i.i.i.i.i.i, label %if.then.i, label %folio_put_testzero.exit.i.cleanup_crit_edge

folio_put_testzero.exit.i.cleanup_crit_edge:      ; preds = %folio_put_testzero.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  br label %cleanup

if.then.i:                                        ; preds = %folio_put_testzero.exit.i
  call void @__sanitizer_cov_trace_pc() #16
  tail call void @__put_page(ptr noundef %folio) #14
  br label %cleanup

cleanup:                                          ; preds = %if.then.i, %folio_put_testzero.exit.i.cleanup_crit_edge, %folio_test_private.exit.cleanup_crit_edge
  ret void
}

; Function Attrs: null_pointer_is_valid
declare dso_local void @__folio_cancel_dirty(ptr noundef) local_unnamed_addr #1

; Function Attrs: null_pointer_is_valid
declare dso_local noalias ptr @kmem_cache_alloc(ptr noundef, i32 noundef) local_unnamed_addr #1

; Function Attrs: mustprogress nofree nounwind null_pointer_is_valid readonly willreturn
declare dso_local i32 @cpumask_next(i32 noundef, ptr noundef) local_unnamed_addr #13

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @__cpuhp_setup_state(i32 noundef, ptr noundef, i1 noundef zeroext, ptr noundef, ptr noundef, i1 noundef zeroext) local_unnamed_addr #1

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.umax.i32(i32, i32) #9

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.umin.i32(i32, i32) #9

; Function Attrs: nounwind
declare void @llvm.arm.gnu.eabi.mcount() #14

declare void @__sanitizer_cov_trace_cmp4(i32 zeroext, i32 zeroext)

declare void @__sanitizer_cov_trace_cmp8(i64, i64)

declare void @__sanitizer_cov_trace_const_cmp1(i8 zeroext, i8 zeroext)

declare void @__sanitizer_cov_trace_const_cmp2(i16 zeroext, i16 zeroext)

declare void @__sanitizer_cov_trace_const_cmp4(i32 zeroext, i32 zeroext)

declare void @__sanitizer_cov_trace_const_cmp8(i64, i64)

declare void @__sanitizer_cov_trace_switch(i64, ptr)

declare void @__sanitizer_cov_trace_pc()

declare void @__asan_load1_noabort(i32)

declare void @__asan_load2_noabort(i32)

declare void @__asan_load4_noabort(i32)

declare void @__asan_load8_noabort(i32)

declare void @__asan_store1_noabort(i32)

declare void @__asan_store2_noabort(i32)

declare void @__asan_store4_noabort(i32)

declare void @__asan_store8_noabort(i32)

declare ptr @memset(ptr, i32, i32)

declare void @__asan_register_globals(i32, i32)

declare void @__asan_unregister_globals(i32, i32)

; Function Attrs: nounwind uwtable(sync)
define internal void @asan.module_ctor() #15 {
  call void @__asan_register_globals(i32 ptrtoint (ptr @0 to i32), i32 47)
  ret void
}

; Function Attrs: nounwind uwtable(sync)
define internal void @asan.module_dtor() #15 {
  call void @__asan_unregister_globals(i32 ptrtoint (ptr @0 to i32), i32 47)
  ret void
}

attributes #0 = { inlinehint nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync) "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="mpcore" "target-features"="+armv6k,+dsp,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" "warn-stack-size"="1024" }
attributes #1 = { null_pointer_is_valid "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="mpcore" "target-features"="+armv6k,+dsp,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" }
attributes #2 = { nounwind null_pointer_is_valid sanitize_address sspstrong uwtable(sync) "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="mpcore" "target-features"="+armv6k,+dsp,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" "warn-stack-size"="1024" }
attributes #3 = { argmemonly nocallback nofree nosync nounwind willreturn }
attributes #4 = { argmemonly mustprogress nofree norecurse nounwind null_pointer_is_valid sanitize_address sspstrong willreturn uwtable(sync) "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="mpcore" "target-features"="+armv6k,+dsp,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" "warn-stack-size"="1024" }
attributes #5 = { cold null_pointer_is_valid "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="mpcore" "target-features"="+armv6k,+dsp,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" }
attributes #6 = { nofree norecurse nosync nounwind null_pointer_is_valid readonly sanitize_address sspstrong uwtable(sync) "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="mpcore" "target-features"="+armv6k,+dsp,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" "warn-stack-size"="1024" }
attributes #7 = { cold nounwind null_pointer_is_valid optsize sanitize_address sspstrong uwtable(sync) "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="mpcore" "target-features"="+armv6k,+dsp,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" "warn-stack-size"="1024" }
attributes #8 = { inaccessiblemem_or_argmemonly nocallback nofree nosync nounwind willreturn }
attributes #9 = { nocallback nofree nosync nounwind readnone speculatable willreturn }
attributes #10 = { nounwind readonly }
attributes #11 = { nocallback nofree nosync nounwind readnone willreturn }
attributes #12 = { null_pointer_is_valid allocsize(2) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="mpcore" "target-features"="+armv6k,+dsp,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" }
attributes #13 = { mustprogress nofree nounwind null_pointer_is_valid readonly willreturn "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="mpcore" "target-features"="+armv6k,+dsp,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" }
attributes #14 = { nounwind }
attributes #15 = { nounwind uwtable(sync) "frame-pointer"="all" }
attributes #16 = { nomerge }
attributes #17 = { cold nounwind }
attributes #18 = { nounwind readonly willreturn }
attributes #19 = { nounwind allocsize(2) }

!llvm.asan.globals = !{!0, !2, !4, !6, !8, !10, !12, !14, !16, !18, !20, !22, !24, !25, !26, !27, !28, !30, !32, !34, !36, !38, !40, !42, !44, !46, !48, !50, !52, !54, !56, !58, !60, !62, !64, !66, !68, !70, !72, !74, !76, !78, !80, !82, !84, !86, !88, !90, !92, !94, !96, !98, !100, !102, !104, !106, !108, !110, !112, !114, !116, !118, !120, !122, !124, !126, !127, !129, !131, !133, !135, !137, !139, !141, !142, !144, !146, !148, !149, !151, !152, !153, !154, !156, !157, !159, !161, !163, !165, !166, !167, !168, !169, !170, !172, !174, !176, !178, !180, !182, !184, !186, !188, !190, !191, !193, !194, !195, !197, !198, !200, !202, !204, !205, !207, !209, !210, !211, !213, !214, !215, !216, !218, !219, !220, !222, !223, !224, !225, !227, !229, !231, !233, !235, !236, !238, !239, !241}
!llvm.named.register.sp = !{!243}
!llvm.module.flags = !{!244, !245, !246, !247, !248, !249, !250, !251}
!llvm.ident = !{!252}

!0 = !{ptr @__ksymtab_touch_buffer, !1, !"__ksymtab_touch_buffer", i1 false, i1 false}
!1 = !{!"../fs/buffer.c", i32 65, i32 1}
!2 = !{ptr @__ksymtab___lock_buffer, !3, !"__ksymtab___lock_buffer", i1 false, i1 false}
!3 = !{!"../fs/buffer.c", i32 71, i32 1}
!4 = !{ptr @__ksymtab_unlock_buffer, !5, !"__ksymtab_unlock_buffer", i1 false, i1 false}
!5 = !{!"../fs/buffer.c", i32 79, i32 1}
!6 = !{ptr @__ksymtab_buffer_check_dirty_writeback, !7, !"__ksymtab_buffer_check_dirty_writeback", i1 false, i1 false}
!7 = !{!"../fs/buffer.c", i32 113, i32 1}
!8 = !{ptr @__ksymtab___wait_on_buffer, !9, !"__ksymtab___wait_on_buffer", i1 false, i1 false}
!9 = !{!"../fs/buffer.c", i32 124, i32 1}
!10 = !{ptr @__ksymtab_end_buffer_read_sync, !11, !"__ksymtab_end_buffer_read_sync", i1 false, i1 false}
!11 = !{!"../fs/buffer.c", i32 162, i32 1}
!12 = !{ptr @.str, !13, !"<string literal>", i1 false, i1 false}
!13 = !{!"../fs/buffer.c", i32 169, i32 23}
!14 = !{ptr @__ksymtab_end_buffer_write_sync, !15, !"__ksymtab_end_buffer_write_sync", i1 false, i1 false}
!15 = !{!"../fs/buffer.c", i32 176, i32 1}
!16 = !{ptr @.str.1, !17, !"<string literal>", i1 false, i1 false}
!17 = !{!"../fs/buffer.c", i32 355, i32 23}
!18 = !{ptr @__ksymtab_end_buffer_async_write, !19, !"__ksymtab_end_buffer_async_write", i1 false, i1 false}
!19 = !{!"../fs/buffer.c", i32 382, i32 1}
!20 = !{ptr @__ksymtab_mark_buffer_async_write, !21, !"__ksymtab_mark_buffer_async_write", i1 false, i1 false}
!21 = !{!"../fs/buffer.c", i32 422, i32 1}
!22 = !{ptr @.str.2, !23, !"<string literal>", i1 false, i1 false}
!23 = !{!"../fs/buffer.c", i32 527, i32 3}
!24 = !{ptr @.str.3, !23, !"<string literal>", i1 false, i1 false}
!25 = !{ptr @.str.4, !23, !"<string literal>", i1 false, i1 false}
!26 = !{ptr @emergency_thaw_bdev._entry, !23, !"_entry", i1 false, i1 false}
!27 = !{ptr @emergency_thaw_bdev._entry_ptr, !23, !"_entry_ptr", i1 false, i1 false}
!28 = !{ptr @__ksymtab_sync_mapping_buffers, !29, !"__ksymtab_sync_mapping_buffers", i1 false, i1 false}
!29 = !{!"../fs/buffer.c", i32 551, i32 1}
!30 = !{ptr @__ksymtab_mark_buffer_dirty_inode, !31, !"__ksymtab_mark_buffer_dirty_inode", i1 false, i1 false}
!31 = !{!"../fs/buffer.c", i32 589, i32 1}
!32 = !{ptr @__ksymtab___set_page_dirty_buffers, !33, !"__ksymtab___set_page_dirty_buffers", i1 false, i1 false}
!33 = !{!"../fs/buffer.c", i32 652, i32 1}
!34 = !{ptr @__ksymtab_invalidate_inode_buffers, !35, !"__ksymtab_invalidate_inode_buffers", i1 false, i1 false}
!35 = !{!"../fs/buffer.c", i32 774, i32 1}
!36 = !{ptr @__ksymtab_alloc_page_buffers, !37, !"__ksymtab_alloc_page_buffers", i1 false, i1 false}
!37 = !{!"../fs/buffer.c", i32 862, i32 1}
!38 = distinct !{null, !39, !"__already_done", i1 false, i1 false}
!39 = !{!"../fs/buffer.c", i32 1084, i32 2}
!40 = !{ptr @__ksymtab_mark_buffer_dirty, !41, !"__ksymtab_mark_buffer_dirty", i1 false, i1 false}
!41 = !{!"../fs/buffer.c", i32 1115, i32 1}
!42 = !{ptr @__ksymtab_mark_buffer_write_io_error, !43, !"__ksymtab_mark_buffer_write_io_error", i1 false, i1 false}
!43 = !{!"../fs/buffer.c", i32 1133, i32 1}
!44 = !{ptr @.str.5, !45, !"<string literal>", i1 false, i1 false}
!45 = !{!"../fs/buffer.c", i32 1148, i32 2}
!46 = !{ptr @__ksymtab___brelse, !47, !"__ksymtab___brelse", i1 false, i1 false}
!47 = !{!"../fs/buffer.c", i32 1150, i32 1}
!48 = !{ptr @__ksymtab___bforget, !49, !"__ksymtab___bforget", i1 false, i1 false}
!49 = !{!"../fs/buffer.c", i32 1169, i32 1}
!50 = !{ptr @bh_lrus, !51, !"bh_lrus", i1 false, i1 false}
!51 = !{!"../fs/buffer.c", i32 1209, i32 8}
!52 = !{ptr @__ksymtab___find_get_block, !53, !"__ksymtab___find_get_block", i1 false, i1 false}
!53 = !{!"../fs/buffer.c", i32 1316, i32 1}
!54 = !{ptr @__ksymtab___getblk_gfp, !55, !"__ksymtab___getblk_gfp", i1 false, i1 false}
!55 = !{!"../fs/buffer.c", i32 1337, i32 1}
!56 = !{ptr @__ksymtab___breadahead, !57, !"__ksymtab___breadahead", i1 false, i1 false}
!57 = !{!"../fs/buffer.c", i32 1350, i32 1}
!58 = !{ptr @__ksymtab___breadahead_gfp, !59, !"__ksymtab___breadahead_gfp", i1 false, i1 false}
!59 = !{!"../fs/buffer.c", i32 1361, i32 1}
!60 = !{ptr @__ksymtab___bread_gfp, !61, !"__ksymtab___bread_gfp", i1 false, i1 false}
!61 = !{!"../fs/buffer.c", i32 1385, i32 1}
!62 = !{ptr @__ksymtab_invalidate_bh_lrus, !63, !"__ksymtab_invalidate_bh_lrus", i1 false, i1 false}
!63 = !{!"../fs/buffer.c", i32 1426, i32 1}
!64 = !{ptr @__ksymtab_set_bh_page, !65, !"__ksymtab_set_bh_page", i1 false, i1 false}
!65 = !{!"../fs/buffer.c", i32 1455, i32 1}
!66 = !{ptr @__ksymtab_block_invalidatepage, !67, !"__ksymtab_block_invalidatepage", i1 false, i1 false}
!67 = !{!"../fs/buffer.c", i32 1547, i32 1}
!68 = !{ptr @__ksymtab_create_empty_buffers, !69, !"__ksymtab_create_empty_buffers", i1 false, i1 false}
!69 = !{!"../fs/buffer.c", i32 1583, i32 1}
!70 = !{ptr @__ksymtab_clean_bdev_aliases, !71, !"__ksymtab_clean_bdev_aliases", i1 false, i1 false}
!71 = !{!"../fs/buffer.c", i32 1657, i32 1}
!72 = !{ptr @__ksymtab___block_write_full_page, !73, !"__ksymtab___block_write_full_page", i1 false, i1 false}
!73 = !{!"../fs/buffer.c", i32 1873, i32 1}
!74 = !{ptr @__ksymtab_page_zero_new_buffers, !75, !"__ksymtab_page_zero_new_buffers", i1 false, i1 false}
!75 = !{!"../fs/buffer.c", i32 1915, i32 1}
!76 = !{ptr @__ksymtab___block_write_begin, !77, !"__ksymtab___block_write_begin", i1 false, i1 false}
!77 = !{!"../fs/buffer.c", i32 2063, i32 1}
!78 = !{ptr @__ksymtab_block_write_begin, !79, !"__ksymtab_block_write_begin", i1 false, i1 false}
!79 = !{!"../fs/buffer.c", i32 2131, i32 1}
!80 = !{ptr @__ksymtab_block_write_end, !81, !"__ksymtab_block_write_end", i1 false, i1 false}
!81 = !{!"../fs/buffer.c", i32 2167, i32 1}
!82 = !{ptr @__ksymtab_generic_write_end, !83, !"__ksymtab_generic_write_end", i1 false, i1 false}
!83 = !{!"../fs/buffer.c", i32 2206, i32 1}
!84 = !{ptr @__ksymtab_block_is_partially_uptodate, !85, !"__ksymtab_block_is_partially_uptodate", i1 false, i1 false}
!85 = !{!"../fs/buffer.c", i32 2251, i32 1}
!86 = !{ptr @__ksymtab_block_read_full_page, !87, !"__ksymtab_block_read_full_page", i1 false, i1 false}
!87 = !{!"../fs/buffer.c", i32 2344, i32 1}
!88 = !{ptr @__ksymtab_generic_cont_expand_simple, !89, !"__ksymtab_generic_cont_expand_simple", i1 false, i1 false}
!89 = !{!"../fs/buffer.c", i32 2372, i32 1}
!90 = !{ptr @__ksymtab_cont_write_begin, !91, !"__ksymtab_cont_write_begin", i1 false, i1 false}
!91 = !{!"../fs/buffer.c", i32 2472, i32 1}
!92 = !{ptr @__ksymtab_block_commit_write, !93, !"__ksymtab_block_commit_write", i1 false, i1 false}
!93 = !{!"../fs/buffer.c", i32 2480, i32 1}
!94 = !{ptr @__ksymtab_block_page_mkwrite, !95, !"__ksymtab_block_page_mkwrite", i1 false, i1 false}
!95 = !{!"../fs/buffer.c", i32 2537, i32 1}
!96 = !{ptr @__ksymtab_nobh_write_begin, !97, !"__ksymtab_nobh_write_begin", i1 false, i1 false}
!97 = !{!"../fs/buffer.c", i32 2717, i32 1}
!98 = !{ptr @__ksymtab_nobh_write_end, !99, !"__ksymtab_nobh_write_end", i1 false, i1 false}
!99 = !{!"../fs/buffer.c", i32 2752, i32 1}
!100 = !{ptr @__ksymtab_nobh_writepage, !101, !"__ksymtab_nobh_writepage", i1 false, i1 false}
!101 = !{!"../fs/buffer.c", i32 2794, i32 1}
!102 = !{ptr @__ksymtab_nobh_truncate_page, !103, !"__ksymtab_nobh_truncate_page", i1 false, i1 false}
!103 = !{!"../fs/buffer.c", i32 2872, i32 1}
!104 = !{ptr @__ksymtab_block_truncate_page, !105, !"__ksymtab_block_truncate_page", i1 false, i1 false}
!105 = !{!"../fs/buffer.c", i32 2948, i32 1}
!106 = !{ptr @__ksymtab_block_write_full_page, !107, !"__ksymtab_block_write_full_page", i1 false, i1 false}
!107 = !{!"../fs/buffer.c", i32 2984, i32 1}
!108 = !{ptr @__ksymtab_generic_block_bmap, !109, !"__ksymtab_generic_block_bmap", i1 false, i1 false}
!109 = !{!"../fs/buffer.c", i32 2997, i32 1}
!110 = !{ptr @__ksymtab_submit_bh, !111, !"__ksymtab_submit_bh", i1 false, i1 false}
!111 = !{!"../fs/buffer.c", i32 3063, i32 1}
!112 = !{ptr @__ksymtab_ll_rw_block, !113, !"__ksymtab_ll_rw_block", i1 false, i1 false}
!113 = !{!"../fs/buffer.c", i32 3118, i32 1}
!114 = !{ptr @__ksymtab_write_dirty_buffer, !115, !"__ksymtab_write_dirty_buffer", i1 false, i1 false}
!115 = !{!"../fs/buffer.c", i32 3131, i32 1}
!116 = !{ptr @__ksymtab___sync_dirty_buffer, !117, !"__ksymtab___sync_dirty_buffer", i1 false, i1 false}
!117 = !{!"../fs/buffer.c", i32 3165, i32 1}
!118 = !{ptr @__ksymtab_sync_dirty_buffer, !119, !"__ksymtab_sync_dirty_buffer", i1 false, i1 false}
!119 = !{!"../fs/buffer.c", i32 3171, i32 1}
!120 = !{ptr @__ksymtab_try_to_free_buffers, !121, !"__ksymtab_try_to_free_buffers", i1 false, i1 false}
!121 = !{!"../fs/buffer.c", i32 3273, i32 1}
!122 = !{ptr @bh_accounting, !123, !"bh_accounting", i1 false, i1 false}
!123 = !{!"../fs/buffer.c", i32 3293, i32 8}
!124 = !{ptr @alloc_buffer_head.__key, !125, !"__key", i1 false, i1 false}
!125 = !{!"../fs/buffer.c", i32 3313, i32 3}
!126 = !{ptr @.str.6, !125, !"<string literal>", i1 false, i1 false}
!127 = distinct !{null, !128, !"<string literal>", i1 false, i1 false}
!128 = !{!"../fs/buffer.c", i32 3315, i32 3}
!129 = !{ptr @__ksymtab_alloc_buffer_head, !130, !"__ksymtab_alloc_buffer_head", i1 false, i1 false}
!130 = !{!"../fs/buffer.c", i32 3321, i32 1}
!131 = !{ptr @__ksymtab_free_buffer_head, !132, !"__ksymtab_free_buffer_head", i1 false, i1 false}
!132 = !{!"../fs/buffer.c", i32 3332, i32 1}
!133 = !{ptr @__ksymtab_bh_uptodate_or_lock, !134, !"__ksymtab_bh_uptodate_or_lock", i1 false, i1 false}
!134 = !{!"../fs/buffer.c", i32 3365, i32 1}
!135 = !{ptr @__ksymtab_bh_submit_read, !136, !"__ksymtab_bh_submit_read", i1 false, i1 false}
!136 = !{!"../fs/buffer.c", i32 3390, i32 1}
!137 = !{ptr @.str.8, !138, !"<string literal>", i1 false, i1 false}
!138 = !{!"../fs/buffer.c", i32 3397, i32 32}
!139 = !{ptr @.str.9, !140, !"<string literal>", i1 false, i1 false}
!140 = !{!"../fs/buffer.c", i32 3408, i32 54}
!141 = !{ptr @__pcpu_unique_bh_lrus, !51, !"__pcpu_unique_bh_lrus", i1 false, i1 false}
!142 = !{ptr @bh_cachep, !143, !"bh_cachep", i1 false, i1 false}
!143 = !{!"../fs/buffer.c", i32 3278, i32 27}
!144 = !{ptr @max_buffer_heads, !145, !"max_buffer_heads", i1 false, i1 false}
!145 = !{!"../fs/buffer.c", i32 3284, i32 22}
!146 = !{ptr @buffer_heads_over_limit, !147, !"buffer_heads_over_limit", i1 false, i1 false}
!147 = !{!"../fs/buffer.c", i32 3286, i32 5}
!148 = !{ptr @__pcpu_unique_bh_accounting, !123, !"__pcpu_unique_bh_accounting", i1 false, i1 false}
!149 = distinct !{null, !150, !"__already_done", i1 false, i1 false}
!150 = !{!"../include/trace/events/block.h", i32 45, i32 1}
!151 = !{ptr @.str.10, !150, !"<string literal>", i1 false, i1 false}
!152 = distinct !{null, !150, !"__warned", i1 false, i1 false}
!153 = !{ptr @.str.11, !150, !"<string literal>", i1 false, i1 false}
!154 = distinct !{null, !155, !"__already_done", i1 false, i1 false}
!155 = !{!"../include/linux/cpumask.h", i32 108, i32 2}
!156 = !{ptr @.str.12, !155, !"<string literal>", i1 false, i1 false}
!157 = !{ptr @.str.13, !158, !"<string literal>", i1 false, i1 false}
!158 = !{!"../include/linux/wait_bit.h", i32 205, i32 2}
!159 = !{ptr @.str.14, !160, !"<string literal>", i1 false, i1 false}
!160 = !{!"../include/linux/page-flags.h", i32 414, i32 1}
!161 = !{ptr @.str.15, !162, !"<string literal>", i1 false, i1 false}
!162 = !{!"../include/linux/page-flags.h", i32 452, i32 1}
!163 = !{ptr @.str.16, !164, !"<string literal>", i1 false, i1 false}
!164 = !{!"../fs/buffer.c", i32 129, i32 3}
!165 = !{ptr @buffer_io_error._rs, !164, !"_rs", i1 false, i1 false}
!166 = !{ptr @__func__.buffer_io_error, !164, !"<string literal>", i1 false, i1 false}
!167 = !{ptr @.str.17, !164, !"<string literal>", i1 false, i1 false}
!168 = !{ptr @buffer_io_error._entry, !164, !"_entry", i1 false, i1 false}
!169 = !{ptr @buffer_io_error._entry_ptr, !164, !"_entry_ptr", i1 false, i1 false}
!170 = !{ptr @.str.18, !171, !"<string literal>", i1 false, i1 false}
!171 = !{!"../include/linux/page-flags.h", i32 416, i32 1}
!172 = !{ptr @.str.19, !173, !"<string literal>", i1 false, i1 false}
!173 = !{!"../include/linux/memcontrol.h", i32 537, i32 2}
!174 = !{ptr @.str.20, !175, !"<string literal>", i1 false, i1 false}
!175 = !{!"../include/linux/memcontrol.h", i32 538, i32 2}
!176 = !{ptr @.str.21, !177, !"<string literal>", i1 false, i1 false}
!177 = !{!"../include/linux/memcontrol.h", i32 417, i32 2}
!178 = distinct !{null, !179, !"<string literal>", i1 false, i1 false}
!179 = !{!"../include/linux/memcontrol.h", i32 418, i32 2}
!180 = distinct !{null, !181, !"<string literal>", i1 false, i1 false}
!181 = !{!"../include/linux/memcontrol.h", i32 419, i32 2}
!182 = !{ptr @.str.24, !183, !"<string literal>", i1 false, i1 false}
!183 = !{!"../include/linux/page-flags.h", i32 260, i32 2}
!184 = distinct !{null, !185, !"<string literal>", i1 false, i1 false}
!185 = !{!"../include/linux/page-flags.h", i32 261, i32 2}
!186 = distinct !{null, !187, !"<string literal>", i1 false, i1 false}
!187 = !{!"../include/linux/memcontrol.h", i32 398, i32 2}
!188 = distinct !{null, !189, !"__already_done", i1 false, i1 false}
!189 = !{!"../include/trace/events/block.h", i32 58, i32 1}
!190 = distinct !{null, !189, !"__warned", i1 false, i1 false}
!191 = distinct !{null, !192, !"__warned", i1 false, i1 false}
!192 = !{!"../include/linux/rcupdate.h", i32 695, i32 2}
!193 = !{ptr @.str.27, !192, !"<string literal>", i1 false, i1 false}
!194 = !{ptr @.str.28, !192, !"<string literal>", i1 false, i1 false}
!195 = distinct !{null, !196, !"__warned", i1 false, i1 false}
!196 = !{!"../include/linux/rcupdate.h", i32 723, i32 2}
!197 = !{ptr @.str.29, !196, !"<string literal>", i1 false, i1 false}
!198 = distinct !{null, !199, !"<string literal>", i1 false, i1 false}
!199 = !{!"../fs/buffer.c", i32 1275, i32 28}
!200 = distinct !{null, !201, !"<string literal>", i1 false, i1 false}
!201 = !{!"../fs/buffer.c", i32 1281, i32 6}
!202 = !{ptr @.str.32, !203, !"<string literal>", i1 false, i1 false}
!203 = !{!"../fs/buffer.c", i32 199, i32 9}
!204 = !{ptr @__find_get_block_slow.last_warned, !203, !"last_warned", i1 false, i1 false}
!205 = !{ptr @__func__.__find_get_block_slow, !206, !"<string literal>", i1 false, i1 false}
!206 = !{!"../fs/buffer.c", i32 228, i32 20}
!207 = !{ptr @.str.33, !208, !"<string literal>", i1 false, i1 false}
!208 = !{!"../fs/buffer.c", i32 229, i32 3}
!209 = !{ptr @__find_get_block_slow._entry, !208, !"_entry", i1 false, i1 false}
!210 = !{ptr @__find_get_block_slow._entry_ptr, !208, !"_entry_ptr", i1 false, i1 false}
!211 = !{ptr @.str.34, !212, !"<string literal>", i1 false, i1 false}
!212 = !{!"../fs/buffer.c", i32 1024, i32 3}
!213 = !{ptr @.str.35, !212, !"<string literal>", i1 false, i1 false}
!214 = !{ptr @__getblk_slow._entry, !212, !"_entry", i1 false, i1 false}
!215 = !{ptr @__getblk_slow._entry_ptr, !212, !"_entry_ptr", i1 false, i1 false}
!216 = !{ptr @.str.37, !217, !"<string literal>", i1 false, i1 false}
!217 = !{!"../fs/buffer.c", i32 1026, i32 3}
!218 = !{ptr @__getblk_slow._entry.36, !217, !"_entry", i1 false, i1 false}
!219 = !{ptr @__getblk_slow._entry_ptr.38, !217, !"_entry_ptr", i1 false, i1 false}
!220 = !{ptr @.str.39, !221, !"<string literal>", i1 false, i1 false}
!221 = !{!"../fs/buffer.c", i32 1006, i32 3}
!222 = !{ptr @.str.40, !221, !"<string literal>", i1 false, i1 false}
!223 = !{ptr @grow_buffers._entry, !221, !"_entry", i1 false, i1 false}
!224 = !{ptr @grow_buffers._entry_ptr, !221, !"_entry_ptr", i1 false, i1 false}
!225 = !{ptr @.str.41, !226, !"<string literal>", i1 false, i1 false}
!226 = !{!"../include/linux/mm.h", i32 1160, i32 2}
!227 = !{ptr @.str.42, !228, !"<string literal>", i1 false, i1 false}
!228 = !{!"../include/linux/pagemap.h", i32 788, i32 2}
!229 = !{ptr @.str.43, !230, !"<string literal>", i1 false, i1 false}
!230 = !{!"../include/linux/buffer_head.h", i32 354, i32 2}
!231 = !{ptr @.str.44, !232, !"<string literal>", i1 false, i1 false}
!232 = !{!"../include/linux/mm.h", i32 717, i32 2}
!233 = distinct !{null, !234, !"__already_done", i1 false, i1 false}
!234 = !{!"../include/linux/seqlock.h", i32 271, i32 2}
!235 = !{ptr @.str.45, !234, !"<string literal>", i1 false, i1 false}
!236 = !{ptr @end_buffer_async_read_io.__key, !237, !"__key", i1 false, i1 false}
!237 = !{!"../fs/buffer.c", i32 328, i32 4}
!238 = !{ptr @.str.46, !237, !"<string literal>", i1 false, i1 false}
!239 = !{ptr @.str.47, !240, !"<string literal>", i1 false, i1 false}
!240 = !{!"../fs/buffer.c", i32 259, i32 23}
!241 = distinct !{null, !242, !"<string literal>", i1 false, i1 false}
!242 = !{!"../fs/buffer.c", i32 3300, i32 6}
!243 = !{!"sp"}
!244 = !{i32 1, !"wchar_size", i32 2}
!245 = !{i32 1, !"min_enum_size", i32 4}
!246 = !{i32 8, !"branch-target-enforcement", i32 0}
!247 = !{i32 8, !"sign-return-address", i32 0}
!248 = !{i32 8, !"sign-return-address-all", i32 0}
!249 = !{i32 8, !"sign-return-address-with-bkey", i32 0}
!250 = !{i32 7, !"uwtable", i32 1}
!251 = !{i32 7, !"frame-pointer", i32 2}
!252 = !{!"clang version 15.0.0 (git@github.com:linkeLi0421/llvm-project15-IRDumperPass.git 23ab625cb005cd08da083f9b643a7feed9af8abe)"}
!253 = !{i64 2148780094, i64 2148780099, i64 2148780112, i64 2148780156, i64 2148780190, i64 2148780211}
!254 = !{!"branch_weights", i32 2000, i32 1}
!255 = !{i64 2156165879}
!256 = !{i64 2156166082}
!257 = !{i64 2149282194}
!258 = !{i64 2149283230}
!259 = !{i64 2148395105}
!260 = !{i64 2148305524, i64 2148305556, i64 2148305585, i64 2148305619, i64 2148305650, i64 2148305673}
!261 = !{i64 2156527523}
!262 = !{!"branch_weights", i32 1, i32 2000}
!263 = !{i64 2150970762, i64 2150971253, i64 2150970799, i64 2150970855, i64 2150970889, i64 2150970913, i64 2150970954, i64 2150970975, i64 2150971003, i64 2150971037}
!264 = !{i64 2156529218, i64 2156529693, i64 2156529255, i64 2156529311, i64 2156529345, i64 2156529369, i64 2156529410, i64 2156529431, i64 2156529459, i64 2156529493}
!265 = !{i64 2151422035, i64 2151422526, i64 2151422072, i64 2151422128, i64 2151422162, i64 2151422186, i64 2151422227, i64 2151422248, i64 2151422276, i64 2151422310}
!266 = !{i64 2151479183, i64 2151479674, i64 2151479220, i64 2151479276, i64 2151479310, i64 2151479334, i64 2151479375, i64 2151479396, i64 2151479424, i64 2151479458}
!267 = !{i64 2156530919, i64 2156531395, i64 2156530956, i64 2156531012, i64 2156531046, i64 2156531070, i64 2156531111, i64 2156531132, i64 2156531160, i64 2156531194}
!268 = !{i64 2155754461}
!269 = !{i64 2148300744, i64 2148300770, i64 2148300799, i64 2148300833, i64 2148300864, i64 2148300887}
!270 = !{i64 2149273635}
!271 = !{i64 2149273901}
!272 = !{i64 2156557701, i64 2156558177, i64 2156557738, i64 2156557794, i64 2156557828, i64 2156557852, i64 2156557893, i64 2156557914, i64 2156557942, i64 2156557976}
!273 = !{i64 2151024919, i64 2151025092, i64 2151025107, i64 2151025159, i64 2151025218, i64 2151025242, i64 2151025283, i64 2151025304, i64 2151025332, i64 2151025364}
!274 = !{i64 2151025794, i64 2151025967, i64 2151025982, i64 2151026034, i64 2151026093, i64 2151026117, i64 2151026158, i64 2151026179, i64 2151026207, i64 2151026239}
!275 = !{i64 2156559380, i64 2156559856, i64 2156559417, i64 2156559473, i64 2156559507, i64 2156559531, i64 2156559572, i64 2156559593, i64 2156559621, i64 2156559655}
!276 = !{i64 2156561351, i64 2156561827, i64 2156561388, i64 2156561444, i64 2156561478, i64 2156561502, i64 2156561543, i64 2156561564, i64 2156561592, i64 2156561626}
!277 = !{i64 2156583108}
!278 = !{i64 2148298279, i64 2148298305, i64 2148298334, i64 2148298368, i64 2148298399, i64 2148298422}
!279 = !{i64 2156584764}
!280 = !{i64 693492}
!281 = !{i64 2156618760, i64 2156619237, i64 2156618797, i64 2156618853, i64 2156618887, i64 2156618911, i64 2156618952, i64 2156618973, i64 2156619001, i64 2156619035}
!282 = !{i64 691195}
!283 = !{i64 691005}
!284 = !{i64 2148307137, i64 2148307169, i64 2148307198, i64 2148307232, i64 2148307263, i64 2148307286}
!285 = !{i64 2148396218}
!286 = !{i64 2156575182, i64 2156575658, i64 2156575219, i64 2156575275, i64 2156575309, i64 2156575333, i64 2156575374, i64 2156575395, i64 2156575423, i64 2156575457}
!287 = !{i64 2156602617}
!288 = !{i64 2151089937, i64 2151090110, i64 2151090125, i64 2151090177, i64 2151090236, i64 2151090260, i64 2151090301, i64 2151090322, i64 2151090350, i64 2151090382}
!289 = !{i64 2156578537, i64 2156579013, i64 2156578574, i64 2156578630, i64 2156578664, i64 2156578688, i64 2156578729, i64 2156578750, i64 2156578778, i64 2156578812}
!290 = !{i64 2155534829, i64 2155535320, i64 2155534866, i64 2155534922, i64 2155534956, i64 2155534980, i64 2155535021, i64 2155535042, i64 2155535070, i64 2155535104}
!291 = !{i64 2155540790, i64 2155541281, i64 2155540827, i64 2155540883, i64 2155540917, i64 2155540941, i64 2155540982, i64 2155541003, i64 2155541031, i64 2155541065}
!292 = !{i64 2150963329, i64 2150963820, i64 2150963366, i64 2150963422, i64 2150963456, i64 2150963480, i64 2150963521, i64 2150963542, i64 2150963570, i64 2150963604}
!293 = !{i64 2155519329, i64 2155519820, i64 2155519366, i64 2155519422, i64 2155519456, i64 2155519480, i64 2155519521, i64 2155519542, i64 2155519570, i64 2155519604}
!294 = !{i64 2155513587, i64 2155514078, i64 2155513624, i64 2155513680, i64 2155513714, i64 2155513738, i64 2155513779, i64 2155513800, i64 2155513828, i64 2155513862}
!295 = !{i64 2155842104}
!296 = !{i64 2155858877}
!297 = !{i64 690760, i64 690821}
!298 = !{i64 693777}
!299 = !{i64 2156692432, i64 2156692909, i64 2156692469, i64 2156692525, i64 2156692559, i64 2156692583, i64 2156692624, i64 2156692645, i64 2156692673, i64 2156692707}
!300 = !{i64 2156834739}
!301 = !{i64 2156840146}
!302 = !{i64 2156841979, i64 2156842456, i64 2156842016, i64 2156842072, i64 2156842106, i64 2156842130, i64 2156842171, i64 2156842192, i64 2156842220, i64 2156842254}
!303 = !{i64 2156843407}
!304 = !{i64 2156849353}
!305 = !{i64 2156182170}
!306 = !{i64 2156182373}
!307 = !{i64 2156546497, i64 2156546973, i64 2156546534, i64 2156546590, i64 2156546624, i64 2156546648, i64 2156546689, i64 2156546710, i64 2156546738, i64 2156546772}
!308 = !{i64 2153779477, i64 2153779960, i64 2153779514, i64 2153779570, i64 2153779604, i64 2153779628, i64 2153779669, i64 2153779690, i64 2153779718, i64 2153779752}
!309 = !{i64 2148386731}
!310 = !{i64 2148301464, i64 2148301496, i64 2148301525, i64 2148301559, i64 2148301590, i64 2148301613}
!311 = !{i64 2148386960}
!312 = !{!"branch_weights", i32 4008002, i32 4000000}
!313 = !{i32 0, i32 33}
!314 = !{i64 2156687528}
!315 = !{i64 2156688564}
!316 = !{i64 2156697420, i64 2156697897, i64 2156697457, i64 2156697513, i64 2156697547, i64 2156697571, i64 2156697612, i64 2156697633, i64 2156697661, i64 2156697695}
!317 = !{i64 2156699120, i64 2156699597, i64 2156699157, i64 2156699213, i64 2156699247, i64 2156699271, i64 2156699312, i64 2156699333, i64 2156699361, i64 2156699395}
!318 = !{i64 2156700802, i64 2156701279, i64 2156700839, i64 2156700895, i64 2156700929, i64 2156700953, i64 2156700994, i64 2156701015, i64 2156701043, i64 2156701077}
!319 = !{i64 2156696583}
!320 = !{i64 807771, i64 807792, i64 807815, i64 807834, i64 807853}
!321 = !{i64 2156697088}
!322 = !{i64 2151713221}
!323 = !{i64 2151073238, i64 2151073729, i64 2151073275, i64 2151073331, i64 2151073365, i64 2151073389, i64 2151073430, i64 2151073451, i64 2151073479, i64 2151073513}
!324 = !{i64 2153799389, i64 2153799873, i64 2153799426, i64 2153799482, i64 2153799516, i64 2153799540, i64 2153799581, i64 2153799602, i64 2153799630, i64 2153799664}
!325 = !{i64 2156709792, i64 2156710269, i64 2156709829, i64 2156709885, i64 2156709919, i64 2156709943, i64 2156709984, i64 2156710005, i64 2156710033, i64 2156710067}
!326 = !{i64 2156720085, i64 2156720562, i64 2156720122, i64 2156720178, i64 2156720212, i64 2156720236, i64 2156720277, i64 2156720298, i64 2156720326, i64 2156720360}
!327 = !{i64 2156721658, i64 2156722135, i64 2156721695, i64 2156721751, i64 2156721785, i64 2156721809, i64 2156721850, i64 2156721871, i64 2156721899, i64 2156721933}
!328 = !{i64 2156713352, i64 2156713829, i64 2156713389, i64 2156713445, i64 2156713479, i64 2156713503, i64 2156713544, i64 2156713565, i64 2156713593, i64 2156713627}
!329 = !{i64 2156717987, i64 2156718464, i64 2156718024, i64 2156718080, i64 2156718114, i64 2156718138, i64 2156718179, i64 2156718200, i64 2156718228, i64 2156718262}
!330 = !{i64 2152644029}
!331 = !{i64 2152643871}
!332 = !{i64 2152644199}
!333 = !{i64 2150330451}
!334 = !{i64 2156794185, i64 2156794662, i64 2156794222, i64 2156794278, i64 2156794312, i64 2156794336, i64 2156794377, i64 2156794398, i64 2156794426, i64 2156794460}
!335 = !{i64 2156795756, i64 2156796233, i64 2156795793, i64 2156795849, i64 2156795883, i64 2156795907, i64 2156795948, i64 2156795969, i64 2156795997, i64 2156796031}
!336 = !{i64 2156797317, i64 2156797794, i64 2156797354, i64 2156797410, i64 2156797444, i64 2156797468, i64 2156797509, i64 2156797530, i64 2156797558, i64 2156797592}
!337 = !{i64 2156798884, i64 2156799361, i64 2156798921, i64 2156798977, i64 2156799011, i64 2156799035, i64 2156799076, i64 2156799097, i64 2156799125, i64 2156799159}
!338 = !{i64 2156804520, i64 2156804997, i64 2156804557, i64 2156804613, i64 2156804647, i64 2156804671, i64 2156804712, i64 2156804733, i64 2156804761, i64 2156804795}
!339 = !{i64 2156806385, i64 2156806862, i64 2156806422, i64 2156806478, i64 2156806512, i64 2156806536, i64 2156806577, i64 2156806598, i64 2156806626, i64 2156806660}
!340 = !{i64 2156724844, i64 2156725321, i64 2156724881, i64 2156724937, i64 2156724971, i64 2156724995, i64 2156725036, i64 2156725057, i64 2156725085, i64 2156725119}
!341 = !{i64 2156726549, i64 2156727026, i64 2156726586, i64 2156726642, i64 2156726676, i64 2156726700, i64 2156726741, i64 2156726762, i64 2156726790, i64 2156726824}
!342 = !{!"auto-init"}
!343 = !{i64 2156734133, i64 2156734610, i64 2156734170, i64 2156734226, i64 2156734260, i64 2156734284, i64 2156734325, i64 2156734346, i64 2156734374, i64 2156734408}
!344 = !{i64 2156737415, i64 2156737892, i64 2156737452, i64 2156737508, i64 2156737542, i64 2156737566, i64 2156737607, i64 2156737628, i64 2156737656, i64 2156737690}
!345 = !{i64 2156738968, i64 2156739445, i64 2156739005, i64 2156739061, i64 2156739095, i64 2156739119, i64 2156739160, i64 2156739181, i64 2156739209, i64 2156739243}
!346 = !{i64 2156732442, i64 2156732919, i64 2156732479, i64 2156732535, i64 2156732569, i64 2156732593, i64 2156732634, i64 2156732655, i64 2156732683, i64 2156732717}
!347 = !{i64 2156746928, i64 2156747405, i64 2156746965, i64 2156747021, i64 2156747055, i64 2156747079, i64 2156747120, i64 2156747141, i64 2156747169, i64 2156747203}
!348 = !{i64 2151714292}
!349 = !{i64 2152645960}
!350 = !{i64 2150222703}
!351 = !{i64 2150227637}
!352 = !{i64 2150249355}
!353 = !{i64 2150254249}
!354 = !{i64 2150330776}
!355 = !{i64 2150331101}
!356 = !{i64 2152657822}
!357 = !{i64 2156753173, i64 2156753650, i64 2156753210, i64 2156753266, i64 2156753300, i64 2156753324, i64 2156753365, i64 2156753386, i64 2156753414, i64 2156753448}
!358 = !{i64 2151515379, i64 2151515552, i64 2151515567, i64 2151515619, i64 2151515678, i64 2151515702, i64 2151515743, i64 2151515764, i64 2151515792, i64 2151515824}
!359 = !{i64 2151516254, i64 2151516427, i64 2151516442, i64 2151516494, i64 2151516553, i64 2151516577, i64 2151516618, i64 2151516639, i64 2151516667, i64 2151516699}
!360 = !{i64 2151016361, i64 2151016852, i64 2151016398, i64 2151016454, i64 2151016488, i64 2151016512, i64 2151016553, i64 2151016574, i64 2151016602, i64 2151016636}
!361 = !{i64 2156550403, i64 2156550879, i64 2156550440, i64 2156550496, i64 2156550530, i64 2156550554, i64 2156550595, i64 2156550616, i64 2156550644, i64 2156550678}
!362 = !{i64 2156552082, i64 2156552558, i64 2156552119, i64 2156552175, i64 2156552209, i64 2156552233, i64 2156552274, i64 2156552295, i64 2156552323, i64 2156552357}
!363 = !{i64 2156554053, i64 2156554529, i64 2156554090, i64 2156554146, i64 2156554180, i64 2156554204, i64 2156554245, i64 2156554266, i64 2156554294, i64 2156554328}
!364 = !{i64 2156760706, i64 2156761183, i64 2156760743, i64 2156760799, i64 2156760833, i64 2156760857, i64 2156760898, i64 2156760919, i64 2156760947, i64 2156760981}
!365 = !{i64 2156764093, i64 2156764570, i64 2156764130, i64 2156764186, i64 2156764220, i64 2156764244, i64 2156764285, i64 2156764306, i64 2156764334, i64 2156764368}
!366 = !{i64 2156765724, i64 2156766201, i64 2156765761, i64 2156765817, i64 2156765851, i64 2156765875, i64 2156765916, i64 2156765937, i64 2156765965, i64 2156765999}
!367 = !{i64 2151506737, i64 2151507228, i64 2151506774, i64 2151506830, i64 2151506864, i64 2151506888, i64 2151506929, i64 2151506950, i64 2151506978, i64 2151507012}
!368 = !{i64 2156775941, i64 2156776418, i64 2156775978, i64 2156776034, i64 2156776068, i64 2156776092, i64 2156776133, i64 2156776154, i64 2156776182, i64 2156776216}
!369 = !{i64 2156780810, i64 2156781287, i64 2156780847, i64 2156780903, i64 2156780937, i64 2156780961, i64 2156781002, i64 2156781023, i64 2156781051, i64 2156781085}
!370 = !{!"branch_weights", i32 1, i32 4001}
!371 = !{i64 2156787220, i64 2156787697, i64 2156787257, i64 2156787313, i64 2156787347, i64 2156787371, i64 2156787412, i64 2156787433, i64 2156787461, i64 2156787495}
!372 = !{i64 2156817486, i64 2156817963, i64 2156817523, i64 2156817579, i64 2156817613, i64 2156817637, i64 2156817678, i64 2156817699, i64 2156817727, i64 2156817761}
!373 = !{i64 2156815882, i64 2156816359, i64 2156815919, i64 2156815975, i64 2156816009, i64 2156816033, i64 2156816074, i64 2156816095, i64 2156816123, i64 2156816157}
!374 = !{i64 2156875834, i64 2156876311, i64 2156875871, i64 2156875927, i64 2156875961, i64 2156875985, i64 2156876026, i64 2156876047, i64 2156876075, i64 2156876109}
!375 = !{i64 2156593547, i64 2156594023, i64 2156593584, i64 2156593640, i64 2156593674, i64 2156593698, i64 2156593739, i64 2156593760, i64 2156593788, i64 2156593822}
!376 = !{i64 2156595249, i64 2156595725, i64 2156595286, i64 2156595342, i64 2156595376, i64 2156595400, i64 2156595441, i64 2156595462, i64 2156595490, i64 2156595524}
!377 = !{i64 2156591848, i64 2156592324, i64 2156591885, i64 2156591941, i64 2156591975, i64 2156591999, i64 2156592040, i64 2156592061, i64 2156592089, i64 2156592123}
