; ModuleID = '/llk/IR_all_yes/mm/slub.c_pt.bc'
source_filename = "../mm/slub.c"
target datalayout = "E-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64"
target triple = "armebv6k-unknown-linux-gnueabi"

module asm ".syntax unified"
module asm "\09.section \22___kcrctab+kmem_cache_alloc\22, \22a\22\09"
module asm "\09.weak\09__crc_kmem_cache_alloc\09\09\09\09"
module asm "\09.long\09__crc_kmem_cache_alloc\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_kmem_cache_alloc:\09\09\09\09\09"
module asm "\09.asciz \09\22kmem_cache_alloc\22\09\09\09\09\09"
module asm "__kstrtabns_kmem_cache_alloc:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+kmem_cache_alloc_trace\22, \22a\22\09"
module asm "\09.weak\09__crc_kmem_cache_alloc_trace\09\09\09\09"
module asm "\09.long\09__crc_kmem_cache_alloc_trace\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_kmem_cache_alloc_trace:\09\09\09\09\09"
module asm "\09.asciz \09\22kmem_cache_alloc_trace\22\09\09\09\09\09"
module asm "__kstrtabns_kmem_cache_alloc_trace:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+kmem_cache_free\22, \22a\22\09"
module asm "\09.weak\09__crc_kmem_cache_free\09\09\09\09"
module asm "\09.long\09__crc_kmem_cache_free\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_kmem_cache_free:\09\09\09\09\09"
module asm "\09.asciz \09\22kmem_cache_free\22\09\09\09\09\09"
module asm "__kstrtabns_kmem_cache_free:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+kmem_cache_free_bulk\22, \22a\22\09"
module asm "\09.weak\09__crc_kmem_cache_free_bulk\09\09\09\09"
module asm "\09.long\09__crc_kmem_cache_free_bulk\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_kmem_cache_free_bulk:\09\09\09\09\09"
module asm "\09.asciz \09\22kmem_cache_free_bulk\22\09\09\09\09\09"
module asm "__kstrtabns_kmem_cache_free_bulk:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+kmem_cache_alloc_bulk\22, \22a\22\09"
module asm "\09.weak\09__crc_kmem_cache_alloc_bulk\09\09\09\09"
module asm "\09.long\09__crc_kmem_cache_alloc_bulk\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_kmem_cache_alloc_bulk:\09\09\09\09\09"
module asm "\09.asciz \09\22kmem_cache_alloc_bulk\22\09\09\09\09\09"
module asm "__kstrtabns_kmem_cache_alloc_bulk:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+__kmalloc\22, \22a\22\09"
module asm "\09.weak\09__crc___kmalloc\09\09\09\09"
module asm "\09.long\09__crc___kmalloc\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab___kmalloc:\09\09\09\09\09"
module asm "\09.asciz \09\22__kmalloc\22\09\09\09\09\09"
module asm "__kstrtabns___kmalloc:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+__ksize\22, \22a\22\09"
module asm "\09.weak\09__crc___ksize\09\09\09\09"
module asm "\09.long\09__crc___ksize\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab___ksize:\09\09\09\09\09"
module asm "\09.asciz \09\22__ksize\22\09\09\09\09\09"
module asm "__kstrtabns___ksize:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+kfree\22, \22a\22\09"
module asm "\09.weak\09__crc_kfree\09\09\09\09"
module asm "\09.long\09__crc_kfree\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_kfree:\09\09\09\09\09"
module asm "\09.asciz \09\22kfree\22\09\09\09\09\09"
module asm "__kstrtabns_kfree:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+__kmalloc_track_caller\22, \22a\22\09"
module asm "\09.weak\09__crc___kmalloc_track_caller\09\09\09\09"
module asm "\09.long\09__crc___kmalloc_track_caller\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab___kmalloc_track_caller:\09\09\09\09\09"
module asm "\09.asciz \09\22__kmalloc_track_caller\22\09\09\09\09\09"
module asm "__kstrtabns___kmalloc_track_caller:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"
module asm "\09.section \22___kcrctab+validate_slab_cache\22, \22a\22\09"
module asm "\09.weak\09__crc_validate_slab_cache\09\09\09\09"
module asm "\09.long\09__crc_validate_slab_cache\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22__ksymtab_strings\22,\22aMS\22,%progbits,1\09"
module asm "__kstrtab_validate_slab_cache:\09\09\09\09\09"
module asm "\09.asciz \09\22validate_slab_cache\22\09\09\09\09\09"
module asm "__kstrtabns_validate_slab_cache:\09\09\09\09\09"
module asm "\09.asciz \09\22\22\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09\09"

%struct.atomic_t = type { i32 }
%struct.obs_kernel_param = type { ptr, ptr, i32 }
%struct.kernel_symbol = type { i32, ptr, ptr }
%struct.kmem_cache = type { ptr, i32, i32, i32, i32, %struct.reciprocal_value, i32, i32, i32, %struct.kmem_cache_order_objects, %struct.kmem_cache_order_objects, %struct.kmem_cache_order_objects, i32, i32, ptr, i32, i32, i32, ptr, %struct.list_head, %struct.kobject, i32, ptr, %struct.kasan_cache, i32, i32, [1 x ptr] }
%struct.reciprocal_value = type { i32, i8, i8 }
%struct.kmem_cache_order_objects = type { i32 }
%struct.list_head = type { ptr, ptr }
%struct.kobject = type { ptr, %struct.list_head, ptr, ptr, ptr, ptr, %struct.kref, %struct.delayed_work, i8 }
%struct.kref = type { %struct.refcount_struct }
%struct.refcount_struct = type { %struct.atomic_t }
%struct.delayed_work = type { %struct.work_struct, %struct.timer_list, ptr, i32 }
%struct.work_struct = type { %struct.atomic_t, %struct.list_head, ptr, %struct.lockdep_map }
%struct.lockdep_map = type { ptr, [2 x ptr], ptr, i8, i8, i8, i32, i32 }
%struct.timer_list = type { %struct.hlist_node, i32, ptr, i32, %struct.lockdep_map }
%struct.hlist_node = type { ptr, ptr }
%struct.kasan_cache = type { i32, i32, i8 }
%struct.nodemask_t = type { [1 x i32] }
%struct.pi_entry = type { ptr, ptr, ptr, i32, ptr, ptr }
%struct.slub_flush_work = type { %struct.work_struct, ptr, i8 }
%struct.static_key_true = type { %struct.static_key }
%struct.static_key = type { %struct.atomic_t, %union.anon }
%union.anon = type { i32 }
%struct.tracepoint = type { ptr, %struct.static_key, ptr, ptr, ptr, ptr, ptr, ptr }
%struct.cpumask = type { [1 x i32] }
%struct.static_key_false = type { %struct.static_key }
%struct.pglist_data = type { [4 x %struct.zone], [1 x %struct.zonelist], i32, ptr, ptr, i32, i32, i32, i32, %struct.wait_queue_head, %struct.wait_queue_head, [4 x %struct.wait_queue_head], %struct.atomic_t, i32, ptr, i32, i32, i32, i32, i32, %struct.wait_queue_head, ptr, i8, i32, [36 x i8], %struct.zone_padding, %struct.lruvec, i32, [12 x i8], %struct.zone_padding, ptr, [40 x %struct.atomic_t], [92 x i8] }
%struct.zone = type { [3 x i32], i32, i32, [4 x i32], ptr, ptr, ptr, i32, i32, ptr, i32, %struct.atomic_t, i32, i32, i32, ptr, i32, i32, [36 x i8], %struct.zone_padding, [12 x %struct.free_area], i32, %struct.spinlock, [96 x i8], %struct.zone_padding, i32, i32, [2 x i32], i32, i32, i32, i32, i32, i8, i8, [90 x i8], %struct.zone_padding, [11 x %struct.atomic_t], [0 x %struct.atomic_t], [84 x i8] }
%struct.free_area = type { [6 x %struct.list_head], i32 }
%struct.spinlock = type { %union.anon.14 }
%union.anon.14 = type { %struct.raw_spinlock }
%struct.raw_spinlock = type { %struct.arch_spinlock_t, i32, i32, ptr, %struct.lockdep_map }
%struct.arch_spinlock_t = type { %union.anon.5 }
%union.anon.5 = type { i32 }
%struct.zonelist = type { [5 x %struct.zoneref] }
%struct.zoneref = type { ptr, i32 }
%struct.wait_queue_head = type { %struct.spinlock, %struct.list_head }
%struct.lruvec = type { [5 x %struct.list_head], %struct.spinlock, i32, i32, %struct.atomic_t, [2 x i32], i32, ptr }
%struct.zone_padding = type { [0 x i8] }
%struct.ratelimit_state = type { %struct.raw_spinlock, i32, i32, i32, i32, i32, i32 }
%struct.mutex = type { %struct.atomic_t, %struct.raw_spinlock, %struct.optimistic_spin_queue, %struct.list_head, ptr, %struct.lockdep_map }
%struct.optimistic_spin_queue = type { %struct.atomic_t }
%struct.lock_class_key = type { %union.anon.3 }
%union.anon.3 = type { %struct.hlist_node }
%struct.kobj_type = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%struct.attribute_group = type { ptr, ptr, ptr, ptr, ptr }
%struct.sysfs_ops = type { ptr, ptr }
%struct.slab_attribute = type { %struct.attribute, ptr, ptr }
%struct.attribute = type { ptr, i16, i8, ptr, %struct.lock_class_key }
%struct.file_operations = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i32, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%struct.seq_operations = type { ptr, ptr, ptr, ptr }
%struct.track = type { i32, [16 x i32], i32, i32, i32 }
%struct.thread_info = type { i32, i32, ptr, i32, i32, %struct.cpu_context_save, i32, [16 x i8], [2 x i32], %union.fp_state, %union.vfp_state, i32 }
%struct.cpu_context_save = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [2 x i32] }
%union.fp_state = type { %struct.iwmmxt_struct }
%struct.iwmmxt_struct = type { [38 x i32] }
%union.vfp_state = type { %struct.vfp_hard_struct }
%struct.vfp_hard_struct = type { [32 x i64], i32, i32, i32, i32, i32 }
%struct.kmem_cache_cpu = type { ptr, i32, ptr, ptr, %struct.local_lock_t, [26 x i32] }
%struct.local_lock_t = type { %struct.lockdep_map, ptr }
%struct.page = type { i32, %union.anon.12, %union.anon.53, %struct.atomic_t, i32 }
%union.anon.12 = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.list_head, ptr, i32, i32 }
%union.anon.53 = type { %struct.atomic_t }
%struct.slab = type { i32, %union.anon.0, ptr, ptr, %union.anon.1, i32, %struct.atomic_t, i32 }
%union.anon.0 = type { %struct.list_head }
%union.anon.1 = type { i32 }
%struct.kmem_cache_node = type { %struct.spinlock, i32, %struct.list_head, %struct.atomic_t, %struct.atomic_t, %struct.list_head }
%struct.anon.15 = type { [16 x i8], %struct.lockdep_map }
%struct.kmem_obj_info = type { ptr, ptr, ptr, i32, ptr, ptr, [16 x ptr], [16 x ptr] }
%struct.anon.47 = type { i32, i8, i8, %struct.atomic_t, i32 }
%struct.saved_alias = type { ptr, ptr, ptr }
%struct.kset = type { %struct.list_head, %struct.spinlock, %struct.kobject, ptr }
%struct.task_struct = type { i32, ptr, %struct.refcount_struct, i32, i32, i32, %struct.__call_single_node, i32, i32, ptr, i32, i32, i32, i32, i32, i32, i32, [56 x i8], %struct.sched_entity, %struct.sched_rt_entity, %struct.sched_dl_entity, ptr, %struct.rb_node, i32, i32, ptr, [2 x %struct.uclamp_se], [2 x %struct.uclamp_se], [116 x i8], %struct.sched_statistics, i32, i32, i32, ptr, ptr, %struct.cpumask, ptr, i16, i16, i32, i8, i8, i32, %struct.list_head, i32, i32, %union.rcu_special, i8, %struct.list_head, %struct.sched_info, %struct.list_head, %struct.plist_node, %struct.rb_node, ptr, ptr, %struct.vmacache, %struct.task_rss_stat, i32, i32, i32, i32, i32, i32, i8, [3 x i8], i16, i32, %struct.restart_block, i32, i32, i32, ptr, ptr, %struct.list_head, %struct.list_head, ptr, %struct.list_head, %struct.list_head, ptr, [4 x %struct.hlist_node], %struct.list_head, %struct.list_head, ptr, ptr, ptr, ptr, i64, i64, i64, %struct.prev_cputime, i32, i32, i64, i64, i32, i32, %struct.posix_cputimers, ptr, ptr, ptr, ptr, [16 x i8], ptr, %struct.sysv_sem, %struct.sysv_shm, i32, i32, ptr, ptr, ptr, ptr, ptr, ptr, %struct.sigset_t, %struct.sigset_t, %struct.sigset_t, %struct.sigpending, i32, i32, i32, ptr, %struct.kuid_t, i32, %struct.seccomp, %struct.syscall_user_dispatch, i64, i64, %struct.spinlock, %struct.raw_spinlock, %struct.wake_q_node, %struct.rb_root_cached, ptr, ptr, ptr, i32, %struct.irqtrace_events, i32, i64, i32, i32, i32, i64, i32, i32, [48 x %struct.held_lock], i32, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i32, ptr, %struct.task_io_accounting, i32, i64, i64, i64, %struct.nodemask_t, %struct.seqcount_spinlock, i32, i32, ptr, %struct.list_head, ptr, %struct.list_head, ptr, %struct.mutex, i32, [2 x ptr], %struct.mutex, %struct.list_head, ptr, i32, i32, %struct.tlbflush_unmap_batch, %union.anon.76, ptr, %struct.page_frag, ptr, i32, i32, i32, i32, i32, i32, [32 x %struct.latency_record], i64, i64, i32, ptr, i32, i32, i32, i32, ptr, ptr, i64, i32, i32, ptr, i32, i32, i32, ptr, ptr, ptr, i32, i32, %struct.kmap_ctrl, i32, i32, ptr, ptr, ptr, ptr, %struct.llist_head, %struct.thread_struct, [84 x i8] }
%struct.__call_single_node = type { %struct.llist_node, %union.anon.4 }
%struct.llist_node = type { ptr }
%union.anon.4 = type { i32 }
%struct.sched_entity = type { %struct.load_weight, %struct.rb_node, %struct.list_head, i32, i64, i64, i64, i64, i64, i32, ptr, ptr, ptr, i32, [36 x i8], %struct.sched_avg }
%struct.load_weight = type { i32, i32 }
%struct.sched_avg = type { i64, i64, i64, i32, i32, i32, i32, i32, [4 x i8], %struct.util_est, [72 x i8] }
%struct.util_est = type { i32, i32 }
%struct.sched_rt_entity = type { %struct.list_head, i32, i32, i32, i16, i16, ptr, ptr, ptr, ptr }
%struct.sched_dl_entity = type { %struct.rb_node, i64, i64, i64, i64, i64, i64, i64, i32, i8, %struct.hrtimer, %struct.hrtimer, ptr }
%struct.hrtimer = type { %struct.timerqueue_node, i64, ptr, ptr, i8, i8, i8, i8 }
%struct.timerqueue_node = type { %struct.rb_node, i64 }
%struct.uclamp_se = type { i16, [2 x i8] }
%struct.sched_statistics = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, [24 x i8] }
%union.rcu_special = type { i32 }
%struct.sched_info = type { i32, i64, i64, i64 }
%struct.plist_node = type { i32, %struct.list_head, %struct.list_head }
%struct.rb_node = type { i32, ptr, ptr }
%struct.vmacache = type { i64, [4 x ptr] }
%struct.task_rss_stat = type { i32, [4 x i32] }
%struct.restart_block = type { i32, ptr, %union.anon.54 }
%union.anon.54 = type { %struct.anon.55 }
%struct.anon.55 = type { ptr, i32, i32, i32, i64, ptr }
%struct.prev_cputime = type { i64, i64, %struct.raw_spinlock }
%struct.posix_cputimers = type { [3 x %struct.posix_cputimer_base], i32, i32 }
%struct.posix_cputimer_base = type { i64, %struct.timerqueue_head }
%struct.timerqueue_head = type { %struct.rb_root_cached }
%struct.sysv_sem = type { ptr }
%struct.sysv_shm = type { %struct.list_head }
%struct.sigset_t = type { [2 x i32] }
%struct.sigpending = type { %struct.list_head, %struct.sigset_t }
%struct.kuid_t = type { i32 }
%struct.seccomp = type { i32, %struct.atomic_t, ptr }
%struct.syscall_user_dispatch = type {}
%struct.wake_q_node = type { ptr }
%struct.rb_root_cached = type { %struct.rb_root, ptr }
%struct.rb_root = type { ptr }
%struct.irqtrace_events = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.held_lock = type { i64, i32, ptr, ptr, i64, i64, i32, i32 }
%struct.task_io_accounting = type { i64, i64, i64, i64, i64, i64, i64 }
%struct.seqcount_spinlock = type { %struct.seqcount, ptr }
%struct.seqcount = type { i32, %struct.lockdep_map }
%struct.tlbflush_unmap_batch = type {}
%union.anon.76 = type { %struct.callback_head }
%struct.callback_head = type { ptr, ptr }
%struct.page_frag = type { ptr, i16, i16 }
%struct.latency_record = type { [12 x i32], i32, i32, i32 }
%struct.kmap_ctrl = type { i32, [33 x i32] }
%struct.llist_head = type { ptr }
%struct.thread_struct = type { i32, i32, i32, %struct.debug_info }
%struct.debug_info = type { [32 x ptr] }
%struct.kunit = type { ptr, ptr, ptr, %struct.kunit_try_catch, ptr, i32, %struct.spinlock, i32, %struct.list_head, [256 x i8] }
%struct.kunit_try_catch = type { ptr, ptr, i32, ptr, ptr, ptr }
%struct.slabinfo = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.__va_list = type { ptr }
%struct.va_format = type { ptr, ptr }
%struct.kunit_resource = type { ptr, ptr, ptr, %struct.kref, %struct.list_head }
%struct.anon.87 = type { i32, %struct.list_head, ptr, i32, ptr, %struct.atomic_t, %struct.atomic_t, i32 }
%struct.percpu_ref = type { i32, ptr }
%struct.percpu_ref_data = type { %struct.atomic_t, ptr, ptr, i8, %struct.callback_head, ptr }
%struct.file = type { %union.anon.16, %struct.path, ptr, ptr, %struct.spinlock, i32, %struct.atomic_t, i32, i32, %struct.mutex, i64, %struct.fown_struct, ptr, %struct.file_ra_state, i64, ptr, ptr, ptr, ptr, i32, i32 }
%union.anon.16 = type { %struct.callback_head }
%struct.path = type { ptr, ptr }
%struct.fown_struct = type { %struct.rwlock_t, ptr, i32, %struct.kuid_t, %struct.kuid_t, i32 }
%struct.rwlock_t = type { %struct.arch_rwlock_t, i32, i32, ptr, %struct.lockdep_map }
%struct.arch_rwlock_t = type { i32 }
%struct.file_ra_state = type { i32, i32, i32, i32, i32, i64 }
%struct.inode = type { i16, i16, %struct.kuid_t, %struct.kgid_t, i32, ptr, ptr, ptr, ptr, ptr, ptr, i32, %union.anon.82, i32, i64, %struct.timespec64, %struct.timespec64, %struct.timespec64, %struct.spinlock, i16, i8, i8, i64, %struct.seqcount, i32, %struct.rw_semaphore, i32, i32, %struct.hlist_node, %struct.list_head, ptr, i32, i16, i16, %struct.list_head, %struct.list_head, %struct.list_head, %union.anon.83, %struct.atomic64_t, %struct.atomic64_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %union.anon.84, ptr, %struct.address_space, %struct.list_head, %union.anon.85, i32, i32, ptr, ptr, ptr, ptr }
%struct.kgid_t = type { i32 }
%union.anon.82 = type { i32 }
%struct.timespec64 = type { i64, i32 }
%struct.rw_semaphore = type { %struct.atomic_t, %struct.atomic_t, %struct.optimistic_spin_queue, %struct.raw_spinlock, %struct.list_head, ptr, %struct.lockdep_map }
%union.anon.83 = type { %struct.callback_head }
%struct.atomic64_t = type { i64 }
%union.anon.84 = type { ptr }
%struct.address_space = type { ptr, %struct.xarray, %struct.rw_semaphore, i32, %struct.atomic_t, %struct.rb_root_cached, %struct.rw_semaphore, i32, i32, ptr, i32, i32, %struct.spinlock, %struct.list_head, ptr }
%struct.xarray = type { %struct.spinlock, i32, ptr }
%union.anon.85 = type { ptr }
%struct.dentry = type { i32, %struct.seqcount_spinlock, %struct.hlist_bl_node, ptr, %struct.qstr, ptr, [36 x i8], %struct.lockref, ptr, ptr, i32, ptr, %union.anon.36, %struct.list_head, %struct.list_head, %union.anon.37 }
%struct.hlist_bl_node = type { ptr, ptr }
%struct.qstr = type { %union.anon.17, ptr }
%union.anon.17 = type { i64 }
%struct.lockref = type { %union.anon.19 }
%union.anon.19 = type { %struct.anon.20 }
%struct.anon.20 = type { %struct.spinlock, i32 }
%union.anon.36 = type { %struct.list_head }
%union.anon.37 = type { %struct.hlist_node }
%struct.loc_track = type { i32, i32, ptr, i64 }
%struct.seq_file = type { ptr, i32, i32, i32, i32, i64, i64, %struct.mutex, ptr, i32, ptr, ptr }
%struct.location = type { i32, i32, i64, i32, i32, i32, i32, [1 x i32], %struct.nodemask_t }

@slub_debug_enabled = dso_local global { { %struct.atomic_t, { ptr } } } { { %struct.atomic_t, { ptr } } { %struct.atomic_t { i32 1 }, { ptr } { ptr inttoptr (i32 1 to ptr) } } }, align 4
@jiffies = external dso_local global i32, section ".data..cacheline_aligned", align 128
@.str = private unnamed_addr constant [10 x i8] c"Allocated\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"Freed\00", align 1
@__setup_str_setup_slub_debug = internal constant [11 x i8] c"slub_debug\00", section ".init.rodata", align 1
@__setup_setup_slub_debug = internal global %struct.obs_kernel_param { ptr @__setup_str_setup_slub_debug, ptr @setup_slub_debug, i32 0 }, section ".init.setup", align 4
@slub_debug = internal unnamed_addr global i32 68864, align 4
@slub_debug_string = internal unnamed_addr global ptr null, align 4
@__kstrtab_kmem_cache_alloc = external dso_local constant [0 x i8], align 1
@__kstrtabns_kmem_cache_alloc = external dso_local constant [0 x i8], align 1
@__ksymtab_kmem_cache_alloc = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @kmem_cache_alloc to i32), ptr @__kstrtab_kmem_cache_alloc, ptr @__kstrtabns_kmem_cache_alloc }, section "___ksymtab+kmem_cache_alloc", align 4
@__kstrtab_kmem_cache_alloc_trace = external dso_local constant [0 x i8], align 1
@__kstrtabns_kmem_cache_alloc_trace = external dso_local constant [0 x i8], align 1
@__ksymtab_kmem_cache_alloc_trace = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @kmem_cache_alloc_trace to i32), ptr @__kstrtab_kmem_cache_alloc_trace, ptr @__kstrtabns_kmem_cache_alloc_trace }, section "___ksymtab+kmem_cache_alloc_trace", align 4
@__kstrtab_kmem_cache_free = external dso_local constant [0 x i8], align 1
@__kstrtabns_kmem_cache_free = external dso_local constant [0 x i8], align 1
@__ksymtab_kmem_cache_free = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @kmem_cache_free to i32), ptr @__kstrtab_kmem_cache_free, ptr @__kstrtabns_kmem_cache_free }, section "___ksymtab+kmem_cache_free", align 4
@.str.2 = private unnamed_addr constant [10 x i8] c"mm/slub.c\00", align 1
@__kstrtab_kmem_cache_free_bulk = external dso_local constant [0 x i8], align 1
@__kstrtabns_kmem_cache_free_bulk = external dso_local constant [0 x i8], align 1
@__ksymtab_kmem_cache_free_bulk = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @kmem_cache_free_bulk to i32), ptr @__kstrtab_kmem_cache_free_bulk, ptr @__kstrtabns_kmem_cache_free_bulk }, section "___ksymtab+kmem_cache_free_bulk", align 4
@__per_cpu_offset = external dso_local local_unnamed_addr global [4 x i32], align 4
@__kstrtab_kmem_cache_alloc_bulk = external dso_local constant [0 x i8], align 1
@__kstrtabns_kmem_cache_alloc_bulk = external dso_local constant [0 x i8], align 1
@__ksymtab_kmem_cache_alloc_bulk = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @kmem_cache_alloc_bulk to i32), ptr @__kstrtab_kmem_cache_alloc_bulk, ptr @__kstrtabns_kmem_cache_alloc_bulk }, section "___ksymtab+kmem_cache_alloc_bulk", align 4
@kmem_obj_info.__already_done = internal unnamed_addr global i1 false, section ".data.once", align 1
@__setup_str_setup_slub_min_order = internal constant [16 x i8] c"slub_min_order=\00", section ".init.rodata", align 1
@__setup_setup_slub_min_order = internal global %struct.obs_kernel_param { ptr @__setup_str_setup_slub_min_order, ptr @setup_slub_min_order, i32 0 }, section ".init.setup", align 4
@__setup_str_setup_slub_max_order = internal constant [16 x i8] c"slub_max_order=\00", section ".init.rodata", align 1
@__setup_setup_slub_max_order = internal global %struct.obs_kernel_param { ptr @__setup_str_setup_slub_max_order, ptr @setup_slub_max_order, i32 0 }, section ".init.setup", align 4
@__setup_str_setup_slub_min_objects = internal constant [18 x i8] c"slub_min_objects=\00", section ".init.rodata", align 1
@__setup_setup_slub_min_objects = internal global %struct.obs_kernel_param { ptr @__setup_str_setup_slub_min_objects, ptr @setup_slub_min_objects, i32 0 }, section ".init.setup", align 4
@__kstrtab___kmalloc = external dso_local constant [0 x i8], align 1
@__kstrtabns___kmalloc = external dso_local constant [0 x i8], align 1
@__ksymtab___kmalloc = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @__kmalloc to i32), ptr @__kstrtab___kmalloc, ptr @__kstrtabns___kmalloc }, section "___ksymtab+__kmalloc", align 4
@.str.3 = private unnamed_addr constant [31 x i8] c"SLUB object not in SLUB page?!\00", align 1
@.str.4 = private unnamed_addr constant [29 x i8] c"SLUB object in left red zone\00", align 1
@.str.5 = private unnamed_addr constant [12 x i8] c"SLUB object\00", align 1
@__kstrtab___ksize = external dso_local constant [0 x i8], align 1
@__kstrtabns___ksize = external dso_local constant [0 x i8], align 1
@__ksymtab___ksize = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @__ksize to i32), ptr @__kstrtab___ksize, ptr @__kstrtabns___ksize }, section "___ksymtab+__ksize", align 4
@__kstrtab_kfree = external dso_local constant [0 x i8], align 1
@__kstrtabns_kfree = external dso_local constant [0 x i8], align 1
@__ksymtab_kfree = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @kfree to i32), ptr @__kstrtab_kfree, ptr @__kstrtabns_kfree }, section "___ksymtab+kfree", align 4
@kmem_cache_init.boot_kmem_cache = internal global %struct.kmem_cache zeroinitializer, section ".init.data", align 4
@kmem_cache_init.boot_kmem_cache_node = internal global %struct.kmem_cache zeroinitializer, section ".init.data", align 4
@slub_max_order = internal global i32 3, align 4
@kmem_cache_node = internal unnamed_addr global ptr null, align 4
@kmem_cache = external dso_local local_unnamed_addr global ptr, align 4
@slab_nodes = internal global %struct.nodemask_t zeroinitializer, align 4
@.str.6 = private unnamed_addr constant [16 x i8] c"kmem_cache_node\00", align 1
@slab_state = external dso_local local_unnamed_addr global i32, align 4
@.str.7 = private unnamed_addr constant [11 x i8] c"kmem_cache\00", align 1
@.str.8 = private unnamed_addr constant [10 x i8] c"slub:dead\00", align 1
@kmem_cache_init._entry = internal constant %struct.pi_entry { ptr @.str.9, ptr @.str.10, ptr @.str.2, i32 4856, ptr null, ptr null }, align 1
@.str.9 = private unnamed_addr constant [67 x i8] c"\016SLUB: HWalign=%d, Order=%u-%u, MinObjects=%u, CPUs=%u, Nodes=%u\0A\00", align 1
@.str.10 = private unnamed_addr constant [16 x i8] c"kmem_cache_init\00", align 1
@kmem_cache_init._entry_ptr = internal global ptr @kmem_cache_init._entry, section ".printk_index", align 4
@slub_min_order = internal global i32 0, align 4
@slub_min_objects = internal global i32 0, align 4
@nr_cpu_ids = external dso_local local_unnamed_addr global i32, align 4
@__kstrtab___kmalloc_track_caller = external dso_local constant [0 x i8], align 1
@__kstrtabns___kmalloc_track_caller = external dso_local constant [0 x i8], align 1
@__ksymtab___kmalloc_track_caller = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @__kmalloc_track_caller to i32), ptr @__kstrtab___kmalloc_track_caller, ptr @__kstrtabns___kmalloc_track_caller }, section "___ksymtab+__kmalloc_track_caller", align 4
@__kstrtab_validate_slab_cache = external dso_local constant [0 x i8], align 1
@__kstrtabns_validate_slab_cache = external dso_local constant [0 x i8], align 1
@__ksymtab_validate_slab_cache = internal constant %struct.kernel_symbol { i32 ptrtoint (ptr @validate_slab_cache to i32), ptr @__kstrtab_validate_slab_cache, ptr @__kstrtabns_validate_slab_cache }, section "___ksymtab+validate_slab_cache", align 4
@__initcall__kmod_slub__367_6055_slab_sysfs_init6 = internal global ptr @slab_sysfs_init, section ".initcall6.init", align 4
@slab_debugfs_root = internal unnamed_addr global ptr null, align 4
@__initcall__kmod_slub__368_6236_slab_debugfs_init6 = internal global ptr @slab_debugfs_init, section ".initcall6.init", align 4
@__pcpu_unique_slub_flush = dso_local local_unnamed_addr global i8 0, section ".discard", align 1
@slub_flush = weak dso_local global %struct.slub_flush_work zeroinitializer, section ".data..percpu", align 4
@.str.11 = private unnamed_addr constant [10 x i8] c"mm/slab.h\00", align 1
@print_track._entry = internal constant %struct.pi_entry { ptr @.str.12, ptr @.str.13, ptr @.str.2, i32 768, ptr null, ptr null }, align 1
@.str.12 = private unnamed_addr constant [35 x i8] c"\013%s in %pS age=%lu cpu=%u pid=%d\0A\00", align 1
@.str.13 = private unnamed_addr constant [12 x i8] c"print_track\00", align 1
@print_track._entry_ptr = internal global ptr @print_track._entry, section ".printk_index", align 4
@print_track._entry.14 = internal constant %struct.pi_entry { ptr @.str.15, ptr @.str.13, ptr @.str.2, i32 774, ptr null, ptr null }, align 1
@.str.15 = private unnamed_addr constant [8 x i8] c"\013\09%pS\0A\00", align 1
@print_track._entry_ptr.16 = internal global ptr @print_track._entry.14, section ".printk_index", align 4
@init_on_alloc = external dso_local global %struct.static_key_true, align 4
@init_on_free = external dso_local global %struct.static_key_true, align 4
@setup_slub_debug._entry = internal constant %struct.pi_entry { ptr @.str.17, ptr @.str.18, ptr @.str.2, i32 1561, ptr null, ptr null }, align 1
@.str.17 = private unnamed_addr constant [83 x i8] c"\016mem auto-init: SLAB_POISON will take precedence over init_on_alloc/init_on_free\0A\00", align 1
@.str.18 = private unnamed_addr constant [17 x i8] c"setup_slub_debug\00", align 1
@setup_slub_debug._entry_ptr = internal global ptr @setup_slub_debug._entry, section ".printk_index", align 4
@parse_slub_debug_flags._entry = internal constant %struct.pi_entry { ptr @.str.19, ptr @.str.20, ptr @.str.2, i32 1486, ptr null, ptr null }, align 1
@.str.19 = private unnamed_addr constant [43 x i8] c"\013slub_debug option '%c' unknown. skipped\0A\00", align 1
@.str.20 = private unnamed_addr constant [23 x i8] c"parse_slub_debug_flags\00", align 1
@parse_slub_debug_flags._entry_ptr = internal global ptr @parse_slub_debug_flags._entry, section ".printk_index", align 4
@disable_higher_order_debug = internal unnamed_addr global i1 false, align 4
@_ctype = external dso_local local_unnamed_addr constant [0 x i8], align 1
@__tracepoint_kmem_cache_alloc = external dso_local global %struct.tracepoint, align 4
@.str.22 = private unnamed_addr constant [28 x i8] c"include/trace/events/kmem.h\00", align 1
@trace_kmem_cache_alloc.__warned = internal unnamed_addr global i1 false, section ".data.unlikely", align 1
@.str.23 = private unnamed_addr constant [41 x i8] c"suspicious rcu_dereference_check() usage\00", align 1
@__cpu_online_mask = external dso_local global %struct.cpumask, align 4
@cpu_max_bits_warn.__already_done = internal unnamed_addr global i1 false, section ".data.once", align 1
@.str.24 = private unnamed_addr constant [24 x i8] c"include/linux/cpumask.h\00", align 1
@__tracepoint_kmalloc = external dso_local global %struct.tracepoint, align 4
@trace_kmalloc.__warned = internal unnamed_addr global i1 false, section ".data.unlikely", align 1
@.str.27 = private unnamed_addr constant [37 x i8] c"Bulk freelist count(%d) invalid(%d)\0A\00", align 1
@.str.28 = private unnamed_addr constant [25 x i8] c"Object at 0x%p not freed\00", align 1
@.str.29 = private unnamed_addr constant [31 x i8] c"VM_BUG_ON_PAGE(PageTail(page))\00", align 1
@.str.30 = private unnamed_addr constant [22 x i8] c"Not a valid slab page\00", align 1
@.str.31 = private unnamed_addr constant [20 x i8] c"objects %u > max %u\00", align 1
@.str.32 = private unnamed_addr constant [18 x i8] c"inuse %u > max %u\00", align 1
@.str.33 = private unnamed_addr constant [35 x i8] c"VM_BUG_ON_PAGE(PagePoisoned(page))\00", align 1
@.str.34 = private unnamed_addr constant [43 x i8] c"Padding overwritten. 0x%p-0x%p @offset=%tu\00", align 1
@.str.35 = private unnamed_addr constant [3 x i8] c"\013\00", align 1
@.str.36 = private unnamed_addr constant [9 x i8] c"Padding \00", align 1
@.str.37 = private unnamed_addr constant [13 x i8] c"slab padding\00", align 1
@.str.38 = private unnamed_addr constant [28 x i8] c"Restoring %s 0x%p-0x%p=0x%x\00", align 1
@.str.39 = private unnamed_addr constant [28 x i8] c"Invalid object pointer 0x%p\00", align 1
@.str.40 = private unnamed_addr constant [20 x i8] c"Object already free\00", align 1
@.str.41 = private unnamed_addr constant [45 x i8] c"Attempt to free object(0x%p) outside of slab\00", align 1
@free_consistency_checks._entry = internal constant %struct.pi_entry { ptr @.str.42, ptr @.str.43, ptr @.str.2, i32 1361, ptr null, ptr null }, align 1
@.str.42 = private unnamed_addr constant [41 x i8] c"\013SLUB <none>: no slab for object 0x%p.\0A\00", align 1
@.str.43 = private unnamed_addr constant [24 x i8] c"free_consistency_checks\00", align 1
@free_consistency_checks._entry_ptr = internal global ptr @free_consistency_checks._entry, section ".printk_index", align 4
@.str.44 = private unnamed_addr constant [27 x i8] c"page slab pointer corrupt.\00", align 1
@.str.45 = private unnamed_addr constant [18 x i8] c"Freechain corrupt\00", align 1
@.str.46 = private unnamed_addr constant [20 x i8] c"Freepointer corrupt\00", align 1
@.str.47 = private unnamed_addr constant [17 x i8] c"Freelist cleared\00", align 1
@.str.48 = private unnamed_addr constant [51 x i8] c"Wrong number of objects. Found %d but should be %d\00", align 1
@.str.49 = private unnamed_addr constant [27 x i8] c"Number of objects adjusted\00", align 1
@.str.50 = private unnamed_addr constant [54 x i8] c"Wrong object count. Counter is %d but counted were %d\00", align 1
@.str.51 = private unnamed_addr constant [22 x i8] c"Object count adjusted\00", align 1
@.str.52 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.53 = private unnamed_addr constant [12 x i8] c"slab_errors\00", align 1
@slab_bug._entry = internal constant %struct.pi_entry { ptr @.str.54, ptr @.str.55, ptr @.str.2, i32 808, ptr null, ptr null }, align 1
@.str.54 = private unnamed_addr constant [81 x i8] c"\013=============================================================================\0A\00", align 1
@.str.55 = private unnamed_addr constant [9 x i8] c"slab_bug\00", align 1
@slab_bug._entry_ptr = internal global ptr @slab_bug._entry, section ".printk_index", align 4
@slab_bug._entry.56 = internal constant %struct.pi_entry { ptr @.str.57, ptr @.str.55, ptr @.str.2, i32 809, ptr null, ptr null }, align 1
@.str.57 = private unnamed_addr constant [20 x i8] c"\013BUG %s (%s): %pV\0A\00", align 1
@slab_bug._entry_ptr.58 = internal global ptr @slab_bug._entry.56, section ".printk_index", align 4
@slab_bug._entry.59 = internal constant %struct.pi_entry { ptr @.str.60, ptr @.str.55, ptr @.str.2, i32 810, ptr null, ptr null }, align 1
@.str.60 = private unnamed_addr constant [82 x i8] c"\013-----------------------------------------------------------------------------\0A\0A\00", align 1
@slab_bug._entry_ptr.61 = internal global ptr @slab_bug._entry.59, section ".printk_index", align 4
@print_trailer._entry = internal constant %struct.pi_entry { ptr @.str.62, ptr @.str.63, ptr @.str.2, i32 840, ptr null, ptr null }, align 1
@.str.62 = private unnamed_addr constant [36 x i8] c"\013Object 0x%p @offset=%tu fp=0x%p\0A\0A\00", align 1
@.str.63 = private unnamed_addr constant [14 x i8] c"print_trailer\00", align 1
@print_trailer._entry_ptr = internal global ptr @print_trailer._entry, section ".printk_index", align 4
@.str.64 = private unnamed_addr constant [10 x i8] c"Redzone  \00", align 1
@.str.65 = private unnamed_addr constant [10 x i8] c"Bytes b4 \00", align 1
@.str.66 = private unnamed_addr constant [10 x i8] c"Object   \00", align 1
@.str.67 = private unnamed_addr constant [10 x i8] c"Padding  \00", align 1
@print_slab_info._entry = internal constant %struct.pi_entry { ptr @.str.68, ptr @.str.69, ptr @.str.2, i32 797, ptr null, ptr null }, align 1
@.str.68 = private unnamed_addr constant [51 x i8] c"\013Slab 0x%p objects=%u used=%u fp=0x%p flags=%pGp\0A\00", align 1
@.str.69 = private unnamed_addr constant [16 x i8] c"print_slab_info\00", align 1
@print_slab_info._entry_ptr = internal global ptr @print_slab_info._entry, section ".printk_index", align 4
@.str.71 = private unnamed_addr constant [13 x i8] c"Left Redzone\00", align 1
@.str.72 = private unnamed_addr constant [14 x i8] c"Right Redzone\00", align 1
@.str.73 = private unnamed_addr constant [18 x i8] c"Alignment padding\00", align 1
@.str.74 = private unnamed_addr constant [7 x i8] c"Poison\00", align 1
@.str.75 = private unnamed_addr constant [11 x i8] c"End Poison\00", align 1
@.str.76 = private unnamed_addr constant [15 x i8] c"%s overwritten\00", align 1
@check_bytes_and_report._entry = internal constant %struct.pi_entry { ptr @.str.77, ptr @.str.78, ptr @.str.2, i32 959, ptr null, ptr null }, align 1
@.str.77 = private unnamed_addr constant [58 x i8] c"\0130x%p-0x%p @offset=%tu. First byte 0x%x instead of 0x%x\0A\00", align 1
@.str.78 = private unnamed_addr constant [23 x i8] c"check_bytes_and_report\00", align 1
@check_bytes_and_report._entry_ptr = internal global ptr @check_bytes_and_report._entry, section ".printk_index", align 4
@.str.79 = private unnamed_addr constant [15 x i8] c"Object padding\00", align 1
@trace._entry = internal constant %struct.pi_entry { ptr @.str.80, ptr @.str.81, ptr @.str.2, i32 1202, ptr null, ptr null }, align 1
@.str.80 = private unnamed_addr constant [37 x i8] c"\016TRACE %s %s 0x%p inuse=%d fp=0x%p\0A\00", align 1
@.str.81 = private unnamed_addr constant [6 x i8] c"trace\00", align 1
@trace._entry_ptr = internal global ptr @trace._entry, section ".printk_index", align 4
@.str.82 = private unnamed_addr constant [6 x i8] c"alloc\00", align 1
@.str.83 = private unnamed_addr constant [5 x i8] c"free\00", align 1
@.str.84 = private unnamed_addr constant [3 x i8] c"\016\00", align 1
@.str.85 = private unnamed_addr constant [8 x i8] c"Object \00", align 1
@slab_fix._entry = internal constant %struct.pi_entry { ptr @.str.86, ptr @.str.87, ptr @.str.2, i32 826, ptr null, ptr null }, align 1
@.str.86 = private unnamed_addr constant [15 x i8] c"\013FIX %s: %pV\0A\00", align 1
@.str.87 = private unnamed_addr constant [9 x i8] c"slab_fix\00", align 1
@slab_fix._entry_ptr = internal global ptr @slab_fix._entry, section ".printk_index", align 4
@.str.88 = private unnamed_addr constant [32 x i8] c"VM_BUG_ON_PAGE(PagePoisoned(p))\00", align 1
@__cmpxchg_double_slab.__already_done = internal unnamed_addr global i1 false, section ".data.once", align 1
@debug_locks = external dso_local local_unnamed_addr global i32, section ".data..read_mostly", align 4
@lockdep_recursion = external dso_local global i32, section ".data..percpu", align 4
@hardirqs_enabled = external dso_local global i32, section ".data..percpu", align 4
@memcg_kmem_enabled_key = external dso_local global %struct.static_key_false, align 4
@.str.90 = private unnamed_addr constant [64 x i8] c"VM_BUG_ON_PAGE(memcg_data && !(memcg_data & MEMCG_DATA_OBJCGS))\00", align 1
@.str.91 = private unnamed_addr constant [45 x i8] c"VM_BUG_ON_PAGE(memcg_data & MEMCG_DATA_KMEM)\00", align 1
@contig_page_data = external dso_local global %struct.pglist_data, align 128
@.str.92 = private unnamed_addr constant [48 x i8] c"%s: Wrong slab cache. %s but object is from %s\0A\00", align 1
@__func__.cache_from_obj = private unnamed_addr constant [15 x i8] c"cache_from_obj\00", align 1
@virt_to_cache.__already_done = internal unnamed_addr global i1 false, section ".data.once", align 1
@.str.93 = private unnamed_addr constant [32 x i8] c"%s: Object is not a Slab page!\0A\00", align 1
@__func__.virt_to_cache = private unnamed_addr constant [14 x i8] c"virt_to_cache\00", align 1
@__tracepoint_kmem_cache_free = external dso_local global %struct.tracepoint, align 4
@trace_kmem_cache_free.__warned = internal unnamed_addr global i1 false, section ".data.unlikely", align 1
@rcu_lock_map = external dso_local global %struct.lockdep_map, align 4
@rcu_read_lock.__warned = internal unnamed_addr global i1 false, section ".data.unlikely", align 1
@.str.94 = private unnamed_addr constant [25 x i8] c"include/linux/rcupdate.h\00", align 1
@.str.95 = private unnamed_addr constant [42 x i8] c"rcu_read_lock() used illegally while idle\00", align 1
@rcu_read_unlock.__warned = internal unnamed_addr global i1 false, section ".data.unlikely", align 1
@.str.96 = private unnamed_addr constant [44 x i8] c"rcu_read_unlock() used illegally while idle\00", align 1
@gfp_allowed_mask = external dso_local local_unnamed_addr global i32, align 4
@.str.97 = private unnamed_addr constant [25 x i8] c"include/linux/sched/mm.h\00", align 1
@oops_in_progress = external dso_local local_unnamed_addr global i32, align 4
@debug_locks_silent = external dso_local local_unnamed_addr global i32, section ".data..read_mostly", align 4
@.str.98 = private unnamed_addr constant [36 x i8] c"include/linux/local_lock_internal.h\00", align 1
@.str.99 = private unnamed_addr constant [24 x i8] c"DEBUG_LOCKS_WARN_ON(%s)\00", align 1
@.str.100 = private unnamed_addr constant [9 x i8] c"l->owner\00", align 1
@kfence_allocation_key = external dso_local global %struct.static_key_false, align 4
@kfence_allocation_gate = external dso_local global %struct.atomic_t, align 4
@.str.101 = private unnamed_addr constant [20 x i8] c"l->owner != current\00", align 1
@.str.103 = private unnamed_addr constant [28 x i8] c"Isolate corrupted freechain\00", align 1
@new_slab.__already_done = internal unnamed_addr global i1 false, section ".data.once", align 1
@slab_out_of_memory.slub_oom_rs = internal global %struct.ratelimit_state { %struct.raw_spinlock { %struct.arch_spinlock_t zeroinitializer, i32 -559067475, i32 -1, ptr inttoptr (i32 -1 to ptr), %struct.lockdep_map { ptr null, [2 x ptr] zeroinitializer, ptr @.str.106, i8 0, i8 2, i8 0, i32 0, i32 0 } }, i32 500, i32 10, i32 0, i32 0, i32 0, i32 0 }, align 4
@.str.106 = private unnamed_addr constant [17 x i8] c"slub_oom_rs.lock\00", align 1
@__func__.slab_out_of_memory = private unnamed_addr constant [19 x i8] c"slab_out_of_memory\00", align 1
@slab_out_of_memory._entry = internal constant %struct.pi_entry { ptr @.str.107, ptr @__func__.slab_out_of_memory, ptr @.str.2, i32 2810, ptr null, ptr null }, align 1
@.str.107 = private unnamed_addr constant [61 x i8] c"\014SLUB: Unable to allocate memory on node %d, gfp=%#x(%pGg)\0A\00", align 1
@slab_out_of_memory._entry_ptr = internal global ptr @slab_out_of_memory._entry, section ".printk_index", align 4
@slab_out_of_memory._entry.108 = internal constant %struct.pi_entry { ptr @.str.109, ptr @__func__.slab_out_of_memory, ptr @.str.2, i32 2813, ptr null, ptr null }, align 1
@.str.109 = private unnamed_addr constant [83 x i8] c"\014  cache: %s, object size: %u, buffer size: %u, default order: %u, min order: %u\0A\00", align 1
@slab_out_of_memory._entry_ptr.110 = internal global ptr @slab_out_of_memory._entry.108, section ".printk_index", align 4
@slab_out_of_memory._entry.111 = internal constant %struct.pi_entry { ptr @.str.112, ptr @__func__.slab_out_of_memory, ptr @.str.2, i32 2817, ptr null, ptr null }, align 1
@.str.112 = private unnamed_addr constant [68 x i8] c"\014  %s debugging increased min order, use slub_debug=O to disable.\0A\00", align 1
@slab_out_of_memory._entry_ptr.113 = internal global ptr @slab_out_of_memory._entry.111, section ".printk_index", align 4
@slab_out_of_memory._entry.114 = internal constant %struct.pi_entry { ptr @.str.115, ptr @__func__.slab_out_of_memory, ptr @.str.2, i32 2829, ptr null, ptr null }, align 1
@.str.115 = private unnamed_addr constant [47 x i8] c"\014  node %d: slabs: %ld, objs: %ld, free: %ld\0A\00", align 1
@slab_out_of_memory._entry_ptr.116 = internal global ptr @slab_out_of_memory._entry.114, section ".printk_index", align 4
@.str.117 = private unnamed_addr constant [25 x i8] c"Marking all objects used\00", align 1
@.str.118 = private unnamed_addr constant [29 x i8] c"Freelist Pointer check fails\00", align 1
@flush_lock = internal global %struct.mutex { %struct.atomic_t zeroinitializer, %struct.raw_spinlock { %struct.arch_spinlock_t zeroinitializer, i32 -559067475, i32 -1, ptr inttoptr (i32 -1 to ptr), %struct.lockdep_map { ptr null, [2 x ptr] zeroinitializer, ptr @.str.120, i8 0, i8 2, i8 0, i32 0, i32 0 } }, %struct.optimistic_spin_queue zeroinitializer, %struct.list_head { ptr getelementptr (i8, ptr @flush_lock, i64 52), ptr getelementptr (i8, ptr @flush_lock, i64 52) }, ptr @flush_lock, %struct.lockdep_map { ptr null, [2 x ptr] zeroinitializer, ptr @.str.121, i8 0, i8 4, i8 0, i32 0, i32 0 } }, align 4
@flush_all_cpus_locked.__key = internal global %struct.lock_class_key zeroinitializer, align 4
@.str.119 = private unnamed_addr constant [30 x i8] c"(work_completion)(&sfw->work)\00", align 1
@.str.120 = private unnamed_addr constant [21 x i8] c"flush_lock.wait_lock\00", align 1
@.str.121 = private unnamed_addr constant [11 x i8] c"flush_lock\00", align 1
@system_wq = external dso_local local_unnamed_addr global ptr, align 4
@.str.122 = private unnamed_addr constant [51 x i8] c"Objects remaining in %s on __kmem_cache_shutdown()\00", align 1
@list_slab_objects._entry = internal constant %struct.pi_entry { ptr @.str.123, ptr @.str.124, ptr @.str.2, i32 4259, ptr null, ptr null }, align 1
@.str.123 = private unnamed_addr constant [27 x i8] c"\013Object 0x%p @offset=%tu\0A\00", align 1
@.str.124 = private unnamed_addr constant [18 x i8] c"list_slab_objects\00", align 1
@list_slab_objects._entry_ptr = internal global ptr @list_slab_objects._entry, section ".printk_index", align 4
@object_map_lock = internal global %struct.raw_spinlock { %struct.arch_spinlock_t zeroinitializer, i32 -559067475, i32 -1, ptr inttoptr (i32 -1 to ptr), %struct.lockdep_map { ptr null, [2 x ptr] zeroinitializer, ptr @.str.125, i8 0, i8 2, i8 0, i32 0, i32 0 } }, align 4
@object_map = internal global [1024 x i32] zeroinitializer, align 4
@.str.125 = private unnamed_addr constant [16 x i8] c"object_map_lock\00", align 1
@__kfence_pool = external dso_local local_unnamed_addr global ptr, align 4
@mem_map = external dso_local local_unnamed_addr global ptr, align 4
@__tracepoint_kfree = external dso_local global %struct.tracepoint, align 4
@trace_kfree.__warned = internal unnamed_addr global i1 false, section ".data.unlikely", align 1
@free_large_kmalloc.__already_done = internal unnamed_addr global i1 false, section ".data.once", align 1
@free_large_kmalloc.__already_done.126 = internal unnamed_addr global i1 false, section ".data.once", align 1
@free_large_kmalloc._entry = internal constant %struct.pi_entry { ptr @.str.127, ptr @.str.128, ptr @.str.2, i32 3543, ptr null, ptr null }, align 1
@.str.127 = private unnamed_addr constant [24 x i8] c"\014object pointer: 0x%p\0A\00", align 1
@.str.128 = private unnamed_addr constant [19 x i8] c"free_large_kmalloc\00", align 1
@free_large_kmalloc._entry_ptr = internal global ptr @free_large_kmalloc._entry, section ".printk_index", align 4
@slab_mutex = external dso_local global %struct.mutex, align 4
@slab_caches = external dso_local global %struct.list_head, align 4
@init_kmem_cache_node.__key = internal global %struct.lock_class_key zeroinitializer, align 4
@.str.129 = private unnamed_addr constant [14 x i8] c"&n->list_lock\00", align 1
@init_cache_random_seq._entry = internal constant %struct.pi_entry { ptr @.str.130, ptr @.str.131, ptr @.str.2, i32 1828, ptr null, ptr null }, align 1
@.str.130 = private unnamed_addr constant [47 x i8] c"\013SLUB: Unable to initialize free list for %s\0A\00", align 1
@.str.131 = private unnamed_addr constant [22 x i8] c"init_cache_random_seq\00", align 1
@init_cache_random_seq._entry_ptr = internal global ptr @init_cache_random_seq._entry, section ".printk_index", align 4
@__cpu_present_mask = external dso_local global %struct.cpumask, align 4
@early_kmem_cache_node_alloc._entry = internal constant %struct.pi_entry { ptr @.str.132, ptr @.str.133, ptr @.str.2, i32 3935, ptr null, ptr null }, align 1
@.str.132 = private unnamed_addr constant [48 x i8] c"\013SLUB: Unable to allocate memory from node %d\0A\00", align 1
@.str.133 = private unnamed_addr constant [28 x i8] c"early_kmem_cache_node_alloc\00", align 1
@early_kmem_cache_node_alloc._entry_ptr = internal global ptr @early_kmem_cache_node_alloc._entry, section ".printk_index", align 4
@early_kmem_cache_node_alloc._entry.134 = internal constant %struct.pi_entry { ptr @.str.135, ptr @.str.133, ptr @.str.2, i32 3936, ptr null, ptr null }, align 1
@.str.135 = private unnamed_addr constant [81 x i8] c"\013SLUB: Allocating a useless per node structure in order to be able to continue\0A\00", align 1
@early_kmem_cache_node_alloc._entry_ptr.136 = internal global ptr @early_kmem_cache_node_alloc._entry.134, section ".printk_index", align 4
@__cpu_possible_mask = external dso_local global %struct.cpumask, align 4
@init_kmem_cache_cpus.__key = internal global %struct.lock_class_key zeroinitializer, align 4
@.str.137 = private unnamed_addr constant [9 x i8] c"&c->lock\00", align 1
@validate_slab_node._entry = internal constant %struct.pi_entry { ptr @.str.138, ptr @.str.139, ptr @.str.2, i32 5020, ptr null, ptr null }, align 1
@.str.138 = private unnamed_addr constant [54 x i8] c"\013SLUB %s: %ld partial slabs counted but counter=%ld\0A\00", align 1
@.str.139 = private unnamed_addr constant [19 x i8] c"validate_slab_node\00", align 1
@validate_slab_node._entry_ptr = internal global ptr @validate_slab_node._entry, section ".printk_index", align 4
@validate_slab_node._entry.140 = internal constant %struct.pi_entry { ptr @.str.141, ptr @.str.139, ptr @.str.2, i32 5033, ptr null, ptr null }, align 1
@.str.141 = private unnamed_addr constant [46 x i8] c"\013SLUB: %s %ld slabs counted but counter=%ld\0A\00", align 1
@validate_slab_node._entry_ptr.142 = internal global ptr @validate_slab_node._entry.140, section ".printk_index", align 4
@slab_ktype = internal global %struct.kobj_type { ptr @kmem_cache_release, ptr @slab_sysfs_ops, ptr null, ptr null, ptr null, ptr null, ptr null }, align 4
@slab_kset = internal unnamed_addr global ptr null, align 4
@slab_attr_group = internal constant %struct.attribute_group { ptr null, ptr null, ptr null, ptr @slab_attrs, ptr null }, align 4
@slab_sysfs_ops = internal constant %struct.sysfs_ops { ptr @slab_attr_show, ptr @slab_attr_store }, align 4
@.str.143 = private unnamed_addr constant [5 x i8] c"%07u\00", align 1
@kmalloc_caches = external dso_local local_unnamed_addr global [4 x [14 x ptr]], align 4
@slab_attrs = internal global [56 x ptr] [ptr @slab_size_attr, ptr @object_size_attr, ptr @objs_per_slab_attr, ptr @order_attr, ptr @min_partial_attr, ptr @cpu_partial_attr, ptr @objects_attr, ptr @objects_partial_attr, ptr @partial_attr, ptr @cpu_slabs_attr, ptr @ctor_attr, ptr @aliases_attr, ptr @align_attr, ptr @hwcache_align_attr, ptr @reclaim_account_attr, ptr @destroy_by_rcu_attr, ptr @shrink_attr, ptr @slabs_cpu_partial_attr, ptr @total_objects_attr, ptr @slabs_attr, ptr @sanity_checks_attr, ptr @trace_attr, ptr @red_zone_attr, ptr @poison_attr, ptr @store_user_attr, ptr @validate_attr, ptr @cache_dma_attr, ptr @alloc_fastpath_attr, ptr @alloc_slowpath_attr, ptr @free_fastpath_attr, ptr @free_slowpath_attr, ptr @free_frozen_attr, ptr @free_add_partial_attr, ptr @free_remove_partial_attr, ptr @alloc_from_partial_attr, ptr @alloc_slab_attr, ptr @alloc_refill_attr, ptr @alloc_node_mismatch_attr, ptr @free_slab_attr, ptr @cpuslab_flush_attr, ptr @deactivate_full_attr, ptr @deactivate_empty_attr, ptr @deactivate_to_head_attr, ptr @deactivate_to_tail_attr, ptr @deactivate_remote_frees_attr, ptr @deactivate_bypass_attr, ptr @order_fallback_attr, ptr @cmpxchg_double_fail_attr, ptr @cmpxchg_double_cpu_fail_attr, ptr @cpu_partial_alloc_attr, ptr @cpu_partial_free_attr, ptr @cpu_partial_node_attr, ptr @cpu_partial_drain_attr, ptr @failslab_attr, ptr @usersize_attr, ptr null], align 4
@slab_size_attr = internal global %struct.slab_attribute { %struct.attribute { ptr @.str.144, i16 256, i8 0, ptr null, %struct.lock_class_key zeroinitializer }, ptr @slab_size_show, ptr null }, align 4
@object_size_attr = internal global %struct.slab_attribute { %struct.attribute { ptr @.str.146, i16 256, i8 0, ptr null, %struct.lock_class_key zeroinitializer }, ptr @object_size_show, ptr null }, align 4
@objs_per_slab_attr = internal global %struct.slab_attribute { %struct.attribute { ptr @.str.147, i16 256, i8 0, ptr null, %struct.lock_class_key zeroinitializer }, ptr @objs_per_slab_show, ptr null }, align 4
@order_attr = internal global %struct.slab_attribute { %struct.attribute { ptr @.str.148, i16 256, i8 0, ptr null, %struct.lock_class_key zeroinitializer }, ptr @order_show, ptr null }, align 4
@min_partial_attr = internal global %struct.slab_attribute { %struct.attribute { ptr @.str.149, i16 384, i8 0, ptr null, %struct.lock_class_key zeroinitializer }, ptr @min_partial_show, ptr @min_partial_store }, align 4
@cpu_partial_attr = internal global %struct.slab_attribute { %struct.attribute { ptr @.str.151, i16 384, i8 0, ptr null, %struct.lock_class_key zeroinitializer }, ptr @cpu_partial_show, ptr @cpu_partial_store }, align 4
@objects_attr = internal global %struct.slab_attribute { %struct.attribute { ptr @.str.152, i16 256, i8 0, ptr null, %struct.lock_class_key zeroinitializer }, ptr @objects_show, ptr null }, align 4
@objects_partial_attr = internal global %struct.slab_attribute { %struct.attribute { ptr @.str.156, i16 256, i8 0, ptr null, %struct.lock_class_key zeroinitializer }, ptr @objects_partial_show, ptr null }, align 4
@partial_attr = internal global %struct.slab_attribute { %struct.attribute { ptr @.str.157, i16 256, i8 0, ptr null, %struct.lock_class_key zeroinitializer }, ptr @partial_show, ptr null }, align 4
@cpu_slabs_attr = internal global %struct.slab_attribute { %struct.attribute { ptr @.str.158, i16 256, i8 0, ptr null, %struct.lock_class_key zeroinitializer }, ptr @cpu_slabs_show, ptr null }, align 4
@ctor_attr = internal global %struct.slab_attribute { %struct.attribute { ptr @.str.159, i16 256, i8 0, ptr null, %struct.lock_class_key zeroinitializer }, ptr @ctor_show, ptr null }, align 4
@aliases_attr = internal global %struct.slab_attribute { %struct.attribute { ptr @.str.161, i16 256, i8 0, ptr null, %struct.lock_class_key zeroinitializer }, ptr @aliases_show, ptr null }, align 4
@align_attr = internal global %struct.slab_attribute { %struct.attribute { ptr @.str.163, i16 256, i8 0, ptr null, %struct.lock_class_key zeroinitializer }, ptr @align_show, ptr null }, align 4
@hwcache_align_attr = internal global %struct.slab_attribute { %struct.attribute { ptr @.str.164, i16 256, i8 0, ptr null, %struct.lock_class_key zeroinitializer }, ptr @hwcache_align_show, ptr null }, align 4
@reclaim_account_attr = internal global %struct.slab_attribute { %struct.attribute { ptr @.str.165, i16 256, i8 0, ptr null, %struct.lock_class_key zeroinitializer }, ptr @reclaim_account_show, ptr null }, align 4
@destroy_by_rcu_attr = internal global %struct.slab_attribute { %struct.attribute { ptr @.str.166, i16 256, i8 0, ptr null, %struct.lock_class_key zeroinitializer }, ptr @destroy_by_rcu_show, ptr null }, align 4
@shrink_attr = internal global %struct.slab_attribute { %struct.attribute { ptr @.str.167, i16 384, i8 0, ptr null, %struct.lock_class_key zeroinitializer }, ptr @shrink_show, ptr @shrink_store }, align 4
@slabs_cpu_partial_attr = internal global %struct.slab_attribute { %struct.attribute { ptr @.str.168, i16 256, i8 0, ptr null, %struct.lock_class_key zeroinitializer }, ptr @slabs_cpu_partial_show, ptr null }, align 4
@total_objects_attr = internal global %struct.slab_attribute { %struct.attribute { ptr @.str.171, i16 256, i8 0, ptr null, %struct.lock_class_key zeroinitializer }, ptr @total_objects_show, ptr null }, align 4
@slabs_attr = internal global %struct.slab_attribute { %struct.attribute { ptr @.str.172, i16 256, i8 0, ptr null, %struct.lock_class_key zeroinitializer }, ptr @slabs_show, ptr null }, align 4
@sanity_checks_attr = internal global %struct.slab_attribute { %struct.attribute { ptr @.str.173, i16 256, i8 0, ptr null, %struct.lock_class_key zeroinitializer }, ptr @sanity_checks_show, ptr null }, align 4
@trace_attr = internal global %struct.slab_attribute { %struct.attribute { ptr @.str.81, i16 256, i8 0, ptr null, %struct.lock_class_key zeroinitializer }, ptr @trace_show, ptr null }, align 4
@red_zone_attr = internal global %struct.slab_attribute { %struct.attribute { ptr @.str.174, i16 256, i8 0, ptr null, %struct.lock_class_key zeroinitializer }, ptr @red_zone_show, ptr null }, align 4
@poison_attr = internal global %struct.slab_attribute { %struct.attribute { ptr @.str.175, i16 256, i8 0, ptr null, %struct.lock_class_key zeroinitializer }, ptr @poison_show, ptr null }, align 4
@store_user_attr = internal global %struct.slab_attribute { %struct.attribute { ptr @.str.176, i16 256, i8 0, ptr null, %struct.lock_class_key zeroinitializer }, ptr @store_user_show, ptr null }, align 4
@validate_attr = internal global %struct.slab_attribute { %struct.attribute { ptr @.str.177, i16 384, i8 0, ptr null, %struct.lock_class_key zeroinitializer }, ptr @validate_show, ptr @validate_store }, align 4
@cache_dma_attr = internal global %struct.slab_attribute { %struct.attribute { ptr @.str.178, i16 256, i8 0, ptr null, %struct.lock_class_key zeroinitializer }, ptr @cache_dma_show, ptr null }, align 4
@alloc_fastpath_attr = internal global %struct.slab_attribute { %struct.attribute { ptr @.str.179, i16 384, i8 0, ptr null, %struct.lock_class_key zeroinitializer }, ptr @alloc_fastpath_show, ptr @alloc_fastpath_store }, align 4
@alloc_slowpath_attr = internal global %struct.slab_attribute { %struct.attribute { ptr @.str.181, i16 384, i8 0, ptr null, %struct.lock_class_key zeroinitializer }, ptr @alloc_slowpath_show, ptr @alloc_slowpath_store }, align 4
@free_fastpath_attr = internal global %struct.slab_attribute { %struct.attribute { ptr @.str.182, i16 384, i8 0, ptr null, %struct.lock_class_key zeroinitializer }, ptr @free_fastpath_show, ptr @free_fastpath_store }, align 4
@free_slowpath_attr = internal global %struct.slab_attribute { %struct.attribute { ptr @.str.183, i16 384, i8 0, ptr null, %struct.lock_class_key zeroinitializer }, ptr @free_slowpath_show, ptr @free_slowpath_store }, align 4
@free_frozen_attr = internal global %struct.slab_attribute { %struct.attribute { ptr @.str.184, i16 384, i8 0, ptr null, %struct.lock_class_key zeroinitializer }, ptr @free_frozen_show, ptr @free_frozen_store }, align 4
@free_add_partial_attr = internal global %struct.slab_attribute { %struct.attribute { ptr @.str.185, i16 384, i8 0, ptr null, %struct.lock_class_key zeroinitializer }, ptr @free_add_partial_show, ptr @free_add_partial_store }, align 4
@free_remove_partial_attr = internal global %struct.slab_attribute { %struct.attribute { ptr @.str.186, i16 384, i8 0, ptr null, %struct.lock_class_key zeroinitializer }, ptr @free_remove_partial_show, ptr @free_remove_partial_store }, align 4
@alloc_from_partial_attr = internal global %struct.slab_attribute { %struct.attribute { ptr @.str.187, i16 384, i8 0, ptr null, %struct.lock_class_key zeroinitializer }, ptr @alloc_from_partial_show, ptr @alloc_from_partial_store }, align 4
@alloc_slab_attr = internal global %struct.slab_attribute { %struct.attribute { ptr @.str.188, i16 384, i8 0, ptr null, %struct.lock_class_key zeroinitializer }, ptr @alloc_slab_show, ptr @alloc_slab_store }, align 4
@alloc_refill_attr = internal global %struct.slab_attribute { %struct.attribute { ptr @.str.189, i16 384, i8 0, ptr null, %struct.lock_class_key zeroinitializer }, ptr @alloc_refill_show, ptr @alloc_refill_store }, align 4
@alloc_node_mismatch_attr = internal global %struct.slab_attribute { %struct.attribute { ptr @.str.190, i16 384, i8 0, ptr null, %struct.lock_class_key zeroinitializer }, ptr @alloc_node_mismatch_show, ptr @alloc_node_mismatch_store }, align 4
@free_slab_attr = internal global %struct.slab_attribute { %struct.attribute { ptr @.str.191, i16 384, i8 0, ptr null, %struct.lock_class_key zeroinitializer }, ptr @free_slab_show, ptr @free_slab_store }, align 4
@cpuslab_flush_attr = internal global %struct.slab_attribute { %struct.attribute { ptr @.str.192, i16 384, i8 0, ptr null, %struct.lock_class_key zeroinitializer }, ptr @cpuslab_flush_show, ptr @cpuslab_flush_store }, align 4
@deactivate_full_attr = internal global %struct.slab_attribute { %struct.attribute { ptr @.str.193, i16 384, i8 0, ptr null, %struct.lock_class_key zeroinitializer }, ptr @deactivate_full_show, ptr @deactivate_full_store }, align 4
@deactivate_empty_attr = internal global %struct.slab_attribute { %struct.attribute { ptr @.str.194, i16 384, i8 0, ptr null, %struct.lock_class_key zeroinitializer }, ptr @deactivate_empty_show, ptr @deactivate_empty_store }, align 4
@deactivate_to_head_attr = internal global %struct.slab_attribute { %struct.attribute { ptr @.str.195, i16 384, i8 0, ptr null, %struct.lock_class_key zeroinitializer }, ptr @deactivate_to_head_show, ptr @deactivate_to_head_store }, align 4
@deactivate_to_tail_attr = internal global %struct.slab_attribute { %struct.attribute { ptr @.str.196, i16 384, i8 0, ptr null, %struct.lock_class_key zeroinitializer }, ptr @deactivate_to_tail_show, ptr @deactivate_to_tail_store }, align 4
@deactivate_remote_frees_attr = internal global %struct.slab_attribute { %struct.attribute { ptr @.str.197, i16 384, i8 0, ptr null, %struct.lock_class_key zeroinitializer }, ptr @deactivate_remote_frees_show, ptr @deactivate_remote_frees_store }, align 4
@deactivate_bypass_attr = internal global %struct.slab_attribute { %struct.attribute { ptr @.str.198, i16 384, i8 0, ptr null, %struct.lock_class_key zeroinitializer }, ptr @deactivate_bypass_show, ptr @deactivate_bypass_store }, align 4
@order_fallback_attr = internal global %struct.slab_attribute { %struct.attribute { ptr @.str.199, i16 384, i8 0, ptr null, %struct.lock_class_key zeroinitializer }, ptr @order_fallback_show, ptr @order_fallback_store }, align 4
@cmpxchg_double_fail_attr = internal global %struct.slab_attribute { %struct.attribute { ptr @.str.200, i16 384, i8 0, ptr null, %struct.lock_class_key zeroinitializer }, ptr @cmpxchg_double_fail_show, ptr @cmpxchg_double_fail_store }, align 4
@cmpxchg_double_cpu_fail_attr = internal global %struct.slab_attribute { %struct.attribute { ptr @.str.201, i16 384, i8 0, ptr null, %struct.lock_class_key zeroinitializer }, ptr @cmpxchg_double_cpu_fail_show, ptr @cmpxchg_double_cpu_fail_store }, align 4
@cpu_partial_alloc_attr = internal global %struct.slab_attribute { %struct.attribute { ptr @.str.202, i16 384, i8 0, ptr null, %struct.lock_class_key zeroinitializer }, ptr @cpu_partial_alloc_show, ptr @cpu_partial_alloc_store }, align 4
@cpu_partial_free_attr = internal global %struct.slab_attribute { %struct.attribute { ptr @.str.203, i16 384, i8 0, ptr null, %struct.lock_class_key zeroinitializer }, ptr @cpu_partial_free_show, ptr @cpu_partial_free_store }, align 4
@cpu_partial_node_attr = internal global %struct.slab_attribute { %struct.attribute { ptr @.str.204, i16 384, i8 0, ptr null, %struct.lock_class_key zeroinitializer }, ptr @cpu_partial_node_show, ptr @cpu_partial_node_store }, align 4
@cpu_partial_drain_attr = internal global %struct.slab_attribute { %struct.attribute { ptr @.str.205, i16 384, i8 0, ptr null, %struct.lock_class_key zeroinitializer }, ptr @cpu_partial_drain_show, ptr @cpu_partial_drain_store }, align 4
@failslab_attr = internal global %struct.slab_attribute { %struct.attribute { ptr @.str.206, i16 256, i8 0, ptr null, %struct.lock_class_key zeroinitializer }, ptr @failslab_show, ptr null }, align 4
@usersize_attr = internal global %struct.slab_attribute { %struct.attribute { ptr @.str.207, i16 256, i8 0, ptr null, %struct.lock_class_key zeroinitializer }, ptr @usersize_show, ptr null }, align 4
@.str.144 = private unnamed_addr constant [10 x i8] c"slab_size\00", align 1
@.str.145 = private unnamed_addr constant [4 x i8] c"%u\0A\00", align 1
@.str.146 = private unnamed_addr constant [12 x i8] c"object_size\00", align 1
@.str.147 = private unnamed_addr constant [14 x i8] c"objs_per_slab\00", align 1
@.str.148 = private unnamed_addr constant [6 x i8] c"order\00", align 1
@.str.149 = private unnamed_addr constant [12 x i8] c"min_partial\00", align 1
@.str.150 = private unnamed_addr constant [5 x i8] c"%lu\0A\00", align 1
@.str.151 = private unnamed_addr constant [12 x i8] c"cpu_partial\00", align 1
@.str.152 = private unnamed_addr constant [8 x i8] c"objects\00", align 1
@show_slab_objects.__already_done = internal unnamed_addr global i1 false, section ".data.once", align 1
@show_slab_objects.__already_done.153 = internal unnamed_addr global i1 false, section ".data.once", align 1
@.str.154 = private unnamed_addr constant [4 x i8] c"%lu\00", align 1
@.str.155 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.156 = private unnamed_addr constant [16 x i8] c"objects_partial\00", align 1
@.str.157 = private unnamed_addr constant [8 x i8] c"partial\00", align 1
@.str.158 = private unnamed_addr constant [10 x i8] c"cpu_slabs\00", align 1
@.str.159 = private unnamed_addr constant [5 x i8] c"ctor\00", align 1
@.str.160 = private unnamed_addr constant [5 x i8] c"%pS\0A\00", align 1
@.str.161 = private unnamed_addr constant [8 x i8] c"aliases\00", align 1
@.str.162 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@.str.163 = private unnamed_addr constant [6 x i8] c"align\00", align 1
@.str.164 = private unnamed_addr constant [14 x i8] c"hwcache_align\00", align 1
@.str.165 = private unnamed_addr constant [16 x i8] c"reclaim_account\00", align 1
@.str.166 = private unnamed_addr constant [15 x i8] c"destroy_by_rcu\00", align 1
@.str.167 = private unnamed_addr constant [7 x i8] c"shrink\00", align 1
@.str.168 = private unnamed_addr constant [18 x i8] c"slabs_cpu_partial\00", align 1
@.str.169 = private unnamed_addr constant [7 x i8] c"%d(%d)\00", align 1
@.str.170 = private unnamed_addr constant [12 x i8] c" C%d=%d(%d)\00", align 1
@.str.171 = private unnamed_addr constant [14 x i8] c"total_objects\00", align 1
@.str.172 = private unnamed_addr constant [6 x i8] c"slabs\00", align 1
@.str.173 = private unnamed_addr constant [14 x i8] c"sanity_checks\00", align 1
@.str.174 = private unnamed_addr constant [9 x i8] c"red_zone\00", align 1
@.str.175 = private unnamed_addr constant [7 x i8] c"poison\00", align 1
@.str.176 = private unnamed_addr constant [11 x i8] c"store_user\00", align 1
@.str.177 = private unnamed_addr constant [9 x i8] c"validate\00", align 1
@.str.178 = private unnamed_addr constant [10 x i8] c"cache_dma\00", align 1
@.str.179 = private unnamed_addr constant [15 x i8] c"alloc_fastpath\00", align 1
@.str.180 = private unnamed_addr constant [8 x i8] c" C%d=%u\00", align 1
@.str.181 = private unnamed_addr constant [15 x i8] c"alloc_slowpath\00", align 1
@.str.182 = private unnamed_addr constant [14 x i8] c"free_fastpath\00", align 1
@.str.183 = private unnamed_addr constant [14 x i8] c"free_slowpath\00", align 1
@.str.184 = private unnamed_addr constant [12 x i8] c"free_frozen\00", align 1
@.str.185 = private unnamed_addr constant [17 x i8] c"free_add_partial\00", align 1
@.str.186 = private unnamed_addr constant [20 x i8] c"free_remove_partial\00", align 1
@.str.187 = private unnamed_addr constant [19 x i8] c"alloc_from_partial\00", align 1
@.str.188 = private unnamed_addr constant [11 x i8] c"alloc_slab\00", align 1
@.str.189 = private unnamed_addr constant [13 x i8] c"alloc_refill\00", align 1
@.str.190 = private unnamed_addr constant [20 x i8] c"alloc_node_mismatch\00", align 1
@.str.191 = private unnamed_addr constant [10 x i8] c"free_slab\00", align 1
@.str.192 = private unnamed_addr constant [14 x i8] c"cpuslab_flush\00", align 1
@.str.193 = private unnamed_addr constant [16 x i8] c"deactivate_full\00", align 1
@.str.194 = private unnamed_addr constant [17 x i8] c"deactivate_empty\00", align 1
@.str.195 = private unnamed_addr constant [19 x i8] c"deactivate_to_head\00", align 1
@.str.196 = private unnamed_addr constant [19 x i8] c"deactivate_to_tail\00", align 1
@.str.197 = private unnamed_addr constant [24 x i8] c"deactivate_remote_frees\00", align 1
@.str.198 = private unnamed_addr constant [18 x i8] c"deactivate_bypass\00", align 1
@.str.199 = private unnamed_addr constant [15 x i8] c"order_fallback\00", align 1
@.str.200 = private unnamed_addr constant [20 x i8] c"cmpxchg_double_fail\00", align 1
@.str.201 = private unnamed_addr constant [24 x i8] c"cmpxchg_double_cpu_fail\00", align 1
@.str.202 = private unnamed_addr constant [18 x i8] c"cpu_partial_alloc\00", align 1
@.str.203 = private unnamed_addr constant [17 x i8] c"cpu_partial_free\00", align 1
@.str.204 = private unnamed_addr constant [17 x i8] c"cpu_partial_node\00", align 1
@.str.205 = private unnamed_addr constant [18 x i8] c"cpu_partial_drain\00", align 1
@.str.206 = private unnamed_addr constant [9 x i8] c"failslab\00", align 1
@.str.207 = private unnamed_addr constant [9 x i8] c"usersize\00", align 1
@alias_list = internal unnamed_addr global ptr null, align 4
@.str.208 = private unnamed_addr constant [5 x i8] c"slab\00", align 1
@kernel_kobj = external dso_local local_unnamed_addr global ptr, align 4
@slab_sysfs_init._entry = internal constant %struct.pi_entry { ptr @.str.209, ptr @.str.210, ptr @.str.2, i32 6027, ptr null, ptr null }, align 1
@.str.209 = private unnamed_addr constant [35 x i8] c"\013Cannot register slab subsystem.\0A\00", align 1
@.str.210 = private unnamed_addr constant [16 x i8] c"slab_sysfs_init\00", align 1
@slab_sysfs_init._entry_ptr = internal global ptr @slab_sysfs_init._entry, section ".printk_index", align 4
@slab_sysfs_init._entry.211 = internal constant %struct.pi_entry { ptr @.str.212, ptr @.str.210, ptr @.str.2, i32 6037, ptr null, ptr null }, align 1
@.str.212 = private unnamed_addr constant [45 x i8] c"\013SLUB: Unable to add boot slab %s to sysfs\0A\00", align 1
@slab_sysfs_init._entry_ptr.213 = internal global ptr @slab_sysfs_init._entry.211, section ".printk_index", align 4
@slab_sysfs_init._entry.214 = internal constant %struct.pi_entry { ptr @.str.215, ptr @.str.210, ptr @.str.2, i32 6047, ptr null, ptr null }, align 1
@.str.215 = private unnamed_addr constant [51 x i8] c"\013SLUB: Unable to add boot slab alias %s to sysfs\0A\00", align 1
@slab_sysfs_init._entry_ptr.216 = internal global ptr @slab_sysfs_init._entry.214, section ".printk_index", align 4
@.str.217 = private unnamed_addr constant [13 x i8] c"alloc_traces\00", align 1
@slab_debugfs_fops = internal constant %struct.file_operations { ptr null, ptr @seq_lseek, ptr @seq_read, ptr null, ptr null, ptr null, ptr null, ptr null, ptr null, ptr null, ptr null, ptr null, ptr null, i32 0, ptr @slab_debug_trace_open, ptr null, ptr @slab_debug_trace_release, ptr null, ptr null, ptr null, ptr null, ptr null, ptr null, ptr null, ptr null, ptr null, ptr null, ptr null, ptr null, ptr null, ptr null, ptr null }, align 4
@.str.218 = private unnamed_addr constant [12 x i8] c"free_traces\00", align 1
@slab_debugfs_sops = internal constant %struct.seq_operations { ptr @slab_debugfs_start, ptr @slab_debugfs_stop, ptr @slab_debugfs_next, ptr @slab_debugfs_show }, align 4
@.str.219 = private unnamed_addr constant [6 x i8] c"%7ld \00", align 1
@.str.220 = private unnamed_addr constant [4 x i8] c"%pS\00", align 1
@.str.221 = private unnamed_addr constant [16 x i8] c"<not-available>\00", align 1
@.str.222 = private unnamed_addr constant [18 x i8] c" age=%ld/%llu/%ld\00", align 1
@.str.223 = private unnamed_addr constant [9 x i8] c" age=%ld\00", align 1
@.str.224 = private unnamed_addr constant [13 x i8] c" pid=%ld-%ld\00", align 1
@.str.225 = private unnamed_addr constant [9 x i8] c" pid=%ld\00", align 1
@.str.226 = private unnamed_addr constant [12 x i8] c" cpus=%*pbl\00", align 1
@.str.227 = private unnamed_addr constant [9 x i8] c"No data\0A\00", align 1
@__num_online_cpus = external dso_local global %struct.atomic_t, align 4
@llvm.compiler.used = appending global [72 x ptr] [ptr @__initcall__kmod_slub__367_6055_slab_sysfs_init6, ptr @__initcall__kmod_slub__368_6236_slab_debugfs_init6, ptr @__ksymtab___kmalloc, ptr @__ksymtab___kmalloc_track_caller, ptr @__ksymtab___ksize, ptr @__ksymtab_kfree, ptr @__ksymtab_kmem_cache_alloc, ptr @__ksymtab_kmem_cache_alloc_bulk, ptr @__ksymtab_kmem_cache_alloc_trace, ptr @__ksymtab_kmem_cache_free, ptr @__ksymtab_kmem_cache_free_bulk, ptr @__ksymtab_validate_slab_cache, ptr @__setup_setup_slub_debug, ptr @__setup_setup_slub_max_order, ptr @__setup_setup_slub_min_objects, ptr @__setup_setup_slub_min_order, ptr @check_bytes_and_report._entry, ptr @check_bytes_and_report._entry_ptr, ptr @early_kmem_cache_node_alloc._entry, ptr @early_kmem_cache_node_alloc._entry.134, ptr @early_kmem_cache_node_alloc._entry_ptr, ptr @early_kmem_cache_node_alloc._entry_ptr.136, ptr @free_consistency_checks._entry, ptr @free_consistency_checks._entry_ptr, ptr @free_large_kmalloc._entry, ptr @free_large_kmalloc._entry_ptr, ptr @init_cache_random_seq._entry, ptr @init_cache_random_seq._entry_ptr, ptr @kmem_cache_init._entry, ptr @kmem_cache_init._entry_ptr, ptr @list_slab_objects._entry, ptr @list_slab_objects._entry_ptr, ptr @parse_slub_debug_flags._entry, ptr @parse_slub_debug_flags._entry_ptr, ptr @print_slab_info._entry, ptr @print_slab_info._entry_ptr, ptr @print_track._entry, ptr @print_track._entry.14, ptr @print_track._entry_ptr, ptr @print_track._entry_ptr.16, ptr @print_trailer._entry, ptr @print_trailer._entry_ptr, ptr @setup_slub_debug._entry, ptr @setup_slub_debug._entry_ptr, ptr @slab_bug._entry, ptr @slab_bug._entry.56, ptr @slab_bug._entry.59, ptr @slab_bug._entry_ptr, ptr @slab_bug._entry_ptr.58, ptr @slab_bug._entry_ptr.61, ptr @slab_fix._entry, ptr @slab_fix._entry_ptr, ptr @slab_out_of_memory._entry, ptr @slab_out_of_memory._entry.108, ptr @slab_out_of_memory._entry.111, ptr @slab_out_of_memory._entry.114, ptr @slab_out_of_memory._entry_ptr, ptr @slab_out_of_memory._entry_ptr.110, ptr @slab_out_of_memory._entry_ptr.113, ptr @slab_out_of_memory._entry_ptr.116, ptr @slab_sysfs_init._entry, ptr @slab_sysfs_init._entry.211, ptr @slab_sysfs_init._entry.214, ptr @slab_sysfs_init._entry_ptr, ptr @slab_sysfs_init._entry_ptr.213, ptr @slab_sysfs_init._entry_ptr.216, ptr @trace._entry, ptr @trace._entry_ptr, ptr @validate_slab_node._entry, ptr @validate_slab_node._entry.140, ptr @validate_slab_node._entry_ptr, ptr @validate_slab_node._entry_ptr.142], section "llvm.metadata"

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define dso_local ptr @fixup_red_left(ptr nocapture noundef readonly %s, ptr noundef readnone %p) local_unnamed_addr #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  callbr void asm sideeffect "1:\0A\09b ${1:l}\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr nonnull @slub_debug_enabled, ptr blockaddress(@fixup_red_left, %if.then37.i)) #24
          to label %if.end [label %if.then37.i], !srcloc !10

if.then37.i:                                      ; preds = %entry
  %flags38.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 1
  %0 = load i32, ptr %flags38.i, align 4
  %and39.i = and i32 %0, 1024
  %tobool40.i.not = icmp eq i32 %and39.i, 0
  br i1 %tobool40.i.not, label %if.end, label %if.then

if.then:                                          ; preds = %if.then37.i
  %red_left_pad = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 17
  %1 = load i32, ptr %red_left_pad, align 4
  %add.ptr = getelementptr i8, ptr %p, i32 %1
  br label %if.end

if.end:                                           ; preds = %if.then, %if.then37.i, %entry
  %p.addr.0 = phi ptr [ %add.ptr, %if.then ], [ %p, %if.then37.i ], [ %p, %entry ]
  ret ptr %p.addr.0
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define dso_local void @print_tracking(ptr nocapture noundef readonly %s, ptr nocapture noundef readonly %object) local_unnamed_addr #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load volatile i32, ptr @jiffies, align 128
  %flags = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 1
  %1 = load i32, ptr %flags, align 4
  %and = and i32 %1, 65536
  %tobool.not = icmp eq i32 %and, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %offset.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 6
  %2 = load i32, ptr %offset.i.i.i, align 4
  %inuse.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 15
  %3 = load i32, ptr %inuse.i.i.i, align 4
  %cmp.i.not.i.i = icmp ult i32 %2, %3
  %add.i.i = add i32 %3, 4
  %spec.select.i.i = select i1 %cmp.i.not.i.i, i32 %3, i32 %add.i.i
  %add.ptr.i = getelementptr i8, ptr %object, i32 %spec.select.i.i
  tail call fastcc void @print_track(ptr noundef nonnull @.str, ptr noundef %add.ptr.i, i32 noundef %0) #25
  %4 = load i32, ptr %offset.i.i.i, align 4
  %5 = load i32, ptr %inuse.i.i.i, align 4
  %cmp.i.not.i.i8 = icmp ult i32 %4, %5
  %add.i.i9 = add i32 %5, 4
  %spec.select.i.i10 = select i1 %cmp.i.not.i.i8, i32 %5, i32 %add.i.i9
  %add.ptr.i11 = getelementptr i8, ptr %object, i32 %spec.select.i.i10
  %add.ptr1.i = getelementptr %struct.track, ptr %add.ptr.i11, i32 1
  tail call fastcc void @print_track(ptr noundef nonnull @.str.1, ptr noundef %add.ptr1.i, i32 noundef %0) #25
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry
  ret void
}

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc void @print_track(ptr noundef %s, ptr nocapture noundef readonly %t, i32 noundef %pr_time) unnamed_addr #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load i32, ptr %t, align 4
  %tobool.not = icmp eq i32 %0, 0
  br i1 %tobool.not, label %return, label %do.end

do.end:                                           ; preds = %entry
  %1 = inttoptr i32 %0 to ptr
  %when = getelementptr inbounds %struct.track, ptr %t, i32 0, i32 4
  %2 = load i32, ptr %when, align 4
  %sub = sub i32 %pr_time, %2
  %cpu = getelementptr inbounds %struct.track, ptr %t, i32 0, i32 2
  %3 = load i32, ptr %cpu, align 4
  %pid = getelementptr inbounds %struct.track, ptr %t, i32 0, i32 3
  %4 = load i32, ptr %pid, align 4
  %call = tail call i32 (ptr, ...) @_printk(ptr noundef nonnull @.str.12, ptr noundef %s, ptr noundef nonnull %1, i32 noundef %sub, i32 noundef %3, i32 noundef %4) #26
  %arrayidx = getelementptr %struct.track, ptr %t, i32 0, i32 1, i32 0
  %5 = load i32, ptr %arrayidx, align 4
  %tobool2.not = icmp eq i32 %5, 0
  br i1 %tobool2.not, label %return, label %do.end5

do.end5:                                          ; preds = %do.end
  %6 = inttoptr i32 %5 to ptr
  %call9 = tail call i32 (ptr, ...) @_printk(ptr noundef nonnull @.str.15, ptr noundef nonnull %6) #26
  %arrayidx.1 = getelementptr %struct.track, ptr %t, i32 0, i32 1, i32 1
  %7 = load i32, ptr %arrayidx.1, align 4
  %tobool2.not.1 = icmp eq i32 %7, 0
  br i1 %tobool2.not.1, label %return, label %do.end5.1

do.end5.1:                                        ; preds = %do.end5
  %8 = inttoptr i32 %7 to ptr
  %call9.1 = tail call i32 (ptr, ...) @_printk(ptr noundef nonnull @.str.15, ptr noundef nonnull %8) #26
  %arrayidx.2 = getelementptr %struct.track, ptr %t, i32 0, i32 1, i32 2
  %9 = load i32, ptr %arrayidx.2, align 4
  %tobool2.not.2 = icmp eq i32 %9, 0
  br i1 %tobool2.not.2, label %return, label %do.end5.2

do.end5.2:                                        ; preds = %do.end5.1
  %10 = inttoptr i32 %9 to ptr
  %call9.2 = tail call i32 (ptr, ...) @_printk(ptr noundef nonnull @.str.15, ptr noundef nonnull %10) #26
  %arrayidx.3 = getelementptr %struct.track, ptr %t, i32 0, i32 1, i32 3
  %11 = load i32, ptr %arrayidx.3, align 4
  %tobool2.not.3 = icmp eq i32 %11, 0
  br i1 %tobool2.not.3, label %return, label %do.end5.3

do.end5.3:                                        ; preds = %do.end5.2
  %12 = inttoptr i32 %11 to ptr
  %call9.3 = tail call i32 (ptr, ...) @_printk(ptr noundef nonnull @.str.15, ptr noundef nonnull %12) #26
  %arrayidx.4 = getelementptr %struct.track, ptr %t, i32 0, i32 1, i32 4
  %13 = load i32, ptr %arrayidx.4, align 4
  %tobool2.not.4 = icmp eq i32 %13, 0
  br i1 %tobool2.not.4, label %return, label %do.end5.4

do.end5.4:                                        ; preds = %do.end5.3
  %14 = inttoptr i32 %13 to ptr
  %call9.4 = tail call i32 (ptr, ...) @_printk(ptr noundef nonnull @.str.15, ptr noundef nonnull %14) #26
  %arrayidx.5 = getelementptr %struct.track, ptr %t, i32 0, i32 1, i32 5
  %15 = load i32, ptr %arrayidx.5, align 4
  %tobool2.not.5 = icmp eq i32 %15, 0
  br i1 %tobool2.not.5, label %return, label %do.end5.5

do.end5.5:                                        ; preds = %do.end5.4
  %16 = inttoptr i32 %15 to ptr
  %call9.5 = tail call i32 (ptr, ...) @_printk(ptr noundef nonnull @.str.15, ptr noundef nonnull %16) #26
  %arrayidx.6 = getelementptr %struct.track, ptr %t, i32 0, i32 1, i32 6
  %17 = load i32, ptr %arrayidx.6, align 4
  %tobool2.not.6 = icmp eq i32 %17, 0
  br i1 %tobool2.not.6, label %return, label %do.end5.6

do.end5.6:                                        ; preds = %do.end5.5
  %18 = inttoptr i32 %17 to ptr
  %call9.6 = tail call i32 (ptr, ...) @_printk(ptr noundef nonnull @.str.15, ptr noundef nonnull %18) #26
  %arrayidx.7 = getelementptr %struct.track, ptr %t, i32 0, i32 1, i32 7
  %19 = load i32, ptr %arrayidx.7, align 4
  %tobool2.not.7 = icmp eq i32 %19, 0
  br i1 %tobool2.not.7, label %return, label %do.end5.7

do.end5.7:                                        ; preds = %do.end5.6
  %20 = inttoptr i32 %19 to ptr
  %call9.7 = tail call i32 (ptr, ...) @_printk(ptr noundef nonnull @.str.15, ptr noundef nonnull %20) #26
  %arrayidx.8 = getelementptr %struct.track, ptr %t, i32 0, i32 1, i32 8
  %21 = load i32, ptr %arrayidx.8, align 4
  %tobool2.not.8 = icmp eq i32 %21, 0
  br i1 %tobool2.not.8, label %return, label %do.end5.8

do.end5.8:                                        ; preds = %do.end5.7
  %22 = inttoptr i32 %21 to ptr
  %call9.8 = tail call i32 (ptr, ...) @_printk(ptr noundef nonnull @.str.15, ptr noundef nonnull %22) #26
  %arrayidx.9 = getelementptr %struct.track, ptr %t, i32 0, i32 1, i32 9
  %23 = load i32, ptr %arrayidx.9, align 4
  %tobool2.not.9 = icmp eq i32 %23, 0
  br i1 %tobool2.not.9, label %return, label %do.end5.9

do.end5.9:                                        ; preds = %do.end5.8
  %24 = inttoptr i32 %23 to ptr
  %call9.9 = tail call i32 (ptr, ...) @_printk(ptr noundef nonnull @.str.15, ptr noundef nonnull %24) #26
  %arrayidx.10 = getelementptr %struct.track, ptr %t, i32 0, i32 1, i32 10
  %25 = load i32, ptr %arrayidx.10, align 4
  %tobool2.not.10 = icmp eq i32 %25, 0
  br i1 %tobool2.not.10, label %return, label %do.end5.10

do.end5.10:                                       ; preds = %do.end5.9
  %26 = inttoptr i32 %25 to ptr
  %call9.10 = tail call i32 (ptr, ...) @_printk(ptr noundef nonnull @.str.15, ptr noundef nonnull %26) #26
  %arrayidx.11 = getelementptr %struct.track, ptr %t, i32 0, i32 1, i32 11
  %27 = load i32, ptr %arrayidx.11, align 4
  %tobool2.not.11 = icmp eq i32 %27, 0
  br i1 %tobool2.not.11, label %return, label %do.end5.11

do.end5.11:                                       ; preds = %do.end5.10
  %28 = inttoptr i32 %27 to ptr
  %call9.11 = tail call i32 (ptr, ...) @_printk(ptr noundef nonnull @.str.15, ptr noundef nonnull %28) #26
  %arrayidx.12 = getelementptr %struct.track, ptr %t, i32 0, i32 1, i32 12
  %29 = load i32, ptr %arrayidx.12, align 4
  %tobool2.not.12 = icmp eq i32 %29, 0
  br i1 %tobool2.not.12, label %return, label %do.end5.12

do.end5.12:                                       ; preds = %do.end5.11
  %30 = inttoptr i32 %29 to ptr
  %call9.12 = tail call i32 (ptr, ...) @_printk(ptr noundef nonnull @.str.15, ptr noundef nonnull %30) #26
  %arrayidx.13 = getelementptr %struct.track, ptr %t, i32 0, i32 1, i32 13
  %31 = load i32, ptr %arrayidx.13, align 4
  %tobool2.not.13 = icmp eq i32 %31, 0
  br i1 %tobool2.not.13, label %return, label %do.end5.13

do.end5.13:                                       ; preds = %do.end5.12
  %32 = inttoptr i32 %31 to ptr
  %call9.13 = tail call i32 (ptr, ...) @_printk(ptr noundef nonnull @.str.15, ptr noundef nonnull %32) #26
  %arrayidx.14 = getelementptr %struct.track, ptr %t, i32 0, i32 1, i32 14
  %33 = load i32, ptr %arrayidx.14, align 4
  %tobool2.not.14 = icmp eq i32 %33, 0
  br i1 %tobool2.not.14, label %return, label %do.end5.14

do.end5.14:                                       ; preds = %do.end5.13
  %34 = inttoptr i32 %33 to ptr
  %call9.14 = tail call i32 (ptr, ...) @_printk(ptr noundef nonnull @.str.15, ptr noundef nonnull %34) #26
  %arrayidx.15 = getelementptr %struct.track, ptr %t, i32 0, i32 1, i32 15
  %35 = load i32, ptr %arrayidx.15, align 4
  %tobool2.not.15 = icmp eq i32 %35, 0
  br i1 %tobool2.not.15, label %return, label %do.end5.15

do.end5.15:                                       ; preds = %do.end5.14
  %36 = inttoptr i32 %35 to ptr
  %call9.15 = tail call i32 (ptr, ...) @_printk(ptr noundef nonnull @.str.15, ptr noundef nonnull %36) #26
  br label %return

return:                                           ; preds = %do.end5.15, %do.end5.14, %do.end5.13, %do.end5.12, %do.end5.11, %do.end5.10, %do.end5.9, %do.end5.8, %do.end5.7, %do.end5.6, %do.end5.5, %do.end5.4, %do.end5.3, %do.end5.2, %do.end5.1, %do.end5, %do.end, %entry
  ret void
}

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: cold nounwind null_pointer_is_valid optsize sspstrong uwtable(sync)
define internal i32 @setup_slub_debug(ptr noundef %str) #2 section ".init.text" align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %flags = alloca i32, align 4
  %slab_list = alloca ptr, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %flags) #24
  store i32 -1, ptr %flags, align 4, !annotation !11
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %slab_list) #24
  store ptr inttoptr (i32 -1 to ptr), ptr %slab_list, align 4, !annotation !11
  %incdec.ptr = getelementptr i8, ptr %str, i32 1
  %0 = load i8, ptr %str, align 1
  %cmp.not = icmp eq i8 %0, 61
  br i1 %cmp.not, label %lor.lhs.false, label %out.thread

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8, ptr %incdec.ptr, align 1
  %tobool.not = icmp eq i8 %1, 0
  br i1 %tobool.not, label %out.thread, label %while.cond.preheader

while.cond.preheader:                             ; preds = %lor.lhs.false
  %tobool2.not55 = icmp eq ptr %incdec.ptr, null
  br i1 %tobool2.not55, label %while.end.out_crit_edge, label %while.body

while.body:                                       ; preds = %while.body, %while.cond.preheader
  %str.addr.059 = phi ptr [ %call, %while.body ], [ %incdec.ptr, %while.cond.preheader ]
  %global_flags.058 = phi i32 [ %global_flags.1, %while.body ], [ 68864, %while.cond.preheader ]
  %global_slub_debug_changed.0.off057 = phi i1 [ %global_slub_debug_changed.1.off0, %while.body ], [ false, %while.cond.preheader ]
  %slab_list_specified.0.off056 = phi i1 [ %slab_list_specified.1.off0, %while.body ], [ false, %while.cond.preheader ]
  %call = call fastcc ptr @parse_slub_debug_flags(ptr noundef nonnull %str.addr.059, ptr noundef nonnull %flags, ptr noundef nonnull %slab_list, i1 noundef zeroext true) #25
  %2 = load ptr, ptr %slab_list, align 4
  %tobool3.not = icmp eq ptr %2, null
  %3 = load i32, ptr %flags, align 4
  %not.tobool3.not = xor i1 %tobool3.not, true
  %slab_list_specified.1.off0 = select i1 %not.tobool3.not, i1 true, i1 %slab_list_specified.0.off056
  %global_slub_debug_changed.1.off0 = select i1 %tobool3.not, i1 true, i1 %global_slub_debug_changed.0.off057
  %global_flags.1 = select i1 %tobool3.not, i32 %3, i32 %global_flags.058
  %tobool2.not = icmp eq ptr %call, null
  br i1 %tobool2.not, label %while.end, label %while.body

while.end:                                        ; preds = %while.body
  br i1 %slab_list_specified.1.off0, label %if.then7, label %while.end.out_crit_edge

while.end.out_crit_edge:                          ; preds = %while.end, %while.cond.preheader
  %global_flags.0.lcssa65 = phi i32 [ %global_flags.1, %while.end ], [ 68864, %while.cond.preheader ]
  %.pre = load ptr, ptr @slub_debug_string, align 4
  br label %out

if.then7:                                         ; preds = %while.end
  %4 = load i32, ptr @slub_debug, align 4
  %spec.select = select i1 %global_slub_debug_changed.1.off0, i32 %global_flags.1, i32 %4
  store ptr %incdec.ptr, ptr @slub_debug_string, align 4
  br label %out

out.thread:                                       ; preds = %lor.lhs.false, %entry
  store i32 68864, ptr @slub_debug, align 4
  br label %if.then16

out:                                              ; preds = %if.then7, %while.end.out_crit_edge
  %5 = phi ptr [ %incdec.ptr, %if.then7 ], [ %.pre, %while.end.out_crit_edge ]
  %global_flags.3 = phi i32 [ %spec.select, %if.then7 ], [ %global_flags.0.lcssa65, %while.end.out_crit_edge ]
  store i32 %global_flags.3, ptr @slub_debug, align 4
  %cmp12 = icmp ne i32 %global_flags.3, 0
  %tobool15 = icmp ne ptr %5, null
  %or.cond = select i1 %cmp12, i1 true, i1 %tobool15
  br i1 %or.cond, label %if.then16, label %if.else17

if.then16:                                        ; preds = %out, %out.thread
  tail call void @static_key_enable(ptr noundef nonnull @slub_debug_enabled) #27
  br label %if.end18

if.else17:                                        ; preds = %out
  tail call void @static_key_disable(ptr noundef nonnull @slub_debug_enabled) #27
  br label %if.end18

if.end18:                                         ; preds = %if.else17, %if.then16
  callbr void asm sideeffect "1:\0A\09b ${1:l}\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr nonnull @init_on_alloc, ptr blockaddress(@setup_slub_debug, %land.lhs.true)) #24
          to label %lor.lhs.false23 [label %land.lhs.true], !srcloc !10

lor.lhs.false23:                                  ; preds = %if.end18
  callbr void asm sideeffect "1:\0A\09b ${1:l}\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr nonnull @init_on_free, ptr blockaddress(@setup_slub_debug, %land.lhs.true)) #24
          to label %if.end39 [label %land.lhs.true], !srcloc !10

land.lhs.true:                                    ; preds = %lor.lhs.false23, %if.end18
  %6 = load i32, ptr @slub_debug, align 4
  %and = and i32 %6, 2048
  %tobool35.not = icmp eq i32 %and, 0
  br i1 %tobool35.not, label %if.end39, label %do.end

do.end:                                           ; preds = %land.lhs.true
  %call38 = tail call i32 (ptr, ...) @_printk(ptr noundef nonnull @.str.17) #26
  br label %if.end39

if.end39:                                         ; preds = %do.end, %land.lhs.true, %lor.lhs.false23
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %slab_list) #24
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %flags) #24
  ret i32 1
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define dso_local i32 @kmem_cache_flags(i32 %object_size, i32 noundef %flags, ptr noundef %name) local_unnamed_addr #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %iter = alloca ptr, align 4
  %block_flags = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %iter) #24
  store ptr inttoptr (i32 -1 to ptr), ptr %iter, align 4, !annotation !11
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %block_flags) #24
  store i32 -1, ptr %block_flags, align 4, !annotation !11
  %0 = load i32, ptr @slub_debug, align 4
  %and = and i32 %flags, 8388608
  %tobool.not = icmp eq i32 %and, 0
  %and1 = and i32 %0, -65537
  %spec.select = select i1 %tobool.not, i32 %0, i32 %and1
  %call = tail call i32 @strlen(ptr noundef %name) #27
  %1 = load ptr, ptr @slub_debug_string, align 4
  %tobool2.not75 = icmp eq ptr %1, null
  br i1 %tobool2.not75, label %cleanup39, label %while.body

while.body:                                       ; preds = %while.cond.backedge, %entry
  %next_block.076 = phi ptr [ %call3, %while.cond.backedge ], [ %1, %entry ]
  %call3 = call fastcc ptr @parse_slub_debug_flags(ptr noundef nonnull %next_block.076, ptr noundef nonnull %block_flags, ptr noundef nonnull %iter, i1 noundef zeroext false) #25
  %2 = load ptr, ptr %iter, align 4
  %tobool4.not = icmp eq ptr %2, null
  br i1 %tobool4.not, label %while.cond.backedge, label %while.cond7.preheader

while.cond7.preheader:                            ; preds = %while.body
  %3 = load i8, ptr %2, align 1
  %tobool8.not70 = icmp eq i8 %3, 0
  br i1 %tobool8.not70, label %while.end, label %while.body9.lr.ph

while.body9.lr.ph:                                ; preds = %while.cond7.preheader
  %tobool11.not = icmp ne ptr %call3, null
  %add.ptr = getelementptr i8, ptr %call3, i32 -1
  br label %while.body9

while.body9:                                      ; preds = %cleanup, %while.body9.lr.ph
  %add.ptr346871 = phi ptr [ %2, %while.body9.lr.ph ], [ %add.ptr34, %cleanup ]
  %call10 = tail call ptr @strchrnul(ptr noundef %add.ptr346871, i32 noundef 44) #27
  %cmp = icmp ult ptr %call3, %call10
  %or.cond = select i1 %tobool11.not, i1 %cmp, i1 false
  %end.0 = select i1 %or.cond, ptr %add.ptr, ptr %call10
  %sub.ptr.lhs.cast = ptrtoint ptr %end.0 to i32
  %sub.ptr.rhs.cast = ptrtoint ptr %add.ptr346871 to i32
  %sub.ptr.sub = sub i32 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %call14 = tail call ptr @strnchr(ptr noundef %add.ptr346871, i32 noundef %sub.ptr.sub, i32 noundef 42) #27
  %tobool15.not = icmp eq ptr %call14, null
  %sub.ptr.lhs.cast17 = ptrtoint ptr %call14 to i32
  %sub.ptr.sub19 = sub i32 %sub.ptr.lhs.cast17, %sub.ptr.rhs.cast
  %4 = tail call i32 @llvm.umax.i32(i32 %call, i32 %sub.ptr.sub)
  %cmplen.0 = select i1 %tobool15.not, i32 %4, i32 %sub.ptr.sub19
  %call25 = tail call i32 @strncmp(ptr noundef %name, ptr noundef %add.ptr346871, i32 noundef %cmplen.0) #27
  %tobool26.not = icmp eq i32 %call25, 0
  br i1 %tobool26.not, label %cleanup.thread, label %if.end28

cleanup.thread:                                   ; preds = %while.body9
  %5 = load i32, ptr %block_flags, align 4
  br label %cleanup39

if.end28:                                         ; preds = %while.body9
  %6 = load i8, ptr %end.0, align 1
  switch i8 %6, label %cleanup [
    i8 0, label %while.end
    i8 59, label %while.end
  ]

cleanup:                                          ; preds = %if.end28
  %add.ptr34 = getelementptr i8, ptr %end.0, i32 1
  %7 = load i8, ptr %add.ptr34, align 1
  %tobool8.not = icmp eq i8 %7, 0
  br i1 %tobool8.not, label %while.end, label %while.body9

while.end:                                        ; preds = %cleanup, %if.end28, %if.end28, %while.cond7.preheader
  %add.ptr3468.lcssa = phi ptr [ %2, %while.cond7.preheader ], [ %add.ptr346871, %if.end28 ], [ %add.ptr346871, %if.end28 ], [ %add.ptr34, %cleanup ]
  store ptr %add.ptr3468.lcssa, ptr %iter, align 4
  br label %while.cond.backedge

while.cond.backedge:                              ; preds = %while.end, %while.body
  %tobool2.not = icmp eq ptr %call3, null
  br i1 %tobool2.not, label %cleanup39, label %while.body

cleanup39:                                        ; preds = %while.cond.backedge, %cleanup.thread, %entry
  %spec.select.pn = phi i32 [ %5, %cleanup.thread ], [ %spec.select, %entry ], [ %spec.select, %while.cond.backedge ]
  %retval.4 = or i32 %spec.select.pn, %flags
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %block_flags) #24
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %iter) #24
  ret i32 %retval.4
}

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @strlen(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc ptr @parse_slub_debug_flags(ptr noundef %str, ptr nocapture noundef %flags, ptr nocapture noundef writeonly %slabs, i1 noundef zeroext %init) unnamed_addr #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %str.addr.0 = phi ptr [ %str, %entry ], [ %incdec.ptr, %while.body ]
  %0 = load i8, ptr %str.addr.0, align 1
  switch i8 %0, label %if.end [
    i8 59, label %while.body
    i8 44, label %if.then
  ]

while.body:                                       ; preds = %while.cond
  %incdec.ptr = getelementptr i8, ptr %str.addr.0, i32 1
  br label %while.cond

if.then:                                          ; preds = %while.cond
  store i32 68864, ptr %flags, align 4
  %.pre = load i8, ptr %str.addr.0, align 1
  br label %check_slabs

if.end:                                           ; preds = %while.cond
  store i32 0, ptr %flags, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %str.addr.1 = phi ptr [ %str.addr.0, %if.end ], [ %incdec.ptr34, %for.inc ]
  %higher_order_disable.0.off0 = phi i1 [ false, %if.end ], [ %higher_order_disable.1.off0, %for.inc ]
  %1 = load i8, ptr %str.addr.1, align 1
  switch i8 %1, label %for.body [
    i8 0, label %check_slabs
    i8 44, label %check_slabs
    i8 59, label %check_slabs
  ]

for.body:                                         ; preds = %for.cond
  %conv.i = zext i8 %1 to i32
  %arrayidx.i = getelementptr [0 x i8], ptr @_ctype, i32 0, i32 %conv.i
  %2 = load i8, ptr %arrayidx.i, align 1
  %3 = and i8 %2, 1
  %cmp.not.i = icmp eq i8 %3, 0
  %sub.i = add i8 %1, 32
  %spec.select.i = select i1 %cmp.not.i, i8 %1, i8 %sub.i
  switch i8 %spec.select.i, label %sw.default [
    i8 45, label %sw.bb
    i8 102, label %sw.bb17
    i8 122, label %sw.bb18
    i8 112, label %sw.bb20
    i8 117, label %sw.bb22
    i8 116, label %sw.bb24
    i8 97, label %sw.bb26
    i8 111, label %for.inc
  ]

sw.bb:                                            ; preds = %for.body
  store i32 0, ptr %flags, align 4
  br label %for.inc

sw.bb17:                                          ; preds = %for.body
  %4 = load i32, ptr %flags, align 4
  %or = or i32 %4, 256
  store i32 %or, ptr %flags, align 4
  br label %for.inc

sw.bb18:                                          ; preds = %for.body
  %5 = load i32, ptr %flags, align 4
  %or19 = or i32 %5, 1024
  store i32 %or19, ptr %flags, align 4
  br label %for.inc

sw.bb20:                                          ; preds = %for.body
  %6 = load i32, ptr %flags, align 4
  %or21 = or i32 %6, 2048
  store i32 %or21, ptr %flags, align 4
  br label %for.inc

sw.bb22:                                          ; preds = %for.body
  %7 = load i32, ptr %flags, align 4
  %or23 = or i32 %7, 65536
  store i32 %or23, ptr %flags, align 4
  br label %for.inc

sw.bb24:                                          ; preds = %for.body
  %8 = load i32, ptr %flags, align 4
  %or25 = or i32 %8, 2097152
  store i32 %or25, ptr %flags, align 4
  br label %for.inc

sw.bb26:                                          ; preds = %for.body
  %9 = load i32, ptr %flags, align 4
  %or27 = or i32 %9, 33554432
  store i32 %or27, ptr %flags, align 4
  br label %for.inc

sw.default:                                       ; preds = %for.body
  br i1 %init, label %do.end, label %for.inc

do.end:                                           ; preds = %sw.default
  %call32 = tail call i32 (ptr, ...) @_printk(ptr noundef nonnull @.str.19, i32 noundef %conv.i) #26
  br label %for.inc

for.inc:                                          ; preds = %do.end, %sw.default, %sw.bb26, %sw.bb24, %sw.bb22, %sw.bb20, %sw.bb18, %sw.bb17, %sw.bb, %for.body
  %higher_order_disable.1.off0 = phi i1 [ %higher_order_disable.0.off0, %do.end ], [ %higher_order_disable.0.off0, %sw.default ], [ %higher_order_disable.0.off0, %sw.bb26 ], [ %higher_order_disable.0.off0, %sw.bb24 ], [ %higher_order_disable.0.off0, %sw.bb22 ], [ %higher_order_disable.0.off0, %sw.bb20 ], [ %higher_order_disable.0.off0, %sw.bb18 ], [ %higher_order_disable.0.off0, %sw.bb17 ], [ %higher_order_disable.0.off0, %sw.bb ], [ true, %for.body ]
  %incdec.ptr34 = getelementptr i8, ptr %str.addr.1, i32 1
  br label %for.cond

check_slabs:                                      ; preds = %for.cond, %for.cond, %for.cond, %if.then
  %10 = phi i8 [ %.pre, %if.then ], [ %1, %for.cond ], [ %1, %for.cond ], [ %1, %for.cond ]
  %str.addr.2 = phi ptr [ %str.addr.0, %if.then ], [ %str.addr.1, %for.cond ], [ %str.addr.1, %for.cond ], [ %str.addr.1, %for.cond ]
  %higher_order_disable.2.off0 = phi i1 [ false, %if.then ], [ %higher_order_disable.0.off0, %for.cond ], [ %higher_order_disable.0.off0, %for.cond ], [ %higher_order_disable.0.off0, %for.cond ]
  %cmp36 = icmp eq i8 %10, 44
  %incdec.ptr39 = getelementptr i8, ptr %str.addr.2, i32 1
  %storemerge = select i1 %cmp36, ptr %incdec.ptr39, ptr null
  %str.addr.3 = select i1 %cmp36, ptr %incdec.ptr39, ptr %str.addr.2
  store ptr %storemerge, ptr %slabs, align 4
  br label %while.cond41

while.cond41:                                     ; preds = %while.body49, %check_slabs
  %str.addr.4 = phi ptr [ %str.addr.3, %check_slabs ], [ %incdec.ptr50, %while.body49 ]
  %11 = load i8, ptr %str.addr.4, align 1
  switch i8 %11, label %while.body49 [
    i8 59, label %while.cond52.while.cond52_crit_edge
    i8 0, label %while.end62
  ]

while.body49:                                     ; preds = %while.cond41
  %incdec.ptr50 = getelementptr i8, ptr %str.addr.4, i32 1
  br label %while.cond41

while.cond52.while.cond52_crit_edge:              ; preds = %while.cond52.while.cond52_crit_edge, %while.cond41
  %str.addr.5126 = phi ptr [ %incdec.ptr61, %while.cond52.while.cond52_crit_edge ], [ %str.addr.4, %while.cond41 ]
  %incdec.ptr61 = getelementptr i8, ptr %str.addr.5126, i32 1
  %.pre118 = load i8, ptr %incdec.ptr61, align 1
  %cond115 = icmp eq i8 %.pre118, 59
  br i1 %cond115, label %while.cond52.while.cond52_crit_edge, label %while.end62

while.end62:                                      ; preds = %while.cond52.while.cond52_crit_edge, %while.cond41
  %.lcssa = phi i8 [ %.pre118, %while.cond52.while.cond52_crit_edge ], [ %11, %while.cond41 ]
  %str.addr.5.lcssa = phi ptr [ %incdec.ptr61, %while.cond52.while.cond52_crit_edge ], [ %str.addr.4, %while.cond41 ]
  %12 = select i1 %init, i1 %higher_order_disable.2.off0, i1 false
  br i1 %12, label %if.then68, label %if.end69

if.then68:                                        ; preds = %while.end62
  store i1 true, ptr @disable_higher_order_debug, align 4
  br label %if.end69

if.end69:                                         ; preds = %if.then68, %while.end62
  %tobool70.not = icmp eq i8 %.lcssa, 0
  %.str.addr.5 = select i1 %tobool70.not, ptr null, ptr %str.addr.5.lcssa
  ret ptr %.str.addr.5
}

; Function Attrs: null_pointer_is_valid
declare dso_local ptr @strchrnul(ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local ptr @strnchr(ptr noundef, i32 noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @strncmp(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define dso_local noalias ptr @kmem_cache_alloc(ptr noundef %s, i32 noundef %gfpflags) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %object.i.i = alloca ptr, align 4
  %objcg.i.i = alloca ptr, align 4
  %0 = tail call ptr @llvm.returnaddress(i32 0)
  %1 = ptrtoint ptr %0 to i32
  %object_size = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 4
  %2 = load i32, ptr %object_size, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %object.i.i) #24
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %objcg.i.i) #24
  store ptr null, ptr %objcg.i.i, align 4
  %call.i.i = call fastcc ptr @slab_pre_alloc_hook(ptr noundef %s, ptr noundef nonnull %objcg.i.i, i32 noundef 1, i32 noundef %gfpflags) #27
  %tobool.not.i.i = icmp eq ptr %call.i.i, null
  br i1 %tobool.not.i.i, label %slab_alloc.exit, label %if.end.i.i

if.end.i.i:                                       ; preds = %entry
  callbr void asm sideeffect "1:\0A\09nop\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr nonnull @kfence_allocation_key, ptr blockaddress(@kmem_cache_alloc, %if.end.i.i.i)) #24
          to label %kfence_alloc.exit.i.i [label %if.end.i.i.i], !srcloc !12

if.end.i.i.i:                                     ; preds = %if.end.i.i
  %3 = load volatile i32, ptr @kfence_allocation_gate, align 4
  %tobool4.not.i.i.i = icmp eq i32 %3, 0
  br i1 %tobool4.not.i.i.i, label %if.end12.i.i.i, label %redo.preheader.i.i, !prof !13

if.end12.i.i.i:                                   ; preds = %if.end.i.i.i
  %call13.i.i.i = tail call ptr @__kfence_alloc(ptr noundef nonnull %call.i.i, i32 noundef %2, i32 noundef %gfpflags) #27
  br label %kfence_alloc.exit.i.i

kfence_alloc.exit.i.i:                            ; preds = %if.end12.i.i.i, %if.end.i.i
  %retval.0.i.i.i = phi ptr [ %call13.i.i.i, %if.end12.i.i.i ], [ null, %if.end.i.i ]
  %tobool2.not.i.i = icmp eq ptr %retval.0.i.i.i, null
  br i1 %tobool2.not.i.i, label %redo.preheader.i.i, label %out.i.i, !prof !14

redo.preheader.i.i:                               ; preds = %kfence_alloc.exit.i.i, %if.end.i.i.i
  %4 = load ptr, ptr %call.i.i, align 4
  %5 = ptrtoint ptr %4 to i32
  %6 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i25.i.i = and i32 %6, -16384
  %7 = inttoptr i32 %and.i25.i.i to ptr
  %cpu26.i.i = getelementptr inbounds %struct.thread_info, ptr %7, i32 0, i32 3
  %8 = load i32, ptr %cpu26.i.i, align 4
  %arrayidx27.i.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %8
  %9 = load i32, ptr %arrayidx27.i.i, align 4
  %add28.i.i = add i32 %9, %5
  %10 = inttoptr i32 %add28.i.i to ptr
  %tid1329.i.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %10, i32 0, i32 1
  %11 = load volatile i32, ptr %tid1329.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !15
  %12 = load ptr, ptr %10, align 4
  %slab1430.i.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %10, i32 0, i32 2
  %13 = load ptr, ptr %slab1430.i.i, align 4
  %tobool1531.i.i = icmp ne ptr %12, null
  %tobool1632.i.i = icmp ne ptr %13, null
  %or.cond33.i.i = select i1 %tobool1531.i.i, i1 %tobool1632.i.i, i1 false
  br i1 %or.cond33.i.i, label %lor.rhs.lr.ph.i.i, label %if.then27.critedge.i.i, !prof !16

lor.rhs.lr.ph.i.i:                                ; preds = %redo.preheader.i.i
  %offset.i.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %call.i.i, i32 0, i32 6
  %random.i.i.i.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %call.i.i, i32 0, i32 21
  br label %lor.rhs.i.i

lor.rhs.i.i:                                      ; preds = %cleanup.i.i, %lor.rhs.lr.ph.i.i
  %14 = phi ptr [ %12, %lor.rhs.lr.ph.i.i ], [ %62, %cleanup.i.i ]
  %15 = phi i32 [ %11, %lor.rhs.lr.ph.i.i ], [ %61, %cleanup.i.i ]
  %cpu34.i.i = phi ptr [ %cpu26.i.i, %lor.rhs.lr.ph.i.i ], [ %cpu.i.i, %cleanup.i.i ]
  %16 = load i32, ptr %offset.i.i.i.i, align 4
  %add.ptr.i.i.i.i = getelementptr i8, ptr %14, i32 %16
  %17 = load i32, ptr %add.ptr.i.i.i.i, align 4
  %18 = ptrtoint ptr %add.ptr.i.i.i.i to i32
  %19 = load i32, ptr %random.i.i.i.i.i.i, align 4
  %20 = tail call i32 @llvm.bswap.i32(i32 %18) #24
  %xor.i.i.i.i.i.i = xor i32 %19, %17
  %xor2.i.i.i.i.i.i = xor i32 %xor.i.i.i.i.i.i, %20
  %21 = inttoptr i32 %xor2.i.i.i.i.i.i to ptr
  %22 = load ptr, ptr %call.i.i, align 4
  %23 = ptrtoint ptr %22 to i32
  %rem.i.i = and i32 %23, 7
  %tobool40.not.i.i = icmp eq i32 %rem.i.i, 0
  br i1 %tobool40.not.i.i, label %do.body57.i.i, label %do.body48.i.i, !prof !14

if.then27.critedge.i.i:                           ; preds = %cleanup.i.i, %redo.preheader.i.i
  %call28.i.i = tail call fastcc ptr @__slab_alloc(ptr noundef nonnull %call.i.i, i32 noundef %gfpflags, i32 noundef %1) #27
  store ptr %call28.i.i, ptr %object.i.i, align 4
  br label %if.end159.i.i

do.body48.i.i:                                    ; preds = %lor.rhs.i.i
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slub.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 3217, 0\0A.popsection", ""() #24, !srcloc !17
  unreachable

do.body57.i.i:                                    ; preds = %lor.rhs.i.i
  %tid59.i.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %22, i32 0, i32 1
  %24 = ptrtoint ptr %tid59.i.i to i32
  %add62.i.i = add nuw i32 %23, 4
  %cmp.not.i.i = icmp eq i32 %add62.i.i, %24
  br i1 %cmp.not.i.i, label %do.end78.i.i, label %do.body70.i.i, !prof !14

do.body70.i.i:                                    ; preds = %do.body57.i.i
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slub.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 3217, 0\0A.popsection", ""() #24, !srcloc !18
  unreachable

do.end78.i.i:                                     ; preds = %do.body57.i.i
  %25 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ arch_local_irq_save\0A\09cpsid\09i", "=r,~{memory},~{cc}"() #24, !srcloc !19
  %26 = load ptr, ptr %call.i.i, align 4
  %27 = ptrtoint ptr %26 to i32
  %28 = load i32, ptr %cpu34.i.i, align 4
  %arrayidx96.i.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %28
  %29 = load i32, ptr %arrayidx96.i.i, align 4
  %add97.i.i = add i32 %29, %27
  %30 = inttoptr i32 %add97.i.i to ptr
  %tid105.i.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %26, i32 0, i32 1
  %31 = ptrtoint ptr %tid105.i.i to i32
  %add110.i.i = add i32 %29, %31
  %32 = inttoptr i32 %add110.i.i to ptr
  %33 = load ptr, ptr %30, align 4
  %cmp112.i.i = icmp eq ptr %33, %14
  br i1 %cmp112.i.i, label %land.lhs.true.i.i, label %if.end118.i.i

land.lhs.true.i.i:                                ; preds = %do.end78.i.i
  %34 = load i32, ptr %32, align 4
  %cmp114.i.i = icmp eq i32 %34, %15
  br i1 %cmp114.i.i, label %if.then116.i.i, label %if.end118.i.i

if.then116.i.i:                                   ; preds = %land.lhs.true.i.i
  store ptr %21, ptr %30, align 4
  %add.i.i.i = add i32 %15, 1
  store i32 %add.i.i.i, ptr %32, align 4
  br label %if.end118.i.i

if.end118.i.i:                                    ; preds = %if.then116.i.i, %land.lhs.true.i.i, %do.end78.i.i
  %tobool144.not.i.i = phi i1 [ false, %if.then116.i.i ], [ true, %land.lhs.true.i.i ], [ true, %do.end78.i.i ]
  %35 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ local_save_flags", "=r,~{memory},~{cc}"() #24, !srcloc !20
  %and.i.i2.i.i = and i32 %35, 128
  %tobool128.not.i.i = icmp eq i32 %and.i.i2.i.i, 0
  br i1 %tobool128.not.i.i, label %if.then137.i.i, label %do.end140.i.i, !prof !13

if.then137.i.i:                                   ; preds = %if.end118.i.i
  tail call void @warn_bogus_irq_restore() #27
  br label %do.end140.i.i

do.end140.i.i:                                    ; preds = %if.then137.i.i, %if.end118.i.i
  tail call void asm sideeffect "\09msr\09cpsr_c, $0\09@ local_irq_restore", "r,~{memory},~{cc}"(i32 %25) #24, !srcloc !21
  br i1 %tobool144.not.i.i, label %cleanup.i.i, label %cleanup.thread.i.i, !prof !13

cleanup.thread.i.i:                               ; preds = %do.end140.i.i
  %36 = inttoptr i32 %xor2.i.i.i.i.i.i to ptr
  store ptr %14, ptr %object.i.i, align 4
  %37 = load i32, ptr %offset.i.i.i.i, align 4
  %add.ptr.i4.i.i = getelementptr i8, ptr %36, i32 %37
  tail call void @llvm.prefetch.p0(ptr %add.ptr.i4.i.i, i32 1, i32 3, i32 1) #24
  %38 = load ptr, ptr %call.i.i, align 4
  %arrayidx.i.i.i = getelementptr %struct.kmem_cache_cpu, ptr %38, i32 0, i32 5, i32 0
  %39 = ptrtoint ptr %arrayidx.i.i.i to i32
  %40 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i5.i.i = and i32 %40, -16384
  %41 = inttoptr i32 %and.i.i5.i.i to ptr
  %cpu.i.i.i = getelementptr inbounds %struct.thread_info, ptr %41, i32 0, i32 3
  %42 = load i32, ptr %cpu.i.i.i, align 4
  %arrayidx7.i.i.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %42
  %43 = load i32, ptr %arrayidx7.i.i.i, align 4
  %add.i6.i.i = add i32 %43, %39
  %44 = inttoptr i32 %add.i6.i.i to ptr
  %45 = load i32, ptr %44, align 4
  %add8.i.i.i = add i32 %45, 1
  store i32 %add8.i.i.i, ptr %44, align 4
  br label %if.end159.i.i

cleanup.i.i:                                      ; preds = %do.end140.i.i
  %46 = load ptr, ptr %call.i.i, align 4
  %arrayidx.i.i.i.i = getelementptr %struct.kmem_cache_cpu, ptr %46, i32 0, i32 5, i32 20
  %47 = ptrtoint ptr %arrayidx.i.i.i.i to i32
  %48 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i.i.i = and i32 %48, -16384
  %49 = inttoptr i32 %and.i.i.i.i.i to ptr
  %cpu.i.i.i.i = getelementptr inbounds %struct.thread_info, ptr %49, i32 0, i32 3
  %50 = load i32, ptr %cpu.i.i.i.i, align 4
  %arrayidx7.i.i.i.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %50
  %51 = load i32, ptr %arrayidx7.i.i.i.i, align 4
  %add.i.i.i.i = add i32 %51, %47
  %52 = inttoptr i32 %add.i.i.i.i to ptr
  %53 = load i32, ptr %52, align 4
  %add8.i.i.i.i = add i32 %53, 1
  store i32 %add8.i.i.i.i, ptr %52, align 4
  %54 = load ptr, ptr %call.i.i, align 4
  %55 = ptrtoint ptr %54 to i32
  %56 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i = and i32 %56, -16384
  %57 = inttoptr i32 %and.i.i.i to ptr
  %cpu.i.i = getelementptr inbounds %struct.thread_info, ptr %57, i32 0, i32 3
  %58 = load i32, ptr %cpu.i.i, align 4
  %arrayidx.i.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %58
  %59 = load i32, ptr %arrayidx.i.i, align 4
  %add.i.i = add i32 %59, %55
  %60 = inttoptr i32 %add.i.i to ptr
  %tid13.i.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %60, i32 0, i32 1
  %61 = load volatile i32, ptr %tid13.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !15
  %62 = load ptr, ptr %60, align 4
  %slab14.i.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %60, i32 0, i32 2
  %63 = load ptr, ptr %slab14.i.i, align 4
  %tobool15.i.i = icmp ne ptr %62, null
  %tobool16.i.i = icmp ne ptr %63, null
  %or.cond.i.i = select i1 %tobool15.i.i, i1 %tobool16.i.i, i1 false
  br i1 %or.cond.i.i, label %lor.rhs.i.i, label %if.then27.critedge.i.i, !prof !16

if.end159.i.i:                                    ; preds = %cleanup.thread.i.i, %if.then27.critedge.i.i
  %64 = phi ptr [ %14, %cleanup.thread.i.i ], [ %call28.i.i, %if.then27.critedge.i.i ]
  callbr void asm sideeffect "1:\0A\09nop\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr getelementptr inbounds (i8, ptr @init_on_free, i32 1), ptr blockaddress(@kmem_cache_alloc, %maybe_wipe_obj_freeptr.exit.i.i)) #24
          to label %if.then.i.i.i.i [label %maybe_wipe_obj_freeptr.exit.i.i], !srcloc !12

if.then.i.i.i.i:                                  ; preds = %if.end159.i.i
  %ctor.i.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %call.i.i, i32 0, i32 14
  %65 = load ptr, ptr %ctor.i.i.i.i, align 4
  %tobool15.not.i.i.i.i = icmp eq ptr %65, null
  br i1 %tobool15.not.i.i.i.i, label %lor.rhs.i.i.i.i, label %maybe_wipe_obj_freeptr.exit.i.i

lor.rhs.i.i.i.i:                                  ; preds = %if.then.i.i.i.i
  %flags.i.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %call.i.i, i32 0, i32 1
  %66 = load i32, ptr %flags.i.i.i.i, align 4
  %and.i.i.i.i = and i32 %66, 526336
  %tobool16.i.i.i.i = icmp eq i32 %and.i.i.i.i, 0
  br i1 %tobool16.i.i.i.i, label %land.lhs.true.i.i.i, label %maybe_wipe_obj_freeptr.exit.i.i, !prof !13

land.lhs.true.i.i.i:                              ; preds = %lor.rhs.i.i.i.i
  %tobool2.not.i.i.i = icmp eq ptr %64, null
  br i1 %tobool2.not.i.i.i, label %maybe_wipe_obj_freeptr.exit.i.i, label %if.then.i.i.i

if.then.i.i.i:                                    ; preds = %land.lhs.true.i.i.i
  %offset.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %call.i.i, i32 0, i32 6
  %67 = load i32, ptr %offset.i.i.i, align 4
  %add.ptr.i.i.i = getelementptr i8, ptr %64, i32 %67
  %call4.i.i.i = tail call ptr @__memset(ptr noundef %add.ptr.i.i.i, i32 noundef 0, i32 noundef 4) #27
  br label %maybe_wipe_obj_freeptr.exit.i.i

maybe_wipe_obj_freeptr.exit.i.i:                  ; preds = %if.then.i.i.i, %land.lhs.true.i.i.i, %lor.rhs.i.i.i.i, %if.then.i.i.i.i, %if.end159.i.i
  callbr void asm sideeffect "1:\0A\09nop\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr getelementptr inbounds (i8, ptr @init_on_alloc, i32 1), ptr blockaddress(@kmem_cache_alloc, %if.end23.i.i.i)) #24
          to label %if.then.i7.i.i [label %if.end23.i.i.i], !srcloc !12

if.then.i7.i.i:                                   ; preds = %maybe_wipe_obj_freeptr.exit.i.i
  %ctor.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %call.i.i, i32 0, i32 14
  %68 = load ptr, ptr %ctor.i.i.i, align 4
  %tobool15.not.i.i.i = icmp eq ptr %68, null
  br i1 %tobool15.not.i.i.i, label %if.end.i9.i.i, label %out.i.i

if.end.i9.i.i:                                    ; preds = %if.then.i7.i.i
  %flags17.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %call.i.i, i32 0, i32 1
  %69 = load i32, ptr %flags17.i.i.i, align 4
  %and.i8.i.i = and i32 %69, 526336
  %tobool18.not.i.i.i = icmp eq i32 %and.i8.i.i, 0
  br i1 %tobool18.not.i.i.i, label %out.i.i, label %if.then19.i.i.i

if.then19.i.i.i:                                  ; preds = %if.end.i9.i.i
  %and20.i.i.i = and i32 %gfpflags, 256
  %tobool21.i.i.i = icmp ne i32 %and20.i.i.i, 0
  br label %out.i.i

if.end23.i.i.i:                                   ; preds = %maybe_wipe_obj_freeptr.exit.i.i
  %and24.i.i.i = and i32 %gfpflags, 256
  %tobool25.i.i.i = icmp ne i32 %and24.i.i.i, 0
  br label %out.i.i

out.i.i:                                          ; preds = %if.end23.i.i.i, %if.then19.i.i.i, %if.end.i9.i.i, %if.then.i7.i.i, %kfence_alloc.exit.i.i
  %object.promoted.i.i = phi ptr [ %retval.0.i.i.i, %kfence_alloc.exit.i.i ], [ %64, %if.then19.i.i.i ], [ %64, %if.end23.i.i.i ], [ %64, %if.then.i7.i.i ], [ %64, %if.end.i9.i.i ]
  %init.0.off0.i.i = phi i1 [ false, %kfence_alloc.exit.i.i ], [ %tobool21.i.i.i, %if.then19.i.i.i ], [ %tobool25.i.i.i, %if.end23.i.i.i ], [ false, %if.then.i7.i.i ], [ true, %if.end.i9.i.i ]
  %70 = load ptr, ptr %objcg.i.i, align 4
  %71 = load i32, ptr @gfp_allowed_mask, align 4
  %and.i11.i.i = and i32 %71, %gfpflags
  %object_size.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %call.i.i, i32 0, i32 4
  %flags11.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %call.i.i, i32 0, i32 1
  %call1.i.i.i.i = tail call ptr @__kasan_slab_alloc(ptr noundef nonnull %call.i.i, ptr noundef %object.promoted.i.i, i32 noundef %and.i11.i.i, i1 noundef zeroext %init.0.off0.i.i) #27
  %tobool3.not.i.i.i = icmp ne ptr %call1.i.i.i.i, null
  %72 = and i1 %init.0.off0.i.i, %tobool3.not.i.i.i
  br i1 %72, label %land.lhs.true5.i.i.i, label %if.end.i14.i.i

land.lhs.true5.i.i.i:                             ; preds = %out.i.i
  %73 = load i32, ptr %object_size.i.i.i, align 4
  %call8.i.i.i = tail call ptr @__memset(ptr noundef nonnull %call1.i.i.i.i, i32 noundef 0, i32 noundef %73) #27
  br label %if.end.i14.i.i

if.end.i14.i.i:                                   ; preds = %land.lhs.true5.i.i.i, %out.i.i
  %74 = load i32, ptr %flags11.i.i.i, align 4
  %and.i.i13.i.i = and i32 %74, 8388608
  %tobool.not.i.i.i.i = icmp eq i32 %and.i.i13.i.i, 0
  br i1 %tobool.not.i.i.i.i, label %if.then.i.i15.i.i, label %kmemleak_alloc_recursive.exit.i.i.i

if.then.i.i15.i.i:                                ; preds = %if.end.i14.i.i
  %75 = load i32, ptr %object_size.i.i.i, align 4
  tail call void @kmemleak_alloc(ptr noundef %call1.i.i.i.i, i32 noundef %75, i32 noundef 1, i32 noundef %and.i11.i.i) #27
  br label %kmemleak_alloc_recursive.exit.i.i.i

kmemleak_alloc_recursive.exit.i.i.i:              ; preds = %if.then.i.i15.i.i, %if.end.i14.i.i
  store ptr %call1.i.i.i.i, ptr %object.i.i, align 4
  call fastcc void @memcg_slab_post_alloc_hook(ptr noundef nonnull %call.i.i, ptr noundef %70, i32 noundef %and.i11.i.i, i32 noundef 1, ptr noundef nonnull %object.i.i) #27
  br label %slab_alloc.exit

slab_alloc.exit:                                  ; preds = %kmemleak_alloc_recursive.exit.i.i.i, %entry
  %retval.0.i.i = phi ptr [ %call1.i.i.i.i, %kmemleak_alloc_recursive.exit.i.i.i ], [ null, %entry ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %objcg.i.i) #24
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %object.i.i) #24
  %76 = load i32, ptr %object_size, align 4
  %size = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 3
  %77 = load i32, ptr %size, align 4
  tail call fastcc void @trace_kmem_cache_alloc(i32 noundef %1, ptr noundef %retval.0.i.i, i32 noundef %76, i32 noundef %77, i32 noundef %gfpflags) #25
  ret ptr %retval.0.i.i
}

; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
declare ptr @llvm.returnaddress(i32 immarg) #4

; Function Attrs: inlinehint nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc void @trace_kmem_cache_alloc(i32 noundef %call_site, ptr noundef %ptr, i32 noundef %bytes_req, i32 noundef %bytes_alloc, i32 noundef %gfp_flags) unnamed_addr #5 align 64 {
entry:
  callbr void asm sideeffect "1:\0A\09nop\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr getelementptr inbounds (%struct.tracepoint, ptr @__tracepoint_kmem_cache_alloc, i32 0, i32 1), ptr blockaddress(@trace_kmem_cache_alloc, %do.body)) #24
          to label %if.end48 [label %do.body], !srcloc !12

do.body:                                          ; preds = %entry
  %0 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i = and i32 %0, -16384
  %1 = inttoptr i32 %and.i to ptr
  %cpu = getelementptr inbounds %struct.thread_info, ptr %1, i32 0, i32 3
  %2 = load i32, ptr %cpu, align 4
  %3 = load i32, ptr @nr_cpu_ids, align 4
  %cmp.i.i.i.i = icmp ule i32 %3, %2
  %.b37.i.i.i.i = load i1, ptr @cpu_max_bits_warn.__already_done, align 1
  %lnot3.i.i.i.i = xor i1 %.b37.i.i.i.i, true
  %4 = select i1 %cmp.i.i.i.i, i1 %lnot3.i.i.i.i, i1 false
  br i1 %4, label %if.then.i.i.i.i, label %cpu_online.exit, !prof !13

if.then.i.i.i.i:                                  ; preds = %do.body
  store i1 true, ptr @cpu_max_bits_warn.__already_done, align 1
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.24, i32 noundef 108, i32 noundef 9, ptr noundef null) #27
  br label %cpu_online.exit

cpu_online.exit:                                  ; preds = %if.then.i.i.i.i, %do.body
  %div3.i.i.i = lshr i32 %2, 5
  %arrayidx.i.i.i = getelementptr i32, ptr @__cpu_online_mask, i32 %div3.i.i.i
  %5 = load volatile i32, ptr %arrayidx.i.i.i, align 4
  %and.i.i.i75 = and i32 %2, 31
  %6 = shl nuw i32 1, %and.i.i.i75
  %7 = and i32 %5, %6
  %tobool.i.not = icmp eq i32 %7, 0
  br i1 %tobool.i.not, label %if.end69, label %cleanup.thread

cleanup.thread:                                   ; preds = %cpu_online.exit
  %8 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i = and i32 %8, -16384
  %9 = inttoptr i32 %and.i.i.i to ptr
  %preempt_count.i.i = getelementptr inbounds %struct.thread_info, ptr %9, i32 0, i32 1
  %10 = load volatile i32, ptr %preempt_count.i.i, align 4
  %add.i = add i32 %10, 1
  store volatile i32 %add.i, ptr %preempt_count.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !22
  %call42 = tail call i32 @__traceiter_kmem_cache_alloc(ptr noundef null, i32 noundef %call_site, ptr noundef %ptr, i32 noundef %bytes_req, i32 noundef %bytes_alloc, i32 noundef %gfp_flags) #27
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !23
  %11 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i73 = and i32 %11, -16384
  %12 = inttoptr i32 %and.i.i.i73 to ptr
  %preempt_count.i.i74 = getelementptr inbounds %struct.thread_info, ptr %12, i32 0, i32 1
  %13 = load volatile i32, ptr %preempt_count.i.i74, align 4
  %sub.i = add i32 %13, -1
  store volatile i32 %sub.i, ptr %preempt_count.i.i74, align 4
  br label %if.end48

if.end48:                                         ; preds = %cleanup.thread, %entry
  %14 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i76 = and i32 %14, -16384
  %15 = inttoptr i32 %and.i76 to ptr
  %cpu50 = getelementptr inbounds %struct.thread_info, ptr %15, i32 0, i32 3
  %16 = load i32, ptr %cpu50, align 4
  %17 = load i32, ptr @nr_cpu_ids, align 4
  %cmp.i.i.i.i77 = icmp ule i32 %17, %16
  %.b37.i.i.i.i78 = load i1, ptr @cpu_max_bits_warn.__already_done, align 1
  %lnot3.i.i.i.i79 = xor i1 %.b37.i.i.i.i78, true
  %18 = select i1 %cmp.i.i.i.i77, i1 %lnot3.i.i.i.i79, i1 false
  br i1 %18, label %if.then.i.i.i.i80, label %cpu_online.exit85, !prof !13

if.then.i.i.i.i80:                                ; preds = %if.end48
  store i1 true, ptr @cpu_max_bits_warn.__already_done, align 1
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.24, i32 noundef 108, i32 noundef 9, ptr noundef null) #27
  br label %cpu_online.exit85

cpu_online.exit85:                                ; preds = %if.then.i.i.i.i80, %if.end48
  %div3.i.i.i81 = lshr i32 %16, 5
  %arrayidx.i.i.i82 = getelementptr i32, ptr @__cpu_online_mask, i32 %div3.i.i.i81
  %19 = load volatile i32, ptr %arrayidx.i.i.i82, align 4
  %and.i.i.i83 = and i32 %16, 31
  %20 = shl nuw i32 1, %and.i.i.i83
  %21 = and i32 %19, %20
  %tobool.i84.not = icmp eq i32 %21, 0
  br i1 %tobool.i84.not, label %if.end69, label %if.then52

if.then52:                                        ; preds = %cpu_online.exit85
  %22 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i.i = and i32 %22, -16384
  %23 = inttoptr i32 %and.i.i.i.i to ptr
  %preempt_count.i.i.i = getelementptr inbounds %struct.thread_info, ptr %23, i32 0, i32 1
  %24 = load volatile i32, ptr %preempt_count.i.i.i, align 4
  %add.i.i = add i32 %24, 1
  store volatile i32 %add.i.i, ptr %preempt_count.i.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !24
  %25 = load volatile ptr, ptr getelementptr inbounds (%struct.tracepoint, ptr @__tracepoint_kmem_cache_alloc, i32 0, i32 7), align 4
  %call58 = tail call i32 @rcu_read_lock_sched_held() #27
  %tobool59.not = icmp eq i32 %call58, 0
  br i1 %tobool59.not, label %land.lhs.true, label %do.end67

land.lhs.true:                                    ; preds = %if.then52
  %call60 = tail call i32 @debug_lockdep_rcu_enabled() #27
  %tobool61.not = icmp eq i32 %call60, 0
  br i1 %tobool61.not, label %do.end67, label %land.lhs.true62

land.lhs.true62:                                  ; preds = %land.lhs.true
  %.b72 = load i1, ptr @trace_kmem_cache_alloc.__warned, align 1
  br i1 %.b72, label %do.end67, label %if.then64

if.then64:                                        ; preds = %land.lhs.true62
  store i1 true, ptr @trace_kmem_cache_alloc.__warned, align 1
  tail call void @lockdep_rcu_suspicious(ptr noundef nonnull @.str.22, i32 noundef 60, ptr noundef nonnull @.str.23) #27
  br label %do.end67

do.end67:                                         ; preds = %if.then64, %land.lhs.true62, %land.lhs.true, %if.then52
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !25
  %26 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i.i86 = and i32 %26, -16384
  %27 = inttoptr i32 %and.i.i.i.i86 to ptr
  %preempt_count.i.i.i87 = getelementptr inbounds %struct.thread_info, ptr %27, i32 0, i32 1
  %28 = load volatile i32, ptr %preempt_count.i.i.i87, align 4
  %sub.i.i = add i32 %28, -1
  store volatile i32 %sub.i.i, ptr %preempt_count.i.i.i87, align 4
  br label %if.end69

if.end69:                                         ; preds = %do.end67, %cpu_online.exit85, %cpu_online.exit
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong allocsize(2) uwtable(sync)
define dso_local noalias ptr @kmem_cache_alloc_trace(ptr noundef %s, i32 noundef %gfpflags, i32 noundef %size) #6 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %object.i.i = alloca ptr, align 4
  %objcg.i.i = alloca ptr, align 4
  %0 = tail call ptr @llvm.returnaddress(i32 0)
  %1 = ptrtoint ptr %0 to i32
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %object.i.i) #24
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %objcg.i.i) #24
  store ptr null, ptr %objcg.i.i, align 4
  %call.i.i = call fastcc ptr @slab_pre_alloc_hook(ptr noundef %s, ptr noundef nonnull %objcg.i.i, i32 noundef 1, i32 noundef %gfpflags) #27
  %tobool.not.i.i = icmp eq ptr %call.i.i, null
  br i1 %tobool.not.i.i, label %slab_alloc.exit, label %if.end.i.i

if.end.i.i:                                       ; preds = %entry
  callbr void asm sideeffect "1:\0A\09nop\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr nonnull @kfence_allocation_key, ptr blockaddress(@kmem_cache_alloc_trace, %if.end.i.i.i)) #24
          to label %kfence_alloc.exit.i.i [label %if.end.i.i.i], !srcloc !12

if.end.i.i.i:                                     ; preds = %if.end.i.i
  %2 = load volatile i32, ptr @kfence_allocation_gate, align 4
  %tobool4.not.i.i.i = icmp eq i32 %2, 0
  br i1 %tobool4.not.i.i.i, label %if.end12.i.i.i, label %redo.preheader.i.i, !prof !13

if.end12.i.i.i:                                   ; preds = %if.end.i.i.i
  %call13.i.i.i = tail call ptr @__kfence_alloc(ptr noundef nonnull %call.i.i, i32 noundef %size, i32 noundef %gfpflags) #27
  br label %kfence_alloc.exit.i.i

kfence_alloc.exit.i.i:                            ; preds = %if.end12.i.i.i, %if.end.i.i
  %retval.0.i.i.i = phi ptr [ %call13.i.i.i, %if.end12.i.i.i ], [ null, %if.end.i.i ]
  %tobool2.not.i.i = icmp eq ptr %retval.0.i.i.i, null
  br i1 %tobool2.not.i.i, label %redo.preheader.i.i, label %out.i.i, !prof !14

redo.preheader.i.i:                               ; preds = %kfence_alloc.exit.i.i, %if.end.i.i.i
  %3 = load ptr, ptr %call.i.i, align 4
  %4 = ptrtoint ptr %3 to i32
  %5 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i25.i.i = and i32 %5, -16384
  %6 = inttoptr i32 %and.i25.i.i to ptr
  %cpu26.i.i = getelementptr inbounds %struct.thread_info, ptr %6, i32 0, i32 3
  %7 = load i32, ptr %cpu26.i.i, align 4
  %arrayidx27.i.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %7
  %8 = load i32, ptr %arrayidx27.i.i, align 4
  %add28.i.i = add i32 %8, %4
  %9 = inttoptr i32 %add28.i.i to ptr
  %tid1329.i.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %9, i32 0, i32 1
  %10 = load volatile i32, ptr %tid1329.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !15
  %11 = load ptr, ptr %9, align 4
  %slab1430.i.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %9, i32 0, i32 2
  %12 = load ptr, ptr %slab1430.i.i, align 4
  %tobool1531.i.i = icmp ne ptr %11, null
  %tobool1632.i.i = icmp ne ptr %12, null
  %or.cond33.i.i = select i1 %tobool1531.i.i, i1 %tobool1632.i.i, i1 false
  br i1 %or.cond33.i.i, label %lor.rhs.lr.ph.i.i, label %if.then27.critedge.i.i, !prof !16

lor.rhs.lr.ph.i.i:                                ; preds = %redo.preheader.i.i
  %offset.i.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %call.i.i, i32 0, i32 6
  %random.i.i.i.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %call.i.i, i32 0, i32 21
  br label %lor.rhs.i.i

lor.rhs.i.i:                                      ; preds = %cleanup.i.i, %lor.rhs.lr.ph.i.i
  %13 = phi ptr [ %11, %lor.rhs.lr.ph.i.i ], [ %61, %cleanup.i.i ]
  %14 = phi i32 [ %10, %lor.rhs.lr.ph.i.i ], [ %60, %cleanup.i.i ]
  %cpu34.i.i = phi ptr [ %cpu26.i.i, %lor.rhs.lr.ph.i.i ], [ %cpu.i.i, %cleanup.i.i ]
  %15 = load i32, ptr %offset.i.i.i.i, align 4
  %add.ptr.i.i.i.i = getelementptr i8, ptr %13, i32 %15
  %16 = load i32, ptr %add.ptr.i.i.i.i, align 4
  %17 = ptrtoint ptr %add.ptr.i.i.i.i to i32
  %18 = load i32, ptr %random.i.i.i.i.i.i, align 4
  %19 = tail call i32 @llvm.bswap.i32(i32 %17) #24
  %xor.i.i.i.i.i.i = xor i32 %18, %16
  %xor2.i.i.i.i.i.i = xor i32 %xor.i.i.i.i.i.i, %19
  %20 = inttoptr i32 %xor2.i.i.i.i.i.i to ptr
  %21 = load ptr, ptr %call.i.i, align 4
  %22 = ptrtoint ptr %21 to i32
  %rem.i.i = and i32 %22, 7
  %tobool40.not.i.i = icmp eq i32 %rem.i.i, 0
  br i1 %tobool40.not.i.i, label %do.body57.i.i, label %do.body48.i.i, !prof !14

if.then27.critedge.i.i:                           ; preds = %cleanup.i.i, %redo.preheader.i.i
  %call28.i.i = tail call fastcc ptr @__slab_alloc(ptr noundef nonnull %call.i.i, i32 noundef %gfpflags, i32 noundef %1) #27
  store ptr %call28.i.i, ptr %object.i.i, align 4
  br label %if.end159.i.i

do.body48.i.i:                                    ; preds = %lor.rhs.i.i
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slub.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 3217, 0\0A.popsection", ""() #24, !srcloc !17
  unreachable

do.body57.i.i:                                    ; preds = %lor.rhs.i.i
  %tid59.i.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %21, i32 0, i32 1
  %23 = ptrtoint ptr %tid59.i.i to i32
  %add62.i.i = add nuw i32 %22, 4
  %cmp.not.i.i = icmp eq i32 %add62.i.i, %23
  br i1 %cmp.not.i.i, label %do.end78.i.i, label %do.body70.i.i, !prof !14

do.body70.i.i:                                    ; preds = %do.body57.i.i
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slub.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 3217, 0\0A.popsection", ""() #24, !srcloc !18
  unreachable

do.end78.i.i:                                     ; preds = %do.body57.i.i
  %24 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ arch_local_irq_save\0A\09cpsid\09i", "=r,~{memory},~{cc}"() #24, !srcloc !19
  %25 = load ptr, ptr %call.i.i, align 4
  %26 = ptrtoint ptr %25 to i32
  %27 = load i32, ptr %cpu34.i.i, align 4
  %arrayidx96.i.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %27
  %28 = load i32, ptr %arrayidx96.i.i, align 4
  %add97.i.i = add i32 %28, %26
  %29 = inttoptr i32 %add97.i.i to ptr
  %tid105.i.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %25, i32 0, i32 1
  %30 = ptrtoint ptr %tid105.i.i to i32
  %add110.i.i = add i32 %28, %30
  %31 = inttoptr i32 %add110.i.i to ptr
  %32 = load ptr, ptr %29, align 4
  %cmp112.i.i = icmp eq ptr %32, %13
  br i1 %cmp112.i.i, label %land.lhs.true.i.i, label %if.end118.i.i

land.lhs.true.i.i:                                ; preds = %do.end78.i.i
  %33 = load i32, ptr %31, align 4
  %cmp114.i.i = icmp eq i32 %33, %14
  br i1 %cmp114.i.i, label %if.then116.i.i, label %if.end118.i.i

if.then116.i.i:                                   ; preds = %land.lhs.true.i.i
  store ptr %20, ptr %29, align 4
  %add.i.i.i = add i32 %14, 1
  store i32 %add.i.i.i, ptr %31, align 4
  br label %if.end118.i.i

if.end118.i.i:                                    ; preds = %if.then116.i.i, %land.lhs.true.i.i, %do.end78.i.i
  %tobool144.not.i.i = phi i1 [ false, %if.then116.i.i ], [ true, %land.lhs.true.i.i ], [ true, %do.end78.i.i ]
  %34 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ local_save_flags", "=r,~{memory},~{cc}"() #24, !srcloc !20
  %and.i.i2.i.i = and i32 %34, 128
  %tobool128.not.i.i = icmp eq i32 %and.i.i2.i.i, 0
  br i1 %tobool128.not.i.i, label %if.then137.i.i, label %do.end140.i.i, !prof !13

if.then137.i.i:                                   ; preds = %if.end118.i.i
  tail call void @warn_bogus_irq_restore() #27
  br label %do.end140.i.i

do.end140.i.i:                                    ; preds = %if.then137.i.i, %if.end118.i.i
  tail call void asm sideeffect "\09msr\09cpsr_c, $0\09@ local_irq_restore", "r,~{memory},~{cc}"(i32 %24) #24, !srcloc !21
  br i1 %tobool144.not.i.i, label %cleanup.i.i, label %cleanup.thread.i.i, !prof !13

cleanup.thread.i.i:                               ; preds = %do.end140.i.i
  %35 = inttoptr i32 %xor2.i.i.i.i.i.i to ptr
  store ptr %13, ptr %object.i.i, align 4
  %36 = load i32, ptr %offset.i.i.i.i, align 4
  %add.ptr.i4.i.i = getelementptr i8, ptr %35, i32 %36
  tail call void @llvm.prefetch.p0(ptr %add.ptr.i4.i.i, i32 1, i32 3, i32 1) #24
  %37 = load ptr, ptr %call.i.i, align 4
  %arrayidx.i.i.i = getelementptr %struct.kmem_cache_cpu, ptr %37, i32 0, i32 5, i32 0
  %38 = ptrtoint ptr %arrayidx.i.i.i to i32
  %39 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i5.i.i = and i32 %39, -16384
  %40 = inttoptr i32 %and.i.i5.i.i to ptr
  %cpu.i.i.i = getelementptr inbounds %struct.thread_info, ptr %40, i32 0, i32 3
  %41 = load i32, ptr %cpu.i.i.i, align 4
  %arrayidx7.i.i.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %41
  %42 = load i32, ptr %arrayidx7.i.i.i, align 4
  %add.i6.i.i = add i32 %42, %38
  %43 = inttoptr i32 %add.i6.i.i to ptr
  %44 = load i32, ptr %43, align 4
  %add8.i.i.i = add i32 %44, 1
  store i32 %add8.i.i.i, ptr %43, align 4
  br label %if.end159.i.i

cleanup.i.i:                                      ; preds = %do.end140.i.i
  %45 = load ptr, ptr %call.i.i, align 4
  %arrayidx.i.i.i.i = getelementptr %struct.kmem_cache_cpu, ptr %45, i32 0, i32 5, i32 20
  %46 = ptrtoint ptr %arrayidx.i.i.i.i to i32
  %47 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i.i.i = and i32 %47, -16384
  %48 = inttoptr i32 %and.i.i.i.i.i to ptr
  %cpu.i.i.i.i = getelementptr inbounds %struct.thread_info, ptr %48, i32 0, i32 3
  %49 = load i32, ptr %cpu.i.i.i.i, align 4
  %arrayidx7.i.i.i.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %49
  %50 = load i32, ptr %arrayidx7.i.i.i.i, align 4
  %add.i.i.i.i = add i32 %50, %46
  %51 = inttoptr i32 %add.i.i.i.i to ptr
  %52 = load i32, ptr %51, align 4
  %add8.i.i.i.i = add i32 %52, 1
  store i32 %add8.i.i.i.i, ptr %51, align 4
  %53 = load ptr, ptr %call.i.i, align 4
  %54 = ptrtoint ptr %53 to i32
  %55 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i = and i32 %55, -16384
  %56 = inttoptr i32 %and.i.i.i to ptr
  %cpu.i.i = getelementptr inbounds %struct.thread_info, ptr %56, i32 0, i32 3
  %57 = load i32, ptr %cpu.i.i, align 4
  %arrayidx.i.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %57
  %58 = load i32, ptr %arrayidx.i.i, align 4
  %add.i.i = add i32 %58, %54
  %59 = inttoptr i32 %add.i.i to ptr
  %tid13.i.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %59, i32 0, i32 1
  %60 = load volatile i32, ptr %tid13.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !15
  %61 = load ptr, ptr %59, align 4
  %slab14.i.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %59, i32 0, i32 2
  %62 = load ptr, ptr %slab14.i.i, align 4
  %tobool15.i.i = icmp ne ptr %61, null
  %tobool16.i.i = icmp ne ptr %62, null
  %or.cond.i.i = select i1 %tobool15.i.i, i1 %tobool16.i.i, i1 false
  br i1 %or.cond.i.i, label %lor.rhs.i.i, label %if.then27.critedge.i.i, !prof !16

if.end159.i.i:                                    ; preds = %cleanup.thread.i.i, %if.then27.critedge.i.i
  %63 = phi ptr [ %13, %cleanup.thread.i.i ], [ %call28.i.i, %if.then27.critedge.i.i ]
  callbr void asm sideeffect "1:\0A\09nop\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr getelementptr inbounds (i8, ptr @init_on_free, i32 1), ptr blockaddress(@kmem_cache_alloc_trace, %maybe_wipe_obj_freeptr.exit.i.i)) #24
          to label %if.then.i.i.i.i [label %maybe_wipe_obj_freeptr.exit.i.i], !srcloc !12

if.then.i.i.i.i:                                  ; preds = %if.end159.i.i
  %ctor.i.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %call.i.i, i32 0, i32 14
  %64 = load ptr, ptr %ctor.i.i.i.i, align 4
  %tobool15.not.i.i.i.i = icmp eq ptr %64, null
  br i1 %tobool15.not.i.i.i.i, label %lor.rhs.i.i.i.i, label %maybe_wipe_obj_freeptr.exit.i.i

lor.rhs.i.i.i.i:                                  ; preds = %if.then.i.i.i.i
  %flags.i.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %call.i.i, i32 0, i32 1
  %65 = load i32, ptr %flags.i.i.i.i, align 4
  %and.i.i.i.i = and i32 %65, 526336
  %tobool16.i.i.i.i = icmp eq i32 %and.i.i.i.i, 0
  br i1 %tobool16.i.i.i.i, label %land.lhs.true.i.i.i, label %maybe_wipe_obj_freeptr.exit.i.i, !prof !13

land.lhs.true.i.i.i:                              ; preds = %lor.rhs.i.i.i.i
  %tobool2.not.i.i.i = icmp eq ptr %63, null
  br i1 %tobool2.not.i.i.i, label %maybe_wipe_obj_freeptr.exit.i.i, label %if.then.i.i.i

if.then.i.i.i:                                    ; preds = %land.lhs.true.i.i.i
  %offset.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %call.i.i, i32 0, i32 6
  %66 = load i32, ptr %offset.i.i.i, align 4
  %add.ptr.i.i.i = getelementptr i8, ptr %63, i32 %66
  %call4.i.i.i = tail call ptr @__memset(ptr noundef %add.ptr.i.i.i, i32 noundef 0, i32 noundef 4) #27
  br label %maybe_wipe_obj_freeptr.exit.i.i

maybe_wipe_obj_freeptr.exit.i.i:                  ; preds = %if.then.i.i.i, %land.lhs.true.i.i.i, %lor.rhs.i.i.i.i, %if.then.i.i.i.i, %if.end159.i.i
  callbr void asm sideeffect "1:\0A\09nop\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr getelementptr inbounds (i8, ptr @init_on_alloc, i32 1), ptr blockaddress(@kmem_cache_alloc_trace, %if.end23.i.i.i)) #24
          to label %if.then.i7.i.i [label %if.end23.i.i.i], !srcloc !12

if.then.i7.i.i:                                   ; preds = %maybe_wipe_obj_freeptr.exit.i.i
  %ctor.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %call.i.i, i32 0, i32 14
  %67 = load ptr, ptr %ctor.i.i.i, align 4
  %tobool15.not.i.i.i = icmp eq ptr %67, null
  br i1 %tobool15.not.i.i.i, label %if.end.i9.i.i, label %out.i.i

if.end.i9.i.i:                                    ; preds = %if.then.i7.i.i
  %flags17.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %call.i.i, i32 0, i32 1
  %68 = load i32, ptr %flags17.i.i.i, align 4
  %and.i8.i.i = and i32 %68, 526336
  %tobool18.not.i.i.i = icmp eq i32 %and.i8.i.i, 0
  br i1 %tobool18.not.i.i.i, label %out.i.i, label %if.then19.i.i.i

if.then19.i.i.i:                                  ; preds = %if.end.i9.i.i
  %and20.i.i.i = and i32 %gfpflags, 256
  %tobool21.i.i.i = icmp ne i32 %and20.i.i.i, 0
  br label %out.i.i

if.end23.i.i.i:                                   ; preds = %maybe_wipe_obj_freeptr.exit.i.i
  %and24.i.i.i = and i32 %gfpflags, 256
  %tobool25.i.i.i = icmp ne i32 %and24.i.i.i, 0
  br label %out.i.i

out.i.i:                                          ; preds = %if.end23.i.i.i, %if.then19.i.i.i, %if.end.i9.i.i, %if.then.i7.i.i, %kfence_alloc.exit.i.i
  %object.promoted.i.i = phi ptr [ %retval.0.i.i.i, %kfence_alloc.exit.i.i ], [ %63, %if.then19.i.i.i ], [ %63, %if.end23.i.i.i ], [ %63, %if.then.i7.i.i ], [ %63, %if.end.i9.i.i ]
  %init.0.off0.i.i = phi i1 [ false, %kfence_alloc.exit.i.i ], [ %tobool21.i.i.i, %if.then19.i.i.i ], [ %tobool25.i.i.i, %if.end23.i.i.i ], [ false, %if.then.i7.i.i ], [ true, %if.end.i9.i.i ]
  %69 = load ptr, ptr %objcg.i.i, align 4
  %70 = load i32, ptr @gfp_allowed_mask, align 4
  %and.i11.i.i = and i32 %70, %gfpflags
  %object_size.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %call.i.i, i32 0, i32 4
  %flags11.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %call.i.i, i32 0, i32 1
  %call1.i.i.i.i = tail call ptr @__kasan_slab_alloc(ptr noundef nonnull %call.i.i, ptr noundef %object.promoted.i.i, i32 noundef %and.i11.i.i, i1 noundef zeroext %init.0.off0.i.i) #27
  %tobool3.not.i.i.i = icmp ne ptr %call1.i.i.i.i, null
  %71 = and i1 %init.0.off0.i.i, %tobool3.not.i.i.i
  br i1 %71, label %land.lhs.true5.i.i.i, label %if.end.i14.i.i

land.lhs.true5.i.i.i:                             ; preds = %out.i.i
  %72 = load i32, ptr %object_size.i.i.i, align 4
  %call8.i.i.i = tail call ptr @__memset(ptr noundef nonnull %call1.i.i.i.i, i32 noundef 0, i32 noundef %72) #27
  br label %if.end.i14.i.i

if.end.i14.i.i:                                   ; preds = %land.lhs.true5.i.i.i, %out.i.i
  %73 = load i32, ptr %flags11.i.i.i, align 4
  %and.i.i13.i.i = and i32 %73, 8388608
  %tobool.not.i.i.i.i = icmp eq i32 %and.i.i13.i.i, 0
  br i1 %tobool.not.i.i.i.i, label %if.then.i.i15.i.i, label %kmemleak_alloc_recursive.exit.i.i.i

if.then.i.i15.i.i:                                ; preds = %if.end.i14.i.i
  %74 = load i32, ptr %object_size.i.i.i, align 4
  tail call void @kmemleak_alloc(ptr noundef %call1.i.i.i.i, i32 noundef %74, i32 noundef 1, i32 noundef %and.i11.i.i) #27
  br label %kmemleak_alloc_recursive.exit.i.i.i

kmemleak_alloc_recursive.exit.i.i.i:              ; preds = %if.then.i.i15.i.i, %if.end.i14.i.i
  store ptr %call1.i.i.i.i, ptr %object.i.i, align 4
  call fastcc void @memcg_slab_post_alloc_hook(ptr noundef nonnull %call.i.i, ptr noundef %69, i32 noundef %and.i11.i.i, i32 noundef 1, ptr noundef nonnull %object.i.i) #27
  br label %slab_alloc.exit

slab_alloc.exit:                                  ; preds = %kmemleak_alloc_recursive.exit.i.i.i, %entry
  %retval.0.i.i = phi ptr [ %call1.i.i.i.i, %kmemleak_alloc_recursive.exit.i.i.i ], [ null, %entry ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %objcg.i.i) #24
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %object.i.i) #24
  %size1 = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 3
  %75 = load i32, ptr %size1, align 4
  tail call fastcc void @trace_kmalloc(i32 noundef %1, ptr noundef %retval.0.i.i, i32 noundef %size, i32 noundef %75, i32 noundef %gfpflags) #25
  %call1.i = tail call ptr @__kasan_kmalloc(ptr noundef %s, ptr noundef %retval.0.i.i, i32 noundef %size, i32 noundef %gfpflags) #27
  ret ptr %call1.i
}

; Function Attrs: inlinehint nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc void @trace_kmalloc(i32 noundef %call_site, ptr noundef %ptr, i32 noundef %bytes_req, i32 noundef %bytes_alloc, i32 noundef %gfp_flags) unnamed_addr #5 align 64 {
entry:
  callbr void asm sideeffect "1:\0A\09nop\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr getelementptr inbounds (%struct.tracepoint, ptr @__tracepoint_kmalloc, i32 0, i32 1), ptr blockaddress(@trace_kmalloc, %do.body)) #24
          to label %if.end48 [label %do.body], !srcloc !12

do.body:                                          ; preds = %entry
  %0 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i = and i32 %0, -16384
  %1 = inttoptr i32 %and.i to ptr
  %cpu = getelementptr inbounds %struct.thread_info, ptr %1, i32 0, i32 3
  %2 = load i32, ptr %cpu, align 4
  %3 = load i32, ptr @nr_cpu_ids, align 4
  %cmp.i.i.i.i = icmp ule i32 %3, %2
  %.b37.i.i.i.i = load i1, ptr @cpu_max_bits_warn.__already_done, align 1
  %lnot3.i.i.i.i = xor i1 %.b37.i.i.i.i, true
  %4 = select i1 %cmp.i.i.i.i, i1 %lnot3.i.i.i.i, i1 false
  br i1 %4, label %if.then.i.i.i.i, label %cpu_online.exit, !prof !13

if.then.i.i.i.i:                                  ; preds = %do.body
  store i1 true, ptr @cpu_max_bits_warn.__already_done, align 1
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.24, i32 noundef 108, i32 noundef 9, ptr noundef null) #27
  br label %cpu_online.exit

cpu_online.exit:                                  ; preds = %if.then.i.i.i.i, %do.body
  %div3.i.i.i = lshr i32 %2, 5
  %arrayidx.i.i.i = getelementptr i32, ptr @__cpu_online_mask, i32 %div3.i.i.i
  %5 = load volatile i32, ptr %arrayidx.i.i.i, align 4
  %and.i.i.i75 = and i32 %2, 31
  %6 = shl nuw i32 1, %and.i.i.i75
  %7 = and i32 %5, %6
  %tobool.i.not = icmp eq i32 %7, 0
  br i1 %tobool.i.not, label %if.end69, label %cleanup.thread

cleanup.thread:                                   ; preds = %cpu_online.exit
  %8 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i = and i32 %8, -16384
  %9 = inttoptr i32 %and.i.i.i to ptr
  %preempt_count.i.i = getelementptr inbounds %struct.thread_info, ptr %9, i32 0, i32 1
  %10 = load volatile i32, ptr %preempt_count.i.i, align 4
  %add.i = add i32 %10, 1
  store volatile i32 %add.i, ptr %preempt_count.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !26
  %call42 = tail call i32 @__traceiter_kmalloc(ptr noundef null, i32 noundef %call_site, ptr noundef %ptr, i32 noundef %bytes_req, i32 noundef %bytes_alloc, i32 noundef %gfp_flags) #27
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !27
  %11 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i73 = and i32 %11, -16384
  %12 = inttoptr i32 %and.i.i.i73 to ptr
  %preempt_count.i.i74 = getelementptr inbounds %struct.thread_info, ptr %12, i32 0, i32 1
  %13 = load volatile i32, ptr %preempt_count.i.i74, align 4
  %sub.i = add i32 %13, -1
  store volatile i32 %sub.i, ptr %preempt_count.i.i74, align 4
  br label %if.end48

if.end48:                                         ; preds = %cleanup.thread, %entry
  %14 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i76 = and i32 %14, -16384
  %15 = inttoptr i32 %and.i76 to ptr
  %cpu50 = getelementptr inbounds %struct.thread_info, ptr %15, i32 0, i32 3
  %16 = load i32, ptr %cpu50, align 4
  %17 = load i32, ptr @nr_cpu_ids, align 4
  %cmp.i.i.i.i77 = icmp ule i32 %17, %16
  %.b37.i.i.i.i78 = load i1, ptr @cpu_max_bits_warn.__already_done, align 1
  %lnot3.i.i.i.i79 = xor i1 %.b37.i.i.i.i78, true
  %18 = select i1 %cmp.i.i.i.i77, i1 %lnot3.i.i.i.i79, i1 false
  br i1 %18, label %if.then.i.i.i.i80, label %cpu_online.exit85, !prof !13

if.then.i.i.i.i80:                                ; preds = %if.end48
  store i1 true, ptr @cpu_max_bits_warn.__already_done, align 1
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.24, i32 noundef 108, i32 noundef 9, ptr noundef null) #27
  br label %cpu_online.exit85

cpu_online.exit85:                                ; preds = %if.then.i.i.i.i80, %if.end48
  %div3.i.i.i81 = lshr i32 %16, 5
  %arrayidx.i.i.i82 = getelementptr i32, ptr @__cpu_online_mask, i32 %div3.i.i.i81
  %19 = load volatile i32, ptr %arrayidx.i.i.i82, align 4
  %and.i.i.i83 = and i32 %16, 31
  %20 = shl nuw i32 1, %and.i.i.i83
  %21 = and i32 %19, %20
  %tobool.i84.not = icmp eq i32 %21, 0
  br i1 %tobool.i84.not, label %if.end69, label %if.then52

if.then52:                                        ; preds = %cpu_online.exit85
  %22 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i.i = and i32 %22, -16384
  %23 = inttoptr i32 %and.i.i.i.i to ptr
  %preempt_count.i.i.i = getelementptr inbounds %struct.thread_info, ptr %23, i32 0, i32 1
  %24 = load volatile i32, ptr %preempt_count.i.i.i, align 4
  %add.i.i = add i32 %24, 1
  store volatile i32 %add.i.i, ptr %preempt_count.i.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !24
  %25 = load volatile ptr, ptr getelementptr inbounds (%struct.tracepoint, ptr @__tracepoint_kmalloc, i32 0, i32 7), align 4
  %call58 = tail call i32 @rcu_read_lock_sched_held() #27
  %tobool59.not = icmp eq i32 %call58, 0
  br i1 %tobool59.not, label %land.lhs.true, label %do.end67

land.lhs.true:                                    ; preds = %if.then52
  %call60 = tail call i32 @debug_lockdep_rcu_enabled() #27
  %tobool61.not = icmp eq i32 %call60, 0
  br i1 %tobool61.not, label %do.end67, label %land.lhs.true62

land.lhs.true62:                                  ; preds = %land.lhs.true
  %.b72 = load i1, ptr @trace_kmalloc.__warned, align 1
  br i1 %.b72, label %do.end67, label %if.then64

if.then64:                                        ; preds = %land.lhs.true62
  store i1 true, ptr @trace_kmalloc.__warned, align 1
  tail call void @lockdep_rcu_suspicious(ptr noundef nonnull @.str.22, i32 noundef 52, ptr noundef nonnull @.str.23) #27
  br label %do.end67

do.end67:                                         ; preds = %if.then64, %land.lhs.true62, %land.lhs.true, %if.then52
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !25
  %26 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i.i86 = and i32 %26, -16384
  %27 = inttoptr i32 %and.i.i.i.i86 to ptr
  %preempt_count.i.i.i87 = getelementptr inbounds %struct.thread_info, ptr %27, i32 0, i32 1
  %28 = load volatile i32, ptr %preempt_count.i.i.i87, align 4
  %sub.i.i = add i32 %28, -1
  store volatile i32 %sub.i.i, ptr %preempt_count.i.i.i87, align 4
  br label %if.end69

if.end69:                                         ; preds = %do.end67, %cpu_online.exit85, %cpu_online.exit
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define dso_local void @___cache_free(ptr noundef %cache, ptr noundef %x, i32 noundef %addr) local_unnamed_addr #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %head.addr.i = alloca ptr, align 4
  %0 = load ptr, ptr @mem_map, align 4
  %1 = ptrtoint ptr %x to i32
  %sub.i.i = add i32 %1, 1073741824
  %shr.i.i = lshr i32 %sub.i.i, 12
  %2 = getelementptr %struct.page, ptr %0, i32 %shr.i.i, i32 1
  %3 = load volatile i32, ptr %2, align 4
  %and.i.i.i2 = and i32 %3, 1
  %tobool.not.i.i3.i = icmp eq i32 %and.i.i.i2, 0
  br i1 %tobool.not.i.i3.i, label %if.end.i.i.i, label %if.then.i.i4.i, !prof !14

if.then.i.i4.i:                                   ; preds = %entry
  %sub.i.i.i = add i32 %3, -1
  br label %virt_to_folio.exit.i

if.end.i.i.i:                                     ; preds = %entry
  %add.ptr.i.i = getelementptr %struct.page, ptr %0, i32 %shr.i.i
  %4 = ptrtoint ptr %add.ptr.i.i to i32
  br label %virt_to_folio.exit.i

virt_to_folio.exit.i:                             ; preds = %if.end.i.i.i, %if.then.i.i4.i
  %retval.0.i.i.i = phi i32 [ %sub.i.i.i, %if.then.i.i4.i ], [ %4, %if.end.i.i.i ]
  %5 = inttoptr i32 %retval.0.i.i.i to ptr
  %6 = getelementptr inbounds %struct.page, ptr %5, i32 0, i32 1
  %7 = load volatile i32, ptr %6, align 4
  %and.i.i.i.i3 = and i32 %7, 1
  %tobool.not.i.i.i = icmp eq i32 %and.i.i.i.i3, 0
  br i1 %tobool.not.i.i.i, label %virt_to_slab.exit, label %if.then.i.i.i, !prof !14

if.then.i.i.i:                                    ; preds = %virt_to_folio.exit.i
  tail call void @dump_page(ptr noundef %5, ptr noundef nonnull @.str.29) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 260, 0\0A.popsection", ""() #24, !srcloc !28
  unreachable

virt_to_slab.exit:                                ; preds = %virt_to_folio.exit.i
  %8 = load volatile i32, ptr %5, align 4
  %9 = and i32 %8, 512
  %tobool.i.not.i = icmp eq i32 %9, 0
  %call..i = select i1 %tobool.i.not.i, ptr null, ptr %5
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %head.addr.i)
  store ptr %x, ptr %head.addr.i, align 4
  call fastcc void @memcg_slab_free_hook(ptr noundef %cache, ptr noundef nonnull %head.addr.i, i32 noundef 1) #27
  %10 = load ptr, ptr %cache, align 4
  %11 = ptrtoint ptr %10 to i32
  %12 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i173.i = and i32 %12, -16384
  %13 = inttoptr i32 %and.i173.i to ptr
  %cpu174.i = getelementptr inbounds %struct.thread_info, ptr %13, i32 0, i32 3
  %14 = load i32, ptr %cpu174.i, align 4
  %arrayidx175.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %14
  %15 = load i32, ptr %arrayidx175.i, align 4
  %add176.i = add i32 %15, %11
  %16 = inttoptr i32 %add176.i to ptr
  %tid7177.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %16, i32 0, i32 1
  %17 = load volatile i32, ptr %tid7177.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !29
  %slab8178.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %16, i32 0, i32 2
  %18 = load ptr, ptr %slab8178.i, align 4
  %cmp179.i = icmp eq ptr %18, %call..i
  br i1 %cmp179.i, label %if.then11.lr.ph.i, label %if.else.i, !prof !14

if.then11.lr.ph.i:                                ; preds = %virt_to_slab.exit
  %offset.i.i = getelementptr inbounds %struct.kmem_cache, ptr %cache, i32 0, i32 6
  %random.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %cache, i32 0, i32 21
  br label %if.then11.i

if.then11.i:                                      ; preds = %cleanup.i, %if.then11.lr.ph.i
  %19 = phi i32 [ %17, %if.then11.lr.ph.i ], [ %64, %cleanup.i ]
  %20 = phi ptr [ %16, %if.then11.lr.ph.i ], [ %63, %cleanup.i ]
  %cpu180.i = phi ptr [ %cpu174.i, %if.then11.lr.ph.i ], [ %cpu.i, %cleanup.i ]
  %21 = load volatile ptr, ptr %20, align 4
  %cmp.i.i = icmp eq ptr %21, %x
  br i1 %cmp.i.i, label %do.body2.i.i, label %set_freepointer.exit.i, !prof !13

do.body2.i.i:                                     ; preds = %if.then11.i
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slub.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 379, 0\0A.popsection", ""() #24, !srcloc !30
  unreachable

set_freepointer.exit.i:                           ; preds = %if.then11.i
  %22 = load i32, ptr %offset.i.i, align 4
  %add.i.i = add i32 %22, %1
  %23 = inttoptr i32 %add.i.i to ptr
  %24 = ptrtoint ptr %21 to i32
  %25 = load i32, ptr %random.i.i.i, align 4
  %26 = tail call i32 @llvm.bswap.i32(i32 %add.i.i) #24
  %xor.i.i.i = xor i32 %25, %24
  %xor2.i.i.i = xor i32 %xor.i.i.i, %26
  %27 = inttoptr i32 %xor2.i.i.i to ptr
  store ptr %27, ptr %23, align 4
  %28 = load ptr, ptr %cache, align 4
  %29 = ptrtoint ptr %28 to i32
  %rem.i = and i32 %29, 7
  %tobool27.not.i = icmp eq i32 %rem.i, 0
  br i1 %tobool27.not.i, label %do.body44.i, label %do.body35.i, !prof !14

do.body35.i:                                      ; preds = %set_freepointer.exit.i
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slub.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 3465, 0\0A.popsection", ""() #24, !srcloc !31
  unreachable

do.body44.i:                                      ; preds = %set_freepointer.exit.i
  %tid46.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %28, i32 0, i32 1
  %30 = ptrtoint ptr %tid46.i to i32
  %add49.i = add nuw i32 %29, 4
  %cmp50.not.i = icmp eq i32 %add49.i, %30
  br i1 %cmp50.not.i, label %do.end66.i, label %do.body58.i, !prof !14

do.body58.i:                                      ; preds = %do.body44.i
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slub.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 3465, 0\0A.popsection", ""() #24, !srcloc !32
  unreachable

do.end66.i:                                       ; preds = %do.body44.i
  %31 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ arch_local_irq_save\0A\09cpsid\09i", "=r,~{memory},~{cc}"() #24, !srcloc !19
  %32 = load ptr, ptr %cache, align 4
  %33 = ptrtoint ptr %32 to i32
  %34 = load i32, ptr %cpu180.i, align 4
  %arrayidx84.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %34
  %35 = load i32, ptr %arrayidx84.i, align 4
  %add85.i = add i32 %35, %33
  %36 = inttoptr i32 %add85.i to ptr
  %tid93.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %32, i32 0, i32 1
  %37 = ptrtoint ptr %tid93.i to i32
  %add98.i = add i32 %35, %37
  %38 = inttoptr i32 %add98.i to ptr
  %39 = load ptr, ptr %36, align 4
  %cmp100.i = icmp eq ptr %39, %21
  br i1 %cmp100.i, label %land.lhs.true.i, label %if.end106.i

land.lhs.true.i:                                  ; preds = %do.end66.i
  %40 = load i32, ptr %38, align 4
  %cmp102.i = icmp eq i32 %40, %19
  br i1 %cmp102.i, label %if.then104.i, label %if.end106.i

if.then104.i:                                     ; preds = %land.lhs.true.i
  store ptr %x, ptr %36, align 4
  %add.i168.i = add i32 %19, 1
  store i32 %add.i168.i, ptr %38, align 4
  br label %if.end106.i

if.end106.i:                                      ; preds = %if.then104.i, %land.lhs.true.i, %do.end66.i
  %tobool132.not.i = phi i1 [ false, %if.then104.i ], [ true, %land.lhs.true.i ], [ true, %do.end66.i ]
  %41 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ local_save_flags", "=r,~{memory},~{cc}"() #24, !srcloc !20
  %and.i.i.i = and i32 %41, 128
  %tobool116.not.i = icmp eq i32 %and.i.i.i, 0
  br i1 %tobool116.not.i, label %if.then125.i, label %do.end128.i, !prof !13

if.then125.i:                                     ; preds = %if.end106.i
  tail call void @warn_bogus_irq_restore() #27
  br label %do.end128.i

do.end128.i:                                      ; preds = %if.then125.i, %if.end106.i
  tail call void asm sideeffect "\09msr\09cpsr_c, $0\09@ local_irq_restore", "r,~{memory},~{cc}"(i32 %31) #24, !srcloc !21
  %42 = load ptr, ptr %cache, align 4
  br i1 %tobool132.not.i, label %cleanup.i, label %cleanup.thread.i, !prof !13

cleanup.thread.i:                                 ; preds = %do.end128.i
  %arrayidx.i.i = getelementptr %struct.kmem_cache_cpu, ptr %42, i32 0, i32 5, i32 2
  %43 = ptrtoint ptr %arrayidx.i.i to i32
  %44 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i169.i = and i32 %44, -16384
  %45 = inttoptr i32 %and.i.i169.i to ptr
  %cpu.i.i = getelementptr inbounds %struct.thread_info, ptr %45, i32 0, i32 3
  %46 = load i32, ptr %cpu.i.i, align 4
  %arrayidx7.i.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %46
  %47 = load i32, ptr %arrayidx7.i.i, align 4
  %add.i170.i = add i32 %47, %43
  %48 = inttoptr i32 %add.i170.i to ptr
  %49 = load i32, ptr %48, align 4
  %add8.i.i = add i32 %49, 1
  store i32 %add8.i.i, ptr %48, align 4
  br label %do_slab_free.exit

cleanup.i:                                        ; preds = %do.end128.i
  %arrayidx.i.i.i = getelementptr %struct.kmem_cache_cpu, ptr %42, i32 0, i32 5, i32 20
  %50 = ptrtoint ptr %arrayidx.i.i.i to i32
  %51 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i.i = and i32 %51, -16384
  %52 = inttoptr i32 %and.i.i.i.i to ptr
  %cpu.i.i.i = getelementptr inbounds %struct.thread_info, ptr %52, i32 0, i32 3
  %53 = load i32, ptr %cpu.i.i.i, align 4
  %arrayidx7.i.i.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %53
  %54 = load i32, ptr %arrayidx7.i.i.i, align 4
  %add.i.i.i = add i32 %54, %50
  %55 = inttoptr i32 %add.i.i.i to ptr
  %56 = load i32, ptr %55, align 4
  %add8.i.i.i = add i32 %56, 1
  store i32 %add8.i.i.i, ptr %55, align 4
  %57 = load ptr, ptr %cache, align 4
  %58 = ptrtoint ptr %57 to i32
  %59 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i = and i32 %59, -16384
  %60 = inttoptr i32 %and.i.i to ptr
  %cpu.i = getelementptr inbounds %struct.thread_info, ptr %60, i32 0, i32 3
  %61 = load i32, ptr %cpu.i, align 4
  %arrayidx.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %61
  %62 = load i32, ptr %arrayidx.i, align 4
  %add.i = add i32 %62, %58
  %63 = inttoptr i32 %add.i to ptr
  %tid7.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %63, i32 0, i32 1
  %64 = load volatile i32, ptr %tid7.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !29
  %slab8.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %63, i32 0, i32 2
  %65 = load ptr, ptr %slab8.i, align 4
  %cmp.i = icmp eq ptr %65, %call..i
  br i1 %cmp.i, label %if.then11.i, label %if.else.i, !prof !14

if.else.i:                                        ; preds = %cleanup.i, %virt_to_slab.exit
  tail call fastcc void @__slab_free(ptr noundef %cache, ptr noundef %call..i, ptr noundef %x, ptr noundef %x, i32 noundef 1, i32 noundef %addr) #27
  br label %do_slab_free.exit

do_slab_free.exit:                                ; preds = %if.else.i, %cleanup.thread.i
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %head.addr.i)
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define dso_local void @kmem_cache_free(ptr noundef %s, ptr noundef %x) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %head.addr.i.i = alloca ptr, align 4
  %head.addr.i = alloca ptr, align 4
  %tail.addr.i = alloca ptr, align 4
  %cnt.addr.i = alloca i32, align 4
  %call = tail call fastcc ptr @cache_from_obj(ptr noundef %s, ptr noundef %x) #25
  %tobool.not = icmp eq ptr %call, null
  br i1 %tobool.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  %0 = tail call ptr @llvm.returnaddress(i32 0)
  %1 = ptrtoint ptr %0 to i32
  %name = getelementptr inbounds %struct.kmem_cache, ptr %call, i32 0, i32 18
  %2 = load ptr, ptr %name, align 4
  tail call fastcc void @trace_kmem_cache_free(i32 noundef %1, ptr noundef %x, ptr noundef %2) #25
  %3 = load ptr, ptr @mem_map, align 4
  %4 = ptrtoint ptr %x to i32
  %sub.i.i = add i32 %4, 1073741824
  %shr.i.i = lshr i32 %sub.i.i, 12
  %5 = getelementptr %struct.page, ptr %3, i32 %shr.i.i, i32 1
  %6 = load volatile i32, ptr %5, align 4
  %and.i.i.i8 = and i32 %6, 1
  %tobool.not.i.i3.i = icmp eq i32 %and.i.i.i8, 0
  br i1 %tobool.not.i.i3.i, label %if.end.i.i.i, label %if.then.i.i4.i, !prof !14

if.then.i.i4.i:                                   ; preds = %if.end
  %sub.i.i.i = add i32 %6, -1
  br label %virt_to_folio.exit.i

if.end.i.i.i:                                     ; preds = %if.end
  %add.ptr.i.i = getelementptr %struct.page, ptr %3, i32 %shr.i.i
  %7 = ptrtoint ptr %add.ptr.i.i to i32
  br label %virt_to_folio.exit.i

virt_to_folio.exit.i:                             ; preds = %if.end.i.i.i, %if.then.i.i4.i
  %retval.0.i.i.i = phi i32 [ %sub.i.i.i, %if.then.i.i4.i ], [ %7, %if.end.i.i.i ]
  %8 = inttoptr i32 %retval.0.i.i.i to ptr
  %9 = getelementptr inbounds %struct.page, ptr %8, i32 0, i32 1
  %10 = load volatile i32, ptr %9, align 4
  %and.i.i.i.i9 = and i32 %10, 1
  %tobool.not.i.i.i = icmp eq i32 %and.i.i.i.i9, 0
  br i1 %tobool.not.i.i.i, label %virt_to_slab.exit, label %if.then.i.i.i, !prof !14

if.then.i.i.i:                                    ; preds = %virt_to_folio.exit.i
  tail call void @dump_page(ptr noundef %8, ptr noundef nonnull @.str.29) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 260, 0\0A.popsection", ""() #24, !srcloc !28
  unreachable

virt_to_slab.exit:                                ; preds = %virt_to_folio.exit.i
  %11 = load volatile i32, ptr %8, align 4
  %12 = and i32 %11, 512
  %tobool.i.not.i = icmp eq i32 %12, 0
  %call..i = select i1 %tobool.i.not.i, ptr null, ptr %8
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %head.addr.i)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %tail.addr.i)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %cnt.addr.i)
  store ptr %x, ptr %head.addr.i, align 4
  store ptr null, ptr %tail.addr.i, align 4
  store i32 1, ptr %cnt.addr.i, align 4
  %call.i = call fastcc zeroext i1 @slab_free_freelist_hook(ptr noundef nonnull %call, ptr noundef nonnull %head.addr.i, ptr noundef nonnull %tail.addr.i, ptr noundef nonnull %cnt.addr.i) #27
  br i1 %call.i, label %if.then.i, label %slab_free.exit

if.then.i:                                        ; preds = %virt_to_slab.exit
  %13 = load ptr, ptr %head.addr.i, align 4
  %14 = load ptr, ptr %tail.addr.i, align 4
  %15 = load i32, ptr %cnt.addr.i, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %head.addr.i.i) #24
  store ptr %13, ptr %head.addr.i.i, align 4
  %tobool.not.i.i = icmp eq ptr %14, null
  %cond.i.i = select i1 %tobool.not.i.i, ptr %13, ptr %14
  br i1 %tobool.not.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %if.then.i
  call fastcc void @memcg_slab_free_hook(ptr noundef nonnull %call, ptr noundef nonnull %head.addr.i.i, i32 noundef 1) #27
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %if.then.i
  %16 = load ptr, ptr %call, align 4
  %17 = ptrtoint ptr %16 to i32
  %18 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i173.i.i = and i32 %18, -16384
  %19 = inttoptr i32 %and.i173.i.i to ptr
  %cpu174.i.i = getelementptr inbounds %struct.thread_info, ptr %19, i32 0, i32 3
  %20 = load i32, ptr %cpu174.i.i, align 4
  %arrayidx175.i.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %20
  %21 = load i32, ptr %arrayidx175.i.i, align 4
  %add176.i.i = add i32 %21, %17
  %22 = inttoptr i32 %add176.i.i to ptr
  %tid7177.i.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %22, i32 0, i32 1
  %23 = load volatile i32, ptr %tid7177.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !29
  %slab8178.i.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %22, i32 0, i32 2
  %24 = load ptr, ptr %slab8178.i.i, align 4
  %cmp179.i.i = icmp eq ptr %24, %call..i
  br i1 %cmp179.i.i, label %if.then11.lr.ph.i.i, label %if.else.i.i, !prof !14

if.then11.lr.ph.i.i:                              ; preds = %if.end.i.i
  %25 = ptrtoint ptr %cond.i.i to i32
  %offset.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %call, i32 0, i32 6
  %random.i.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %call, i32 0, i32 21
  br label %if.then11.i.i

if.then11.i.i:                                    ; preds = %cleanup.i.i, %if.then11.lr.ph.i.i
  %26 = phi i32 [ %23, %if.then11.lr.ph.i.i ], [ %71, %cleanup.i.i ]
  %27 = phi ptr [ %22, %if.then11.lr.ph.i.i ], [ %70, %cleanup.i.i ]
  %cpu180.i.i = phi ptr [ %cpu174.i.i, %if.then11.lr.ph.i.i ], [ %cpu.i.i, %cleanup.i.i ]
  %28 = load volatile ptr, ptr %27, align 4
  %cmp.i.i.i = icmp eq ptr %cond.i.i, %28
  br i1 %cmp.i.i.i, label %do.body2.i.i.i, label %set_freepointer.exit.i.i, !prof !13

do.body2.i.i.i:                                   ; preds = %if.then11.i.i
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slub.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 379, 0\0A.popsection", ""() #24, !srcloc !30
  unreachable

set_freepointer.exit.i.i:                         ; preds = %if.then11.i.i
  %29 = load i32, ptr %offset.i.i.i, align 4
  %add.i.i.i = add i32 %29, %25
  %30 = inttoptr i32 %add.i.i.i to ptr
  %31 = ptrtoint ptr %28 to i32
  %32 = load i32, ptr %random.i.i.i.i, align 4
  %33 = tail call i32 @llvm.bswap.i32(i32 %add.i.i.i) #24
  %xor.i.i.i.i = xor i32 %32, %31
  %xor2.i.i.i.i = xor i32 %xor.i.i.i.i, %33
  %34 = inttoptr i32 %xor2.i.i.i.i to ptr
  store ptr %34, ptr %30, align 4
  %35 = load ptr, ptr %call, align 4
  %36 = ptrtoint ptr %35 to i32
  %rem.i.i = and i32 %36, 7
  %tobool27.not.i.i = icmp eq i32 %rem.i.i, 0
  br i1 %tobool27.not.i.i, label %do.body44.i.i, label %do.body35.i.i, !prof !14

do.body35.i.i:                                    ; preds = %set_freepointer.exit.i.i
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slub.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 3465, 0\0A.popsection", ""() #24, !srcloc !31
  unreachable

do.body44.i.i:                                    ; preds = %set_freepointer.exit.i.i
  %tid46.i.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %35, i32 0, i32 1
  %37 = ptrtoint ptr %tid46.i.i to i32
  %add49.i.i = add nuw i32 %36, 4
  %cmp50.not.i.i = icmp eq i32 %add49.i.i, %37
  br i1 %cmp50.not.i.i, label %do.end66.i.i, label %do.body58.i.i, !prof !14

do.body58.i.i:                                    ; preds = %do.body44.i.i
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slub.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 3465, 0\0A.popsection", ""() #24, !srcloc !32
  unreachable

do.end66.i.i:                                     ; preds = %do.body44.i.i
  %38 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ arch_local_irq_save\0A\09cpsid\09i", "=r,~{memory},~{cc}"() #24, !srcloc !19
  %39 = load ptr, ptr %call, align 4
  %40 = ptrtoint ptr %39 to i32
  %41 = load i32, ptr %cpu180.i.i, align 4
  %arrayidx84.i.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %41
  %42 = load i32, ptr %arrayidx84.i.i, align 4
  %add85.i.i = add i32 %42, %40
  %43 = inttoptr i32 %add85.i.i to ptr
  %tid93.i.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %39, i32 0, i32 1
  %44 = ptrtoint ptr %tid93.i.i to i32
  %add98.i.i = add i32 %42, %44
  %45 = inttoptr i32 %add98.i.i to ptr
  %46 = load ptr, ptr %43, align 4
  %cmp100.i.i = icmp eq ptr %46, %28
  br i1 %cmp100.i.i, label %land.lhs.true.i.i, label %if.end106.i.i

land.lhs.true.i.i:                                ; preds = %do.end66.i.i
  %47 = load i32, ptr %45, align 4
  %cmp102.i.i = icmp eq i32 %47, %26
  br i1 %cmp102.i.i, label %if.then104.i.i, label %if.end106.i.i

if.then104.i.i:                                   ; preds = %land.lhs.true.i.i
  store ptr %13, ptr %43, align 4
  %add.i168.i.i = add i32 %26, 1
  store i32 %add.i168.i.i, ptr %45, align 4
  br label %if.end106.i.i

if.end106.i.i:                                    ; preds = %if.then104.i.i, %land.lhs.true.i.i, %do.end66.i.i
  %tobool132.not.i.i = phi i1 [ false, %if.then104.i.i ], [ true, %land.lhs.true.i.i ], [ true, %do.end66.i.i ]
  %48 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ local_save_flags", "=r,~{memory},~{cc}"() #24, !srcloc !20
  %and.i.i.i.i = and i32 %48, 128
  %tobool116.not.i.i = icmp eq i32 %and.i.i.i.i, 0
  br i1 %tobool116.not.i.i, label %if.then125.i.i, label %do.end128.i.i, !prof !13

if.then125.i.i:                                   ; preds = %if.end106.i.i
  tail call void @warn_bogus_irq_restore() #27
  br label %do.end128.i.i

do.end128.i.i:                                    ; preds = %if.then125.i.i, %if.end106.i.i
  tail call void asm sideeffect "\09msr\09cpsr_c, $0\09@ local_irq_restore", "r,~{memory},~{cc}"(i32 %38) #24, !srcloc !21
  %49 = load ptr, ptr %call, align 4
  br i1 %tobool132.not.i.i, label %cleanup.i.i, label %cleanup.thread.i.i, !prof !13

cleanup.thread.i.i:                               ; preds = %do.end128.i.i
  %arrayidx.i.i.i = getelementptr %struct.kmem_cache_cpu, ptr %49, i32 0, i32 5, i32 2
  %50 = ptrtoint ptr %arrayidx.i.i.i to i32
  %51 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i169.i.i = and i32 %51, -16384
  %52 = inttoptr i32 %and.i.i169.i.i to ptr
  %cpu.i.i.i = getelementptr inbounds %struct.thread_info, ptr %52, i32 0, i32 3
  %53 = load i32, ptr %cpu.i.i.i, align 4
  %arrayidx7.i.i.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %53
  %54 = load i32, ptr %arrayidx7.i.i.i, align 4
  %add.i170.i.i = add i32 %54, %50
  %55 = inttoptr i32 %add.i170.i.i to ptr
  %56 = load i32, ptr %55, align 4
  %add8.i.i.i = add i32 %56, 1
  store i32 %add8.i.i.i, ptr %55, align 4
  br label %do_slab_free.exit.i

cleanup.i.i:                                      ; preds = %do.end128.i.i
  %arrayidx.i.i.i.i = getelementptr %struct.kmem_cache_cpu, ptr %49, i32 0, i32 5, i32 20
  %57 = ptrtoint ptr %arrayidx.i.i.i.i to i32
  %58 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i.i.i = and i32 %58, -16384
  %59 = inttoptr i32 %and.i.i.i.i.i to ptr
  %cpu.i.i.i.i = getelementptr inbounds %struct.thread_info, ptr %59, i32 0, i32 3
  %60 = load i32, ptr %cpu.i.i.i.i, align 4
  %arrayidx7.i.i.i.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %60
  %61 = load i32, ptr %arrayidx7.i.i.i.i, align 4
  %add.i.i.i.i = add i32 %61, %57
  %62 = inttoptr i32 %add.i.i.i.i to ptr
  %63 = load i32, ptr %62, align 4
  %add8.i.i.i.i = add i32 %63, 1
  store i32 %add8.i.i.i.i, ptr %62, align 4
  %64 = load ptr, ptr %call, align 4
  %65 = ptrtoint ptr %64 to i32
  %66 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i = and i32 %66, -16384
  %67 = inttoptr i32 %and.i.i.i to ptr
  %cpu.i.i = getelementptr inbounds %struct.thread_info, ptr %67, i32 0, i32 3
  %68 = load i32, ptr %cpu.i.i, align 4
  %arrayidx.i.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %68
  %69 = load i32, ptr %arrayidx.i.i, align 4
  %add.i.i = add i32 %69, %65
  %70 = inttoptr i32 %add.i.i to ptr
  %tid7.i.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %70, i32 0, i32 1
  %71 = load volatile i32, ptr %tid7.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !29
  %slab8.i.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %70, i32 0, i32 2
  %72 = load ptr, ptr %slab8.i.i, align 4
  %cmp.i.i = icmp eq ptr %72, %call..i
  br i1 %cmp.i.i, label %if.then11.i.i, label %if.else.i.i, !prof !14

if.else.i.i:                                      ; preds = %cleanup.i.i, %if.end.i.i
  tail call fastcc void @__slab_free(ptr noundef nonnull %call, ptr noundef %call..i, ptr noundef %13, ptr noundef %cond.i.i, i32 noundef %15, i32 noundef %1) #27
  br label %do_slab_free.exit.i

do_slab_free.exit.i:                              ; preds = %if.else.i.i, %cleanup.thread.i.i
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %head.addr.i.i) #24
  br label %slab_free.exit

slab_free.exit:                                   ; preds = %do_slab_free.exit.i, %virt_to_slab.exit
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %head.addr.i)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %tail.addr.i)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %cnt.addr.i)
  br label %return

return:                                           ; preds = %slab_free.exit, %entry
  ret void
}

; Function Attrs: inlinehint nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc ptr @cache_from_obj(ptr noundef readonly %s, ptr noundef %x) unnamed_addr #5 align 64 {
entry:
  %0 = load ptr, ptr @mem_map, align 4
  %1 = ptrtoint ptr %x to i32
  %sub.i.i.i = add i32 %1, 1073741824
  %shr.i.i.i = lshr i32 %sub.i.i.i, 12
  %2 = getelementptr %struct.page, ptr %0, i32 %shr.i.i.i, i32 1
  %3 = load volatile i32, ptr %2, align 4
  %and.i.i.i.i = and i32 %3, 1
  %tobool.not.i.i3.i.i = icmp eq i32 %and.i.i.i.i, 0
  br i1 %tobool.not.i.i3.i.i, label %if.end.i.i.i.i, label %if.then.i.i4.i.i, !prof !14

if.then.i.i4.i.i:                                 ; preds = %entry
  %sub.i.i.i.i = add i32 %3, -1
  br label %virt_to_folio.exit.i.i

if.end.i.i.i.i:                                   ; preds = %entry
  %add.ptr.i.i.i = getelementptr %struct.page, ptr %0, i32 %shr.i.i.i
  %4 = ptrtoint ptr %add.ptr.i.i.i to i32
  br label %virt_to_folio.exit.i.i

virt_to_folio.exit.i.i:                           ; preds = %if.end.i.i.i.i, %if.then.i.i4.i.i
  %retval.0.i.i.i.i = phi i32 [ %sub.i.i.i.i, %if.then.i.i4.i.i ], [ %4, %if.end.i.i.i.i ]
  %5 = inttoptr i32 %retval.0.i.i.i.i to ptr
  %6 = getelementptr inbounds %struct.page, ptr %5, i32 0, i32 1
  %7 = load volatile i32, ptr %6, align 4
  %and.i.i.i.i.i = and i32 %7, 1
  %tobool.not.i.i.i.i = icmp eq i32 %and.i.i.i.i.i, 0
  br i1 %tobool.not.i.i.i.i, label %virt_to_slab.exit.i, label %if.then.i.i.i.i, !prof !14

if.then.i.i.i.i:                                  ; preds = %virt_to_folio.exit.i.i
  tail call void @dump_page(ptr noundef %5, ptr noundef nonnull @.str.29) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 260, 0\0A.popsection", ""() #24, !srcloc !28
  unreachable

virt_to_slab.exit.i:                              ; preds = %virt_to_folio.exit.i.i
  %8 = load volatile i32, ptr %5, align 4
  %9 = and i32 %8, 512
  %tobool.i.not.i.i = icmp eq i32 %9, 0
  %call..i.i = select i1 %tobool.i.not.i.i, ptr null, ptr %5
  %tobool.not.i = icmp eq ptr %call..i.i, null
  %.b43.i = load i1, ptr @virt_to_cache.__already_done, align 1
  %lnot5.i = xor i1 %.b43.i, true
  %10 = select i1 %tobool.not.i, i1 %lnot5.i, i1 false
  br i1 %10, label %if.then.i, label %if.end29.i, !prof !13

if.then.i:                                        ; preds = %virt_to_slab.exit.i
  store i1 true, ptr @virt_to_cache.__already_done, align 1
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.11, i32 noundef 627, i32 noundef 9, ptr noundef nonnull @.str.93, ptr noundef nonnull @__func__.virt_to_cache) #27
  br label %if.end29.i

if.end29.i:                                       ; preds = %if.then.i, %virt_to_slab.exit.i
  br i1 %tobool.not.i, label %if.end23, label %virt_to_cache.exit

virt_to_cache.exit:                               ; preds = %if.end29.i
  %slab_cache.i = getelementptr inbounds %struct.slab, ptr %call..i.i, i32 0, i32 2
  %11 = load ptr, ptr %slab_cache.i, align 4
  %tobool = icmp ne ptr %11, null
  %cmp = icmp ne ptr %11, %s
  %12 = and i1 %tobool, %cmp
  br i1 %12, label %do.end, label %if.end23, !prof !13

do.end:                                           ; preds = %virt_to_cache.exit
  %name = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 18
  %13 = load ptr, ptr %name, align 4
  %name9 = getelementptr inbounds %struct.kmem_cache, ptr %11, i32 0, i32 18
  %14 = load ptr, ptr %name9, align 4
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.11, i32 noundef 663, i32 noundef 9, ptr noundef nonnull @.str.92, ptr noundef nonnull @__func__.cache_from_obj, ptr noundef %13, ptr noundef %14) #27
  tail call void @print_tracking(ptr noundef nonnull %11, ptr noundef %x) #25
  br label %if.end23

if.end23:                                         ; preds = %do.end, %virt_to_cache.exit, %if.end29.i
  %retval.0.i34 = phi ptr [ %11, %virt_to_cache.exit ], [ %11, %do.end ], [ null, %if.end29.i ]
  ret ptr %retval.0.i34
}

; Function Attrs: inlinehint nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc void @trace_kmem_cache_free(i32 noundef %call_site, ptr noundef %ptr, ptr noundef %name) unnamed_addr #5 align 64 {
entry:
  callbr void asm sideeffect "1:\0A\09nop\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr getelementptr inbounds (%struct.tracepoint, ptr @__tracepoint_kmem_cache_free, i32 0, i32 1), ptr blockaddress(@trace_kmem_cache_free, %do.body)) #24
          to label %if.end48 [label %do.body], !srcloc !12

do.body:                                          ; preds = %entry
  %0 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i = and i32 %0, -16384
  %1 = inttoptr i32 %and.i to ptr
  %cpu = getelementptr inbounds %struct.thread_info, ptr %1, i32 0, i32 3
  %2 = load i32, ptr %cpu, align 4
  %3 = load i32, ptr @nr_cpu_ids, align 4
  %cmp.i.i.i.i = icmp ule i32 %3, %2
  %.b37.i.i.i.i = load i1, ptr @cpu_max_bits_warn.__already_done, align 1
  %lnot3.i.i.i.i = xor i1 %.b37.i.i.i.i, true
  %4 = select i1 %cmp.i.i.i.i, i1 %lnot3.i.i.i.i, i1 false
  br i1 %4, label %if.then.i.i.i.i, label %cpu_online.exit, !prof !13

if.then.i.i.i.i:                                  ; preds = %do.body
  store i1 true, ptr @cpu_max_bits_warn.__already_done, align 1
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.24, i32 noundef 108, i32 noundef 9, ptr noundef null) #27
  br label %cpu_online.exit

cpu_online.exit:                                  ; preds = %if.then.i.i.i.i, %do.body
  %div3.i.i.i = lshr i32 %2, 5
  %arrayidx.i.i.i = getelementptr i32, ptr @__cpu_online_mask, i32 %div3.i.i.i
  %5 = load volatile i32, ptr %arrayidx.i.i.i, align 4
  %and.i.i.i75 = and i32 %2, 31
  %6 = shl nuw i32 1, %and.i.i.i75
  %7 = and i32 %5, %6
  %tobool.i.not = icmp eq i32 %7, 0
  br i1 %tobool.i.not, label %if.end69, label %cleanup.thread

cleanup.thread:                                   ; preds = %cpu_online.exit
  %8 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i = and i32 %8, -16384
  %9 = inttoptr i32 %and.i.i.i to ptr
  %preempt_count.i.i = getelementptr inbounds %struct.thread_info, ptr %9, i32 0, i32 1
  %10 = load volatile i32, ptr %preempt_count.i.i, align 4
  %add.i = add i32 %10, 1
  store volatile i32 %add.i, ptr %preempt_count.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !33
  %call42 = tail call i32 @__traceiter_kmem_cache_free(ptr noundef null, i32 noundef %call_site, ptr noundef %ptr, ptr noundef %name) #27
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !34
  %11 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i73 = and i32 %11, -16384
  %12 = inttoptr i32 %and.i.i.i73 to ptr
  %preempt_count.i.i74 = getelementptr inbounds %struct.thread_info, ptr %12, i32 0, i32 1
  %13 = load volatile i32, ptr %preempt_count.i.i74, align 4
  %sub.i = add i32 %13, -1
  store volatile i32 %sub.i, ptr %preempt_count.i.i74, align 4
  br label %if.end48

if.end48:                                         ; preds = %cleanup.thread, %entry
  %14 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i76 = and i32 %14, -16384
  %15 = inttoptr i32 %and.i76 to ptr
  %cpu50 = getelementptr inbounds %struct.thread_info, ptr %15, i32 0, i32 3
  %16 = load i32, ptr %cpu50, align 4
  %17 = load i32, ptr @nr_cpu_ids, align 4
  %cmp.i.i.i.i77 = icmp ule i32 %17, %16
  %.b37.i.i.i.i78 = load i1, ptr @cpu_max_bits_warn.__already_done, align 1
  %lnot3.i.i.i.i79 = xor i1 %.b37.i.i.i.i78, true
  %18 = select i1 %cmp.i.i.i.i77, i1 %lnot3.i.i.i.i79, i1 false
  br i1 %18, label %if.then.i.i.i.i80, label %cpu_online.exit85, !prof !13

if.then.i.i.i.i80:                                ; preds = %if.end48
  store i1 true, ptr @cpu_max_bits_warn.__already_done, align 1
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.24, i32 noundef 108, i32 noundef 9, ptr noundef null) #27
  br label %cpu_online.exit85

cpu_online.exit85:                                ; preds = %if.then.i.i.i.i80, %if.end48
  %div3.i.i.i81 = lshr i32 %16, 5
  %arrayidx.i.i.i82 = getelementptr i32, ptr @__cpu_online_mask, i32 %div3.i.i.i81
  %19 = load volatile i32, ptr %arrayidx.i.i.i82, align 4
  %and.i.i.i83 = and i32 %16, 31
  %20 = shl nuw i32 1, %and.i.i.i83
  %21 = and i32 %19, %20
  %tobool.i84.not = icmp eq i32 %21, 0
  br i1 %tobool.i84.not, label %if.end69, label %if.then52

if.then52:                                        ; preds = %cpu_online.exit85
  %22 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i.i = and i32 %22, -16384
  %23 = inttoptr i32 %and.i.i.i.i to ptr
  %preempt_count.i.i.i = getelementptr inbounds %struct.thread_info, ptr %23, i32 0, i32 1
  %24 = load volatile i32, ptr %preempt_count.i.i.i, align 4
  %add.i.i = add i32 %24, 1
  store volatile i32 %add.i.i, ptr %preempt_count.i.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !24
  %25 = load volatile ptr, ptr getelementptr inbounds (%struct.tracepoint, ptr @__tracepoint_kmem_cache_free, i32 0, i32 7), align 4
  %call58 = tail call i32 @rcu_read_lock_sched_held() #27
  %tobool59.not = icmp eq i32 %call58, 0
  br i1 %tobool59.not, label %land.lhs.true, label %do.end67

land.lhs.true:                                    ; preds = %if.then52
  %call60 = tail call i32 @debug_lockdep_rcu_enabled() #27
  %tobool61.not = icmp eq i32 %call60, 0
  br i1 %tobool61.not, label %do.end67, label %land.lhs.true62

land.lhs.true62:                                  ; preds = %land.lhs.true
  %.b72 = load i1, ptr @trace_kmem_cache_free.__warned, align 1
  br i1 %.b72, label %do.end67, label %if.then64

if.then64:                                        ; preds = %land.lhs.true62
  store i1 true, ptr @trace_kmem_cache_free.__warned, align 1
  tail call void @lockdep_rcu_suspicious(ptr noundef nonnull @.str.22, i32 noundef 158, ptr noundef nonnull @.str.23) #27
  br label %do.end67

do.end67:                                         ; preds = %if.then64, %land.lhs.true62, %land.lhs.true, %if.then52
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !25
  %26 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i.i86 = and i32 %26, -16384
  %27 = inttoptr i32 %and.i.i.i.i86 to ptr
  %preempt_count.i.i.i87 = getelementptr inbounds %struct.thread_info, ptr %27, i32 0, i32 1
  %28 = load volatile i32, ptr %preempt_count.i.i.i87, align 4
  %sub.i.i = add i32 %28, -1
  store volatile i32 %sub.i.i, ptr %preempt_count.i.i.i87, align 4
  br label %if.end69

if.end69:                                         ; preds = %do.end67, %cpu_online.exit85, %cpu_online.exit
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define dso_local void @kmem_cache_free_bulk(ptr noundef %s, i32 noundef %size, ptr nocapture noundef %p) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %head.addr.i.i = alloca ptr, align 4
  %head.addr.i = alloca ptr, align 4
  %tail.addr.i = alloca ptr, align 4
  %cnt.addr.i = alloca i32, align 4
  %tobool.not = icmp eq i32 %size, 0
  br i1 %tobool.not, label %do.end, label %if.end23.critedge, !prof !13

do.end:                                           ; preds = %entry
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.2, i32 noundef 3645, i32 noundef 9, ptr noundef null) #27
  br label %do.end38

if.end23.critedge:                                ; preds = %entry
  tail call fastcc void @memcg_slab_free_hook(ptr noundef %s, ptr noundef %p, i32 noundef %size) #25
  %tobool4.not.i = icmp eq ptr %s, null
  br label %do.body.i

do.body.i:                                        ; preds = %do.body.i.backedge, %if.end23.critedge
  %size.addr.0.i = phi i32 [ %size, %if.end23.critedge ], [ %size.addr.0.i.be, %do.body.i.backedge ]
  %dec.i = add i32 %size.addr.0.i, -1
  %arrayidx.i = getelementptr ptr, ptr %p, i32 %dec.i
  %0 = load ptr, ptr %arrayidx.i, align 4
  %tobool.not.i = icmp eq ptr %0, null
  %tobool2.i = icmp ne i32 %dec.i, 0
  %1 = select i1 %tobool.not.i, i1 %tobool2.i, i1 false
  br i1 %1, label %do.body.i.backedge, label %do.end.i

do.body.i.backedge:                               ; preds = %cleanup, %do.body.i
  %size.addr.0.i.be = phi i32 [ %dec.i, %do.body.i ], [ %retval.0.i63, %cleanup ]
  br label %do.body.i

do.end.i:                                         ; preds = %do.body.i
  %arrayidx.i.le = getelementptr ptr, ptr %p, i32 %dec.i
  br i1 %tobool.not.i, label %do.end38, label %if.end.i

if.end.i:                                         ; preds = %do.end.i
  %2 = load ptr, ptr @mem_map, align 4
  %3 = ptrtoint ptr %0 to i32
  %sub.i.i = add i32 %3, 1073741824
  %shr.i.i = lshr i32 %sub.i.i, 12
  %4 = getelementptr %struct.page, ptr %2, i32 %shr.i.i, i32 1
  %5 = load volatile i32, ptr %4, align 4
  %and.i.i104.i = and i32 %5, 1
  %tobool.not.i.i105.i = icmp eq i32 %and.i.i104.i, 0
  br i1 %tobool.not.i.i105.i, label %if.end.i.i.i, label %if.then.i.i106.i, !prof !14

if.then.i.i106.i:                                 ; preds = %if.end.i
  %sub.i.i.i = add i32 %5, -1
  br label %virt_to_folio.exit.i

if.end.i.i.i:                                     ; preds = %if.end.i
  %add.ptr.i.i = getelementptr %struct.page, ptr %2, i32 %shr.i.i
  %6 = ptrtoint ptr %add.ptr.i.i to i32
  br label %virt_to_folio.exit.i

virt_to_folio.exit.i:                             ; preds = %if.end.i.i.i, %if.then.i.i106.i
  %retval.0.i.i.i = phi i32 [ %sub.i.i.i, %if.then.i.i106.i ], [ %6, %if.end.i.i.i ]
  %7 = inttoptr i32 %retval.0.i.i.i to ptr
  br i1 %tobool4.not.i, label %if.then5.i, label %if.else.i

if.then5.i:                                       ; preds = %virt_to_folio.exit.i
  %8 = getelementptr inbounds %struct.page, ptr %7, i32 0, i32 1
  %9 = load volatile i32, ptr %8, align 4
  %and.i.i.i.i45 = and i32 %9, 1
  %tobool.not.i.i.i = icmp eq i32 %and.i.i.i.i45, 0
  br i1 %tobool.not.i.i.i, label %folio_test_slab.exit.i, label %if.then.i.i.i, !prof !14

if.then.i.i.i:                                    ; preds = %if.then5.i
  %10 = inttoptr i32 %retval.0.i.i.i to ptr
  tail call void @dump_page(ptr noundef %10, ptr noundef nonnull @.str.29) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 260, 0\0A.popsection", ""() #24, !srcloc !28
  unreachable

folio_test_slab.exit.i:                           ; preds = %if.then5.i
  %11 = load volatile i32, ptr %7, align 4
  %12 = and i32 %11, 512
  %tobool.i.not.i = icmp eq i32 %12, 0
  br i1 %tobool.i.not.i, label %if.then10.i, label %if.end12.i, !prof !13

if.then10.i:                                      ; preds = %folio_test_slab.exit.i
  tail call fastcc void @free_large_kmalloc(ptr noundef %7, ptr noundef nonnull %0) #27
  br label %cleanup.sink.split.i

if.end12.i:                                       ; preds = %folio_test_slab.exit.i
  %slab_cache.i = getelementptr inbounds %struct.slab, ptr %7, i32 0, i32 2
  %13 = load ptr, ptr %slab_cache.i, align 4
  br label %if.end16.i

if.else.i:                                        ; preds = %virt_to_folio.exit.i
  %call14.i = tail call fastcc ptr @cache_from_obj(ptr noundef nonnull %s, ptr noundef nonnull %0) #27
  br label %if.end16.i

if.end16.i:                                       ; preds = %if.else.i, %if.end12.i
  %call14.sink.i = phi ptr [ %call14.i, %if.else.i ], [ %13, %if.end12.i ]
  %14 = load ptr, ptr @__kfence_pool, align 4
  %sub.ptr.rhs.cast.i.i = ptrtoint ptr %14 to i32
  %sub.ptr.sub.i.i = sub i32 %3, %sub.ptr.rhs.cast.i.i
  %cmp.i.i46 = icmp ult i32 %sub.ptr.sub.i.i, 2097152
  %tobool.i101.i = icmp ne ptr %14, null
  %15 = select i1 %cmp.i.i46, i1 %tobool.i101.i, i1 false
  br i1 %15, label %if.then18.i, label %set_freepointer.exit.i

if.then18.i:                                      ; preds = %if.end16.i
  %flags.i.i = getelementptr inbounds %struct.kmem_cache, ptr %call14.sink.i, i32 0, i32 1
  %16 = load i32, ptr %flags.i.i, align 4
  %and.i.i.i47 = and i32 %16, 8388608
  %tobool.not.i.i102.i = icmp eq i32 %and.i.i.i47, 0
  br i1 %tobool.not.i.i102.i, label %if.then.i.i103.i, label %kmemleak_free_recursive.exit.i.i

if.then.i.i103.i:                                 ; preds = %if.then18.i
  tail call void @kmemleak_free(ptr noundef nonnull %0) #27
  br label %kmemleak_free_recursive.exit.i.i

kmemleak_free_recursive.exit.i.i:                 ; preds = %if.then.i.i103.i, %if.then18.i
  %object_size.i.i = getelementptr inbounds %struct.kmem_cache, ptr %call14.sink.i, i32 0, i32 4
  %17 = load i32, ptr %object_size.i.i, align 4
  tail call void @debug_check_no_locks_freed(ptr noundef nonnull %0, i32 noundef %17) #27
  %18 = load i32, ptr %flags.i.i, align 4
  %and.i.i = and i32 %18, 4194304
  %tobool.not.i.i48 = icmp eq i32 %and.i.i, 0
  br i1 %tobool.not.i.i48, label %if.then.i.i49, label %slab_free_hook.exit.i

if.then.i.i49:                                    ; preds = %kmemleak_free_recursive.exit.i.i
  %19 = load i32, ptr %object_size.i.i, align 4
  tail call void @debug_check_no_obj_freed(ptr noundef nonnull %0, i32 noundef %19) #27
  br label %slab_free_hook.exit.i

slab_free_hook.exit.i:                            ; preds = %if.then.i.i49, %kmemleak_free_recursive.exit.i.i
  %20 = tail call ptr @llvm.returnaddress(i32 0) #24
  %21 = ptrtoint ptr %20 to i32
  %call1.i.i.i = tail call zeroext i1 @__kasan_slab_free(ptr noundef %call14.sink.i, ptr noundef nonnull %0, i32 noundef %21, i1 noundef zeroext false) #27
  tail call void @__kfence_free(ptr noundef nonnull %0) #27
  br label %cleanup.sink.split.i

set_freepointer.exit.i:                           ; preds = %if.end16.i
  %offset.i.i = getelementptr inbounds %struct.kmem_cache, ptr %call14.sink.i, i32 0, i32 6
  %22 = load i32, ptr %offset.i.i, align 4
  %add.i.i50 = add i32 %22, %3
  %23 = inttoptr i32 %add.i.i50 to ptr
  %random.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %call14.sink.i, i32 0, i32 21
  %24 = load i32, ptr %random.i.i.i, align 4
  %25 = tail call i32 @llvm.bswap.i32(i32 %add.i.i50) #24
  %xor2.i.i.i = xor i32 %25, %24
  %26 = inttoptr i32 %xor2.i.i.i to ptr
  store ptr %26, ptr %23, align 4
  store ptr null, ptr %arrayidx.i.le, align 4
  %tobool26.not131134.i = icmp eq i32 %dec.i, 0
  br i1 %tobool26.not131134.i, label %build_detached_freelist.exit, label %while.body.i

while.body.i:                                     ; preds = %while.cond.backedge.i, %set_freepointer.exit.i
  %df.sroa.15.1 = phi i32 [ %df.sroa.15.2, %while.cond.backedge.i ], [ 1, %set_freepointer.exit.i ]
  %df.sroa.10.1 = phi ptr [ %df.sroa.10.2, %while.cond.backedge.i ], [ %0, %set_freepointer.exit.i ]
  %size.addr.1132.i = phi i32 [ %dec27.i, %while.cond.backedge.i ], [ %dec.i, %set_freepointer.exit.i ]
  %dec27.i = add i32 %size.addr.1132.i, -1
  %arrayidx28.i = getelementptr ptr, ptr %p, i32 %dec27.i
  %27 = load ptr, ptr %arrayidx28.i, align 4
  %tobool29.not.i = icmp eq ptr %27, null
  br i1 %tobool29.not.i, label %while.cond.backedge.i, label %if.end31.i

if.end31.i:                                       ; preds = %while.body.i
  %28 = load ptr, ptr @mem_map, align 4
  %29 = ptrtoint ptr %27 to i32
  %sub.i.i108.i = add i32 %29, 1073741824
  %shr.i.i.i = lshr i32 %sub.i.i108.i, 12
  %30 = getelementptr %struct.page, ptr %28, i32 %shr.i.i.i, i32 1
  %31 = load volatile i32, ptr %30, align 4
  %and.i.i.i109.i = and i32 %31, 1
  %tobool.not.i.i3.i.i = icmp eq i32 %and.i.i.i109.i, 0
  br i1 %tobool.not.i.i3.i.i, label %if.end.i.i.i.i, label %if.then.i.i4.i.i, !prof !14

if.then.i.i4.i.i:                                 ; preds = %if.end31.i
  %sub.i.i.i.i = add i32 %31, -1
  br label %virt_to_folio.exit.i.i

if.end.i.i.i.i:                                   ; preds = %if.end31.i
  %add.ptr.i.i.i = getelementptr %struct.page, ptr %28, i32 %shr.i.i.i
  %32 = ptrtoint ptr %add.ptr.i.i.i to i32
  br label %virt_to_folio.exit.i.i

virt_to_folio.exit.i.i:                           ; preds = %if.end.i.i.i.i, %if.then.i.i4.i.i
  %retval.0.i.i.i.i = phi i32 [ %sub.i.i.i.i, %if.then.i.i4.i.i ], [ %32, %if.end.i.i.i.i ]
  %33 = inttoptr i32 %retval.0.i.i.i.i to ptr
  %34 = getelementptr inbounds %struct.page, ptr %33, i32 0, i32 1
  %35 = load volatile i32, ptr %34, align 4
  %and.i.i.i.i.i51 = and i32 %35, 1
  %tobool.not.i.i.i.i = icmp eq i32 %and.i.i.i.i.i51, 0
  br i1 %tobool.not.i.i.i.i, label %virt_to_slab.exit.i, label %if.then.i.i.i.i, !prof !14

if.then.i.i.i.i:                                  ; preds = %virt_to_folio.exit.i.i.2, %virt_to_folio.exit.i.i.1, %virt_to_folio.exit.i.i
  %retval.0.i.i.i.i.lcssa.sink = phi i32 [ %retval.0.i.i.i.i.2, %virt_to_folio.exit.i.i.2 ], [ %retval.0.i.i.i.i.1, %virt_to_folio.exit.i.i.1 ], [ %retval.0.i.i.i.i, %virt_to_folio.exit.i.i ]
  %36 = inttoptr i32 %retval.0.i.i.i.i.lcssa.sink to ptr
  tail call void @dump_page(ptr noundef %36, ptr noundef nonnull @.str.29) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 260, 0\0A.popsection", ""() #24, !srcloc !28
  unreachable

virt_to_slab.exit.i:                              ; preds = %virt_to_folio.exit.i.i
  %37 = load volatile i32, ptr %33, align 4
  %38 = and i32 %37, 512
  %tobool.i.not.i.i = icmp eq i32 %38, 0
  %call..i.i = select i1 %tobool.i.not.i.i, ptr null, ptr %33
  %cmp.i = icmp eq ptr %call..i.i, %7
  br i1 %cmp.i, label %if.then34.i, label %if.end40.i

if.then34.i:                                      ; preds = %virt_to_slab.exit.i
  %cmp.i110.i = icmp eq ptr %27, %df.sroa.10.1
  br i1 %cmp.i110.i, label %do.body2.i111.i, label %set_freepointer.exit116.i, !prof !13

do.body2.i111.i:                                  ; preds = %if.then34.i.2, %if.then34.i.1, %if.then34.i
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slub.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 379, 0\0A.popsection", ""() #24, !srcloc !30
  unreachable

set_freepointer.exit116.i:                        ; preds = %if.then34.i
  %39 = load i32, ptr %offset.i.i, align 4
  %add.i113.i = add i32 %39, %29
  %40 = inttoptr i32 %add.i113.i to ptr
  %41 = ptrtoint ptr %df.sroa.10.1 to i32
  %42 = load i32, ptr %random.i.i.i, align 4
  %43 = tail call i32 @llvm.bswap.i32(i32 %add.i113.i) #24
  %xor.i.i.i = xor i32 %42, %41
  %xor2.i.i115.i = xor i32 %xor.i.i.i, %43
  %44 = inttoptr i32 %xor2.i.i115.i to ptr
  store ptr %44, ptr %40, align 4
  %inc.i = add i32 %df.sroa.15.1, 1
  store ptr null, ptr %arrayidx28.i, align 4
  br label %while.cond.backedge.i

while.cond.backedge.i:                            ; preds = %set_freepointer.exit116.i, %while.body.i
  %df.sroa.15.2 = phi i32 [ %df.sroa.15.1, %while.body.i ], [ %inc.i, %set_freepointer.exit116.i ]
  %df.sroa.10.2 = phi ptr [ %df.sroa.10.1, %while.body.i ], [ %27, %set_freepointer.exit116.i ]
  %tobool26.not.i = icmp eq i32 %dec27.i, 0
  br i1 %tobool26.not.i, label %build_detached_freelist.exit, label %while.body.i

if.end40.i:                                       ; preds = %virt_to_slab.exit.i
  %tobool26.not131.i = icmp eq i32 %dec27.i, 0
  br i1 %tobool26.not131.i, label %build_detached_freelist.exit, label %while.body.i.1

while.body.i.1:                                   ; preds = %while.cond.backedge.i.1, %if.end40.i
  %df.sroa.15.1.1 = phi i32 [ %df.sroa.15.2.1, %while.cond.backedge.i.1 ], [ %df.sroa.15.1, %if.end40.i ]
  %df.sroa.10.1.1 = phi ptr [ %df.sroa.10.2.1, %while.cond.backedge.i.1 ], [ %df.sroa.10.1, %if.end40.i ]
  %size.addr.1132.i.1 = phi i32 [ %dec27.i.1, %while.cond.backedge.i.1 ], [ %dec27.i, %if.end40.i ]
  %dec27.i.1 = add i32 %size.addr.1132.i.1, -1
  %arrayidx28.i.1 = getelementptr ptr, ptr %p, i32 %dec27.i.1
  %45 = load ptr, ptr %arrayidx28.i.1, align 4
  %tobool29.not.i.1 = icmp eq ptr %45, null
  br i1 %tobool29.not.i.1, label %while.cond.backedge.i.1, label %if.end31.i.1

if.end31.i.1:                                     ; preds = %while.body.i.1
  %46 = load ptr, ptr @mem_map, align 4
  %47 = ptrtoint ptr %45 to i32
  %sub.i.i108.i.1 = add i32 %47, 1073741824
  %shr.i.i.i.1 = lshr i32 %sub.i.i108.i.1, 12
  %48 = getelementptr %struct.page, ptr %46, i32 %shr.i.i.i.1, i32 1
  %49 = load volatile i32, ptr %48, align 4
  %and.i.i.i109.i.1 = and i32 %49, 1
  %tobool.not.i.i3.i.i.1 = icmp eq i32 %and.i.i.i109.i.1, 0
  br i1 %tobool.not.i.i3.i.i.1, label %if.end.i.i.i.i.1, label %if.then.i.i4.i.i.1, !prof !14

if.then.i.i4.i.i.1:                               ; preds = %if.end31.i.1
  %sub.i.i.i.i.1 = add i32 %49, -1
  br label %virt_to_folio.exit.i.i.1

if.end.i.i.i.i.1:                                 ; preds = %if.end31.i.1
  %add.ptr.i.i.i.1 = getelementptr %struct.page, ptr %46, i32 %shr.i.i.i.1
  %50 = ptrtoint ptr %add.ptr.i.i.i.1 to i32
  br label %virt_to_folio.exit.i.i.1

virt_to_folio.exit.i.i.1:                         ; preds = %if.end.i.i.i.i.1, %if.then.i.i4.i.i.1
  %retval.0.i.i.i.i.1 = phi i32 [ %sub.i.i.i.i.1, %if.then.i.i4.i.i.1 ], [ %50, %if.end.i.i.i.i.1 ]
  %51 = inttoptr i32 %retval.0.i.i.i.i.1 to ptr
  %52 = getelementptr inbounds %struct.page, ptr %51, i32 0, i32 1
  %53 = load volatile i32, ptr %52, align 4
  %and.i.i.i.i.i51.1 = and i32 %53, 1
  %tobool.not.i.i.i.i.1 = icmp eq i32 %and.i.i.i.i.i51.1, 0
  br i1 %tobool.not.i.i.i.i.1, label %virt_to_slab.exit.i.1, label %if.then.i.i.i.i, !prof !14

virt_to_slab.exit.i.1:                            ; preds = %virt_to_folio.exit.i.i.1
  %54 = load volatile i32, ptr %51, align 4
  %55 = and i32 %54, 512
  %tobool.i.not.i.i.1 = icmp eq i32 %55, 0
  %call..i.i.1 = select i1 %tobool.i.not.i.i.1, ptr null, ptr %51
  %cmp.i.1 = icmp eq ptr %call..i.i.1, %7
  br i1 %cmp.i.1, label %if.then34.i.1, label %if.end40.i.1

if.end40.i.1:                                     ; preds = %virt_to_slab.exit.i.1
  %tobool45.not.i.1 = icmp eq i32 %size.addr.1132.i, 0
  %spec.select.i.1 = select i1 %tobool45.not.i.1, i32 %size.addr.1132.i.1, i32 %size.addr.1132.i
  %tobool26.not131.i.1 = icmp eq i32 %dec27.i.1, 0
  br i1 %tobool26.not131.i.1, label %build_detached_freelist.exit, label %while.body.i.2

if.then34.i.1:                                    ; preds = %virt_to_slab.exit.i.1
  %cmp.i110.i.1 = icmp eq ptr %45, %df.sroa.10.1.1
  br i1 %cmp.i110.i.1, label %do.body2.i111.i, label %set_freepointer.exit116.i.1, !prof !13

set_freepointer.exit116.i.1:                      ; preds = %if.then34.i.1
  %56 = load i32, ptr %offset.i.i, align 4
  %add.i113.i.1 = add i32 %56, %47
  %57 = inttoptr i32 %add.i113.i.1 to ptr
  %58 = ptrtoint ptr %df.sroa.10.1.1 to i32
  %59 = load i32, ptr %random.i.i.i, align 4
  %60 = tail call i32 @llvm.bswap.i32(i32 %add.i113.i.1) #24
  %xor.i.i.i.1 = xor i32 %59, %58
  %xor2.i.i115.i.1 = xor i32 %xor.i.i.i.1, %60
  %61 = inttoptr i32 %xor2.i.i115.i.1 to ptr
  store ptr %61, ptr %57, align 4
  %inc.i.1 = add i32 %df.sroa.15.1.1, 1
  store ptr null, ptr %arrayidx28.i.1, align 4
  br label %while.cond.backedge.i.1

while.cond.backedge.i.1:                          ; preds = %set_freepointer.exit116.i.1, %while.body.i.1
  %df.sroa.15.2.1 = phi i32 [ %df.sroa.15.1.1, %while.body.i.1 ], [ %inc.i.1, %set_freepointer.exit116.i.1 ]
  %df.sroa.10.2.1 = phi ptr [ %df.sroa.10.1.1, %while.body.i.1 ], [ %45, %set_freepointer.exit116.i.1 ]
  %tobool26.not.i.1 = icmp eq i32 %dec27.i.1, 0
  br i1 %tobool26.not.i.1, label %build_detached_freelist.exit, label %while.body.i.1

while.body.i.2:                                   ; preds = %while.cond.backedge.i.2, %if.end40.i.1
  %df.sroa.15.1.2 = phi i32 [ %df.sroa.15.2.2, %while.cond.backedge.i.2 ], [ %df.sroa.15.1.1, %if.end40.i.1 ]
  %df.sroa.10.1.2 = phi ptr [ %df.sroa.10.2.2, %while.cond.backedge.i.2 ], [ %df.sroa.10.1.1, %if.end40.i.1 ]
  %size.addr.1132.i.2 = phi i32 [ %dec27.i.2, %while.cond.backedge.i.2 ], [ %dec27.i.1, %if.end40.i.1 ]
  %dec27.i.2 = add i32 %size.addr.1132.i.2, -1
  %arrayidx28.i.2 = getelementptr ptr, ptr %p, i32 %dec27.i.2
  %62 = load ptr, ptr %arrayidx28.i.2, align 4
  %tobool29.not.i.2 = icmp eq ptr %62, null
  br i1 %tobool29.not.i.2, label %while.cond.backedge.i.2, label %if.end31.i.2

if.end31.i.2:                                     ; preds = %while.body.i.2
  %63 = load ptr, ptr @mem_map, align 4
  %64 = ptrtoint ptr %62 to i32
  %sub.i.i108.i.2 = add i32 %64, 1073741824
  %shr.i.i.i.2 = lshr i32 %sub.i.i108.i.2, 12
  %65 = getelementptr %struct.page, ptr %63, i32 %shr.i.i.i.2, i32 1
  %66 = load volatile i32, ptr %65, align 4
  %and.i.i.i109.i.2 = and i32 %66, 1
  %tobool.not.i.i3.i.i.2 = icmp eq i32 %and.i.i.i109.i.2, 0
  br i1 %tobool.not.i.i3.i.i.2, label %if.end.i.i.i.i.2, label %if.then.i.i4.i.i.2, !prof !14

if.then.i.i4.i.i.2:                               ; preds = %if.end31.i.2
  %sub.i.i.i.i.2 = add i32 %66, -1
  br label %virt_to_folio.exit.i.i.2

if.end.i.i.i.i.2:                                 ; preds = %if.end31.i.2
  %add.ptr.i.i.i.2 = getelementptr %struct.page, ptr %63, i32 %shr.i.i.i.2
  %67 = ptrtoint ptr %add.ptr.i.i.i.2 to i32
  br label %virt_to_folio.exit.i.i.2

virt_to_folio.exit.i.i.2:                         ; preds = %if.end.i.i.i.i.2, %if.then.i.i4.i.i.2
  %retval.0.i.i.i.i.2 = phi i32 [ %sub.i.i.i.i.2, %if.then.i.i4.i.i.2 ], [ %67, %if.end.i.i.i.i.2 ]
  %68 = inttoptr i32 %retval.0.i.i.i.i.2 to ptr
  %69 = getelementptr inbounds %struct.page, ptr %68, i32 0, i32 1
  %70 = load volatile i32, ptr %69, align 4
  %and.i.i.i.i.i51.2 = and i32 %70, 1
  %tobool.not.i.i.i.i.2 = icmp eq i32 %and.i.i.i.i.i51.2, 0
  br i1 %tobool.not.i.i.i.i.2, label %virt_to_slab.exit.i.2, label %if.then.i.i.i.i, !prof !14

virt_to_slab.exit.i.2:                            ; preds = %virt_to_folio.exit.i.i.2
  %71 = load volatile i32, ptr %68, align 4
  %72 = and i32 %71, 512
  %tobool.i.not.i.i.2 = icmp eq i32 %72, 0
  %call..i.i.2 = select i1 %tobool.i.not.i.i.2, ptr null, ptr %68
  %cmp.i.2 = icmp eq ptr %call..i.i.2, %7
  br i1 %cmp.i.2, label %if.then34.i.2, label %build_detached_freelist.exit

if.then34.i.2:                                    ; preds = %virt_to_slab.exit.i.2
  %cmp.i110.i.2 = icmp eq ptr %62, %df.sroa.10.1.2
  br i1 %cmp.i110.i.2, label %do.body2.i111.i, label %set_freepointer.exit116.i.2, !prof !13

set_freepointer.exit116.i.2:                      ; preds = %if.then34.i.2
  %73 = load i32, ptr %offset.i.i, align 4
  %add.i113.i.2 = add i32 %73, %64
  %74 = inttoptr i32 %add.i113.i.2 to ptr
  %75 = ptrtoint ptr %df.sroa.10.1.2 to i32
  %76 = load i32, ptr %random.i.i.i, align 4
  %77 = tail call i32 @llvm.bswap.i32(i32 %add.i113.i.2) #24
  %xor.i.i.i.2 = xor i32 %76, %75
  %xor2.i.i115.i.2 = xor i32 %xor.i.i.i.2, %77
  %78 = inttoptr i32 %xor2.i.i115.i.2 to ptr
  store ptr %78, ptr %74, align 4
  %inc.i.2 = add i32 %df.sroa.15.1.2, 1
  store ptr null, ptr %arrayidx28.i.2, align 4
  br label %while.cond.backedge.i.2

while.cond.backedge.i.2:                          ; preds = %set_freepointer.exit116.i.2, %while.body.i.2
  %df.sroa.15.2.2 = phi i32 [ %df.sroa.15.1.2, %while.body.i.2 ], [ %inc.i.2, %set_freepointer.exit116.i.2 ]
  %df.sroa.10.2.2 = phi ptr [ %df.sroa.10.1.2, %while.body.i.2 ], [ %62, %set_freepointer.exit116.i.2 ]
  %tobool26.not.i.2 = icmp eq i32 %dec27.i.2, 0
  br i1 %tobool26.not.i.2, label %build_detached_freelist.exit, label %while.body.i.2

cleanup.sink.split.i:                             ; preds = %slab_free_hook.exit.i, %if.then10.i
  store ptr null, ptr %arrayidx.i.le, align 4
  br label %cleanup

build_detached_freelist.exit:                     ; preds = %while.cond.backedge.i.2, %virt_to_slab.exit.i.2, %while.cond.backedge.i.1, %if.end40.i.1, %if.end40.i, %while.cond.backedge.i, %set_freepointer.exit.i
  %df.sroa.15.3 = phi i32 [ 1, %set_freepointer.exit.i ], [ %df.sroa.15.1, %if.end40.i ], [ %df.sroa.15.1.1, %if.end40.i.1 ], [ %df.sroa.15.1.2, %virt_to_slab.exit.i.2 ], [ %df.sroa.15.2.2, %while.cond.backedge.i.2 ], [ %df.sroa.15.2.1, %while.cond.backedge.i.1 ], [ %df.sroa.15.2, %while.cond.backedge.i ]
  %df.sroa.10.3 = phi ptr [ %0, %set_freepointer.exit.i ], [ %df.sroa.10.1, %if.end40.i ], [ %df.sroa.10.1.1, %if.end40.i.1 ], [ %df.sroa.10.1.2, %virt_to_slab.exit.i.2 ], [ %df.sroa.10.2.2, %while.cond.backedge.i.2 ], [ %df.sroa.10.2.1, %while.cond.backedge.i.1 ], [ %df.sroa.10.2, %while.cond.backedge.i ]
  %retval.0.i = phi i32 [ 0, %set_freepointer.exit.i ], [ 1, %if.end40.i ], [ %spec.select.i.1, %if.end40.i.1 ], [ %spec.select.i.1, %while.cond.backedge.i.2 ], [ %spec.select.i.1, %virt_to_slab.exit.i.2 ], [ %size.addr.1132.i, %while.cond.backedge.i.1 ], [ 0, %while.cond.backedge.i ]
  %tobool25.not = icmp eq i32 %retval.0.i.i.i, 0
  br i1 %tobool25.not, label %cleanup, label %if.end27

if.end27:                                         ; preds = %build_detached_freelist.exit
  %79 = tail call ptr @llvm.returnaddress(i32 0)
  %80 = ptrtoint ptr %79 to i32
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %head.addr.i)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %tail.addr.i)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %cnt.addr.i)
  store ptr %df.sroa.10.3, ptr %head.addr.i, align 4
  store ptr %0, ptr %tail.addr.i, align 4
  store i32 %df.sroa.15.3, ptr %cnt.addr.i, align 4
  %call.i = call fastcc zeroext i1 @slab_free_freelist_hook(ptr noundef %call14.sink.i, ptr noundef nonnull %head.addr.i, ptr noundef nonnull %tail.addr.i, ptr noundef nonnull %cnt.addr.i) #27
  br i1 %call.i, label %if.then.i, label %slab_free.exit

if.then.i:                                        ; preds = %if.end27
  %81 = load ptr, ptr %head.addr.i, align 4
  %82 = load ptr, ptr %tail.addr.i, align 4
  %83 = load i32, ptr %cnt.addr.i, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %head.addr.i.i) #24
  store ptr %81, ptr %head.addr.i.i, align 4
  %tobool.not.i.i = icmp eq ptr %82, null
  %cond.i.i = select i1 %tobool.not.i.i, ptr %81, ptr %82
  br i1 %tobool.not.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %if.then.i
  call fastcc void @memcg_slab_free_hook(ptr noundef %call14.sink.i, ptr noundef nonnull %head.addr.i.i, i32 noundef 1) #27
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %if.then.i
  %84 = load ptr, ptr %call14.sink.i, align 4
  %85 = ptrtoint ptr %84 to i32
  %86 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i173.i.i = and i32 %86, -16384
  %87 = inttoptr i32 %and.i173.i.i to ptr
  %cpu174.i.i = getelementptr inbounds %struct.thread_info, ptr %87, i32 0, i32 3
  %88 = load i32, ptr %cpu174.i.i, align 4
  %arrayidx175.i.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %88
  %89 = load i32, ptr %arrayidx175.i.i, align 4
  %add176.i.i = add i32 %89, %85
  %90 = inttoptr i32 %add176.i.i to ptr
  %tid7177.i.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %90, i32 0, i32 1
  %91 = load volatile i32, ptr %tid7177.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !29
  %slab8178.i.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %90, i32 0, i32 2
  %92 = load ptr, ptr %slab8178.i.i, align 4
  %cmp179.i.i = icmp eq ptr %92, %7
  br i1 %cmp179.i.i, label %if.then11.lr.ph.i.i, label %if.else.i.i, !prof !14

if.then11.lr.ph.i.i:                              ; preds = %if.end.i.i
  %93 = ptrtoint ptr %cond.i.i to i32
  br label %if.then11.i.i

if.then11.i.i:                                    ; preds = %cleanup.i.i, %if.then11.lr.ph.i.i
  %94 = phi i32 [ %91, %if.then11.lr.ph.i.i ], [ %139, %cleanup.i.i ]
  %95 = phi ptr [ %90, %if.then11.lr.ph.i.i ], [ %138, %cleanup.i.i ]
  %cpu180.i.i = phi ptr [ %cpu174.i.i, %if.then11.lr.ph.i.i ], [ %cpu.i.i, %cleanup.i.i ]
  %96 = load volatile ptr, ptr %95, align 4
  %cmp.i.i.i = icmp eq ptr %cond.i.i, %96
  br i1 %cmp.i.i.i, label %do.body2.i.i.i, label %set_freepointer.exit.i.i, !prof !13

do.body2.i.i.i:                                   ; preds = %if.then11.i.i
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slub.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 379, 0\0A.popsection", ""() #24, !srcloc !30
  unreachable

set_freepointer.exit.i.i:                         ; preds = %if.then11.i.i
  %97 = load i32, ptr %offset.i.i, align 4
  %add.i.i.i = add i32 %97, %93
  %98 = inttoptr i32 %add.i.i.i to ptr
  %99 = ptrtoint ptr %96 to i32
  %100 = load i32, ptr %random.i.i.i, align 4
  %101 = tail call i32 @llvm.bswap.i32(i32 %add.i.i.i) #24
  %xor.i.i.i.i = xor i32 %100, %99
  %xor2.i.i.i.i = xor i32 %xor.i.i.i.i, %101
  %102 = inttoptr i32 %xor2.i.i.i.i to ptr
  store ptr %102, ptr %98, align 4
  %103 = load ptr, ptr %call14.sink.i, align 4
  %104 = ptrtoint ptr %103 to i32
  %rem.i.i = and i32 %104, 7
  %tobool27.not.i.i = icmp eq i32 %rem.i.i, 0
  br i1 %tobool27.not.i.i, label %do.body44.i.i, label %do.body35.i.i, !prof !14

do.body35.i.i:                                    ; preds = %set_freepointer.exit.i.i
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slub.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 3465, 0\0A.popsection", ""() #24, !srcloc !31
  unreachable

do.body44.i.i:                                    ; preds = %set_freepointer.exit.i.i
  %tid46.i.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %103, i32 0, i32 1
  %105 = ptrtoint ptr %tid46.i.i to i32
  %add49.i.i = add nuw i32 %104, 4
  %cmp50.not.i.i = icmp eq i32 %add49.i.i, %105
  br i1 %cmp50.not.i.i, label %do.end66.i.i, label %do.body58.i.i, !prof !14

do.body58.i.i:                                    ; preds = %do.body44.i.i
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slub.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 3465, 0\0A.popsection", ""() #24, !srcloc !32
  unreachable

do.end66.i.i:                                     ; preds = %do.body44.i.i
  %106 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ arch_local_irq_save\0A\09cpsid\09i", "=r,~{memory},~{cc}"() #24, !srcloc !19
  %107 = load ptr, ptr %call14.sink.i, align 4
  %108 = ptrtoint ptr %107 to i32
  %109 = load i32, ptr %cpu180.i.i, align 4
  %arrayidx84.i.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %109
  %110 = load i32, ptr %arrayidx84.i.i, align 4
  %add85.i.i = add i32 %110, %108
  %111 = inttoptr i32 %add85.i.i to ptr
  %tid93.i.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %107, i32 0, i32 1
  %112 = ptrtoint ptr %tid93.i.i to i32
  %add98.i.i = add i32 %110, %112
  %113 = inttoptr i32 %add98.i.i to ptr
  %114 = load ptr, ptr %111, align 4
  %cmp100.i.i = icmp eq ptr %114, %96
  br i1 %cmp100.i.i, label %land.lhs.true.i.i, label %if.end106.i.i

land.lhs.true.i.i:                                ; preds = %do.end66.i.i
  %115 = load i32, ptr %113, align 4
  %cmp102.i.i = icmp eq i32 %115, %94
  br i1 %cmp102.i.i, label %if.then104.i.i, label %if.end106.i.i

if.then104.i.i:                                   ; preds = %land.lhs.true.i.i
  store ptr %81, ptr %111, align 4
  %add.i168.i.i = add i32 %94, 1
  store i32 %add.i168.i.i, ptr %113, align 4
  br label %if.end106.i.i

if.end106.i.i:                                    ; preds = %if.then104.i.i, %land.lhs.true.i.i, %do.end66.i.i
  %tobool132.not.i.i = phi i1 [ false, %if.then104.i.i ], [ true, %land.lhs.true.i.i ], [ true, %do.end66.i.i ]
  %116 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ local_save_flags", "=r,~{memory},~{cc}"() #24, !srcloc !20
  %and.i.i.i.i = and i32 %116, 128
  %tobool116.not.i.i = icmp eq i32 %and.i.i.i.i, 0
  br i1 %tobool116.not.i.i, label %if.then125.i.i, label %do.end128.i.i, !prof !13

if.then125.i.i:                                   ; preds = %if.end106.i.i
  tail call void @warn_bogus_irq_restore() #27
  br label %do.end128.i.i

do.end128.i.i:                                    ; preds = %if.then125.i.i, %if.end106.i.i
  tail call void asm sideeffect "\09msr\09cpsr_c, $0\09@ local_irq_restore", "r,~{memory},~{cc}"(i32 %106) #24, !srcloc !21
  %117 = load ptr, ptr %call14.sink.i, align 4
  br i1 %tobool132.not.i.i, label %cleanup.i.i, label %cleanup.thread.i.i, !prof !13

cleanup.thread.i.i:                               ; preds = %do.end128.i.i
  %arrayidx.i.i.i = getelementptr %struct.kmem_cache_cpu, ptr %117, i32 0, i32 5, i32 2
  %118 = ptrtoint ptr %arrayidx.i.i.i to i32
  %119 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i169.i.i = and i32 %119, -16384
  %120 = inttoptr i32 %and.i.i169.i.i to ptr
  %cpu.i.i.i = getelementptr inbounds %struct.thread_info, ptr %120, i32 0, i32 3
  %121 = load i32, ptr %cpu.i.i.i, align 4
  %arrayidx7.i.i.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %121
  %122 = load i32, ptr %arrayidx7.i.i.i, align 4
  %add.i170.i.i = add i32 %122, %118
  %123 = inttoptr i32 %add.i170.i.i to ptr
  %124 = load i32, ptr %123, align 4
  %add8.i.i.i = add i32 %124, 1
  store i32 %add8.i.i.i, ptr %123, align 4
  br label %do_slab_free.exit.i

cleanup.i.i:                                      ; preds = %do.end128.i.i
  %arrayidx.i.i.i.i = getelementptr %struct.kmem_cache_cpu, ptr %117, i32 0, i32 5, i32 20
  %125 = ptrtoint ptr %arrayidx.i.i.i.i to i32
  %126 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i.i.i = and i32 %126, -16384
  %127 = inttoptr i32 %and.i.i.i.i.i to ptr
  %cpu.i.i.i.i = getelementptr inbounds %struct.thread_info, ptr %127, i32 0, i32 3
  %128 = load i32, ptr %cpu.i.i.i.i, align 4
  %arrayidx7.i.i.i.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %128
  %129 = load i32, ptr %arrayidx7.i.i.i.i, align 4
  %add.i.i.i.i = add i32 %129, %125
  %130 = inttoptr i32 %add.i.i.i.i to ptr
  %131 = load i32, ptr %130, align 4
  %add8.i.i.i.i = add i32 %131, 1
  store i32 %add8.i.i.i.i, ptr %130, align 4
  %132 = load ptr, ptr %call14.sink.i, align 4
  %133 = ptrtoint ptr %132 to i32
  %134 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i = and i32 %134, -16384
  %135 = inttoptr i32 %and.i.i.i to ptr
  %cpu.i.i = getelementptr inbounds %struct.thread_info, ptr %135, i32 0, i32 3
  %136 = load i32, ptr %cpu.i.i, align 4
  %arrayidx.i.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %136
  %137 = load i32, ptr %arrayidx.i.i, align 4
  %add.i.i = add i32 %137, %133
  %138 = inttoptr i32 %add.i.i to ptr
  %tid7.i.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %138, i32 0, i32 1
  %139 = load volatile i32, ptr %tid7.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !29
  %slab8.i.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %138, i32 0, i32 2
  %140 = load ptr, ptr %slab8.i.i, align 4
  %cmp.i.i = icmp eq ptr %140, %7
  br i1 %cmp.i.i, label %if.then11.i.i, label %if.else.i.i, !prof !14

if.else.i.i:                                      ; preds = %cleanup.i.i, %if.end.i.i
  tail call fastcc void @__slab_free(ptr noundef %call14.sink.i, ptr noundef nonnull %7, ptr noundef %81, ptr noundef %cond.i.i, i32 noundef %83, i32 noundef %80) #27
  br label %do_slab_free.exit.i

do_slab_free.exit.i:                              ; preds = %if.else.i.i, %cleanup.thread.i.i
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %head.addr.i.i) #24
  br label %slab_free.exit

slab_free.exit:                                   ; preds = %do_slab_free.exit.i, %if.end27
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %head.addr.i)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %tail.addr.i)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %cnt.addr.i)
  br label %cleanup

cleanup:                                          ; preds = %slab_free.exit, %build_detached_freelist.exit, %cleanup.sink.split.i
  %retval.0.i63 = phi i32 [ %retval.0.i, %build_detached_freelist.exit ], [ %retval.0.i, %slab_free.exit ], [ %dec.i, %cleanup.sink.split.i ]
  %tobool31.not = icmp eq i32 %retval.0.i63, 0
  br i1 %tobool31.not, label %do.end38, label %do.body.i.backedge, !prof !13

do.end38:                                         ; preds = %cleanup, %do.end.i, %do.end
  ret void
}

; Function Attrs: null_pointer_is_valid
declare dso_local void @warn_slowpath_fmt(ptr noundef, i32 noundef, i32 noundef, ptr noundef, ...) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc void @memcg_slab_free_hook(ptr noundef readonly %s_orig, ptr nocapture noundef readonly %p, i32 noundef %objects) unnamed_addr #5 align 64 {
entry:
  callbr void asm sideeffect "1:\0A\09b ${1:l}\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr getelementptr inbounds (i8, ptr @memcg_kmem_enabled_key, i32 1), ptr blockaddress(@memcg_slab_free_hook, %cleanup)) #24
          to label %for.cond [label %cleanup], !srcloc !10

for.cond:                                         ; preds = %for.inc, %entry
  %i.0 = phi i32 [ %inc, %for.inc ], [ 0, %entry ]
  %cmp = icmp slt i32 %i.0, %objects
  br i1 %cmp, label %for.body, label %cleanup

for.body:                                         ; preds = %for.cond
  %arrayidx = getelementptr ptr, ptr %p, i32 %i.0
  %0 = load ptr, ptr %arrayidx, align 4
  %tobool.not = icmp eq ptr %0, null
  br i1 %tobool.not, label %for.inc, label %if.end5, !prof !13

if.end5:                                          ; preds = %for.body
  %1 = load ptr, ptr @mem_map, align 4
  %2 = ptrtoint ptr %0 to i32
  %sub.i.i = add i32 %2, 1073741824
  %shr.i.i = lshr i32 %sub.i.i, 12
  %3 = getelementptr %struct.page, ptr %1, i32 %shr.i.i, i32 1
  %4 = load volatile i32, ptr %3, align 4
  %and.i.i.i = and i32 %4, 1
  %tobool.not.i.i3.i = icmp eq i32 %and.i.i.i, 0
  br i1 %tobool.not.i.i3.i, label %if.end.i.i.i, label %if.then.i.i4.i, !prof !14

if.then.i.i4.i:                                   ; preds = %if.end5
  %sub.i.i.i = add i32 %4, -1
  br label %virt_to_folio.exit.i

if.end.i.i.i:                                     ; preds = %if.end5
  %add.ptr.i.i = getelementptr %struct.page, ptr %1, i32 %shr.i.i
  %5 = ptrtoint ptr %add.ptr.i.i to i32
  br label %virt_to_folio.exit.i

virt_to_folio.exit.i:                             ; preds = %if.end.i.i.i, %if.then.i.i4.i
  %retval.0.i.i.i = phi i32 [ %sub.i.i.i, %if.then.i.i4.i ], [ %5, %if.end.i.i.i ]
  %6 = inttoptr i32 %retval.0.i.i.i to ptr
  %7 = getelementptr inbounds %struct.page, ptr %6, i32 0, i32 1
  %8 = load volatile i32, ptr %7, align 4
  %and.i.i.i.i = and i32 %8, 1
  %tobool.not.i.i.i = icmp eq i32 %and.i.i.i.i, 0
  br i1 %tobool.not.i.i.i, label %virt_to_slab.exit, label %if.then.i.i.i, !prof !14

if.then.i.i.i:                                    ; preds = %virt_to_folio.exit.i
  %9 = inttoptr i32 %retval.0.i.i.i to ptr
  tail call void @dump_page(ptr noundef %9, ptr noundef nonnull @.str.29) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 260, 0\0A.popsection", ""() #24, !srcloc !28
  unreachable

virt_to_slab.exit:                                ; preds = %virt_to_folio.exit.i
  %10 = load volatile i32, ptr %6, align 4
  %11 = and i32 %10, 512
  %tobool.i.not.i = icmp eq i32 %11, 0
  %tobool8.not59 = icmp eq i32 %retval.0.i.i.i, 0
  %tobool8.not = select i1 %tobool.i.not.i, i1 true, i1 %tobool8.not59
  br i1 %tobool8.not, label %for.inc, label %if.end10

if.end10:                                         ; preds = %virt_to_slab.exit
  %memcg_data1.i = getelementptr inbounds %struct.slab, ptr %6, i32 0, i32 7
  %12 = load volatile i32, ptr %memcg_data1.i, align 4
  %tobool.i = icmp ne i32 %12, 0
  %and.i = and i32 %12, 1
  %tobool3.not.i = icmp eq i32 %and.i, 0
  %13 = and i1 %tobool.i, %tobool3.not.i
  br i1 %13, label %if.then.i, label %do.body15.i, !prof !13

if.then.i:                                        ; preds = %if.end10
  %14 = inttoptr i32 %retval.0.i.i.i to ptr
  tail call void @dump_page(ptr noundef nonnull %14, ptr noundef nonnull @.str.90) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slab.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 445, 0\0A.popsection", ""() #24, !srcloc !35
  unreachable

do.body15.i:                                      ; preds = %if.end10
  %and16.i = and i32 %12, 2
  %tobool17.not.i = icmp eq i32 %and16.i, 0
  br i1 %tobool17.not.i, label %slab_objcgs.exit, label %if.then24.i, !prof !14

if.then24.i:                                      ; preds = %do.body15.i
  %15 = inttoptr i32 %retval.0.i.i.i to ptr
  tail call void @dump_page(ptr noundef nonnull %15, ptr noundef nonnull @.str.91) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slab.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 446, 0\0A.popsection", ""() #24, !srcloc !36
  unreachable

slab_objcgs.exit:                                 ; preds = %do.body15.i
  %and35.i = and i32 %12, -4
  %16 = inttoptr i32 %and35.i to ptr
  %tobool12.not = icmp eq i32 %and35.i, 0
  br i1 %tobool12.not, label %for.inc, label %if.end14

if.end14:                                         ; preds = %slab_objcgs.exit
  %tobool15.not = icmp eq ptr %s_orig, null
  br i1 %tobool15.not, label %if.then16, label %if.end17

if.then16:                                        ; preds = %if.end14
  %slab_cache = getelementptr inbounds %struct.slab, ptr %6, i32 0, i32 2
  %17 = load ptr, ptr %slab_cache, align 4
  br label %if.end17

if.end17:                                         ; preds = %if.then16, %if.end14
  %s.0 = phi ptr [ %17, %if.then16 ], [ %s_orig, %if.end14 ]
  %18 = load ptr, ptr @__kfence_pool, align 4
  %sub.ptr.rhs.cast.i.i = ptrtoint ptr %18 to i32
  %sub.ptr.sub.i.i = sub i32 %2, %sub.ptr.rhs.cast.i.i
  %cmp.i.i = icmp ult i32 %sub.ptr.sub.i.i, 2097152
  %tobool.i.i = icmp ne ptr %18, null
  %19 = select i1 %cmp.i.i, i1 %tobool.i.i, i1 false
  br i1 %19, label %obj_to_index.exit, label %if.end.i

if.end.i:                                         ; preds = %if.end17
  %call.i.i.i = tail call ptr @page_address(ptr noundef nonnull %6) #27
  %sub.ptr.rhs.cast.i5.i = ptrtoint ptr %call.i.i.i to i32
  %sub.ptr.sub.i6.i = sub i32 %2, %sub.ptr.rhs.cast.i5.i
  %reciprocal_size.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s.0, i32 0, i32 5
  %.unpack.i.i = load i32, ptr %reciprocal_size.i.i, align 4
  %.elt2.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s.0, i32 0, i32 5, i32 1
  %.unpack3.i.i = load i32, ptr %.elt2.i.i, align 4
  %R.sroa.2.4.extract.shift.i.i.i = lshr i32 %.unpack3.i.i, 24
  %R.sroa.4.4.extract.shift.i.i.i = lshr i32 %.unpack3.i.i, 16
  %conv.i.i.i = zext i32 %sub.ptr.sub.i6.i to i64
  %conv1.i.i.i = zext i32 %.unpack.i.i to i64
  %mul.i.i.i = mul nuw i64 %conv.i.i.i, %conv1.i.i.i
  %shr.i.i.i = lshr i64 %mul.i.i.i, 32
  %conv2.i.i.i = trunc i64 %shr.i.i.i to i32
  %sub.i.i.i54 = sub i32 %sub.ptr.sub.i6.i, %conv2.i.i.i
  %shr4.i.i.i = lshr i32 %sub.i.i.i54, %R.sroa.2.4.extract.shift.i.i.i
  %add.i.i.i = add i32 %shr4.i.i.i, %conv2.i.i.i
  %conv5.i.i.i = and i32 %R.sroa.4.4.extract.shift.i.i.i, 255
  %shr6.i.i.i = lshr i32 %add.i.i.i, %conv5.i.i.i
  br label %obj_to_index.exit

obj_to_index.exit:                                ; preds = %if.end.i, %if.end17
  %retval.0.i = phi i32 [ %shr6.i.i.i, %if.end.i ], [ 0, %if.end17 ]
  %arrayidx20 = getelementptr ptr, ptr %16, i32 %retval.0.i
  %20 = load ptr, ptr %arrayidx20, align 4
  %tobool21.not = icmp eq ptr %20, null
  br i1 %tobool21.not, label %for.inc, label %if.end23

if.end23:                                         ; preds = %obj_to_index.exit
  store ptr null, ptr %arrayidx20, align 4
  %size.i = getelementptr inbounds %struct.kmem_cache, ptr %s.0, i32 0, i32 3
  %21 = load i32, ptr %size.i, align 4
  %add.i = add i32 %21, 4
  tail call void @obj_cgroup_uncharge(ptr noundef nonnull %20, i32 noundef %add.i) #27
  %22 = load volatile i32, ptr %6, align 4
  %cmp.i.not.i.i.i.i = icmp eq i32 %22, -1
  br i1 %cmp.i.not.i.i.i.i, label %if.then.i.i.i.i, label %slab_pgdat.exit, !prof !13

if.then.i.i.i.i:                                  ; preds = %if.end23
  %23 = inttoptr i32 %retval.0.i.i.i to ptr
  tail call void @dump_page(ptr noundef nonnull %23, ptr noundef nonnull @.str.88) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/mm.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 1368, 0\0A.popsection", ""() #24, !srcloc !37
  unreachable

slab_pgdat.exit:                                  ; preds = %if.end23
  %flags.i = getelementptr inbounds %struct.kmem_cache, ptr %s.0, i32 0, i32 1
  %24 = load i32, ptr %flags.i, align 4
  %and.i55 = and i32 %24, 131072
  %tobool.not.i = icmp eq i32 %and.i55, 0
  %cond.i = select i1 %tobool.not.i, i32 6, i32 5
  %25 = load i32, ptr %size.i, align 4
  %sub = sub i32 -4, %25
  tail call void @mod_objcg_state(ptr noundef nonnull %20, ptr noundef nonnull @contig_page_data, i32 noundef %cond.i, i32 noundef %sub) #27
  tail call fastcc void @obj_cgroup_put(ptr noundef nonnull %20) #25
  br label %for.inc

for.inc:                                          ; preds = %slab_pgdat.exit, %obj_to_index.exit, %slab_objcgs.exit, %virt_to_slab.exit, %for.body
  %inc = add nuw nsw i32 %i.0, 1
  br label %for.cond

cleanup:                                          ; preds = %for.cond, %entry
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define dso_local i32 @kmem_cache_alloc_bulk(ptr noundef %s, i32 noundef %flags, i32 noundef %size, ptr noundef %p) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %objcg = alloca ptr, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %objcg) #24
  store ptr null, ptr %objcg, align 4
  %call = call fastcc ptr @slab_pre_alloc_hook(ptr noundef %s, ptr noundef nonnull %objcg, i32 noundef %size, i32 noundef %flags) #25
  %tobool.not = icmp eq ptr %call, null
  br i1 %tobool.not, label %cleanup170, label %do.body, !prof !13

do.body:                                          ; preds = %entry
  %0 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i = and i32 %0, -16384
  %1 = inttoptr i32 %and.i.i.i to ptr
  %preempt_count.i.i = getelementptr inbounds %struct.thread_info, ptr %1, i32 0, i32 1
  %2 = load volatile i32, ptr %preempt_count.i.i, align 4
  %add.i = add i32 %2, 1
  store volatile i32 %add.i, ptr %preempt_count.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !38
  %3 = load ptr, ptr %call, align 4
  %4 = ptrtoint ptr %3 to i32
  %5 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i = and i32 %5, -16384
  %6 = inttoptr i32 %and.i to ptr
  %cpu = getelementptr inbounds %struct.thread_info, ptr %6, i32 0, i32 3
  %7 = load i32, ptr %cpu, align 4
  %arrayidx = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %7
  %8 = load i32, ptr %arrayidx, align 4
  %add = add i32 %8, %4
  %9 = inttoptr i32 %add to ptr
  %10 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ local_save_flags", "=r,~{memory},~{cc}"() #24, !srcloc !20
  %and.i.i248 = and i32 %10, 128
  %tobool13.not = icmp eq i32 %and.i.i248, 0
  tail call void asm sideeffect "\09cpsid i\09\09\09@ arch_local_irq_disable", "~{memory},~{cc}"() #24, !srcloc !39
  br i1 %tobool13.not, label %if.then15, label %if.end16

if.then15:                                        ; preds = %do.body
  tail call void @trace_hardirqs_off() #27
  br label %if.end16

if.end16:                                         ; preds = %if.then15, %do.body
  %11 = load ptr, ptr %call, align 4
  %lock = getelementptr inbounds %struct.kmem_cache_cpu, ptr %11, i32 0, i32 4
  %12 = ptrtoint ptr %lock to i32
  %13 = load i32, ptr %cpu, align 4
  %arrayidx29 = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %13
  %14 = load i32, ptr %arrayidx29, align 4
  %add30 = add i32 %14, %12
  %15 = inttoptr i32 %add30 to ptr
  tail call fastcc void @local_lock_acquire(ptr noundef %15) #25
  %cmp290.not = icmp eq i32 %size, 0
  br i1 %cmp290.not, label %for.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.end16
  %object_size = getelementptr inbounds %struct.kmem_cache, ptr %call, i32 0, i32 4
  %offset.i251 = getelementptr inbounds %struct.kmem_cache, ptr %call, i32 0, i32 6
  %random.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %call, i32 0, i32 21
  %ctor.i.i228 = getelementptr inbounds %struct.kmem_cache, ptr %call, i32 0, i32 14
  %flags.i.i231 = getelementptr inbounds %struct.kmem_cache, ptr %call, i32 0, i32 1
  br label %for.body

for.body:                                         ; preds = %for.inc, %for.body.lr.ph
  %c.0293 = phi ptr [ %9, %for.body.lr.ph ], [ %c.1284, %for.inc ]
  %i.0291 = phi i32 [ 0, %for.body.lr.ph ], [ %inc, %for.inc ]
  %16 = load i32, ptr %object_size, align 4
  callbr void asm sideeffect "1:\0A\09nop\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr nonnull @kfence_allocation_key, ptr blockaddress(@kmem_cache_alloc_bulk, %if.end.i)) #24
          to label %kfence_alloc.exit [label %if.end.i], !srcloc !12

if.end.i:                                         ; preds = %for.body
  %17 = load volatile i32, ptr @kfence_allocation_gate, align 4
  %tobool4.not.i = icmp eq i32 %17, 0
  br i1 %tobool4.not.i, label %if.end12.i, label %if.end43, !prof !13

if.end12.i:                                       ; preds = %if.end.i
  %call13.i = tail call ptr @__kfence_alloc(ptr noundef %call, i32 noundef %16, i32 noundef %flags) #27
  br label %kfence_alloc.exit

kfence_alloc.exit:                                ; preds = %if.end12.i, %for.body
  %retval.0.i = phi ptr [ %call13.i, %if.end12.i ], [ null, %for.body ]
  %tobool34.not = icmp eq ptr %retval.0.i, null
  br i1 %tobool34.not, label %if.end43, label %if.then41, !prof !14

if.then41:                                        ; preds = %kfence_alloc.exit
  %arrayidx42 = getelementptr ptr, ptr %p, i32 %i.0291
  store ptr %retval.0.i, ptr %arrayidx42, align 4
  br label %for.inc

if.end43:                                         ; preds = %kfence_alloc.exit, %if.end.i
  %18 = load ptr, ptr %c.0293, align 4
  %tobool44.not = icmp eq ptr %18, null
  br i1 %tobool44.not, label %if.then53, label %if.end128, !prof !13

if.then53:                                        ; preds = %if.end43
  %tid = getelementptr inbounds %struct.kmem_cache_cpu, ptr %c.0293, i32 0, i32 1
  %19 = load i32, ptr %tid, align 4
  %add.i249 = add i32 %19, 1
  store i32 %add.i249, ptr %tid, align 4
  %20 = load ptr, ptr %call, align 4
  %lock64 = getelementptr inbounds %struct.kmem_cache_cpu, ptr %20, i32 0, i32 4
  %21 = ptrtoint ptr %lock64 to i32
  %22 = load i32, ptr %cpu, align 4
  %arrayidx68 = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %22
  %23 = load i32, ptr %arrayidx68, align 4
  %add69 = add i32 %23, %21
  %24 = inttoptr i32 %add69 to ptr
  tail call fastcc void @local_lock_release(ptr noundef %24) #25
  tail call void @trace_hardirqs_on() #27
  tail call void asm sideeffect "\09cpsie i\09\09\09@ arch_local_irq_enable", "~{memory},~{cc}"() #24, !srcloc !40
  %25 = tail call ptr @llvm.returnaddress(i32 0)
  %26 = ptrtoint ptr %25 to i32
  %call75 = tail call fastcc ptr @___slab_alloc(ptr noundef nonnull %call, i32 noundef %flags, i32 noundef %26, ptr noundef %c.0293) #25
  %arrayidx76 = getelementptr ptr, ptr %p, i32 %i.0291
  store ptr %call75, ptr %arrayidx76, align 4
  %tobool78.not = icmp eq ptr %call75, null
  br i1 %tobool78.not, label %do.body163, label %do.body89, !prof !13

do.body89:                                        ; preds = %if.then53
  %27 = load ptr, ptr %call, align 4
  %28 = ptrtoint ptr %27 to i32
  %29 = load i32, ptr %cpu, align 4
  %arrayidx99 = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %29
  %30 = load i32, ptr %arrayidx99, align 4
  %add100 = add i32 %30, %28
  %31 = inttoptr i32 %add100 to ptr
  callbr void asm sideeffect "1:\0A\09nop\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr getelementptr inbounds (i8, ptr @init_on_free, i32 1), ptr blockaddress(@kmem_cache_alloc_bulk, %maybe_wipe_obj_freeptr.exit)) #24
          to label %if.then.i.i [label %maybe_wipe_obj_freeptr.exit], !srcloc !12

if.then.i.i:                                      ; preds = %do.body89
  %32 = load ptr, ptr %ctor.i.i228, align 4
  %tobool15.not.i.i = icmp eq ptr %32, null
  br i1 %tobool15.not.i.i, label %lor.rhs.i.i, label %maybe_wipe_obj_freeptr.exit

lor.rhs.i.i:                                      ; preds = %if.then.i.i
  %33 = load i32, ptr %flags.i.i231, align 4
  %and.i.i = and i32 %33, 526336
  %tobool16.i.i = icmp eq i32 %and.i.i, 0
  br i1 %tobool16.i.i, label %if.then.i, label %maybe_wipe_obj_freeptr.exit, !prof !13

if.then.i:                                        ; preds = %lor.rhs.i.i
  %34 = load i32, ptr %offset.i251, align 4
  %add.ptr.i = getelementptr i8, ptr %call75, i32 %34
  %call4.i = tail call ptr @__memset(ptr noundef %add.ptr.i, i32 noundef 0, i32 noundef 4) #27
  br label %maybe_wipe_obj_freeptr.exit

maybe_wipe_obj_freeptr.exit:                      ; preds = %if.then.i, %lor.rhs.i.i, %if.then.i.i, %do.body89
  %35 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ local_save_flags", "=r,~{memory},~{cc}"() #24, !srcloc !20
  %and.i.i250 = and i32 %35, 128
  %tobool106.not = icmp eq i32 %and.i.i250, 0
  tail call void asm sideeffect "\09cpsid i\09\09\09@ arch_local_irq_disable", "~{memory},~{cc}"() #24, !srcloc !39
  br i1 %tobool106.not, label %if.then109, label %if.end110

if.then109:                                       ; preds = %maybe_wipe_obj_freeptr.exit
  tail call void @trace_hardirqs_off() #27
  br label %if.end110

if.end110:                                        ; preds = %if.then109, %maybe_wipe_obj_freeptr.exit
  %36 = load ptr, ptr %call, align 4
  %lock120 = getelementptr inbounds %struct.kmem_cache_cpu, ptr %36, i32 0, i32 4
  %37 = ptrtoint ptr %lock120 to i32
  %38 = load i32, ptr %cpu, align 4
  %arrayidx124 = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %38
  %39 = load i32, ptr %arrayidx124, align 4
  %add125 = add i32 %39, %37
  %40 = inttoptr i32 %add125 to ptr
  tail call fastcc void @local_lock_acquire(ptr noundef %40) #25
  br label %for.inc

if.end128:                                        ; preds = %if.end43
  %41 = load i32, ptr %offset.i251, align 4
  %add.ptr.i252 = getelementptr i8, ptr %18, i32 %41
  %42 = load i32, ptr %add.ptr.i252, align 4
  %43 = ptrtoint ptr %add.ptr.i252 to i32
  %44 = load i32, ptr %random.i.i.i, align 4
  %45 = tail call i32 @llvm.bswap.i32(i32 %43) #24
  %xor.i.i.i = xor i32 %44, %42
  %xor2.i.i.i = xor i32 %xor.i.i.i, %45
  %46 = inttoptr i32 %xor2.i.i.i to ptr
  store ptr %46, ptr %c.0293, align 4
  %arrayidx131 = getelementptr ptr, ptr %p, i32 %i.0291
  store ptr %18, ptr %arrayidx131, align 4
  callbr void asm sideeffect "1:\0A\09nop\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr getelementptr inbounds (i8, ptr @init_on_free, i32 1), ptr blockaddress(@kmem_cache_alloc_bulk, %for.inc)) #24
          to label %if.then.i.i230 [label %for.inc], !srcloc !12

if.then.i.i230:                                   ; preds = %if.end128
  %47 = load ptr, ptr %ctor.i.i228, align 4
  %tobool15.not.i.i229 = icmp eq ptr %47, null
  br i1 %tobool15.not.i.i229, label %lor.rhs.i.i234, label %for.inc

lor.rhs.i.i234:                                   ; preds = %if.then.i.i230
  %48 = load i32, ptr %flags.i.i231, align 4
  %and.i.i232 = and i32 %48, 526336
  %tobool16.i.i233 = icmp eq i32 %and.i.i232, 0
  br i1 %tobool16.i.i233, label %if.then.i240, label %for.inc, !prof !13

if.then.i240:                                     ; preds = %lor.rhs.i.i234
  %49 = load i32, ptr %offset.i251, align 4
  %add.ptr.i238 = getelementptr i8, ptr %18, i32 %49
  %call4.i239 = tail call ptr @__memset(ptr noundef %add.ptr.i238, i32 noundef 0, i32 noundef 4) #27
  br label %for.inc

for.inc:                                          ; preds = %if.then.i240, %lor.rhs.i.i234, %if.then.i.i230, %if.end128, %if.end110, %if.then41
  %c.1284 = phi ptr [ %c.0293, %if.end128 ], [ %c.0293, %if.then.i240 ], [ %c.0293, %lor.rhs.i.i234 ], [ %c.0293, %if.then.i.i230 ], [ %31, %if.end110 ], [ %c.0293, %if.then41 ]
  %inc = add nuw i32 %i.0291, 1
  %exitcond.not = icmp eq i32 %inc, %size
  br i1 %exitcond.not, label %for.end, label %for.body

for.end:                                          ; preds = %for.inc, %if.end16
  %c.0.lcssa = phi ptr [ %9, %if.end16 ], [ %c.1284, %for.inc ]
  %tid133 = getelementptr inbounds %struct.kmem_cache_cpu, ptr %c.0.lcssa, i32 0, i32 1
  %50 = load i32, ptr %tid133, align 4
  %add.i253 = add i32 %50, 1
  store i32 %add.i253, ptr %tid133, align 4
  %51 = load ptr, ptr %call, align 4
  %lock144 = getelementptr inbounds %struct.kmem_cache_cpu, ptr %51, i32 0, i32 4
  %52 = ptrtoint ptr %lock144 to i32
  %53 = load i32, ptr %cpu, align 4
  %arrayidx148 = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %53
  %54 = load i32, ptr %arrayidx148, align 4
  %add149 = add i32 %54, %52
  %55 = inttoptr i32 %add149 to ptr
  tail call fastcc void @local_lock_release(ptr noundef %55) #25
  tail call void @trace_hardirqs_on() #27
  tail call void asm sideeffect "\09cpsie i\09\09\09@ arch_local_irq_enable", "~{memory},~{cc}"() #24, !srcloc !40
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !41
  %56 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i243 = and i32 %56, -16384
  %57 = inttoptr i32 %and.i.i.i243 to ptr
  %preempt_count.i.i244 = getelementptr inbounds %struct.thread_info, ptr %57, i32 0, i32 1
  %58 = load volatile i32, ptr %preempt_count.i.i244, align 4
  %sub.i = add i32 %58, -1
  store volatile i32 %sub.i, ptr %preempt_count.i.i244, align 4
  %59 = load ptr, ptr %objcg, align 4
  callbr void asm sideeffect "1:\0A\09nop\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr getelementptr inbounds (i8, ptr @init_on_alloc, i32 1), ptr blockaddress(@kmem_cache_alloc_bulk, %if.end23.i)) #24
          to label %if.then.i254 [label %if.end23.i], !srcloc !12

if.then.i254:                                     ; preds = %for.end
  %ctor.i = getelementptr inbounds %struct.kmem_cache, ptr %call, i32 0, i32 14
  %60 = load ptr, ptr %ctor.i, align 4
  %tobool15.not.i = icmp eq ptr %60, null
  br i1 %tobool15.not.i, label %if.end.i256, label %slab_want_init_on_alloc.exit

if.end.i256:                                      ; preds = %if.then.i254
  %flags17.i = getelementptr inbounds %struct.kmem_cache, ptr %call, i32 0, i32 1
  %61 = load i32, ptr %flags17.i, align 4
  %and.i255 = and i32 %61, 526336
  %tobool18.not.i = icmp eq i32 %and.i255, 0
  br i1 %tobool18.not.i, label %slab_want_init_on_alloc.exit, label %if.then19.i

if.then19.i:                                      ; preds = %if.end.i256
  %and20.i = and i32 %flags, 256
  %tobool21.i = icmp ne i32 %and20.i, 0
  br label %slab_want_init_on_alloc.exit

if.end23.i:                                       ; preds = %for.end
  %and24.i = and i32 %flags, 256
  %tobool25.i = icmp ne i32 %and24.i, 0
  br label %slab_want_init_on_alloc.exit

slab_want_init_on_alloc.exit:                     ; preds = %if.end23.i, %if.then19.i, %if.end.i256, %if.then.i254
  %retval.0.i257 = phi i1 [ %tobool21.i, %if.then19.i ], [ %tobool25.i, %if.end23.i ], [ false, %if.then.i254 ], [ true, %if.end.i256 ]
  %62 = load i32, ptr @gfp_allowed_mask, align 4
  %and.i258 = and i32 %62, %flags
  br i1 %cmp290.not, label %slab_post_alloc_hook.exit, label %for.body.lr.ph.i

for.body.lr.ph.i:                                 ; preds = %slab_want_init_on_alloc.exit
  %object_size.i = getelementptr inbounds %struct.kmem_cache, ptr %call, i32 0, i32 4
  %flags11.i = getelementptr inbounds %struct.kmem_cache, ptr %call, i32 0, i32 1
  br label %for.body.i

for.body.i:                                       ; preds = %kmemleak_alloc_recursive.exit.i, %for.body.lr.ph.i
  %i.033.i = phi i32 [ 0, %for.body.lr.ph.i ], [ %inc.i, %kmemleak_alloc_recursive.exit.i ]
  %arrayidx.i = getelementptr ptr, ptr %p, i32 %i.033.i
  %63 = load ptr, ptr %arrayidx.i, align 4
  %call1.i.i = tail call ptr @__kasan_slab_alloc(ptr noundef %call, ptr noundef %63, i32 noundef %and.i258, i1 noundef zeroext %retval.0.i257) #27
  store ptr %call1.i.i, ptr %arrayidx.i, align 4
  %tobool3.not.i = icmp ne ptr %call1.i.i, null
  %64 = and i1 %retval.0.i257, %tobool3.not.i
  br i1 %64, label %land.lhs.true5.i, label %if.end.i260

land.lhs.true5.i:                                 ; preds = %for.body.i
  %65 = load i32, ptr %object_size.i, align 4
  %call8.i = tail call ptr @__memset(ptr noundef nonnull %call1.i.i, i32 noundef 0, i32 noundef %65) #27
  br label %if.end.i260

if.end.i260:                                      ; preds = %land.lhs.true5.i, %for.body.i
  %66 = load i32, ptr %flags11.i, align 4
  %and.i.i259 = and i32 %66, 8388608
  %tobool.not.i.i = icmp eq i32 %and.i.i259, 0
  br i1 %tobool.not.i.i, label %if.then.i.i261, label %kmemleak_alloc_recursive.exit.i

if.then.i.i261:                                   ; preds = %if.end.i260
  %67 = load i32, ptr %object_size.i, align 4
  %68 = load ptr, ptr %arrayidx.i, align 4
  tail call void @kmemleak_alloc(ptr noundef %68, i32 noundef %67, i32 noundef 1, i32 noundef %and.i258) #27
  br label %kmemleak_alloc_recursive.exit.i

kmemleak_alloc_recursive.exit.i:                  ; preds = %if.then.i.i261, %if.end.i260
  %inc.i = add nuw i32 %i.033.i, 1
  %exitcond.not.i = icmp eq i32 %inc.i, %size
  br i1 %exitcond.not.i, label %slab_post_alloc_hook.exit, label %for.body.i

slab_post_alloc_hook.exit:                        ; preds = %kmemleak_alloc_recursive.exit.i, %slab_want_init_on_alloc.exit
  tail call fastcc void @memcg_slab_post_alloc_hook(ptr noundef %call, ptr noundef %59, i32 noundef %and.i258, i32 noundef %size, ptr noundef %p) #27
  br label %cleanup170

do.body163:                                       ; preds = %if.then53
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !42
  %69 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i245 = and i32 %69, -16384
  %70 = inttoptr i32 %and.i.i.i245 to ptr
  %preempt_count.i.i246 = getelementptr inbounds %struct.thread_info, ptr %70, i32 0, i32 1
  %71 = load volatile i32, ptr %preempt_count.i.i246, align 4
  %sub.i247 = add i32 %71, -1
  store volatile i32 %sub.i247, ptr %preempt_count.i.i246, align 4
  %72 = load ptr, ptr %objcg, align 4
  %73 = load i32, ptr @gfp_allowed_mask, align 4
  %and.i262 = and i32 %73, %flags
  %cmp32.not.i263 = icmp eq i32 %i.0291, 0
  br i1 %cmp32.not.i263, label %slab_post_alloc_hook.exit279, label %for.body.i271

for.body.i271:                                    ; preds = %kmemleak_alloc_recursive.exit.i278, %do.body163
  %i.033.i267 = phi i32 [ %inc.i276, %kmemleak_alloc_recursive.exit.i278 ], [ 0, %do.body163 ]
  %arrayidx.i268 = getelementptr ptr, ptr %p, i32 %i.033.i267
  %74 = load ptr, ptr %arrayidx.i268, align 4
  %call1.i.i269 = tail call ptr @__kasan_slab_alloc(ptr noundef %call, ptr noundef %74, i32 noundef %and.i262, i1 noundef zeroext false) #27
  store ptr %call1.i.i269, ptr %arrayidx.i268, align 4
  %75 = load i32, ptr %flags.i.i231, align 4
  %and.i.i272 = and i32 %75, 8388608
  %tobool.not.i.i273 = icmp eq i32 %and.i.i272, 0
  br i1 %tobool.not.i.i273, label %if.then.i.i275, label %kmemleak_alloc_recursive.exit.i278

if.then.i.i275:                                   ; preds = %for.body.i271
  %76 = load i32, ptr %object_size, align 4
  tail call void @kmemleak_alloc(ptr noundef %call1.i.i269, i32 noundef %76, i32 noundef 1, i32 noundef %and.i262) #27
  br label %kmemleak_alloc_recursive.exit.i278

kmemleak_alloc_recursive.exit.i278:               ; preds = %if.then.i.i275, %for.body.i271
  %inc.i276 = add nuw i32 %i.033.i267, 1
  %exitcond.not.i277 = icmp eq i32 %inc.i276, %i.0291
  br i1 %exitcond.not.i277, label %slab_post_alloc_hook.exit279, label %for.body.i271

slab_post_alloc_hook.exit279:                     ; preds = %kmemleak_alloc_recursive.exit.i278, %do.body163
  tail call fastcc void @memcg_slab_post_alloc_hook(ptr noundef %call, ptr noundef %72, i32 noundef %and.i262, i32 noundef %i.0291, ptr noundef %p) #27
  tail call void @__kmem_cache_free_bulk(ptr noundef nonnull %call, i32 noundef %i.0291, ptr noundef %p) #27
  br label %cleanup170

cleanup170:                                       ; preds = %slab_post_alloc_hook.exit279, %slab_post_alloc_hook.exit, %entry
  %retval.0 = phi i32 [ 0, %slab_post_alloc_hook.exit279 ], [ %size, %slab_post_alloc_hook.exit ], [ 0, %entry ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %objcg) #24
  ret i32 %retval.0
}

; Function Attrs: inlinehint nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc ptr @slab_pre_alloc_hook(ptr noundef %s, ptr nocapture noundef writeonly %objcgp, i32 noundef %size, i32 noundef %flags) unnamed_addr #5 align 64 {
entry:
  %0 = load i32, ptr @gfp_allowed_mask, align 4
  %and = and i32 %0, %flags
  tail call void @fs_reclaim_acquire(i32 noundef %and) #27
  tail call void @fs_reclaim_release(i32 noundef %and) #27
  %and.i.i = and i32 %and, 1024
  %tobool.i.not.i = icmp eq i32 %and.i.i, 0
  br i1 %tobool.i.not.i, label %might_alloc.exit, label %do.body1.i

do.body1.i:                                       ; preds = %entry
  tail call void @__might_sleep(ptr noundef nonnull @.str.97, i32 noundef 256) #27
  br label %might_alloc.exit

might_alloc.exit:                                 ; preds = %do.body1.i, %entry
  %call = tail call i32 @should_failslab(ptr noundef %s, i32 noundef %and) #27
  %tobool.not = icmp eq i32 %call, 0
  br i1 %tobool.not, label %if.end, label %return

if.end:                                           ; preds = %might_alloc.exit
  callbr void asm sideeffect "1:\0A\09b ${1:l}\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr getelementptr inbounds (i8, ptr @memcg_kmem_enabled_key, i32 1), ptr blockaddress(@slab_pre_alloc_hook, %return)) #24
          to label %if.end.i [label %return], !srcloc !10

if.end.i:                                         ; preds = %if.end
  %and.i = and i32 %and, 4194304
  %tobool.not.i = icmp eq i32 %and.i, 0
  br i1 %tobool.not.i, label %land.lhs.true.i, label %if.end5.i

land.lhs.true.i:                                  ; preds = %if.end.i
  %flags1.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 1
  %1 = load i32, ptr %flags1.i, align 4
  %and2.i = and i32 %1, 67108864
  %tobool3.not.i = icmp eq i32 %and2.i, 0
  br i1 %tobool3.not.i, label %return, label %if.end5.i

if.end5.i:                                        ; preds = %land.lhs.true.i, %if.end.i
  %call6.i = tail call ptr @get_obj_cgroup_from_current() #27
  %tobool7.not.i = icmp eq ptr %call6.i, null
  br i1 %tobool7.not.i, label %return, label %if.end9.i

if.end9.i:                                        ; preds = %if.end5.i
  %size.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 3
  %2 = load i32, ptr %size.i.i, align 4
  %add.i.i = add i32 %2, 4
  %mul.i = mul i32 %add.i.i, %size
  %call11.i = tail call i32 @obj_cgroup_charge(ptr noundef nonnull %call6.i, i32 noundef %and, i32 noundef %mul.i) #27
  %tobool12.not.i = icmp eq i32 %call11.i, 0
  br i1 %tobool12.not.i, label %if.end14.i, label %memcg_slab_pre_alloc_hook.exit.thread10

memcg_slab_pre_alloc_hook.exit.thread10:          ; preds = %if.end9.i
  tail call fastcc void @obj_cgroup_put(ptr noundef nonnull %call6.i) #27
  br label %return

if.end14.i:                                       ; preds = %if.end9.i
  store ptr %call6.i, ptr %objcgp, align 4
  br label %return

return:                                           ; preds = %if.end14.i, %memcg_slab_pre_alloc_hook.exit.thread10, %if.end5.i, %land.lhs.true.i, %if.end, %might_alloc.exit
  %retval.0 = phi ptr [ null, %might_alloc.exit ], [ null, %memcg_slab_pre_alloc_hook.exit.thread10 ], [ %s, %if.end ], [ %s, %if.end14.i ], [ %s, %land.lhs.true.i ], [ %s, %if.end5.i ]
  ret ptr %retval.0
}

; Function Attrs: null_pointer_is_valid
declare dso_local void @trace_hardirqs_off() local_unnamed_addr #3

; Function Attrs: inlinehint nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc void @local_lock_acquire(ptr noundef %l) #5 align 64 {
entry:
  br label %__here

__here:                                           ; preds = %entry
  tail call void @lock_acquire(ptr noundef %l, i32 noundef 0, i32 noundef 0, i32 noundef 0, i32 noundef 1, ptr noundef null, i32 noundef ptrtoint (ptr blockaddress(@local_lock_acquire, %__here) to i32)) #27
  %0 = load i32, ptr @oops_in_progress, align 4
  %tobool.not = icmp eq i32 %0, 0
  br i1 %tobool.not, label %land.lhs.true, label %if.end36

land.lhs.true:                                    ; preds = %__here
  %owner = getelementptr inbounds %struct.local_lock_t, ptr %l, i32 0, i32 1
  %1 = load ptr, ptr %owner, align 4
  %tobool1.not = icmp eq ptr %1, null
  br i1 %tobool1.not, label %if.end36, label %do.end, !prof !14

do.end:                                           ; preds = %land.lhs.true
  %call = tail call i32 @debug_locks_off() #27
  %tobool4 = icmp eq i32 %call, 0
  %2 = load i32, ptr @debug_locks_silent, align 4
  %tobool6 = icmp ne i32 %2, 0
  %or.cond = select i1 %tobool4, i1 true, i1 %tobool6
  br i1 %or.cond, label %if.end36, label %do.end19

do.end19:                                         ; preds = %do.end
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.98, i32 noundef 30, i32 noundef 9, ptr noundef nonnull @.str.99, ptr noundef nonnull @.str.100) #27
  br label %if.end36

if.end36:                                         ; preds = %do.end19, %do.end, %land.lhs.true, %__here
  %3 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i = and i32 %3, -16384
  %4 = inttoptr i32 %and.i to ptr
  %task = getelementptr inbounds %struct.thread_info, ptr %4, i32 0, i32 2
  %5 = load ptr, ptr %task, align 8
  %owner39 = getelementptr inbounds %struct.local_lock_t, ptr %l, i32 0, i32 1
  store ptr %5, ptr %owner39, align 4
  ret void
}

; Function Attrs: inlinehint nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc void @local_lock_release(ptr noundef %l) #5 align 64 {
entry:
  %0 = load i32, ptr @oops_in_progress, align 4
  %tobool.not = icmp eq i32 %0, 0
  br i1 %tobool.not, label %land.lhs.true, label %if.end35

land.lhs.true:                                    ; preds = %entry
  %owner = getelementptr inbounds %struct.local_lock_t, ptr %l, i32 0, i32 1
  %1 = load ptr, ptr %owner, align 4
  %2 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i = and i32 %2, -16384
  %3 = inttoptr i32 %and.i to ptr
  %task = getelementptr inbounds %struct.thread_info, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %task, align 8
  %cmp.not = icmp eq ptr %1, %4
  br i1 %cmp.not, label %if.end35, label %do.end, !prof !14

do.end:                                           ; preds = %land.lhs.true
  %call3 = tail call i32 @debug_locks_off() #27
  %tobool4 = icmp eq i32 %call3, 0
  %5 = load i32, ptr @debug_locks_silent, align 4
  %tobool6 = icmp ne i32 %5, 0
  %or.cond = select i1 %tobool4, i1 true, i1 %tobool6
  br i1 %or.cond, label %if.end35, label %do.end19

do.end19:                                         ; preds = %do.end
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.98, i32 noundef 36, i32 noundef 9, ptr noundef nonnull @.str.99, ptr noundef nonnull @.str.101) #27
  br label %if.end35

if.end35:                                         ; preds = %do.end19, %do.end, %land.lhs.true, %entry
  %owner37 = getelementptr inbounds %struct.local_lock_t, ptr %l, i32 0, i32 1
  store ptr null, ptr %owner37, align 4
  br label %__here

__here:                                           ; preds = %if.end35
  tail call void @lock_release(ptr noundef %l, i32 noundef ptrtoint (ptr blockaddress(@local_lock_release, %__here) to i32)) #27
  ret void
}

; Function Attrs: null_pointer_is_valid
declare dso_local void @trace_hardirqs_on() local_unnamed_addr #3

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc ptr @___slab_alloc(ptr noundef %s, i32 noundef %gfpflags, i32 noundef %addr, ptr noundef %c) unnamed_addr #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %slab = alloca ptr, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %slab) #24
  %0 = load ptr, ptr %s, align 4
  %arrayidx.i = getelementptr %struct.kmem_cache_cpu, ptr %0, i32 0, i32 5, i32 1
  %1 = ptrtoint ptr %arrayidx.i to i32
  %2 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i = and i32 %2, -16384
  %3 = inttoptr i32 %and.i.i to ptr
  %cpu.i = getelementptr inbounds %struct.thread_info, ptr %3, i32 0, i32 3
  %4 = load i32, ptr %cpu.i, align 4
  %arrayidx7.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %4
  %5 = load i32, ptr %arrayidx7.i, align 4
  %add.i3 = add i32 %5, %1
  %6 = inttoptr i32 %add.i3 to ptr
  %7 = load i32, ptr %6, align 4
  %add8.i = add i32 %7, 1
  store i32 %add8.i, ptr %6, align 4
  %arrayidx.i.i = getelementptr %struct.kmem_cache, ptr %s, i32 0, i32 26, i32 0
  %and.i51 = and i32 %gfpflags, -67108858
  %tobool.not.i52 = icmp eq i32 %and.i51, 0
  %ctor.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 14
  %flags38.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 1
  br label %reread_slab

reread_slab:                                      ; preds = %reread_slab.backedge, %entry
  %c.addr.0 = phi ptr [ %c, %entry ], [ %c.addr.0.be, %reread_slab.backedge ]
  %slab1 = getelementptr inbounds %struct.kmem_cache_cpu, ptr %c.addr.0, i32 0, i32 2
  %8 = load volatile ptr, ptr %slab1, align 4
  store ptr %8, ptr %slab, align 4
  %tobool.not = icmp eq ptr %8, null
  br i1 %tobool.not, label %new_slab.preheader, label %redo

redo:                                             ; preds = %do.end681, %reread_slab
  %9 = phi ptr [ %8, %reread_slab ], [ %128, %do.end681 ]
  %c.addr.1 = phi ptr [ %c.addr.0, %reread_slab ], [ %c.addr.3, %do.end681 ]
  %10 = getelementptr inbounds %struct.page, ptr %9, i32 0, i32 1
  %11 = load volatile i32, ptr %10, align 4
  %and.i.i.i.i.i = and i32 %11, 1
  %tobool.not.i.i.i.i = icmp eq i32 %and.i.i.i.i.i, 0
  br i1 %tobool.not.i.i.i.i, label %slab_test_pfmemalloc.exit.i, label %if.then.i.i.i.i, !prof !14

if.then.i.i.i.i:                                  ; preds = %redo
  tail call void @dump_page(ptr noundef nonnull %9, ptr noundef nonnull @.str.29) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 260, 0\0A.popsection", ""() #24, !srcloc !28
  unreachable

slab_test_pfmemalloc.exit.i:                      ; preds = %redo
  %12 = load volatile i32, ptr %9, align 4
  %13 = and i32 %12, 32
  %tobool.i.i.not.i = icmp eq i32 %13, 0
  br i1 %tobool.i.i.not.i, label %do.body36, label %pfmemalloc_match.exit, !prof !14

pfmemalloc_match.exit:                            ; preds = %slab_test_pfmemalloc.exit.i
  %call2.i = tail call zeroext i1 @gfp_pfmemalloc_allowed(i32 noundef %gfpflags) #27
  br i1 %call2.i, label %do.body36, label %do.body318, !prof !14

do.body36:                                        ; preds = %pfmemalloc_match.exit, %slab_test_pfmemalloc.exit.i
  %14 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ arch_local_irq_save\0A\09cpsid\09i", "=r,~{memory},~{cc}"() #24, !srcloc !19
  %and.i = and i32 %14, 128
  %tobool49.not = icmp eq i32 %and.i, 0
  br i1 %tobool49.not, label %if.then50, label %do.body54

if.then50:                                        ; preds = %do.body36
  tail call void @trace_hardirqs_off() #27
  br label %do.body54

do.body54:                                        ; preds = %if.then50, %do.body36
  %15 = load ptr, ptr %s, align 4
  %lock = getelementptr inbounds %struct.kmem_cache_cpu, ptr %15, i32 0, i32 4
  %16 = ptrtoint ptr %lock to i32
  %17 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i4 = and i32 %17, -16384
  %18 = inttoptr i32 %and.i4 to ptr
  %cpu = getelementptr inbounds %struct.thread_info, ptr %18, i32 0, i32 3
  %19 = load i32, ptr %cpu, align 4
  %arrayidx = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %19
  %20 = load i32, ptr %arrayidx, align 4
  %add = add i32 %20, %16
  %21 = inttoptr i32 %add to ptr
  tail call fastcc void @local_lock_acquire(ptr noundef %21) #25
  %slab62 = getelementptr inbounds %struct.kmem_cache_cpu, ptr %c.addr.1, i32 0, i32 2
  %22 = load ptr, ptr %slab62, align 4
  %cmp63.not = icmp eq ptr %9, %22
  br i1 %cmp63.not, label %if.end124, label %do.body73, !prof !14

do.body73:                                        ; preds = %do.body54
  %23 = load ptr, ptr %s, align 4
  %lock80 = getelementptr inbounds %struct.kmem_cache_cpu, ptr %23, i32 0, i32 4
  %24 = ptrtoint ptr %lock80 to i32
  %25 = load i32, ptr %cpu, align 4
  %arrayidx84 = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %25
  %26 = load i32, ptr %arrayidx84, align 4
  %add85 = add i32 %26, %24
  %27 = inttoptr i32 %add85 to ptr
  tail call fastcc void @local_lock_release(ptr noundef %27) #25
  br i1 %tobool49.not, label %if.then95, label %do.body97

if.then95:                                        ; preds = %do.body73
  tail call void @trace_hardirqs_on() #27
  br label %do.body97

do.body97:                                        ; preds = %if.then95, %do.body73
  %28 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ local_save_flags", "=r,~{memory},~{cc}"() #24, !srcloc !20
  %and.i.i6 = and i32 %28, 128
  %tobool105.not = icmp eq i32 %and.i.i6, 0
  br i1 %tobool105.not, label %if.then114, label %do.end117, !prof !13

if.then114:                                       ; preds = %do.body97
  tail call void @warn_bogus_irq_restore() #27
  br label %do.end117

do.end117:                                        ; preds = %if.then114, %do.body97
  tail call void asm sideeffect "\09msr\09cpsr_c, $0\09@ local_irq_restore", "r,~{memory},~{cc}"(i32 %14) #24, !srcloc !21
  br label %reread_slab.backedge

reread_slab.backedge:                             ; preds = %do.end560, %do.end403, %do.end117
  %c.addr.0.be = phi ptr [ %c.addr.1, %do.end403 ], [ %c.addr.3, %do.end560 ], [ %c.addr.1, %do.end117 ]
  br label %reread_slab

if.end124:                                        ; preds = %do.body54
  %29 = load ptr, ptr %c.addr.1, align 4
  %tobool126.not = icmp eq ptr %29, null
  br i1 %tobool126.not, label %if.end128, label %do.body186

if.end128:                                        ; preds = %if.end124
  %30 = load i32, ptr @debug_locks, align 4
  %tobool.not.i = icmp eq i32 %30, 0
  br i1 %tobool.not.i, label %if.end.i, label %do.body1.i

do.body1.i:                                       ; preds = %if.end128
  %31 = load ptr, ptr %s, align 4
  %lock.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %31, i32 0, i32 4
  %32 = ptrtoint ptr %lock.i to i32
  %33 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i7 = and i32 %33, -16384
  %34 = inttoptr i32 %and.i.i7 to ptr
  %cpu.i8 = getelementptr inbounds %struct.thread_info, ptr %34, i32 0, i32 3
  %35 = load i32, ptr %cpu.i8, align 4
  %arrayidx.i9 = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %35
  %36 = load i32, ptr %arrayidx.i9, align 4
  %add.i10 = add i32 %36, %32
  %37 = inttoptr i32 %add.i10 to ptr
  %call.i.i = tail call i32 @lock_is_held_type(ptr noundef %37, i32 noundef -1) #27
  %cmp.not.i = icmp eq i32 %call.i.i, 0
  br i1 %cmp.not.i, label %do.end15.i, label %if.end.i, !prof !13

do.end15.i:                                       ; preds = %do.body1.i
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.2, i32 noundef 2856, i32 noundef 9, ptr noundef null) #27
  br label %if.end.i

if.end.i:                                         ; preds = %do.end15.i, %do.body1.i, %if.end128
  %freelist31.i = getelementptr inbounds %struct.slab, ptr %9, i32 0, i32 3
  %38 = getelementptr inbounds %struct.slab, ptr %9, i32 0, i32 4
  br label %do.body30.i

do.body30.i:                                      ; preds = %do.end51.i, %if.end.i
  %39 = load i32, ptr %38, align 4
  %bf.clear.i = and i32 %39, 1
  %tobool33.not.i = icmp eq i32 %bf.clear.i, 0
  br i1 %tobool33.not.i, label %do.body43.i, label %do.end51.i, !prof !13

do.body43.i:                                      ; preds = %do.body30.i
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slub.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 2863, 0\0A.popsection", ""() #24, !srcloc !43
  unreachable

do.end51.i:                                       ; preds = %do.body30.i
  %40 = load ptr, ptr %freelist31.i, align 4
  %41 = shl i32 %39, 15
  %bf.shl.i = and i32 %41, 2147418112
  %bf.clear55.i = and i32 %39, 65534
  %cmp56.i = icmp ne ptr %40, null
  %conv.i = zext i1 %cmp56.i to i32
  %bf.set.i = or i32 %bf.shl.i, %bf.clear55.i
  %bf.set60.i = or i32 %bf.set.i, %conv.i
  %call62.i = tail call fastcc zeroext i1 @__cmpxchg_double_slab(ptr noundef %s, ptr noundef %9, ptr noundef %40, i32 noundef %39, ptr noundef null, i32 noundef %bf.set60.i) #27
  br i1 %call62.i, label %get_freelist.exit, label %do.body30.i

get_freelist.exit:                                ; preds = %do.end51.i
  %tobool130.not = icmp eq ptr %40, null
  br i1 %tobool130.not, label %if.then131, label %if.end185

if.then131:                                       ; preds = %get_freelist.exit
  store ptr null, ptr %slab62, align 4
  %42 = load ptr, ptr %s, align 4
  %lock141 = getelementptr inbounds %struct.kmem_cache_cpu, ptr %42, i32 0, i32 4
  %43 = ptrtoint ptr %lock141 to i32
  %44 = load i32, ptr %cpu, align 4
  %arrayidx145 = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %44
  %45 = load i32, ptr %arrayidx145, align 4
  %add146 = add i32 %45, %43
  %46 = inttoptr i32 %add146 to ptr
  tail call fastcc void @local_lock_release(ptr noundef %46) #25
  br i1 %tobool49.not, label %if.then156, label %do.body158

if.then156:                                       ; preds = %if.then131
  tail call void @trace_hardirqs_on() #27
  br label %do.body158

do.body158:                                       ; preds = %if.then156, %if.then131
  %47 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ local_save_flags", "=r,~{memory},~{cc}"() #24, !srcloc !20
  %and.i.i12 = and i32 %47, 128
  %tobool166.not = icmp eq i32 %and.i.i12, 0
  br i1 %tobool166.not, label %if.then175, label %do.end178, !prof !13

if.then175:                                       ; preds = %do.body158
  tail call void @warn_bogus_irq_restore() #27
  br label %do.end178

do.end178:                                        ; preds = %if.then175, %do.body158
  tail call void asm sideeffect "\09msr\09cpsr_c, $0\09@ local_irq_restore", "r,~{memory},~{cc}"(i32 %14) #24, !srcloc !21
  %48 = load ptr, ptr %s, align 4
  %arrayidx.i13 = getelementptr %struct.kmem_cache_cpu, ptr %48, i32 0, i32 5, i32 18
  %49 = ptrtoint ptr %arrayidx.i13 to i32
  %50 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i14 = and i32 %50, -16384
  %51 = inttoptr i32 %and.i.i14 to ptr
  %cpu.i15 = getelementptr inbounds %struct.thread_info, ptr %51, i32 0, i32 3
  %52 = load i32, ptr %cpu.i15, align 4
  %arrayidx7.i16 = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %52
  %53 = load i32, ptr %arrayidx7.i16, align 4
  %add.i17 = add i32 %53, %49
  %54 = inttoptr i32 %add.i17 to ptr
  %55 = load i32, ptr %54, align 4
  %add8.i18 = add i32 %55, 1
  store i32 %add8.i18, ptr %54, align 4
  br label %new_slab.preheader

if.end185:                                        ; preds = %get_freelist.exit
  %56 = load ptr, ptr %s, align 4
  %arrayidx.i19 = getelementptr %struct.kmem_cache_cpu, ptr %56, i32 0, i32 5, i32 9
  %57 = ptrtoint ptr %arrayidx.i19 to i32
  %58 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i20 = and i32 %58, -16384
  %59 = inttoptr i32 %and.i.i20 to ptr
  %cpu.i21 = getelementptr inbounds %struct.thread_info, ptr %59, i32 0, i32 3
  %60 = load i32, ptr %cpu.i21, align 4
  %arrayidx7.i22 = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %60
  %61 = load i32, ptr %arrayidx7.i22, align 4
  %add.i23 = add i32 %61, %57
  %62 = inttoptr i32 %add.i23 to ptr
  %63 = load i32, ptr %62, align 4
  %add8.i24 = add i32 %63, 1
  store i32 %add8.i24, ptr %62, align 4
  br label %do.body186

do.body186:                                       ; preds = %if.end854, %if.end185, %if.end124
  %flags.0 = phi i32 [ %184, %if.end854 ], [ %14, %if.end185 ], [ %14, %if.end124 ]
  %freelist.0 = phi ptr [ %freelist.1, %if.end854 ], [ %40, %if.end185 ], [ %29, %if.end124 ]
  %c.addr.2 = phi ptr [ %c.addr.4, %if.end854 ], [ %c.addr.1, %if.end185 ], [ %c.addr.1, %if.end124 ]
  %64 = load i32, ptr @debug_locks, align 4
  %tobool187.not = icmp eq i32 %64, 0
  br i1 %tobool187.not, label %if.end229, label %do.body189

do.body189:                                       ; preds = %do.body186
  %65 = load ptr, ptr %s, align 4
  %lock196 = getelementptr inbounds %struct.kmem_cache_cpu, ptr %65, i32 0, i32 4
  %66 = ptrtoint ptr %lock196 to i32
  %67 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i25 = and i32 %67, -16384
  %68 = inttoptr i32 %and.i25 to ptr
  %cpu199 = getelementptr inbounds %struct.thread_info, ptr %68, i32 0, i32 3
  %69 = load i32, ptr %cpu199, align 4
  %arrayidx200 = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %69
  %70 = load i32, ptr %arrayidx200, align 4
  %add201 = add i32 %70, %66
  %71 = inttoptr i32 %add201 to ptr
  %call.i = tail call i32 @lock_is_held_type(ptr noundef %71, i32 noundef -1) #27
  %cmp203.not = icmp eq i32 %call.i, 0
  br i1 %cmp203.not, label %do.end223, label %if.end229, !prof !13

do.end223:                                        ; preds = %do.body189
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.2, i32 noundef 2964, i32 noundef 9, ptr noundef null) #27
  br label %if.end229

if.end229:                                        ; preds = %do.end223, %do.body189, %do.body186
  %slab240 = getelementptr inbounds %struct.kmem_cache_cpu, ptr %c.addr.2, i32 0, i32 2
  %72 = load ptr, ptr %slab240, align 4
  %73 = getelementptr inbounds %struct.slab, ptr %72, i32 0, i32 4
  %bf.load = load i32, ptr %73, align 4
  %bf.clear = and i32 %bf.load, 1
  %tobool241.not = icmp eq i32 %bf.clear, 0
  br i1 %tobool241.not, label %do.body251, label %do.end259, !prof !13

do.body251:                                       ; preds = %if.end229
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slub.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 2971, 0\0A.popsection", ""() #24, !srcloc !44
  unreachable

do.end259:                                        ; preds = %if.end229
  %offset.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 6
  %74 = load i32, ptr %offset.i, align 4
  %add.ptr.i = getelementptr i8, ptr %freelist.0, i32 %74
  %75 = load i32, ptr %add.ptr.i, align 4
  %76 = ptrtoint ptr %add.ptr.i to i32
  %random.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 21
  %77 = load i32, ptr %random.i.i.i, align 4
  %78 = tail call i32 @llvm.bswap.i32(i32 %76) #24
  %xor.i.i.i = xor i32 %77, %75
  %xor2.i.i.i = xor i32 %xor.i.i.i, %78
  %79 = inttoptr i32 %xor2.i.i.i to ptr
  store ptr %79, ptr %c.addr.2, align 4
  %tid = getelementptr inbounds %struct.kmem_cache_cpu, ptr %c.addr.2, i32 0, i32 1
  %80 = load i32, ptr %tid, align 4
  %add.i26 = add i32 %80, 1
  store i32 %add.i26, ptr %tid, align 4
  %81 = load ptr, ptr %s, align 4
  %lock272 = getelementptr inbounds %struct.kmem_cache_cpu, ptr %81, i32 0, i32 4
  %82 = ptrtoint ptr %lock272 to i32
  %83 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i27 = and i32 %83, -16384
  %84 = inttoptr i32 %and.i27 to ptr
  %cpu275 = getelementptr inbounds %struct.thread_info, ptr %84, i32 0, i32 3
  %85 = load i32, ptr %cpu275, align 4
  %arrayidx276 = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %85
  %86 = load i32, ptr %arrayidx276, align 4
  %add277 = add i32 %86, %82
  %87 = inttoptr i32 %add277 to ptr
  tail call fastcc void @local_lock_release(ptr noundef %87) #25
  %and.i28 = and i32 %flags.0, 128
  %tobool286.not = icmp eq i32 %and.i28, 0
  br i1 %tobool286.not, label %if.then287, label %do.body289

if.then287:                                       ; preds = %do.end259
  tail call void @trace_hardirqs_on() #27
  br label %do.body289

do.body289:                                       ; preds = %if.then287, %do.end259
  %88 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ local_save_flags", "=r,~{memory},~{cc}"() #24, !srcloc !20
  %and.i.i29 = and i32 %88, 128
  %tobool297.not = icmp eq i32 %and.i.i29, 0
  br i1 %tobool297.not, label %if.then306, label %do.end309, !prof !13

if.then306:                                       ; preds = %do.body289
  tail call void @warn_bogus_irq_restore() #27
  br label %do.end309

do.end309:                                        ; preds = %if.then306, %do.body289
  tail call void asm sideeffect "\09msr\09cpsr_c, $0\09@ local_irq_restore", "r,~{memory},~{cc}"(i32 %flags.0) #24, !srcloc !21
  br label %cleanup

do.body318:                                       ; preds = %pfmemalloc_match.exit
  %89 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ arch_local_irq_save\0A\09cpsid\09i", "=r,~{memory},~{cc}"() #24, !srcloc !19
  %and.i30 = and i32 %89, 128
  %tobool334.not = icmp eq i32 %and.i30, 0
  br i1 %tobool334.not, label %if.then335, label %do.body339

if.then335:                                       ; preds = %do.body318
  tail call void @trace_hardirqs_off() #27
  br label %do.body339

do.body339:                                       ; preds = %if.then335, %do.body318
  %90 = load ptr, ptr %s, align 4
  %lock346 = getelementptr inbounds %struct.kmem_cache_cpu, ptr %90, i32 0, i32 4
  %91 = ptrtoint ptr %lock346 to i32
  %92 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i31 = and i32 %92, -16384
  %93 = inttoptr i32 %and.i31 to ptr
  %cpu349 = getelementptr inbounds %struct.thread_info, ptr %93, i32 0, i32 3
  %94 = load i32, ptr %cpu349, align 4
  %arrayidx350 = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %94
  %95 = load i32, ptr %arrayidx350, align 4
  %add351 = add i32 %95, %91
  %96 = inttoptr i32 %add351 to ptr
  tail call fastcc void @local_lock_acquire(ptr noundef %96) #25
  %slab354 = getelementptr inbounds %struct.kmem_cache_cpu, ptr %c.addr.1, i32 0, i32 2
  %97 = load ptr, ptr %slab354, align 4
  %cmp355.not = icmp eq ptr %9, %97
  br i1 %cmp355.not, label %if.end410, label %do.body359

do.body359:                                       ; preds = %do.body339
  %98 = load ptr, ptr %s, align 4
  %lock366 = getelementptr inbounds %struct.kmem_cache_cpu, ptr %98, i32 0, i32 4
  %99 = ptrtoint ptr %lock366 to i32
  %100 = load i32, ptr %cpu349, align 4
  %arrayidx370 = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %100
  %101 = load i32, ptr %arrayidx370, align 4
  %add371 = add i32 %101, %99
  %102 = inttoptr i32 %add371 to ptr
  tail call fastcc void @local_lock_release(ptr noundef %102) #25
  br i1 %tobool334.not, label %if.then381, label %do.body383

if.then381:                                       ; preds = %do.body359
  tail call void @trace_hardirqs_on() #27
  br label %do.body383

do.body383:                                       ; preds = %if.then381, %do.body359
  %103 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ local_save_flags", "=r,~{memory},~{cc}"() #24, !srcloc !20
  %and.i.i33 = and i32 %103, 128
  %tobool391.not = icmp eq i32 %and.i.i33, 0
  br i1 %tobool391.not, label %if.then400, label %do.end403, !prof !13

if.then400:                                       ; preds = %do.body383
  tail call void @warn_bogus_irq_restore() #27
  br label %do.end403

do.end403:                                        ; preds = %if.then400, %do.body383
  tail call void asm sideeffect "\09msr\09cpsr_c, $0\09@ local_irq_restore", "r,~{memory},~{cc}"(i32 %89) #24, !srcloc !21
  br label %reread_slab.backedge

if.end410:                                        ; preds = %do.body339
  %104 = load ptr, ptr %c.addr.1, align 4
  store ptr null, ptr %slab354, align 4
  store ptr null, ptr %c.addr.1, align 4
  %105 = load ptr, ptr %s, align 4
  %lock422 = getelementptr inbounds %struct.kmem_cache_cpu, ptr %105, i32 0, i32 4
  %106 = ptrtoint ptr %lock422 to i32
  %107 = load i32, ptr %cpu349, align 4
  %arrayidx426 = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %107
  %108 = load i32, ptr %arrayidx426, align 4
  %add427 = add i32 %108, %106
  %109 = inttoptr i32 %add427 to ptr
  tail call fastcc void @local_lock_release(ptr noundef %109) #25
  br i1 %tobool334.not, label %if.then437, label %do.body439

if.then437:                                       ; preds = %if.end410
  tail call void @trace_hardirqs_on() #27
  br label %do.body439

do.body439:                                       ; preds = %if.then437, %if.end410
  %110 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ local_save_flags", "=r,~{memory},~{cc}"() #24, !srcloc !20
  %and.i.i35 = and i32 %110, 128
  %tobool447.not = icmp eq i32 %and.i.i35, 0
  br i1 %tobool447.not, label %if.then456, label %do.end459, !prof !13

if.then456:                                       ; preds = %do.body439
  tail call void @warn_bogus_irq_restore() #27
  br label %do.end459

do.end459:                                        ; preds = %if.then456, %do.body439
  tail call void asm sideeffect "\09msr\09cpsr_c, $0\09@ local_irq_restore", "r,~{memory},~{cc}"(i32 %89) #24, !srcloc !21
  %111 = load ptr, ptr %slab, align 4
  tail call fastcc void @deactivate_slab(ptr noundef %s, ptr noundef %111, ptr noundef %104) #25
  br label %new_slab.preheader

new_slab.preheader:                               ; preds = %do.end459, %do.end178, %reread_slab
  %c.addr.3.ph = phi ptr [ %c.addr.1, %do.end459 ], [ %c.addr.1, %do.end178 ], [ %c.addr.0, %reread_slab ]
  br label %new_slab

new_slab:                                         ; preds = %if.then731, %new_slab.preheader
  %c.addr.3 = phi ptr [ %c.addr.4, %if.then731 ], [ %c.addr.3.ph, %new_slab.preheader ]
  %partial = getelementptr inbounds %struct.kmem_cache_cpu, ptr %c.addr.3, i32 0, i32 3
  %112 = load ptr, ptr %partial, align 4
  %tobool466.not = icmp eq ptr %112, null
  br i1 %tobool466.not, label %new_objects, label %do.body470

do.body470:                                       ; preds = %new_slab
  %113 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ arch_local_irq_save\0A\09cpsid\09i", "=r,~{memory},~{cc}"() #24, !srcloc !19
  %and.i36 = and i32 %113, 128
  %tobool486.not = icmp eq i32 %and.i36, 0
  br i1 %tobool486.not, label %if.then487, label %do.body491

if.then487:                                       ; preds = %do.body470
  tail call void @trace_hardirqs_off() #27
  br label %do.body491

do.body491:                                       ; preds = %if.then487, %do.body470
  %114 = load ptr, ptr %s, align 4
  %lock498 = getelementptr inbounds %struct.kmem_cache_cpu, ptr %114, i32 0, i32 4
  %115 = ptrtoint ptr %lock498 to i32
  %116 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i37 = and i32 %116, -16384
  %117 = inttoptr i32 %and.i37 to ptr
  %cpu501 = getelementptr inbounds %struct.thread_info, ptr %117, i32 0, i32 3
  %118 = load i32, ptr %cpu501, align 4
  %arrayidx502 = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %118
  %119 = load i32, ptr %arrayidx502, align 4
  %add503 = add i32 %119, %115
  %120 = inttoptr i32 %add503 to ptr
  tail call fastcc void @local_lock_acquire(ptr noundef %120) #25
  %slab506 = getelementptr inbounds %struct.kmem_cache_cpu, ptr %c.addr.3, i32 0, i32 2
  %121 = load ptr, ptr %slab506, align 4
  %tobool507.not = icmp eq ptr %121, null
  br i1 %tobool507.not, label %if.end567, label %do.body516, !prof !14

do.body516:                                       ; preds = %do.body491
  %122 = load ptr, ptr %s, align 4
  %lock523 = getelementptr inbounds %struct.kmem_cache_cpu, ptr %122, i32 0, i32 4
  %123 = ptrtoint ptr %lock523 to i32
  %124 = load i32, ptr %cpu501, align 4
  %arrayidx527 = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %124
  %125 = load i32, ptr %arrayidx527, align 4
  %add528 = add i32 %125, %123
  %126 = inttoptr i32 %add528 to ptr
  tail call fastcc void @local_lock_release(ptr noundef %126) #25
  br i1 %tobool486.not, label %if.then538, label %do.body540

if.then538:                                       ; preds = %do.body516
  tail call void @trace_hardirqs_on() #27
  br label %do.body540

do.body540:                                       ; preds = %if.then538, %do.body516
  %127 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ local_save_flags", "=r,~{memory},~{cc}"() #24, !srcloc !20
  %and.i.i39 = and i32 %127, 128
  %tobool548.not = icmp eq i32 %and.i.i39, 0
  br i1 %tobool548.not, label %if.then557, label %do.end560, !prof !13

if.then557:                                       ; preds = %do.body540
  tail call void @warn_bogus_irq_restore() #27
  br label %do.end560

do.end560:                                        ; preds = %if.then557, %do.body540
  tail call void asm sideeffect "\09msr\09cpsr_c, $0\09@ local_irq_restore", "r,~{memory},~{cc}"(i32 %113) #24, !srcloc !21
  br label %reread_slab.backedge

if.end567:                                        ; preds = %do.body491
  %128 = load ptr, ptr %partial, align 4
  %tobool569.not = icmp eq ptr %128, null
  br i1 %tobool569.not, label %do.body580, label %if.end631, !prof !13

do.body580:                                       ; preds = %if.end567
  %129 = load ptr, ptr %s, align 4
  %lock587 = getelementptr inbounds %struct.kmem_cache_cpu, ptr %129, i32 0, i32 4
  %130 = ptrtoint ptr %lock587 to i32
  %131 = load i32, ptr %cpu501, align 4
  %arrayidx591 = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %131
  %132 = load i32, ptr %arrayidx591, align 4
  %add592 = add i32 %132, %130
  %133 = inttoptr i32 %add592 to ptr
  tail call fastcc void @local_lock_release(ptr noundef %133) #25
  br i1 %tobool486.not, label %if.then602, label %do.body604

if.then602:                                       ; preds = %do.body580
  tail call void @trace_hardirqs_on() #27
  br label %do.body604

do.body604:                                       ; preds = %if.then602, %do.body580
  %134 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ local_save_flags", "=r,~{memory},~{cc}"() #24, !srcloc !20
  %and.i.i41 = and i32 %134, 128
  %tobool612.not = icmp eq i32 %and.i.i41, 0
  br i1 %tobool612.not, label %if.then621, label %do.end624, !prof !13

if.then621:                                       ; preds = %do.body604
  tail call void @warn_bogus_irq_restore() #27
  br label %do.end624

do.end624:                                        ; preds = %if.then621, %do.body604
  tail call void asm sideeffect "\09msr\09cpsr_c, $0\09@ local_irq_restore", "r,~{memory},~{cc}"(i32 %113) #24, !srcloc !21
  br label %new_objects

if.end631:                                        ; preds = %if.end567
  %slab506.le = getelementptr inbounds %struct.kmem_cache_cpu, ptr %c.addr.3, i32 0, i32 2
  store ptr %128, ptr %slab506.le, align 4
  store ptr %128, ptr %slab, align 4
  %135 = getelementptr inbounds %struct.slab, ptr %128, i32 0, i32 1
  %136 = load ptr, ptr %135, align 4
  store ptr %136, ptr %partial, align 4
  %137 = load ptr, ptr %s, align 4
  %lock644 = getelementptr inbounds %struct.kmem_cache_cpu, ptr %137, i32 0, i32 4
  %138 = ptrtoint ptr %lock644 to i32
  %139 = load i32, ptr %cpu501, align 4
  %arrayidx648 = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %139
  %140 = load i32, ptr %arrayidx648, align 4
  %add649 = add i32 %140, %138
  %141 = inttoptr i32 %add649 to ptr
  tail call fastcc void @local_lock_release(ptr noundef %141) #25
  br i1 %tobool486.not, label %if.then659, label %do.body661

if.then659:                                       ; preds = %if.end631
  tail call void @trace_hardirqs_on() #27
  br label %do.body661

do.body661:                                       ; preds = %if.then659, %if.end631
  %142 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ local_save_flags", "=r,~{memory},~{cc}"() #24, !srcloc !20
  %and.i.i43 = and i32 %142, 128
  %tobool669.not = icmp eq i32 %and.i.i43, 0
  br i1 %tobool669.not, label %if.then678, label %do.end681, !prof !13

if.then678:                                       ; preds = %do.body661
  tail call void @warn_bogus_irq_restore() #27
  br label %do.end681

do.end681:                                        ; preds = %if.then678, %do.body661
  tail call void asm sideeffect "\09msr\09cpsr_c, $0\09@ local_irq_restore", "r,~{memory},~{cc}"(i32 %113) #24, !srcloc !21
  %143 = load ptr, ptr %s, align 4
  %arrayidx.i44 = getelementptr %struct.kmem_cache_cpu, ptr %143, i32 0, i32 5, i32 22
  %144 = ptrtoint ptr %arrayidx.i44 to i32
  %145 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i45 = and i32 %145, -16384
  %146 = inttoptr i32 %and.i.i45 to ptr
  %cpu.i46 = getelementptr inbounds %struct.thread_info, ptr %146, i32 0, i32 3
  %147 = load i32, ptr %cpu.i46, align 4
  %arrayidx7.i47 = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %147
  %148 = load i32, ptr %arrayidx7.i47, align 4
  %add.i48 = add i32 %148, %144
  %149 = inttoptr i32 %add.i48 to ptr
  %150 = load i32, ptr %149, align 4
  %add8.i49 = add i32 %150, 1
  store i32 %add8.i49, ptr %149, align 4
  br label %redo

new_objects:                                      ; preds = %do.end624, %new_slab
  %151 = load ptr, ptr %arrayidx.i.i, align 4
  %call2.i50 = call fastcc ptr @get_partial_node(ptr noundef %s, ptr noundef %151, ptr noundef nonnull %slab, i32 noundef %gfpflags) #27
  %tobool690.not = icmp eq ptr %call2.i50, null
  br i1 %tobool690.not, label %do.body693, label %check_new_slab

do.body693:                                       ; preds = %new_objects
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !45
  %152 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i = and i32 %152, -16384
  %153 = inttoptr i32 %and.i.i.i to ptr
  %preempt_count.i.i = getelementptr inbounds %struct.thread_info, ptr %153, i32 0, i32 1
  %154 = load volatile i32, ptr %preempt_count.i.i, align 4
  %sub.i = add i32 %154, -1
  store volatile i32 %sub.i, ptr %preempt_count.i.i, align 4
  br i1 %tobool.not.i52, label %if.end.i55, label %if.then.i54, !prof !14

if.then.i54:                                      ; preds = %do.body693
  %call.i53 = tail call i32 @kmalloc_fix_flags(i32 noundef %gfpflags) #27
  br label %if.end.i55

if.end.i55:                                       ; preds = %if.then.i54, %do.body693
  %flags.addr.0.i = phi i32 [ %call.i53, %if.then.i54 ], [ %gfpflags, %do.body693 ]
  %155 = load ptr, ptr %ctor.i, align 4
  %tobool3.i = icmp ne ptr %155, null
  %and4.i = and i32 %flags.addr.0.i, 256
  %tobool5.i = icmp ne i32 %and4.i, 0
  %156 = select i1 %tobool3.i, i1 %tobool5.i, i1 false
  %.b60.i = load i1, ptr @new_slab.__already_done, align 1
  %lnot13.i = xor i1 %.b60.i, true
  %157 = select i1 %156, i1 %lnot13.i, i1 false
  br i1 %157, label %if.then22.i, label %new_slab.exit, !prof !13

if.then22.i:                                      ; preds = %if.end.i55
  store i1 true, ptr @new_slab.__already_done, align 1
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.2, i32 noundef 2002, i32 noundef 9, ptr noundef null) #27
  br label %new_slab.exit

new_slab.exit:                                    ; preds = %if.then22.i, %if.end.i55
  %and52.i = and i32 %flags.addr.0.i, 37482208
  %call53.i = tail call fastcc ptr @allocate_slab(ptr noundef %s, i32 noundef %and52.i, i32 noundef -1) #27
  store ptr %call53.i, ptr %slab, align 4
  %158 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i1 = and i32 %158, -16384
  %159 = inttoptr i32 %and.i.i.i1 to ptr
  %preempt_count.i.i2 = getelementptr inbounds %struct.thread_info, ptr %159, i32 0, i32 1
  %160 = load volatile i32, ptr %preempt_count.i.i2, align 4
  %add.i = add i32 %160, 1
  store volatile i32 %add.i, ptr %preempt_count.i.i2, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !46
  %tobool717.not = icmp eq ptr %call53.i, null
  br i1 %tobool717.not, label %if.then726, label %if.end727, !prof !13

if.then726:                                       ; preds = %new_slab.exit
  tail call fastcc void @slab_out_of_memory(ptr noundef %s, i32 noundef %gfpflags) #25
  br label %cleanup

if.end727:                                        ; preds = %new_slab.exit
  %161 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i56 = and i32 %161, -16384
  %162 = inttoptr i32 %and.i56 to ptr
  %cpu714 = getelementptr inbounds %struct.thread_info, ptr %162, i32 0, i32 3
  %163 = load i32, ptr %cpu714, align 4
  %arrayidx715 = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %163
  %164 = load i32, ptr %arrayidx715, align 4
  %165 = load ptr, ptr %s, align 4
  %166 = ptrtoint ptr %165 to i32
  %add716 = add i32 %164, %166
  %167 = inttoptr i32 %add716 to ptr
  %freelist728 = getelementptr inbounds %struct.slab, ptr %call53.i, i32 0, i32 3
  %168 = load ptr, ptr %freelist728, align 4
  store ptr null, ptr %freelist728, align 4
  %169 = load ptr, ptr %s, align 4
  %arrayidx.i57 = getelementptr %struct.kmem_cache_cpu, ptr %169, i32 0, i32 5, i32 8
  %170 = ptrtoint ptr %arrayidx.i57 to i32
  %171 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i58 = and i32 %171, -16384
  %172 = inttoptr i32 %and.i.i58 to ptr
  %cpu.i59 = getelementptr inbounds %struct.thread_info, ptr %172, i32 0, i32 3
  %173 = load i32, ptr %cpu.i59, align 4
  %arrayidx7.i60 = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %173
  %174 = load i32, ptr %arrayidx7.i60, align 4
  %add.i61 = add i32 %174, %170
  %175 = inttoptr i32 %add.i61 to ptr
  %176 = load i32, ptr %175, align 4
  %add8.i62 = add i32 %176, 1
  store i32 %add8.i62, ptr %175, align 4
  br label %check_new_slab

check_new_slab:                                   ; preds = %if.end727, %new_objects
  %freelist.1 = phi ptr [ %call2.i50, %new_objects ], [ %168, %if.end727 ]
  %c.addr.4 = phi ptr [ %c.addr.3, %new_objects ], [ %167, %if.end727 ]
  callbr void asm sideeffect "1:\0A\09b ${1:l}\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr nonnull @slub_debug_enabled, ptr blockaddress(@___slab_alloc, %if.then37.i.i)) #24
          to label %if.end736 [label %if.then37.i.i], !srcloc !10

if.then37.i.i:                                    ; preds = %check_new_slab
  %177 = load i32, ptr %flags38.i.i, align 4
  %and39.i.i = and i32 %177, 2166016
  %tobool40.i.i.not = icmp eq i32 %and39.i.i, 0
  br i1 %tobool40.i.i.not, label %if.end736, label %if.then731

if.then731:                                       ; preds = %if.then37.i.i
  %178 = load ptr, ptr %slab, align 4
  %call732 = tail call fastcc i32 @alloc_debug_processing(ptr noundef %s, ptr noundef %178, ptr noundef %freelist.1, i32 noundef %addr) #25
  %tobool733.not = icmp eq i32 %call732, 0
  br i1 %tobool733.not, label %new_slab, label %return_single

if.end736:                                        ; preds = %if.then37.i.i, %check_new_slab
  %179 = load ptr, ptr %slab, align 4
  %180 = getelementptr inbounds %struct.page, ptr %179, i32 0, i32 1
  %181 = load volatile i32, ptr %180, align 4
  %and.i.i.i.i.i63 = and i32 %181, 1
  %tobool.not.i.i.i.i64 = icmp eq i32 %and.i.i.i.i.i63, 0
  br i1 %tobool.not.i.i.i.i64, label %slab_test_pfmemalloc.exit.i67, label %if.then.i.i.i.i65, !prof !14

if.then.i.i.i.i65:                                ; preds = %if.end736
  tail call void @dump_page(ptr noundef %179, ptr noundef nonnull @.str.29) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 260, 0\0A.popsection", ""() #24, !srcloc !28
  unreachable

slab_test_pfmemalloc.exit.i67:                    ; preds = %if.end736
  %182 = load volatile i32, ptr %179, align 4
  %183 = and i32 %182, 32
  %tobool.i.i.not.i66 = icmp eq i32 %183, 0
  br i1 %tobool.i.i.not.i66, label %retry_load_slab.preheader, label %if.then.i69, !prof !14

if.then.i69:                                      ; preds = %slab_test_pfmemalloc.exit.i67
  %call2.i68 = tail call zeroext i1 @gfp_pfmemalloc_allowed(i32 noundef %gfpflags) #27
  br i1 %call2.i68, label %retry_load_slab.preheader, label %return_single, !prof !14

retry_load_slab.preheader:                        ; preds = %if.then.i69, %slab_test_pfmemalloc.exit.i67
  %slab786 = getelementptr inbounds %struct.kmem_cache_cpu, ptr %c.addr.4, i32 0, i32 2
  %tid799 = getelementptr inbounds %struct.kmem_cache_cpu, ptr %c.addr.4, i32 0, i32 1
  br label %retry_load_slab

retry_load_slab:                                  ; preds = %do.end847, %retry_load_slab.preheader
  %184 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ arch_local_irq_save\0A\09cpsid\09i", "=r,~{memory},~{cc}"() #24, !srcloc !19
  %and.i72 = and i32 %184, 128
  %tobool766.not = icmp eq i32 %and.i72, 0
  br i1 %tobool766.not, label %if.then767, label %do.body771

if.then767:                                       ; preds = %retry_load_slab
  tail call void @trace_hardirqs_off() #27
  br label %do.body771

do.body771:                                       ; preds = %if.then767, %retry_load_slab
  %185 = load ptr, ptr %s, align 4
  %lock778 = getelementptr inbounds %struct.kmem_cache_cpu, ptr %185, i32 0, i32 4
  %186 = ptrtoint ptr %lock778 to i32
  %187 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i73 = and i32 %187, -16384
  %188 = inttoptr i32 %and.i73 to ptr
  %cpu781 = getelementptr inbounds %struct.thread_info, ptr %188, i32 0, i32 3
  %189 = load i32, ptr %cpu781, align 4
  %arrayidx782 = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %189
  %190 = load i32, ptr %arrayidx782, align 4
  %add783 = add i32 %190, %186
  %191 = inttoptr i32 %add783 to ptr
  tail call fastcc void @local_lock_acquire(ptr noundef %191) #25
  %192 = load ptr, ptr %slab786, align 4
  %tobool787.not = icmp eq ptr %192, null
  br i1 %tobool787.not, label %if.end854, label %if.then794, !prof !14

if.then794:                                       ; preds = %do.body771
  %193 = load ptr, ptr %c.addr.4, align 4
  store ptr null, ptr %slab786, align 4
  store ptr null, ptr %c.addr.4, align 4
  %194 = load i32, ptr %tid799, align 4
  %add.i74 = add i32 %194, 1
  store i32 %add.i74, ptr %tid799, align 4
  %195 = load ptr, ptr %s, align 4
  %lock810 = getelementptr inbounds %struct.kmem_cache_cpu, ptr %195, i32 0, i32 4
  %196 = ptrtoint ptr %lock810 to i32
  %197 = load i32, ptr %cpu781, align 4
  %arrayidx814 = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %197
  %198 = load i32, ptr %arrayidx814, align 4
  %add815 = add i32 %198, %196
  %199 = inttoptr i32 %add815 to ptr
  tail call fastcc void @local_lock_release(ptr noundef %199) #25
  br i1 %tobool766.not, label %if.then825, label %do.body827

if.then825:                                       ; preds = %if.then794
  tail call void @trace_hardirqs_on() #27
  br label %do.body827

do.body827:                                       ; preds = %if.then825, %if.then794
  %200 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ local_save_flags", "=r,~{memory},~{cc}"() #24, !srcloc !20
  %and.i.i76 = and i32 %200, 128
  %tobool835.not = icmp eq i32 %and.i.i76, 0
  br i1 %tobool835.not, label %if.then844, label %do.end847, !prof !13

if.then844:                                       ; preds = %do.body827
  tail call void @warn_bogus_irq_restore() #27
  br label %do.end847

do.end847:                                        ; preds = %if.then844, %do.body827
  tail call void asm sideeffect "\09msr\09cpsr_c, $0\09@ local_irq_restore", "r,~{memory},~{cc}"(i32 %184) #24, !srcloc !21
  tail call fastcc void @deactivate_slab(ptr noundef %s, ptr noundef nonnull %192, ptr noundef %193) #25
  %201 = load ptr, ptr %s, align 4
  %arrayidx.i77 = getelementptr %struct.kmem_cache_cpu, ptr %201, i32 0, i32 5, i32 12
  %202 = ptrtoint ptr %arrayidx.i77 to i32
  %203 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i78 = and i32 %203, -16384
  %204 = inttoptr i32 %and.i.i78 to ptr
  %cpu.i79 = getelementptr inbounds %struct.thread_info, ptr %204, i32 0, i32 3
  %205 = load i32, ptr %cpu.i79, align 4
  %arrayidx7.i80 = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %205
  %206 = load i32, ptr %arrayidx7.i80, align 4
  %add.i81 = add i32 %206, %202
  %207 = inttoptr i32 %add.i81 to ptr
  %208 = load i32, ptr %207, align 4
  %add8.i82 = add i32 %208, 1
  store i32 %add8.i82, ptr %207, align 4
  br label %retry_load_slab

if.end854:                                        ; preds = %do.body771
  %209 = load ptr, ptr %slab, align 4
  store ptr %209, ptr %slab786, align 4
  br label %do.body186

return_single:                                    ; preds = %if.then.i69, %if.then731
  %210 = phi ptr [ %179, %if.then.i69 ], [ %178, %if.then731 ]
  %offset.i83 = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 6
  %211 = load i32, ptr %offset.i83, align 4
  %add.ptr.i84 = getelementptr i8, ptr %freelist.1, i32 %211
  %212 = load i32, ptr %add.ptr.i84, align 4
  %213 = ptrtoint ptr %add.ptr.i84 to i32
  %random.i.i.i85 = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 21
  %214 = load i32, ptr %random.i.i.i85, align 4
  %215 = tail call i32 @llvm.bswap.i32(i32 %213) #24
  %xor.i.i.i86 = xor i32 %214, %212
  %xor2.i.i.i87 = xor i32 %xor.i.i.i86, %215
  %216 = inttoptr i32 %xor2.i.i.i87 to ptr
  tail call fastcc void @deactivate_slab(ptr noundef %s, ptr noundef %210, ptr noundef %216) #25
  br label %cleanup

cleanup:                                          ; preds = %return_single, %if.then726, %do.end309
  %retval.0 = phi ptr [ %freelist.1, %return_single ], [ %freelist.0, %do.end309 ], [ null, %if.then726 ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %slab) #24
  ret ptr %retval.0
}

; Function Attrs: null_pointer_is_valid
declare dso_local void @__kmem_cache_free_bulk(ptr noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define dso_local void @__kmem_cache_release(ptr noundef %s) local_unnamed_addr #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  tail call void @cache_random_seq_destroy(ptr noundef %s) #27
  %0 = load ptr, ptr %s, align 4
  tail call void @free_percpu(ptr noundef %0) #27
  %arrayidx.i.i = getelementptr %struct.kmem_cache, ptr %s, i32 0, i32 26, i32 0
  %1 = load ptr, ptr %arrayidx.i.i, align 4
  %tobool.not.i = icmp eq ptr %1, null
  br i1 %tobool.not.i, label %free_kmem_cache_nodes.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  store ptr null, ptr %arrayidx.i.i, align 4
  %2 = load ptr, ptr @kmem_cache_node, align 4
  tail call void @kmem_cache_free(ptr noundef %2, ptr noundef nonnull %1) #27
  br label %free_kmem_cache_nodes.exit

free_kmem_cache_nodes.exit:                       ; preds = %if.then.i, %entry
  ret void
}

; Function Attrs: null_pointer_is_valid
declare dso_local void @cache_random_seq_destroy(ptr noundef) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local void @free_percpu(ptr noundef) local_unnamed_addr #3

; Function Attrs: nofree norecurse nounwind null_pointer_is_valid sspstrong uwtable(sync)
define dso_local zeroext i1 @__kmem_cache_empty(ptr nocapture noundef readonly %s) local_unnamed_addr #7 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %arrayidx.i = getelementptr %struct.kmem_cache, ptr %s, i32 0, i32 26, i32 0
  %0 = load ptr, ptr %arrayidx.i, align 4
  %tobool.not = icmp eq ptr %0, null
  %nr_slabs.i = getelementptr inbounds %struct.kmem_cache_node, ptr %0, i32 0, i32 3
  br i1 %tobool.not, label %for.inc, label %if.then

if.then:                                          ; preds = %entry
  %nr_partial = getelementptr inbounds %struct.kmem_cache_node, ptr %0, i32 0, i32 1
  %1 = load i32, ptr %nr_partial, align 4
  %tobool1.not = icmp eq i32 %1, 0
  br i1 %tobool1.not, label %lor.lhs.false, label %cleanup

lor.lhs.false:                                    ; preds = %if.then
  %2 = load volatile i32, ptr %nr_slabs.i, align 4
  %tobool3.not = icmp eq i32 %2, 0
  br i1 %tobool3.not, label %for.inc, label %cleanup

for.inc:                                          ; preds = %lor.lhs.false, %entry
  br label %cleanup

cleanup:                                          ; preds = %for.inc, %lor.lhs.false, %if.then
  %cmp.lcssa = phi i1 [ true, %for.inc ], [ false, %if.then ], [ false, %lor.lhs.false ]
  ret i1 %cmp.lcssa
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define dso_local i32 @__kmem_cache_shutdown(ptr noundef %s) local_unnamed_addr #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %discard.i = alloca %struct.list_head, align 4
  tail call fastcc void @flush_all_cpus_locked(ptr noundef %s) #25
  %arrayidx.i = getelementptr %struct.kmem_cache, ptr %s, i32 0, i32 26, i32 0
  %0 = load ptr, ptr %arrayidx.i, align 4
  %tobool.not = icmp eq ptr %0, null
  br i1 %tobool.not, label %for.end, label %if.then

if.then:                                          ; preds = %entry
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %discard.i) #24
  %1 = getelementptr inbounds %struct.list_head, ptr %discard.i, i32 0, i32 1
  store ptr %discard.i, ptr %discard.i, align 4
  store ptr %discard.i, ptr %1, align 4
  %2 = call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ local_save_flags", "=r,~{memory},~{cc}"() #24, !srcloc !20
  %and.i.i = and i32 %2, 128
  %tobool.not.i = icmp eq i32 %and.i.i, 0
  br i1 %tobool.not.i, label %do.end19.i, label %do.body12.i, !prof !14

do.body12.i:                                      ; preds = %if.then
  call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slub.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 4278, 0\0A.popsection", ""() #24, !srcloc !47
  unreachable

do.end19.i:                                       ; preds = %if.then
  call void @_raw_spin_lock_irq(ptr noundef nonnull %0) #27
  %partial.i = getelementptr inbounds %struct.kmem_cache_node, ptr %0, i32 0, i32 2
  %3 = load ptr, ptr %partial.i, align 4
  %cmp27.not81.i = icmp eq ptr %3, %partial.i
  br i1 %cmp27.not81.i, label %for.end.i, label %for.body.lr.ph.i

for.body.lr.ph.i:                                 ; preds = %do.end19.i
  %dep_map.i.i = getelementptr inbounds %struct.anon.15, ptr %0, i32 0, i32 1
  %nr_partial.i.i = getelementptr inbounds %struct.kmem_cache_node, ptr %0, i32 0, i32 1
  br label %for.body.i

for.body.i:                                       ; preds = %for.inc.i, %for.body.lr.ph.i
  %.pn.in82.i = phi ptr [ %3, %for.body.lr.ph.i ], [ %.pn85.i, %for.inc.i ]
  %.pn85.i = load ptr, ptr %.pn.in82.i, align 4
  %4 = getelementptr i8, ptr %.pn.in82.i, i32 16
  %bf.load.i = load i32, ptr %4, align 4
  %tobool31.not.i = icmp ult i32 %bf.load.i, 65536
  br i1 %tobool31.not.i, label %if.then32.i, label %if.else.i

if.then32.i:                                      ; preds = %for.body.i
  %5 = load i32, ptr @debug_locks, align 4
  %tobool.not.i.i = icmp eq i32 %5, 0
  br i1 %tobool.not.i.i, label %if.end.i.i, label %land.rhs.i.i

land.rhs.i.i:                                     ; preds = %if.then32.i
  %call.i.i.i = call i32 @lock_is_held_type(ptr noundef %dep_map.i.i, i32 noundef -1) #27
  %cmp.not.i.i = icmp eq i32 %call.i.i.i, 0
  br i1 %cmp.not.i.i, label %do.end.i.i, label %if.end.i.i, !prof !13

do.end.i.i:                                       ; preds = %land.rhs.i.i
  call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.2, i32 noundef 2075, i32 noundef 9, ptr noundef null) #27
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %do.end.i.i, %land.rhs.i.i, %if.then32.i
  %call.i.i.i.i = call zeroext i1 @__list_del_entry_valid(ptr noundef %.pn.in82.i) #27
  br i1 %call.i.i.i.i, label %if.end.i.i.i.i, label %remove_partial.exit.i

if.end.i.i.i.i:                                   ; preds = %if.end.i.i
  %prev.i.i.i.i = getelementptr i8, ptr %.pn.in82.i, i32 4
  %6 = load ptr, ptr %prev.i.i.i.i, align 4
  %7 = load ptr, ptr %.pn.in82.i, align 4
  %prev1.i.i.i.i.i = getelementptr inbounds %struct.list_head, ptr %7, i32 0, i32 1
  store ptr %6, ptr %prev1.i.i.i.i.i, align 4
  store volatile ptr %7, ptr %6, align 4
  br label %remove_partial.exit.i

remove_partial.exit.i:                            ; preds = %if.end.i.i.i.i, %if.end.i.i
  store ptr inttoptr (i32 256 to ptr), ptr %.pn.in82.i, align 4
  %prev.i.i.i = getelementptr i8, ptr %.pn.in82.i, i32 4
  store ptr inttoptr (i32 290 to ptr), ptr %prev.i.i.i, align 4
  %8 = load i32, ptr %nr_partial.i.i, align 4
  %dec.i.i = add i32 %8, -1
  store i32 %dec.i.i, ptr %nr_partial.i.i, align 4
  %9 = load ptr, ptr %discard.i, align 4
  %call.i.i78.i = call zeroext i1 @__list_add_valid(ptr noundef %.pn.in82.i, ptr noundef nonnull %discard.i, ptr noundef %9) #27
  br i1 %call.i.i78.i, label %if.end.i.i.i, label %for.inc.i

if.end.i.i.i:                                     ; preds = %remove_partial.exit.i
  %prev1.i.i.i = getelementptr inbounds %struct.list_head, ptr %9, i32 0, i32 1
  store ptr %.pn.in82.i, ptr %prev1.i.i.i, align 4
  store ptr %9, ptr %.pn.in82.i, align 4
  store ptr %discard.i, ptr %prev.i.i.i, align 4
  store volatile ptr %.pn.in82.i, ptr %discard.i, align 4
  br label %for.inc.i

if.else.i:                                        ; preds = %for.body.i
  %slab.084.i = getelementptr i8, ptr %.pn.in82.i, i32 -4
  call fastcc void @list_slab_objects(ptr noundef %s, ptr noundef %slab.084.i) #27
  br label %for.inc.i

for.inc.i:                                        ; preds = %if.else.i, %if.end.i.i.i, %remove_partial.exit.i
  %cmp27.not.i = icmp eq ptr %.pn85.i, %partial.i
  br i1 %cmp27.not.i, label %for.end.i, label %for.body.i

for.end.i:                                        ; preds = %for.inc.i, %do.end19.i
  call void @_raw_spin_unlock_irq(ptr noundef nonnull %0) #27
  %10 = load ptr, ptr %discard.i, align 4
  %cmp48.not86.i = icmp eq ptr %10, %discard.i
  br i1 %cmp48.not86.i, label %free_partial.exit, label %for.body52.lr.ph.i

for.body52.lr.ph.i:                               ; preds = %for.end.i
  %flags.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 1
  br label %for.body52.i

for.body52.i:                                     ; preds = %discard_slab.exit.i, %for.body52.lr.ph.i
  %.pn75.in87.i = phi ptr [ %10, %for.body52.lr.ph.i ], [ %.pn75.i, %discard_slab.exit.i ]
  %slab.1.i = getelementptr i8, ptr %.pn75.in87.i, i32 -4
  %.pn75.i = load ptr, ptr %.pn75.in87.i, align 4
  %11 = load volatile i32, ptr %slab.1.i, align 4
  %cmp.i.not.i.i.i.i.i = icmp eq i32 %11, -1
  br i1 %cmp.i.not.i.i.i.i.i, label %if.then.i.i.i.i.i, label %slab_nid.exit.i.i, !prof !13

if.then.i.i.i.i.i:                                ; preds = %for.body52.i
  call void @dump_page(ptr noundef %slab.1.i, ptr noundef nonnull @.str.88) #27
  call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/mm.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 1368, 0\0A.popsection", ""() #24, !srcloc !37
  unreachable

slab_nid.exit.i.i:                                ; preds = %for.body52.i
  %12 = getelementptr i8, ptr %.pn75.in87.i, i32 16
  %bf.load.i.i = load i32, ptr %12, align 4
  %bf.lshr.i.i = lshr i32 %bf.load.i.i, 1
  %bf.clear.i.i = and i32 %bf.lshr.i.i, 32767
  %13 = load ptr, ptr %arrayidx.i, align 4
  %nr_slabs.i.i.i = getelementptr inbounds %struct.kmem_cache_node, ptr %13, i32 0, i32 3
  call void @llvm.prefetch.p0(ptr %nr_slabs.i.i.i, i32 1, i32 3, i32 1) #24
  %14 = call { i32, i32 } asm sideeffect "@ atomic_sub\0A1:\09ldrex\09$0, [$3]\0A\09sub\09$0, $0, $4\0A\09strex\09$1, $0, [$3]\0A\09teq\09$1, #0\0A\09bne\091b", "=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %nr_slabs.i.i.i, ptr %nr_slabs.i.i.i, i32 1, ptr elementtype(i32) %nr_slabs.i.i.i) #24, !srcloc !48
  %total_objects.i.i.i = getelementptr inbounds %struct.kmem_cache_node, ptr %13, i32 0, i32 4
  call void @llvm.prefetch.p0(ptr %total_objects.i.i.i, i32 1, i32 3, i32 1) #24
  %15 = call { i32, i32 } asm sideeffect "@ atomic_sub\0A1:\09ldrex\09$0, [$3]\0A\09sub\09$0, $0, $4\0A\09strex\09$1, $0, [$3]\0A\09teq\09$1, #0\0A\09bne\091b", "=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %total_objects.i.i.i, ptr %total_objects.i.i.i, i32 %bf.clear.i.i, ptr elementtype(i32) %total_objects.i.i.i) #24, !srcloc !48
  %16 = load i32, ptr %flags.i.i.i, align 4
  %and.i.i.i = and i32 %16, 524288
  %tobool.not.i.i.i = icmp eq i32 %and.i.i.i, 0
  br i1 %tobool.not.i.i.i, label %if.else.i.i.i, label %if.then.i.i.i, !prof !14

if.then.i.i.i:                                    ; preds = %slab_nid.exit.i.i
  call void @call_rcu(ptr noundef %.pn75.in87.i, ptr noundef nonnull @rcu_free_slab) #27
  br label %discard_slab.exit.i

if.else.i.i.i:                                    ; preds = %slab_nid.exit.i.i
  call fastcc void @__free_slab(ptr noundef %s, ptr noundef %slab.1.i) #28
  br label %discard_slab.exit.i

discard_slab.exit.i:                              ; preds = %if.else.i.i.i, %if.then.i.i.i
  %cmp48.not.i = icmp eq ptr %.pn75.i, %discard.i
  br i1 %cmp48.not.i, label %free_partial.exit, label %for.body52.i

free_partial.exit:                                ; preds = %discard_slab.exit.i, %for.end.i
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %discard.i) #24
  %nr_partial = getelementptr inbounds %struct.kmem_cache_node, ptr %0, i32 0, i32 1
  %17 = load i32, ptr %nr_partial, align 4
  %tobool1.not = icmp eq i32 %17, 0
  br i1 %tobool1.not, label %lor.lhs.false, label %cleanup

lor.lhs.false:                                    ; preds = %free_partial.exit
  %18 = load ptr, ptr %arrayidx.i, align 4
  %nr_slabs.i = getelementptr inbounds %struct.kmem_cache_node, ptr %18, i32 0, i32 3
  %19 = load volatile i32, ptr %nr_slabs.i, align 4
  %tobool3.not = icmp eq i32 %19, 0
  br i1 %tobool3.not, label %for.end, label %cleanup

for.end:                                          ; preds = %lor.lhs.false, %entry
  br label %cleanup

cleanup:                                          ; preds = %for.end, %lor.lhs.false, %free_partial.exit
  %retval.0 = phi i32 [ 0, %for.end ], [ 1, %lor.lhs.false ], [ 1, %free_partial.exit ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc void @flush_all_cpus_locked(ptr noundef %s) unnamed_addr #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  tail call void @lockdep_assert_cpus_held() #27
  tail call void @mutex_lock_nested(ptr noundef nonnull @flush_lock, i32 noundef 0) #27
  %call52 = tail call i32 @cpumask_next(i32 noundef -1, ptr noundef nonnull @__cpu_online_mask) #29
  %0 = load i32, ptr @nr_cpu_ids, align 4
  %cmp53 = icmp ult i32 %call52, %0
  br i1 %cmp53, label %do.body, label %for.cond15.preheader

for.cond15.preheader:                             ; preds = %for.cond.backedge, %entry
  %1 = phi i32 [ %0, %entry ], [ %10, %for.cond.backedge ]
  %call1655 = tail call i32 @cpumask_next(i32 noundef -1, ptr noundef nonnull @__cpu_online_mask) #29
  %cmp1756 = icmp ult i32 %call1655, %1
  br i1 %cmp1756, label %do.body19, label %for.end33

do.body:                                          ; preds = %for.cond.backedge, %entry
  %2 = phi i32 [ %10, %for.cond.backedge ], [ %0, %entry ]
  %call54 = phi i32 [ %call, %for.cond.backedge ], [ %call52, %entry ]
  %arrayidx = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %call54
  %3 = load i32, ptr %arrayidx, align 4
  %add = add i32 %3, ptrtoint (ptr @slub_flush to i32)
  %4 = inttoptr i32 %add to ptr
  %5 = load ptr, ptr %s, align 4
  %6 = ptrtoint ptr %5 to i32
  %add.i = add i32 %3, %6
  %7 = inttoptr i32 %add.i to ptr
  %slab.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %7, i32 0, i32 2
  %8 = load ptr, ptr %slab.i, align 4
  %tobool.not.i = icmp eq ptr %8, null
  br i1 %tobool.not.i, label %has_cpu_slab.exit, label %do.body3

has_cpu_slab.exit:                                ; preds = %do.body
  %partial.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %7, i32 0, i32 3
  %9 = load ptr, ptr %partial.i, align 4
  %tobool2.i.not = icmp eq ptr %9, null
  br i1 %tobool2.i.not, label %if.then, label %do.body3

if.then:                                          ; preds = %has_cpu_slab.exit
  %skip = getelementptr inbounds %struct.slub_flush_work, ptr %4, i32 0, i32 2
  store i8 1, ptr %skip, align 4
  br label %for.cond.backedge

for.cond.backedge:                                ; preds = %do.body3, %if.then
  %10 = phi i32 [ %2, %if.then ], [ %.pre, %do.body3 ]
  %call = tail call i32 @cpumask_next(i32 noundef %call54, ptr noundef nonnull @__cpu_online_mask) #29
  %cmp = icmp ult i32 %call, %10
  br i1 %cmp, label %do.body, label %for.cond15.preheader

do.body3:                                         ; preds = %has_cpu_slab.exit, %do.body
  tail call void @__init_work(ptr noundef %4, i32 noundef 0) #27
  store i32 -64, ptr %4, align 4
  %lockdep_map = getelementptr inbounds %struct.work_struct, ptr %4, i32 0, i32 3
  tail call void @lockdep_init_map_type(ptr noundef %lockdep_map, ptr noundef nonnull @.str.119, ptr noundef nonnull @flush_all_cpus_locked.__key, i32 noundef 0, i8 noundef zeroext 0, i8 noundef zeroext 0, i8 noundef zeroext 0) #27
  %entry7 = getelementptr inbounds %struct.work_struct, ptr %4, i32 0, i32 1
  store volatile ptr %entry7, ptr %entry7, align 4
  %prev.i = getelementptr inbounds %struct.work_struct, ptr %4, i32 0, i32 1, i32 1
  store ptr %entry7, ptr %prev.i, align 4
  %func = getelementptr inbounds %struct.work_struct, ptr %4, i32 0, i32 2
  store ptr @flush_cpu_slab, ptr %func, align 4
  %skip11 = getelementptr inbounds %struct.slub_flush_work, ptr %4, i32 0, i32 2
  store i8 0, ptr %skip11, align 4
  %s12 = getelementptr inbounds %struct.slub_flush_work, ptr %4, i32 0, i32 1
  store ptr %s, ptr %s12, align 4
  %11 = load ptr, ptr @system_wq, align 4
  %call.i = tail call zeroext i1 @queue_work_on(i32 noundef %call54, ptr noundef %11, ptr noundef %4) #27
  %.pre = load i32, ptr @nr_cpu_ids, align 4
  br label %for.cond.backedge

do.body19:                                        ; preds = %for.cond15.backedge, %for.cond15.preheader
  %12 = phi i32 [ %16, %for.cond15.backedge ], [ %1, %for.cond15.preheader ]
  %call1657 = phi i32 [ %call16, %for.cond15.backedge ], [ %call1655, %for.cond15.preheader ]
  %arrayidx26 = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %call1657
  %13 = load i32, ptr %arrayidx26, align 4
  %add27 = add i32 %13, ptrtoint (ptr @slub_flush to i32)
  %14 = inttoptr i32 %add27 to ptr
  %skip28 = getelementptr inbounds %struct.slub_flush_work, ptr %14, i32 0, i32 2
  %15 = load i8, ptr %skip28, align 4, !range !49
  %tobool.not = icmp eq i8 %15, 0
  br i1 %tobool.not, label %if.end30, label %for.cond15.backedge

if.end30:                                         ; preds = %do.body19
  %call32 = tail call zeroext i1 @flush_work(ptr noundef %14) #27
  %.pre58 = load i32, ptr @nr_cpu_ids, align 4
  br label %for.cond15.backedge

for.cond15.backedge:                              ; preds = %if.end30, %do.body19
  %16 = phi i32 [ %.pre58, %if.end30 ], [ %12, %do.body19 ]
  %call16 = tail call i32 @cpumask_next(i32 noundef %call1657, ptr noundef nonnull @__cpu_online_mask) #29
  %cmp17 = icmp ult i32 %call16, %16
  br i1 %cmp17, label %do.body19, label %for.end33

for.end33:                                        ; preds = %for.cond15.backedge, %for.cond15.preheader
  tail call void @mutex_unlock(ptr noundef nonnull @flush_lock) #27
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define dso_local void @kmem_obj_info(ptr nocapture noundef writeonly %kpp, ptr noundef %object, ptr noundef %slab) local_unnamed_addr #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %slab_cache = getelementptr inbounds %struct.slab, ptr %slab, i32 0, i32 2
  %0 = load ptr, ptr %slab_cache, align 4
  store ptr %object, ptr %kpp, align 4
  %kp_slab = getelementptr inbounds %struct.kmem_obj_info, ptr %kpp, i32 0, i32 1
  store ptr %slab, ptr %kp_slab, align 4
  %kp_slab_cache = getelementptr inbounds %struct.kmem_obj_info, ptr %kpp, i32 0, i32 4
  store ptr %0, ptr %kp_slab_cache, align 4
  %call.i.i = tail call ptr @page_address(ptr noundef %slab) #27
  %flags.i = getelementptr inbounds %struct.kmem_cache, ptr %0, i32 0, i32 1
  %1 = load i32, ptr %flags.i, align 4
  %and.i = and i32 %1, 1024
  %tobool.not.i = icmp eq i32 %and.i, 0
  br i1 %tobool.not.i, label %restore_red_left.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %red_left_pad.i = getelementptr inbounds %struct.kmem_cache, ptr %0, i32 0, i32 17
  %2 = load i32, ptr %red_left_pad.i, align 4
  %idx.neg.i = sub i32 0, %2
  %add.ptr.i = getelementptr i8, ptr %object, i32 %idx.neg.i
  br label %restore_red_left.exit

restore_red_left.exit:                            ; preds = %if.then.i, %entry
  %p.addr.0.i = phi ptr [ %add.ptr.i, %if.then.i ], [ %object, %entry ]
  %3 = load ptr, ptr @__kfence_pool, align 4
  %sub.ptr.lhs.cast.i.i = ptrtoint ptr %p.addr.0.i to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint ptr %3 to i32
  %sub.ptr.sub.i.i = sub i32 %sub.ptr.lhs.cast.i.i, %sub.ptr.rhs.cast.i.i
  %cmp.i.i = icmp ult i32 %sub.ptr.sub.i.i, 2097152
  %tobool.i.i = icmp ne ptr %3, null
  %4 = select i1 %cmp.i.i, i1 %tobool.i.i, i1 false
  br i1 %4, label %obj_to_index.exit, label %if.end.i

if.end.i:                                         ; preds = %restore_red_left.exit
  %call.i.i.i = tail call ptr @page_address(ptr noundef %slab) #27
  %sub.ptr.rhs.cast.i5.i = ptrtoint ptr %call.i.i.i to i32
  %sub.ptr.sub.i6.i = sub i32 %sub.ptr.lhs.cast.i.i, %sub.ptr.rhs.cast.i5.i
  %reciprocal_size.i.i = getelementptr inbounds %struct.kmem_cache, ptr %0, i32 0, i32 5
  %.unpack.i.i = load i32, ptr %reciprocal_size.i.i, align 4
  %.elt2.i.i = getelementptr inbounds %struct.kmem_cache, ptr %0, i32 0, i32 5, i32 1
  %.unpack3.i.i = load i32, ptr %.elt2.i.i, align 4
  %R.sroa.2.4.extract.shift.i.i.i = lshr i32 %.unpack3.i.i, 24
  %R.sroa.4.4.extract.shift.i.i.i = lshr i32 %.unpack3.i.i, 16
  %conv.i.i.i = zext i32 %sub.ptr.sub.i6.i to i64
  %conv1.i.i.i = zext i32 %.unpack.i.i to i64
  %mul.i.i.i = mul nuw i64 %conv.i.i.i, %conv1.i.i.i
  %shr.i.i.i = lshr i64 %mul.i.i.i, 32
  %conv2.i.i.i = trunc i64 %shr.i.i.i to i32
  %sub.i.i.i = sub i32 %sub.ptr.sub.i6.i, %conv2.i.i.i
  %shr4.i.i.i = lshr i32 %sub.i.i.i, %R.sroa.2.4.extract.shift.i.i.i
  %add.i.i.i = add i32 %shr4.i.i.i, %conv2.i.i.i
  %conv5.i.i.i = and i32 %R.sroa.4.4.extract.shift.i.i.i, 255
  %shr6.i.i.i = lshr i32 %add.i.i.i, %conv5.i.i.i
  br label %obj_to_index.exit

obj_to_index.exit:                                ; preds = %if.end.i, %restore_red_left.exit
  %retval.0.i = phi i32 [ %shr6.i.i.i, %if.end.i ], [ 0, %restore_red_left.exit ]
  %sub.ptr.lhs.cast = ptrtoint ptr %object to i32
  %sub.ptr.sub = sub i32 %sub.ptr.lhs.cast, %sub.ptr.lhs.cast.i.i
  %kp_data_offset = getelementptr inbounds %struct.kmem_obj_info, ptr %kpp, i32 0, i32 3
  store i32 %sub.ptr.sub, ptr %kp_data_offset, align 4
  %size = getelementptr inbounds %struct.kmem_cache, ptr %0, i32 0, i32 3
  %5 = load i32, ptr %size, align 4
  %mul = mul i32 %5, %retval.0.i
  %add.ptr = getelementptr i8, ptr %call.i.i, i32 %mul
  %kp_objp = getelementptr inbounds %struct.kmem_obj_info, ptr %kpp, i32 0, i32 2
  store ptr %add.ptr, ptr %kp_objp, align 4
  %cmp = icmp ult ptr %add.ptr, %call.i.i
  br i1 %cmp, label %lor.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %obj_to_index.exit
  %6 = getelementptr inbounds %struct.slab, ptr %slab, i32 0, i32 4
  %bf.load = load i32, ptr %6, align 4
  %bf.lshr = lshr i32 %bf.load, 1
  %bf.clear = and i32 %bf.lshr, 32767
  %7 = load i32, ptr %size, align 4
  %mul5 = mul i32 %bf.clear, %7
  %add.ptr6 = getelementptr i8, ptr %call.i.i, i32 %mul5
  %cmp7.not = icmp ult ptr %add.ptr, %add.ptr6
  br i1 %cmp7.not, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %lor.lhs.false
  %rem = urem i32 %mul, %7
  %tobool = icmp ne i32 %rem, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %obj_to_index.exit
  %8 = phi i1 [ true, %lor.lhs.false ], [ true, %obj_to_index.exit ], [ %tobool, %lor.rhs ]
  %.b138 = load i1, ptr @kmem_obj_info.__already_done, align 1
  %lnot15 = xor i1 %.b138, true
  %9 = select i1 %8, i1 %lnot15, i1 false
  br i1 %9, label %if.then, label %if.end39, !prof !13

if.then:                                          ; preds = %lor.end
  store i1 true, ptr @kmem_obj_info.__already_done, align 1
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.2, i32 noundef 4350, i32 noundef 9, ptr noundef null) #27
  br label %if.end39

if.end39:                                         ; preds = %if.then, %lor.end
  br i1 %8, label %cleanup, label %lor.lhs.false48

lor.lhs.false48:                                  ; preds = %if.end39
  %10 = load i32, ptr %flags.i, align 4
  %and = and i32 %10, 65536
  %tobool49.not = icmp eq i32 %and, 0
  br i1 %tobool49.not, label %cleanup, label %if.end51

if.end51:                                         ; preds = %lor.lhs.false48
  callbr void asm sideeffect "1:\0A\09b ${1:l}\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr nonnull @slub_debug_enabled, ptr blockaddress(@kmem_obj_info, %if.then37.i.i)) #24
          to label %fixup_red_left.exit [label %if.then37.i.i], !srcloc !10

if.then37.i.i:                                    ; preds = %if.end51
  %11 = load i32, ptr %flags.i, align 4
  %and39.i.i = and i32 %11, 1024
  %tobool40.i.not.i = icmp eq i32 %and39.i.i, 0
  br i1 %tobool40.i.not.i, label %fixup_red_left.exit, label %if.then.i141

if.then.i141:                                     ; preds = %if.then37.i.i
  %red_left_pad.i139 = getelementptr inbounds %struct.kmem_cache, ptr %0, i32 0, i32 17
  %12 = load i32, ptr %red_left_pad.i139, align 4
  %add.ptr.i140 = getelementptr i8, ptr %add.ptr, i32 %12
  br label %fixup_red_left.exit

fixup_red_left.exit:                              ; preds = %if.then.i141, %if.then37.i.i, %if.end51
  %p.addr.0.i142 = phi ptr [ %add.ptr.i140, %if.then.i141 ], [ %add.ptr, %if.then37.i.i ], [ %add.ptr, %if.end51 ]
  %offset.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %0, i32 0, i32 6
  %13 = load i32, ptr %offset.i.i.i, align 4
  %inuse.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %0, i32 0, i32 15
  %14 = load i32, ptr %inuse.i.i.i, align 4
  %cmp.i.not.i.i = icmp ult i32 %13, %14
  %add.i.i = add i32 %14, 4
  %spec.select.i.i = select i1 %cmp.i.not.i.i, i32 %14, i32 %add.i.i
  %add.ptr.i144 = getelementptr i8, ptr %p.addr.0.i142, i32 %spec.select.i.i
  %15 = load i32, ptr %add.ptr.i144, align 4
  %16 = inttoptr i32 %15 to ptr
  %kp_ret = getelementptr inbounds %struct.kmem_obj_info, ptr %kpp, i32 0, i32 5
  store ptr %16, ptr %kp_ret, align 4
  %arrayidx = getelementptr %struct.track, ptr %add.ptr.i144, i32 0, i32 1, i32 0
  %17 = load i32, ptr %arrayidx, align 4
  %18 = inttoptr i32 %17 to ptr
  %arrayidx58 = getelementptr %struct.kmem_obj_info, ptr %kpp, i32 0, i32 6, i32 0
  store ptr %18, ptr %arrayidx58, align 4
  %tobool61.not = icmp eq i32 %17, 0
  br i1 %tobool61.not, label %for.end, label %for.cond

for.cond:                                         ; preds = %fixup_red_left.exit
  %arrayidx.1 = getelementptr %struct.track, ptr %add.ptr.i144, i32 0, i32 1, i32 1
  %19 = load i32, ptr %arrayidx.1, align 4
  %20 = inttoptr i32 %19 to ptr
  %arrayidx58.1 = getelementptr %struct.kmem_obj_info, ptr %kpp, i32 0, i32 6, i32 1
  store ptr %20, ptr %arrayidx58.1, align 4
  %tobool61.not.1 = icmp eq i32 %19, 0
  br i1 %tobool61.not.1, label %for.end, label %for.cond.1

for.cond.1:                                       ; preds = %for.cond
  %arrayidx.2 = getelementptr %struct.track, ptr %add.ptr.i144, i32 0, i32 1, i32 2
  %21 = load i32, ptr %arrayidx.2, align 4
  %22 = inttoptr i32 %21 to ptr
  %arrayidx58.2 = getelementptr %struct.kmem_obj_info, ptr %kpp, i32 0, i32 6, i32 2
  store ptr %22, ptr %arrayidx58.2, align 4
  %tobool61.not.2 = icmp eq i32 %21, 0
  br i1 %tobool61.not.2, label %for.end, label %for.cond.2

for.cond.2:                                       ; preds = %for.cond.1
  %arrayidx.3 = getelementptr %struct.track, ptr %add.ptr.i144, i32 0, i32 1, i32 3
  %23 = load i32, ptr %arrayidx.3, align 4
  %24 = inttoptr i32 %23 to ptr
  %arrayidx58.3 = getelementptr %struct.kmem_obj_info, ptr %kpp, i32 0, i32 6, i32 3
  store ptr %24, ptr %arrayidx58.3, align 4
  %tobool61.not.3 = icmp eq i32 %23, 0
  br i1 %tobool61.not.3, label %for.end, label %for.cond.3

for.cond.3:                                       ; preds = %for.cond.2
  %arrayidx.4 = getelementptr %struct.track, ptr %add.ptr.i144, i32 0, i32 1, i32 4
  %25 = load i32, ptr %arrayidx.4, align 4
  %26 = inttoptr i32 %25 to ptr
  %arrayidx58.4 = getelementptr %struct.kmem_obj_info, ptr %kpp, i32 0, i32 6, i32 4
  store ptr %26, ptr %arrayidx58.4, align 4
  %tobool61.not.4 = icmp eq i32 %25, 0
  br i1 %tobool61.not.4, label %for.end, label %for.cond.4

for.cond.4:                                       ; preds = %for.cond.3
  %arrayidx.5 = getelementptr %struct.track, ptr %add.ptr.i144, i32 0, i32 1, i32 5
  %27 = load i32, ptr %arrayidx.5, align 4
  %28 = inttoptr i32 %27 to ptr
  %arrayidx58.5 = getelementptr %struct.kmem_obj_info, ptr %kpp, i32 0, i32 6, i32 5
  store ptr %28, ptr %arrayidx58.5, align 4
  %tobool61.not.5 = icmp eq i32 %27, 0
  br i1 %tobool61.not.5, label %for.end, label %for.cond.5

for.cond.5:                                       ; preds = %for.cond.4
  %arrayidx.6 = getelementptr %struct.track, ptr %add.ptr.i144, i32 0, i32 1, i32 6
  %29 = load i32, ptr %arrayidx.6, align 4
  %30 = inttoptr i32 %29 to ptr
  %arrayidx58.6 = getelementptr %struct.kmem_obj_info, ptr %kpp, i32 0, i32 6, i32 6
  store ptr %30, ptr %arrayidx58.6, align 4
  %tobool61.not.6 = icmp eq i32 %29, 0
  br i1 %tobool61.not.6, label %for.end, label %for.cond.6

for.cond.6:                                       ; preds = %for.cond.5
  %arrayidx.7 = getelementptr %struct.track, ptr %add.ptr.i144, i32 0, i32 1, i32 7
  %31 = load i32, ptr %arrayidx.7, align 4
  %32 = inttoptr i32 %31 to ptr
  %arrayidx58.7 = getelementptr %struct.kmem_obj_info, ptr %kpp, i32 0, i32 6, i32 7
  store ptr %32, ptr %arrayidx58.7, align 4
  %tobool61.not.7 = icmp eq i32 %31, 0
  br i1 %tobool61.not.7, label %for.end, label %for.cond.7

for.cond.7:                                       ; preds = %for.cond.6
  %arrayidx.8 = getelementptr %struct.track, ptr %add.ptr.i144, i32 0, i32 1, i32 8
  %33 = load i32, ptr %arrayidx.8, align 4
  %34 = inttoptr i32 %33 to ptr
  %arrayidx58.8 = getelementptr %struct.kmem_obj_info, ptr %kpp, i32 0, i32 6, i32 8
  store ptr %34, ptr %arrayidx58.8, align 4
  %tobool61.not.8 = icmp eq i32 %33, 0
  br i1 %tobool61.not.8, label %for.end, label %for.cond.8

for.cond.8:                                       ; preds = %for.cond.7
  %arrayidx.9 = getelementptr %struct.track, ptr %add.ptr.i144, i32 0, i32 1, i32 9
  %35 = load i32, ptr %arrayidx.9, align 4
  %36 = inttoptr i32 %35 to ptr
  %arrayidx58.9 = getelementptr %struct.kmem_obj_info, ptr %kpp, i32 0, i32 6, i32 9
  store ptr %36, ptr %arrayidx58.9, align 4
  %tobool61.not.9 = icmp eq i32 %35, 0
  br i1 %tobool61.not.9, label %for.end, label %for.cond.9

for.cond.9:                                       ; preds = %for.cond.8
  %arrayidx.10 = getelementptr %struct.track, ptr %add.ptr.i144, i32 0, i32 1, i32 10
  %37 = load i32, ptr %arrayidx.10, align 4
  %38 = inttoptr i32 %37 to ptr
  %arrayidx58.10 = getelementptr %struct.kmem_obj_info, ptr %kpp, i32 0, i32 6, i32 10
  store ptr %38, ptr %arrayidx58.10, align 4
  %tobool61.not.10 = icmp eq i32 %37, 0
  br i1 %tobool61.not.10, label %for.end, label %for.cond.10

for.cond.10:                                      ; preds = %for.cond.9
  %arrayidx.11 = getelementptr %struct.track, ptr %add.ptr.i144, i32 0, i32 1, i32 11
  %39 = load i32, ptr %arrayidx.11, align 4
  %40 = inttoptr i32 %39 to ptr
  %arrayidx58.11 = getelementptr %struct.kmem_obj_info, ptr %kpp, i32 0, i32 6, i32 11
  store ptr %40, ptr %arrayidx58.11, align 4
  %tobool61.not.11 = icmp eq i32 %39, 0
  br i1 %tobool61.not.11, label %for.end, label %for.cond.11

for.cond.11:                                      ; preds = %for.cond.10
  %arrayidx.12 = getelementptr %struct.track, ptr %add.ptr.i144, i32 0, i32 1, i32 12
  %41 = load i32, ptr %arrayidx.12, align 4
  %42 = inttoptr i32 %41 to ptr
  %arrayidx58.12 = getelementptr %struct.kmem_obj_info, ptr %kpp, i32 0, i32 6, i32 12
  store ptr %42, ptr %arrayidx58.12, align 4
  %tobool61.not.12 = icmp eq i32 %41, 0
  br i1 %tobool61.not.12, label %for.end, label %for.cond.12

for.cond.12:                                      ; preds = %for.cond.11
  %arrayidx.13 = getelementptr %struct.track, ptr %add.ptr.i144, i32 0, i32 1, i32 13
  %43 = load i32, ptr %arrayidx.13, align 4
  %44 = inttoptr i32 %43 to ptr
  %arrayidx58.13 = getelementptr %struct.kmem_obj_info, ptr %kpp, i32 0, i32 6, i32 13
  store ptr %44, ptr %arrayidx58.13, align 4
  %tobool61.not.13 = icmp eq i32 %43, 0
  br i1 %tobool61.not.13, label %for.end, label %for.cond.13

for.cond.13:                                      ; preds = %for.cond.12
  %arrayidx.14 = getelementptr %struct.track, ptr %add.ptr.i144, i32 0, i32 1, i32 14
  %45 = load i32, ptr %arrayidx.14, align 4
  %46 = inttoptr i32 %45 to ptr
  %arrayidx58.14 = getelementptr %struct.kmem_obj_info, ptr %kpp, i32 0, i32 6, i32 14
  store ptr %46, ptr %arrayidx58.14, align 4
  %tobool61.not.14 = icmp eq i32 %45, 0
  br i1 %tobool61.not.14, label %for.end, label %for.cond.14

for.cond.14:                                      ; preds = %for.cond.13
  %arrayidx.15 = getelementptr %struct.track, ptr %add.ptr.i144, i32 0, i32 1, i32 15
  %47 = load i32, ptr %arrayidx.15, align 4
  %48 = inttoptr i32 %47 to ptr
  %arrayidx58.15 = getelementptr %struct.kmem_obj_info, ptr %kpp, i32 0, i32 6, i32 15
  store ptr %48, ptr %arrayidx58.15, align 4
  br label %for.end

for.end:                                          ; preds = %for.cond.14, %for.cond.13, %for.cond.12, %for.cond.11, %for.cond.10, %for.cond.9, %for.cond.8, %for.cond.7, %for.cond.6, %for.cond.5, %for.cond.4, %for.cond.3, %for.cond.2, %for.cond.1, %for.cond, %fixup_red_left.exit
  %49 = load i32, ptr %offset.i.i.i, align 4
  %50 = load i32, ptr %inuse.i.i.i, align 4
  %cmp.i.not.i.i147 = icmp ult i32 %49, %50
  %add.i.i148 = add i32 %50, 4
  %spec.select.i.i149 = select i1 %cmp.i.not.i.i147, i32 %50, i32 %add.i.i148
  %add.ptr.i150 = getelementptr i8, ptr %p.addr.0.i142, i32 %spec.select.i.i149
  %add.ptr1.i = getelementptr %struct.track, ptr %add.ptr.i150, i32 1
  %arrayidx72 = getelementptr %struct.track, ptr %add.ptr1.i, i32 0, i32 1, i32 0
  %51 = load i32, ptr %arrayidx72, align 4
  %52 = inttoptr i32 %51 to ptr
  %arrayidx73 = getelementptr %struct.kmem_obj_info, ptr %kpp, i32 0, i32 7, i32 0
  store ptr %52, ptr %arrayidx73, align 4
  %tobool76.not = icmp eq i32 %51, 0
  br i1 %tobool76.not, label %cleanup, label %for.cond65

for.cond65:                                       ; preds = %for.end
  %arrayidx72.1 = getelementptr %struct.track, ptr %add.ptr1.i, i32 0, i32 1, i32 1
  %53 = load i32, ptr %arrayidx72.1, align 4
  %54 = inttoptr i32 %53 to ptr
  %arrayidx73.1 = getelementptr %struct.kmem_obj_info, ptr %kpp, i32 0, i32 7, i32 1
  store ptr %54, ptr %arrayidx73.1, align 4
  %tobool76.not.1 = icmp eq i32 %53, 0
  br i1 %tobool76.not.1, label %cleanup, label %for.cond65.1

for.cond65.1:                                     ; preds = %for.cond65
  %arrayidx72.2 = getelementptr %struct.track, ptr %add.ptr1.i, i32 0, i32 1, i32 2
  %55 = load i32, ptr %arrayidx72.2, align 4
  %56 = inttoptr i32 %55 to ptr
  %arrayidx73.2 = getelementptr %struct.kmem_obj_info, ptr %kpp, i32 0, i32 7, i32 2
  store ptr %56, ptr %arrayidx73.2, align 4
  %tobool76.not.2 = icmp eq i32 %55, 0
  br i1 %tobool76.not.2, label %cleanup, label %for.cond65.2

for.cond65.2:                                     ; preds = %for.cond65.1
  %arrayidx72.3 = getelementptr %struct.track, ptr %add.ptr1.i, i32 0, i32 1, i32 3
  %57 = load i32, ptr %arrayidx72.3, align 4
  %58 = inttoptr i32 %57 to ptr
  %arrayidx73.3 = getelementptr %struct.kmem_obj_info, ptr %kpp, i32 0, i32 7, i32 3
  store ptr %58, ptr %arrayidx73.3, align 4
  %tobool76.not.3 = icmp eq i32 %57, 0
  br i1 %tobool76.not.3, label %cleanup, label %for.cond65.3

for.cond65.3:                                     ; preds = %for.cond65.2
  %arrayidx72.4 = getelementptr %struct.track, ptr %add.ptr1.i, i32 0, i32 1, i32 4
  %59 = load i32, ptr %arrayidx72.4, align 4
  %60 = inttoptr i32 %59 to ptr
  %arrayidx73.4 = getelementptr %struct.kmem_obj_info, ptr %kpp, i32 0, i32 7, i32 4
  store ptr %60, ptr %arrayidx73.4, align 4
  %tobool76.not.4 = icmp eq i32 %59, 0
  br i1 %tobool76.not.4, label %cleanup, label %for.cond65.4

for.cond65.4:                                     ; preds = %for.cond65.3
  %arrayidx72.5 = getelementptr %struct.track, ptr %add.ptr1.i, i32 0, i32 1, i32 5
  %61 = load i32, ptr %arrayidx72.5, align 4
  %62 = inttoptr i32 %61 to ptr
  %arrayidx73.5 = getelementptr %struct.kmem_obj_info, ptr %kpp, i32 0, i32 7, i32 5
  store ptr %62, ptr %arrayidx73.5, align 4
  %tobool76.not.5 = icmp eq i32 %61, 0
  br i1 %tobool76.not.5, label %cleanup, label %for.cond65.5

for.cond65.5:                                     ; preds = %for.cond65.4
  %arrayidx72.6 = getelementptr %struct.track, ptr %add.ptr1.i, i32 0, i32 1, i32 6
  %63 = load i32, ptr %arrayidx72.6, align 4
  %64 = inttoptr i32 %63 to ptr
  %arrayidx73.6 = getelementptr %struct.kmem_obj_info, ptr %kpp, i32 0, i32 7, i32 6
  store ptr %64, ptr %arrayidx73.6, align 4
  %tobool76.not.6 = icmp eq i32 %63, 0
  br i1 %tobool76.not.6, label %cleanup, label %for.cond65.6

for.cond65.6:                                     ; preds = %for.cond65.5
  %arrayidx72.7 = getelementptr %struct.track, ptr %add.ptr1.i, i32 0, i32 1, i32 7
  %65 = load i32, ptr %arrayidx72.7, align 4
  %66 = inttoptr i32 %65 to ptr
  %arrayidx73.7 = getelementptr %struct.kmem_obj_info, ptr %kpp, i32 0, i32 7, i32 7
  store ptr %66, ptr %arrayidx73.7, align 4
  %tobool76.not.7 = icmp eq i32 %65, 0
  br i1 %tobool76.not.7, label %cleanup, label %for.cond65.7

for.cond65.7:                                     ; preds = %for.cond65.6
  %arrayidx72.8 = getelementptr %struct.track, ptr %add.ptr1.i, i32 0, i32 1, i32 8
  %67 = load i32, ptr %arrayidx72.8, align 4
  %68 = inttoptr i32 %67 to ptr
  %arrayidx73.8 = getelementptr %struct.kmem_obj_info, ptr %kpp, i32 0, i32 7, i32 8
  store ptr %68, ptr %arrayidx73.8, align 4
  %tobool76.not.8 = icmp eq i32 %67, 0
  br i1 %tobool76.not.8, label %cleanup, label %for.cond65.8

for.cond65.8:                                     ; preds = %for.cond65.7
  %arrayidx72.9 = getelementptr %struct.track, ptr %add.ptr1.i, i32 0, i32 1, i32 9
  %69 = load i32, ptr %arrayidx72.9, align 4
  %70 = inttoptr i32 %69 to ptr
  %arrayidx73.9 = getelementptr %struct.kmem_obj_info, ptr %kpp, i32 0, i32 7, i32 9
  store ptr %70, ptr %arrayidx73.9, align 4
  %tobool76.not.9 = icmp eq i32 %69, 0
  br i1 %tobool76.not.9, label %cleanup, label %for.cond65.9

for.cond65.9:                                     ; preds = %for.cond65.8
  %arrayidx72.10 = getelementptr %struct.track, ptr %add.ptr1.i, i32 0, i32 1, i32 10
  %71 = load i32, ptr %arrayidx72.10, align 4
  %72 = inttoptr i32 %71 to ptr
  %arrayidx73.10 = getelementptr %struct.kmem_obj_info, ptr %kpp, i32 0, i32 7, i32 10
  store ptr %72, ptr %arrayidx73.10, align 4
  %tobool76.not.10 = icmp eq i32 %71, 0
  br i1 %tobool76.not.10, label %cleanup, label %for.cond65.10

for.cond65.10:                                    ; preds = %for.cond65.9
  %arrayidx72.11 = getelementptr %struct.track, ptr %add.ptr1.i, i32 0, i32 1, i32 11
  %73 = load i32, ptr %arrayidx72.11, align 4
  %74 = inttoptr i32 %73 to ptr
  %arrayidx73.11 = getelementptr %struct.kmem_obj_info, ptr %kpp, i32 0, i32 7, i32 11
  store ptr %74, ptr %arrayidx73.11, align 4
  %tobool76.not.11 = icmp eq i32 %73, 0
  br i1 %tobool76.not.11, label %cleanup, label %for.cond65.11

for.cond65.11:                                    ; preds = %for.cond65.10
  %arrayidx72.12 = getelementptr %struct.track, ptr %add.ptr1.i, i32 0, i32 1, i32 12
  %75 = load i32, ptr %arrayidx72.12, align 4
  %76 = inttoptr i32 %75 to ptr
  %arrayidx73.12 = getelementptr %struct.kmem_obj_info, ptr %kpp, i32 0, i32 7, i32 12
  store ptr %76, ptr %arrayidx73.12, align 4
  %tobool76.not.12 = icmp eq i32 %75, 0
  br i1 %tobool76.not.12, label %cleanup, label %for.cond65.12

for.cond65.12:                                    ; preds = %for.cond65.11
  %arrayidx72.13 = getelementptr %struct.track, ptr %add.ptr1.i, i32 0, i32 1, i32 13
  %77 = load i32, ptr %arrayidx72.13, align 4
  %78 = inttoptr i32 %77 to ptr
  %arrayidx73.13 = getelementptr %struct.kmem_obj_info, ptr %kpp, i32 0, i32 7, i32 13
  store ptr %78, ptr %arrayidx73.13, align 4
  %tobool76.not.13 = icmp eq i32 %77, 0
  br i1 %tobool76.not.13, label %cleanup, label %for.cond65.13

for.cond65.13:                                    ; preds = %for.cond65.12
  %arrayidx72.14 = getelementptr %struct.track, ptr %add.ptr1.i, i32 0, i32 1, i32 14
  %79 = load i32, ptr %arrayidx72.14, align 4
  %80 = inttoptr i32 %79 to ptr
  %arrayidx73.14 = getelementptr %struct.kmem_obj_info, ptr %kpp, i32 0, i32 7, i32 14
  store ptr %80, ptr %arrayidx73.14, align 4
  %tobool76.not.14 = icmp eq i32 %79, 0
  br i1 %tobool76.not.14, label %cleanup, label %for.cond65.14

for.cond65.14:                                    ; preds = %for.cond65.13
  %arrayidx72.15 = getelementptr %struct.track, ptr %add.ptr1.i, i32 0, i32 1, i32 15
  %81 = load i32, ptr %arrayidx72.15, align 4
  %82 = inttoptr i32 %81 to ptr
  %arrayidx73.15 = getelementptr %struct.kmem_obj_info, ptr %kpp, i32 0, i32 7, i32 15
  store ptr %82, ptr %arrayidx73.15, align 4
  br label %cleanup

cleanup:                                          ; preds = %for.cond65.14, %for.cond65.13, %for.cond65.12, %for.cond65.11, %for.cond65.10, %for.cond65.9, %for.cond65.8, %for.cond65.7, %for.cond65.6, %for.cond65.5, %for.cond65.4, %for.cond65.3, %for.cond65.2, %for.cond65.1, %for.cond65, %for.end, %lor.lhs.false48, %if.end39
  ret void
}

; Function Attrs: cold nounwind null_pointer_is_valid optsize sspstrong uwtable(sync)
define internal i32 @setup_slub_min_order(ptr noundef %str) #2 section ".init.text" align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %str.addr = alloca ptr, align 4
  store ptr %str, ptr %str.addr, align 4
  %call = call i32 @get_option(ptr noundef nonnull %str.addr, ptr noundef nonnull @slub_min_order) #27
  ret i32 1
}

; Function Attrs: cold nounwind null_pointer_is_valid optsize sspstrong uwtable(sync)
define internal i32 @setup_slub_max_order(ptr noundef %str) #2 section ".init.text" align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %str.addr = alloca ptr, align 4
  store ptr %str, ptr %str.addr, align 4
  %call = call i32 @get_option(ptr noundef nonnull %str.addr, ptr noundef nonnull @slub_max_order) #27
  %0 = load i32, ptr @slub_max_order, align 4
  %1 = call i32 @llvm.umin.i32(i32 %0, i32 11)
  store i32 %1, ptr @slub_max_order, align 4
  ret i32 1
}

; Function Attrs: cold nounwind null_pointer_is_valid optsize sspstrong uwtable(sync)
define internal i32 @setup_slub_min_objects(ptr noundef %str) #2 section ".init.text" align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %str.addr = alloca ptr, align 4
  store ptr %str, ptr %str.addr, align 4
  %call = call i32 @get_option(ptr noundef nonnull %str.addr, ptr noundef nonnull @slub_min_objects) #27
  ret i32 1
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong allocsize(0) uwtable(sync)
define dso_local noalias ptr @__kmalloc(i32 noundef %size, i32 noundef %flags) #8 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %object.i.i = alloca ptr, align 4
  %objcg.i.i = alloca ptr, align 4
  %cmp = icmp ugt i32 %size, 8192
  br i1 %cmp, label %if.then, label %if.end, !prof !13

if.then:                                          ; preds = %entry
  %sub.i.i = add i32 %size, -1
  %shr.i.i = lshr i32 %sub.i.i, 12
  %0 = tail call i32 @llvm.ctlz.i32(i32 %shr.i.i, i1 false) #24, !range !50
  %add.i.i = sub nuw nsw i32 32, %0
  %call1.i = tail call noalias align 4096 ptr @kmalloc_order_trace(i32 noundef %size, i32 noundef %flags, i32 noundef %add.i.i) #30
  br label %cleanup

if.end:                                           ; preds = %entry
  %call2 = tail call ptr @kmalloc_slab(i32 noundef %size, i32 noundef %flags) #27
  %cmp3 = icmp ult ptr %call2, inttoptr (i32 17 to ptr)
  br i1 %cmp3, label %cleanup, label %if.end11, !prof !13

if.end11:                                         ; preds = %if.end
  %1 = tail call ptr @llvm.returnaddress(i32 0)
  %2 = ptrtoint ptr %1 to i32
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %object.i.i) #24
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %objcg.i.i) #24
  store ptr null, ptr %objcg.i.i, align 4
  %call.i.i = call fastcc ptr @slab_pre_alloc_hook(ptr noundef %call2, ptr noundef nonnull %objcg.i.i, i32 noundef 1, i32 noundef %flags) #27
  %tobool.not.i.i31 = icmp eq ptr %call.i.i, null
  br i1 %tobool.not.i.i31, label %slab_alloc.exit, label %if.end.i.i32

if.end.i.i32:                                     ; preds = %if.end11
  callbr void asm sideeffect "1:\0A\09nop\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr nonnull @kfence_allocation_key, ptr blockaddress(@__kmalloc, %if.end.i.i.i)) #24
          to label %kfence_alloc.exit.i.i [label %if.end.i.i.i], !srcloc !12

if.end.i.i.i:                                     ; preds = %if.end.i.i32
  %3 = load volatile i32, ptr @kfence_allocation_gate, align 4
  %tobool4.not.i.i.i = icmp eq i32 %3, 0
  br i1 %tobool4.not.i.i.i, label %if.end12.i.i.i, label %redo.preheader.i.i, !prof !13

if.end12.i.i.i:                                   ; preds = %if.end.i.i.i
  %call13.i.i.i = tail call ptr @__kfence_alloc(ptr noundef nonnull %call.i.i, i32 noundef %size, i32 noundef %flags) #27
  br label %kfence_alloc.exit.i.i

kfence_alloc.exit.i.i:                            ; preds = %if.end12.i.i.i, %if.end.i.i32
  %retval.0.i.i.i = phi ptr [ %call13.i.i.i, %if.end12.i.i.i ], [ null, %if.end.i.i32 ]
  %tobool2.not.i.i = icmp eq ptr %retval.0.i.i.i, null
  br i1 %tobool2.not.i.i, label %redo.preheader.i.i, label %out.i.i, !prof !14

redo.preheader.i.i:                               ; preds = %kfence_alloc.exit.i.i, %if.end.i.i.i
  %4 = load ptr, ptr %call.i.i, align 4
  %5 = ptrtoint ptr %4 to i32
  %6 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i25.i.i = and i32 %6, -16384
  %7 = inttoptr i32 %and.i25.i.i to ptr
  %cpu26.i.i = getelementptr inbounds %struct.thread_info, ptr %7, i32 0, i32 3
  %8 = load i32, ptr %cpu26.i.i, align 4
  %arrayidx27.i.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %8
  %9 = load i32, ptr %arrayidx27.i.i, align 4
  %add28.i.i = add i32 %9, %5
  %10 = inttoptr i32 %add28.i.i to ptr
  %tid1329.i.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %10, i32 0, i32 1
  %11 = load volatile i32, ptr %tid1329.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !15
  %12 = load ptr, ptr %10, align 4
  %slab1430.i.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %10, i32 0, i32 2
  %13 = load ptr, ptr %slab1430.i.i, align 4
  %tobool1531.i.i = icmp ne ptr %12, null
  %tobool1632.i.i = icmp ne ptr %13, null
  %or.cond33.i.i = select i1 %tobool1531.i.i, i1 %tobool1632.i.i, i1 false
  br i1 %or.cond33.i.i, label %lor.rhs.lr.ph.i.i, label %if.then27.critedge.i.i, !prof !16

lor.rhs.lr.ph.i.i:                                ; preds = %redo.preheader.i.i
  %offset.i.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %call.i.i, i32 0, i32 6
  %random.i.i.i.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %call.i.i, i32 0, i32 21
  br label %lor.rhs.i.i

lor.rhs.i.i:                                      ; preds = %cleanup.i.i, %lor.rhs.lr.ph.i.i
  %14 = phi ptr [ %12, %lor.rhs.lr.ph.i.i ], [ %62, %cleanup.i.i ]
  %15 = phi i32 [ %11, %lor.rhs.lr.ph.i.i ], [ %61, %cleanup.i.i ]
  %cpu34.i.i = phi ptr [ %cpu26.i.i, %lor.rhs.lr.ph.i.i ], [ %cpu.i.i, %cleanup.i.i ]
  %16 = load i32, ptr %offset.i.i.i.i, align 4
  %add.ptr.i.i.i.i = getelementptr i8, ptr %14, i32 %16
  %17 = load i32, ptr %add.ptr.i.i.i.i, align 4
  %18 = ptrtoint ptr %add.ptr.i.i.i.i to i32
  %19 = load i32, ptr %random.i.i.i.i.i.i, align 4
  %20 = tail call i32 @llvm.bswap.i32(i32 %18) #24
  %xor.i.i.i.i.i.i = xor i32 %19, %17
  %xor2.i.i.i.i.i.i = xor i32 %xor.i.i.i.i.i.i, %20
  %21 = inttoptr i32 %xor2.i.i.i.i.i.i to ptr
  %22 = load ptr, ptr %call.i.i, align 4
  %23 = ptrtoint ptr %22 to i32
  %rem.i.i = and i32 %23, 7
  %tobool40.not.i.i = icmp eq i32 %rem.i.i, 0
  br i1 %tobool40.not.i.i, label %do.body57.i.i, label %do.body48.i.i, !prof !14

if.then27.critedge.i.i:                           ; preds = %cleanup.i.i, %redo.preheader.i.i
  %call28.i.i = tail call fastcc ptr @__slab_alloc(ptr noundef nonnull %call.i.i, i32 noundef %flags, i32 noundef %2) #27
  store ptr %call28.i.i, ptr %object.i.i, align 4
  br label %if.end159.i.i

do.body48.i.i:                                    ; preds = %lor.rhs.i.i
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slub.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 3217, 0\0A.popsection", ""() #24, !srcloc !17
  unreachable

do.body57.i.i:                                    ; preds = %lor.rhs.i.i
  %tid59.i.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %22, i32 0, i32 1
  %24 = ptrtoint ptr %tid59.i.i to i32
  %add62.i.i = add nuw i32 %23, 4
  %cmp.not.i.i = icmp eq i32 %add62.i.i, %24
  br i1 %cmp.not.i.i, label %do.end78.i.i, label %do.body70.i.i, !prof !14

do.body70.i.i:                                    ; preds = %do.body57.i.i
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slub.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 3217, 0\0A.popsection", ""() #24, !srcloc !18
  unreachable

do.end78.i.i:                                     ; preds = %do.body57.i.i
  %25 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ arch_local_irq_save\0A\09cpsid\09i", "=r,~{memory},~{cc}"() #24, !srcloc !19
  %26 = load ptr, ptr %call.i.i, align 4
  %27 = ptrtoint ptr %26 to i32
  %28 = load i32, ptr %cpu34.i.i, align 4
  %arrayidx96.i.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %28
  %29 = load i32, ptr %arrayidx96.i.i, align 4
  %add97.i.i = add i32 %29, %27
  %30 = inttoptr i32 %add97.i.i to ptr
  %tid105.i.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %26, i32 0, i32 1
  %31 = ptrtoint ptr %tid105.i.i to i32
  %add110.i.i = add i32 %29, %31
  %32 = inttoptr i32 %add110.i.i to ptr
  %33 = load ptr, ptr %30, align 4
  %cmp112.i.i = icmp eq ptr %33, %14
  br i1 %cmp112.i.i, label %land.lhs.true.i.i, label %if.end118.i.i

land.lhs.true.i.i:                                ; preds = %do.end78.i.i
  %34 = load i32, ptr %32, align 4
  %cmp114.i.i = icmp eq i32 %34, %15
  br i1 %cmp114.i.i, label %if.then116.i.i, label %if.end118.i.i

if.then116.i.i:                                   ; preds = %land.lhs.true.i.i
  store ptr %21, ptr %30, align 4
  %add.i.i.i = add i32 %15, 1
  store i32 %add.i.i.i, ptr %32, align 4
  br label %if.end118.i.i

if.end118.i.i:                                    ; preds = %if.then116.i.i, %land.lhs.true.i.i, %do.end78.i.i
  %tobool144.not.i.i = phi i1 [ false, %if.then116.i.i ], [ true, %land.lhs.true.i.i ], [ true, %do.end78.i.i ]
  %35 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ local_save_flags", "=r,~{memory},~{cc}"() #24, !srcloc !20
  %and.i.i2.i.i = and i32 %35, 128
  %tobool128.not.i.i = icmp eq i32 %and.i.i2.i.i, 0
  br i1 %tobool128.not.i.i, label %if.then137.i.i, label %do.end140.i.i, !prof !13

if.then137.i.i:                                   ; preds = %if.end118.i.i
  tail call void @warn_bogus_irq_restore() #27
  br label %do.end140.i.i

do.end140.i.i:                                    ; preds = %if.then137.i.i, %if.end118.i.i
  tail call void asm sideeffect "\09msr\09cpsr_c, $0\09@ local_irq_restore", "r,~{memory},~{cc}"(i32 %25) #24, !srcloc !21
  br i1 %tobool144.not.i.i, label %cleanup.i.i, label %cleanup.thread.i.i, !prof !13

cleanup.thread.i.i:                               ; preds = %do.end140.i.i
  %36 = inttoptr i32 %xor2.i.i.i.i.i.i to ptr
  store ptr %14, ptr %object.i.i, align 4
  %37 = load i32, ptr %offset.i.i.i.i, align 4
  %add.ptr.i4.i.i = getelementptr i8, ptr %36, i32 %37
  tail call void @llvm.prefetch.p0(ptr %add.ptr.i4.i.i, i32 1, i32 3, i32 1) #24
  %38 = load ptr, ptr %call.i.i, align 4
  %arrayidx.i.i.i = getelementptr %struct.kmem_cache_cpu, ptr %38, i32 0, i32 5, i32 0
  %39 = ptrtoint ptr %arrayidx.i.i.i to i32
  %40 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i5.i.i = and i32 %40, -16384
  %41 = inttoptr i32 %and.i.i5.i.i to ptr
  %cpu.i.i.i = getelementptr inbounds %struct.thread_info, ptr %41, i32 0, i32 3
  %42 = load i32, ptr %cpu.i.i.i, align 4
  %arrayidx7.i.i.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %42
  %43 = load i32, ptr %arrayidx7.i.i.i, align 4
  %add.i6.i.i = add i32 %43, %39
  %44 = inttoptr i32 %add.i6.i.i to ptr
  %45 = load i32, ptr %44, align 4
  %add8.i.i.i = add i32 %45, 1
  store i32 %add8.i.i.i, ptr %44, align 4
  br label %if.end159.i.i

cleanup.i.i:                                      ; preds = %do.end140.i.i
  %46 = load ptr, ptr %call.i.i, align 4
  %arrayidx.i.i.i.i = getelementptr %struct.kmem_cache_cpu, ptr %46, i32 0, i32 5, i32 20
  %47 = ptrtoint ptr %arrayidx.i.i.i.i to i32
  %48 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i.i.i = and i32 %48, -16384
  %49 = inttoptr i32 %and.i.i.i.i.i to ptr
  %cpu.i.i.i.i = getelementptr inbounds %struct.thread_info, ptr %49, i32 0, i32 3
  %50 = load i32, ptr %cpu.i.i.i.i, align 4
  %arrayidx7.i.i.i.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %50
  %51 = load i32, ptr %arrayidx7.i.i.i.i, align 4
  %add.i.i.i.i = add i32 %51, %47
  %52 = inttoptr i32 %add.i.i.i.i to ptr
  %53 = load i32, ptr %52, align 4
  %add8.i.i.i.i = add i32 %53, 1
  store i32 %add8.i.i.i.i, ptr %52, align 4
  %54 = load ptr, ptr %call.i.i, align 4
  %55 = ptrtoint ptr %54 to i32
  %56 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i = and i32 %56, -16384
  %57 = inttoptr i32 %and.i.i.i to ptr
  %cpu.i.i = getelementptr inbounds %struct.thread_info, ptr %57, i32 0, i32 3
  %58 = load i32, ptr %cpu.i.i, align 4
  %arrayidx.i.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %58
  %59 = load i32, ptr %arrayidx.i.i, align 4
  %add.i.i33 = add i32 %59, %55
  %60 = inttoptr i32 %add.i.i33 to ptr
  %tid13.i.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %60, i32 0, i32 1
  %61 = load volatile i32, ptr %tid13.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !15
  %62 = load ptr, ptr %60, align 4
  %slab14.i.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %60, i32 0, i32 2
  %63 = load ptr, ptr %slab14.i.i, align 4
  %tobool15.i.i = icmp ne ptr %62, null
  %tobool16.i.i = icmp ne ptr %63, null
  %or.cond.i.i = select i1 %tobool15.i.i, i1 %tobool16.i.i, i1 false
  br i1 %or.cond.i.i, label %lor.rhs.i.i, label %if.then27.critedge.i.i, !prof !16

if.end159.i.i:                                    ; preds = %cleanup.thread.i.i, %if.then27.critedge.i.i
  %64 = phi ptr [ %14, %cleanup.thread.i.i ], [ %call28.i.i, %if.then27.critedge.i.i ]
  callbr void asm sideeffect "1:\0A\09nop\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr getelementptr inbounds (i8, ptr @init_on_free, i32 1), ptr blockaddress(@__kmalloc, %maybe_wipe_obj_freeptr.exit.i.i)) #24
          to label %if.then.i.i.i.i [label %maybe_wipe_obj_freeptr.exit.i.i], !srcloc !12

if.then.i.i.i.i:                                  ; preds = %if.end159.i.i
  %ctor.i.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %call.i.i, i32 0, i32 14
  %65 = load ptr, ptr %ctor.i.i.i.i, align 4
  %tobool15.not.i.i.i.i = icmp eq ptr %65, null
  br i1 %tobool15.not.i.i.i.i, label %lor.rhs.i.i.i.i, label %maybe_wipe_obj_freeptr.exit.i.i

lor.rhs.i.i.i.i:                                  ; preds = %if.then.i.i.i.i
  %flags.i.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %call.i.i, i32 0, i32 1
  %66 = load i32, ptr %flags.i.i.i.i, align 4
  %and.i.i.i.i = and i32 %66, 526336
  %tobool16.i.i.i.i = icmp eq i32 %and.i.i.i.i, 0
  br i1 %tobool16.i.i.i.i, label %land.lhs.true.i.i.i, label %maybe_wipe_obj_freeptr.exit.i.i, !prof !13

land.lhs.true.i.i.i:                              ; preds = %lor.rhs.i.i.i.i
  %tobool2.not.i.i.i = icmp eq ptr %64, null
  br i1 %tobool2.not.i.i.i, label %maybe_wipe_obj_freeptr.exit.i.i, label %if.then.i.i.i

if.then.i.i.i:                                    ; preds = %land.lhs.true.i.i.i
  %offset.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %call.i.i, i32 0, i32 6
  %67 = load i32, ptr %offset.i.i.i, align 4
  %add.ptr.i.i.i = getelementptr i8, ptr %64, i32 %67
  %call4.i.i.i = tail call ptr @__memset(ptr noundef %add.ptr.i.i.i, i32 noundef 0, i32 noundef 4) #27
  br label %maybe_wipe_obj_freeptr.exit.i.i

maybe_wipe_obj_freeptr.exit.i.i:                  ; preds = %if.then.i.i.i, %land.lhs.true.i.i.i, %lor.rhs.i.i.i.i, %if.then.i.i.i.i, %if.end159.i.i
  callbr void asm sideeffect "1:\0A\09nop\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr getelementptr inbounds (i8, ptr @init_on_alloc, i32 1), ptr blockaddress(@__kmalloc, %if.end23.i.i.i)) #24
          to label %if.then.i7.i.i [label %if.end23.i.i.i], !srcloc !12

if.then.i7.i.i:                                   ; preds = %maybe_wipe_obj_freeptr.exit.i.i
  %ctor.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %call.i.i, i32 0, i32 14
  %68 = load ptr, ptr %ctor.i.i.i, align 4
  %tobool15.not.i.i.i = icmp eq ptr %68, null
  br i1 %tobool15.not.i.i.i, label %if.end.i9.i.i, label %out.i.i

if.end.i9.i.i:                                    ; preds = %if.then.i7.i.i
  %flags17.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %call.i.i, i32 0, i32 1
  %69 = load i32, ptr %flags17.i.i.i, align 4
  %and.i8.i.i = and i32 %69, 526336
  %tobool18.not.i.i.i = icmp eq i32 %and.i8.i.i, 0
  br i1 %tobool18.not.i.i.i, label %out.i.i, label %if.then19.i.i.i

if.then19.i.i.i:                                  ; preds = %if.end.i9.i.i
  %and20.i.i.i = and i32 %flags, 256
  %tobool21.i.i.i = icmp ne i32 %and20.i.i.i, 0
  br label %out.i.i

if.end23.i.i.i:                                   ; preds = %maybe_wipe_obj_freeptr.exit.i.i
  %and24.i.i.i = and i32 %flags, 256
  %tobool25.i.i.i = icmp ne i32 %and24.i.i.i, 0
  br label %out.i.i

out.i.i:                                          ; preds = %if.end23.i.i.i, %if.then19.i.i.i, %if.end.i9.i.i, %if.then.i7.i.i, %kfence_alloc.exit.i.i
  %object.promoted.i.i = phi ptr [ %retval.0.i.i.i, %kfence_alloc.exit.i.i ], [ %64, %if.then19.i.i.i ], [ %64, %if.end23.i.i.i ], [ %64, %if.then.i7.i.i ], [ %64, %if.end.i9.i.i ]
  %init.0.off0.i.i = phi i1 [ false, %kfence_alloc.exit.i.i ], [ %tobool21.i.i.i, %if.then19.i.i.i ], [ %tobool25.i.i.i, %if.end23.i.i.i ], [ false, %if.then.i7.i.i ], [ true, %if.end.i9.i.i ]
  %70 = load ptr, ptr %objcg.i.i, align 4
  %71 = load i32, ptr @gfp_allowed_mask, align 4
  %and.i11.i.i = and i32 %71, %flags
  %object_size.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %call.i.i, i32 0, i32 4
  %flags11.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %call.i.i, i32 0, i32 1
  %call1.i.i.i.i = tail call ptr @__kasan_slab_alloc(ptr noundef nonnull %call.i.i, ptr noundef %object.promoted.i.i, i32 noundef %and.i11.i.i, i1 noundef zeroext %init.0.off0.i.i) #27
  %tobool3.not.i.i.i = icmp ne ptr %call1.i.i.i.i, null
  %72 = and i1 %init.0.off0.i.i, %tobool3.not.i.i.i
  br i1 %72, label %land.lhs.true5.i.i.i, label %if.end.i14.i.i

land.lhs.true5.i.i.i:                             ; preds = %out.i.i
  %73 = load i32, ptr %object_size.i.i.i, align 4
  %call8.i.i.i = tail call ptr @__memset(ptr noundef nonnull %call1.i.i.i.i, i32 noundef 0, i32 noundef %73) #27
  br label %if.end.i14.i.i

if.end.i14.i.i:                                   ; preds = %land.lhs.true5.i.i.i, %out.i.i
  %74 = load i32, ptr %flags11.i.i.i, align 4
  %and.i.i13.i.i = and i32 %74, 8388608
  %tobool.not.i.i.i.i = icmp eq i32 %and.i.i13.i.i, 0
  br i1 %tobool.not.i.i.i.i, label %if.then.i.i15.i.i, label %kmemleak_alloc_recursive.exit.i.i.i

if.then.i.i15.i.i:                                ; preds = %if.end.i14.i.i
  %75 = load i32, ptr %object_size.i.i.i, align 4
  tail call void @kmemleak_alloc(ptr noundef %call1.i.i.i.i, i32 noundef %75, i32 noundef 1, i32 noundef %and.i11.i.i) #27
  br label %kmemleak_alloc_recursive.exit.i.i.i

kmemleak_alloc_recursive.exit.i.i.i:              ; preds = %if.then.i.i15.i.i, %if.end.i14.i.i
  store ptr %call1.i.i.i.i, ptr %object.i.i, align 4
  call fastcc void @memcg_slab_post_alloc_hook(ptr noundef nonnull %call.i.i, ptr noundef %70, i32 noundef %and.i11.i.i, i32 noundef 1, ptr noundef nonnull %object.i.i) #27
  br label %slab_alloc.exit

slab_alloc.exit:                                  ; preds = %kmemleak_alloc_recursive.exit.i.i.i, %if.end11
  %retval.0.i.i34 = phi ptr [ %call1.i.i.i.i, %kmemleak_alloc_recursive.exit.i.i.i ], [ null, %if.end11 ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %objcg.i.i) #24
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %object.i.i) #24
  %size13 = getelementptr inbounds %struct.kmem_cache, ptr %call2, i32 0, i32 3
  %76 = load i32, ptr %size13, align 4
  tail call fastcc void @trace_kmalloc(i32 noundef %2, ptr noundef %retval.0.i.i34, i32 noundef %size, i32 noundef %76, i32 noundef %flags) #25
  %call1.i35 = tail call ptr @__kasan_kmalloc(ptr noundef %call2, ptr noundef %retval.0.i.i34, i32 noundef %size, i32 noundef %flags) #27
  br label %cleanup

cleanup:                                          ; preds = %slab_alloc.exit, %if.end, %if.then
  %retval.0 = phi ptr [ %call1.i, %if.then ], [ %call1.i35, %slab_alloc.exit ], [ %call2, %if.end ]
  ret ptr %retval.0
}

; Function Attrs: null_pointer_is_valid
declare dso_local ptr @kmalloc_slab(i32 noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define dso_local void @__check_heap_object(ptr noundef %ptr, i32 noundef %n, ptr noundef %slab, i1 noundef zeroext %to_user) local_unnamed_addr #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load ptr, ptr @__kfence_pool, align 4
  %sub.ptr.lhs.cast.i = ptrtoint ptr %ptr to i32
  %slab_cache = getelementptr inbounds %struct.slab, ptr %slab, i32 0, i32 2
  %1 = load ptr, ptr %slab_cache, align 4
  %call.i.i = tail call ptr @page_address(ptr noundef %slab) #27
  %cmp = icmp ugt ptr %call.i.i, %ptr
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @usercopy_abort(ptr noundef nonnull @.str.3, ptr noundef null, i1 noundef zeroext %to_user, i32 noundef 0, i32 noundef %n) #31
  unreachable

if.end:                                           ; preds = %entry
  %sub.ptr.rhs.cast.i = ptrtoint ptr %0 to i32
  %sub.ptr.sub.i = sub i32 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i
  %cmp.i = icmp ult i32 %sub.ptr.sub.i, 2097152
  %tobool.i = icmp ne ptr %0, null
  %2 = select i1 %cmp.i, i1 %tobool.i, i1 false
  br i1 %2, label %if.end11.thread, label %land.lhs.true

if.end11.thread:                                  ; preds = %if.end
  %call6 = tail call ptr @kfence_object_start(ptr noundef %ptr) #27
  %sub.ptr.rhs.cast = ptrtoint ptr %call6 to i32
  %sub.ptr.sub = sub i32 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast
  br label %if.end20

land.lhs.true:                                    ; preds = %if.end
  %call.i.i66 = tail call ptr @page_address(ptr noundef %slab) #27
  %sub.ptr.rhs.cast9 = ptrtoint ptr %call.i.i66 to i32
  %sub.ptr.sub10 = sub i32 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast9
  %size = getelementptr inbounds %struct.kmem_cache, ptr %1, i32 0, i32 3
  %3 = load i32, ptr %size, align 4
  %rem = urem i32 %sub.ptr.sub10, %3
  callbr void asm sideeffect "1:\0A\09b ${1:l}\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr nonnull @slub_debug_enabled, ptr blockaddress(@__check_heap_object, %if.then37.i)) #24
          to label %if.end20 [label %if.then37.i], !srcloc !10

if.then37.i:                                      ; preds = %land.lhs.true
  %flags38.i = getelementptr inbounds %struct.kmem_cache, ptr %1, i32 0, i32 1
  %4 = load i32, ptr %flags38.i, align 4
  %and39.i = and i32 %4, 1024
  %tobool40.i.not = icmp eq i32 %and39.i, 0
  br i1 %tobool40.i.not, label %if.end20, label %if.then14

if.then14:                                        ; preds = %if.then37.i
  %red_left_pad = getelementptr inbounds %struct.kmem_cache, ptr %1, i32 0, i32 17
  %5 = load i32, ptr %red_left_pad, align 4
  %cmp15 = icmp ult i32 %rem, %5
  br i1 %cmp15, label %if.then16, label %if.end18

if.then16:                                        ; preds = %if.then14
  %name = getelementptr inbounds %struct.kmem_cache, ptr %1, i32 0, i32 18
  %6 = load ptr, ptr %name, align 4
  tail call void @usercopy_abort(ptr noundef nonnull @.str.4, ptr noundef %6, i1 noundef zeroext %to_user, i32 noundef %rem, i32 noundef %n) #31
  unreachable

if.end18:                                         ; preds = %if.then14
  %sub = sub i32 %rem, %5
  br label %if.end20

if.end20:                                         ; preds = %if.end18, %if.then37.i, %land.lhs.true, %if.end11.thread
  %offset.1 = phi i32 [ %sub, %if.end18 ], [ %sub.ptr.sub, %if.end11.thread ], [ %rem, %if.then37.i ], [ %rem, %land.lhs.true ]
  %useroffset = getelementptr inbounds %struct.kmem_cache, ptr %1, i32 0, i32 24
  %7 = load i32, ptr %useroffset, align 4
  %cmp21.not = icmp ult i32 %offset.1, %7
  br i1 %cmp21.not, label %if.end32, label %land.lhs.true22

land.lhs.true22:                                  ; preds = %if.end20
  %sub24 = sub i32 %offset.1, %7
  %usersize = getelementptr inbounds %struct.kmem_cache, ptr %1, i32 0, i32 25
  %8 = load i32, ptr %usersize, align 4
  %cmp25.not = icmp ugt i32 %sub24, %8
  br i1 %cmp25.not, label %if.end32, label %land.lhs.true26

land.lhs.true26:                                  ; preds = %land.lhs.true22
  %sub28 = sub i32 %7, %offset.1
  %add = add i32 %sub28, %8
  %cmp30.not = icmp ult i32 %add, %n
  br i1 %cmp30.not, label %if.end32, label %if.then31

if.then31:                                        ; preds = %land.lhs.true26
  ret void

if.end32:                                         ; preds = %land.lhs.true26, %land.lhs.true22, %if.end20
  %name33 = getelementptr inbounds %struct.kmem_cache, ptr %1, i32 0, i32 18
  %9 = load ptr, ptr %name33, align 4
  tail call void @usercopy_abort(ptr noundef nonnull @.str.5, ptr noundef %9, i1 noundef zeroext %to_user, i32 noundef %offset.1, i32 noundef %n) #31
  unreachable
}

; Function Attrs: noreturn null_pointer_is_valid
declare dso_local void @usercopy_abort(ptr noundef, ptr noundef, i1 noundef zeroext, i32 noundef, i32 noundef) local_unnamed_addr #9

; Function Attrs: null_pointer_is_valid
declare dso_local ptr @kfence_object_start(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define dso_local i32 @__ksize(ptr noundef %object) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %cmp = icmp eq ptr %object, inttoptr (i32 16 to ptr)
  br i1 %cmp, label %cleanup, label %if.end, !prof !13

if.end:                                           ; preds = %entry
  %0 = load ptr, ptr @mem_map, align 4
  %1 = ptrtoint ptr %object to i32
  %sub.i = add i32 %1, 1073741824
  %shr.i = lshr i32 %sub.i, 12
  %2 = getelementptr %struct.page, ptr %0, i32 %shr.i, i32 1
  %3 = load volatile i32, ptr %2, align 4
  %and.i.i = and i32 %3, 1
  %tobool.not.i.i18 = icmp eq i32 %and.i.i, 0
  br i1 %tobool.not.i.i18, label %if.end.i.i, label %if.then.i.i19, !prof !14

if.then.i.i19:                                    ; preds = %if.end
  %sub.i.i = add i32 %3, -1
  br label %virt_to_folio.exit

if.end.i.i:                                       ; preds = %if.end
  %add.ptr.i = getelementptr %struct.page, ptr %0, i32 %shr.i
  %4 = ptrtoint ptr %add.ptr.i to i32
  br label %virt_to_folio.exit

virt_to_folio.exit:                               ; preds = %if.end.i.i, %if.then.i.i19
  %retval.0.i.i = phi i32 [ %sub.i.i, %if.then.i.i19 ], [ %4, %if.end.i.i ]
  %5 = inttoptr i32 %retval.0.i.i to ptr
  %6 = getelementptr inbounds %struct.page, ptr %5, i32 0, i32 1
  %7 = load volatile i32, ptr %6, align 4
  %and.i.i.i = and i32 %7, 1
  %tobool.not.i.i = icmp eq i32 %and.i.i.i, 0
  br i1 %tobool.not.i.i, label %folio_test_slab.exit, label %if.then.i.i, !prof !14

if.then.i.i:                                      ; preds = %virt_to_folio.exit
  tail call void @dump_page(ptr noundef %5, ptr noundef nonnull @.str.29) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 260, 0\0A.popsection", ""() #24, !srcloc !28
  unreachable

folio_test_slab.exit:                             ; preds = %virt_to_folio.exit
  %8 = load volatile i32, ptr %5, align 4
  %9 = and i32 %8, 512
  %tobool.i.not = icmp eq i32 %9, 0
  br i1 %tobool.i.not, label %if.then11, label %if.end13, !prof !13

if.then11:                                        ; preds = %folio_test_slab.exit
  %call12 = tail call fastcc i32 @folio_size(ptr noundef %5) #25
  br label %cleanup

if.end13:                                         ; preds = %folio_test_slab.exit
  %slab_cache = getelementptr inbounds %struct.slab, ptr %5, i32 0, i32 2
  %10 = load ptr, ptr %slab_cache, align 4
  %flags.i = getelementptr inbounds %struct.kmem_cache, ptr %10, i32 0, i32 1
  %11 = load i32, ptr %flags.i, align 4
  %and.i = and i32 %11, 3072
  %tobool.not.i = icmp eq i32 %and.i, 0
  br i1 %tobool.not.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %if.end13
  %object_size.i = getelementptr inbounds %struct.kmem_cache, ptr %10, i32 0, i32 4
  br label %slab_ksize.exit

if.end.i:                                         ; preds = %if.end13
  %and2.i = and i32 %11, 134217728
  %tobool3.not.i = icmp eq i32 %and2.i, 0
  br i1 %tobool3.not.i, label %if.end6.i, label %if.then4.i

if.then4.i:                                       ; preds = %if.end.i
  %object_size5.i = getelementptr inbounds %struct.kmem_cache, ptr %10, i32 0, i32 4
  br label %slab_ksize.exit

if.end6.i:                                        ; preds = %if.end.i
  %and8.i = and i32 %11, 589824
  %tobool9.not.i = icmp eq i32 %and8.i, 0
  br i1 %tobool9.not.i, label %if.end11.i, label %if.then10.i

if.then10.i:                                      ; preds = %if.end6.i
  %inuse.i = getelementptr inbounds %struct.kmem_cache, ptr %10, i32 0, i32 15
  br label %slab_ksize.exit

if.end11.i:                                       ; preds = %if.end6.i
  %size.i = getelementptr inbounds %struct.kmem_cache, ptr %10, i32 0, i32 3
  br label %slab_ksize.exit

slab_ksize.exit:                                  ; preds = %if.end11.i, %if.then10.i, %if.then4.i, %if.then.i
  %retval.0.in.i = phi ptr [ %object_size.i, %if.then.i ], [ %object_size5.i, %if.then4.i ], [ %inuse.i, %if.then10.i ], [ %size.i, %if.end11.i ]
  %retval.0.i = load i32, ptr %retval.0.in.i, align 4
  br label %cleanup

cleanup:                                          ; preds = %slab_ksize.exit, %if.then11, %entry
  %retval.0 = phi i32 [ %call12, %if.then11 ], [ %retval.0.i, %slab_ksize.exit ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: inlinehint nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc i32 @folio_size(ptr noundef %folio) unnamed_addr #5 align 64 {
entry:
  %0 = load volatile i32, ptr %folio, align 4
  %cmp.i.not.i.i.i = icmp eq i32 %0, -1
  br i1 %cmp.i.not.i.i.i, label %if.then.i.i.i, label %PageHead.exit.i.i, !prof !13

if.then.i.i.i:                                    ; preds = %entry
  tail call void @dump_page(ptr noundef %folio, ptr noundef nonnull @.str.33) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 698, 0\0A.popsection", ""() #24, !srcloc !51
  unreachable

PageHead.exit.i.i:                                ; preds = %entry
  %1 = load volatile i32, ptr %folio, align 4
  %2 = and i32 %1, 65536
  %tobool.not.i.i = icmp eq i32 %2, 0
  br i1 %tobool.not.i.i, label %folio_order.exit, label %if.end.i.i

if.end.i.i:                                       ; preds = %PageHead.exit.i.i
  %3 = getelementptr %struct.page, ptr %folio, i32 1, i32 1
  %compound_order.i.i = getelementptr inbounds %struct.anon.47, ptr %3, i32 0, i32 2
  %4 = load i8, ptr %compound_order.i.i, align 1
  %conv.i.i = zext i8 %4 to i32
  br label %folio_order.exit

folio_order.exit:                                 ; preds = %if.end.i.i, %PageHead.exit.i.i
  %retval.0.i.i = phi i32 [ %conv.i.i, %if.end.i.i ], [ 0, %PageHead.exit.i.i ]
  %shl = shl i32 4096, %retval.0.i.i
  ret i32 %shl
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define dso_local void @kfree(ptr noundef %x) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %head.addr.i22 = alloca ptr, align 4
  %head.addr.i = alloca ptr, align 4
  %tail.addr.i = alloca ptr, align 4
  %cnt.addr.i = alloca i32, align 4
  %0 = tail call ptr @llvm.returnaddress(i32 0)
  %1 = ptrtoint ptr %0 to i32
  tail call fastcc void @trace_kfree(i32 noundef %1, ptr noundef %x) #25
  %cmp = icmp ult ptr %x, inttoptr (i32 17 to ptr)
  br i1 %cmp, label %cleanup, label %if.end, !prof !13

if.end:                                           ; preds = %entry
  %2 = load ptr, ptr @mem_map, align 4
  %3 = ptrtoint ptr %x to i32
  %sub.i = add i32 %3, 1073741824
  %shr.i = lshr i32 %sub.i, 12
  %4 = getelementptr %struct.page, ptr %2, i32 %shr.i, i32 1
  %5 = load volatile i32, ptr %4, align 4
  %and.i.i = and i32 %5, 1
  %tobool.not.i.i25 = icmp eq i32 %and.i.i, 0
  br i1 %tobool.not.i.i25, label %if.end.i.i, label %if.then.i.i26, !prof !14

if.then.i.i26:                                    ; preds = %if.end
  %sub.i.i = add i32 %5, -1
  br label %virt_to_folio.exit

if.end.i.i:                                       ; preds = %if.end
  %add.ptr.i = getelementptr %struct.page, ptr %2, i32 %shr.i
  %6 = ptrtoint ptr %add.ptr.i to i32
  br label %virt_to_folio.exit

virt_to_folio.exit:                               ; preds = %if.end.i.i, %if.then.i.i26
  %retval.0.i.i = phi i32 [ %sub.i.i, %if.then.i.i26 ], [ %6, %if.end.i.i ]
  %7 = inttoptr i32 %retval.0.i.i to ptr
  %8 = getelementptr inbounds %struct.page, ptr %7, i32 0, i32 1
  %9 = load volatile i32, ptr %8, align 4
  %and.i.i.i = and i32 %9, 1
  %tobool.not.i.i = icmp eq i32 %and.i.i.i, 0
  br i1 %tobool.not.i.i, label %folio_test_slab.exit, label %if.then.i.i, !prof !14

if.then.i.i:                                      ; preds = %virt_to_folio.exit
  tail call void @dump_page(ptr noundef %7, ptr noundef nonnull @.str.29) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 260, 0\0A.popsection", ""() #24, !srcloc !28
  unreachable

folio_test_slab.exit:                             ; preds = %virt_to_folio.exit
  %10 = load volatile i32, ptr %7, align 4
  %11 = and i32 %10, 512
  %tobool.i.not = icmp eq i32 %11, 0
  br i1 %tobool.i.not, label %if.then11, label %if.end12, !prof !13

if.then11:                                        ; preds = %folio_test_slab.exit
  tail call fastcc void @free_large_kmalloc(ptr noundef %7, ptr noundef %x) #25
  br label %cleanup

if.end12:                                         ; preds = %folio_test_slab.exit
  %slab_cache = getelementptr inbounds %struct.slab, ptr %7, i32 0, i32 2
  %12 = load ptr, ptr %slab_cache, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %head.addr.i)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %tail.addr.i)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %cnt.addr.i)
  store ptr %x, ptr %head.addr.i, align 4
  store ptr null, ptr %tail.addr.i, align 4
  store i32 1, ptr %cnt.addr.i, align 4
  %call.i = call fastcc zeroext i1 @slab_free_freelist_hook(ptr noundef %12, ptr noundef nonnull %head.addr.i, ptr noundef nonnull %tail.addr.i, ptr noundef nonnull %cnt.addr.i) #27
  br i1 %call.i, label %if.then.i, label %slab_free.exit

if.then.i:                                        ; preds = %if.end12
  %13 = load ptr, ptr %head.addr.i, align 4
  %14 = load ptr, ptr %tail.addr.i, align 4
  %15 = load i32, ptr %cnt.addr.i, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %head.addr.i22)
  store ptr %13, ptr %head.addr.i22, align 4
  %tobool.not.i = icmp eq ptr %14, null
  %cond.i = select i1 %tobool.not.i, ptr %13, ptr %14
  br i1 %tobool.not.i, label %if.then.i23, label %if.end.i

if.then.i23:                                      ; preds = %if.then.i
  call fastcc void @memcg_slab_free_hook(ptr noundef %12, ptr noundef nonnull %head.addr.i22, i32 noundef 1) #27
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i23, %if.then.i
  %16 = load ptr, ptr %12, align 4
  %17 = ptrtoint ptr %16 to i32
  %18 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i38 = and i32 %18, -16384
  %19 = inttoptr i32 %and.i38 to ptr
  %cpu.i39 = getelementptr inbounds %struct.thread_info, ptr %19, i32 0, i32 3
  %20 = load i32, ptr %cpu.i39, align 4
  %arrayidx.i40 = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %20
  %21 = load i32, ptr %arrayidx.i40, align 4
  %add.i41 = add i32 %21, %17
  %22 = inttoptr i32 %add.i41 to ptr
  %tid7.i42 = getelementptr inbounds %struct.kmem_cache_cpu, ptr %22, i32 0, i32 1
  %23 = load volatile i32, ptr %tid7.i42, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !29
  %slab8.i43 = getelementptr inbounds %struct.kmem_cache_cpu, ptr %22, i32 0, i32 2
  %24 = load ptr, ptr %slab8.i43, align 4
  %cmp.i44 = icmp eq ptr %24, %7
  br i1 %cmp.i44, label %if.then11.i.lr.ph, label %if.else.i, !prof !14

if.then11.i.lr.ph:                                ; preds = %if.end.i
  %25 = ptrtoint ptr %cond.i to i32
  %offset.i = getelementptr inbounds %struct.kmem_cache, ptr %12, i32 0, i32 6
  %random.i.i = getelementptr inbounds %struct.kmem_cache, ptr %12, i32 0, i32 21
  br label %if.then11.i

if.then11.i:                                      ; preds = %cleanup.i, %if.then11.i.lr.ph
  %26 = phi i32 [ %23, %if.then11.i.lr.ph ], [ %71, %cleanup.i ]
  %27 = phi ptr [ %22, %if.then11.i.lr.ph ], [ %70, %cleanup.i ]
  %cpu.i45 = phi ptr [ %cpu.i39, %if.then11.i.lr.ph ], [ %cpu.i, %cleanup.i ]
  %28 = load volatile ptr, ptr %27, align 4
  %cmp.i27 = icmp eq ptr %cond.i, %28
  br i1 %cmp.i27, label %do.body2.i, label %set_freepointer.exit, !prof !13

do.body2.i:                                       ; preds = %if.then11.i
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slub.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 379, 0\0A.popsection", ""() #24, !srcloc !30
  unreachable

set_freepointer.exit:                             ; preds = %if.then11.i
  %29 = load i32, ptr %offset.i, align 4
  %add.i28 = add i32 %29, %25
  %30 = inttoptr i32 %add.i28 to ptr
  %31 = ptrtoint ptr %28 to i32
  %32 = load i32, ptr %random.i.i, align 4
  %33 = tail call i32 @llvm.bswap.i32(i32 %add.i28) #24
  %xor.i.i = xor i32 %32, %31
  %xor2.i.i = xor i32 %xor.i.i, %33
  %34 = inttoptr i32 %xor2.i.i to ptr
  store ptr %34, ptr %30, align 4
  %35 = load ptr, ptr %12, align 4
  %36 = ptrtoint ptr %35 to i32
  %rem.i = and i32 %36, 7
  %tobool27.not.i = icmp eq i32 %rem.i, 0
  br i1 %tobool27.not.i, label %do.body44.i, label %do.body35.i, !prof !14

do.body35.i:                                      ; preds = %set_freepointer.exit
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slub.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 3465, 0\0A.popsection", ""() #24, !srcloc !31
  unreachable

do.body44.i:                                      ; preds = %set_freepointer.exit
  %tid46.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %35, i32 0, i32 1
  %37 = ptrtoint ptr %tid46.i to i32
  %add49.i = add nuw i32 %36, 4
  %cmp50.not.i = icmp eq i32 %add49.i, %37
  br i1 %cmp50.not.i, label %do.end66.i, label %do.body58.i, !prof !14

do.body58.i:                                      ; preds = %do.body44.i
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slub.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 3465, 0\0A.popsection", ""() #24, !srcloc !32
  unreachable

do.end66.i:                                       ; preds = %do.body44.i
  %38 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ arch_local_irq_save\0A\09cpsid\09i", "=r,~{memory},~{cc}"() #24, !srcloc !19
  %39 = load ptr, ptr %12, align 4
  %40 = ptrtoint ptr %39 to i32
  %41 = load i32, ptr %cpu.i45, align 4
  %arrayidx84.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %41
  %42 = load i32, ptr %arrayidx84.i, align 4
  %add85.i = add i32 %42, %40
  %43 = inttoptr i32 %add85.i to ptr
  %tid93.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %39, i32 0, i32 1
  %44 = ptrtoint ptr %tid93.i to i32
  %add98.i = add i32 %42, %44
  %45 = inttoptr i32 %add98.i to ptr
  %46 = load ptr, ptr %43, align 4
  %cmp100.i = icmp eq ptr %46, %28
  br i1 %cmp100.i, label %land.lhs.true.i, label %if.end106.i

land.lhs.true.i:                                  ; preds = %do.end66.i
  %47 = load i32, ptr %45, align 4
  %cmp102.i = icmp eq i32 %47, %26
  br i1 %cmp102.i, label %if.then104.i, label %if.end106.i

if.then104.i:                                     ; preds = %land.lhs.true.i
  store ptr %13, ptr %43, align 4
  %add.i29 = add i32 %26, 1
  store i32 %add.i29, ptr %45, align 4
  br label %if.end106.i

if.end106.i:                                      ; preds = %if.then104.i, %land.lhs.true.i, %do.end66.i
  %tobool132.not.i = phi i1 [ false, %if.then104.i ], [ true, %land.lhs.true.i ], [ true, %do.end66.i ]
  %48 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ local_save_flags", "=r,~{memory},~{cc}"() #24, !srcloc !20
  %and.i.i30 = and i32 %48, 128
  %tobool116.not.i = icmp eq i32 %and.i.i30, 0
  br i1 %tobool116.not.i, label %if.then125.i, label %do.end128.i, !prof !13

if.then125.i:                                     ; preds = %if.end106.i
  tail call void @warn_bogus_irq_restore() #27
  br label %do.end128.i

do.end128.i:                                      ; preds = %if.then125.i, %if.end106.i
  tail call void asm sideeffect "\09msr\09cpsr_c, $0\09@ local_irq_restore", "r,~{memory},~{cc}"(i32 %38) #24, !srcloc !21
  %49 = load ptr, ptr %12, align 4
  br i1 %tobool132.not.i, label %cleanup.i, label %cleanup.i.thread, !prof !13

cleanup.i.thread:                                 ; preds = %do.end128.i
  %arrayidx.i32 = getelementptr %struct.kmem_cache_cpu, ptr %49, i32 0, i32 5, i32 2
  %50 = ptrtoint ptr %arrayidx.i32 to i32
  %51 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i33 = and i32 %51, -16384
  %52 = inttoptr i32 %and.i.i33 to ptr
  %cpu.i34 = getelementptr inbounds %struct.thread_info, ptr %52, i32 0, i32 3
  %53 = load i32, ptr %cpu.i34, align 4
  %arrayidx7.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %53
  %54 = load i32, ptr %arrayidx7.i, align 4
  %add.i35 = add i32 %54, %50
  %55 = inttoptr i32 %add.i35 to ptr
  %56 = load i32, ptr %55, align 4
  %add8.i = add i32 %56, 1
  store i32 %add8.i, ptr %55, align 4
  br label %do_slab_free.exit

cleanup.i:                                        ; preds = %do.end128.i
  %arrayidx.i.i = getelementptr %struct.kmem_cache_cpu, ptr %49, i32 0, i32 5, i32 20
  %57 = ptrtoint ptr %arrayidx.i.i to i32
  %58 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i31 = and i32 %58, -16384
  %59 = inttoptr i32 %and.i.i.i31 to ptr
  %cpu.i.i = getelementptr inbounds %struct.thread_info, ptr %59, i32 0, i32 3
  %60 = load i32, ptr %cpu.i.i, align 4
  %arrayidx7.i.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %60
  %61 = load i32, ptr %arrayidx7.i.i, align 4
  %add.i.i = add i32 %61, %57
  %62 = inttoptr i32 %add.i.i to ptr
  %63 = load i32, ptr %62, align 4
  %add8.i.i = add i32 %63, 1
  store i32 %add8.i.i, ptr %62, align 4
  %64 = load ptr, ptr %12, align 4
  %65 = ptrtoint ptr %64 to i32
  %66 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i = and i32 %66, -16384
  %67 = inttoptr i32 %and.i to ptr
  %cpu.i = getelementptr inbounds %struct.thread_info, ptr %67, i32 0, i32 3
  %68 = load i32, ptr %cpu.i, align 4
  %arrayidx.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %68
  %69 = load i32, ptr %arrayidx.i, align 4
  %add.i = add i32 %69, %65
  %70 = inttoptr i32 %add.i to ptr
  %tid7.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %70, i32 0, i32 1
  %71 = load volatile i32, ptr %tid7.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !29
  %slab8.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %70, i32 0, i32 2
  %72 = load ptr, ptr %slab8.i, align 4
  %cmp.i = icmp eq ptr %72, %7
  br i1 %cmp.i, label %if.then11.i, label %if.else.i, !prof !14

if.else.i:                                        ; preds = %cleanup.i, %if.end.i
  tail call fastcc void @__slab_free(ptr noundef %12, ptr noundef %7, ptr noundef %13, ptr noundef %cond.i, i32 noundef %15, i32 noundef %1) #27
  br label %do_slab_free.exit

do_slab_free.exit:                                ; preds = %if.else.i, %cleanup.i.thread
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %head.addr.i22)
  br label %slab_free.exit

slab_free.exit:                                   ; preds = %do_slab_free.exit, %if.end12
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %head.addr.i)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %tail.addr.i)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %cnt.addr.i)
  br label %cleanup

cleanup:                                          ; preds = %slab_free.exit, %if.then11, %entry
  ret void
}

; Function Attrs: inlinehint nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc void @trace_kfree(i32 noundef %call_site, ptr noundef %ptr) unnamed_addr #5 align 64 {
entry:
  callbr void asm sideeffect "1:\0A\09nop\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr getelementptr inbounds (%struct.tracepoint, ptr @__tracepoint_kfree, i32 0, i32 1), ptr blockaddress(@trace_kfree, %do.body)) #24
          to label %if.end48 [label %do.body], !srcloc !12

do.body:                                          ; preds = %entry
  %0 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i = and i32 %0, -16384
  %1 = inttoptr i32 %and.i to ptr
  %cpu = getelementptr inbounds %struct.thread_info, ptr %1, i32 0, i32 3
  %2 = load i32, ptr %cpu, align 4
  %3 = load i32, ptr @nr_cpu_ids, align 4
  %cmp.i.i.i.i = icmp ule i32 %3, %2
  %.b37.i.i.i.i = load i1, ptr @cpu_max_bits_warn.__already_done, align 1
  %lnot3.i.i.i.i = xor i1 %.b37.i.i.i.i, true
  %4 = select i1 %cmp.i.i.i.i, i1 %lnot3.i.i.i.i, i1 false
  br i1 %4, label %if.then.i.i.i.i, label %cpu_online.exit, !prof !13

if.then.i.i.i.i:                                  ; preds = %do.body
  store i1 true, ptr @cpu_max_bits_warn.__already_done, align 1
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.24, i32 noundef 108, i32 noundef 9, ptr noundef null) #27
  br label %cpu_online.exit

cpu_online.exit:                                  ; preds = %if.then.i.i.i.i, %do.body
  %div3.i.i.i = lshr i32 %2, 5
  %arrayidx.i.i.i = getelementptr i32, ptr @__cpu_online_mask, i32 %div3.i.i.i
  %5 = load volatile i32, ptr %arrayidx.i.i.i, align 4
  %and.i.i.i75 = and i32 %2, 31
  %6 = shl nuw i32 1, %and.i.i.i75
  %7 = and i32 %5, %6
  %tobool.i.not = icmp eq i32 %7, 0
  br i1 %tobool.i.not, label %if.end69, label %cleanup.thread

cleanup.thread:                                   ; preds = %cpu_online.exit
  %8 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i = and i32 %8, -16384
  %9 = inttoptr i32 %and.i.i.i to ptr
  %preempt_count.i.i = getelementptr inbounds %struct.thread_info, ptr %9, i32 0, i32 1
  %10 = load volatile i32, ptr %preempt_count.i.i, align 4
  %add.i = add i32 %10, 1
  store volatile i32 %add.i, ptr %preempt_count.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !52
  %call42 = tail call i32 @__traceiter_kfree(ptr noundef null, i32 noundef %call_site, ptr noundef %ptr) #27
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !53
  %11 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i73 = and i32 %11, -16384
  %12 = inttoptr i32 %and.i.i.i73 to ptr
  %preempt_count.i.i74 = getelementptr inbounds %struct.thread_info, ptr %12, i32 0, i32 1
  %13 = load volatile i32, ptr %preempt_count.i.i74, align 4
  %sub.i = add i32 %13, -1
  store volatile i32 %sub.i, ptr %preempt_count.i.i74, align 4
  br label %if.end48

if.end48:                                         ; preds = %cleanup.thread, %entry
  %14 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i76 = and i32 %14, -16384
  %15 = inttoptr i32 %and.i76 to ptr
  %cpu50 = getelementptr inbounds %struct.thread_info, ptr %15, i32 0, i32 3
  %16 = load i32, ptr %cpu50, align 4
  %17 = load i32, ptr @nr_cpu_ids, align 4
  %cmp.i.i.i.i77 = icmp ule i32 %17, %16
  %.b37.i.i.i.i78 = load i1, ptr @cpu_max_bits_warn.__already_done, align 1
  %lnot3.i.i.i.i79 = xor i1 %.b37.i.i.i.i78, true
  %18 = select i1 %cmp.i.i.i.i77, i1 %lnot3.i.i.i.i79, i1 false
  br i1 %18, label %if.then.i.i.i.i80, label %cpu_online.exit85, !prof !13

if.then.i.i.i.i80:                                ; preds = %if.end48
  store i1 true, ptr @cpu_max_bits_warn.__already_done, align 1
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.24, i32 noundef 108, i32 noundef 9, ptr noundef null) #27
  br label %cpu_online.exit85

cpu_online.exit85:                                ; preds = %if.then.i.i.i.i80, %if.end48
  %div3.i.i.i81 = lshr i32 %16, 5
  %arrayidx.i.i.i82 = getelementptr i32, ptr @__cpu_online_mask, i32 %div3.i.i.i81
  %19 = load volatile i32, ptr %arrayidx.i.i.i82, align 4
  %and.i.i.i83 = and i32 %16, 31
  %20 = shl nuw i32 1, %and.i.i.i83
  %21 = and i32 %19, %20
  %tobool.i84.not = icmp eq i32 %21, 0
  br i1 %tobool.i84.not, label %if.end69, label %if.then52

if.then52:                                        ; preds = %cpu_online.exit85
  %22 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i.i = and i32 %22, -16384
  %23 = inttoptr i32 %and.i.i.i.i to ptr
  %preempt_count.i.i.i = getelementptr inbounds %struct.thread_info, ptr %23, i32 0, i32 1
  %24 = load volatile i32, ptr %preempt_count.i.i.i, align 4
  %add.i.i = add i32 %24, 1
  store volatile i32 %add.i.i, ptr %preempt_count.i.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !24
  %25 = load volatile ptr, ptr getelementptr inbounds (%struct.tracepoint, ptr @__tracepoint_kfree, i32 0, i32 7), align 4
  %call58 = tail call i32 @rcu_read_lock_sched_held() #27
  %tobool59.not = icmp eq i32 %call58, 0
  br i1 %tobool59.not, label %land.lhs.true, label %do.end67

land.lhs.true:                                    ; preds = %if.then52
  %call60 = tail call i32 @debug_lockdep_rcu_enabled() #27
  %tobool61.not = icmp eq i32 %call60, 0
  br i1 %tobool61.not, label %do.end67, label %land.lhs.true62

land.lhs.true62:                                  ; preds = %land.lhs.true
  %.b72 = load i1, ptr @trace_kfree.__warned, align 1
  br i1 %.b72, label %do.end67, label %if.then64

if.then64:                                        ; preds = %land.lhs.true62
  store i1 true, ptr @trace_kfree.__warned, align 1
  tail call void @lockdep_rcu_suspicious(ptr noundef nonnull @.str.22, i32 noundef 136, ptr noundef nonnull @.str.23) #27
  br label %do.end67

do.end67:                                         ; preds = %if.then64, %land.lhs.true62, %land.lhs.true, %if.then52
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !25
  %26 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i.i86 = and i32 %26, -16384
  %27 = inttoptr i32 %and.i.i.i.i86 to ptr
  %preempt_count.i.i.i87 = getelementptr inbounds %struct.thread_info, ptr %27, i32 0, i32 1
  %28 = load volatile i32, ptr %preempt_count.i.i.i87, align 4
  %sub.i.i = add i32 %28, -1
  store volatile i32 %sub.i.i, ptr %preempt_count.i.i.i87, align 4
  br label %if.end69

if.end69:                                         ; preds = %do.end67, %cpu_online.exit85, %cpu_online.exit
  ret void
}

; Function Attrs: inlinehint nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc void @free_large_kmalloc(ptr noundef %folio, ptr noundef %object) unnamed_addr #5 align 64 {
entry:
  %0 = load volatile i32, ptr %folio, align 4
  %cmp.i.not.i.i.i = icmp eq i32 %0, -1
  br i1 %cmp.i.not.i.i.i, label %if.then.i.i.i, label %PageHead.exit.i.i, !prof !13

if.then.i.i.i:                                    ; preds = %entry
  tail call void @dump_page(ptr noundef %folio, ptr noundef nonnull @.str.33) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 698, 0\0A.popsection", ""() #24, !srcloc !51
  unreachable

PageHead.exit.i.i:                                ; preds = %entry
  %1 = load volatile i32, ptr %folio, align 4
  %2 = and i32 %1, 65536
  %tobool.not.i.i = icmp eq i32 %2, 0
  br i1 %tobool.not.i.i, label %folio_order.exit, label %if.end.i.i

if.end.i.i:                                       ; preds = %PageHead.exit.i.i
  %3 = getelementptr %struct.page, ptr %folio, i32 1, i32 1
  %compound_order.i.i = getelementptr inbounds %struct.anon.47, ptr %3, i32 0, i32 2
  %4 = load i8, ptr %compound_order.i.i, align 1
  %conv.i.i = zext i8 %4 to i32
  br label %folio_order.exit

folio_order.exit:                                 ; preds = %if.end.i.i, %PageHead.exit.i.i
  %retval.0.i.i = phi i32 [ %conv.i.i, %if.end.i.i ], [ 0, %PageHead.exit.i.i ]
  %cmp = icmp eq i32 %retval.0.i.i, 0
  %.b75 = load i1, ptr @free_large_kmalloc.__already_done, align 1
  %lnot3 = xor i1 %.b75, true
  %5 = select i1 %cmp, i1 %lnot3, i1 false
  br i1 %5, label %if.then, label %if.end27, !prof !13

if.then:                                          ; preds = %folio_order.exit
  store i1 true, ptr @free_large_kmalloc.__already_done, align 1
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.2, i32 noundef 3542, i32 noundef 9, ptr noundef null) #27
  br label %if.end27

if.end27:                                         ; preds = %if.then, %folio_order.exit
  br i1 %cmp, label %if.then36, label %if.end64

if.then36:                                        ; preds = %if.end27
  %.b7476 = load i1, ptr @free_large_kmalloc.__already_done.126, align 1
  br i1 %.b7476, label %if.end64, label %if.then50, !prof !14

if.then50:                                        ; preds = %if.then36
  store i1 true, ptr @free_large_kmalloc.__already_done.126, align 1
  %call55 = tail call i32 (ptr, ...) @_printk(ptr noundef nonnull @.str.127, ptr noundef %object) #26
  br label %if.end64

if.end64:                                         ; preds = %if.then50, %if.then36, %if.end27
  tail call void @kmemleak_free(ptr noundef %object) #27
  %6 = tail call ptr @llvm.returnaddress(i32 0) #24
  %7 = ptrtoint ptr %6 to i32
  tail call void @__kasan_kfree_large(ptr noundef %object, i32 noundef %7) #27
  %shl.neg = shl i32 -4096, %retval.0.i.i
  %8 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ arch_local_irq_save\0A\09cpsid\09i", "=r,~{memory},~{cc}"() #24, !srcloc !19
  %and.i.i = and i32 %8, 128
  %tobool.not.i = icmp eq i32 %and.i.i, 0
  br i1 %tobool.not.i, label %if.then21.i, label %do.end11.i

do.end11.i:                                       ; preds = %if.end64
  tail call void @__mod_lruvec_page_state(ptr noundef %folio, i32 noundef 6, i32 noundef %shl.neg) #27
  br label %do.body23.i

if.then21.i:                                      ; preds = %if.end64
  tail call void @trace_hardirqs_off() #27
  tail call void @__mod_lruvec_page_state(ptr noundef %folio, i32 noundef 6, i32 noundef %shl.neg) #27
  tail call void @trace_hardirqs_on() #27
  br label %do.body23.i

do.body23.i:                                      ; preds = %if.then21.i, %do.end11.i
  %9 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ local_save_flags", "=r,~{memory},~{cc}"() #24, !srcloc !20
  %and.i.i.i = and i32 %9, 128
  %tobool32.not.i = icmp eq i32 %and.i.i.i, 0
  br i1 %tobool32.not.i, label %if.then36.i, label %mod_lruvec_page_state.exit, !prof !13

if.then36.i:                                      ; preds = %do.body23.i
  tail call void @warn_bogus_irq_restore() #27
  br label %mod_lruvec_page_state.exit

mod_lruvec_page_state.exit:                       ; preds = %if.then36.i, %do.body23.i
  tail call void asm sideeffect "\09msr\09cpsr_c, $0\09@ local_irq_restore", "r,~{memory},~{cc}"(i32 %8) #24, !srcloc !21
  tail call void @__free_pages(ptr noundef %folio, i32 noundef %retval.0.i.i) #27
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define dso_local i32 @__kmem_cache_shrink(ptr noundef %s) local_unnamed_addr #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %discard.i = alloca %struct.list_head, align 4
  %promote.i = alloca [32 x %struct.list_head], align 4
  tail call void @cpus_read_lock() #27
  tail call fastcc void @flush_all_cpus_locked(ptr noundef %s) #27
  tail call void @cpus_read_unlock() #27
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %discard.i) #24
  call void @llvm.lifetime.start.p0(i64 256, ptr nonnull %promote.i) #24
  call void @llvm.memset.p0.i32(ptr noundef nonnull align 4 dereferenceable(256) %promote.i, i8 -1, i32 256, i1 false) #24, !annotation !11
  %arrayidx.i.i = getelementptr %struct.kmem_cache, ptr %s, i32 0, i32 26, i32 0
  %flags.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 1
  %0 = load ptr, ptr %arrayidx.i.i, align 4
  %tobool.not.i = icmp eq ptr %0, null
  br i1 %tobool.not.i, label %__kmem_cache_do_shrink.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %1 = getelementptr inbounds %struct.list_head, ptr %discard.i, i32 0, i32 1
  store volatile ptr %discard.i, ptr %discard.i, align 4
  store ptr %discard.i, ptr %1, align 4
  br label %for.body3.i

for.body3.i:                                      ; preds = %for.body3.i, %if.then.i
  %i.0143.i = phi i32 [ 0, %if.then.i ], [ %inc.i, %for.body3.i ]
  %add.ptr.i = getelementptr %struct.list_head, ptr %promote.i, i32 %i.0143.i
  store volatile ptr %add.ptr.i, ptr %add.ptr.i, align 4
  %prev.i130.i = getelementptr %struct.list_head, ptr %promote.i, i32 %i.0143.i, i32 1
  store ptr %add.ptr.i, ptr %prev.i130.i, align 4
  %inc.i = add nuw nsw i32 %i.0143.i, 1
  %exitcond.not.i = icmp eq i32 %inc.i, 32
  br i1 %exitcond.not.i, label %do.body4.i, label %for.body3.i

do.body4.i:                                       ; preds = %for.body3.i
  %call7.i = call i32 @_raw_spin_lock_irqsave(ptr noundef nonnull %0) #27
  %partial.i = getelementptr inbounds %struct.kmem_cache_node, ptr %0, i32 0, i32 2
  %2 = load ptr, ptr %partial.i, align 4
  %cmp18.not145.i = icmp eq ptr %2, %partial.i
  br i1 %cmp18.not145.i, label %for.body61.i.preheader, label %for.body20.lr.ph.i

for.body20.lr.ph.i:                               ; preds = %do.body4.i
  %nr_partial.i = getelementptr inbounds %struct.kmem_cache_node, ptr %0, i32 0, i32 1
  %add.ptr48.i = getelementptr %struct.list_head, ptr %promote.i, i32 -1
  br label %for.body20.i

for.body20.i:                                     ; preds = %if.end51.i, %for.body20.lr.ph.i
  %.pn.in146.i = phi ptr [ %2, %for.body20.lr.ph.i ], [ %.pn149.i, %if.end51.i ]
  %.pn149.i = load ptr, ptr %.pn.in146.i, align 4
  %3 = getelementptr i8, ptr %.pn.in146.i, i32 16
  %bf.load.i = load i32, ptr %3, align 4
  %bf.lshr.i = lshr i32 %bf.load.i, 1
  %bf.clear.i = and i32 %bf.lshr.i, 32767
  %bf.lshr22.i = lshr i32 %bf.load.i, 16
  %sub.i = sub nsw i32 %bf.clear.i, %bf.lshr22.i
  call void asm sideeffect "", "~{memory}"() #24, !srcloc !54
  %cmp24.i = icmp slt i32 %sub.i, 1
  br i1 %cmp24.i, label %do.body30.i, label %do.end37.i, !prof !13

do.body30.i:                                      ; preds = %for.body20.i
  call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slub.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 4609, 0\0A.popsection", ""() #24, !srcloc !55
  unreachable

do.end37.i:                                       ; preds = %for.body20.i
  %bf.load38.i = load i32, ptr %3, align 4
  %bf.lshr39.i = lshr i32 %bf.load38.i, 1
  %bf.clear40.i = and i32 %bf.lshr39.i, 32767
  %cmp41.i = icmp eq i32 %sub.i, %bf.clear40.i
  br i1 %cmp41.i, label %if.then43.i, label %if.else.i

if.then43.i:                                      ; preds = %do.end37.i
  %call.i.i.i = call zeroext i1 @__list_del_entry_valid(ptr noundef %.pn.in146.i) #27
  br i1 %call.i.i.i, label %if.end.i.i.i, label %__list_del_entry.exit.i.i

if.end.i.i.i:                                     ; preds = %if.then43.i
  %prev.i.i.i = getelementptr inbounds %struct.list_head, ptr %.pn.in146.i, i32 0, i32 1
  %4 = load ptr, ptr %prev.i.i.i, align 4
  %5 = load ptr, ptr %.pn.in146.i, align 4
  %prev1.i.i.i.i = getelementptr inbounds %struct.list_head, ptr %5, i32 0, i32 1
  store ptr %4, ptr %prev1.i.i.i.i, align 4
  store volatile ptr %5, ptr %4, align 4
  br label %__list_del_entry.exit.i.i

__list_del_entry.exit.i.i:                        ; preds = %if.end.i.i.i, %if.then43.i
  %6 = load ptr, ptr %discard.i, align 4
  %call.i.i.i.i = call zeroext i1 @__list_add_valid(ptr noundef %.pn.in146.i, ptr noundef nonnull %discard.i, ptr noundef %6) #27
  br i1 %call.i.i.i.i, label %if.end.i.i.i.i, label %list_move.exit.i

if.end.i.i.i.i:                                   ; preds = %__list_del_entry.exit.i.i
  %prev1.i.i2.i.i = getelementptr inbounds %struct.list_head, ptr %6, i32 0, i32 1
  store ptr %.pn.in146.i, ptr %prev1.i.i2.i.i, align 4
  store ptr %6, ptr %.pn.in146.i, align 4
  %prev3.i.i.i.i = getelementptr inbounds %struct.list_head, ptr %.pn.in146.i, i32 0, i32 1
  store ptr %discard.i, ptr %prev3.i.i.i.i, align 4
  store volatile ptr %.pn.in146.i, ptr %discard.i, align 4
  br label %list_move.exit.i

list_move.exit.i:                                 ; preds = %if.end.i.i.i.i, %__list_del_entry.exit.i.i
  %7 = load i32, ptr %nr_partial.i, align 4
  %dec.i = add i32 %7, -1
  store i32 %dec.i, ptr %nr_partial.i, align 4
  br label %if.end51.i

if.else.i:                                        ; preds = %do.end37.i
  %cmp44.i = icmp ult i32 %sub.i, 33
  br i1 %cmp44.i, label %if.then46.i, label %if.end51.i

if.then46.i:                                      ; preds = %if.else.i
  %add.ptr49.i = getelementptr %struct.list_head, ptr %add.ptr48.i, i32 %sub.i
  %call.i.i131.i = call zeroext i1 @__list_del_entry_valid(ptr noundef %.pn.in146.i) #27
  br i1 %call.i.i131.i, label %if.end.i.i134.i, label %__list_del_entry.exit.i136.i

if.end.i.i134.i:                                  ; preds = %if.then46.i
  %prev.i.i132.i = getelementptr inbounds %struct.list_head, ptr %.pn.in146.i, i32 0, i32 1
  %8 = load ptr, ptr %prev.i.i132.i, align 4
  %9 = load ptr, ptr %.pn.in146.i, align 4
  %prev1.i.i.i133.i = getelementptr inbounds %struct.list_head, ptr %9, i32 0, i32 1
  store ptr %8, ptr %prev1.i.i.i133.i, align 4
  store volatile ptr %9, ptr %8, align 4
  br label %__list_del_entry.exit.i136.i

__list_del_entry.exit.i136.i:                     ; preds = %if.end.i.i134.i, %if.then46.i
  %10 = load ptr, ptr %add.ptr49.i, align 4
  %call.i.i.i135.i = call zeroext i1 @__list_add_valid(ptr noundef %.pn.in146.i, ptr noundef %add.ptr49.i, ptr noundef %10) #27
  br i1 %call.i.i.i135.i, label %if.end.i.i.i139.i, label %if.end51.i

if.end.i.i.i139.i:                                ; preds = %__list_del_entry.exit.i136.i
  %prev1.i.i2.i137.i = getelementptr inbounds %struct.list_head, ptr %10, i32 0, i32 1
  store ptr %.pn.in146.i, ptr %prev1.i.i2.i137.i, align 4
  store ptr %10, ptr %.pn.in146.i, align 4
  %prev3.i.i.i138.i = getelementptr inbounds %struct.list_head, ptr %.pn.in146.i, i32 0, i32 1
  store ptr %add.ptr49.i, ptr %prev3.i.i.i138.i, align 4
  store volatile ptr %.pn.in146.i, ptr %add.ptr49.i, align 4
  br label %if.end51.i

if.end51.i:                                       ; preds = %if.end.i.i.i139.i, %__list_del_entry.exit.i136.i, %if.else.i, %list_move.exit.i
  %cmp18.not.i = icmp eq ptr %.pn149.i, %partial.i
  br i1 %cmp18.not.i, label %for.body61.i.preheader, label %for.body20.i

for.body61.i.preheader:                           ; preds = %if.end51.i, %do.body4.i
  br label %for.body61.i

for.body61.i:                                     ; preds = %list_splice.exit.i, %for.body61.i.preheader
  %i.1150.i = phi i32 [ %dec66.i, %list_splice.exit.i ], [ 31, %for.body61.i.preheader ]
  %add.ptr63.i = getelementptr %struct.list_head, ptr %promote.i, i32 %i.1150.i
  %11 = load volatile ptr, ptr %add.ptr63.i, align 4
  %cmp.i.not.i.i = icmp eq ptr %11, %add.ptr63.i
  br i1 %cmp.i.not.i.i, label %list_splice.exit.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %for.body61.i
  %12 = load ptr, ptr %partial.i, align 4
  %prev2.i.i.i = getelementptr %struct.list_head, ptr %promote.i, i32 %i.1150.i, i32 1
  %13 = load ptr, ptr %prev2.i.i.i, align 4
  %prev3.i.i.i = getelementptr inbounds %struct.list_head, ptr %11, i32 0, i32 1
  store ptr %partial.i, ptr %prev3.i.i.i, align 4
  store ptr %11, ptr %partial.i, align 4
  store ptr %12, ptr %13, align 4
  %prev6.i.i.i = getelementptr inbounds %struct.list_head, ptr %12, i32 0, i32 1
  store ptr %13, ptr %prev6.i.i.i, align 4
  br label %list_splice.exit.i

list_splice.exit.i:                               ; preds = %if.then.i.i, %for.body61.i
  %dec66.i = add nsw i32 %i.1150.i, -1
  %cmp59.not.i = icmp eq i32 %i.1150.i, 0
  br i1 %cmp59.not.i, label %for.end67.i, label %for.body61.i

for.end67.i:                                      ; preds = %list_splice.exit.i
  call void @_raw_spin_unlock_irqrestore(ptr noundef nonnull %0, i32 noundef %call7.i) #27
  %14 = load ptr, ptr %discard.i, align 4
  %cmp78.not152.i = icmp eq ptr %14, %discard.i
  br i1 %cmp78.not152.i, label %for.end88.i, label %for.body82.i

for.body82.i:                                     ; preds = %discard_slab.exit.i, %for.end67.i
  %.pn127.in153.i = phi ptr [ %.pn127.i, %discard_slab.exit.i ], [ %14, %for.end67.i ]
  %slab.1.i = getelementptr i8, ptr %.pn127.in153.i, i32 -4
  %.pn127.i = load ptr, ptr %.pn127.in153.i, align 4
  %15 = load volatile i32, ptr %slab.1.i, align 4
  %cmp.i.not.i.i.i.i.i = icmp eq i32 %15, -1
  br i1 %cmp.i.not.i.i.i.i.i, label %if.then.i.i.i.i.i, label %slab_nid.exit.i.i, !prof !13

if.then.i.i.i.i.i:                                ; preds = %for.body82.i
  call void @dump_page(ptr noundef %slab.1.i, ptr noundef nonnull @.str.88) #27
  call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/mm.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 1368, 0\0A.popsection", ""() #24, !srcloc !37
  unreachable

slab_nid.exit.i.i:                                ; preds = %for.body82.i
  %16 = getelementptr i8, ptr %.pn127.in153.i, i32 16
  %bf.load.i.i = load i32, ptr %16, align 4
  %bf.lshr.i.i = lshr i32 %bf.load.i.i, 1
  %bf.clear.i.i = and i32 %bf.lshr.i.i, 32767
  %17 = load ptr, ptr %arrayidx.i.i, align 4
  %nr_slabs.i.i.i = getelementptr inbounds %struct.kmem_cache_node, ptr %17, i32 0, i32 3
  call void @llvm.prefetch.p0(ptr %nr_slabs.i.i.i, i32 1, i32 3, i32 1) #24
  %18 = call { i32, i32 } asm sideeffect "@ atomic_sub\0A1:\09ldrex\09$0, [$3]\0A\09sub\09$0, $0, $4\0A\09strex\09$1, $0, [$3]\0A\09teq\09$1, #0\0A\09bne\091b", "=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %nr_slabs.i.i.i, ptr %nr_slabs.i.i.i, i32 1, ptr elementtype(i32) %nr_slabs.i.i.i) #24, !srcloc !48
  %total_objects.i.i.i = getelementptr inbounds %struct.kmem_cache_node, ptr %17, i32 0, i32 4
  call void @llvm.prefetch.p0(ptr %total_objects.i.i.i, i32 1, i32 3, i32 1) #24
  %19 = call { i32, i32 } asm sideeffect "@ atomic_sub\0A1:\09ldrex\09$0, [$3]\0A\09sub\09$0, $0, $4\0A\09strex\09$1, $0, [$3]\0A\09teq\09$1, #0\0A\09bne\091b", "=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %total_objects.i.i.i, ptr %total_objects.i.i.i, i32 %bf.clear.i.i, ptr elementtype(i32) %total_objects.i.i.i) #24, !srcloc !48
  %20 = load i32, ptr %flags.i.i.i, align 4
  %and.i.i.i = and i32 %20, 524288
  %tobool.not.i.i.i = icmp eq i32 %and.i.i.i, 0
  br i1 %tobool.not.i.i.i, label %if.else.i.i.i, label %if.then.i.i.i, !prof !14

if.then.i.i.i:                                    ; preds = %slab_nid.exit.i.i
  call void @call_rcu(ptr noundef %.pn127.in153.i, ptr noundef nonnull @rcu_free_slab) #27
  br label %discard_slab.exit.i

if.else.i.i.i:                                    ; preds = %slab_nid.exit.i.i
  call fastcc void @__free_slab(ptr noundef %s, ptr noundef %slab.1.i) #28
  br label %discard_slab.exit.i

discard_slab.exit.i:                              ; preds = %if.else.i.i.i, %if.then.i.i.i
  %cmp78.not.i = icmp eq ptr %.pn127.i, %discard.i
  br i1 %cmp78.not.i, label %for.end88.i, label %for.body82.i

for.end88.i:                                      ; preds = %discard_slab.exit.i, %for.end67.i
  %21 = load ptr, ptr %arrayidx.i.i, align 4
  %nr_slabs.i.i = getelementptr inbounds %struct.kmem_cache_node, ptr %21, i32 0, i32 3
  %22 = load volatile i32, ptr %nr_slabs.i.i, align 4
  %tobool90.not.i = icmp ne i32 %22, 0
  %spec.select.i = zext i1 %tobool90.not.i to i32
  br label %__kmem_cache_do_shrink.exit

__kmem_cache_do_shrink.exit:                      ; preds = %for.end88.i, %entry
  %ret.0.lcssa.i = phi i32 [ 0, %entry ], [ %spec.select.i, %for.end88.i ]
  call void @llvm.lifetime.end.p0(i64 256, ptr nonnull %promote.i) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %discard.i) #24
  ret i32 %ret.0.lcssa.i
}

; Function Attrs: cold nounwind null_pointer_is_valid optsize sspstrong uwtable(sync)
define dso_local void @kmem_cache_init() local_unnamed_addr #2 section ".init.text" align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  callbr void asm sideeffect "1:\0A\09b ${1:l}\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr nonnull @slub_debug_enabled, ptr blockaddress(@kmem_cache_init, %if.then2)) #24
          to label %if.end4 [label %if.then2], !srcloc !10

if.then2:                                         ; preds = %entry
  %call3 = tail call i32 @no_hash_pointers_enable(ptr noundef null) #27
  br label %if.end4

if.end4:                                          ; preds = %if.then2, %entry
  store ptr @kmem_cache_init.boot_kmem_cache_node, ptr @kmem_cache_node, align 4
  store ptr @kmem_cache_init.boot_kmem_cache, ptr @kmem_cache, align 4
  tail call void @_set_bit(i32 noundef 0, ptr noundef nonnull @slab_nodes) #27
  %0 = load ptr, ptr @kmem_cache_node, align 4
  tail call void @create_boot_cache(ptr noundef %0, ptr noundef nonnull @.str.6, i32 noundef 72, i32 noundef 8192, i32 noundef 0, i32 noundef 0) #27
  store i32 1, ptr @slab_state, align 4
  %1 = load ptr, ptr @kmem_cache, align 4
  tail call void @create_boot_cache(ptr noundef %1, ptr noundef nonnull @.str.7, i32 noundef 256, i32 noundef 8192, i32 noundef 0, i32 noundef 0) #27
  %call5 = tail call fastcc ptr @bootstrap(ptr noundef nonnull @kmem_cache_init.boot_kmem_cache) #32
  store ptr %call5, ptr @kmem_cache, align 4
  %call6 = tail call fastcc ptr @bootstrap(ptr noundef nonnull @kmem_cache_init.boot_kmem_cache_node) #32
  store ptr %call6, ptr @kmem_cache_node, align 4
  tail call void @setup_kmalloc_cache_index_table() #27
  tail call void @create_kmalloc_caches(i32 noundef 0) #27
  tail call fastcc void @init_freelist_randomization() #32
  %call.i = tail call i32 @__cpuhp_setup_state(i32 noundef 11, ptr noundef nonnull @.str.8, i1 noundef zeroext false, ptr noundef null, ptr noundef nonnull @slub_cpu_dead, i1 noundef zeroext false) #27
  %2 = load i32, ptr @slub_min_order, align 4
  %3 = load i32, ptr @slub_max_order, align 4
  %4 = load i32, ptr @slub_min_objects, align 4
  %5 = load i32, ptr @nr_cpu_ids, align 4
  %call9 = tail call i32 (ptr, ...) @_printk(ptr noundef nonnull @.str.9, i32 noundef 128, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5, i32 noundef 1) #26
  ret void
}

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @no_hash_pointers_enable(ptr noundef) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local void @create_boot_cache(ptr noundef, ptr noundef, i32 noundef, i32 noundef, i32 noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: cold nounwind null_pointer_is_valid optsize sspstrong uwtable(sync)
define internal fastcc ptr @bootstrap(ptr noundef %static_cache) unnamed_addr #2 section ".init.text" align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load ptr, ptr @kmem_cache, align 4
  %call.i = tail call noalias align 8 ptr @kmem_cache_alloc(ptr noundef %0, i32 noundef 2304) #27
  %1 = load ptr, ptr @kmem_cache, align 4
  %object_size = getelementptr inbounds %struct.kmem_cache, ptr %1, i32 0, i32 4
  %2 = load i32, ptr %object_size, align 4
  %call1 = tail call ptr @__memcpy(ptr noundef %call.i, ptr noundef %static_cache, i32 noundef %2) #27
  %3 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i = and i32 %3, -16384
  %4 = inttoptr i32 %and.i to ptr
  %cpu = getelementptr inbounds %struct.thread_info, ptr %4, i32 0, i32 3
  %5 = load i32, ptr %cpu, align 4
  %6 = load ptr, ptr %call.i, align 8
  %7 = ptrtoint ptr %6 to i32
  %arrayidx.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %5
  %8 = load i32, ptr %arrayidx.i, align 4
  %add.i = add i32 %8, %7
  %9 = inttoptr i32 %add.i to ptr
  %10 = load ptr, ptr %9, align 4
  %slab3.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %9, i32 0, i32 2
  %11 = load ptr, ptr %slab3.i, align 4
  store ptr null, ptr %slab3.i, align 4
  store ptr null, ptr %9, align 4
  %tid.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %9, i32 0, i32 1
  %12 = load i32, ptr %tid.i, align 4
  %add.i.i = add i32 %12, 1
  store i32 %add.i.i, ptr %tid.i, align 4
  %tobool.not.i = icmp eq ptr %11, null
  br i1 %tobool.not.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %entry
  tail call fastcc void @deactivate_slab(ptr noundef %call.i, ptr noundef nonnull %11, ptr noundef %10) #27
  %13 = load ptr, ptr %call.i, align 8
  %arrayidx.i.i = getelementptr %struct.kmem_cache_cpu, ptr %13, i32 0, i32 5, i32 12
  %14 = ptrtoint ptr %arrayidx.i.i to i32
  %15 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i = and i32 %15, -16384
  %16 = inttoptr i32 %and.i.i.i to ptr
  %cpu.i.i = getelementptr inbounds %struct.thread_info, ptr %16, i32 0, i32 3
  %17 = load i32, ptr %cpu.i.i, align 4
  %arrayidx7.i.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %17
  %18 = load i32, ptr %arrayidx7.i.i, align 4
  %add.i17.i = add i32 %18, %14
  %19 = inttoptr i32 %add.i17.i to ptr
  %20 = load i32, ptr %19, align 4
  %add8.i.i = add i32 %20, 1
  store i32 %add8.i.i, ptr %19, align 4
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %entry
  %partial.i.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %9, i32 0, i32 3
  %21 = load ptr, ptr %partial.i.i, align 4
  store ptr null, ptr %partial.i.i, align 4
  %tobool.not.i.i = icmp eq ptr %21, null
  br i1 %tobool.not.i.i, label %__flush_cpu_slab.exit, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.end.i
  tail call fastcc void @__unfreeze_partials(ptr noundef %call.i, ptr noundef nonnull %21) #27
  br label %__flush_cpu_slab.exit

__flush_cpu_slab.exit:                            ; preds = %if.then.i.i, %if.end.i
  %arrayidx.i47 = getelementptr %struct.kmem_cache, ptr %call.i, i32 0, i32 26, i32 0
  %22 = load ptr, ptr %arrayidx.i47, align 4
  %tobool.not = icmp eq ptr %22, null
  br i1 %tobool.not, label %for.end29, label %if.then

if.then:                                          ; preds = %__flush_cpu_slab.exit
  %partial = getelementptr inbounds %struct.kmem_cache_node, ptr %22, i32 0, i32 2
  %.pn48 = load ptr, ptr %partial, align 4
  %cmp6.not49 = icmp eq ptr %.pn48, %partial
  br i1 %cmp6.not49, label %for.end, label %for.body7

for.body7:                                        ; preds = %for.body7, %if.then
  %.pn50 = phi ptr [ %.pn, %for.body7 ], [ %.pn48, %if.then ]
  %slab_cache = getelementptr i8, ptr %.pn50, i32 8
  store ptr %call.i, ptr %slab_cache, align 4
  %.pn = load ptr, ptr %.pn50, align 4
  %cmp6.not = icmp eq ptr %.pn, %partial
  br i1 %cmp6.not, label %for.end, label %for.body7

for.end:                                          ; preds = %for.body7, %if.then
  %full = getelementptr inbounds %struct.kmem_cache_node, ptr %22, i32 0, i32 5
  %.pn4651 = load ptr, ptr %full, align 4
  %cmp18.not52 = icmp eq ptr %.pn4651, %full
  br i1 %cmp18.not52, label %for.end29, label %for.body20

for.body20:                                       ; preds = %for.body20, %for.end
  %.pn4653 = phi ptr [ %.pn46, %for.body20 ], [ %.pn4651, %for.end ]
  %slab_cache21 = getelementptr i8, ptr %.pn4653, i32 8
  store ptr %call.i, ptr %slab_cache21, align 4
  %.pn46 = load ptr, ptr %.pn4653, align 4
  %cmp18.not = icmp eq ptr %.pn46, %full
  br i1 %cmp18.not, label %for.end29, label %for.body20

for.end29:                                        ; preds = %for.body20, %for.end, %__flush_cpu_slab.exit
  %list = getelementptr inbounds %struct.kmem_cache, ptr %call.i, i32 0, i32 19
  %23 = load ptr, ptr @slab_caches, align 4
  %call.i.i = tail call zeroext i1 @__list_add_valid(ptr noundef %list, ptr noundef nonnull @slab_caches, ptr noundef %23) #27
  br i1 %call.i.i, label %if.end.i.i, label %list_add.exit

if.end.i.i:                                       ; preds = %for.end29
  %prev1.i.i = getelementptr inbounds %struct.list_head, ptr %23, i32 0, i32 1
  store ptr %list, ptr %prev1.i.i, align 4
  store ptr %23, ptr %list, align 8
  %prev3.i.i = getelementptr inbounds %struct.kmem_cache, ptr %call.i, i32 0, i32 19, i32 1
  store ptr @slab_caches, ptr %prev3.i.i, align 4
  store volatile ptr %list, ptr @slab_caches, align 4
  br label %list_add.exit

list_add.exit:                                    ; preds = %if.end.i.i, %for.end29
  ret ptr %call.i
}

; Function Attrs: null_pointer_is_valid
declare dso_local void @setup_kmalloc_cache_index_table() local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local void @create_kmalloc_caches(i32 noundef) local_unnamed_addr #3

; Function Attrs: cold nounwind null_pointer_is_valid optsize sspstrong uwtable(sync)
define internal fastcc void @init_freelist_randomization() unnamed_addr #2 section ".init.text" align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  tail call void @mutex_lock_nested(ptr noundef nonnull @slab_mutex, i32 noundef 0) #27
  %.pn7 = load ptr, ptr @slab_caches, align 4
  %cmp.not8 = icmp eq ptr %.pn7, @slab_caches
  br i1 %cmp.not8, label %for.end, label %for.body

for.body:                                         ; preds = %for.body, %entry
  %.pn9 = phi ptr [ %.pn, %for.body ], [ %.pn7, %entry ]
  %s.0 = getelementptr i8, ptr %.pn9, i32 -80
  %call = tail call fastcc i32 @init_cache_random_seq(ptr noundef %s.0) #25
  %.pn = load ptr, ptr %.pn9, align 4
  %cmp.not = icmp eq ptr %.pn, @slab_caches
  br i1 %cmp.not, label %for.end, label %for.body

for.end:                                          ; preds = %for.body, %entry
  tail call void @mutex_unlock(ptr noundef nonnull @slab_mutex) #27
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @slub_cpu_dead(i32 noundef %cpu) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  tail call void @mutex_lock_nested(ptr noundef nonnull @slab_mutex, i32 noundef 0) #27
  %.pn7 = load ptr, ptr @slab_caches, align 4
  %cmp.not8 = icmp eq ptr %.pn7, @slab_caches
  br i1 %cmp.not8, label %for.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %entry
  %arrayidx.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %cpu
  br label %for.body

for.body:                                         ; preds = %__flush_cpu_slab.exit, %for.body.lr.ph
  %.pn9 = phi ptr [ %.pn7, %for.body.lr.ph ], [ %.pn, %__flush_cpu_slab.exit ]
  %s.0 = getelementptr i8, ptr %.pn9, i32 -80
  %0 = load ptr, ptr %s.0, align 4
  %1 = ptrtoint ptr %0 to i32
  %2 = load i32, ptr %arrayidx.i, align 4
  %add.i = add i32 %2, %1
  %3 = inttoptr i32 %add.i to ptr
  %4 = load ptr, ptr %3, align 4
  %slab3.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %3, i32 0, i32 2
  %5 = load ptr, ptr %slab3.i, align 4
  store ptr null, ptr %slab3.i, align 4
  store ptr null, ptr %3, align 4
  %tid.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %3, i32 0, i32 1
  %6 = load i32, ptr %tid.i, align 4
  %add.i.i = add i32 %6, 1
  store i32 %add.i.i, ptr %tid.i, align 4
  %tobool.not.i = icmp eq ptr %5, null
  br i1 %tobool.not.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %for.body
  tail call fastcc void @deactivate_slab(ptr noundef %s.0, ptr noundef nonnull %5, ptr noundef %4) #27
  %7 = load ptr, ptr %s.0, align 4
  %arrayidx.i.i = getelementptr %struct.kmem_cache_cpu, ptr %7, i32 0, i32 5, i32 12
  %8 = ptrtoint ptr %arrayidx.i.i to i32
  %9 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i = and i32 %9, -16384
  %10 = inttoptr i32 %and.i.i.i to ptr
  %cpu.i.i = getelementptr inbounds %struct.thread_info, ptr %10, i32 0, i32 3
  %11 = load i32, ptr %cpu.i.i, align 4
  %arrayidx7.i.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %11
  %12 = load i32, ptr %arrayidx7.i.i, align 4
  %add.i17.i = add i32 %12, %8
  %13 = inttoptr i32 %add.i17.i to ptr
  %14 = load i32, ptr %13, align 4
  %add8.i.i = add i32 %14, 1
  store i32 %add8.i.i, ptr %13, align 4
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %for.body
  %partial.i.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %3, i32 0, i32 3
  %15 = load ptr, ptr %partial.i.i, align 4
  store ptr null, ptr %partial.i.i, align 4
  %tobool.not.i.i = icmp eq ptr %15, null
  br i1 %tobool.not.i.i, label %__flush_cpu_slab.exit, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.end.i
  tail call fastcc void @__unfreeze_partials(ptr noundef %s.0, ptr noundef nonnull %15) #27
  br label %__flush_cpu_slab.exit

__flush_cpu_slab.exit:                            ; preds = %if.then.i.i, %if.end.i
  %.pn = load ptr, ptr %.pn9, align 4
  %cmp.not = icmp eq ptr %.pn, @slab_caches
  br i1 %cmp.not, label %for.end, label %for.body

for.end:                                          ; preds = %__flush_cpu_slab.exit, %entry
  tail call void @mutex_unlock(ptr noundef nonnull @slab_mutex) #27
  ret i32 0
}

; Function Attrs: cold null_pointer_is_valid
declare dso_local i32 @_printk(ptr noundef, ...) local_unnamed_addr #10

; Function Attrs: cold mustprogress nofree norecurse nosync nounwind null_pointer_is_valid optsize readnone sspstrong willreturn uwtable(sync)
define dso_local void @kmem_cache_init_late() local_unnamed_addr #11 section ".init.text" align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define dso_local ptr @__kmem_cache_alias(ptr noundef %name, i32 noundef %size, i32 noundef %align, i32 noundef %flags, ptr noundef %ctor) local_unnamed_addr #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %call = tail call ptr @find_mergeable(i32 noundef %size, i32 noundef %align, i32 noundef %flags, ptr noundef %name, ptr noundef %ctor) #27
  %tobool.not = icmp eq ptr %call, null
  br i1 %tobool.not, label %if.end13, label %if.then

if.then:                                          ; preds = %entry
  %refcount = getelementptr inbounds %struct.kmem_cache, ptr %call, i32 0, i32 13
  %0 = load i32, ptr %refcount, align 4
  %inc = add i32 %0, 1
  store i32 %inc, ptr %refcount, align 4
  %object_size = getelementptr inbounds %struct.kmem_cache, ptr %call, i32 0, i32 4
  %1 = load i32, ptr %object_size, align 4
  %2 = tail call i32 @llvm.umax.i32(i32 %1, i32 %size)
  store i32 %2, ptr %object_size, align 4
  %inuse = getelementptr inbounds %struct.kmem_cache, ptr %call, i32 0, i32 15
  %3 = load i32, ptr %inuse, align 4
  %add = add i32 %size, 3
  %and = and i32 %add, -4
  %4 = tail call i32 @llvm.umax.i32(i32 %3, i32 %and)
  store i32 %4, ptr %inuse, align 4
  %5 = load i32, ptr @slab_state, align 4
  %cmp.i = icmp eq i32 %5, 4
  br i1 %cmp.i, label %sysfs_slab_alias.exit, label %if.end.i

if.end.i:                                         ; preds = %if.then
  %6 = load ptr, ptr getelementptr inbounds ([4 x [14 x ptr]], ptr @kmalloc_caches, i32 0, i32 0, i32 7), align 4
  %call7.i.i = tail call noalias align 8 ptr @kmem_cache_alloc_trace(ptr noundef %6, i32 noundef 3264, i32 noundef 12) #33
  %tobool.not.i = icmp eq ptr %call7.i.i, null
  br i1 %tobool.not.i, label %if.then11, label %sysfs_slab_alias.exit.thread

sysfs_slab_alias.exit.thread:                     ; preds = %if.end.i
  store ptr %call, ptr %call7.i.i, align 8
  %name7.i = getelementptr inbounds %struct.saved_alias, ptr %call7.i.i, i32 0, i32 1
  store ptr %name, ptr %name7.i, align 4
  %7 = load ptr, ptr @alias_list, align 4
  %next.i = getelementptr inbounds %struct.saved_alias, ptr %call7.i.i, i32 0, i32 2
  store ptr %7, ptr %next.i, align 8
  store ptr %call7.i.i, ptr @alias_list, align 4
  br label %if.end13

sysfs_slab_alias.exit:                            ; preds = %if.then
  %8 = load ptr, ptr @slab_kset, align 4
  %kobj.i = getelementptr inbounds %struct.kset, ptr %8, i32 0, i32 2
  tail call void @sysfs_remove_link(ptr noundef %kobj.i, ptr noundef %name) #27
  %9 = load ptr, ptr @slab_kset, align 4
  %kobj1.i = getelementptr inbounds %struct.kset, ptr %9, i32 0, i32 2
  %kobj2.i = getelementptr inbounds %struct.kmem_cache, ptr %call, i32 0, i32 20
  %call.i = tail call i32 @sysfs_create_link(ptr noundef %kobj1.i, ptr noundef %kobj2.i, ptr noundef %name) #27
  %tobool10.not = icmp eq i32 %call.i, 0
  br i1 %tobool10.not, label %if.end13, label %if.then11

if.then11:                                        ; preds = %sysfs_slab_alias.exit, %if.end.i
  %10 = load i32, ptr %refcount, align 4
  %dec = add i32 %10, -1
  store i32 %dec, ptr %refcount, align 4
  br label %if.end13

if.end13:                                         ; preds = %if.then11, %sysfs_slab_alias.exit, %sysfs_slab_alias.exit.thread, %entry
  %s.0 = phi ptr [ null, %if.then11 ], [ %call, %sysfs_slab_alias.exit ], [ null, %entry ], [ %call, %sysfs_slab_alias.exit.thread ]
  ret ptr %s.0
}

; Function Attrs: null_pointer_is_valid
declare dso_local ptr @find_mergeable(i32 noundef, i32 noundef, i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define dso_local i32 @__kmem_cache_create(ptr noundef %s, i32 noundef %flags) local_unnamed_addr #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %call = tail call fastcc i32 @kmem_cache_open(ptr noundef %s, i32 noundef %flags) #25
  %tobool.not = icmp eq i32 %call, 0
  br i1 %tobool.not, label %if.end, label %cleanup

if.end:                                           ; preds = %entry
  %0 = load i32, ptr @slab_state, align 4
  %cmp = icmp ult i32 %0, 4
  br i1 %cmp, label %cleanup, label %if.end2

if.end2:                                          ; preds = %if.end
  %call3 = tail call fastcc i32 @sysfs_slab_add(ptr noundef %s) #25
  %tobool4.not = icmp eq i32 %call3, 0
  br i1 %tobool4.not, label %if.end6, label %if.then5

if.then5:                                         ; preds = %if.end2
  tail call void @cache_random_seq_destroy(ptr noundef %s) #27
  %1 = load ptr, ptr %s, align 4
  tail call void @free_percpu(ptr noundef %1) #27
  %arrayidx.i.i.i = getelementptr %struct.kmem_cache, ptr %s, i32 0, i32 26, i32 0
  %2 = load ptr, ptr %arrayidx.i.i.i, align 4
  %tobool.not.i.i = icmp eq ptr %2, null
  br i1 %tobool.not.i.i, label %cleanup, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then5
  store ptr null, ptr %arrayidx.i.i.i, align 4
  %3 = load ptr, ptr @kmem_cache_node, align 4
  tail call void @kmem_cache_free(ptr noundef %3, ptr noundef nonnull %2) #27
  br label %cleanup

if.end6:                                          ; preds = %if.end2
  %flags7 = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 1
  %4 = load i32, ptr %flags7, align 4
  %and = and i32 %4, 65536
  %tobool8.not = icmp eq i32 %and, 0
  br i1 %tobool8.not, label %cleanup, label %if.then9

if.then9:                                         ; preds = %if.end6
  %5 = load ptr, ptr @slab_debugfs_root, align 4
  %tobool.not.i = icmp eq ptr %5, null
  br i1 %tobool.not.i, label %cleanup, label %if.end.i, !prof !13

if.end.i:                                         ; preds = %if.then9
  %name.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 18
  %6 = load ptr, ptr %name.i, align 4
  %call.i = tail call ptr @debugfs_create_dir(ptr noundef %6, ptr noundef nonnull %5) #27
  %call4.i = tail call ptr @debugfs_create_file(ptr noundef nonnull @.str.217, i16 noundef zeroext 256, ptr noundef %call.i, ptr noundef %s, ptr noundef nonnull @slab_debugfs_fops) #27
  %call5.i = tail call ptr @debugfs_create_file(ptr noundef nonnull @.str.218, i16 noundef zeroext 256, ptr noundef %call.i, ptr noundef %s, ptr noundef nonnull @slab_debugfs_fops) #27
  br label %cleanup

cleanup:                                          ; preds = %if.end.i, %if.then9, %if.end6, %if.then.i.i, %if.then5, %if.end, %entry
  %retval.0 = phi i32 [ %call, %entry ], [ 0, %if.end ], [ 0, %if.end6 ], [ %call3, %if.then5 ], [ %call3, %if.then.i.i ], [ 0, %if.then9 ], [ 0, %if.end.i ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc i32 @kmem_cache_open(ptr noundef %s, i32 noundef %flags) unnamed_addr #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %size = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 3
  %name = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 18
  %0 = load ptr, ptr %name, align 4
  %call = tail call i32 @kmem_cache_flags(i32 undef, i32 noundef %flags, ptr noundef %0) #25
  %flags1 = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 1
  store i32 %call, ptr %flags1, align 4
  %call.i = tail call i32 @get_random_u32() #27
  %random = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 21
  store i32 %call.i, ptr %random, align 4
  %call3 = tail call fastcc i32 @calculate_sizes(ptr noundef %s) #25
  %tobool.not = icmp eq i32 %call3, 0
  br i1 %tobool.not, label %error, label %if.end

if.end:                                           ; preds = %entry
  %.b = load i1, ptr @disable_higher_order_debug, align 4
  br i1 %.b, label %if.end14.i, label %cond.end25

if.end14.i:                                       ; preds = %if.end
  %1 = load i32, ptr %size, align 4
  %dec.i = add i32 %1, -1
  %shr.i = lshr i32 %dec.i, 12
  %tobool.not.i.i = icmp ult i32 %dec.i, 4096
  %2 = tail call i32 @llvm.ctlz.i32(i32 %shr.i, i1 false) #24, !range !50
  %sub.i.i = sub nuw nsw i32 32, %2
  %cond.i.i = select i1 %tobool.not.i.i, i32 0, i32 %sub.i.i
  %object_size = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 4
  %3 = load i32, ptr %object_size, align 4
  %dec.i69 = add i32 %3, -1
  %tobool.not.i.i71 = icmp ult i32 %dec.i69, 4096
  %shr.i70 = lshr i32 %dec.i69, 12
  %4 = tail call i32 @llvm.ctlz.i32(i32 %shr.i70, i1 false) #24, !range !50
  %sub.i.i72 = sub nuw nsw i32 32, %4
  %cond.i.i73 = select i1 %tobool.not.i.i71, i32 0, i32 %sub.i.i72
  %cmp = icmp sgt i32 %cond.i.i, %cond.i.i73
  br i1 %cmp, label %if.then9, label %cond.end25

if.then9:                                         ; preds = %if.end14.i
  %5 = load i32, ptr %flags1, align 4
  %and = and i32 %5, -68609
  store i32 %and, ptr %flags1, align 4
  %offset = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 6
  store i32 0, ptr %offset, align 4
  %call11 = tail call fastcc i32 @calculate_sizes(ptr noundef %s) #25
  %tobool12.not = icmp eq i32 %call11, 0
  br i1 %tobool12.not, label %error, label %cond.end25

cond.end25:                                       ; preds = %if.then9, %if.end14.i, %if.end
  %6 = load i32, ptr %size, align 4
  %tobool.not.i.i77 = icmp eq i32 %6, 0
  %7 = tail call i32 @llvm.ctlz.i32(i32 %6, i1 false) #24, !range !50
  %sub.i.op.i = sub nsw i32 31, %7
  %sub.i.op.i.op = sdiv i32 %sub.i.op.i, 2
  %8 = call i32 @llvm.umin.i32(i32 %sub.i.op.i.op, i32 10)
  %9 = call i32 @llvm.umax.i32(i32 %8, i32 5)
  %10 = select i1 %tobool.not.i.i77, i32 5, i32 %9
  %min_partial.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 2
  store i32 %10, ptr %min_partial.i, align 4
  callbr void asm sideeffect "1:\0A\09b ${1:l}\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr nonnull @slub_debug_enabled, ptr blockaddress(@kmem_cache_open, %if.then37.i.i.i.i)) #24
          to label %if.else.i [label %if.then37.i.i.i.i], !srcloc !10

if.then37.i.i.i.i:                                ; preds = %cond.end25
  %11 = load i32, ptr %flags1, align 4
  %and39.i.i.i.i = and i32 %11, 2166016
  %tobool40.i.i.i.i = icmp eq i32 %and39.i.i.i.i, 0
  br i1 %tobool40.i.i.i.i, label %if.else.i, label %set_cpu_partial.exit

if.else.i:                                        ; preds = %if.then37.i.i.i.i, %cond.end25
  %12 = load i32, ptr %size, align 4
  %cmp.i79 = icmp ugt i32 %12, 4095
  br i1 %cmp.i79, label %set_cpu_partial.exit, label %if.else2.i

if.else2.i:                                       ; preds = %if.else.i
  %cmp4.i = icmp ugt i32 %12, 1023
  br i1 %cmp4.i, label %set_cpu_partial.exit, label %if.else6.i

if.else6.i:                                       ; preds = %if.else2.i
  %cmp8.i = icmp ugt i32 %12, 255
  %..i = select i1 %cmp8.i, i32 52, i32 120
  br label %set_cpu_partial.exit

set_cpu_partial.exit:                             ; preds = %if.else6.i, %if.else2.i, %if.else.i, %if.then37.i.i.i.i
  %nr_objects.0.i = phi i32 [ 6, %if.else.i ], [ 24, %if.else2.i ], [ %..i, %if.else6.i ], [ 0, %if.then37.i.i.i.i ]
  %cpu_partial.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 7
  store i32 %nr_objects.0.i, ptr %cpu_partial.i.i, align 4
  %mul.i.i = shl nuw nsw i32 %nr_objects.0.i, 1
  %oo.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 9
  %.unpack.i.i = load i32, ptr %oo.i.i, align 4
  %and.i.i.i = and i32 %.unpack.i.i, 65535
  %add.i.i = add nsw i32 %mul.i.i, -1
  %sub.i.i80 = add nsw i32 %add.i.i, %and.i.i.i
  %div.i.i = udiv i32 %sub.i.i80, %and.i.i.i
  %cpu_partial_slabs.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 8
  store i32 %div.i.i, ptr %cpu_partial_slabs.i.i, align 4
  %13 = load i32, ptr @slab_state, align 4
  %cmp27 = icmp ugt i32 %13, 2
  br i1 %cmp27, label %if.then29, label %if.end34

if.then29:                                        ; preds = %set_cpu_partial.exit
  %random_seq.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 22
  %14 = load ptr, ptr %random_seq.i, align 4
  %tobool.not.i81 = icmp eq ptr %14, null
  br i1 %tobool.not.i81, label %if.end.i82, label %if.end34

if.end.i82:                                       ; preds = %if.then29
  %call1.i = tail call i32 @cache_random_seq_create(ptr noundef %s, i32 noundef %and.i.i.i, i32 noundef 3264) #27
  %tobool2.not.i = icmp eq i32 %call1.i, 0
  br i1 %tobool2.not.i, label %if.end5.i, label %init_cache_random_seq.exit

if.end5.i:                                        ; preds = %if.end.i82
  %15 = load ptr, ptr %random_seq.i, align 4
  %tobool7.not.i = icmp ne ptr %15, null
  %cmp22.i = icmp ne i32 %and.i.i.i, 0
  %or.cond.i = select i1 %tobool7.not.i, i1 %cmp22.i, i1 false
  br i1 %or.cond.i, label %for.body.i.preheader, label %if.end34

for.body.i.preheader:                             ; preds = %if.end5.i
  %16 = load i32, ptr %size, align 4
  %17 = load i32, ptr %15, align 4
  %mul.i106 = mul i32 %17, %16
  store i32 %mul.i106, ptr %15, align 4
  %exitcond.not.i107 = icmp eq i32 %and.i.i.i, 1
  br i1 %exitcond.not.i107, label %if.end34, label %for.body.for.body_crit_edge.i

for.body.for.body_crit_edge.i:                    ; preds = %for.body.for.body_crit_edge.i, %for.body.i.preheader
  %inc.i108 = phi i32 [ %inc.i, %for.body.for.body_crit_edge.i ], [ 1, %for.body.i.preheader ]
  %.pre.i = load ptr, ptr %random_seq.i, align 4
  %18 = load i32, ptr %size, align 4
  %arrayidx.i = getelementptr i32, ptr %.pre.i, i32 %inc.i108
  %19 = load i32, ptr %arrayidx.i, align 4
  %mul.i = mul i32 %19, %18
  store i32 %mul.i, ptr %arrayidx.i, align 4
  %inc.i = add nuw nsw i32 %inc.i108, 1
  %exitcond.not.i = icmp eq i32 %inc.i, %and.i.i.i
  br i1 %exitcond.not.i, label %if.end34, label %for.body.for.body_crit_edge.i

init_cache_random_seq.exit:                       ; preds = %if.end.i82
  %20 = load ptr, ptr %name, align 4
  %call4.i = tail call i32 (ptr, ...) @_printk(ptr noundef nonnull @.str.130, ptr noundef %20) #26
  br label %error

if.end34:                                         ; preds = %for.body.for.body_crit_edge.i, %for.body.i.preheader, %if.end5.i, %if.then29, %set_cpu_partial.exit
  %21 = load i32, ptr @slab_nodes, align 4
  %and3.i.i.i = and i32 %21, 1
  %tobool.not.not.i = icmp eq i32 %and3.i.i.i, 0
  br i1 %tobool.not.not.i, label %if.end38, label %for.body.i85

for.body.i85:                                     ; preds = %if.end34
  %22 = load i32, ptr @slab_state, align 4
  %cmp1.i = icmp eq i32 %22, 0
  %23 = load ptr, ptr @kmem_cache_node, align 4
  br i1 %cmp1.i, label %if.then2.i, label %if.end.i87

if.then2.i:                                       ; preds = %for.body.i85
  %size.i.i = getelementptr inbounds %struct.kmem_cache, ptr %23, i32 0, i32 3
  %24 = load i32, ptr %size.i.i, align 4
  %cmp.i.i = icmp ult i32 %24, 72
  br i1 %cmp.i.i, label %do.body2.i.i, label %do.end7.i.i, !prof !13

do.body2.i.i:                                     ; preds = %if.then2.i
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slub.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 3929, 0\0A.popsection", ""() #24, !srcloc !56
  unreachable

do.end7.i.i:                                      ; preds = %if.then2.i
  %call53.i.i.i = tail call fastcc ptr @allocate_slab(ptr noundef %23, i32 noundef 2048, i32 noundef 0) #27
  %tobool9.not.i.i = icmp eq ptr %call53.i.i.i, null
  br i1 %tobool9.not.i.i, label %do.body19.i.i, label %do.end27.i.i, !prof !13

do.body19.i.i:                                    ; preds = %do.end7.i.i
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slub.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 3933, 0\0A.popsection", ""() #24, !srcloc !57
  unreachable

do.end27.i.i:                                     ; preds = %do.end7.i.i
  %25 = load volatile i32, ptr %call53.i.i.i, align 4
  %cmp.i.not.i.i.i.i.i = icmp eq i32 %25, -1
  br i1 %cmp.i.not.i.i.i.i.i, label %if.then.i.i.i.i.i, label %slab_nid.exit.i.i, !prof !13

if.then.i.i.i.i.i:                                ; preds = %do.end27.i.i
  tail call void @dump_page(ptr noundef nonnull %call53.i.i.i, ptr noundef nonnull @.str.88) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/mm.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 1368, 0\0A.popsection", ""() #24, !srcloc !37
  unreachable

slab_nid.exit.i.i:                                ; preds = %do.end27.i.i
  %freelist.i.i = getelementptr inbounds %struct.slab, ptr %call53.i.i.i, i32 0, i32 3
  %26 = load ptr, ptr %freelist.i.i, align 4
  %tobool42.not.i.i = icmp eq ptr %26, null
  br i1 %tobool42.not.i.i, label %do.body52.i.i, label %do.end60.i.i, !prof !13

do.body52.i.i:                                    ; preds = %slab_nid.exit.i.i
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slub.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 3940, 0\0A.popsection", ""() #24, !srcloc !58
  unreachable

do.end60.i.i:                                     ; preds = %slab_nid.exit.i.i
  %27 = load ptr, ptr @kmem_cache_node, align 4
  %flags.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %27, i32 0, i32 1
  %28 = load i32, ptr %flags.i.i.i, align 4
  %and.i.i.i86 = and i32 %28, 1024
  %tobool.not.i.i.i = icmp eq i32 %and.i.i.i86, 0
  br i1 %tobool.not.i.i.i, label %if.end.i.i.i, label %if.then.i.i.i

if.then.i.i.i:                                    ; preds = %do.end60.i.i
  %red_left_pad.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %27, i32 0, i32 17
  %29 = load i32, ptr %red_left_pad.i.i.i, align 4
  %idx.neg.i.i.i = sub i32 0, %29
  %add.ptr.i.i.i = getelementptr i8, ptr %26, i32 %idx.neg.i.i.i
  %call2.i.i.i = tail call ptr @__memset(ptr noundef %add.ptr.i.i.i, i32 noundef 204, i32 noundef %29) #27
  %.pr.i.i.i = load i32, ptr %flags.i.i.i, align 4
  br label %if.end.i.i.i

if.end.i.i.i:                                     ; preds = %if.then.i.i.i, %do.end60.i.i
  %30 = phi i32 [ %.pr.i.i.i, %if.then.i.i.i ], [ %28, %do.end60.i.i ]
  %tobool5.not.i.i.i = icmp sgt i32 %30, -1
  br i1 %tobool5.not.i.i.i, label %if.end10.i.i.i, label %if.then6.i.i.i

if.then6.i.i.i:                                   ; preds = %if.end.i.i.i
  %object_size.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %27, i32 0, i32 4
  %31 = load i32, ptr %object_size.i.i.i, align 4
  %sub.i.i.i = add i32 %31, -1
  %call7.i.i.i = tail call ptr @__memset(ptr noundef nonnull %26, i32 noundef 107, i32 noundef %sub.i.i.i) #27
  %32 = load i32, ptr %object_size.i.i.i, align 4
  %sub9.i.i.i = add i32 %32, -1
  %arrayidx.i.i.i = getelementptr i8, ptr %26, i32 %sub9.i.i.i
  store i8 -91, ptr %arrayidx.i.i.i, align 1
  %.pre.i.i.i = load i32, ptr %flags.i.i.i, align 4
  br label %if.end10.i.i.i

if.end10.i.i.i:                                   ; preds = %if.then6.i.i.i, %if.end.i.i.i
  %33 = phi i32 [ %.pre.i.i.i, %if.then6.i.i.i ], [ %30, %if.end.i.i.i ]
  %and12.i.i.i = and i32 %33, 1024
  %tobool13.not.i.i.i = icmp eq i32 %and12.i.i.i, 0
  br i1 %tobool13.not.i.i.i, label %init_object.exit.i.i, label %if.then14.i.i.i

if.then14.i.i.i:                                  ; preds = %if.end10.i.i.i
  %object_size15.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %27, i32 0, i32 4
  %34 = load i32, ptr %object_size15.i.i.i, align 4
  %add.ptr16.i.i.i = getelementptr i8, ptr %26, i32 %34
  %inuse.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %27, i32 0, i32 15
  %35 = load i32, ptr %inuse.i.i.i, align 4
  %sub19.i.i.i = sub i32 %35, %34
  %call20.i.i.i = tail call ptr @__memset(ptr noundef %add.ptr16.i.i.i, i32 noundef 204, i32 noundef %sub19.i.i.i) #27
  br label %init_object.exit.i.i

init_object.exit.i.i:                             ; preds = %if.then14.i.i.i, %if.end10.i.i.i
  %36 = load ptr, ptr @kmem_cache_node, align 4
  %flags.i1.i.i = getelementptr inbounds %struct.kmem_cache, ptr %36, i32 0, i32 1
  %37 = load i32, ptr %flags.i1.i.i, align 4
  %and.i2.i.i = and i32 %37, 65536
  %tobool.not.i3.i.i = icmp eq i32 %and.i2.i.i, 0
  br i1 %tobool.not.i3.i.i, label %init_tracking.exit.i.i, label %if.end.i4.i.i

if.end.i4.i.i:                                    ; preds = %init_object.exit.i.i
  %offset.i.i.i.i.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %36, i32 0, i32 6
  %38 = load i32, ptr %offset.i.i.i.i.i.i.i, align 4
  %inuse.i.i.i.i.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %36, i32 0, i32 15
  %39 = load i32, ptr %inuse.i.i.i.i.i.i.i, align 4
  %cmp.i.not.i.i.i.i.i.i = icmp ult i32 %38, %39
  %add.i.i.i.i.i.i = add i32 %39, 4
  %spec.select.i.i.i.i.i.i = select i1 %cmp.i.not.i.i.i.i.i.i, i32 %39, i32 %add.i.i.i.i.i.i
  %add.ptr.i.i.i.i.i = getelementptr i8, ptr %26, i32 %spec.select.i.i.i.i.i.i
  %add.ptr1.i.i.i.i.i = getelementptr %struct.track, ptr %add.ptr.i.i.i.i.i, i32 1
  %call10.i.i.i.i = tail call ptr @__memset(ptr noundef %add.ptr1.i.i.i.i.i, i32 noundef 0, i32 noundef 80) #27
  %40 = load i32, ptr %offset.i.i.i.i.i.i.i, align 4
  %41 = load i32, ptr %inuse.i.i.i.i.i.i.i, align 4
  %cmp.i.not.i.i.i6.i.i.i = icmp ult i32 %40, %41
  %add.i.i.i7.i.i.i = add i32 %41, 4
  %spec.select.i.i.i8.i.i.i = select i1 %cmp.i.not.i.i.i6.i.i.i, i32 %41, i32 %add.i.i.i7.i.i.i
  %add.ptr.i.i9.i.i.i = getelementptr i8, ptr %26, i32 %spec.select.i.i.i8.i.i.i
  %call10.i10.i.i.i = tail call ptr @__memset(ptr noundef %add.ptr.i.i9.i.i.i, i32 noundef 0, i32 noundef 80) #27
  %.pre.i.i = load ptr, ptr @kmem_cache_node, align 4
  br label %init_tracking.exit.i.i

init_tracking.exit.i.i:                           ; preds = %if.end.i4.i.i, %init_object.exit.i.i
  %42 = phi ptr [ %36, %init_object.exit.i.i ], [ %.pre.i.i, %if.end.i4.i.i ]
  %call1.i.i.i = tail call ptr @__kasan_slab_alloc(ptr noundef %42, ptr noundef nonnull %26, i32 noundef 3264, i1 noundef zeroext false) #27
  %43 = load ptr, ptr @kmem_cache_node, align 4
  %offset.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %43, i32 0, i32 6
  %44 = load i32, ptr %offset.i.i.i, align 4
  %add.ptr.i5.i.i = getelementptr i8, ptr %call1.i.i.i, i32 %44
  %45 = load i32, ptr %add.ptr.i5.i.i, align 4
  %46 = ptrtoint ptr %add.ptr.i5.i.i to i32
  %random.i.i.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %43, i32 0, i32 21
  %47 = load i32, ptr %random.i.i.i.i.i, align 4
  %48 = tail call i32 @llvm.bswap.i32(i32 %46) #24
  %xor.i.i.i.i.i = xor i32 %47, %45
  %xor2.i.i.i.i.i = xor i32 %xor.i.i.i.i.i, %48
  %49 = inttoptr i32 %xor2.i.i.i.i.i to ptr
  store ptr %49, ptr %freelist.i.i, align 4
  %50 = getelementptr inbounds %struct.slab, ptr %call53.i.i.i, i32 0, i32 4
  %bf.load.i.i = load i32, ptr %50, align 4
  %bf.clear.i.i = and i32 %bf.load.i.i, 65534
  %bf.set.i.i = or i32 %bf.clear.i.i, 65536
  store i32 %bf.set.i.i, ptr %50, align 4
  %node67.i.i = getelementptr inbounds %struct.kmem_cache, ptr %43, i32 0, i32 26
  store ptr %call1.i.i.i, ptr %node67.i.i, align 4
  %nr_partial.i.i.i = getelementptr inbounds %struct.kmem_cache_node, ptr %call1.i.i.i, i32 0, i32 1
  store i32 0, ptr %nr_partial.i.i.i, align 4
  tail call void @__raw_spin_lock_init(ptr noundef %call1.i.i.i, ptr noundef nonnull @.str.129, ptr noundef nonnull @init_kmem_cache_node.__key, i16 noundef signext 3) #27
  %partial.i.i.i = getelementptr inbounds %struct.kmem_cache_node, ptr %call1.i.i.i, i32 0, i32 2
  store volatile ptr %partial.i.i.i, ptr %partial.i.i.i, align 4
  %prev.i.i.i.i = getelementptr inbounds %struct.kmem_cache_node, ptr %call1.i.i.i, i32 0, i32 2, i32 1
  store ptr %partial.i.i.i, ptr %prev.i.i.i.i, align 4
  %nr_slabs.i.i.i = getelementptr inbounds %struct.kmem_cache_node, ptr %call1.i.i.i, i32 0, i32 3
  store volatile i32 0, ptr %nr_slabs.i.i.i, align 4
  %total_objects.i.i.i = getelementptr inbounds %struct.kmem_cache_node, ptr %call1.i.i.i, i32 0, i32 4
  store volatile i32 0, ptr %total_objects.i.i.i, align 4
  %full.i.i.i = getelementptr inbounds %struct.kmem_cache_node, ptr %call1.i.i.i, i32 0, i32 5
  store volatile ptr %full.i.i.i, ptr %full.i.i.i, align 4
  %prev.i6.i.i.i = getelementptr inbounds %struct.kmem_cache_node, ptr %call1.i.i.i, i32 0, i32 5, i32 1
  store ptr %full.i.i.i, ptr %prev.i6.i.i.i, align 4
  %51 = load ptr, ptr @kmem_cache_node, align 4
  %arrayidx.i.i.i.i = getelementptr %struct.kmem_cache, ptr %51, i32 0, i32 26, i32 0
  %52 = load ptr, ptr %arrayidx.i.i.i.i, align 4
  %tobool.not.i6.i.i = icmp eq ptr %52, null
  br i1 %tobool.not.i6.i.i, label %inc_slabs_node.exit.i.i, label %if.then.i9.i.i, !prof !13

if.then.i9.i.i:                                   ; preds = %init_tracking.exit.i.i
  %bf.load68.i.i = load i32, ptr %50, align 4
  %bf.lshr.i.i = lshr i32 %bf.load68.i.i, 1
  %bf.clear69.i.i = and i32 %bf.lshr.i.i, 32767
  %nr_slabs.i7.i.i = getelementptr inbounds %struct.kmem_cache_node, ptr %52, i32 0, i32 3
  tail call void @llvm.prefetch.p0(ptr %nr_slabs.i7.i.i, i32 1, i32 3, i32 1) #24
  %53 = tail call { i32, i32 } asm sideeffect "@ atomic_add\0A1:\09ldrex\09$0, [$3]\0A\09add\09$0, $0, $4\0A\09strex\09$1, $0, [$3]\0A\09teq\09$1, #0\0A\09bne\091b", "=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %nr_slabs.i7.i.i, ptr %nr_slabs.i7.i.i, i32 1, ptr elementtype(i32) %nr_slabs.i7.i.i) #24, !srcloc !59
  %total_objects.i8.i.i = getelementptr inbounds %struct.kmem_cache_node, ptr %52, i32 0, i32 4
  tail call void @llvm.prefetch.p0(ptr %total_objects.i8.i.i, i32 1, i32 3, i32 1) #24
  %54 = tail call { i32, i32 } asm sideeffect "@ atomic_add\0A1:\09ldrex\09$0, [$3]\0A\09add\09$0, $0, $4\0A\09strex\09$1, $0, [$3]\0A\09teq\09$1, #0\0A\09bne\091b", "=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %total_objects.i8.i.i, ptr %total_objects.i8.i.i, i32 %bf.clear69.i.i, ptr elementtype(i32) %total_objects.i8.i.i) #24, !srcloc !59
  %.pre14.i.i = load ptr, ptr %partial.i.i.i, align 4
  br label %inc_slabs_node.exit.i.i

inc_slabs_node.exit.i.i:                          ; preds = %if.then.i9.i.i, %init_tracking.exit.i.i
  %55 = phi ptr [ %partial.i.i.i, %init_tracking.exit.i.i ], [ %.pre14.i.i, %if.then.i9.i.i ]
  %56 = load i32, ptr %nr_partial.i.i.i, align 4
  %inc.i.i.i = add i32 %56, 1
  store i32 %inc.i.i.i, ptr %nr_partial.i.i.i, align 4
  %57 = getelementptr inbounds %struct.slab, ptr %call53.i.i.i, i32 0, i32 1
  %call.i.i5.i.i.i = tail call zeroext i1 @__list_add_valid(ptr noundef %57, ptr noundef %partial.i.i.i, ptr noundef %55) #27
  br i1 %call.i.i5.i.i.i, label %if.end.i.i7.i.i.i, label %if.end38

if.end.i.i7.i.i.i:                                ; preds = %inc_slabs_node.exit.i.i
  %prev1.i.i.i.i.i = getelementptr inbounds %struct.list_head, ptr %55, i32 0, i32 1
  store ptr %57, ptr %prev1.i.i.i.i.i, align 4
  store ptr %55, ptr %57, align 4
  %prev3.i.i6.i.i.i = getelementptr inbounds %struct.slab, ptr %call53.i.i.i, i32 0, i32 1, i32 0, i32 1
  store ptr %partial.i.i.i, ptr %prev3.i.i6.i.i.i, align 4
  store volatile ptr %57, ptr %partial.i.i.i, align 4
  br label %if.end38

if.end.i87:                                       ; preds = %for.body.i85
  %call.i.i = tail call noalias align 8 ptr @kmem_cache_alloc(ptr noundef %23, i32 noundef 3264) #27
  %tobool4.not.i = icmp eq ptr %call.i.i, null
  br i1 %tobool4.not.i, label %if.then5.i, label %if.end6.i

if.then5.i:                                       ; preds = %if.end.i87
  %arrayidx.i.i17.i = getelementptr %struct.kmem_cache, ptr %s, i32 0, i32 26, i32 0
  %58 = load ptr, ptr %arrayidx.i.i17.i, align 4
  %tobool.not.i.i88 = icmp eq ptr %58, null
  br i1 %tobool.not.i.i88, label %error, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then5.i
  store ptr null, ptr %arrayidx.i.i17.i, align 4
  %59 = load ptr, ptr @kmem_cache_node, align 4
  tail call void @kmem_cache_free(ptr noundef %59, ptr noundef nonnull %58) #27
  br label %error

if.end6.i:                                        ; preds = %if.end.i87
  %nr_partial.i.i = getelementptr inbounds %struct.kmem_cache_node, ptr %call.i.i, i32 0, i32 1
  store i32 0, ptr %nr_partial.i.i, align 4
  tail call void @__raw_spin_lock_init(ptr noundef nonnull %call.i.i, ptr noundef nonnull @.str.129, ptr noundef nonnull @init_kmem_cache_node.__key, i16 noundef signext 3) #27
  %partial.i.i = getelementptr inbounds %struct.kmem_cache_node, ptr %call.i.i, i32 0, i32 2
  store volatile ptr %partial.i.i, ptr %partial.i.i, align 8
  %prev.i.i.i = getelementptr inbounds %struct.kmem_cache_node, ptr %call.i.i, i32 0, i32 2, i32 1
  store ptr %partial.i.i, ptr %prev.i.i.i, align 4
  %nr_slabs.i.i = getelementptr inbounds %struct.kmem_cache_node, ptr %call.i.i, i32 0, i32 3
  store volatile i32 0, ptr %nr_slabs.i.i, align 8
  %total_objects.i.i = getelementptr inbounds %struct.kmem_cache_node, ptr %call.i.i, i32 0, i32 4
  store volatile i32 0, ptr %total_objects.i.i, align 4
  %full.i.i = getelementptr inbounds %struct.kmem_cache_node, ptr %call.i.i, i32 0, i32 5
  store volatile ptr %full.i.i, ptr %full.i.i, align 8
  %prev.i6.i.i = getelementptr inbounds %struct.kmem_cache_node, ptr %call.i.i, i32 0, i32 5, i32 1
  store ptr %full.i.i, ptr %prev.i6.i.i, align 4
  %node7.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 26
  store ptr %call.i.i, ptr %node7.i, align 4
  br label %if.end38

if.end38:                                         ; preds = %if.end6.i, %if.end.i.i7.i.i.i, %inc_slabs_node.exit.i.i, %if.end34
  %call.i89 = tail call noalias ptr @__alloc_percpu(i32 noundef 152, i32 noundef 8) #30
  store ptr %call.i89, ptr %s, align 4
  %tobool.not.i90 = icmp eq ptr %call.i89, null
  br i1 %tobool.not.i90, label %error, label %if.end.i91

if.end.i91:                                       ; preds = %if.end38
  %call14.i.i = tail call i32 @cpumask_next(i32 noundef -1, ptr noundef nonnull @__cpu_possible_mask) #29
  %60 = load i32, ptr @nr_cpu_ids, align 4
  %cmp15.i.i = icmp ult i32 %call14.i.i, %60
  br i1 %cmp15.i.i, label %do.body.i.i, label %return

do.body.i.i:                                      ; preds = %do.body.i.do.body.i_crit_edge.i, %if.end.i91
  %61 = phi ptr [ %.pre.i95, %do.body.i.do.body.i_crit_edge.i ], [ %call.i89, %if.end.i91 ]
  %call16.i.i = phi i32 [ %call.i.i93, %do.body.i.do.body.i_crit_edge.i ], [ %call14.i.i, %if.end.i91 ]
  %62 = ptrtoint ptr %61 to i32
  %arrayidx.i.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %call16.i.i
  %63 = load i32, ptr %arrayidx.i.i, align 4
  %add.i.i92 = add i32 %63, %62
  %64 = inttoptr i32 %add.i.i92 to ptr
  %lock.i.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %64, i32 0, i32 4
  tail call void @debug_check_no_locks_freed(ptr noundef %lock.i.i, i32 noundef 32) #27
  tail call void @lockdep_init_map_type(ptr noundef %lock.i.i, ptr noundef nonnull @.str.137, ptr noundef nonnull @init_kmem_cache_cpus.__key, i32 noundef 0, i8 noundef zeroext 3, i8 noundef zeroext 0, i8 noundef zeroext 1) #27
  %owner.i.i.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %64, i32 0, i32 4, i32 1
  store ptr null, ptr %owner.i.i.i, align 4
  %tid.i.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %64, i32 0, i32 1
  store i32 %call16.i.i, ptr %tid.i.i, align 4
  %call.i.i93 = tail call i32 @cpumask_next(i32 noundef %call16.i.i, ptr noundef nonnull @__cpu_possible_mask) #29
  %65 = load i32, ptr @nr_cpu_ids, align 4
  %cmp.i.i94 = icmp ult i32 %call.i.i93, %65
  br i1 %cmp.i.i94, label %do.body.i.do.body.i_crit_edge.i, label %return

do.body.i.do.body.i_crit_edge.i:                  ; preds = %do.body.i.i
  %.pre.i95 = load ptr, ptr %s, align 4
  br label %do.body.i.i

error:                                            ; preds = %if.end38, %if.then.i.i, %if.then5.i, %init_cache_random_seq.exit, %if.then9, %entry
  tail call void @cache_random_seq_destroy(ptr noundef %s) #27
  %66 = load ptr, ptr %s, align 4
  tail call void @free_percpu(ptr noundef %66) #27
  %arrayidx.i.i.i97 = getelementptr %struct.kmem_cache, ptr %s, i32 0, i32 26, i32 0
  %67 = load ptr, ptr %arrayidx.i.i.i97, align 4
  %tobool.not.i.i98 = icmp eq ptr %67, null
  br i1 %tobool.not.i.i98, label %return, label %if.then.i.i99

if.then.i.i99:                                    ; preds = %error
  store ptr null, ptr %arrayidx.i.i.i97, align 4
  %68 = load ptr, ptr @kmem_cache_node, align 4
  tail call void @kmem_cache_free(ptr noundef %68, ptr noundef nonnull %67) #27
  br label %return

return:                                           ; preds = %if.then.i.i99, %error, %do.body.i.i, %if.end.i91
  %retval.0 = phi i32 [ -22, %error ], [ -22, %if.then.i.i99 ], [ 0, %if.end.i91 ], [ 0, %do.body.i.i ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc i32 @sysfs_slab_add(ptr noundef %s) unnamed_addr #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load ptr, ptr @slab_kset, align 4
  %call1 = tail call i32 @slab_unmergeable(ptr noundef %s) #27
  %tobool.not = icmp eq ptr %0, null
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %kobj = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 20
  tail call void @kobject_init(ptr noundef %kobj, ptr noundef nonnull @slab_ktype) #27
  br label %cleanup

if.end:                                           ; preds = %entry
  %tobool2 = icmp eq i32 %call1, 0
  %.b = load i1, ptr @disable_higher_order_debug, align 4
  %or.cond = select i1 %tobool2, i1 %.b, i1 false
  %1 = load i32, ptr @slub_debug, align 4
  %and = and i32 %1, 68608
  %tobool5.not = icmp ne i32 %and, 0
  %spec.select = zext i1 %tobool5.not to i32
  %unmergeable.0 = select i1 %or.cond, i32 %spec.select, i32 %call1
  %tobool8.not = icmp eq i32 %unmergeable.0, 0
  br i1 %tobool8.not, label %if.else, label %if.then9

if.then9:                                         ; preds = %if.end
  %2 = load ptr, ptr @slab_kset, align 4
  %kobj10 = getelementptr inbounds %struct.kset, ptr %2, i32 0, i32 2
  %name11 = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 18
  %3 = load ptr, ptr %name11, align 4
  tail call void @sysfs_remove_link(ptr noundef %kobj10, ptr noundef %3) #27
  %4 = load ptr, ptr %name11, align 4
  br label %if.end14

if.else:                                          ; preds = %if.end
  %5 = load ptr, ptr getelementptr inbounds ([4 x [14 x ptr]], ptr @kmalloc_caches, i32 0, i32 0, i32 7), align 4
  %call7.i.i = tail call noalias align 8 ptr @kmem_cache_alloc_trace(ptr noundef %5, i32 noundef 3264, i32 noundef 64) #33
  %tobool.not.i = icmp eq ptr %call7.i.i, null
  br i1 %tobool.not.i, label %do.body4.i, label %do.end9.i, !prof !13

do.body4.i:                                       ; preds = %if.else
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slub.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 5888, 0\0A.popsection", ""() #24, !srcloc !60
  unreachable

do.end9.i:                                        ; preds = %if.else
  %incdec.ptr.i = getelementptr i8, ptr %call7.i.i, i32 1
  store i8 58, ptr %call7.i.i, align 8
  %flags.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 1
  %6 = load i32, ptr %flags.i, align 4
  %and.i = and i32 %6, 16384
  %tobool10.not.i = icmp eq i32 %and.i, 0
  br i1 %tobool10.not.i, label %if.end13.i, label %if.then11.i

if.then11.i:                                      ; preds = %do.end9.i
  %incdec.ptr12.i = getelementptr i8, ptr %call7.i.i, i32 2
  store i8 100, ptr %incdec.ptr.i, align 1
  br label %if.end13.i

if.end13.i:                                       ; preds = %if.then11.i, %do.end9.i
  %p.0.i = phi ptr [ %incdec.ptr12.i, %if.then11.i ], [ %incdec.ptr.i, %do.end9.i ]
  %and15.i = and i32 %6, 32768
  %tobool16.not.i = icmp eq i32 %and15.i, 0
  br i1 %tobool16.not.i, label %if.end19.i, label %if.then17.i

if.then17.i:                                      ; preds = %if.end13.i
  %incdec.ptr18.i = getelementptr i8, ptr %p.0.i, i32 1
  store i8 68, ptr %p.0.i, align 1
  br label %if.end19.i

if.end19.i:                                       ; preds = %if.then17.i, %if.end13.i
  %p.1.i = phi ptr [ %incdec.ptr18.i, %if.then17.i ], [ %p.0.i, %if.end13.i ]
  %and21.i = and i32 %6, 131072
  %tobool22.not.i = icmp eq i32 %and21.i, 0
  br i1 %tobool22.not.i, label %if.end25.i, label %if.then23.i

if.then23.i:                                      ; preds = %if.end19.i
  %incdec.ptr24.i = getelementptr i8, ptr %p.1.i, i32 1
  store i8 97, ptr %p.1.i, align 1
  %.pre.i = load i32, ptr %flags.i, align 4
  br label %if.end25.i

if.end25.i:                                       ; preds = %if.then23.i, %if.end19.i
  %7 = phi i32 [ %.pre.i, %if.then23.i ], [ %6, %if.end19.i ]
  %p.2.i = phi ptr [ %incdec.ptr24.i, %if.then23.i ], [ %p.1.i, %if.end19.i ]
  %and27.i = and i32 %7, 256
  %tobool28.not.i = icmp eq i32 %and27.i, 0
  br i1 %tobool28.not.i, label %if.end31.i, label %if.then29.i

if.then29.i:                                      ; preds = %if.end25.i
  %incdec.ptr30.i = getelementptr i8, ptr %p.2.i, i32 1
  store i8 70, ptr %p.2.i, align 1
  %.pre82.i = load i32, ptr %flags.i, align 4
  br label %if.end31.i

if.end31.i:                                       ; preds = %if.then29.i, %if.end25.i
  %8 = phi i32 [ %.pre82.i, %if.then29.i ], [ %7, %if.end25.i ]
  %p.3.i = phi ptr [ %incdec.ptr30.i, %if.then29.i ], [ %p.2.i, %if.end25.i ]
  %and33.i = and i32 %8, 67108864
  %tobool34.not.i = icmp eq i32 %and33.i, 0
  br i1 %tobool34.not.i, label %if.end37.i, label %if.then35.i

if.then35.i:                                      ; preds = %if.end31.i
  %incdec.ptr36.i = getelementptr i8, ptr %p.3.i, i32 1
  store i8 65, ptr %p.3.i, align 1
  br label %if.end37.i

if.end37.i:                                       ; preds = %if.then35.i, %if.end31.i
  %p.4.i = phi ptr [ %incdec.ptr36.i, %if.then35.i ], [ %p.3.i, %if.end31.i ]
  %cmp.not.i = icmp eq ptr %p.4.i, %incdec.ptr.i
  br i1 %cmp.not.i, label %if.end40.i, label %if.then38.i

if.then38.i:                                      ; preds = %if.end37.i
  %incdec.ptr39.i = getelementptr i8, ptr %p.4.i, i32 1
  store i8 45, ptr %p.4.i, align 1
  br label %if.end40.i

if.end40.i:                                       ; preds = %if.then38.i, %if.end37.i
  %p.5.i = phi ptr [ %incdec.ptr39.i, %if.then38.i ], [ %incdec.ptr.i, %if.end37.i ]
  %size.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 3
  %9 = load i32, ptr %size.i, align 4
  %call41.i = tail call i32 (ptr, ptr, ...) @sprintf(ptr noundef %p.5.i, ptr noundef nonnull @.str.143, i32 noundef %9) #27
  %add.ptr42.i = getelementptr i8, ptr %p.5.i, i32 %call41.i
  %add.ptr45.i = getelementptr i8, ptr %call7.i.i, i32 63
  %cmp46.i = icmp ugt ptr %add.ptr42.i, %add.ptr45.i
  br i1 %cmp46.i, label %do.body54.i, label %if.end14, !prof !13

do.body54.i:                                      ; preds = %if.end40.i
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slub.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 5912, 0\0A.popsection", ""() #24, !srcloc !61
  unreachable

if.end14:                                         ; preds = %if.end40.i, %if.then9
  %name.0 = phi ptr [ %4, %if.then9 ], [ %call7.i.i, %if.end40.i ]
  %kobj15 = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 20
  %kset16 = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 20, i32 3
  store ptr %0, ptr %kset16, align 4
  %call18 = tail call i32 (ptr, ptr, ptr, ptr, ...) @kobject_init_and_add(ptr noundef %kobj15, ptr noundef nonnull @slab_ktype, ptr noundef null, ptr noundef nonnull @.str.52, ptr noundef %name.0) #27
  %tobool19.not = icmp eq i32 %call18, 0
  br i1 %tobool19.not, label %if.end21, label %out

if.end21:                                         ; preds = %if.end14
  %call23 = tail call i32 @sysfs_create_group(ptr noundef %kobj15, ptr noundef nonnull @slab_attr_group) #27
  %tobool24.not = icmp eq i32 %call23, 0
  br i1 %tobool24.not, label %if.end26, label %out_del_kobj

if.end26:                                         ; preds = %if.end21
  br i1 %tobool8.not, label %if.then28, label %cleanup

if.then28:                                        ; preds = %if.end26
  %name29 = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 18
  %10 = load ptr, ptr %name29, align 4
  %11 = load i32, ptr @slab_state, align 4
  %cmp.i = icmp eq i32 %11, 4
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %if.then28
  %12 = load ptr, ptr @slab_kset, align 4
  %kobj.i = getelementptr inbounds %struct.kset, ptr %12, i32 0, i32 2
  tail call void @sysfs_remove_link(ptr noundef %kobj.i, ptr noundef %10) #27
  %13 = load ptr, ptr @slab_kset, align 4
  %kobj1.i = getelementptr inbounds %struct.kset, ptr %13, i32 0, i32 2
  %call.i = tail call i32 @sysfs_create_link(ptr noundef %kobj1.i, ptr noundef %kobj15, ptr noundef %10) #27
  br label %if.then33

if.end.i:                                         ; preds = %if.then28
  %14 = load ptr, ptr getelementptr inbounds ([4 x [14 x ptr]], ptr @kmalloc_caches, i32 0, i32 0, i32 7), align 4
  %call7.i.i57 = tail call noalias align 8 ptr @kmem_cache_alloc_trace(ptr noundef %14, i32 noundef 3264, i32 noundef 12) #33
  %tobool.not.i58 = icmp eq ptr %call7.i.i57, null
  br i1 %tobool.not.i58, label %if.then33, label %if.end5.i

if.end5.i:                                        ; preds = %if.end.i
  store ptr %s, ptr %call7.i.i57, align 8
  %name7.i = getelementptr inbounds %struct.saved_alias, ptr %call7.i.i57, i32 0, i32 1
  store ptr %10, ptr %name7.i, align 4
  %15 = load ptr, ptr @alias_list, align 4
  %next.i = getelementptr inbounds %struct.saved_alias, ptr %call7.i.i57, i32 0, i32 2
  store ptr %15, ptr %next.i, align 8
  store ptr %call7.i.i57, ptr @alias_list, align 4
  br label %if.then33

out:                                              ; preds = %out_del_kobj, %if.end14
  %err.0 = phi i32 [ %call18, %if.end14 ], [ %call23, %out_del_kobj ]
  br i1 %tobool8.not, label %if.then33, label %cleanup

if.then33:                                        ; preds = %out, %if.end5.i, %if.end.i, %if.then.i
  %err.060 = phi i32 [ %err.0, %out ], [ 0, %if.end5.i ], [ 0, %if.end.i ], [ 0, %if.then.i ]
  tail call void @kfree(ptr noundef %name.0) #25
  br label %cleanup

out_del_kobj:                                     ; preds = %if.end21
  tail call void @kobject_del(ptr noundef %kobj15) #27
  br label %out

cleanup:                                          ; preds = %if.then33, %out, %if.end26, %if.then
  %retval.0 = phi i32 [ 0, %if.then ], [ %err.060, %if.then33 ], [ %err.0, %out ], [ 0, %if.end26 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define dso_local ptr @__kmalloc_track_caller(i32 noundef %size, i32 noundef %gfpflags, i32 noundef %caller) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %object.i.i = alloca ptr, align 4
  %objcg.i.i = alloca ptr, align 4
  %cmp = icmp ugt i32 %size, 8192
  br i1 %cmp, label %if.then, label %if.end, !prof !13

if.then:                                          ; preds = %entry
  %sub.i.i = add i32 %size, -1
  %shr.i.i = lshr i32 %sub.i.i, 12
  %0 = tail call i32 @llvm.ctlz.i32(i32 %shr.i.i, i1 false) #24, !range !50
  %add.i.i = sub nuw nsw i32 32, %0
  %call1.i = tail call noalias align 4096 ptr @kmalloc_order_trace(i32 noundef %size, i32 noundef %gfpflags, i32 noundef %add.i.i) #30
  br label %cleanup

if.end:                                           ; preds = %entry
  %call2 = tail call ptr @kmalloc_slab(i32 noundef %size, i32 noundef %gfpflags) #27
  %cmp3 = icmp ult ptr %call2, inttoptr (i32 17 to ptr)
  br i1 %cmp3, label %cleanup, label %if.end11, !prof !13

if.end11:                                         ; preds = %if.end
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %object.i.i) #24
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %objcg.i.i) #24
  store ptr null, ptr %objcg.i.i, align 4
  %call.i.i = call fastcc ptr @slab_pre_alloc_hook(ptr noundef %call2, ptr noundef nonnull %objcg.i.i, i32 noundef 1, i32 noundef %gfpflags) #27
  %tobool.not.i.i27 = icmp eq ptr %call.i.i, null
  br i1 %tobool.not.i.i27, label %slab_alloc.exit, label %if.end.i.i28

if.end.i.i28:                                     ; preds = %if.end11
  callbr void asm sideeffect "1:\0A\09nop\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr nonnull @kfence_allocation_key, ptr blockaddress(@__kmalloc_track_caller, %if.end.i.i.i)) #24
          to label %kfence_alloc.exit.i.i [label %if.end.i.i.i], !srcloc !12

if.end.i.i.i:                                     ; preds = %if.end.i.i28
  %1 = load volatile i32, ptr @kfence_allocation_gate, align 4
  %tobool4.not.i.i.i = icmp eq i32 %1, 0
  br i1 %tobool4.not.i.i.i, label %if.end12.i.i.i, label %redo.preheader.i.i, !prof !13

if.end12.i.i.i:                                   ; preds = %if.end.i.i.i
  %call13.i.i.i = tail call ptr @__kfence_alloc(ptr noundef nonnull %call.i.i, i32 noundef %size, i32 noundef %gfpflags) #27
  br label %kfence_alloc.exit.i.i

kfence_alloc.exit.i.i:                            ; preds = %if.end12.i.i.i, %if.end.i.i28
  %retval.0.i.i.i = phi ptr [ %call13.i.i.i, %if.end12.i.i.i ], [ null, %if.end.i.i28 ]
  %tobool2.not.i.i = icmp eq ptr %retval.0.i.i.i, null
  br i1 %tobool2.not.i.i, label %redo.preheader.i.i, label %out.i.i, !prof !14

redo.preheader.i.i:                               ; preds = %kfence_alloc.exit.i.i, %if.end.i.i.i
  %2 = load ptr, ptr %call.i.i, align 4
  %3 = ptrtoint ptr %2 to i32
  %4 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i25.i.i = and i32 %4, -16384
  %5 = inttoptr i32 %and.i25.i.i to ptr
  %cpu26.i.i = getelementptr inbounds %struct.thread_info, ptr %5, i32 0, i32 3
  %6 = load i32, ptr %cpu26.i.i, align 4
  %arrayidx27.i.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %6
  %7 = load i32, ptr %arrayidx27.i.i, align 4
  %add28.i.i = add i32 %7, %3
  %8 = inttoptr i32 %add28.i.i to ptr
  %tid1329.i.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %8, i32 0, i32 1
  %9 = load volatile i32, ptr %tid1329.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !15
  %10 = load ptr, ptr %8, align 4
  %slab1430.i.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %8, i32 0, i32 2
  %11 = load ptr, ptr %slab1430.i.i, align 4
  %tobool1531.i.i = icmp ne ptr %10, null
  %tobool1632.i.i = icmp ne ptr %11, null
  %or.cond33.i.i = select i1 %tobool1531.i.i, i1 %tobool1632.i.i, i1 false
  br i1 %or.cond33.i.i, label %lor.rhs.lr.ph.i.i, label %if.then27.critedge.i.i, !prof !16

lor.rhs.lr.ph.i.i:                                ; preds = %redo.preheader.i.i
  %offset.i.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %call.i.i, i32 0, i32 6
  %random.i.i.i.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %call.i.i, i32 0, i32 21
  br label %lor.rhs.i.i

lor.rhs.i.i:                                      ; preds = %cleanup.i.i, %lor.rhs.lr.ph.i.i
  %12 = phi ptr [ %10, %lor.rhs.lr.ph.i.i ], [ %60, %cleanup.i.i ]
  %13 = phi i32 [ %9, %lor.rhs.lr.ph.i.i ], [ %59, %cleanup.i.i ]
  %cpu34.i.i = phi ptr [ %cpu26.i.i, %lor.rhs.lr.ph.i.i ], [ %cpu.i.i, %cleanup.i.i ]
  %14 = load i32, ptr %offset.i.i.i.i, align 4
  %add.ptr.i.i.i.i = getelementptr i8, ptr %12, i32 %14
  %15 = load i32, ptr %add.ptr.i.i.i.i, align 4
  %16 = ptrtoint ptr %add.ptr.i.i.i.i to i32
  %17 = load i32, ptr %random.i.i.i.i.i.i, align 4
  %18 = tail call i32 @llvm.bswap.i32(i32 %16) #24
  %xor.i.i.i.i.i.i = xor i32 %17, %15
  %xor2.i.i.i.i.i.i = xor i32 %xor.i.i.i.i.i.i, %18
  %19 = inttoptr i32 %xor2.i.i.i.i.i.i to ptr
  %20 = load ptr, ptr %call.i.i, align 4
  %21 = ptrtoint ptr %20 to i32
  %rem.i.i = and i32 %21, 7
  %tobool40.not.i.i = icmp eq i32 %rem.i.i, 0
  br i1 %tobool40.not.i.i, label %do.body57.i.i, label %do.body48.i.i, !prof !14

if.then27.critedge.i.i:                           ; preds = %cleanup.i.i, %redo.preheader.i.i
  %call28.i.i = tail call fastcc ptr @__slab_alloc(ptr noundef nonnull %call.i.i, i32 noundef %gfpflags, i32 noundef %caller) #27
  store ptr %call28.i.i, ptr %object.i.i, align 4
  br label %if.end159.i.i

do.body48.i.i:                                    ; preds = %lor.rhs.i.i
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slub.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 3217, 0\0A.popsection", ""() #24, !srcloc !17
  unreachable

do.body57.i.i:                                    ; preds = %lor.rhs.i.i
  %tid59.i.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %20, i32 0, i32 1
  %22 = ptrtoint ptr %tid59.i.i to i32
  %add62.i.i = add nuw i32 %21, 4
  %cmp.not.i.i = icmp eq i32 %add62.i.i, %22
  br i1 %cmp.not.i.i, label %do.end78.i.i, label %do.body70.i.i, !prof !14

do.body70.i.i:                                    ; preds = %do.body57.i.i
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slub.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 3217, 0\0A.popsection", ""() #24, !srcloc !18
  unreachable

do.end78.i.i:                                     ; preds = %do.body57.i.i
  %23 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ arch_local_irq_save\0A\09cpsid\09i", "=r,~{memory},~{cc}"() #24, !srcloc !19
  %24 = load ptr, ptr %call.i.i, align 4
  %25 = ptrtoint ptr %24 to i32
  %26 = load i32, ptr %cpu34.i.i, align 4
  %arrayidx96.i.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %26
  %27 = load i32, ptr %arrayidx96.i.i, align 4
  %add97.i.i = add i32 %27, %25
  %28 = inttoptr i32 %add97.i.i to ptr
  %tid105.i.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %24, i32 0, i32 1
  %29 = ptrtoint ptr %tid105.i.i to i32
  %add110.i.i = add i32 %27, %29
  %30 = inttoptr i32 %add110.i.i to ptr
  %31 = load ptr, ptr %28, align 4
  %cmp112.i.i = icmp eq ptr %31, %12
  br i1 %cmp112.i.i, label %land.lhs.true.i.i, label %if.end118.i.i

land.lhs.true.i.i:                                ; preds = %do.end78.i.i
  %32 = load i32, ptr %30, align 4
  %cmp114.i.i = icmp eq i32 %32, %13
  br i1 %cmp114.i.i, label %if.then116.i.i, label %if.end118.i.i

if.then116.i.i:                                   ; preds = %land.lhs.true.i.i
  store ptr %19, ptr %28, align 4
  %add.i.i.i = add i32 %13, 1
  store i32 %add.i.i.i, ptr %30, align 4
  br label %if.end118.i.i

if.end118.i.i:                                    ; preds = %if.then116.i.i, %land.lhs.true.i.i, %do.end78.i.i
  %tobool144.not.i.i = phi i1 [ false, %if.then116.i.i ], [ true, %land.lhs.true.i.i ], [ true, %do.end78.i.i ]
  %33 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ local_save_flags", "=r,~{memory},~{cc}"() #24, !srcloc !20
  %and.i.i2.i.i = and i32 %33, 128
  %tobool128.not.i.i = icmp eq i32 %and.i.i2.i.i, 0
  br i1 %tobool128.not.i.i, label %if.then137.i.i, label %do.end140.i.i, !prof !13

if.then137.i.i:                                   ; preds = %if.end118.i.i
  tail call void @warn_bogus_irq_restore() #27
  br label %do.end140.i.i

do.end140.i.i:                                    ; preds = %if.then137.i.i, %if.end118.i.i
  tail call void asm sideeffect "\09msr\09cpsr_c, $0\09@ local_irq_restore", "r,~{memory},~{cc}"(i32 %23) #24, !srcloc !21
  br i1 %tobool144.not.i.i, label %cleanup.i.i, label %cleanup.thread.i.i, !prof !13

cleanup.thread.i.i:                               ; preds = %do.end140.i.i
  %34 = inttoptr i32 %xor2.i.i.i.i.i.i to ptr
  store ptr %12, ptr %object.i.i, align 4
  %35 = load i32, ptr %offset.i.i.i.i, align 4
  %add.ptr.i4.i.i = getelementptr i8, ptr %34, i32 %35
  tail call void @llvm.prefetch.p0(ptr %add.ptr.i4.i.i, i32 1, i32 3, i32 1) #24
  %36 = load ptr, ptr %call.i.i, align 4
  %arrayidx.i.i.i = getelementptr %struct.kmem_cache_cpu, ptr %36, i32 0, i32 5, i32 0
  %37 = ptrtoint ptr %arrayidx.i.i.i to i32
  %38 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i5.i.i = and i32 %38, -16384
  %39 = inttoptr i32 %and.i.i5.i.i to ptr
  %cpu.i.i.i = getelementptr inbounds %struct.thread_info, ptr %39, i32 0, i32 3
  %40 = load i32, ptr %cpu.i.i.i, align 4
  %arrayidx7.i.i.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %40
  %41 = load i32, ptr %arrayidx7.i.i.i, align 4
  %add.i6.i.i = add i32 %41, %37
  %42 = inttoptr i32 %add.i6.i.i to ptr
  %43 = load i32, ptr %42, align 4
  %add8.i.i.i = add i32 %43, 1
  store i32 %add8.i.i.i, ptr %42, align 4
  br label %if.end159.i.i

cleanup.i.i:                                      ; preds = %do.end140.i.i
  %44 = load ptr, ptr %call.i.i, align 4
  %arrayidx.i.i.i.i = getelementptr %struct.kmem_cache_cpu, ptr %44, i32 0, i32 5, i32 20
  %45 = ptrtoint ptr %arrayidx.i.i.i.i to i32
  %46 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i.i.i = and i32 %46, -16384
  %47 = inttoptr i32 %and.i.i.i.i.i to ptr
  %cpu.i.i.i.i = getelementptr inbounds %struct.thread_info, ptr %47, i32 0, i32 3
  %48 = load i32, ptr %cpu.i.i.i.i, align 4
  %arrayidx7.i.i.i.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %48
  %49 = load i32, ptr %arrayidx7.i.i.i.i, align 4
  %add.i.i.i.i = add i32 %49, %45
  %50 = inttoptr i32 %add.i.i.i.i to ptr
  %51 = load i32, ptr %50, align 4
  %add8.i.i.i.i = add i32 %51, 1
  store i32 %add8.i.i.i.i, ptr %50, align 4
  %52 = load ptr, ptr %call.i.i, align 4
  %53 = ptrtoint ptr %52 to i32
  %54 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i = and i32 %54, -16384
  %55 = inttoptr i32 %and.i.i.i to ptr
  %cpu.i.i = getelementptr inbounds %struct.thread_info, ptr %55, i32 0, i32 3
  %56 = load i32, ptr %cpu.i.i, align 4
  %arrayidx.i.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %56
  %57 = load i32, ptr %arrayidx.i.i, align 4
  %add.i.i29 = add i32 %57, %53
  %58 = inttoptr i32 %add.i.i29 to ptr
  %tid13.i.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %58, i32 0, i32 1
  %59 = load volatile i32, ptr %tid13.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !15
  %60 = load ptr, ptr %58, align 4
  %slab14.i.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %58, i32 0, i32 2
  %61 = load ptr, ptr %slab14.i.i, align 4
  %tobool15.i.i = icmp ne ptr %60, null
  %tobool16.i.i = icmp ne ptr %61, null
  %or.cond.i.i = select i1 %tobool15.i.i, i1 %tobool16.i.i, i1 false
  br i1 %or.cond.i.i, label %lor.rhs.i.i, label %if.then27.critedge.i.i, !prof !16

if.end159.i.i:                                    ; preds = %cleanup.thread.i.i, %if.then27.critedge.i.i
  %62 = phi ptr [ %12, %cleanup.thread.i.i ], [ %call28.i.i, %if.then27.critedge.i.i ]
  callbr void asm sideeffect "1:\0A\09nop\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr getelementptr inbounds (i8, ptr @init_on_free, i32 1), ptr blockaddress(@__kmalloc_track_caller, %maybe_wipe_obj_freeptr.exit.i.i)) #24
          to label %if.then.i.i.i.i [label %maybe_wipe_obj_freeptr.exit.i.i], !srcloc !12

if.then.i.i.i.i:                                  ; preds = %if.end159.i.i
  %ctor.i.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %call.i.i, i32 0, i32 14
  %63 = load ptr, ptr %ctor.i.i.i.i, align 4
  %tobool15.not.i.i.i.i = icmp eq ptr %63, null
  br i1 %tobool15.not.i.i.i.i, label %lor.rhs.i.i.i.i, label %maybe_wipe_obj_freeptr.exit.i.i

lor.rhs.i.i.i.i:                                  ; preds = %if.then.i.i.i.i
  %flags.i.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %call.i.i, i32 0, i32 1
  %64 = load i32, ptr %flags.i.i.i.i, align 4
  %and.i.i.i.i = and i32 %64, 526336
  %tobool16.i.i.i.i = icmp eq i32 %and.i.i.i.i, 0
  br i1 %tobool16.i.i.i.i, label %land.lhs.true.i.i.i, label %maybe_wipe_obj_freeptr.exit.i.i, !prof !13

land.lhs.true.i.i.i:                              ; preds = %lor.rhs.i.i.i.i
  %tobool2.not.i.i.i = icmp eq ptr %62, null
  br i1 %tobool2.not.i.i.i, label %maybe_wipe_obj_freeptr.exit.i.i, label %if.then.i.i.i

if.then.i.i.i:                                    ; preds = %land.lhs.true.i.i.i
  %offset.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %call.i.i, i32 0, i32 6
  %65 = load i32, ptr %offset.i.i.i, align 4
  %add.ptr.i.i.i = getelementptr i8, ptr %62, i32 %65
  %call4.i.i.i = tail call ptr @__memset(ptr noundef %add.ptr.i.i.i, i32 noundef 0, i32 noundef 4) #27
  br label %maybe_wipe_obj_freeptr.exit.i.i

maybe_wipe_obj_freeptr.exit.i.i:                  ; preds = %if.then.i.i.i, %land.lhs.true.i.i.i, %lor.rhs.i.i.i.i, %if.then.i.i.i.i, %if.end159.i.i
  callbr void asm sideeffect "1:\0A\09nop\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr getelementptr inbounds (i8, ptr @init_on_alloc, i32 1), ptr blockaddress(@__kmalloc_track_caller, %if.end23.i.i.i)) #24
          to label %if.then.i7.i.i [label %if.end23.i.i.i], !srcloc !12

if.then.i7.i.i:                                   ; preds = %maybe_wipe_obj_freeptr.exit.i.i
  %ctor.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %call.i.i, i32 0, i32 14
  %66 = load ptr, ptr %ctor.i.i.i, align 4
  %tobool15.not.i.i.i = icmp eq ptr %66, null
  br i1 %tobool15.not.i.i.i, label %if.end.i9.i.i, label %out.i.i

if.end.i9.i.i:                                    ; preds = %if.then.i7.i.i
  %flags17.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %call.i.i, i32 0, i32 1
  %67 = load i32, ptr %flags17.i.i.i, align 4
  %and.i8.i.i = and i32 %67, 526336
  %tobool18.not.i.i.i = icmp eq i32 %and.i8.i.i, 0
  br i1 %tobool18.not.i.i.i, label %out.i.i, label %if.then19.i.i.i

if.then19.i.i.i:                                  ; preds = %if.end.i9.i.i
  %and20.i.i.i = and i32 %gfpflags, 256
  %tobool21.i.i.i = icmp ne i32 %and20.i.i.i, 0
  br label %out.i.i

if.end23.i.i.i:                                   ; preds = %maybe_wipe_obj_freeptr.exit.i.i
  %and24.i.i.i = and i32 %gfpflags, 256
  %tobool25.i.i.i = icmp ne i32 %and24.i.i.i, 0
  br label %out.i.i

out.i.i:                                          ; preds = %if.end23.i.i.i, %if.then19.i.i.i, %if.end.i9.i.i, %if.then.i7.i.i, %kfence_alloc.exit.i.i
  %object.promoted.i.i = phi ptr [ %retval.0.i.i.i, %kfence_alloc.exit.i.i ], [ %62, %if.then19.i.i.i ], [ %62, %if.end23.i.i.i ], [ %62, %if.then.i7.i.i ], [ %62, %if.end.i9.i.i ]
  %init.0.off0.i.i = phi i1 [ false, %kfence_alloc.exit.i.i ], [ %tobool21.i.i.i, %if.then19.i.i.i ], [ %tobool25.i.i.i, %if.end23.i.i.i ], [ false, %if.then.i7.i.i ], [ true, %if.end.i9.i.i ]
  %68 = load ptr, ptr %objcg.i.i, align 4
  %69 = load i32, ptr @gfp_allowed_mask, align 4
  %and.i11.i.i = and i32 %69, %gfpflags
  %object_size.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %call.i.i, i32 0, i32 4
  %flags11.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %call.i.i, i32 0, i32 1
  %call1.i.i.i.i = tail call ptr @__kasan_slab_alloc(ptr noundef nonnull %call.i.i, ptr noundef %object.promoted.i.i, i32 noundef %and.i11.i.i, i1 noundef zeroext %init.0.off0.i.i) #27
  %tobool3.not.i.i.i = icmp ne ptr %call1.i.i.i.i, null
  %70 = and i1 %init.0.off0.i.i, %tobool3.not.i.i.i
  br i1 %70, label %land.lhs.true5.i.i.i, label %if.end.i14.i.i

land.lhs.true5.i.i.i:                             ; preds = %out.i.i
  %71 = load i32, ptr %object_size.i.i.i, align 4
  %call8.i.i.i = tail call ptr @__memset(ptr noundef nonnull %call1.i.i.i.i, i32 noundef 0, i32 noundef %71) #27
  br label %if.end.i14.i.i

if.end.i14.i.i:                                   ; preds = %land.lhs.true5.i.i.i, %out.i.i
  %72 = load i32, ptr %flags11.i.i.i, align 4
  %and.i.i13.i.i = and i32 %72, 8388608
  %tobool.not.i.i.i.i = icmp eq i32 %and.i.i13.i.i, 0
  br i1 %tobool.not.i.i.i.i, label %if.then.i.i15.i.i, label %kmemleak_alloc_recursive.exit.i.i.i

if.then.i.i15.i.i:                                ; preds = %if.end.i14.i.i
  %73 = load i32, ptr %object_size.i.i.i, align 4
  tail call void @kmemleak_alloc(ptr noundef %call1.i.i.i.i, i32 noundef %73, i32 noundef 1, i32 noundef %and.i11.i.i) #27
  br label %kmemleak_alloc_recursive.exit.i.i.i

kmemleak_alloc_recursive.exit.i.i.i:              ; preds = %if.then.i.i15.i.i, %if.end.i14.i.i
  store ptr %call1.i.i.i.i, ptr %object.i.i, align 4
  call fastcc void @memcg_slab_post_alloc_hook(ptr noundef nonnull %call.i.i, ptr noundef %68, i32 noundef %and.i11.i.i, i32 noundef 1, ptr noundef nonnull %object.i.i) #27
  br label %slab_alloc.exit

slab_alloc.exit:                                  ; preds = %kmemleak_alloc_recursive.exit.i.i.i, %if.end11
  %retval.0.i.i30 = phi ptr [ %call1.i.i.i.i, %kmemleak_alloc_recursive.exit.i.i.i ], [ null, %if.end11 ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %objcg.i.i) #24
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %object.i.i) #24
  %size13 = getelementptr inbounds %struct.kmem_cache, ptr %call2, i32 0, i32 3
  %74 = load i32, ptr %size13, align 4
  tail call fastcc void @trace_kmalloc(i32 noundef %caller, ptr noundef %retval.0.i.i30, i32 noundef %size, i32 noundef %74, i32 noundef %gfpflags) #25
  br label %cleanup

cleanup:                                          ; preds = %slab_alloc.exit, %if.end, %if.then
  %retval.0 = phi ptr [ %call1.i, %if.then ], [ %retval.0.i.i30, %slab_alloc.exit ], [ %call2, %if.end ]
  ret ptr %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define dso_local i32 @validate_slab_cache(ptr noundef %s) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %oo = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 9
  %.unpack = load i32, ptr %oo, align 4
  %and.i = and i32 %.unpack, 65535
  %call1 = tail call ptr @bitmap_alloc(i32 noundef %and.i, i32 noundef 3264) #27
  %tobool.not = icmp eq ptr %call1, null
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  tail call void @cpus_read_lock() #27
  tail call fastcc void @flush_all_cpus_locked(ptr noundef %s) #27
  tail call void @cpus_read_unlock() #27
  %arrayidx.i = getelementptr %struct.kmem_cache, ptr %s, i32 0, i32 26, i32 0
  %name.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 18
  %flags22.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 1
  %0 = load ptr, ptr %arrayidx.i, align 4
  %tobool3.not = icmp eq ptr %0, null
  br i1 %tobool3.not, label %for.end, label %if.then4

if.then4:                                         ; preds = %if.end
  %call2.i = tail call i32 @_raw_spin_lock_irqsave(ptr noundef nonnull %0) #27
  %partial.i = getelementptr inbounds %struct.kmem_cache_node, ptr %0, i32 0, i32 2
  %.pn94.i = load ptr, ptr %partial.i, align 4
  %cmp7.not95.i = icmp eq ptr %.pn94.i, %partial.i
  br i1 %cmp7.not95.i, label %for.end.i, label %for.body.i

for.body.i:                                       ; preds = %for.body.i, %if.then4
  %.pn97.i = phi ptr [ %.pn.i, %for.body.i ], [ %.pn94.i, %if.then4 ]
  %count.096.i = phi i32 [ %inc.i, %for.body.i ], [ 0, %if.then4 ]
  %slab.0.i = getelementptr i8, ptr %.pn97.i, i32 -4
  tail call fastcc void @validate_slab(ptr noundef %s, ptr noundef %slab.0.i, ptr noundef nonnull %call1) #27
  %inc.i = add i32 %count.096.i, 1
  %.pn.i = load ptr, ptr %.pn97.i, align 4
  %cmp7.not.i = icmp eq ptr %.pn.i, %partial.i
  br i1 %cmp7.not.i, label %for.end.i, label %for.body.i

for.end.i:                                        ; preds = %for.body.i, %if.then4
  %count.0.lcssa.i = phi i32 [ 0, %if.then4 ], [ %inc.i, %for.body.i ]
  %nr_partial.i = getelementptr inbounds %struct.kmem_cache_node, ptr %0, i32 0, i32 1
  %1 = load i32, ptr %nr_partial.i, align 4
  %cmp13.not.i = icmp eq i32 %count.0.lcssa.i, %1
  br i1 %cmp13.not.i, label %if.end.i, label %do.end17.i

do.end17.i:                                       ; preds = %for.end.i
  %2 = load ptr, ptr %name.i, align 4
  %call20.i = tail call i32 (ptr, ...) @_printk(ptr noundef nonnull @.str.138, ptr noundef %2, i32 noundef %count.0.lcssa.i, i32 noundef %1) #26
  %3 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i = and i32 %3, -16384
  %4 = inttoptr i32 %and.i.i.i to ptr
  %task.i.i = getelementptr inbounds %struct.thread_info, ptr %4, i32 0, i32 2
  %5 = load ptr, ptr %task.i.i, align 8
  %kunit_test.i.i = getelementptr inbounds %struct.task_struct, ptr %5, i32 0, i32 192
  %6 = load ptr, ptr %kunit_test.i.i, align 4
  %tobool.not.i.i = icmp eq ptr %6, null
  br i1 %tobool.not.i.i, label %if.end.i, label %if.end.i.i, !prof !14

if.end.i.i:                                       ; preds = %do.end17.i
  %lock.i.i32 = getelementptr inbounds %struct.kunit, ptr %6, i32 0, i32 6
  %call2.i.i33 = tail call i32 @_raw_spin_lock_irqsave(ptr noundef %lock.i.i32) #27
  %resources.i.i34 = getelementptr inbounds %struct.kunit, ptr %6, i32 0, i32 8
  %prev.i.i35 = getelementptr inbounds %struct.kunit, ptr %6, i32 0, i32 8, i32 1
  %.pn3.i.i36 = load ptr, ptr %prev.i.i35, align 4
  %cmp7.not4.i.i37 = icmp eq ptr %.pn3.i.i36, %resources.i.i34
  br i1 %cmp7.not4.i.i37, label %kunit_find_named_resource.exit60.thread, label %for.body.i.i41

for.body.i.i41:                                   ; preds = %for.inc.i.i58, %if.end.i.i
  %.pn5.i.i38 = phi ptr [ %.pn.i.i56, %for.inc.i.i58 ], [ %.pn3.i.i36, %if.end.i.i ]
  %name.i.i.i39 = getelementptr i8, ptr %.pn5.i.i38, i32 -12
  %7 = load ptr, ptr %name.i.i.i39, align 4
  %tobool.not.i.i.i40 = icmp eq ptr %7, null
  br i1 %tobool.not.i.i.i40, label %for.inc.i.i58, label %kunit_resource_name_match.exit.i.i44

kunit_resource_name_match.exit.i.i44:             ; preds = %for.body.i.i41
  %call.i.i.i42 = tail call i32 @strcmp(ptr noundef nonnull %7, ptr noundef nonnull @.str.53) #27
  %cmp.i.i.i43 = icmp eq i32 %call.i.i.i42, 0
  br i1 %cmp.i.i.i43, label %if.then.i.i49, label %for.inc.i.i58

if.then.i.i49:                                    ; preds = %kunit_resource_name_match.exit.i.i44
  %res.0.le.i.i45 = getelementptr i8, ptr %.pn5.i.i38, i32 -16
  %refcount.i.i.i46 = getelementptr i8, ptr %.pn5.i.i38, i32 -4
  tail call void @llvm.prefetch.p0(ptr %refcount.i.i.i46, i32 1, i32 3, i32 1) #24
  %8 = tail call { i32, i32, i32 } asm sideeffect "@ atomic_fetch_add\0A1:\09ldrex\09$0, [$4]\0A\09add\09$1, $0, $5\0A\09strex\09$2, $1, [$4]\0A\09teq\09$2, #0\0A\09bne\091b", "=&r,=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %refcount.i.i.i46, ptr %refcount.i.i.i46, i32 1, ptr elementtype(i32) %refcount.i.i.i46) #24, !srcloc !62
  %asmresult.i.i.i.i.i.i.i.i.i47 = extractvalue { i32, i32, i32 } %8, 0
  %tobool1.not.i.i.i.i.i.i.i48 = icmp eq i32 %asmresult.i.i.i.i.i.i.i.i.i47, 0
  br i1 %tobool1.not.i.i.i.i.i.i.i48, label %if.end15.sink.split.i.i.i.i.i.i.i54, label %if.else.i.i.i.i.i.i.i52, !prof !13

if.else.i.i.i.i.i.i.i52:                          ; preds = %if.then.i.i49
  %add.i.i.i.i.i.i.i50 = add i32 %asmresult.i.i.i.i.i.i.i.i.i47, 1
  %9 = or i32 %add.i.i.i.i.i.i.i50, %asmresult.i.i.i.i.i.i.i.i.i47
  %.not.i.i.i.i.i.i.i51 = icmp sgt i32 %9, -1
  br i1 %.not.i.i.i.i.i.i.i51, label %kunit_find_named_resource.exit60, label %if.end15.sink.split.i.i.i.i.i.i.i54, !prof !14

if.end15.sink.split.i.i.i.i.i.i.i54:              ; preds = %if.else.i.i.i.i.i.i.i52, %if.then.i.i49
  %.sink.i.i.i.i.i.i.i53 = phi i32 [ 2, %if.then.i.i49 ], [ 1, %if.else.i.i.i.i.i.i.i52 ]
  tail call void @refcount_warn_saturate(ptr noundef %refcount.i.i.i46, i32 noundef %.sink.i.i.i.i.i.i.i53) #27
  br label %kunit_find_named_resource.exit60

for.inc.i.i58:                                    ; preds = %kunit_resource_name_match.exit.i.i44, %for.body.i.i41
  %prev12.i.i55 = getelementptr inbounds %struct.list_head, ptr %.pn5.i.i38, i32 0, i32 1
  %.pn.i.i56 = load ptr, ptr %prev12.i.i55, align 4
  %cmp7.not.i.i57 = icmp eq ptr %.pn.i.i56, %resources.i.i34
  br i1 %cmp7.not.i.i57, label %kunit_find_named_resource.exit60.thread, label %for.body.i.i41

kunit_find_named_resource.exit60.thread:          ; preds = %for.inc.i.i58, %if.end.i.i
  tail call void @_raw_spin_unlock_irqrestore(ptr noundef %lock.i.i32, i32 noundef %call2.i.i33) #27
  br label %if.end.i

kunit_find_named_resource.exit60:                 ; preds = %if.end15.sink.split.i.i.i.i.i.i.i54, %if.else.i.i.i.i.i.i.i52
  tail call void @_raw_spin_unlock_irqrestore(ptr noundef %lock.i.i32, i32 noundef %call2.i.i33) #27
  %tobool8.not.i.i = icmp eq ptr %res.0.le.i.i45, null
  br i1 %tobool8.not.i.i, label %if.end.i, label %if.end10.i.i

if.end10.i.i:                                     ; preds = %kunit_find_named_resource.exit60
  %10 = load ptr, ptr %res.0.le.i.i45, align 4
  %11 = load i32, ptr %10, align 4
  %inc.i.i = add i32 %11, 1
  store i32 %inc.i.i, ptr %10, align 4
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #24, !srcloc !63
  tail call void @llvm.prefetch.p0(ptr %refcount.i.i.i46, i32 1, i32 3, i32 1) #24
  %12 = tail call { i32, i32, i32 } asm sideeffect "@ atomic_fetch_sub\0A1:\09ldrex\09$0, [$4]\0A\09sub\09$1, $0, $5\0A\09strex\09$2, $1, [$4]\0A\09teq\09$2, #0\0A\09bne\091b", "=&r,=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %refcount.i.i.i46, ptr %refcount.i.i.i46, i32 1, ptr elementtype(i32) %refcount.i.i.i46) #24, !srcloc !64
  %asmresult.i.i.i.i.i.i.i.i22 = extractvalue { i32, i32, i32 } %12, 0
  %cmp.i.i.i.i.i23 = icmp eq i32 %asmresult.i.i.i.i.i.i.i.i22, 1
  br i1 %cmp.i.i.i.i.i23, label %if.then.i.i29, label %if.end5.i.i.i.i.i25

if.end5.i.i.i.i.i25:                              ; preds = %if.end10.i.i
  %.not.i.i.i.i.i24 = icmp sgt i32 %asmresult.i.i.i.i.i.i.i.i22, 0
  br i1 %.not.i.i.i.i.i24, label %if.end.i, label %if.then10.i.i.i.i.i26, !prof !14

if.then10.i.i.i.i.i26:                            ; preds = %if.end5.i.i.i.i.i25
  tail call void @refcount_warn_saturate(ptr noundef %refcount.i.i.i46, i32 noundef 3) #27
  br label %if.end.i

if.then.i.i29:                                    ; preds = %if.end10.i.i
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #24, !srcloc !65
  %free.i.i.i27 = getelementptr i8, ptr %.pn5.i.i38, i32 -8
  %13 = load ptr, ptr %free.i.i.i27, align 4
  %tobool.not.i.i.i28 = icmp eq ptr %13, null
  br i1 %tobool.not.i.i.i28, label %if.end.i, label %if.then.i.i.i30

if.then.i.i.i30:                                  ; preds = %if.then.i.i29
  tail call void %13(ptr noundef nonnull %res.0.le.i.i45) #27
  tail call void @kfree(ptr noundef nonnull %res.0.le.i.i45) #28
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i.i.i30, %if.then.i.i29, %if.then10.i.i.i.i.i26, %if.end5.i.i.i.i.i25, %kunit_find_named_resource.exit60, %kunit_find_named_resource.exit60.thread, %do.end17.i, %for.end.i
  %14 = load i32, ptr %flags22.i, align 4
  %and.i18 = and i32 %14, 65536
  %tobool.not.i = icmp eq i32 %and.i18, 0
  br i1 %tobool.not.i, label %validate_slab_node.exit, label %if.end24.i

if.end24.i:                                       ; preds = %if.end.i
  %full.i = getelementptr inbounds %struct.kmem_cache_node, ptr %0, i32 0, i32 5
  %.pn8298.i = load ptr, ptr %full.i, align 4
  %cmp31.not99.i = icmp eq ptr %.pn8298.i, %full.i
  br i1 %cmp31.not99.i, label %for.end41.i, label %for.body34.i

for.body34.i:                                     ; preds = %for.body34.i, %if.end24.i
  %.pn82101.i = phi ptr [ %.pn82.i, %for.body34.i ], [ %.pn8298.i, %if.end24.i ]
  %count.1100.i = phi i32 [ %inc35.i, %for.body34.i ], [ %count.0.lcssa.i, %if.end24.i ]
  %slab.1.i = getelementptr i8, ptr %.pn82101.i, i32 -4
  tail call fastcc void @validate_slab(ptr noundef %s, ptr noundef %slab.1.i, ptr noundef nonnull %call1) #27
  %inc35.i = add i32 %count.1100.i, 1
  %.pn82.i = load ptr, ptr %.pn82101.i, align 4
  %cmp31.not.i = icmp eq ptr %.pn82.i, %full.i
  br i1 %cmp31.not.i, label %for.end41.i, label %for.body34.i

for.end41.i:                                      ; preds = %for.body34.i, %if.end24.i
  %count.1.lcssa.i = phi i32 [ %count.0.lcssa.i, %if.end24.i ], [ %inc35.i, %for.body34.i ]
  %nr_slabs.i = getelementptr inbounds %struct.kmem_cache_node, ptr %0, i32 0, i32 3
  %15 = load volatile i32, ptr %nr_slabs.i, align 4
  %cmp43.not.i = icmp eq i32 %count.1.lcssa.i, %15
  br i1 %cmp43.not.i, label %validate_slab_node.exit, label %do.end48.i

do.end48.i:                                       ; preds = %for.end41.i
  %16 = load ptr, ptr %name.i, align 4
  %17 = load volatile i32, ptr %nr_slabs.i, align 4
  %call53.i = tail call i32 (ptr, ...) @_printk(ptr noundef nonnull @.str.141, ptr noundef %16, i32 noundef %count.1.lcssa.i, i32 noundef %17) #26
  %18 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i83.i = and i32 %18, -16384
  %19 = inttoptr i32 %and.i.i83.i to ptr
  %task.i84.i = getelementptr inbounds %struct.thread_info, ptr %19, i32 0, i32 2
  %20 = load ptr, ptr %task.i84.i, align 8
  %kunit_test.i85.i = getelementptr inbounds %struct.task_struct, ptr %20, i32 0, i32 192
  %21 = load ptr, ptr %kunit_test.i85.i, align 4
  %tobool.not.i86.i = icmp eq ptr %21, null
  br i1 %tobool.not.i86.i, label %validate_slab_node.exit, label %if.end.i89.i, !prof !14

if.end.i89.i:                                     ; preds = %do.end48.i
  %lock.i.i = getelementptr inbounds %struct.kunit, ptr %21, i32 0, i32 6
  %call2.i.i = tail call i32 @_raw_spin_lock_irqsave(ptr noundef %lock.i.i) #27
  %resources.i.i = getelementptr inbounds %struct.kunit, ptr %21, i32 0, i32 8
  %prev.i.i = getelementptr inbounds %struct.kunit, ptr %21, i32 0, i32 8, i32 1
  %.pn3.i.i = load ptr, ptr %prev.i.i, align 4
  %cmp7.not4.i.i = icmp eq ptr %.pn3.i.i, %resources.i.i
  br i1 %cmp7.not4.i.i, label %kunit_find_named_resource.exit.thread, label %for.body.i.i

for.body.i.i:                                     ; preds = %for.inc.i.i, %if.end.i89.i
  %.pn5.i.i = phi ptr [ %.pn.i.i, %for.inc.i.i ], [ %.pn3.i.i, %if.end.i89.i ]
  %name.i.i.i = getelementptr i8, ptr %.pn5.i.i, i32 -12
  %22 = load ptr, ptr %name.i.i.i, align 4
  %tobool.not.i.i.i19 = icmp eq ptr %22, null
  br i1 %tobool.not.i.i.i19, label %for.inc.i.i, label %kunit_resource_name_match.exit.i.i

kunit_resource_name_match.exit.i.i:               ; preds = %for.body.i.i
  %call.i.i.i = tail call i32 @strcmp(ptr noundef nonnull %22, ptr noundef nonnull @.str.53) #27
  %cmp.i.i.i = icmp eq i32 %call.i.i.i, 0
  br i1 %cmp.i.i.i, label %if.then.i.i20, label %for.inc.i.i

if.then.i.i20:                                    ; preds = %kunit_resource_name_match.exit.i.i
  %res.0.le.i.i = getelementptr i8, ptr %.pn5.i.i, i32 -16
  %refcount.i.i.i = getelementptr i8, ptr %.pn5.i.i, i32 -4
  tail call void @llvm.prefetch.p0(ptr %refcount.i.i.i, i32 1, i32 3, i32 1) #24
  %23 = tail call { i32, i32, i32 } asm sideeffect "@ atomic_fetch_add\0A1:\09ldrex\09$0, [$4]\0A\09add\09$1, $0, $5\0A\09strex\09$2, $1, [$4]\0A\09teq\09$2, #0\0A\09bne\091b", "=&r,=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %refcount.i.i.i, ptr %refcount.i.i.i, i32 1, ptr elementtype(i32) %refcount.i.i.i) #24, !srcloc !62
  %asmresult.i.i.i.i.i.i.i.i.i = extractvalue { i32, i32, i32 } %23, 0
  %tobool1.not.i.i.i.i.i.i.i = icmp eq i32 %asmresult.i.i.i.i.i.i.i.i.i, 0
  br i1 %tobool1.not.i.i.i.i.i.i.i, label %if.end15.sink.split.i.i.i.i.i.i.i, label %if.else.i.i.i.i.i.i.i, !prof !13

if.else.i.i.i.i.i.i.i:                            ; preds = %if.then.i.i20
  %add.i.i.i.i.i.i.i = add i32 %asmresult.i.i.i.i.i.i.i.i.i, 1
  %24 = or i32 %add.i.i.i.i.i.i.i, %asmresult.i.i.i.i.i.i.i.i.i
  %.not.i.i.i.i.i.i.i = icmp sgt i32 %24, -1
  br i1 %.not.i.i.i.i.i.i.i, label %kunit_find_named_resource.exit, label %if.end15.sink.split.i.i.i.i.i.i.i, !prof !14

if.end15.sink.split.i.i.i.i.i.i.i:                ; preds = %if.else.i.i.i.i.i.i.i, %if.then.i.i20
  %.sink.i.i.i.i.i.i.i = phi i32 [ 2, %if.then.i.i20 ], [ 1, %if.else.i.i.i.i.i.i.i ]
  tail call void @refcount_warn_saturate(ptr noundef %refcount.i.i.i, i32 noundef %.sink.i.i.i.i.i.i.i) #27
  br label %kunit_find_named_resource.exit

for.inc.i.i:                                      ; preds = %kunit_resource_name_match.exit.i.i, %for.body.i.i
  %prev12.i.i = getelementptr inbounds %struct.list_head, ptr %.pn5.i.i, i32 0, i32 1
  %.pn.i.i = load ptr, ptr %prev12.i.i, align 4
  %cmp7.not.i.i = icmp eq ptr %.pn.i.i, %resources.i.i
  br i1 %cmp7.not.i.i, label %kunit_find_named_resource.exit.thread, label %for.body.i.i

kunit_find_named_resource.exit.thread:            ; preds = %for.inc.i.i, %if.end.i89.i
  tail call void @_raw_spin_unlock_irqrestore(ptr noundef %lock.i.i, i32 noundef %call2.i.i) #27
  br label %validate_slab_node.exit

kunit_find_named_resource.exit:                   ; preds = %if.end15.sink.split.i.i.i.i.i.i.i, %if.else.i.i.i.i.i.i.i
  tail call void @_raw_spin_unlock_irqrestore(ptr noundef %lock.i.i, i32 noundef %call2.i.i) #27
  %tobool8.not.i88.i = icmp eq ptr %res.0.le.i.i, null
  br i1 %tobool8.not.i88.i, label %validate_slab_node.exit, label %if.end10.i91.i

if.end10.i91.i:                                   ; preds = %kunit_find_named_resource.exit
  %25 = load ptr, ptr %res.0.le.i.i, align 4
  %26 = load i32, ptr %25, align 4
  %inc.i90.i = add i32 %26, 1
  store i32 %inc.i90.i, ptr %25, align 4
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #24, !srcloc !63
  tail call void @llvm.prefetch.p0(ptr %refcount.i.i.i, i32 1, i32 3, i32 1) #24
  %27 = tail call { i32, i32, i32 } asm sideeffect "@ atomic_fetch_sub\0A1:\09ldrex\09$0, [$4]\0A\09sub\09$1, $0, $5\0A\09strex\09$2, $1, [$4]\0A\09teq\09$2, #0\0A\09bne\091b", "=&r,=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %refcount.i.i.i, ptr %refcount.i.i.i, i32 1, ptr elementtype(i32) %refcount.i.i.i) #24, !srcloc !64
  %asmresult.i.i.i.i.i.i.i.i = extractvalue { i32, i32, i32 } %27, 0
  %cmp.i.i.i.i.i = icmp eq i32 %asmresult.i.i.i.i.i.i.i.i, 1
  br i1 %cmp.i.i.i.i.i, label %if.then.i.i, label %if.end5.i.i.i.i.i

if.end5.i.i.i.i.i:                                ; preds = %if.end10.i91.i
  %.not.i.i.i.i.i = icmp sgt i32 %asmresult.i.i.i.i.i.i.i.i, 0
  br i1 %.not.i.i.i.i.i, label %validate_slab_node.exit, label %if.then10.i.i.i.i.i, !prof !14

if.then10.i.i.i.i.i:                              ; preds = %if.end5.i.i.i.i.i
  tail call void @refcount_warn_saturate(ptr noundef %refcount.i.i.i, i32 noundef 3) #27
  br label %validate_slab_node.exit

if.then.i.i:                                      ; preds = %if.end10.i91.i
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #24, !srcloc !65
  %free.i.i.i = getelementptr i8, ptr %.pn5.i.i, i32 -8
  %28 = load ptr, ptr %free.i.i.i, align 4
  %tobool.not.i.i.i = icmp eq ptr %28, null
  br i1 %tobool.not.i.i.i, label %validate_slab_node.exit, label %if.then.i.i.i

if.then.i.i.i:                                    ; preds = %if.then.i.i
  tail call void %28(ptr noundef nonnull %res.0.le.i.i) #27
  tail call void @kfree(ptr noundef nonnull %res.0.le.i.i) #28
  br label %validate_slab_node.exit

validate_slab_node.exit:                          ; preds = %if.then.i.i.i, %if.then.i.i, %if.then10.i.i.i.i.i, %if.end5.i.i.i.i.i, %kunit_find_named_resource.exit, %kunit_find_named_resource.exit.thread, %do.end48.i, %for.end41.i, %if.end.i
  %count.2.i = phi i32 [ %count.1.lcssa.i, %for.end41.i ], [ %count.0.lcssa.i, %if.end.i ], [ %count.1.lcssa.i, %do.end48.i ], [ %count.1.lcssa.i, %kunit_find_named_resource.exit ], [ %count.1.lcssa.i, %kunit_find_named_resource.exit.thread ], [ %count.1.lcssa.i, %if.end5.i.i.i.i.i ], [ %count.1.lcssa.i, %if.then10.i.i.i.i.i ], [ %count.1.lcssa.i, %if.then.i.i ], [ %count.1.lcssa.i, %if.then.i.i.i ]
  tail call void @_raw_spin_unlock_irqrestore(ptr noundef nonnull %0, i32 noundef %call2.i) #27
  br label %for.end

for.end:                                          ; preds = %validate_slab_node.exit, %if.end
  %count.0.lcssa = phi i32 [ %count.2.i, %validate_slab_node.exit ], [ 0, %if.end ]
  tail call void @bitmap_free(ptr noundef nonnull %call1) #27
  br label %cleanup

cleanup:                                          ; preds = %for.end, %entry
  %retval.0 = phi i32 [ %count.0.lcssa, %for.end ], [ -12, %entry ]
  ret i32 %retval.0
}

; Function Attrs: null_pointer_is_valid
declare dso_local ptr @bitmap_alloc(i32 noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local void @bitmap_free(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define dso_local void @sysfs_slab_unlink(ptr noundef %s) local_unnamed_addr #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load i32, ptr @slab_state, align 4
  %cmp = icmp ugt i32 %0, 3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %kobj = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 20
  tail call void @kobject_del(ptr noundef %kobj) #27
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: null_pointer_is_valid
declare dso_local void @kobject_del(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define dso_local void @sysfs_slab_release(ptr noundef %s) local_unnamed_addr #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load i32, ptr @slab_state, align 4
  %cmp = icmp ugt i32 %0, 3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %kobj = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 20
  tail call void @kobject_put(ptr noundef %kobj) #27
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: null_pointer_is_valid
declare dso_local void @kobject_put(ptr noundef) local_unnamed_addr #3

; Function Attrs: cold nounwind null_pointer_is_valid optsize sspstrong uwtable(sync)
define internal i32 @slab_sysfs_init() #2 section ".init.text" align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  tail call void @mutex_lock_nested(ptr noundef nonnull @slab_mutex, i32 noundef 0) #27
  %0 = load ptr, ptr @kernel_kobj, align 4
  %call = tail call ptr @kset_create_and_add(ptr noundef nonnull @.str.208, ptr noundef null, ptr noundef %0) #27
  store ptr %call, ptr @slab_kset, align 4
  %tobool.not = icmp eq ptr %call, null
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @mutex_unlock(ptr noundef nonnull @slab_mutex) #27
  %call1 = tail call i32 (ptr, ...) @_printk(ptr noundef nonnull @.str.209) #26
  br label %cleanup

if.end:                                           ; preds = %entry
  store i32 4, ptr @slab_state, align 4
  %.pn43 = load ptr, ptr @slab_caches, align 4
  %cmp.not44 = icmp eq ptr %.pn43, @slab_caches
  br i1 %cmp.not44, label %while.cond.preheader, label %for.body

while.cond.preheader:                             ; preds = %for.inc, %if.end
  %1 = load ptr, ptr @alias_list, align 4
  %tobool16.not46 = icmp eq ptr %1, null
  br i1 %tobool16.not46, label %while.end, label %while.body

for.body:                                         ; preds = %for.inc, %if.end
  %.pn45 = phi ptr [ %.pn, %for.inc ], [ %.pn43, %if.end ]
  %s.0 = getelementptr i8, ptr %.pn45, i32 -80
  %call3 = tail call fastcc i32 @sysfs_slab_add(ptr noundef %s.0) #25
  %tobool4.not = icmp eq i32 %call3, 0
  br i1 %tobool4.not, label %for.inc, label %do.end8

do.end8:                                          ; preds = %for.body
  %name = getelementptr i8, ptr %.pn45, i32 -4
  %2 = load ptr, ptr %name, align 4
  %call10 = tail call i32 (ptr, ...) @_printk(ptr noundef nonnull @.str.212, ptr noundef %2) #26
  br label %for.inc

for.inc:                                          ; preds = %do.end8, %for.body
  %.pn = load ptr, ptr %.pn45, align 4
  %cmp.not = icmp eq ptr %.pn, @slab_caches
  br i1 %cmp.not, label %while.cond.preheader, label %for.body

while.body:                                       ; preds = %if.end29, %while.cond.preheader
  %3 = phi ptr [ %13, %if.end29 ], [ %1, %while.cond.preheader ]
  %next17 = getelementptr inbounds %struct.saved_alias, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %next17, align 4
  store ptr %4, ptr @alias_list, align 4
  %5 = load ptr, ptr %3, align 4
  %name19 = getelementptr inbounds %struct.saved_alias, ptr %3, i32 0, i32 1
  %6 = load ptr, ptr %name19, align 4
  %7 = load i32, ptr @slab_state, align 4
  %cmp.i = icmp eq i32 %7, 4
  br i1 %cmp.i, label %sysfs_slab_alias.exit, label %if.end.i

if.end.i:                                         ; preds = %while.body
  %8 = load ptr, ptr getelementptr inbounds ([4 x [14 x ptr]], ptr @kmalloc_caches, i32 0, i32 0, i32 7), align 4
  %call7.i.i = tail call noalias align 8 ptr @kmem_cache_alloc_trace(ptr noundef %8, i32 noundef 3264, i32 noundef 12) #33
  %tobool.not.i = icmp eq ptr %call7.i.i, null
  br i1 %tobool.not.i, label %do.end25, label %sysfs_slab_alias.exit.thread

sysfs_slab_alias.exit.thread:                     ; preds = %if.end.i
  store ptr %5, ptr %call7.i.i, align 8
  %name7.i = getelementptr inbounds %struct.saved_alias, ptr %call7.i.i, i32 0, i32 1
  store ptr %6, ptr %name7.i, align 4
  %9 = load ptr, ptr @alias_list, align 4
  %next.i = getelementptr inbounds %struct.saved_alias, ptr %call7.i.i, i32 0, i32 2
  store ptr %9, ptr %next.i, align 8
  store ptr %call7.i.i, ptr @alias_list, align 4
  br label %if.end29

sysfs_slab_alias.exit:                            ; preds = %while.body
  %10 = load ptr, ptr @slab_kset, align 4
  %kobj.i = getelementptr inbounds %struct.kset, ptr %10, i32 0, i32 2
  tail call void @sysfs_remove_link(ptr noundef %kobj.i, ptr noundef %6) #27
  %11 = load ptr, ptr @slab_kset, align 4
  %kobj1.i = getelementptr inbounds %struct.kset, ptr %11, i32 0, i32 2
  %kobj2.i = getelementptr inbounds %struct.kmem_cache, ptr %5, i32 0, i32 20
  %call.i = tail call i32 @sysfs_create_link(ptr noundef %kobj1.i, ptr noundef %kobj2.i, ptr noundef %6) #27
  %tobool21.not = icmp eq i32 %call.i, 0
  br i1 %tobool21.not, label %if.end29, label %do.end25

do.end25:                                         ; preds = %sysfs_slab_alias.exit, %if.end.i
  %12 = load ptr, ptr %name19, align 4
  %call28 = tail call i32 (ptr, ...) @_printk(ptr noundef nonnull @.str.215, ptr noundef %12) #26
  br label %if.end29

if.end29:                                         ; preds = %do.end25, %sysfs_slab_alias.exit, %sysfs_slab_alias.exit.thread
  tail call void @kfree(ptr noundef nonnull %3) #25
  %13 = load ptr, ptr @alias_list, align 4
  %tobool16.not = icmp eq ptr %13, null
  br i1 %tobool16.not, label %while.end, label %while.body

while.end:                                        ; preds = %if.end29, %while.cond.preheader
  tail call void @mutex_unlock(ptr noundef nonnull @slab_mutex) #27
  br label %cleanup

cleanup:                                          ; preds = %while.end, %if.then
  %retval.0 = phi i32 [ 0, %while.end ], [ -38, %if.then ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define dso_local void @debugfs_slab_release(ptr nocapture noundef readonly %s) local_unnamed_addr #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %name = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 18
  %0 = load ptr, ptr %name, align 4
  %1 = load ptr, ptr @slab_debugfs_root, align 4
  %call = tail call ptr @debugfs_lookup(ptr noundef %0, ptr noundef %1) #27
  tail call void @debugfs_remove(ptr noundef %call) #27
  ret void
}

; Function Attrs: null_pointer_is_valid
declare dso_local void @debugfs_remove(ptr noundef) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local ptr @debugfs_lookup(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: cold nounwind null_pointer_is_valid optsize sspstrong uwtable(sync)
define internal i32 @slab_debugfs_init() #2 section ".init.text" align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %call = tail call ptr @debugfs_create_dir(ptr noundef nonnull @.str.208, ptr noundef null) #27
  store ptr %call, ptr @slab_debugfs_root, align 4
  %.pn8 = load ptr, ptr @slab_caches, align 4
  %cmp.not10 = icmp eq ptr %.pn8, @slab_caches
  br i1 %cmp.not10, label %for.end, label %for.body

for.body:                                         ; preds = %for.inc, %entry
  %.pn11 = phi ptr [ %.pn, %for.inc ], [ %.pn8, %entry ]
  %s.012 = getelementptr i8, ptr %.pn11, i32 -80
  %flags = getelementptr i8, ptr %.pn11, i32 -76
  %0 = load i32, ptr %flags, align 4
  %and = and i32 %0, 65536
  %tobool.not = icmp eq i32 %and, 0
  br i1 %tobool.not, label %for.inc, label %if.then

if.then:                                          ; preds = %for.body
  %1 = load ptr, ptr @slab_debugfs_root, align 4
  %tobool.not.i = icmp eq ptr %1, null
  br i1 %tobool.not.i, label %for.inc, label %if.end.i, !prof !13

if.end.i:                                         ; preds = %if.then
  %name.i = getelementptr i8, ptr %.pn11, i32 -4
  %2 = load ptr, ptr %name.i, align 4
  %call.i = tail call ptr @debugfs_create_dir(ptr noundef %2, ptr noundef nonnull %1) #27
  %call4.i = tail call ptr @debugfs_create_file(ptr noundef nonnull @.str.217, i16 noundef zeroext 256, ptr noundef %call.i, ptr noundef %s.012, ptr noundef nonnull @slab_debugfs_fops) #27
  %call5.i = tail call ptr @debugfs_create_file(ptr noundef nonnull @.str.218, i16 noundef zeroext 256, ptr noundef %call.i, ptr noundef %s.012, ptr noundef nonnull @slab_debugfs_fops) #27
  br label %for.inc

for.inc:                                          ; preds = %if.end.i, %if.then, %for.body
  %.pn = load ptr, ptr %.pn11, align 4
  %cmp.not = icmp eq ptr %.pn, @slab_caches
  br i1 %cmp.not, label %for.end, label %for.body

for.end:                                          ; preds = %for.inc, %entry
  ret i32 0
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define dso_local void @get_slabinfo(ptr nocapture noundef readonly %s, ptr nocapture noundef writeonly %sinfo) local_unnamed_addr #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %arrayidx.i = getelementptr %struct.kmem_cache, ptr %s, i32 0, i32 26, i32 0
  %0 = load ptr, ptr %arrayidx.i, align 4
  %tobool.not = icmp eq ptr %0, null
  br i1 %tobool.not, label %for.end, label %if.then

if.then:                                          ; preds = %entry
  %nr_slabs.i = getelementptr inbounds %struct.kmem_cache_node, ptr %0, i32 0, i32 3
  %1 = load volatile i32, ptr %nr_slabs.i, align 4
  %total_objects.i = getelementptr inbounds %struct.kmem_cache_node, ptr %0, i32 0, i32 4
  %2 = load volatile i32, ptr %total_objects.i, align 4
  %call2.i = tail call i32 @_raw_spin_lock_irqsave(ptr noundef nonnull %0) #27
  %partial.i = getelementptr inbounds %struct.kmem_cache_node, ptr %0, i32 0, i32 2
  %.pn21.i = load ptr, ptr %partial.i, align 4
  %cmp7.not22.i = icmp eq ptr %.pn21.i, %partial.i
  br i1 %cmp7.not22.i, label %count_partial.exit, label %for.body.i

for.body.i:                                       ; preds = %for.body.i, %if.then
  %.pn24.i = phi ptr [ %.pn.i, %for.body.i ], [ %.pn21.i, %if.then ]
  %x.023.i = phi i32 [ %add.i, %for.body.i ], [ 0, %if.then ]
  %3 = getelementptr i8, ptr %.pn24.i, i32 16
  %bf.load.i = load i32, ptr %3, align 4
  %bf.lshr.i = lshr i32 %bf.load.i, 1
  %bf.clear.i = and i32 %bf.lshr.i, 32767
  %bf.lshr2.i = lshr i32 %bf.load.i, 16
  %sub.i = sub nsw i32 %bf.clear.i, %bf.lshr2.i
  %add.i = add i32 %sub.i, %x.023.i
  %.pn.i = load ptr, ptr %.pn24.i, align 4
  %cmp7.not.i = icmp eq ptr %.pn.i, %partial.i
  br i1 %cmp7.not.i, label %count_partial.exit, label %for.body.i

count_partial.exit:                               ; preds = %for.body.i, %if.then
  %x.0.lcssa.i = phi i32 [ 0, %if.then ], [ %add.i, %for.body.i ]
  tail call void @_raw_spin_unlock_irqrestore(ptr noundef nonnull %0, i32 noundef %call2.i) #27
  br label %for.end

for.end:                                          ; preds = %count_partial.exit, %entry
  %nr_slabs.0.lcssa = phi i32 [ %1, %count_partial.exit ], [ 0, %entry ]
  %nr_objs.0.lcssa = phi i32 [ %2, %count_partial.exit ], [ 0, %entry ]
  %nr_free.0.lcssa = phi i32 [ %x.0.lcssa.i, %count_partial.exit ], [ 0, %entry ]
  %sub = sub i32 %nr_objs.0.lcssa, %nr_free.0.lcssa
  store i32 %sub, ptr %sinfo, align 4
  %num_objs = getelementptr inbounds %struct.slabinfo, ptr %sinfo, i32 0, i32 1
  store i32 %nr_objs.0.lcssa, ptr %num_objs, align 4
  %active_slabs = getelementptr inbounds %struct.slabinfo, ptr %sinfo, i32 0, i32 2
  store i32 %nr_slabs.0.lcssa, ptr %active_slabs, align 4
  %num_slabs = getelementptr inbounds %struct.slabinfo, ptr %sinfo, i32 0, i32 3
  store i32 %nr_slabs.0.lcssa, ptr %num_slabs, align 4
  %oo = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 9
  %.unpack = load i32, ptr %oo, align 4
  %and.i = and i32 %.unpack, 65535
  %objects_per_slab = getelementptr inbounds %struct.slabinfo, ptr %sinfo, i32 0, i32 8
  store i32 %and.i, ptr %objects_per_slab, align 4
  %.unpack26 = load i32, ptr %oo, align 4
  %shr.i = lshr i32 %.unpack26, 16
  %cache_order = getelementptr inbounds %struct.slabinfo, ptr %sinfo, i32 0, i32 9
  store i32 %shr.i, ptr %cache_order, align 4
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc i32 @count_partial(ptr noundef %n, ptr nocapture noundef readonly %get_count) unnamed_addr #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %call2 = tail call i32 @_raw_spin_lock_irqsave(ptr noundef %n) #27
  %partial = getelementptr inbounds %struct.kmem_cache_node, ptr %n, i32 0, i32 2
  %.pn21 = load ptr, ptr %partial, align 4
  %cmp7.not22 = icmp eq ptr %.pn21, %partial
  br i1 %cmp7.not22, label %for.end, label %for.body

for.body:                                         ; preds = %for.body, %entry
  %.pn24 = phi ptr [ %.pn, %for.body ], [ %.pn21, %entry ]
  %x.023 = phi i32 [ %add, %for.body ], [ 0, %entry ]
  %slab.0 = getelementptr i8, ptr %.pn24, i32 -4
  %call9 = tail call i32 %get_count(ptr noundef %slab.0) #27, !callees !66
  %add = add i32 %call9, %x.023
  %.pn = load ptr, ptr %.pn24, align 4
  %cmp7.not = icmp eq ptr %.pn, %partial
  br i1 %cmp7.not, label %for.end, label %for.body

for.end:                                          ; preds = %for.body, %entry
  %x.0.lcssa = phi i32 [ 0, %entry ], [ %add, %for.body ]
  tail call void @_raw_spin_unlock_irqrestore(ptr noundef %n, i32 noundef %call2) #27
  ret i32 %x.0.lcssa
}

; Function Attrs: argmemonly mustprogress nofree norecurse nosync nounwind null_pointer_is_valid readonly sspstrong willreturn uwtable(sync)
define internal i32 @count_free(ptr nocapture noundef readonly %slab) #12 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = getelementptr inbounds %struct.slab, ptr %slab, i32 0, i32 4
  %bf.load = load i32, ptr %0, align 4
  %bf.lshr = lshr i32 %bf.load, 1
  %bf.clear = and i32 %bf.lshr, 32767
  %bf.lshr2 = lshr i32 %bf.load, 16
  %sub = sub nsw i32 %bf.clear, %bf.lshr2
  ret i32 %sub
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind null_pointer_is_valid readnone sspstrong willreturn uwtable(sync)
define dso_local void @slabinfo_show_stats(ptr nocapture noundef %m, ptr nocapture noundef %s) local_unnamed_addr #13 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind null_pointer_is_valid readnone sspstrong willreturn uwtable(sync)
define dso_local i32 @slabinfo_write(ptr nocapture noundef readnone %file, ptr nocapture noundef readnone %buffer, i32 noundef %count, ptr nocapture noundef readnone %ppos) local_unnamed_addr #13 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  ret i32 -5
}

; Function Attrs: null_pointer_is_valid
declare dso_local void @static_key_enable(ptr noundef) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local void @static_key_disable(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc ptr @__slab_alloc(ptr noundef %s, i32 noundef %gfpflags, i32 noundef %addr) unnamed_addr #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i = and i32 %0, -16384
  %1 = inttoptr i32 %and.i.i.i to ptr
  %preempt_count.i.i = getelementptr inbounds %struct.thread_info, ptr %1, i32 0, i32 1
  %2 = load volatile i32, ptr %preempt_count.i.i, align 4
  %add.i = add i32 %2, 1
  store volatile i32 %add.i, ptr %preempt_count.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !67
  %3 = load ptr, ptr %s, align 4
  %4 = ptrtoint ptr %3 to i32
  %5 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i = and i32 %5, -16384
  %6 = inttoptr i32 %and.i to ptr
  %cpu = getelementptr inbounds %struct.thread_info, ptr %6, i32 0, i32 3
  %7 = load i32, ptr %cpu, align 4
  %arrayidx = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %7
  %8 = load i32, ptr %arrayidx, align 4
  %add = add i32 %8, %4
  %9 = inttoptr i32 %add to ptr
  %call6 = tail call fastcc ptr @___slab_alloc(ptr noundef %s, i32 noundef %gfpflags, i32 noundef %addr, ptr noundef %9) #25
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !68
  %10 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i1 = and i32 %10, -16384
  %11 = inttoptr i32 %and.i.i.i1 to ptr
  %preempt_count.i.i2 = getelementptr inbounds %struct.thread_info, ptr %11, i32 0, i32 1
  %12 = load volatile i32, ptr %preempt_count.i.i2, align 4
  %sub.i = add i32 %12, -1
  store volatile i32 %sub.i, ptr %preempt_count.i.i2, align 4
  ret ptr %call6
}

; Function Attrs: null_pointer_is_valid
declare dso_local void @warn_bogus_irq_restore() local_unnamed_addr #3

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.bswap.i32(i32) #14

; Function Attrs: inaccessiblemem_or_argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.prefetch.p0(ptr nocapture readonly, i32 immarg, i32 immarg, i32) #15

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @__traceiter_kmem_cache_alloc(ptr noundef, i32 noundef, ptr noundef, i32 noundef, i32 noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @rcu_read_lock_sched_held() local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @debug_lockdep_rcu_enabled() local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local void @lockdep_rcu_suspicious(ptr noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @__traceiter_kmalloc(ptr noundef, i32 noundef, ptr noundef, i32 noundef, i32 noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local ptr @__kasan_kmalloc(ptr noundef, ptr noundef, i32 noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc void @__slab_free(ptr noundef %s, ptr noundef %slab, ptr noundef %head, ptr noundef %tail, i32 noundef %cnt, i32 noundef %addr) unnamed_addr #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load ptr, ptr %s, align 4
  %arrayidx.i = getelementptr %struct.kmem_cache_cpu, ptr %0, i32 0, i32 5, i32 3
  %1 = ptrtoint ptr %arrayidx.i to i32
  %2 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i = and i32 %2, -16384
  %3 = inttoptr i32 %and.i.i to ptr
  %cpu.i = getelementptr inbounds %struct.thread_info, ptr %3, i32 0, i32 3
  %4 = load i32, ptr %cpu.i, align 4
  %arrayidx7.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %4
  %5 = load i32, ptr %arrayidx7.i, align 4
  %add.i = add i32 %5, %1
  %6 = inttoptr i32 %add.i to ptr
  %7 = load i32, ptr %6, align 4
  %add8.i = add i32 %7, 1
  store i32 %add8.i, ptr %6, align 4
  %8 = load ptr, ptr @__kfence_pool, align 4
  %sub.ptr.lhs.cast.i.i = ptrtoint ptr %head to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint ptr %8 to i32
  %sub.ptr.sub.i.i = sub i32 %sub.ptr.lhs.cast.i.i, %sub.ptr.rhs.cast.i.i
  %cmp.i.i = icmp ult i32 %sub.ptr.sub.i.i, 2097152
  %tobool.i.i = icmp ne ptr %8, null
  %9 = select i1 %cmp.i.i, i1 %tobool.i.i, i1 false
  br i1 %9, label %kfence_free.exit.thread, label %if.end

kfence_free.exit.thread:                          ; preds = %entry
  tail call void @__kfence_free(ptr noundef %head) #27
  br label %cleanup

if.end:                                           ; preds = %entry
  callbr void asm sideeffect "1:\0A\09b ${1:l}\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr nonnull @slub_debug_enabled, ptr blockaddress(@__slab_free, %if.then37.i.i)) #24
          to label %if.end4 [label %if.then37.i.i], !srcloc !10

if.then37.i.i:                                    ; preds = %if.end
  %flags38.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 1
  %10 = load i32, ptr %flags38.i.i, align 4
  %and39.i.i = and i32 %10, 2166016
  %tobool40.i.i.not = icmp eq i32 %and39.i.i, 0
  br i1 %tobool40.i.i.not, label %if.end4, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.then37.i.i
  %call2 = tail call fastcc i32 @free_debug_processing(ptr noundef %s, ptr noundef %slab, ptr noundef %head, ptr noundef %tail, i32 noundef %cnt, i32 noundef %addr) #25
  %tobool.not = icmp eq i32 %call2, 0
  br i1 %tobool.not, label %cleanup, label %if.end4

if.end4:                                          ; preds = %land.lhs.true, %if.then37.i.i, %if.end
  %freelist = getelementptr inbounds %struct.slab, ptr %slab, i32 0, i32 3
  %11 = getelementptr inbounds %struct.slab, ptr %slab, i32 0, i32 4
  %12 = ptrtoint ptr %tail to i32
  %offset.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 6
  %random.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 21
  %sub165.neg = mul i32 %cnt, -65536
  %flags38.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 1
  %arrayidx.i168 = getelementptr %struct.kmem_cache, ptr %s, i32 0, i32 26, i32 0
  br label %do.body

do.body:                                          ; preds = %do.cond38, %if.end4
  %n.0 = phi ptr [ null, %if.end4 ], [ %n.2, %do.cond38 ]
  %flags.0 = phi i32 [ -1, %if.end4 ], [ %flags.1, %do.cond38 ]
  %tobool5.not = icmp eq ptr %n.0, null
  br i1 %tobool5.not, label %if.end9, label %if.then8, !prof !14

if.then8:                                         ; preds = %do.body
  tail call void @_raw_spin_unlock_irqrestore(ptr noundef nonnull %n.0, i32 noundef %flags.0) #27
  br label %if.end9

if.end9:                                          ; preds = %if.then8, %do.body
  %13 = load ptr, ptr %freelist, align 4
  %14 = load i32, ptr %11, align 4
  %cmp.i = icmp eq ptr %13, %tail
  br i1 %cmp.i, label %do.body2.i, label %set_freepointer.exit, !prof !13

do.body2.i:                                       ; preds = %if.end9
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slub.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 379, 0\0A.popsection", ""() #24, !srcloc !30
  unreachable

set_freepointer.exit:                             ; preds = %if.end9
  %15 = load i32, ptr %offset.i, align 4
  %add.i167 = add i32 %15, %12
  %16 = inttoptr i32 %add.i167 to ptr
  %17 = ptrtoint ptr %13 to i32
  %18 = load i32, ptr %random.i.i, align 4
  %19 = tail call i32 @llvm.bswap.i32(i32 %add.i167) #24
  %xor.i.i = xor i32 %18, %17
  %xor2.i.i = xor i32 %xor.i.i, %19
  %20 = inttoptr i32 %xor2.i.i to ptr
  store ptr %20, ptr %16, align 4
  %bf.clear = and i32 %14, 1
  %bf.lshr166 = add i32 %14, %sub165.neg
  %tobool15 = icmp ugt i32 %bf.lshr166, 65535
  %tobool16 = icmp ne ptr %13, null
  %or.cond = and i1 %tobool16, %tobool15
  %tobool18 = icmp ne i32 %bf.clear, 0
  %or.cond106 = select i1 %or.cond, i1 true, i1 %tobool18
  br i1 %or.cond106, label %do.cond38, label %if.then19

if.then19:                                        ; preds = %set_freepointer.exit
  callbr void asm sideeffect "1:\0A\09b ${1:l}\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr nonnull @slub_debug_enabled, ptr blockaddress(@__slab_free, %if.then37.i.i.i)) #24
          to label %kmem_cache_has_cpu_partial.exit [label %if.then37.i.i.i], !srcloc !10

if.then37.i.i.i:                                  ; preds = %if.then19
  %21 = load i32, ptr %flags38.i.i.i, align 4
  %and39.i.i.i = and i32 %21, 2166016
  %tobool40.i.i.i = icmp eq i32 %and39.i.i.i, 0
  br label %kmem_cache_has_cpu_partial.exit

kmem_cache_has_cpu_partial.exit:                  ; preds = %if.then37.i.i.i, %if.then19
  %retval.0.i.i.i = phi i1 [ %tobool40.i.i.i, %if.then37.i.i.i ], [ true, %if.then19 ]
  %call20.not = xor i1 %retval.0.i.i.i, true
  %or.cond107 = or i1 %tobool16, %call20.not
  br i1 %or.cond107, label %if.else, label %if.then23

if.then23:                                        ; preds = %kmem_cache_has_cpu_partial.exit
  %bf.set26 = or i32 %bf.lshr166, 1
  br label %do.cond38

if.else:                                          ; preds = %kmem_cache_has_cpu_partial.exit
  %22 = load volatile i32, ptr %slab, align 4
  %cmp.i.not.i.i.i = icmp eq i32 %22, -1
  br i1 %cmp.i.not.i.i.i, label %if.then.i.i.i, label %slab_nid.exit, !prof !13

if.then.i.i.i:                                    ; preds = %if.else
  tail call void @dump_page(ptr noundef %slab, ptr noundef nonnull @.str.88) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/mm.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 1368, 0\0A.popsection", ""() #24, !srcloc !37
  unreachable

slab_nid.exit:                                    ; preds = %if.else
  %23 = load ptr, ptr %arrayidx.i168, align 4
  %call33 = tail call i32 @_raw_spin_lock_irqsave(ptr noundef %23) #27
  br label %do.cond38

do.cond38:                                        ; preds = %slab_nid.exit, %if.then23, %set_freepointer.exit
  %new.sroa.3.0 = phi i32 [ %bf.lshr166, %set_freepointer.exit ], [ %bf.lshr166, %slab_nid.exit ], [ %bf.set26, %if.then23 ]
  %n.2 = phi ptr [ null, %set_freepointer.exit ], [ %23, %slab_nid.exit ], [ null, %if.then23 ]
  %flags.1 = phi i32 [ %flags.0, %set_freepointer.exit ], [ %call33, %slab_nid.exit ], [ %flags.0, %if.then23 ]
  %call39 = tail call fastcc zeroext i1 @cmpxchg_double_slab(ptr noundef %s, ptr noundef %slab, ptr noundef %13, i32 noundef %14, ptr noundef %head, i32 noundef %new.sroa.3.0) #25
  br i1 %call39, label %do.end42, label %do.body

do.end42:                                         ; preds = %do.cond38
  %tobool43.not = icmp eq ptr %n.2, null
  br i1 %tobool43.not, label %if.then52, label %if.end68, !prof !14

if.then52:                                        ; preds = %do.end42
  br i1 %tobool18, label %if.then60, label %if.else61, !prof !14

if.then60:                                        ; preds = %if.then52
  %24 = load ptr, ptr %s, align 4
  %arrayidx.i169 = getelementptr %struct.kmem_cache_cpu, ptr %24, i32 0, i32 5, i32 4
  %25 = ptrtoint ptr %arrayidx.i169 to i32
  %26 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i170 = and i32 %26, -16384
  %27 = inttoptr i32 %and.i.i170 to ptr
  %cpu.i171 = getelementptr inbounds %struct.thread_info, ptr %27, i32 0, i32 3
  %28 = load i32, ptr %cpu.i171, align 4
  %arrayidx7.i172 = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %28
  %29 = load i32, ptr %arrayidx7.i172, align 4
  %add.i173 = add i32 %29, %25
  %30 = inttoptr i32 %add.i173 to ptr
  %31 = load i32, ptr %30, align 4
  %add8.i174 = add i32 %31, 1
  store i32 %add8.i174, ptr %30, align 4
  br label %cleanup

if.else61:                                        ; preds = %if.then52
  %bf.clear63 = and i32 %new.sroa.3.0, 1
  %tobool64.not = icmp eq i32 %bf.clear63, 0
  br i1 %tobool64.not, label %cleanup, label %if.then65

if.then65:                                        ; preds = %if.else61
  tail call fastcc void @put_cpu_partial(ptr noundef %s, ptr noundef %slab, i32 noundef 1) #25
  %32 = load ptr, ptr %s, align 4
  %arrayidx.i175 = getelementptr %struct.kmem_cache_cpu, ptr %32, i32 0, i32 5, i32 23
  %33 = ptrtoint ptr %arrayidx.i175 to i32
  %34 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i176 = and i32 %34, -16384
  %35 = inttoptr i32 %and.i.i176 to ptr
  %cpu.i177 = getelementptr inbounds %struct.thread_info, ptr %35, i32 0, i32 3
  %36 = load i32, ptr %cpu.i177, align 4
  %arrayidx7.i178 = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %36
  %37 = load i32, ptr %arrayidx7.i178, align 4
  %add.i179 = add i32 %37, %33
  %38 = inttoptr i32 %add.i179 to ptr
  %39 = load i32, ptr %38, align 4
  %add8.i180 = add i32 %39, 1
  store i32 %add8.i180, ptr %38, align 4
  br label %cleanup

if.end68:                                         ; preds = %do.end42
  %tobool71.not = icmp ult i32 %new.sroa.3.0, 65536
  br i1 %tobool71.not, label %land.rhs, label %if.end81

land.rhs:                                         ; preds = %if.end68
  %nr_partial = getelementptr inbounds %struct.kmem_cache_node, ptr %n.2, i32 0, i32 1
  %40 = load i32, ptr %nr_partial, align 4
  %min_partial = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 2
  %41 = load i32, ptr %min_partial, align 4
  %cmp72.not = icmp ult i32 %40, %41
  br i1 %cmp72.not, label %if.end81, label %slab_empty, !prof !14

if.end81:                                         ; preds = %land.rhs, %if.end68
  callbr void asm sideeffect "1:\0A\09b ${1:l}\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr nonnull @slub_debug_enabled, ptr blockaddress(@__slab_free, %if.then37.i.i.i184)) #24
          to label %kmem_cache_has_cpu_partial.exit186 [label %if.then37.i.i.i184], !srcloc !10

if.then37.i.i.i184:                               ; preds = %if.end81
  %42 = load i32, ptr %flags38.i.i.i, align 4
  %and39.i.i.i182 = and i32 %42, 2166016
  %tobool40.i.i.i183 = icmp eq i32 %and39.i.i.i182, 0
  br label %kmem_cache_has_cpu_partial.exit186

kmem_cache_has_cpu_partial.exit186:               ; preds = %if.then37.i.i.i184, %if.end81
  %retval.0.i.i.i185 = phi i1 [ %tobool40.i.i.i183, %if.then37.i.i.i184 ], [ true, %if.end81 ]
  %brmerge = or i1 %tobool16, %retval.0.i.i.i185
  br i1 %brmerge, label %if.end94, label %if.then93, !prof !69

if.then93:                                        ; preds = %kmem_cache_has_cpu_partial.exit186
  tail call fastcc void @remove_full(ptr noundef %s, ptr noundef nonnull %n.2, ptr noundef %slab) #25
  tail call fastcc void @add_partial(ptr noundef nonnull %n.2, ptr noundef %slab, i32 noundef 16) #25
  %43 = load ptr, ptr %s, align 4
  %arrayidx.i187 = getelementptr %struct.kmem_cache_cpu, ptr %43, i32 0, i32 5, i32 5
  %44 = ptrtoint ptr %arrayidx.i187 to i32
  %45 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i188 = and i32 %45, -16384
  %46 = inttoptr i32 %and.i.i188 to ptr
  %cpu.i189 = getelementptr inbounds %struct.thread_info, ptr %46, i32 0, i32 3
  %47 = load i32, ptr %cpu.i189, align 4
  %arrayidx7.i190 = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %47
  %48 = load i32, ptr %arrayidx7.i190, align 4
  %add.i191 = add i32 %48, %44
  %49 = inttoptr i32 %add.i191 to ptr
  %50 = load i32, ptr %49, align 4
  %add8.i192 = add i32 %50, 1
  store i32 %add8.i192, ptr %49, align 4
  br label %if.end94

if.end94:                                         ; preds = %if.then93, %kmem_cache_has_cpu_partial.exit186
  tail call void @_raw_spin_unlock_irqrestore(ptr noundef nonnull %n.2, i32 noundef %flags.1) #27
  br label %cleanup

slab_empty:                                       ; preds = %land.rhs
  br i1 %tobool16, label %if.then97, label %if.else98

if.then97:                                        ; preds = %slab_empty
  tail call fastcc void @remove_partial(ptr noundef nonnull %n.2, ptr noundef %slab) #25
  %51 = load ptr, ptr %s, align 4
  %arrayidx.i193 = getelementptr %struct.kmem_cache_cpu, ptr %51, i32 0, i32 5, i32 6
  %52 = ptrtoint ptr %arrayidx.i193 to i32
  %53 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i194 = and i32 %53, -16384
  %54 = inttoptr i32 %and.i.i194 to ptr
  %cpu.i195 = getelementptr inbounds %struct.thread_info, ptr %54, i32 0, i32 3
  %55 = load i32, ptr %cpu.i195, align 4
  %arrayidx7.i196 = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %55
  %56 = load i32, ptr %arrayidx7.i196, align 4
  %add.i197 = add i32 %56, %52
  %57 = inttoptr i32 %add.i197 to ptr
  %58 = load i32, ptr %57, align 4
  %add8.i198 = add i32 %58, 1
  store i32 %add8.i198, ptr %57, align 4
  br label %if.end99

if.else98:                                        ; preds = %slab_empty
  tail call fastcc void @remove_full(ptr noundef %s, ptr noundef nonnull %n.2, ptr noundef %slab) #25
  br label %if.end99

if.end99:                                         ; preds = %if.else98, %if.then97
  tail call void @_raw_spin_unlock_irqrestore(ptr noundef nonnull %n.2, i32 noundef %flags.1) #27
  %59 = load ptr, ptr %s, align 4
  %arrayidx.i199 = getelementptr %struct.kmem_cache_cpu, ptr %59, i32 0, i32 5, i32 11
  %60 = ptrtoint ptr %arrayidx.i199 to i32
  %61 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i200 = and i32 %61, -16384
  %62 = inttoptr i32 %and.i.i200 to ptr
  %cpu.i201 = getelementptr inbounds %struct.thread_info, ptr %62, i32 0, i32 3
  %63 = load i32, ptr %cpu.i201, align 4
  %arrayidx7.i202 = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %63
  %64 = load i32, ptr %arrayidx7.i202, align 4
  %add.i203 = add i32 %64, %60
  %65 = inttoptr i32 %add.i203 to ptr
  %66 = load i32, ptr %65, align 4
  %add8.i204 = add i32 %66, 1
  store i32 %add8.i204, ptr %65, align 4
  tail call fastcc void @discard_slab(ptr noundef %s, ptr noundef %slab) #25
  br label %cleanup

cleanup:                                          ; preds = %if.end99, %if.end94, %if.then65, %if.else61, %if.then60, %land.lhs.true, %kfence_free.exit.thread
  ret void
}

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0.i32(ptr nocapture writeonly, i8, i32, i1 immarg) #16

; Function Attrs: noinline nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc i32 @free_debug_processing(ptr noundef %s, ptr noundef %slab, ptr noundef %head, ptr noundef readnone %tail, i32 noundef %bulk_cnt, i32 noundef %addr) unnamed_addr #17 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load volatile i32, ptr %slab, align 4
  %cmp.i.not.i.i.i = icmp eq i32 %0, -1
  br i1 %cmp.i.not.i.i.i, label %if.then.i.i.i, label %slab_nid.exit, !prof !13

if.then.i.i.i:                                    ; preds = %entry
  tail call void @dump_page(ptr noundef %slab, ptr noundef nonnull @.str.88) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/mm.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 1368, 0\0A.popsection", ""() #24, !srcloc !37
  unreachable

slab_nid.exit:                                    ; preds = %entry
  %arrayidx.i = getelementptr %struct.kmem_cache, ptr %s, i32 0, i32 26, i32 0
  %1 = load ptr, ptr %arrayidx.i, align 4
  %call4 = tail call i32 @_raw_spin_lock_irqsave(ptr noundef %1) #27
  %2 = getelementptr inbounds %struct.page, ptr %slab, i32 0, i32 1
  %3 = load volatile i32, ptr %2, align 4
  %and.i.i.i = and i32 %3, 1
  %tobool.not.i.i = icmp eq i32 %and.i.i.i, 0
  br i1 %tobool.not.i.i, label %do.end8.i.i, label %if.then.i.i, !prof !14

if.then.i.i:                                      ; preds = %slab_nid.exit
  tail call void @dump_page(ptr noundef %slab, ptr noundef nonnull @.str.29) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slub.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 447, 0\0A.popsection", ""() #24, !srcloc !70
  unreachable

do.end8.i.i:                                      ; preds = %slab_nid.exit
  %4 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i.i.i.i = and i32 %4, -16384
  %5 = inttoptr i32 %and.i.i.i.i.i.i to ptr
  %preempt_count.i.i.i.i.i = getelementptr inbounds %struct.thread_info, ptr %5, i32 0, i32 1
  %6 = load volatile i32, ptr %preempt_count.i.i.i.i.i, align 4
  %add.i.i.i.i = add i32 %6, 1
  store volatile i32 %add.i.i.i.i, ptr %preempt_count.i.i.i.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !71
  br label %while.cond.i.i.i

while.cond.i.i.i:                                 ; preds = %do.body14.i.i.i, %do.end8.i.i
  %7 = load volatile i32, ptr %slab, align 4
  %and.i.i.i.i.i = and i32 %7, 1
  %tobool.not.i.i.i.i.i = icmp eq i32 %and.i.i.i.i.i, 0
  br i1 %tobool.not.i.i.i.i.i, label %test_and_set_bit_lock.exit.i.i.i, label %do.body2.i.i.i, !prof !72

test_and_set_bit_lock.exit.i.i.i:                 ; preds = %while.cond.i.i.i
  tail call void @llvm.prefetch.p0(ptr %slab, i32 1, i32 3, i32 1) #24
  %8 = tail call { i32, i32, i32 } asm sideeffect "@ atomic_fetch_or\0A1:\09ldrex\09$0, [$4]\0A\09orr\09$1, $0, $5\0A\09strex\09$2, $1, [$4]\0A\09teq\09$2, #0\0A\09bne\091b", "=&r,=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %slab, ptr %slab, i32 1, ptr elementtype(i32) %slab) #24, !srcloc !73
  %asmresult.i.i.i.i.i.i.i.i = extractvalue { i32, i32, i32 } %8, 0
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #24, !srcloc !74
  %and1.i.i.i.i.i = and i32 %asmresult.i.i.i.i.i.i.i.i, 1
  %phi.cmp.i.not.i.i.i = icmp eq i32 %and1.i.i.i.i.i, 0
  br i1 %phi.cmp.i.not.i.i.i, label %slab_lock.exit, label %do.body2.i.i.i, !prof !14

do.body2.i.i.i:                                   ; preds = %test_and_set_bit_lock.exit.i.i.i, %while.cond.i.i.i
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !75
  %9 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i1.i.i.i = and i32 %9, -16384
  %10 = inttoptr i32 %and.i.i.i1.i.i.i to ptr
  %preempt_count.i.i2.i.i.i = getelementptr inbounds %struct.thread_info, ptr %10, i32 0, i32 1
  %11 = load volatile i32, ptr %preempt_count.i.i2.i.i.i, align 4
  %sub.i.i.i.i = add i32 %11, -1
  store volatile i32 %sub.i.i.i.i, ptr %preempt_count.i.i2.i.i.i, align 4
  br label %do.body4.i.i.i

do.body4.i.i.i:                                   ; preds = %do.body4.i.i.i, %do.body2.i.i.i
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #24, !srcloc !76
  tail call void asm sideeffect "nop; nop; nop; nop; nop; nop; nop; nop; nop; nop;", ""() #24, !srcloc !77
  %12 = load volatile i32, ptr %slab, align 4
  %and1.i.i.i.i = and i32 %12, 1
  %tobool12.not.i.i.i = icmp eq i32 %and1.i.i.i.i, 0
  br i1 %tobool12.not.i.i.i, label %do.body14.i.i.i, label %do.body4.i.i.i

do.body14.i.i.i:                                  ; preds = %do.body4.i.i.i
  %13 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i3.i.i.i = and i32 %13, -16384
  %14 = inttoptr i32 %and.i.i.i3.i.i.i to ptr
  %preempt_count.i.i4.i.i.i = getelementptr inbounds %struct.thread_info, ptr %14, i32 0, i32 1
  %15 = load volatile i32, ptr %preempt_count.i.i4.i.i.i, align 4
  %add.i5.i.i.i = add i32 %15, 1
  store volatile i32 %add.i5.i.i.i, ptr %preempt_count.i.i4.i.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !78
  br label %while.cond.i.i.i

slab_lock.exit:                                   ; preds = %test_and_set_bit_lock.exit.i.i.i
  %flags7 = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 1
  %16 = load i32, ptr %flags7, align 4
  %and = and i32 %16, 256
  %tobool.not = icmp eq i32 %and, 0
  br i1 %tobool.not, label %if.end11, label %if.then

if.then:                                          ; preds = %slab_lock.exit
  %call8 = tail call fastcc i32 @check_slab(ptr noundef %s, ptr noundef %slab) #25
  %tobool9.not = icmp eq i32 %call8, 0
  br i1 %tobool9.not, label %out, label %if.end11

if.end11:                                         ; preds = %if.then, %slab_lock.exit
  %red_left_pad.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 17
  %17 = getelementptr inbounds %struct.slab, ptr %slab, i32 0, i32 4
  %size.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 3
  %slab_cache.i = getelementptr inbounds %struct.slab, ptr %slab, i32 0, i32 2
  %offset.i.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 6
  %inuse.i.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 15
  %tobool.not.i84 = icmp eq i32 %addr, 0
  %name.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 18
  %freelist.i = getelementptr inbounds %struct.slab, ptr %slab, i32 0, i32 3
  %object_size.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 4
  %random.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 21
  br label %next_object

next_object:                                      ; preds = %if.then28, %if.end11
  %object.0 = phi ptr [ %head, %if.end11 ], [ %58, %if.then28 ]
  %cnt.0 = phi i32 [ 0, %if.end11 ], [ %inc, %if.then28 ]
  %inc = add i32 %cnt.0, 1
  %18 = load i32, ptr %flags7, align 4
  %and13 = and i32 %18, 256
  %tobool14.not = icmp eq i32 %and13, 0
  br i1 %tobool14.not, label %if.end20, label %if.then15

if.then15:                                        ; preds = %next_object
  %tobool.not.i.i78 = icmp eq ptr %object.0, null
  br i1 %tobool.not.i.i78, label %if.end.i, label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then15
  %call.i.i.i.i = tail call ptr @page_address(ptr noundef %slab) #27
  %19 = load i32, ptr %flags7, align 4
  %and.i.i.i79 = and i32 %19, 1024
  %tobool.not.i.i1.i = icmp eq i32 %and.i.i.i79, 0
  br i1 %tobool.not.i.i1.i, label %restore_red_left.exit.i.i, label %if.then.i.i2.i

if.then.i.i2.i:                                   ; preds = %if.end.i.i
  %20 = load i32, ptr %red_left_pad.i.i.i, align 4
  %idx.neg.i.i.i = sub i32 0, %20
  %add.ptr.i.i.i = getelementptr i8, ptr %object.0, i32 %idx.neg.i.i.i
  br label %restore_red_left.exit.i.i

restore_red_left.exit.i.i:                        ; preds = %if.then.i.i2.i, %if.end.i.i
  %p.addr.0.i.i.i = phi ptr [ %add.ptr.i.i.i, %if.then.i.i2.i ], [ %object.0, %if.end.i.i ]
  %cmp.i.i = icmp ult ptr %p.addr.0.i.i.i, %call.i.i.i.i
  br i1 %cmp.i.i, label %if.then.i, label %lor.lhs.false.i.i

lor.lhs.false.i.i:                                ; preds = %restore_red_left.exit.i.i
  %bf.load.i.i = load i32, ptr %17, align 4
  %bf.lshr.i.i = lshr i32 %bf.load.i.i, 1
  %bf.clear.i.i = and i32 %bf.lshr.i.i, 32767
  %21 = load i32, ptr %size.i.i, align 4
  %mul.i.i = mul i32 %bf.clear.i.i, %21
  %add.ptr.i.i = getelementptr i8, ptr %call.i.i.i.i, i32 %mul.i.i
  %cmp3.not.i.i = icmp ult ptr %p.addr.0.i.i.i, %add.ptr.i.i
  br i1 %cmp3.not.i.i, label %check_valid_pointer.exit.i, label %if.then.i

check_valid_pointer.exit.i:                       ; preds = %lor.lhs.false.i.i
  %sub.ptr.lhs.cast.i.i = ptrtoint ptr %p.addr.0.i.i.i to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint ptr %call.i.i.i.i to i32
  %sub.ptr.sub.i.i = sub i32 %sub.ptr.lhs.cast.i.i, %sub.ptr.rhs.cast.i.i
  %rem.i.i = urem i32 %sub.ptr.sub.i.i, %21
  %tobool6.not.i.i.not = icmp eq i32 %rem.i.i, 0
  br i1 %tobool6.not.i.i.not, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %check_valid_pointer.exit.i, %lor.lhs.false.i.i, %restore_red_left.exit.i.i
  tail call void (ptr, ptr, ptr, ...) @slab_err(ptr noundef %s, ptr noundef %slab, ptr noundef nonnull @.str.39, ptr noundef nonnull %object.0) #27
  br label %out

if.end.i:                                         ; preds = %check_valid_pointer.exit.i, %if.then15
  %call1.i = tail call fastcc i32 @on_freelist(ptr noundef %s, ptr noundef %slab, ptr noundef %object.0) #27
  %tobool2.not.i = icmp eq i32 %call1.i, 0
  br i1 %tobool2.not.i, label %if.end4.i, label %if.then3.i

if.then3.i:                                       ; preds = %if.end.i
  %22 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i3.i = and i32 %22, -16384
  %23 = inttoptr i32 %and.i.i.i3.i to ptr
  %task.i.i.i = getelementptr inbounds %struct.thread_info, ptr %23, i32 0, i32 2
  %24 = load ptr, ptr %task.i.i.i, align 8
  %kunit_test.i.i.i = getelementptr inbounds %struct.task_struct, ptr %24, i32 0, i32 192
  %25 = load ptr, ptr %kunit_test.i.i.i, align 4
  %tobool.not.i.i4.i = icmp eq ptr %25, null
  br i1 %tobool.not.i.i4.i, label %if.end.i5.i, label %if.end.i.i.i, !prof !14

if.end.i.i.i:                                     ; preds = %if.then3.i
  %call7.i.i.i = tail call fastcc ptr @kunit_find_named_resource(ptr noundef nonnull %25) #27
  %tobool8.not.i.i.i = icmp eq ptr %call7.i.i.i, null
  br i1 %tobool8.not.i.i.i, label %if.end.i5.i, label %slab_add_kunit_errors.exit.i.i

slab_add_kunit_errors.exit.i.i:                   ; preds = %if.end.i.i.i
  %26 = load ptr, ptr %call7.i.i.i, align 4
  %27 = load i32, ptr %26, align 4
  %inc.i.i.i = add i32 %27, 1
  store i32 %inc.i.i.i, ptr %26, align 4
  tail call fastcc void @kunit_put_resource(ptr noundef nonnull %call7.i.i.i) #27
  br label %out

if.end.i5.i:                                      ; preds = %if.end.i.i.i, %if.then3.i
  tail call void (ptr, ptr, ...) @slab_bug(ptr noundef %s, ptr noundef nonnull @.str.52, ptr noundef nonnull @.str.40) #27
  tail call fastcc void @print_trailer(ptr noundef %s, ptr noundef %slab, ptr noundef %object.0) #27
  tail call void @add_taint(i32 noundef 5, i32 noundef 1) #27
  br label %out

if.end4.i:                                        ; preds = %if.end.i
  %call5.i = tail call fastcc i32 @check_object(ptr noundef %s, ptr noundef %slab, ptr noundef %object.0, i8 noundef zeroext -52) #27
  %tobool6.not.i = icmp eq i32 %call5.i, 0
  br i1 %tobool6.not.i, label %out, label %if.end8.i

if.end8.i:                                        ; preds = %if.end4.i
  %28 = load ptr, ptr %slab_cache.i, align 4
  %cmp.not.i = icmp eq ptr %28, %s
  br i1 %cmp.not.i, label %if.end8.i.if.end20_crit_edge, label %if.then11.i, !prof !14

if.end8.i.if.end20_crit_edge:                     ; preds = %if.end8.i
  %.pre = load i32, ptr %flags7, align 4
  br label %if.end20

if.then11.i:                                      ; preds = %if.end8.i
  %29 = load volatile i32, ptr %2, align 4
  %and.i.i.i.i = and i32 %29, 1
  %tobool.not.i.i.i80 = icmp eq i32 %and.i.i.i.i, 0
  br i1 %tobool.not.i.i.i80, label %folio_test_slab.exit.i, label %if.then.i.i.i81, !prof !14

if.then.i.i.i81:                                  ; preds = %if.then11.i
  tail call void @dump_page(ptr noundef %slab, ptr noundef nonnull @.str.29) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 260, 0\0A.popsection", ""() #24, !srcloc !28
  unreachable

folio_test_slab.exit.i:                           ; preds = %if.then11.i
  %30 = load volatile i32, ptr %slab, align 4
  %31 = and i32 %30, 512
  %tobool.i.i.not = icmp eq i32 %31, 0
  br i1 %tobool.i.i.not, label %if.then13.i, label %if.else.i

if.then13.i:                                      ; preds = %folio_test_slab.exit.i
  tail call void (ptr, ptr, ptr, ...) @slab_err(ptr noundef %s, ptr noundef %slab, ptr noundef nonnull @.str.41, ptr noundef %object.0) #27
  br label %out

if.else.i:                                        ; preds = %folio_test_slab.exit.i
  %tobool15.not.i = icmp eq ptr %28, null
  br i1 %tobool15.not.i, label %do.end.i, label %if.else18.i

do.end.i:                                         ; preds = %if.else.i
  %call17.i = tail call i32 (ptr, ...) @_printk(ptr noundef nonnull @.str.42, ptr noundef %object.0) #26
  tail call void @dump_stack() #26
  br label %out

if.else18.i:                                      ; preds = %if.else.i
  tail call fastcc void @object_err(ptr noundef %s, ptr noundef %slab, ptr noundef %object.0, ptr noundef nonnull @.str.44) #27
  br label %out

if.end20:                                         ; preds = %if.end8.i.if.end20_crit_edge, %next_object
  %32 = phi i32 [ %.pre, %if.end8.i.if.end20_crit_edge ], [ %18, %next_object ]
  %and22 = and i32 %32, 65536
  %tobool23.not = icmp eq i32 %and22, 0
  br i1 %tobool23.not, label %if.end25, label %if.then24

if.then24:                                        ; preds = %if.end20
  %33 = load i32, ptr %offset.i.i.i.i, align 4
  %34 = load i32, ptr %inuse.i.i.i.i, align 4
  %cmp.i.not.i.i.i82 = icmp ult i32 %33, %34
  %add.i.i.i = add i32 %34, 4
  %spec.select.i.i.i = select i1 %cmp.i.not.i.i.i82, i32 %34, i32 %add.i.i.i
  %add.ptr.i.i83 = getelementptr i8, ptr %object.0, i32 %spec.select.i.i.i
  %add.ptr1.i.i = getelementptr %struct.track, ptr %add.ptr.i.i83, i32 1
  br i1 %tobool.not.i84, label %if.else.i89, label %if.then.i85

if.then.i85:                                      ; preds = %if.then24
  tail call void @kasan_disable_current() #27
  %addrs.i = getelementptr inbounds %struct.track, ptr %add.ptr1.i.i, i32 0, i32 1
  %call2.i = tail call i32 @stack_trace_save(ptr noundef %addrs.i, i32 noundef 16, i32 noundef 3) #27
  tail call void @kasan_enable_current() #27
  %cmp.i = icmp ult i32 %call2.i, 16
  br i1 %cmp.i, label %if.then3.i87, label %if.end.i88

if.then3.i87:                                     ; preds = %if.then.i85
  %arrayidx.i86 = getelementptr %struct.track, ptr %add.ptr1.i.i, i32 0, i32 1, i32 %call2.i
  store i32 0, ptr %arrayidx.i86, align 4
  br label %if.end.i88

if.end.i88:                                       ; preds = %if.then3.i87, %if.then.i85
  store i32 %addr, ptr %add.ptr1.i.i, align 4
  %35 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i = and i32 %35, -16384
  %36 = inttoptr i32 %and.i.i to ptr
  %cpu.i = getelementptr inbounds %struct.thread_info, ptr %36, i32 0, i32 3
  %37 = load i32, ptr %cpu.i, align 4
  %cpu7.i = getelementptr inbounds %struct.track, ptr %add.ptr1.i.i, i32 0, i32 2
  store i32 %37, ptr %cpu7.i, align 4
  %task.i = getelementptr inbounds %struct.thread_info, ptr %36, i32 0, i32 2
  %38 = load ptr, ptr %task.i, align 8
  %pid.i = getelementptr inbounds %struct.task_struct, ptr %38, i32 0, i32 68
  %39 = load i32, ptr %pid.i, align 8
  %pid9.i = getelementptr inbounds %struct.track, ptr %add.ptr1.i.i, i32 0, i32 3
  store i32 %39, ptr %pid9.i, align 4
  %40 = load volatile i32, ptr @jiffies, align 128
  %when.i = getelementptr inbounds %struct.track, ptr %add.ptr1.i.i, i32 0, i32 4
  store i32 %40, ptr %when.i, align 4
  br label %if.end25

if.else.i89:                                      ; preds = %if.then24
  %call10.i = tail call ptr @__memset(ptr noundef %add.ptr1.i.i, i32 noundef 0, i32 noundef 80) #27
  br label %if.end25

if.end25:                                         ; preds = %if.else.i89, %if.end.i88, %if.end20
  %41 = load i32, ptr %flags7, align 4
  %and.i = and i32 %41, 2097152
  %tobool.not.i90 = icmp eq i32 %and.i, 0
  br i1 %tobool.not.i90, label %trace.exit, label %do.end.i91

do.end.i91:                                       ; preds = %if.end25
  %42 = load ptr, ptr %name.i, align 4
  %bf.load.i = load i32, ptr %17, align 4
  %bf.lshr.i = lshr i32 %bf.load.i, 16
  %43 = load ptr, ptr %freelist.i, align 4
  %call.i = tail call i32 (ptr, ...) @_printk(ptr noundef nonnull @.str.80, ptr noundef %42, ptr noundef nonnull @.str.83, ptr noundef %object.0, i32 noundef %bf.lshr.i, ptr noundef %43) #26
  %44 = load i32, ptr %object_size.i, align 4
  tail call void @kasan_disable_current() #27
  tail call void @print_hex_dump(ptr noundef nonnull @.str.84, ptr noundef nonnull @.str.85, i32 noundef 1, i32 noundef 16, i32 noundef 1, ptr noundef %object.0, i32 noundef %44, i1 noundef zeroext true) #27
  tail call void @kasan_enable_current() #27
  tail call void @dump_stack() #26
  %.pre124 = load i32, ptr %flags7, align 4
  br label %trace.exit

trace.exit:                                       ; preds = %do.end.i91, %if.end25
  %45 = phi i32 [ %41, %if.end25 ], [ %.pre124, %do.end.i91 ]
  %and.i96 = and i32 %45, 1024
  %tobool.not.i97 = icmp eq i32 %and.i96, 0
  br i1 %tobool.not.i97, label %if.end.i100, label %if.then.i99

if.then.i99:                                      ; preds = %trace.exit
  %46 = load i32, ptr %red_left_pad.i.i.i, align 4
  %idx.neg.i = sub i32 0, %46
  %add.ptr.i = getelementptr i8, ptr %object.0, i32 %idx.neg.i
  %call2.i98 = tail call ptr @__memset(ptr noundef %add.ptr.i, i32 noundef 187, i32 noundef %46) #27
  %.pr.i = load i32, ptr %flags7, align 4
  br label %if.end.i100

if.end.i100:                                      ; preds = %if.then.i99, %trace.exit
  %47 = phi i32 [ %.pr.i, %if.then.i99 ], [ %45, %trace.exit ]
  %tobool5.not.i = icmp sgt i32 %47, -1
  br i1 %tobool5.not.i, label %if.end10.i, label %if.then6.i

if.then6.i:                                       ; preds = %if.end.i100
  %48 = load i32, ptr %object_size.i, align 4
  %sub.i = add i32 %48, -1
  %call7.i = tail call ptr @__memset(ptr noundef %object.0, i32 noundef 107, i32 noundef %sub.i) #27
  %49 = load i32, ptr %object_size.i, align 4
  %sub9.i = add i32 %49, -1
  %arrayidx.i102 = getelementptr i8, ptr %object.0, i32 %sub9.i
  store i8 -91, ptr %arrayidx.i102, align 1
  %.pre.i = load i32, ptr %flags7, align 4
  br label %if.end10.i

if.end10.i:                                       ; preds = %if.then6.i, %if.end.i100
  %50 = phi i32 [ %.pre.i, %if.then6.i ], [ %47, %if.end.i100 ]
  %and12.i = and i32 %50, 1024
  %tobool13.not.i = icmp eq i32 %and12.i, 0
  br i1 %tobool13.not.i, label %init_object.exit, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %51 = load i32, ptr %object_size.i, align 4
  %add.ptr16.i = getelementptr i8, ptr %object.0, i32 %51
  %52 = load i32, ptr %inuse.i.i.i.i, align 4
  %sub19.i = sub i32 %52, %51
  %call20.i = tail call ptr @__memset(ptr noundef %add.ptr16.i, i32 noundef 187, i32 noundef %sub19.i) #27
  br label %init_object.exit

init_object.exit:                                 ; preds = %if.then14.i, %if.end10.i
  %cmp26.not = icmp eq ptr %object.0, %tail
  br i1 %cmp26.not, label %out, label %if.then28

if.then28:                                        ; preds = %init_object.exit
  %53 = load i32, ptr %offset.i.i.i.i, align 4
  %add.ptr.i103 = getelementptr i8, ptr %object.0, i32 %53
  %54 = load i32, ptr %add.ptr.i103, align 4
  %55 = ptrtoint ptr %add.ptr.i103 to i32
  %56 = load i32, ptr %random.i.i.i, align 4
  %57 = tail call i32 @llvm.bswap.i32(i32 %55) #24
  %xor.i.i.i = xor i32 %56, %54
  %xor2.i.i.i = xor i32 %xor.i.i.i, %57
  %58 = inttoptr i32 %xor2.i.i.i to ptr
  br label %next_object

out:                                              ; preds = %init_object.exit, %if.else18.i, %do.end.i, %if.then13.i, %if.end4.i, %if.end.i5.i, %slab_add_kunit_errors.exit.i.i, %if.then.i, %if.then
  %object.1 = phi ptr [ %head, %if.then ], [ %object.0, %if.then.i ], [ %object.0, %do.end.i ], [ %object.0, %if.else18.i ], [ %object.0, %if.then13.i ], [ %object.0, %slab_add_kunit_errors.exit.i.i ], [ %object.0, %if.end.i5.i ], [ %tail, %init_object.exit ], [ %object.0, %if.end4.i ]
  %cnt.1 = phi i32 [ 0, %if.then ], [ %inc, %if.then.i ], [ %inc, %do.end.i ], [ %inc, %if.else18.i ], [ %inc, %if.then13.i ], [ %inc, %slab_add_kunit_errors.exit.i.i ], [ %inc, %if.end.i5.i ], [ %inc, %init_object.exit ], [ %inc, %if.end4.i ]
  %tobool36.not = phi i1 [ true, %if.then ], [ true, %if.then.i ], [ true, %do.end.i ], [ true, %if.else18.i ], [ true, %if.then13.i ], [ true, %slab_add_kunit_errors.exit.i.i ], [ true, %if.end.i5.i ], [ false, %init_object.exit ], [ true, %if.end4.i ]
  %ret.0 = phi i32 [ 0, %if.then ], [ 0, %if.then.i ], [ 0, %do.end.i ], [ 0, %if.else18.i ], [ 0, %if.then13.i ], [ 0, %slab_add_kunit_errors.exit.i.i ], [ 0, %if.end.i5.i ], [ 1, %init_object.exit ], [ 0, %if.end4.i ]
  %cmp31.not = icmp eq i32 %cnt.1, %bulk_cnt
  br i1 %cmp31.not, label %if.end34, label %if.then33

if.then33:                                        ; preds = %out
  tail call void (ptr, ptr, ptr, ...) @slab_err(ptr noundef %s, ptr noundef %slab, ptr noundef nonnull @.str.27, i32 noundef %bulk_cnt, i32 noundef %cnt.1) #25
  br label %if.end34

if.end34:                                         ; preds = %if.then33, %out
  %59 = load volatile i32, ptr %2, align 4
  %and.i.i.i68 = and i32 %59, 1
  %tobool.not.i.i69 = icmp eq i32 %and.i.i.i68, 0
  br i1 %tobool.not.i.i69, label %do.end8.i.i72, label %if.then.i.i70, !prof !14

if.then.i.i70:                                    ; preds = %if.end34
  tail call void @dump_page(ptr noundef %slab, ptr noundef nonnull @.str.29) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slub.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 455, 0\0A.popsection", ""() #24, !srcloc !79
  unreachable

do.end8.i.i72:                                    ; preds = %if.end34
  %60 = load volatile i32, ptr %slab, align 4
  %and1.i.i.i.i71 = and i32 %60, 1
  %tobool.not.i.i.i = icmp eq i32 %and1.i.i.i.i71, 0
  br i1 %tobool.not.i.i.i, label %do.body4.i.i.i73, label %slab_unlock.exit, !prof !13

do.body4.i.i.i73:                                 ; preds = %do.end8.i.i72
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/bit_spinlock.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 77, 0\0A.popsection", ""() #24, !srcloc !80
  unreachable

slab_unlock.exit:                                 ; preds = %do.end8.i.i72
  %61 = load volatile i32, ptr %slab, align 4
  %and.i.i.i.i.i74 = and i32 %61, -2
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #24, !srcloc !81
  store volatile i32 %and.i.i.i.i.i74, ptr %slab, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !82
  %62 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i.i.i.i75 = and i32 %62, -16384
  %63 = inttoptr i32 %and.i.i.i.i.i.i75 to ptr
  %preempt_count.i.i.i.i.i76 = getelementptr inbounds %struct.thread_info, ptr %63, i32 0, i32 1
  %64 = load volatile i32, ptr %preempt_count.i.i.i.i.i76, align 4
  %sub.i.i.i.i77 = add i32 %64, -1
  store volatile i32 %sub.i.i.i.i77, ptr %preempt_count.i.i.i.i.i76, align 4
  tail call void @_raw_spin_unlock_irqrestore(ptr noundef %1, i32 noundef %call4) #27
  br i1 %tobool36.not, label %if.then37, label %if.end38

if.then37:                                        ; preds = %slab_unlock.exit
  tail call void (ptr, ptr, ...) @slab_fix(ptr noundef %s, ptr noundef nonnull @.str.28, ptr noundef %object.1) #25
  br label %if.end38

if.end38:                                         ; preds = %if.then37, %slab_unlock.exit
  ret i32 %ret.0
}

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @_raw_spin_lock_irqsave(ptr noundef) local_unnamed_addr #3 section ".spinlock.text"

; Function Attrs: inlinehint nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc zeroext i1 @cmpxchg_double_slab(ptr nocapture noundef readonly %s, ptr noundef %slab, ptr noundef readnone %freelist_old, i32 noundef %counters_old, ptr noundef %freelist_new, i32 noundef %counters_new) unnamed_addr #5 align 64 {
entry:
  %0 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ arch_local_irq_save\0A\09cpsid\09i", "=r,~{memory},~{cc}"() #24, !srcloc !19
  %and.i = and i32 %0, 128
  %tobool.not = icmp eq i32 %and.i, 0
  br i1 %tobool.not, label %if.then, label %do.end11

if.then:                                          ; preds = %entry
  tail call void @trace_hardirqs_off() #27
  br label %do.end11

do.end11:                                         ; preds = %if.then, %entry
  %1 = getelementptr inbounds %struct.page, ptr %slab, i32 0, i32 1
  %2 = load volatile i32, ptr %1, align 4
  %and.i.i = and i32 %2, 1
  %tobool.not.i = icmp eq i32 %and.i.i, 0
  br i1 %tobool.not.i, label %do.end8.i, label %if.then.i, !prof !14

if.then.i:                                        ; preds = %do.end11
  tail call void @dump_page(ptr noundef %slab, ptr noundef nonnull @.str.29) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slub.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 447, 0\0A.popsection", ""() #24, !srcloc !70
  unreachable

do.end8.i:                                        ; preds = %do.end11
  %3 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i.i.i = and i32 %3, -16384
  %4 = inttoptr i32 %and.i.i.i.i.i to ptr
  %preempt_count.i.i.i.i = getelementptr inbounds %struct.thread_info, ptr %4, i32 0, i32 1
  %5 = load volatile i32, ptr %preempt_count.i.i.i.i, align 4
  %add.i.i.i = add i32 %5, 1
  store volatile i32 %add.i.i.i, ptr %preempt_count.i.i.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !71
  br label %while.cond.i.i

while.cond.i.i:                                   ; preds = %do.body14.i.i, %do.end8.i
  %6 = load volatile i32, ptr %slab, align 4
  %and.i.i.i.i = and i32 %6, 1
  %tobool.not.i.i.i.i = icmp eq i32 %and.i.i.i.i, 0
  br i1 %tobool.not.i.i.i.i, label %test_and_set_bit_lock.exit.i.i, label %do.body2.i.i, !prof !72

test_and_set_bit_lock.exit.i.i:                   ; preds = %while.cond.i.i
  tail call void @llvm.prefetch.p0(ptr %slab, i32 1, i32 3, i32 1) #24
  %7 = tail call { i32, i32, i32 } asm sideeffect "@ atomic_fetch_or\0A1:\09ldrex\09$0, [$4]\0A\09orr\09$1, $0, $5\0A\09strex\09$2, $1, [$4]\0A\09teq\09$2, #0\0A\09bne\091b", "=&r,=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %slab, ptr %slab, i32 1, ptr elementtype(i32) %slab) #24, !srcloc !73
  %asmresult.i.i.i.i.i.i.i = extractvalue { i32, i32, i32 } %7, 0
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #24, !srcloc !74
  %and1.i.i.i.i = and i32 %asmresult.i.i.i.i.i.i.i, 1
  %phi.cmp.i.not.i.i = icmp eq i32 %and1.i.i.i.i, 0
  br i1 %phi.cmp.i.not.i.i, label %__slab_lock.exit, label %do.body2.i.i, !prof !14

do.body2.i.i:                                     ; preds = %test_and_set_bit_lock.exit.i.i, %while.cond.i.i
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !75
  %8 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i1.i.i = and i32 %8, -16384
  %9 = inttoptr i32 %and.i.i.i1.i.i to ptr
  %preempt_count.i.i2.i.i = getelementptr inbounds %struct.thread_info, ptr %9, i32 0, i32 1
  %10 = load volatile i32, ptr %preempt_count.i.i2.i.i, align 4
  %sub.i.i.i = add i32 %10, -1
  store volatile i32 %sub.i.i.i, ptr %preempt_count.i.i2.i.i, align 4
  br label %do.body4.i.i

do.body4.i.i:                                     ; preds = %do.body4.i.i, %do.body2.i.i
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #24, !srcloc !76
  tail call void asm sideeffect "nop; nop; nop; nop; nop; nop; nop; nop; nop; nop;", ""() #24, !srcloc !77
  %11 = load volatile i32, ptr %slab, align 4
  %and1.i.i.i = and i32 %11, 1
  %tobool12.not.i.i = icmp eq i32 %and1.i.i.i, 0
  br i1 %tobool12.not.i.i, label %do.body14.i.i, label %do.body4.i.i

do.body14.i.i:                                    ; preds = %do.body4.i.i
  %12 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i3.i.i = and i32 %12, -16384
  %13 = inttoptr i32 %and.i.i.i3.i.i to ptr
  %preempt_count.i.i4.i.i = getelementptr inbounds %struct.thread_info, ptr %13, i32 0, i32 1
  %14 = load volatile i32, ptr %preempt_count.i.i4.i.i, align 4
  %add.i5.i.i = add i32 %14, 1
  store volatile i32 %add.i5.i.i, ptr %preempt_count.i.i4.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !78
  br label %while.cond.i.i

__slab_lock.exit:                                 ; preds = %test_and_set_bit_lock.exit.i.i
  %freelist = getelementptr inbounds %struct.slab, ptr %slab, i32 0, i32 3
  %15 = load ptr, ptr %freelist, align 4
  %cmp12 = icmp eq ptr %15, %freelist_old
  br i1 %cmp12, label %land.lhs.true, label %if.end49

land.lhs.true:                                    ; preds = %__slab_lock.exit
  %16 = getelementptr inbounds %struct.slab, ptr %slab, i32 0, i32 4
  %17 = load i32, ptr %16, align 4
  %cmp14 = icmp eq i32 %17, %counters_old
  br i1 %cmp14, label %if.then16, label %if.end49

if.then16:                                        ; preds = %land.lhs.true
  store ptr %freelist_new, ptr %freelist, align 4
  store i32 %counters_new, ptr %16, align 4
  %18 = load volatile i32, ptr %1, align 4
  %and.i.i1 = and i32 %18, 1
  %tobool.not.i2 = icmp eq i32 %and.i.i1, 0
  br i1 %tobool.not.i2, label %do.end8.i5, label %if.then.i3, !prof !14

if.then.i3:                                       ; preds = %if.then16
  tail call void @dump_page(ptr noundef %slab, ptr noundef nonnull @.str.29) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slub.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 455, 0\0A.popsection", ""() #24, !srcloc !79
  unreachable

do.end8.i5:                                       ; preds = %if.then16
  %19 = load volatile i32, ptr %slab, align 4
  %and1.i.i.i4 = and i32 %19, 1
  %tobool.not.i.i = icmp eq i32 %and1.i.i.i4, 0
  br i1 %tobool.not.i.i, label %do.body4.i.i6, label %__slab_unlock.exit, !prof !13

do.body4.i.i6:                                    ; preds = %do.end8.i5
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/bit_spinlock.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 77, 0\0A.popsection", ""() #24, !srcloc !80
  unreachable

__slab_unlock.exit:                               ; preds = %do.end8.i5
  %20 = load volatile i32, ptr %slab, align 4
  %and.i.i.i.i7 = and i32 %20, -2
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #24, !srcloc !81
  store volatile i32 %and.i.i.i.i7, ptr %slab, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !82
  %21 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i.i.i8 = and i32 %21, -16384
  %22 = inttoptr i32 %and.i.i.i.i.i8 to ptr
  %preempt_count.i.i.i.i9 = getelementptr inbounds %struct.thread_info, ptr %22, i32 0, i32 1
  %23 = load volatile i32, ptr %preempt_count.i.i.i.i9, align 4
  %sub.i.i.i10 = add i32 %23, -1
  store volatile i32 %sub.i.i.i10, ptr %preempt_count.i.i.i.i9, align 4
  br i1 %tobool.not, label %if.then27, label %do.body29

if.then27:                                        ; preds = %__slab_unlock.exit
  tail call void @trace_hardirqs_on() #27
  br label %do.body29

do.body29:                                        ; preds = %if.then27, %__slab_unlock.exit
  %24 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ local_save_flags", "=r,~{memory},~{cc}"() #24, !srcloc !20
  %and.i.i24 = and i32 %24, 128
  %tobool37.not = icmp eq i32 %and.i.i24, 0
  br i1 %tobool37.not, label %if.then41, label %cleanup, !prof !13

if.then41:                                        ; preds = %do.body29
  tail call void @warn_bogus_irq_restore() #27
  br label %cleanup

if.end49:                                         ; preds = %land.lhs.true, %__slab_lock.exit
  %25 = load volatile i32, ptr %1, align 4
  %and.i.i11 = and i32 %25, 1
  %tobool.not.i12 = icmp eq i32 %and.i.i11, 0
  br i1 %tobool.not.i12, label %do.end8.i16, label %if.then.i13, !prof !14

if.then.i13:                                      ; preds = %if.end49
  tail call void @dump_page(ptr noundef %slab, ptr noundef nonnull @.str.29) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slub.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 455, 0\0A.popsection", ""() #24, !srcloc !79
  unreachable

do.end8.i16:                                      ; preds = %if.end49
  %26 = load volatile i32, ptr %slab, align 4
  %and1.i.i.i14 = and i32 %26, 1
  %tobool.not.i.i15 = icmp eq i32 %and1.i.i.i14, 0
  br i1 %tobool.not.i.i15, label %do.body4.i.i17, label %__slab_unlock.exit22, !prof !13

do.body4.i.i17:                                   ; preds = %do.end8.i16
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/bit_spinlock.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 77, 0\0A.popsection", ""() #24, !srcloc !80
  unreachable

__slab_unlock.exit22:                             ; preds = %do.end8.i16
  %27 = load volatile i32, ptr %slab, align 4
  %and.i.i.i.i18 = and i32 %27, -2
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #24, !srcloc !81
  store volatile i32 %and.i.i.i.i18, ptr %slab, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !82
  %28 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i.i.i19 = and i32 %28, -16384
  %29 = inttoptr i32 %and.i.i.i.i.i19 to ptr
  %preempt_count.i.i.i.i20 = getelementptr inbounds %struct.thread_info, ptr %29, i32 0, i32 1
  %30 = load volatile i32, ptr %preempt_count.i.i.i.i20, align 4
  %sub.i.i.i21 = add i32 %30, -1
  store volatile i32 %sub.i.i.i21, ptr %preempt_count.i.i.i.i20, align 4
  br i1 %tobool.not, label %if.then59, label %do.body61

if.then59:                                        ; preds = %__slab_unlock.exit22
  tail call void @trace_hardirqs_on() #27
  br label %do.body61

do.body61:                                        ; preds = %if.then59, %__slab_unlock.exit22
  %31 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ local_save_flags", "=r,~{memory},~{cc}"() #24, !srcloc !20
  %and.i.i26 = and i32 %31, 128
  %tobool69.not = icmp eq i32 %and.i.i26, 0
  br i1 %tobool69.not, label %if.then78, label %do.end90, !prof !13

if.then78:                                        ; preds = %do.body61
  tail call void @warn_bogus_irq_restore() #27
  br label %do.end90

cleanup:                                          ; preds = %if.then41, %do.body29
  tail call void asm sideeffect "\09msr\09cpsr_c, $0\09@ local_irq_restore", "r,~{memory},~{cc}"(i32 %0) #24, !srcloc !21
  br label %return

do.end90:                                         ; preds = %if.then78, %do.body61
  tail call void asm sideeffect "\09msr\09cpsr_c, $0\09@ local_irq_restore", "r,~{memory},~{cc}"(i32 %0) #24, !srcloc !21
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #24, !srcloc !83
  tail call void asm sideeffect "nop; nop; nop; nop; nop; nop; nop; nop; nop; nop;", ""() #24, !srcloc !84
  %32 = load ptr, ptr %s, align 4
  %arrayidx.i = getelementptr %struct.kmem_cache_cpu, ptr %32, i32 0, i32 5, i32 21
  %33 = ptrtoint ptr %arrayidx.i to i32
  %34 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i27 = and i32 %34, -16384
  %35 = inttoptr i32 %and.i.i27 to ptr
  %cpu.i = getelementptr inbounds %struct.thread_info, ptr %35, i32 0, i32 3
  %36 = load i32, ptr %cpu.i, align 4
  %arrayidx7.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %36
  %37 = load i32, ptr %arrayidx7.i, align 4
  %add.i = add i32 %37, %33
  %38 = inttoptr i32 %add.i to ptr
  %39 = load i32, ptr %38, align 4
  %add8.i = add i32 %39, 1
  store i32 %add8.i, ptr %38, align 4
  br label %return

return:                                           ; preds = %do.end90, %cleanup
  %cleanup.dest.slot.030 = phi i1 [ true, %cleanup ], [ false, %do.end90 ]
  ret i1 %cleanup.dest.slot.030
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc void @put_cpu_partial(ptr noundef %s, ptr noundef %slab, i32 noundef %drain) unnamed_addr #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ arch_local_irq_save\0A\09cpsid\09i", "=r,~{memory},~{cc}"() #24, !srcloc !19
  %and.i = and i32 %0, 128
  %tobool.not = icmp eq i32 %and.i, 0
  br i1 %tobool.not, label %if.then, label %do.body12

if.then:                                          ; preds = %entry
  tail call void @trace_hardirqs_off() #27
  br label %do.body12

do.body12:                                        ; preds = %if.then, %entry
  %1 = load ptr, ptr %s, align 4
  %lock = getelementptr inbounds %struct.kmem_cache_cpu, ptr %1, i32 0, i32 4
  %2 = ptrtoint ptr %lock to i32
  %3 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i186 = and i32 %3, -16384
  %4 = inttoptr i32 %and.i186 to ptr
  %cpu = getelementptr inbounds %struct.thread_info, ptr %4, i32 0, i32 3
  %5 = load i32, ptr %cpu, align 4
  %arrayidx = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %5
  %6 = load i32, ptr %arrayidx, align 4
  %add = add i32 %6, %2
  %7 = inttoptr i32 %add to ptr
  tail call fastcc void @local_lock_acquire(ptr noundef %7) #25
  %8 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i = and i32 %8, -16384
  %9 = inttoptr i32 %and.i.i.i to ptr
  %preempt_count.i.i = getelementptr inbounds %struct.thread_info, ptr %9, i32 0, i32 1
  %10 = load volatile i32, ptr %preempt_count.i.i, align 4
  %add.i = add i32 %10, 1
  store volatile i32 %add.i, ptr %preempt_count.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !85
  %11 = load ptr, ptr %s, align 4
  %partial = getelementptr inbounds %struct.kmem_cache_cpu, ptr %11, i32 0, i32 3
  %12 = ptrtoint ptr %partial to i32
  %13 = load i32, ptr %cpu, align 4
  %arrayidx41 = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %13
  %14 = load i32, ptr %arrayidx41, align 4
  %add42 = add i32 %14, %12
  %15 = inttoptr i32 %add42 to ptr
  %16 = load volatile ptr, ptr %15, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !86
  %17 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i184 = and i32 %17, -16384
  %18 = inttoptr i32 %and.i.i.i184 to ptr
  %preempt_count.i.i185 = getelementptr inbounds %struct.thread_info, ptr %18, i32 0, i32 1
  %19 = load volatile i32, ptr %preempt_count.i.i185, align 4
  %sub.i = add i32 %19, -1
  store volatile i32 %sub.i, ptr %preempt_count.i.i185, align 4
  %tobool49.not = icmp eq ptr %16, null
  br i1 %tobool49.not, label %if.end58, label %if.then50

if.then50:                                        ; preds = %do.body12
  %tobool51.not = icmp eq i32 %drain, 0
  %slabs56.phi.trans.insert = getelementptr inbounds %struct.slab, ptr %16, i32 0, i32 1, i32 0, i32 1
  %.pre = load i32, ptr %slabs56.phi.trans.insert, align 4
  br i1 %tobool51.not, label %if.else, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.then50
  %cpu_partial_slabs = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 8
  %20 = load i32, ptr %cpu_partial_slabs, align 4
  %cmp53.not = icmp ult i32 %.pre, %20
  br i1 %cmp53.not, label %if.else, label %if.end58

if.else:                                          ; preds = %land.lhs.true, %if.then50
  %phi.bo = add i32 %.pre, 1
  br label %if.end58

if.end58:                                         ; preds = %if.else, %land.lhs.true, %do.body12
  %slabs.0 = phi i32 [ %phi.bo, %if.else ], [ 1, %do.body12 ], [ 1, %land.lhs.true ]
  %slab_to_unfreeze.0 = phi ptr [ null, %if.else ], [ null, %do.body12 ], [ %16, %land.lhs.true ]
  %oldslab.0 = phi ptr [ %16, %if.else ], [ null, %do.body12 ], [ null, %land.lhs.true ]
  %21 = getelementptr inbounds %struct.slab, ptr %slab, i32 0, i32 1
  %slabs59 = getelementptr inbounds %struct.slab, ptr %slab, i32 0, i32 1, i32 0, i32 1
  store i32 %slabs.0, ptr %slabs59, align 4
  store ptr %oldslab.0, ptr %21, align 4
  %22 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ arch_local_irq_save\0A\09cpsid\09i", "=r,~{memory},~{cc}"() #24, !srcloc !19
  %23 = load ptr, ptr %s, align 4
  %partial83 = getelementptr inbounds %struct.kmem_cache_cpu, ptr %23, i32 0, i32 3
  %24 = ptrtoint ptr %partial83 to i32
  %25 = load i32, ptr %cpu, align 4
  %arrayidx87 = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %25
  %26 = load i32, ptr %arrayidx87, align 4
  %add88 = add i32 %26, %24
  %27 = inttoptr i32 %add88 to ptr
  store ptr %slab, ptr %27, align 4
  %28 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ local_save_flags", "=r,~{memory},~{cc}"() #24, !srcloc !20
  %and.i.i = and i32 %28, 128
  %tobool99.not = icmp eq i32 %and.i.i, 0
  br i1 %tobool99.not, label %if.then103, label %do.end106, !prof !13

if.then103:                                       ; preds = %if.end58
  tail call void @warn_bogus_irq_restore() #27
  br label %do.end106

do.end106:                                        ; preds = %if.then103, %if.end58
  tail call void asm sideeffect "\09msr\09cpsr_c, $0\09@ local_irq_restore", "r,~{memory},~{cc}"(i32 %22) #24, !srcloc !21
  %29 = load ptr, ptr %s, align 4
  %lock121 = getelementptr inbounds %struct.kmem_cache_cpu, ptr %29, i32 0, i32 4
  %30 = ptrtoint ptr %lock121 to i32
  %31 = load i32, ptr %cpu, align 4
  %arrayidx125 = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %31
  %32 = load i32, ptr %arrayidx125, align 4
  %add126 = add i32 %32, %30
  %33 = inttoptr i32 %add126 to ptr
  tail call fastcc void @local_lock_release(ptr noundef %33) #25
  br i1 %tobool.not, label %if.then136, label %do.body138

if.then136:                                       ; preds = %do.end106
  tail call void @trace_hardirqs_on() #27
  br label %do.body138

do.body138:                                       ; preds = %if.then136, %do.end106
  %34 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ local_save_flags", "=r,~{memory},~{cc}"() #24, !srcloc !20
  %and.i.i188 = and i32 %34, 128
  %tobool146.not = icmp eq i32 %and.i.i188, 0
  br i1 %tobool146.not, label %if.then155, label %do.end158, !prof !13

if.then155:                                       ; preds = %do.body138
  tail call void @warn_bogus_irq_restore() #27
  br label %do.end158

do.end158:                                        ; preds = %if.then155, %do.body138
  tail call void asm sideeffect "\09msr\09cpsr_c, $0\09@ local_irq_restore", "r,~{memory},~{cc}"(i32 %0) #24, !srcloc !21
  %tobool165.not = icmp eq ptr %slab_to_unfreeze.0, null
  br i1 %tobool165.not, label %if.end167, label %if.then166

if.then166:                                       ; preds = %do.end158
  tail call fastcc void @__unfreeze_partials(ptr noundef %s, ptr noundef nonnull %slab_to_unfreeze.0) #25
  %35 = load ptr, ptr %s, align 4
  %arrayidx.i = getelementptr %struct.kmem_cache_cpu, ptr %35, i32 0, i32 5, i32 25
  %36 = ptrtoint ptr %arrayidx.i to i32
  %37 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i189 = and i32 %37, -16384
  %38 = inttoptr i32 %and.i.i189 to ptr
  %cpu.i = getelementptr inbounds %struct.thread_info, ptr %38, i32 0, i32 3
  %39 = load i32, ptr %cpu.i, align 4
  %arrayidx7.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %39
  %40 = load i32, ptr %arrayidx7.i, align 4
  %add.i190 = add i32 %40, %36
  %41 = inttoptr i32 %add.i190 to ptr
  %42 = load i32, ptr %41, align 4
  %add8.i = add i32 %42, 1
  store i32 %add8.i, ptr %41, align 4
  br label %if.end167

if.end167:                                        ; preds = %if.then166, %do.end158
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc void @remove_full(ptr nocapture noundef readonly %s, ptr noundef %n, ptr noundef %slab) unnamed_addr #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %flags = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 1
  %0 = load i32, ptr %flags, align 4
  %and = and i32 %0, 65536
  %tobool.not = icmp eq i32 %and, 0
  br i1 %tobool.not, label %return, label %do.body

do.body:                                          ; preds = %entry
  %1 = load i32, ptr @debug_locks, align 4
  %tobool1.not = icmp eq i32 %1, 0
  br i1 %tobool1.not, label %if.end18, label %land.rhs

land.rhs:                                         ; preds = %do.body
  %dep_map = getelementptr inbounds %struct.anon.15, ptr %n, i32 0, i32 1
  %call.i = tail call i32 @lock_is_held_type(ptr noundef %dep_map, i32 noundef -1) #27
  %cmp.not = icmp eq i32 %call.i, 0
  br i1 %cmp.not, label %do.end, label %if.end18, !prof !13

do.end:                                           ; preds = %land.rhs
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.2, i32 noundef 1230, i32 noundef 9, ptr noundef null) #27
  br label %if.end18

if.end18:                                         ; preds = %do.end, %land.rhs, %do.body
  %2 = getelementptr inbounds %struct.slab, ptr %slab, i32 0, i32 1
  %call.i.i = tail call zeroext i1 @__list_del_entry_valid(ptr noundef %2) #27
  br i1 %call.i.i, label %if.end.i.i, label %list_del.exit

if.end.i.i:                                       ; preds = %if.end18
  %prev.i.i = getelementptr inbounds %struct.slab, ptr %slab, i32 0, i32 1, i32 0, i32 1
  %3 = load ptr, ptr %prev.i.i, align 4
  %4 = load ptr, ptr %2, align 4
  %prev1.i.i.i = getelementptr inbounds %struct.list_head, ptr %4, i32 0, i32 1
  store ptr %3, ptr %prev1.i.i.i, align 4
  store volatile ptr %4, ptr %3, align 4
  br label %list_del.exit

list_del.exit:                                    ; preds = %if.end.i.i, %if.end18
  store ptr inttoptr (i32 256 to ptr), ptr %2, align 4
  %prev.i = getelementptr inbounds %struct.slab, ptr %slab, i32 0, i32 1, i32 0, i32 1
  store ptr inttoptr (i32 290 to ptr), ptr %prev.i, align 4
  br label %return

return:                                           ; preds = %list_del.exit, %entry
  ret void
}

; Function Attrs: inlinehint nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc void @add_partial(ptr noundef %n, ptr noundef %slab, i32 noundef %tail) unnamed_addr #5 align 64 {
entry:
  %0 = load i32, ptr @debug_locks, align 4
  %tobool.not = icmp eq i32 %0, 0
  br i1 %tobool.not, label %if.end, label %land.rhs

land.rhs:                                         ; preds = %entry
  %dep_map = getelementptr inbounds %struct.anon.15, ptr %n, i32 0, i32 1
  %call.i = tail call i32 @lock_is_held_type(ptr noundef %dep_map, i32 noundef -1) #27
  %cmp.not = icmp eq i32 %call.i, 0
  br i1 %cmp.not, label %do.end, label %if.end, !prof !13

do.end:                                           ; preds = %land.rhs
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.2, i32 noundef 2068, i32 noundef 9, ptr noundef null) #27
  br label %if.end

if.end:                                           ; preds = %do.end, %land.rhs, %entry
  %nr_partial.i = getelementptr inbounds %struct.kmem_cache_node, ptr %n, i32 0, i32 1
  %1 = load i32, ptr %nr_partial.i, align 4
  %inc.i = add i32 %1, 1
  store i32 %inc.i, ptr %nr_partial.i, align 4
  %cmp.i = icmp eq i32 %tail, 16
  %2 = getelementptr inbounds %struct.slab, ptr %slab, i32 0, i32 1
  %partial.i = getelementptr inbounds %struct.kmem_cache_node, ptr %n, i32 0, i32 2
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.end
  %prev.i.i = getelementptr inbounds %struct.kmem_cache_node, ptr %n, i32 0, i32 2, i32 1
  %3 = load ptr, ptr %prev.i.i, align 4
  %call.i.i.i = tail call zeroext i1 @__list_add_valid(ptr noundef %2, ptr noundef %3, ptr noundef %partial.i) #27
  br i1 %call.i.i.i, label %if.end.sink.split.i, label %__add_partial.exit

if.else.i:                                        ; preds = %if.end
  %4 = load ptr, ptr %partial.i, align 4
  %call.i.i5.i = tail call zeroext i1 @__list_add_valid(ptr noundef %2, ptr noundef %partial.i, ptr noundef %4) #27
  br i1 %call.i.i5.i, label %if.end.i.i7.i, label %__add_partial.exit

if.end.i.i7.i:                                    ; preds = %if.else.i
  %prev1.i.i.i = getelementptr inbounds %struct.list_head, ptr %4, i32 0, i32 1
  br label %if.end.sink.split.i

if.end.sink.split.i:                              ; preds = %if.end.i.i7.i, %if.then.i
  %prev1.i.i.sink.i = phi ptr [ %prev1.i.i.i, %if.end.i.i7.i ], [ %prev.i.i, %if.then.i ]
  %.sink.i = phi ptr [ %4, %if.end.i.i7.i ], [ %partial.i, %if.then.i ]
  %partial.sink8.i = phi ptr [ %partial.i, %if.end.i.i7.i ], [ %3, %if.then.i ]
  store ptr %2, ptr %prev1.i.i.sink.i, align 4
  store ptr %.sink.i, ptr %2, align 4
  %prev3.i.i6.i = getelementptr inbounds %struct.slab, ptr %slab, i32 0, i32 1, i32 0, i32 1
  store ptr %partial.sink8.i, ptr %prev3.i.i6.i, align 4
  store volatile ptr %2, ptr %partial.sink8.i, align 4
  br label %__add_partial.exit

__add_partial.exit:                               ; preds = %if.end.sink.split.i, %if.else.i, %if.then.i
  ret void
}

; Function Attrs: inlinehint nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc void @remove_partial(ptr noundef %n, ptr noundef %slab) unnamed_addr #5 align 64 {
entry:
  %0 = load i32, ptr @debug_locks, align 4
  %tobool.not = icmp eq i32 %0, 0
  br i1 %tobool.not, label %if.end, label %land.rhs

land.rhs:                                         ; preds = %entry
  %dep_map = getelementptr inbounds %struct.anon.15, ptr %n, i32 0, i32 1
  %call.i = tail call i32 @lock_is_held_type(ptr noundef %dep_map, i32 noundef -1) #27
  %cmp.not = icmp eq i32 %call.i, 0
  br i1 %cmp.not, label %do.end, label %if.end, !prof !13

do.end:                                           ; preds = %land.rhs
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.2, i32 noundef 2075, i32 noundef 9, ptr noundef null) #27
  br label %if.end

if.end:                                           ; preds = %do.end, %land.rhs, %entry
  %1 = getelementptr inbounds %struct.slab, ptr %slab, i32 0, i32 1
  %call.i.i = tail call zeroext i1 @__list_del_entry_valid(ptr noundef %1) #27
  br i1 %call.i.i, label %if.end.i.i, label %list_del.exit

if.end.i.i:                                       ; preds = %if.end
  %prev.i.i = getelementptr inbounds %struct.slab, ptr %slab, i32 0, i32 1, i32 0, i32 1
  %2 = load ptr, ptr %prev.i.i, align 4
  %3 = load ptr, ptr %1, align 4
  %prev1.i.i.i = getelementptr inbounds %struct.list_head, ptr %3, i32 0, i32 1
  store ptr %2, ptr %prev1.i.i.i, align 4
  store volatile ptr %3, ptr %2, align 4
  br label %list_del.exit

list_del.exit:                                    ; preds = %if.end.i.i, %if.end
  store ptr inttoptr (i32 256 to ptr), ptr %1, align 4
  %prev.i = getelementptr inbounds %struct.slab, ptr %slab, i32 0, i32 1, i32 0, i32 1
  store ptr inttoptr (i32 290 to ptr), ptr %prev.i, align 4
  %nr_partial = getelementptr inbounds %struct.kmem_cache_node, ptr %n, i32 0, i32 1
  %4 = load i32, ptr %nr_partial, align 4
  %dec = add i32 %4, -1
  store i32 %dec, ptr %nr_partial, align 4
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc void @discard_slab(ptr noundef %s, ptr noundef %slab) unnamed_addr #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load volatile i32, ptr %slab, align 4
  %cmp.i.not.i.i.i = icmp eq i32 %0, -1
  br i1 %cmp.i.not.i.i.i, label %if.then.i.i.i, label %slab_nid.exit, !prof !13

if.then.i.i.i:                                    ; preds = %entry
  tail call void @dump_page(ptr noundef %slab, ptr noundef nonnull @.str.88) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/mm.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 1368, 0\0A.popsection", ""() #24, !srcloc !37
  unreachable

slab_nid.exit:                                    ; preds = %entry
  %1 = getelementptr inbounds %struct.slab, ptr %slab, i32 0, i32 4
  %bf.load = load i32, ptr %1, align 4
  %bf.lshr = lshr i32 %bf.load, 1
  %bf.clear = and i32 %bf.lshr, 32767
  %arrayidx.i.i = getelementptr %struct.kmem_cache, ptr %s, i32 0, i32 26, i32 0
  %2 = load ptr, ptr %arrayidx.i.i, align 4
  %nr_slabs.i = getelementptr inbounds %struct.kmem_cache_node, ptr %2, i32 0, i32 3
  tail call void @llvm.prefetch.p0(ptr %nr_slabs.i, i32 1, i32 3, i32 1) #24
  %3 = tail call { i32, i32 } asm sideeffect "@ atomic_sub\0A1:\09ldrex\09$0, [$3]\0A\09sub\09$0, $0, $4\0A\09strex\09$1, $0, [$3]\0A\09teq\09$1, #0\0A\09bne\091b", "=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %nr_slabs.i, ptr %nr_slabs.i, i32 1, ptr elementtype(i32) %nr_slabs.i) #24, !srcloc !48
  %total_objects.i = getelementptr inbounds %struct.kmem_cache_node, ptr %2, i32 0, i32 4
  tail call void @llvm.prefetch.p0(ptr %total_objects.i, i32 1, i32 3, i32 1) #24
  %4 = tail call { i32, i32 } asm sideeffect "@ atomic_sub\0A1:\09ldrex\09$0, [$3]\0A\09sub\09$0, $0, $4\0A\09strex\09$1, $0, [$3]\0A\09teq\09$1, #0\0A\09bne\091b", "=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %total_objects.i, ptr %total_objects.i, i32 %bf.clear, ptr elementtype(i32) %total_objects.i) #24, !srcloc !48
  %flags.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 1
  %5 = load i32, ptr %flags.i, align 4
  %and.i = and i32 %5, 524288
  %tobool.not.i = icmp eq i32 %and.i, 0
  br i1 %tobool.not.i, label %if.else.i, label %if.then.i, !prof !14

if.then.i:                                        ; preds = %slab_nid.exit
  %6 = getelementptr inbounds %struct.slab, ptr %slab, i32 0, i32 1
  tail call void @call_rcu(ptr noundef %6, ptr noundef nonnull @rcu_free_slab) #27
  br label %free_slab.exit

if.else.i:                                        ; preds = %slab_nid.exit
  tail call fastcc void @__free_slab(ptr noundef %s, ptr noundef %slab) #27
  br label %free_slab.exit

free_slab.exit:                                   ; preds = %if.else.i, %if.then.i
  ret void
}

; Function Attrs: null_pointer_is_valid
declare dso_local void @__kfence_free(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc i32 @check_slab(ptr nocapture noundef readonly %s, ptr noundef %slab) unnamed_addr #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = getelementptr inbounds %struct.page, ptr %slab, i32 0, i32 1
  %1 = load volatile i32, ptr %0, align 4
  %and.i.i.i = and i32 %1, 1
  %tobool.not.i.i = icmp eq i32 %and.i.i.i, 0
  br i1 %tobool.not.i.i, label %folio_test_slab.exit, label %if.then.i.i, !prof !14

if.then.i.i:                                      ; preds = %entry
  tail call void @dump_page(ptr noundef %slab, ptr noundef nonnull @.str.29) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 260, 0\0A.popsection", ""() #24, !srcloc !28
  unreachable

folio_test_slab.exit:                             ; preds = %entry
  %2 = load volatile i32, ptr %slab, align 4
  %3 = and i32 %2, 512
  %tobool.i.not = icmp eq i32 %3, 0
  br i1 %tobool.i.not, label %if.then, label %if.end

if.then:                                          ; preds = %folio_test_slab.exit
  tail call void (ptr, ptr, ptr, ...) @slab_err(ptr noundef %s, ptr noundef %slab, ptr noundef nonnull @.str.30) #25
  br label %cleanup

if.end:                                           ; preds = %folio_test_slab.exit
  %4 = load volatile i32, ptr %slab, align 4
  %cmp.i.not.i.i.i.i = icmp eq i32 %4, -1
  br i1 %cmp.i.not.i.i.i.i, label %if.then.i.i.i.i, label %PageHead.exit.i.i.i, !prof !13

if.then.i.i.i.i:                                  ; preds = %if.end
  tail call void @dump_page(ptr noundef %slab, ptr noundef nonnull @.str.33) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 698, 0\0A.popsection", ""() #24, !srcloc !51
  unreachable

PageHead.exit.i.i.i:                              ; preds = %if.end
  %5 = load volatile i32, ptr %slab, align 4
  %6 = and i32 %5, 65536
  %tobool.not.i.i.i = icmp eq i32 %6, 0
  br i1 %tobool.not.i.i.i, label %slab_order.exit, label %if.end.i.i.i

if.end.i.i.i:                                     ; preds = %PageHead.exit.i.i.i
  %7 = getelementptr %struct.page, ptr %slab, i32 1, i32 1
  %compound_order.i.i.i = getelementptr inbounds %struct.anon.47, ptr %7, i32 0, i32 2
  %8 = load i8, ptr %compound_order.i.i.i, align 1
  %conv.i.i.i = zext i8 %8 to i32
  br label %slab_order.exit

slab_order.exit:                                  ; preds = %if.end.i.i.i, %PageHead.exit.i.i.i
  %retval.0.i.i.i = phi i32 [ %conv.i.i.i, %if.end.i.i.i ], [ 0, %PageHead.exit.i.i.i ]
  %size = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 3
  %9 = load i32, ptr %size, align 4
  %shl.i = shl i32 4096, %retval.0.i.i.i
  %div.i = udiv i32 %shl.i, %9
  %10 = getelementptr inbounds %struct.slab, ptr %slab, i32 0, i32 4
  %bf.load = load i32, ptr %10, align 4
  %bf.lshr = lshr i32 %bf.load, 1
  %bf.clear = and i32 %bf.lshr, 32767
  %cmp = icmp sgt i32 %bf.clear, %div.i
  br i1 %cmp, label %if.then3, label %if.end7

if.then3:                                         ; preds = %slab_order.exit
  tail call void (ptr, ptr, ptr, ...) @slab_err(ptr noundef %s, ptr noundef %slab, ptr noundef nonnull @.str.31, i32 noundef %bf.clear, i32 noundef %div.i) #25
  br label %cleanup

if.end7:                                          ; preds = %slab_order.exit
  %bf.lshr9 = lshr i32 %bf.load, 16
  %cmp13 = icmp ugt i32 %bf.lshr9, %bf.clear
  br i1 %cmp13, label %if.then14, label %if.end20

if.then14:                                        ; preds = %if.end7
  tail call void (ptr, ptr, ptr, ...) @slab_err(ptr noundef %s, ptr noundef %slab, ptr noundef nonnull @.str.32, i32 noundef %bf.lshr9, i32 noundef %bf.clear) #25
  br label %cleanup

if.end20:                                         ; preds = %if.end7
  tail call fastcc void @slab_pad_check(ptr noundef %s, ptr noundef %slab) #25
  br label %cleanup

cleanup:                                          ; preds = %if.end20, %if.then14, %if.then3, %if.then
  %retval.0 = phi i32 [ 0, %if.then3 ], [ 0, %if.then14 ], [ 1, %if.end20 ], [ 0, %if.then ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal void @slab_err(ptr nocapture noundef readonly %s, ptr noundef %slab, ptr noundef %fmt, ...) unnamed_addr #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %args = alloca %struct.__va_list, align 4
  %buf = alloca [100 x i8], align 1
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %args) #24
  store ptr inttoptr (i32 -1 to ptr), ptr %args, align 4, !annotation !11
  call void @llvm.lifetime.start.p0(i64 100, ptr nonnull %buf) #24
  call void @llvm.memset.p0.i32(ptr noundef nonnull align 1 dereferenceable(100) %buf, i8 -1, i32 100, i1 false), !annotation !11
  %0 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i = and i32 %0, -16384
  %1 = inttoptr i32 %and.i.i to ptr
  %task.i = getelementptr inbounds %struct.thread_info, ptr %1, i32 0, i32 2
  %2 = load ptr, ptr %task.i, align 8
  %kunit_test.i = getelementptr inbounds %struct.task_struct, ptr %2, i32 0, i32 192
  %3 = load ptr, ptr %kunit_test.i, align 4
  %tobool.not.i = icmp eq ptr %3, null
  br i1 %tobool.not.i, label %if.end, label %if.end.i, !prof !14

if.end.i:                                         ; preds = %entry
  %call7.i = tail call fastcc ptr @kunit_find_named_resource(ptr noundef nonnull %3) #27
  %tobool8.not.i = icmp eq ptr %call7.i, null
  br i1 %tobool8.not.i, label %if.end, label %slab_add_kunit_errors.exit

slab_add_kunit_errors.exit:                       ; preds = %if.end.i
  %4 = load ptr, ptr %call7.i, align 4
  %5 = load i32, ptr %4, align 4
  %inc.i = add i32 %5, 1
  store i32 %inc.i, ptr %4, align 4
  tail call fastcc void @kunit_put_resource(ptr noundef nonnull %call7.i) #27
  br label %cleanup

if.end:                                           ; preds = %if.end.i, %entry
  call void @llvm.va_start(ptr nonnull %args)
  %.fca.0.load = load i32, ptr %args, align 4
  %.fca.0.insert = insertvalue [1 x i32] poison, i32 %.fca.0.load, 0
  %call1 = call i32 @vsnprintf(ptr noundef nonnull %buf, i32 noundef 100, ptr noundef %fmt, [1 x i32] %.fca.0.insert) #27
  call void @llvm.va_end(ptr nonnull %args)
  call void (ptr, ptr, ...) @slab_bug(ptr noundef %s, ptr noundef nonnull @.str.52, ptr noundef nonnull %buf) #25
  %6 = getelementptr inbounds %struct.slab, ptr %slab, i32 0, i32 4
  %bf.load.i = load i32, ptr %6, align 4
  %freelist.i = getelementptr inbounds %struct.slab, ptr %slab, i32 0, i32 3
  %7 = load ptr, ptr %freelist.i, align 4
  %8 = getelementptr inbounds %struct.page, ptr %slab, i32 0, i32 1
  %9 = load volatile i32, ptr %8, align 4
  %and.i.i.i = and i32 %9, 1
  %tobool.not.i.i = icmp eq i32 %and.i.i.i, 0
  br i1 %tobool.not.i.i, label %print_slab_info.exit, label %if.then.i.i, !prof !14

if.then.i.i:                                      ; preds = %if.end
  call void @dump_page(ptr noundef %slab, ptr noundef nonnull @.str.29) #27
  call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 260, 0\0A.popsection", ""() #24, !srcloc !28
  unreachable

print_slab_info.exit:                             ; preds = %if.end
  %bf.lshr2.i = lshr i32 %bf.load.i, 16
  %bf.lshr.i = lshr i32 %bf.load.i, 1
  %bf.clear.i = and i32 %bf.lshr.i, 32767
  %call3.i = call i32 (ptr, ...) @_printk(ptr noundef nonnull @.str.68, ptr noundef %slab, i32 noundef %bf.clear.i, i32 noundef %bf.lshr2.i, ptr noundef %7, ptr noundef %slab) #26
  call void @dump_stack() #26
  call void @add_taint(i32 noundef 5, i32 noundef 1) #27
  br label %cleanup

cleanup:                                          ; preds = %print_slab_info.exit, %slab_add_kunit_errors.exit
  call void @llvm.lifetime.end.p0(i64 100, ptr nonnull %buf) #24
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %args) #24
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal void @slab_fix(ptr nocapture noundef readonly %s, ptr noundef %fmt, ...) unnamed_addr #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %vaf = alloca %struct.va_format, align 4
  %args = alloca %struct.__va_list, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %vaf) #24
  %0 = getelementptr inbounds %struct.va_format, ptr %vaf, i32 0, i32 1
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %args) #24
  store ptr inttoptr (i32 -1 to ptr), ptr %args, align 4, !annotation !11
  %1 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i = and i32 %1, -16384
  %2 = inttoptr i32 %and.i.i to ptr
  %task.i = getelementptr inbounds %struct.thread_info, ptr %2, i32 0, i32 2
  %3 = load ptr, ptr %task.i, align 8
  %kunit_test.i = getelementptr inbounds %struct.task_struct, ptr %3, i32 0, i32 192
  %4 = load ptr, ptr %kunit_test.i, align 4
  %tobool.not.i = icmp eq ptr %4, null
  br i1 %tobool.not.i, label %if.end, label %if.end.i, !prof !14

if.end.i:                                         ; preds = %entry
  %call7.i = tail call fastcc ptr @kunit_find_named_resource(ptr noundef nonnull %4) #27
  %tobool8.not.i = icmp eq ptr %call7.i, null
  br i1 %tobool8.not.i, label %if.end, label %slab_add_kunit_errors.exit

slab_add_kunit_errors.exit:                       ; preds = %if.end.i
  %5 = load ptr, ptr %call7.i, align 4
  %6 = load i32, ptr %5, align 4
  %inc.i = add i32 %6, 1
  store i32 %inc.i, ptr %5, align 4
  tail call fastcc void @kunit_put_resource(ptr noundef nonnull %call7.i) #27
  br label %cleanup

if.end:                                           ; preds = %if.end.i, %entry
  call void @llvm.va_start(ptr nonnull %args)
  store ptr %fmt, ptr %vaf, align 4
  store ptr %args, ptr %0, align 4
  %name = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 18
  %7 = load ptr, ptr %name, align 4
  %call2 = call i32 (ptr, ...) @_printk(ptr noundef nonnull @.str.86, ptr noundef %7, ptr noundef nonnull %vaf) #26
  call void @llvm.va_end(ptr nonnull %args)
  br label %cleanup

cleanup:                                          ; preds = %if.end, %slab_add_kunit_errors.exit
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %args) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %vaf) #24
  ret void
}

; Function Attrs: null_pointer_is_valid
declare dso_local void @dump_page(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc void @slab_pad_check(ptr nocapture noundef readonly %s, ptr noundef %slab) unnamed_addr #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %flags = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 1
  %0 = load i32, ptr %flags, align 4
  %and = and i32 %0, 2048
  %tobool.not = icmp eq i32 %and, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %call.i.i = tail call ptr @page_address(ptr noundef %slab) #27
  %1 = load volatile i32, ptr %slab, align 4
  %cmp.i.not.i.i.i.i.i = icmp eq i32 %1, -1
  br i1 %cmp.i.not.i.i.i.i.i, label %if.then.i.i.i.i.i, label %PageHead.exit.i.i.i.i, !prof !13

if.then.i.i.i.i.i:                                ; preds = %if.end
  tail call void @dump_page(ptr noundef %slab, ptr noundef nonnull @.str.33) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 698, 0\0A.popsection", ""() #24, !srcloc !51
  unreachable

PageHead.exit.i.i.i.i:                            ; preds = %if.end
  %2 = load volatile i32, ptr %slab, align 4
  %3 = and i32 %2, 65536
  %tobool.not.i.i.i.i = icmp eq i32 %3, 0
  br i1 %tobool.not.i.i.i.i, label %slab_size.exit, label %if.end.i.i.i.i

if.end.i.i.i.i:                                   ; preds = %PageHead.exit.i.i.i.i
  %4 = getelementptr %struct.page, ptr %slab, i32 1, i32 1
  %compound_order.i.i.i.i = getelementptr inbounds %struct.anon.47, ptr %4, i32 0, i32 2
  %5 = load i8, ptr %compound_order.i.i.i.i, align 1
  %conv.i.i.i.i = zext i8 %5 to i32
  br label %slab_size.exit

slab_size.exit:                                   ; preds = %if.end.i.i.i.i, %PageHead.exit.i.i.i.i
  %retval.0.i.i.i.i = phi i32 [ %conv.i.i.i.i, %if.end.i.i.i.i ], [ 0, %PageHead.exit.i.i.i.i ]
  %shl.i = shl i32 4096, %retval.0.i.i.i.i
  %size = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 3
  %6 = load i32, ptr %size, align 4
  %rem = urem i32 %shl.i, %6
  %tobool2.not = icmp eq i32 %rem, 0
  br i1 %tobool2.not, label %cleanup, label %if.end4

if.end4:                                          ; preds = %slab_size.exit
  %add.ptr = getelementptr i8, ptr %call.i.i, i32 %shl.i
  %idx.neg = sub i32 0, %rem
  %add.ptr5 = getelementptr i8, ptr %add.ptr, i32 %idx.neg
  tail call void @kasan_disable_current() #27
  %call7 = tail call ptr @memchr_inv(ptr noundef %add.ptr5, i32 noundef 90, i32 noundef %rem) #27
  tail call void @kasan_enable_current() #27
  %tobool8.not = icmp eq ptr %call7, null
  br i1 %tobool8.not, label %cleanup, label %while.cond

while.cond:                                       ; preds = %land.rhs, %if.end4
  %end.0 = phi ptr [ %arrayidx, %land.rhs ], [ %add.ptr, %if.end4 ]
  %cmp = icmp ugt ptr %end.0, %call7
  br i1 %cmp, label %land.rhs, label %while.end

land.rhs:                                         ; preds = %while.cond
  %arrayidx = getelementptr i8, ptr %end.0, i32 -1
  %7 = load i8, ptr %arrayidx, align 1
  %cmp11 = icmp eq i8 %7, 90
  br i1 %cmp11, label %while.cond, label %while.end

while.end:                                        ; preds = %land.rhs, %while.cond
  %add.ptr13 = getelementptr i8, ptr %end.0, i32 -1
  %sub.ptr.lhs.cast = ptrtoint ptr %call7 to i32
  %sub.ptr.rhs.cast = ptrtoint ptr %call.i.i to i32
  %sub.ptr.sub = sub i32 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  tail call void (ptr, ptr, ptr, ...) @slab_err(ptr noundef %s, ptr noundef %slab, ptr noundef nonnull @.str.34, ptr noundef nonnull %call7, ptr noundef %add.ptr13, i32 noundef %sub.ptr.sub) #25
  tail call void @kasan_disable_current() #27
  tail call void @print_hex_dump(ptr noundef nonnull @.str.35, ptr noundef nonnull @.str.36, i32 noundef 1, i32 noundef 16, i32 noundef 1, ptr noundef %add.ptr5, i32 noundef %rem, i1 noundef zeroext true) #27
  tail call void @kasan_enable_current() #27
  tail call void (ptr, ptr, ...) @slab_fix(ptr noundef %s, ptr noundef nonnull @.str.38, ptr noundef nonnull @.str.37, ptr noundef nonnull %call7, ptr noundef %add.ptr13, i32 noundef 90) #27
  %sub.ptr.lhs.cast.i = ptrtoint ptr %end.0 to i32
  %sub.ptr.sub.i = sub i32 %sub.ptr.lhs.cast.i, %sub.ptr.lhs.cast
  %call.i = tail call ptr @__memset(ptr noundef nonnull %call7, i32 noundef 90, i32 noundef %sub.ptr.sub.i) #27
  br label %cleanup

cleanup:                                          ; preds = %while.end, %if.end4, %slab_size.exit, %entry
  ret void
}

; Function Attrs: null_pointer_is_valid
declare dso_local ptr @memchr_inv(ptr noundef, i32 noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local void @kasan_disable_current() local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local void @kasan_enable_current() local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local void @print_hex_dump(ptr noundef, ptr noundef, i32 noundef, i32 noundef, i32 noundef, ptr noundef, i32 noundef, i1 noundef zeroext) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local ptr @__memset(ptr noundef, i32 noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc i32 @on_freelist(ptr noundef %s, ptr noundef %slab, ptr noundef readnone %search) unnamed_addr #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %freelist = getelementptr inbounds %struct.slab, ptr %slab, i32 0, i32 3
  %0 = load ptr, ptr %freelist, align 4
  %tobool.not118 = icmp eq ptr %0, null
  br i1 %tobool.not118, label %while.end, label %land.rhs.lr.ph

land.rhs.lr.ph:                                   ; preds = %entry
  %1 = getelementptr inbounds %struct.slab, ptr %slab, i32 0, i32 4
  %flags.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 1
  %red_left_pad.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 17
  %size.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 3
  %offset.i107 = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 6
  %random.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 21
  %bf.load.pre = load i32, ptr %1, align 4
  br label %land.rhs

land.rhs:                                         ; preds = %if.end13, %land.rhs.lr.ph
  %bf.load = phi i32 [ %bf.load.pre, %land.rhs.lr.ph ], [ %bf.load.i, %if.end13 ]
  %object.0121 = phi ptr [ null, %land.rhs.lr.ph ], [ %fp.0120, %if.end13 ]
  %fp.0120 = phi ptr [ %0, %land.rhs.lr.ph ], [ %23, %if.end13 ]
  %nr.0119 = phi i32 [ 0, %land.rhs.lr.ph ], [ %inc, %if.end13 ]
  %bf.lshr = lshr i32 %bf.load, 1
  %bf.clear = and i32 %bf.lshr, 32767
  %cmp.not = icmp ugt i32 %nr.0119, %bf.clear
  br i1 %cmp.not, label %while.end, label %while.body

while.body:                                       ; preds = %land.rhs
  %cmp1 = icmp eq ptr %fp.0120, %search
  br i1 %cmp1, label %cleanup, label %if.end.i

if.end.i:                                         ; preds = %while.body
  %call.i.i.i = tail call ptr @page_address(ptr noundef %slab) #27
  %2 = load i32, ptr %flags.i.i, align 4
  %and.i.i = and i32 %2, 1024
  %tobool.not.i.i = icmp eq i32 %and.i.i, 0
  br i1 %tobool.not.i.i, label %restore_red_left.exit.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.end.i
  %3 = load i32, ptr %red_left_pad.i.i, align 4
  %idx.neg.i.i = sub i32 0, %3
  %add.ptr.i.i = getelementptr i8, ptr %fp.0120, i32 %idx.neg.i.i
  br label %restore_red_left.exit.i

restore_red_left.exit.i:                          ; preds = %if.then.i.i, %if.end.i
  %p.addr.0.i.i = phi ptr [ %add.ptr.i.i, %if.then.i.i ], [ %fp.0120, %if.end.i ]
  %cmp.i = icmp ult ptr %p.addr.0.i.i, %call.i.i.i
  br i1 %cmp.i, label %if.then3, label %lor.lhs.false.i

lor.lhs.false.i:                                  ; preds = %restore_red_left.exit.i
  %bf.load.i = load i32, ptr %1, align 4
  %bf.lshr.i = lshr i32 %bf.load.i, 1
  %bf.clear.i = and i32 %bf.lshr.i, 32767
  %4 = load i32, ptr %size.i, align 4
  %mul.i = mul i32 %bf.clear.i, %4
  %add.ptr.i = getelementptr i8, ptr %call.i.i.i, i32 %mul.i
  %cmp3.not.i = icmp ult ptr %p.addr.0.i.i, %add.ptr.i
  br i1 %cmp3.not.i, label %check_valid_pointer.exit, label %if.then3

check_valid_pointer.exit:                         ; preds = %lor.lhs.false.i
  %sub.ptr.lhs.cast.i = ptrtoint ptr %p.addr.0.i.i to i32
  %sub.ptr.rhs.cast.i = ptrtoint ptr %call.i.i.i to i32
  %sub.ptr.sub.i = sub i32 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i
  %rem.i = urem i32 %sub.ptr.sub.i, %4
  %tobool6.not.i.not = icmp eq i32 %rem.i, 0
  br i1 %tobool6.not.i.not, label %if.end13, label %if.then3

if.then3:                                         ; preds = %check_valid_pointer.exit, %lor.lhs.false.i, %restore_red_left.exit.i
  %tobool4.not = icmp eq ptr %object.0121, null
  br i1 %tobool4.not, label %if.else, label %if.then5

if.then5:                                         ; preds = %if.then3
  %5 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i = and i32 %5, -16384
  %6 = inttoptr i32 %and.i.i.i to ptr
  %task.i.i = getelementptr inbounds %struct.thread_info, ptr %6, i32 0, i32 2
  %7 = load ptr, ptr %task.i.i, align 8
  %kunit_test.i.i = getelementptr inbounds %struct.task_struct, ptr %7, i32 0, i32 192
  %8 = load ptr, ptr %kunit_test.i.i, align 4
  %tobool.not.i.i104 = icmp eq ptr %8, null
  br i1 %tobool.not.i.i104, label %if.end.i105, label %if.end.i.i, !prof !14

if.end.i.i:                                       ; preds = %if.then5
  %call7.i.i = tail call fastcc ptr @kunit_find_named_resource(ptr noundef nonnull %8) #27
  %tobool8.not.i.i = icmp eq ptr %call7.i.i, null
  br i1 %tobool8.not.i.i, label %if.end.i105, label %slab_add_kunit_errors.exit.i

slab_add_kunit_errors.exit.i:                     ; preds = %if.end.i.i
  %9 = load ptr, ptr %call7.i.i, align 4
  %10 = load i32, ptr %9, align 4
  %inc.i.i = add i32 %10, 1
  store i32 %inc.i.i, ptr %9, align 4
  tail call fastcc void @kunit_put_resource(ptr noundef nonnull %call7.i.i) #27
  br label %set_freepointer.exit

if.end.i105:                                      ; preds = %if.end.i.i, %if.then5
  tail call void (ptr, ptr, ...) @slab_bug(ptr noundef %s, ptr noundef nonnull @.str.52, ptr noundef nonnull @.str.45) #27
  tail call fastcc void @print_trailer(ptr noundef %s, ptr noundef %slab, ptr noundef nonnull %object.0121) #27
  tail call void @add_taint(i32 noundef 5, i32 noundef 1) #27
  br label %set_freepointer.exit

set_freepointer.exit:                             ; preds = %if.end.i105, %slab_add_kunit_errors.exit.i
  %11 = ptrtoint ptr %object.0121 to i32
  %12 = load i32, ptr %offset.i107, align 4
  %add.i = add i32 %12, %11
  %13 = inttoptr i32 %add.i to ptr
  %14 = load i32, ptr %random.i.i.i, align 4
  %15 = tail call i32 @llvm.bswap.i32(i32 %add.i) #24
  %xor2.i.i = xor i32 %15, %14
  %16 = inttoptr i32 %xor2.i.i to ptr
  store ptr %16, ptr %13, align 4
  br label %while.end

if.else:                                          ; preds = %if.then3
  tail call void (ptr, ptr, ptr, ...) @slab_err(ptr noundef %s, ptr noundef %slab, ptr noundef nonnull @.str.46) #25
  store ptr null, ptr %freelist, align 4
  %bf.load7 = load i32, ptr %1, align 4
  %17 = shl i32 %bf.load7, 15
  %bf.shl = and i32 %17, 2147418112
  %bf.clear11 = and i32 %bf.load7, 65535
  %bf.set = or i32 %bf.shl, %bf.clear11
  store i32 %bf.set, ptr %1, align 4
  tail call void (ptr, ptr, ...) @slab_fix(ptr noundef %s, ptr noundef nonnull @.str.47) #25
  br label %cleanup

if.end13:                                         ; preds = %check_valid_pointer.exit
  %18 = load i32, ptr %offset.i107, align 4
  %add.ptr.i108 = getelementptr i8, ptr %fp.0120, i32 %18
  %19 = load i32, ptr %add.ptr.i108, align 4
  %20 = ptrtoint ptr %add.ptr.i108 to i32
  %21 = load i32, ptr %random.i.i.i, align 4
  %22 = tail call i32 @llvm.bswap.i32(i32 %20) #24
  %xor.i.i.i = xor i32 %21, %19
  %xor2.i.i.i = xor i32 %xor.i.i.i, %22
  %23 = inttoptr i32 %xor2.i.i.i to ptr
  %inc = add nuw nsw i32 %nr.0119, 1
  %tobool.not = icmp eq i32 %xor2.i.i.i, 0
  br i1 %tobool.not, label %while.end, label %land.rhs

while.end:                                        ; preds = %if.end13, %set_freepointer.exit, %land.rhs, %entry
  %nr.0116 = phi i32 [ %nr.0119, %set_freepointer.exit ], [ 0, %entry ], [ %inc, %if.end13 ], [ %nr.0119, %land.rhs ]
  %24 = load volatile i32, ptr %slab, align 4
  %cmp.i.not.i.i.i.i = icmp eq i32 %24, -1
  br i1 %cmp.i.not.i.i.i.i, label %if.then.i.i.i.i, label %PageHead.exit.i.i.i, !prof !13

if.then.i.i.i.i:                                  ; preds = %while.end
  tail call void @dump_page(ptr noundef %slab, ptr noundef nonnull @.str.33) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 698, 0\0A.popsection", ""() #24, !srcloc !51
  unreachable

PageHead.exit.i.i.i:                              ; preds = %while.end
  %25 = load volatile i32, ptr %slab, align 4
  %26 = and i32 %25, 65536
  %tobool.not.i.i.i = icmp eq i32 %26, 0
  br i1 %tobool.not.i.i.i, label %slab_order.exit, label %if.end.i.i.i

if.end.i.i.i:                                     ; preds = %PageHead.exit.i.i.i
  %27 = getelementptr %struct.page, ptr %slab, i32 1, i32 1
  %compound_order.i.i.i = getelementptr inbounds %struct.anon.47, ptr %27, i32 0, i32 2
  %28 = load i8, ptr %compound_order.i.i.i, align 1
  %conv.i.i.i = zext i8 %28 to i32
  br label %slab_order.exit

slab_order.exit:                                  ; preds = %if.end.i.i.i, %PageHead.exit.i.i.i
  %retval.0.i.i.i = phi i32 [ %conv.i.i.i, %if.end.i.i.i ], [ 0, %PageHead.exit.i.i.i ]
  %size = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 3
  %29 = load i32, ptr %size, align 4
  %shl.i = shl i32 4096, %retval.0.i.i.i
  %div.i = udiv i32 %shl.i, %29
  %30 = tail call i32 @llvm.smin.i32(i32 %div.i, i32 32767)
  %31 = getelementptr inbounds %struct.slab, ptr %slab, i32 0, i32 4
  %bf.load20 = load i32, ptr %31, align 4
  %bf.lshr21 = lshr i32 %bf.load20, 1
  %bf.clear22 = and i32 %bf.lshr21, 32767
  %cmp23.not = icmp eq i32 %bf.clear22, %30
  br i1 %cmp23.not, label %if.end33, label %if.then24

if.then24:                                        ; preds = %slab_order.exit
  tail call void (ptr, ptr, ptr, ...) @slab_err(ptr noundef %s, ptr noundef %slab, ptr noundef nonnull @.str.48, i32 noundef %bf.clear22, i32 noundef %30) #25
  %bf.load28 = load i32, ptr %31, align 4
  %bf.value29 = shl i32 %30, 1
  %bf.shl30 = and i32 %bf.value29, 65534
  %bf.clear31 = and i32 %bf.load28, -65535
  %bf.set32 = or i32 %bf.clear31, %bf.shl30
  store i32 %bf.set32, ptr %31, align 4
  tail call void (ptr, ptr, ...) @slab_fix(ptr noundef %s, ptr noundef nonnull @.str.49) #25
  %bf.load34.pre = load i32, ptr %31, align 4
  %.pre = lshr i32 %bf.load34.pre, 1
  %.pre129 = and i32 %.pre, 32767
  br label %if.end33

if.end33:                                         ; preds = %if.then24, %slab_order.exit
  %bf.clear38.pre-phi = phi i32 [ %.pre129, %if.then24 ], [ %30, %slab_order.exit ]
  %bf.load34 = phi i32 [ %bf.load34.pre, %if.then24 ], [ %bf.load20, %slab_order.exit ]
  %bf.lshr35 = lshr i32 %bf.load34, 16
  %sub = sub i32 %bf.clear38.pre-phi, %nr.0116
  %cmp39.not = icmp eq i32 %bf.lshr35, %sub
  br i1 %cmp39.not, label %if.end56, label %if.then40

if.then40:                                        ; preds = %if.end33
  tail call void (ptr, ptr, ptr, ...) @slab_err(ptr noundef %s, ptr noundef %slab, ptr noundef nonnull @.str.50, i32 noundef %bf.lshr35, i32 noundef %sub) #25
  %bf.load47 = load i32, ptr %31, align 4
  %bf.lshr48 = lshr i32 %bf.load47, 1
  %bf.clear49 = and i32 %bf.lshr48, 32767
  %sub50 = sub i32 %bf.clear49, %nr.0116
  %bf.shl53 = shl i32 %sub50, 16
  %bf.clear54 = and i32 %bf.load47, 65535
  %bf.set55 = or i32 %bf.shl53, %bf.clear54
  store i32 %bf.set55, ptr %31, align 4
  tail call void (ptr, ptr, ...) @slab_fix(ptr noundef %s, ptr noundef nonnull @.str.51) #25
  br label %if.end56

if.end56:                                         ; preds = %if.then40, %if.end33
  %cmp57 = icmp eq ptr %search, null
  %conv = zext i1 %cmp57 to i32
  br label %cleanup

cleanup:                                          ; preds = %if.end56, %if.else, %while.body
  %retval.0 = phi i32 [ %conv, %if.end56 ], [ 0, %if.else ], [ 1, %while.body ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc void @object_err(ptr noundef %s, ptr noundef %slab, ptr noundef %object, ptr noundef %reason) unnamed_addr #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i = and i32 %0, -16384
  %1 = inttoptr i32 %and.i.i to ptr
  %task.i = getelementptr inbounds %struct.thread_info, ptr %1, i32 0, i32 2
  %2 = load ptr, ptr %task.i, align 8
  %kunit_test.i = getelementptr inbounds %struct.task_struct, ptr %2, i32 0, i32 192
  %3 = load ptr, ptr %kunit_test.i, align 4
  %tobool.not.i = icmp eq ptr %3, null
  br i1 %tobool.not.i, label %if.end, label %if.end.i, !prof !14

if.end.i:                                         ; preds = %entry
  %call7.i = tail call fastcc ptr @kunit_find_named_resource(ptr noundef nonnull %3) #27
  %tobool8.not.i = icmp eq ptr %call7.i, null
  br i1 %tobool8.not.i, label %if.end, label %slab_add_kunit_errors.exit

slab_add_kunit_errors.exit:                       ; preds = %if.end.i
  %4 = load ptr, ptr %call7.i, align 4
  %5 = load i32, ptr %4, align 4
  %inc.i = add i32 %5, 1
  store i32 %inc.i, ptr %4, align 4
  tail call fastcc void @kunit_put_resource(ptr noundef nonnull %call7.i) #27
  br label %return

if.end:                                           ; preds = %if.end.i, %entry
  tail call void (ptr, ptr, ...) @slab_bug(ptr noundef %s, ptr noundef nonnull @.str.52, ptr noundef %reason) #25
  tail call fastcc void @print_trailer(ptr noundef %s, ptr noundef %slab, ptr noundef %object) #25
  tail call void @add_taint(i32 noundef 5, i32 noundef 1) #27
  br label %return

return:                                           ; preds = %if.end, %slab_add_kunit_errors.exit
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc i32 @check_object(ptr noundef %s, ptr noundef %slab, ptr noundef %object, i8 noundef zeroext %val) unnamed_addr #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %object_size = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 4
  %0 = load i32, ptr %object_size, align 4
  %add.ptr = getelementptr i8, ptr %object, i32 %0
  %flags = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 1
  %1 = load i32, ptr %flags, align 4
  %and = and i32 %1, 1024
  %tobool.not = icmp eq i32 %and, 0
  br i1 %tobool.not, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %red_left_pad = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 17
  %2 = load i32, ptr %red_left_pad, align 4
  %idx.neg = sub i32 0, %2
  %add.ptr1 = getelementptr i8, ptr %object, i32 %idx.neg
  %conv = zext i8 %val to i32
  %call = tail call fastcc i32 @check_bytes_and_report(ptr noundef %s, ptr noundef %slab, ptr noundef %object, ptr noundef nonnull @.str.71, ptr noundef %add.ptr1, i32 noundef %conv, i32 noundef %2) #25
  %tobool3.not = icmp eq i32 %call, 0
  br i1 %tobool3.not, label %cleanup, label %if.end

if.end:                                           ; preds = %if.then
  %inuse = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 15
  %3 = load i32, ptr %inuse, align 4
  %4 = load i32, ptr %object_size, align 4
  %sub = sub i32 %3, %4
  %call7 = tail call fastcc i32 @check_bytes_and_report(ptr noundef %s, ptr noundef %slab, ptr noundef %object, ptr noundef nonnull @.str.72, ptr noundef %add.ptr, i32 noundef %conv, i32 noundef %sub) #25
  %tobool8.not = icmp eq i32 %call7, 0
  br i1 %tobool8.not, label %cleanup, label %if.end23

if.else:                                          ; preds = %entry
  %and12 = and i32 %1, 2048
  %tobool13.not = icmp eq i32 %and12, 0
  br i1 %tobool13.not, label %if.end23, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.else
  %inuse15 = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 15
  %5 = load i32, ptr %inuse15, align 4
  %cmp = icmp ugt i32 %5, %0
  br i1 %cmp, label %if.then17, label %if.end23

if.then17:                                        ; preds = %land.lhs.true
  %sub20 = sub i32 %5, %0
  %call21 = tail call fastcc i32 @check_bytes_and_report(ptr noundef %s, ptr noundef %slab, ptr noundef %object, ptr noundef nonnull @.str.73, ptr noundef %add.ptr, i32 noundef 90, i32 noundef %sub20) #25
  br label %if.end23

if.end23:                                         ; preds = %if.then17, %land.lhs.true, %if.else, %if.end
  %6 = load i32, ptr %flags, align 4
  %and25 = and i32 %6, 2048
  %tobool26.not = icmp eq i32 %and25, 0
  br i1 %tobool26.not, label %if.end48, label %if.then27

if.then27:                                        ; preds = %if.end23
  %cmp29.not = icmp eq i8 %val, -52
  %tobool34.not = icmp sgt i32 %6, -1
  %or.cond = select i1 %cmp29.not, i1 true, i1 %tobool34.not
  br i1 %or.cond, label %if.end46, label %land.lhs.true35

land.lhs.true35:                                  ; preds = %if.then27
  %7 = load i32, ptr %object_size, align 4
  %sub37 = add i32 %7, -1
  %call38 = tail call fastcc i32 @check_bytes_and_report(ptr noundef %s, ptr noundef %slab, ptr noundef %object, ptr noundef nonnull @.str.74, ptr noundef %object, i32 noundef 107, i32 noundef %sub37) #25
  %tobool39.not = icmp eq i32 %call38, 0
  br i1 %tobool39.not, label %cleanup, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true35
  %8 = load i32, ptr %object_size, align 4
  %add.ptr41 = getelementptr i8, ptr %object, i32 %8
  %add.ptr42 = getelementptr i8, ptr %add.ptr41, i32 -1
  %call43 = tail call fastcc i32 @check_bytes_and_report(ptr noundef %s, ptr noundef %slab, ptr noundef %object, ptr noundef nonnull @.str.75, ptr noundef %add.ptr42, i32 noundef 165, i32 noundef 1) #25
  %tobool44.not = icmp eq i32 %call43, 0
  br i1 %tobool44.not, label %cleanup, label %lor.lhs.false.if.end46_crit_edge

lor.lhs.false.if.end46_crit_edge:                 ; preds = %lor.lhs.false
  %.pre = load i32, ptr %flags, align 4
  br label %if.end46

if.end46:                                         ; preds = %lor.lhs.false.if.end46_crit_edge, %if.then27
  %9 = phi i32 [ %.pre, %lor.lhs.false.if.end46_crit_edge ], [ %6, %if.then27 ]
  %offset.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 6
  %10 = load i32, ptr %offset.i.i.i, align 4
  %inuse.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 15
  %11 = load i32, ptr %inuse.i.i.i, align 4
  %cmp.i.not.i.i = icmp ult i32 %10, %11
  %add.i.i = add i32 %11, 4
  %spec.select.i.i = select i1 %cmp.i.not.i.i, i32 %11, i32 %add.i.i
  %and.i = and i32 %9, 65536
  %tobool.not.i = icmp eq i32 %and.i, 0
  %add.i = add i32 %spec.select.i.i, 160
  %spec.select.i = select i1 %tobool.not.i, i32 %spec.select.i.i, i32 %add.i
  %call1.i.i = tail call i32 @__kasan_metadata_size(ptr noundef %s) #27
  %add2.i = add i32 %spec.select.i, %call1.i.i
  %12 = load i32, ptr %flags, align 4
  %and.i.i = and i32 %12, 1024
  %tobool.not.i.i = icmp eq i32 %and.i.i, 0
  %size1.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 3
  %13 = load i32, ptr %size1.i.i, align 4
  br i1 %tobool.not.i.i, label %size_from_object.exit.i, label %size_from_object.exit.i.thread

size_from_object.exit.i:                          ; preds = %if.end46
  %cmp.i = icmp eq i32 %13, %add2.i
  br i1 %cmp.i, label %if.end48, label %size_from_object.exit9.i

size_from_object.exit.i.thread:                   ; preds = %if.end46
  %red_left_pad.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 17
  %14 = load i32, ptr %red_left_pad.i.i, align 4
  %sub.i.i = sub i32 %13, %14
  %cmp.i130 = icmp eq i32 %sub.i.i, %add2.i
  br i1 %cmp.i130, label %if.end48, label %size_from_object.exit9.i

size_from_object.exit9.i:                         ; preds = %size_from_object.exit.i.thread, %size_from_object.exit.i
  %retval.0.i8.i = phi i32 [ %13, %size_from_object.exit.i ], [ %sub.i.i, %size_from_object.exit.i.thread ]
  %add.ptr.i133 = getelementptr i8, ptr %object, i32 %add2.i
  %sub.i = sub i32 %retval.0.i8.i, %add2.i
  %call7.i = tail call fastcc i32 @check_bytes_and_report(ptr noundef %s, ptr noundef %slab, ptr noundef %object, ptr noundef nonnull @.str.79, ptr noundef %add.ptr.i133, i32 noundef 90, i32 noundef %sub.i) #27
  br label %if.end48

if.end48:                                         ; preds = %size_from_object.exit9.i, %size_from_object.exit.i.thread, %size_from_object.exit.i, %if.end23
  %offset.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 6
  %15 = load i32, ptr %offset.i, align 4
  %inuse.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 15
  %16 = load i32, ptr %inuse.i, align 4
  %cmp.i111 = icmp uge i32 %15, %16
  %cmp52 = icmp ne i8 %val, -52
  %17 = or i1 %cmp52, %cmp.i111
  br i1 %17, label %if.end55, label %cleanup

if.end55:                                         ; preds = %if.end48
  %add.ptr.i113 = getelementptr i8, ptr %object, i32 %15
  %18 = load i32, ptr %add.ptr.i113, align 4
  %19 = ptrtoint ptr %add.ptr.i113 to i32
  %random.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 21
  %20 = load i32, ptr %random.i.i.i, align 4
  %21 = tail call i32 @llvm.bswap.i32(i32 %19) #24
  %xor.i.i.i = xor i32 %18, %21
  %xor2.i.i.i = xor i32 %xor.i.i.i, %20
  %22 = inttoptr i32 %xor2.i.i.i to ptr
  %tobool.not.i114 = icmp eq i32 %xor2.i.i.i, 0
  br i1 %tobool.not.i114, label %cleanup, label %if.end.i

if.end.i:                                         ; preds = %if.end55
  %call.i.i.i = tail call ptr @page_address(ptr noundef %slab) #27
  %23 = load i32, ptr %flags, align 4
  %and.i.i116 = and i32 %23, 1024
  %tobool.not.i.i117 = icmp eq i32 %and.i.i116, 0
  br i1 %tobool.not.i.i117, label %restore_red_left.exit.i, label %if.then.i.i119

if.then.i.i119:                                   ; preds = %if.end.i
  %red_left_pad.i.i118 = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 17
  %24 = load i32, ptr %red_left_pad.i.i118, align 4
  %idx.neg.i.i = sub i32 0, %24
  %add.ptr.i.i = getelementptr i8, ptr %22, i32 %idx.neg.i.i
  br label %restore_red_left.exit.i

restore_red_left.exit.i:                          ; preds = %if.then.i.i119, %if.end.i
  %p.addr.0.i.i = phi ptr [ %add.ptr.i.i, %if.then.i.i119 ], [ %22, %if.end.i ]
  %cmp.i120 = icmp ult ptr %p.addr.0.i.i, %call.i.i.i
  br i1 %cmp.i120, label %if.then59, label %lor.lhs.false.i

lor.lhs.false.i:                                  ; preds = %restore_red_left.exit.i
  %25 = getelementptr inbounds %struct.slab, ptr %slab, i32 0, i32 4
  %bf.load.i = load i32, ptr %25, align 4
  %bf.lshr.i = lshr i32 %bf.load.i, 1
  %bf.clear.i = and i32 %bf.lshr.i, 32767
  %size.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 3
  %26 = load i32, ptr %size.i, align 4
  %mul.i = mul i32 %bf.clear.i, %26
  %add.ptr.i121 = getelementptr i8, ptr %call.i.i.i, i32 %mul.i
  %cmp3.not.i = icmp ult ptr %p.addr.0.i.i, %add.ptr.i121
  br i1 %cmp3.not.i, label %check_valid_pointer.exit, label %if.then59

check_valid_pointer.exit:                         ; preds = %lor.lhs.false.i
  %sub.ptr.lhs.cast.i = ptrtoint ptr %p.addr.0.i.i to i32
  %sub.ptr.rhs.cast.i = ptrtoint ptr %call.i.i.i to i32
  %sub.ptr.sub.i = sub i32 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i
  %rem.i = urem i32 %sub.ptr.sub.i, %26
  %tobool6.not.i.not = icmp eq i32 %rem.i, 0
  br i1 %tobool6.not.i.not, label %cleanup, label %if.then59

if.then59:                                        ; preds = %check_valid_pointer.exit, %lor.lhs.false.i, %restore_red_left.exit.i
  %27 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i = and i32 %27, -16384
  %28 = inttoptr i32 %and.i.i.i to ptr
  %task.i.i = getelementptr inbounds %struct.thread_info, ptr %28, i32 0, i32 2
  %29 = load ptr, ptr %task.i.i, align 8
  %kunit_test.i.i = getelementptr inbounds %struct.task_struct, ptr %29, i32 0, i32 192
  %30 = load ptr, ptr %kunit_test.i.i, align 4
  %tobool.not.i.i123 = icmp eq ptr %30, null
  br i1 %tobool.not.i.i123, label %if.end.i125, label %if.end.i.i, !prof !14

if.end.i.i:                                       ; preds = %if.then59
  %call7.i.i = tail call fastcc ptr @kunit_find_named_resource(ptr noundef nonnull %30) #27
  %tobool8.not.i.i = icmp eq ptr %call7.i.i, null
  br i1 %tobool8.not.i.i, label %if.end.i125, label %slab_add_kunit_errors.exit.i

slab_add_kunit_errors.exit.i:                     ; preds = %if.end.i.i
  %31 = load ptr, ptr %call7.i.i, align 4
  %32 = load i32, ptr %31, align 4
  %inc.i.i = add i32 %32, 1
  store i32 %inc.i.i, ptr %31, align 4
  tail call fastcc void @kunit_put_resource(ptr noundef nonnull %call7.i.i) #27
  br label %object_err.exit

if.end.i125:                                      ; preds = %if.end.i.i, %if.then59
  tail call void (ptr, ptr, ...) @slab_bug(ptr noundef %s, ptr noundef nonnull @.str.52, ptr noundef nonnull @.str.46) #27
  tail call fastcc void @print_trailer(ptr noundef %s, ptr noundef %slab, ptr noundef %object) #27
  tail call void @add_taint(i32 noundef 5, i32 noundef 1) #27
  br label %object_err.exit

object_err.exit:                                  ; preds = %if.end.i125, %slab_add_kunit_errors.exit.i
  %cmp.i126 = icmp eq ptr %object, null
  br i1 %cmp.i126, label %do.body2.i, label %set_freepointer.exit, !prof !13

do.body2.i:                                       ; preds = %object_err.exit
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slub.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 379, 0\0A.popsection", ""() #24, !srcloc !30
  unreachable

set_freepointer.exit:                             ; preds = %object_err.exit
  %33 = ptrtoint ptr %object to i32
  %34 = load i32, ptr %offset.i, align 4
  %add.i128 = add i32 %34, %33
  %35 = inttoptr i32 %add.i128 to ptr
  %36 = load i32, ptr %random.i.i.i, align 4
  %37 = tail call i32 @llvm.bswap.i32(i32 %add.i128) #24
  %xor2.i.i = xor i32 %37, %36
  %38 = inttoptr i32 %xor2.i.i to ptr
  store ptr %38, ptr %35, align 4
  br label %cleanup

cleanup:                                          ; preds = %set_freepointer.exit, %check_valid_pointer.exit, %if.end55, %if.end48, %lor.lhs.false, %land.lhs.true35, %if.end, %if.then
  %retval.0 = phi i32 [ 0, %set_freepointer.exit ], [ 0, %if.then ], [ 0, %if.end ], [ 0, %lor.lhs.false ], [ 0, %land.lhs.true35 ], [ 1, %if.end48 ], [ 1, %check_valid_pointer.exit ], [ 1, %if.end55 ]
  ret i32 %retval.0
}

; Function Attrs: cold null_pointer_is_valid
declare dso_local void @dump_stack() local_unnamed_addr #10

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal void @slab_bug(ptr nocapture noundef readonly %s, ptr noundef %fmt, ...) unnamed_addr #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %vaf = alloca %struct.va_format, align 4
  %args = alloca %struct.__va_list, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %vaf) #24
  %0 = getelementptr inbounds %struct.va_format, ptr %vaf, i32 0, i32 1
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %args) #24
  store ptr inttoptr (i32 -1 to ptr), ptr %args, align 4, !annotation !11
  call void @llvm.va_start(ptr nonnull %args)
  store ptr %fmt, ptr %vaf, align 4
  store ptr %args, ptr %0, align 4
  %call = call i32 (ptr, ...) @_printk(ptr noundef nonnull @.str.54) #26
  %name = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 18
  %1 = load ptr, ptr %name, align 4
  %call6 = call ptr @print_tainted() #27
  %call7 = call i32 (ptr, ...) @_printk(ptr noundef nonnull @.str.57, ptr noundef %1, ptr noundef %call6, ptr noundef nonnull %vaf) #26
  %call12 = call i32 (ptr, ...) @_printk(ptr noundef nonnull @.str.60) #26
  call void @llvm.va_end(ptr nonnull %args)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %args) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %vaf) #24
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc void @print_trailer(ptr noundef %s, ptr noundef %slab, ptr noundef %p) unnamed_addr #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %call.i.i = tail call ptr @page_address(ptr noundef %slab) #27
  %0 = load volatile i32, ptr @jiffies, align 128
  %flags.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 1
  %1 = load i32, ptr %flags.i, align 4
  %and.i = and i32 %1, 65536
  %tobool.not.i = icmp eq i32 %and.i, 0
  br i1 %tobool.not.i, label %print_tracking.exit, label %if.end.i

if.end.i:                                         ; preds = %entry
  %offset.i.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 6
  %2 = load i32, ptr %offset.i.i.i.i, align 4
  %inuse.i.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 15
  %3 = load i32, ptr %inuse.i.i.i.i, align 4
  %cmp.i.not.i.i.i = icmp ult i32 %2, %3
  %add.i.i.i = add i32 %3, 4
  %spec.select.i.i.i = select i1 %cmp.i.not.i.i.i, i32 %3, i32 %add.i.i.i
  %add.ptr.i.i = getelementptr i8, ptr %p, i32 %spec.select.i.i.i
  tail call fastcc void @print_track(ptr noundef nonnull @.str, ptr noundef %add.ptr.i.i, i32 noundef %0) #27
  %4 = load i32, ptr %offset.i.i.i.i, align 4
  %5 = load i32, ptr %inuse.i.i.i.i, align 4
  %cmp.i.not.i.i8.i = icmp ult i32 %4, %5
  %add.i.i9.i = add i32 %5, 4
  %spec.select.i.i10.i = select i1 %cmp.i.not.i.i8.i, i32 %5, i32 %add.i.i9.i
  %add.ptr.i11.i = getelementptr i8, ptr %p, i32 %spec.select.i.i10.i
  %add.ptr1.i.i = getelementptr %struct.track, ptr %add.ptr.i11.i, i32 1
  tail call fastcc void @print_track(ptr noundef nonnull @.str.1, ptr noundef %add.ptr1.i.i, i32 noundef %0) #27
  br label %print_tracking.exit

print_tracking.exit:                              ; preds = %if.end.i, %entry
  %6 = getelementptr inbounds %struct.slab, ptr %slab, i32 0, i32 4
  %bf.load.i = load i32, ptr %6, align 4
  %freelist.i = getelementptr inbounds %struct.slab, ptr %slab, i32 0, i32 3
  %7 = load ptr, ptr %freelist.i, align 4
  %8 = getelementptr inbounds %struct.page, ptr %slab, i32 0, i32 1
  %9 = load volatile i32, ptr %8, align 4
  %and.i.i.i = and i32 %9, 1
  %tobool.not.i.i = icmp eq i32 %and.i.i.i, 0
  br i1 %tobool.not.i.i, label %print_slab_info.exit, label %if.then.i.i, !prof !14

if.then.i.i:                                      ; preds = %print_tracking.exit
  tail call void @dump_page(ptr noundef %slab, ptr noundef nonnull @.str.29) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 260, 0\0A.popsection", ""() #24, !srcloc !28
  unreachable

print_slab_info.exit:                             ; preds = %print_tracking.exit
  %bf.lshr2.i = lshr i32 %bf.load.i, 16
  %bf.lshr.i = lshr i32 %bf.load.i, 1
  %bf.clear.i = and i32 %bf.lshr.i, 32767
  %call3.i = tail call i32 (ptr, ...) @_printk(ptr noundef nonnull @.str.68, ptr noundef %slab, i32 noundef %bf.clear.i, i32 noundef %bf.lshr2.i, ptr noundef %7, ptr noundef %slab) #26
  %sub.ptr.lhs.cast = ptrtoint ptr %p to i32
  %sub.ptr.rhs.cast = ptrtoint ptr %call.i.i to i32
  %sub.ptr.sub = sub i32 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %offset.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 6
  %10 = load i32, ptr %offset.i, align 4
  %add.ptr.i = getelementptr i8, ptr %p, i32 %10
  %11 = load i32, ptr %add.ptr.i, align 4
  %12 = ptrtoint ptr %add.ptr.i to i32
  %random.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 21
  %13 = load i32, ptr %random.i.i.i, align 4
  %14 = tail call i32 @llvm.bswap.i32(i32 %12) #24
  %xor.i.i.i = xor i32 %13, %11
  %xor2.i.i.i = xor i32 %xor.i.i.i, %14
  %15 = inttoptr i32 %xor2.i.i.i to ptr
  %call2 = tail call i32 (ptr, ...) @_printk(ptr noundef nonnull @.str.62, ptr noundef %p, i32 noundef %sub.ptr.sub, ptr noundef %15) #26
  %16 = load i32, ptr %flags.i, align 4
  %and = and i32 %16, 1024
  %tobool.not = icmp eq i32 %and, 0
  br i1 %tobool.not, label %if.else, label %if.then

if.then:                                          ; preds = %print_slab_info.exit
  %red_left_pad = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 17
  %17 = load i32, ptr %red_left_pad, align 4
  %idx.neg = sub i32 0, %17
  %add.ptr = getelementptr i8, ptr %p, i32 %idx.neg
  tail call void @kasan_disable_current() #27
  tail call void @print_hex_dump(ptr noundef nonnull @.str.35, ptr noundef nonnull @.str.64, i32 noundef 1, i32 noundef 16, i32 noundef 1, ptr noundef %add.ptr, i32 noundef %17, i1 noundef zeroext true) #27
  br label %if.end7.sink.split

if.else:                                          ; preds = %print_slab_info.exit
  %add.ptr4 = getelementptr i8, ptr %call.i.i, i32 16
  %cmp = icmp ult ptr %add.ptr4, %p
  br i1 %cmp, label %if.then5, label %if.end7

if.then5:                                         ; preds = %if.else
  %add.ptr6 = getelementptr i8, ptr %p, i32 -16
  tail call void @kasan_disable_current() #27
  tail call void @print_hex_dump(ptr noundef nonnull @.str.35, ptr noundef nonnull @.str.65, i32 noundef 1, i32 noundef 16, i32 noundef 1, ptr noundef %add.ptr6, i32 noundef 16, i1 noundef zeroext true) #27
  br label %if.end7.sink.split

if.end7.sink.split:                               ; preds = %if.then5, %if.then
  tail call void @kasan_enable_current() #27
  br label %if.end7

if.end7:                                          ; preds = %if.end7.sink.split, %if.else
  %object_size = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 4
  %18 = load i32, ptr %object_size, align 4
  %19 = tail call i32 @llvm.umin.i32(i32 %18, i32 4096)
  tail call void @kasan_disable_current() #27
  tail call void @print_hex_dump(ptr noundef nonnull @.str.35, ptr noundef nonnull @.str.66, i32 noundef 1, i32 noundef 16, i32 noundef 1, ptr noundef %p, i32 noundef %19, i1 noundef zeroext true) #27
  tail call void @kasan_enable_current() #27
  %20 = load i32, ptr %flags.i, align 4
  %and11 = and i32 %20, 1024
  %tobool12.not = icmp eq i32 %and11, 0
  br i1 %tobool12.not, label %if.end17, label %if.then13

if.then13:                                        ; preds = %if.end7
  %21 = load i32, ptr %object_size, align 4
  %add.ptr15 = getelementptr i8, ptr %p, i32 %21
  %inuse = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 15
  %22 = load i32, ptr %inuse, align 4
  %sub = sub i32 %22, %21
  tail call void @kasan_disable_current() #27
  tail call void @print_hex_dump(ptr noundef nonnull @.str.35, ptr noundef nonnull @.str.64, i32 noundef 1, i32 noundef 16, i32 noundef 1, ptr noundef %add.ptr15, i32 noundef %sub, i1 noundef zeroext true) #27
  tail call void @kasan_enable_current() #27
  %.pre = load i32, ptr %flags.i, align 4
  br label %if.end17

if.end17:                                         ; preds = %if.then13, %if.end7
  %23 = phi i32 [ %.pre, %if.then13 ], [ %20, %if.end7 ]
  %24 = load i32, ptr %offset.i, align 4
  %inuse.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 15
  %25 = load i32, ptr %inuse.i.i, align 4
  %cmp.i.not.i = icmp ult i32 %24, %25
  %add.i = add i32 %25, 4
  %spec.select.i = select i1 %cmp.i.not.i, i32 %25, i32 %add.i
  %and20 = and i32 %23, 65536
  %tobool21.not = icmp eq i32 %and20, 0
  %add = add i32 %spec.select.i, 160
  %spec.select = select i1 %tobool21.not, i32 %spec.select.i, i32 %add
  %call1.i = tail call i32 @__kasan_metadata_size(ptr noundef %s) #27
  %add25 = add i32 %spec.select, %call1.i
  %26 = load i32, ptr %flags.i, align 4
  %and.i65 = and i32 %26, 1024
  %tobool.not.i66 = icmp eq i32 %and.i65, 0
  %size1.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 3
  %27 = load i32, ptr %size1.i, align 4
  br i1 %tobool.not.i66, label %size_from_object.exit, label %size_from_object.exit.thread

size_from_object.exit:                            ; preds = %if.end17
  %cmp27.not = icmp eq i32 %add25, %27
  br i1 %cmp27.not, label %if.end32, label %size_from_object.exit75

size_from_object.exit.thread:                     ; preds = %if.end17
  %red_left_pad.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 17
  %28 = load i32, ptr %red_left_pad.i, align 4
  %sub.i = sub i32 %27, %28
  %cmp27.not77 = icmp eq i32 %add25, %sub.i
  br i1 %cmp27.not77, label %if.end32, label %size_from_object.exit75

size_from_object.exit75:                          ; preds = %size_from_object.exit.thread, %size_from_object.exit
  %retval.0.i74 = phi i32 [ %27, %size_from_object.exit ], [ %sub.i, %size_from_object.exit.thread ]
  %add.ptr2980 = getelementptr i8, ptr %p, i32 %add25
  %sub31 = sub i32 %retval.0.i74, %add25
  tail call void @kasan_disable_current() #27
  tail call void @print_hex_dump(ptr noundef nonnull @.str.35, ptr noundef nonnull @.str.67, i32 noundef 1, i32 noundef 16, i32 noundef 1, ptr noundef %add.ptr2980, i32 noundef %sub31, i1 noundef zeroext true) #27
  tail call void @kasan_enable_current() #27
  br label %if.end32

if.end32:                                         ; preds = %size_from_object.exit75, %size_from_object.exit.thread, %size_from_object.exit
  tail call void @dump_stack() #26
  ret void
}

; Function Attrs: null_pointer_is_valid
declare dso_local void @add_taint(i32 noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc ptr @kunit_find_named_resource(ptr noundef %test) unnamed_addr #5 align 64 {
entry:
  %lock.i = getelementptr inbounds %struct.kunit, ptr %test, i32 0, i32 6
  %call2.i = tail call i32 @_raw_spin_lock_irqsave(ptr noundef %lock.i) #27
  %resources.i = getelementptr inbounds %struct.kunit, ptr %test, i32 0, i32 8
  %prev.i = getelementptr inbounds %struct.kunit, ptr %test, i32 0, i32 8, i32 1
  %.pn3.i = load ptr, ptr %prev.i, align 4
  %cmp7.not4.i = icmp eq ptr %.pn3.i, %resources.i
  br i1 %cmp7.not4.i, label %kunit_find_resource.exit, label %for.body.i

for.body.i:                                       ; preds = %for.inc.i, %entry
  %.pn5.i = phi ptr [ %.pn.i, %for.inc.i ], [ %.pn3.i, %entry ]
  %name.i.i = getelementptr i8, ptr %.pn5.i, i32 -12
  %0 = load ptr, ptr %name.i.i, align 4
  %tobool.not.i.i = icmp eq ptr %0, null
  br i1 %tobool.not.i.i, label %for.inc.i, label %kunit_resource_name_match.exit.i

kunit_resource_name_match.exit.i:                 ; preds = %for.body.i
  %call.i.i = tail call i32 @strcmp(ptr noundef nonnull %0, ptr noundef nonnull @.str.53) #27
  %cmp.i.i = icmp eq i32 %call.i.i, 0
  br i1 %cmp.i.i, label %if.then.i, label %for.inc.i

if.then.i:                                        ; preds = %kunit_resource_name_match.exit.i
  %res.0.le.i = getelementptr i8, ptr %.pn5.i, i32 -16
  %refcount.i.i = getelementptr i8, ptr %.pn5.i, i32 -4
  tail call void @llvm.prefetch.p0(ptr %refcount.i.i, i32 1, i32 3, i32 1) #24
  %1 = tail call { i32, i32, i32 } asm sideeffect "@ atomic_fetch_add\0A1:\09ldrex\09$0, [$4]\0A\09add\09$1, $0, $5\0A\09strex\09$2, $1, [$4]\0A\09teq\09$2, #0\0A\09bne\091b", "=&r,=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %refcount.i.i, ptr %refcount.i.i, i32 1, ptr elementtype(i32) %refcount.i.i) #24, !srcloc !62
  %asmresult.i.i.i.i.i.i.i.i = extractvalue { i32, i32, i32 } %1, 0
  %tobool1.not.i.i.i.i.i.i = icmp eq i32 %asmresult.i.i.i.i.i.i.i.i, 0
  br i1 %tobool1.not.i.i.i.i.i.i, label %if.end15.sink.split.i.i.i.i.i.i, label %if.else.i.i.i.i.i.i, !prof !13

if.else.i.i.i.i.i.i:                              ; preds = %if.then.i
  %add.i.i.i.i.i.i = add i32 %asmresult.i.i.i.i.i.i.i.i, 1
  %2 = or i32 %add.i.i.i.i.i.i, %asmresult.i.i.i.i.i.i.i.i
  %.not.i.i.i.i.i.i = icmp sgt i32 %2, -1
  br i1 %.not.i.i.i.i.i.i, label %kunit_find_resource.exit, label %if.end15.sink.split.i.i.i.i.i.i, !prof !14

if.end15.sink.split.i.i.i.i.i.i:                  ; preds = %if.else.i.i.i.i.i.i, %if.then.i
  %.sink.i.i.i.i.i.i = phi i32 [ 2, %if.then.i ], [ 1, %if.else.i.i.i.i.i.i ]
  tail call void @refcount_warn_saturate(ptr noundef %refcount.i.i, i32 noundef %.sink.i.i.i.i.i.i) #27
  br label %kunit_find_resource.exit

for.inc.i:                                        ; preds = %kunit_resource_name_match.exit.i, %for.body.i
  %prev12.i = getelementptr inbounds %struct.list_head, ptr %.pn5.i, i32 0, i32 1
  %.pn.i = load ptr, ptr %prev12.i, align 4
  %cmp7.not.i = icmp eq ptr %.pn.i, %resources.i
  br i1 %cmp7.not.i, label %kunit_find_resource.exit, label %for.body.i

kunit_find_resource.exit:                         ; preds = %for.inc.i, %if.end15.sink.split.i.i.i.i.i.i, %if.else.i.i.i.i.i.i, %entry
  %found.0.i = phi ptr [ %res.0.le.i, %if.else.i.i.i.i.i.i ], [ %res.0.le.i, %if.end15.sink.split.i.i.i.i.i.i ], [ null, %entry ], [ null, %for.inc.i ]
  tail call void @_raw_spin_unlock_irqrestore(ptr noundef %lock.i, i32 noundef %call2.i) #27
  ret ptr %found.0.i
}

; Function Attrs: inlinehint nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc void @kunit_put_resource(ptr noundef %res) unnamed_addr #5 align 64 {
entry:
  %refcount = getelementptr inbounds %struct.kunit_resource, ptr %res, i32 0, i32 3
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #24, !srcloc !63
  tail call void @llvm.prefetch.p0(ptr %refcount, i32 1, i32 3, i32 1) #24
  %0 = tail call { i32, i32, i32 } asm sideeffect "@ atomic_fetch_sub\0A1:\09ldrex\09$0, [$4]\0A\09sub\09$1, $0, $5\0A\09strex\09$2, $1, [$4]\0A\09teq\09$2, #0\0A\09bne\091b", "=&r,=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %refcount, ptr %refcount, i32 1, ptr elementtype(i32) %refcount) #24, !srcloc !64
  %asmresult.i.i.i.i.i.i.i = extractvalue { i32, i32, i32 } %0, 0
  %cmp.i.i.i.i = icmp eq i32 %asmresult.i.i.i.i.i.i.i, 1
  br i1 %cmp.i.i.i.i, label %if.then.i, label %if.end5.i.i.i.i

if.end5.i.i.i.i:                                  ; preds = %entry
  %.not.i.i.i.i = icmp sgt i32 %asmresult.i.i.i.i.i.i.i, 0
  br i1 %.not.i.i.i.i, label %kref_put.exit, label %if.then10.i.i.i.i, !prof !14

if.then10.i.i.i.i:                                ; preds = %if.end5.i.i.i.i
  tail call void @refcount_warn_saturate(ptr noundef %refcount, i32 noundef 3) #27
  br label %kref_put.exit

if.then.i:                                        ; preds = %entry
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #24, !srcloc !65
  %free.i.i = getelementptr %struct.kunit_resource, ptr %res, i32 0, i32 2
  %1 = load ptr, ptr %free.i.i, align 4
  %tobool.not.i.i = icmp eq ptr %1, null
  br i1 %tobool.not.i.i, label %kref_put.exit, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then.i
  tail call void %1(ptr noundef %res) #27
  tail call void @kfree(ptr noundef %res) #27
  br label %kref_put.exit

kref_put.exit:                                    ; preds = %if.then.i.i, %if.then.i, %if.then10.i.i.i.i, %if.end5.i.i.i.i
  ret void
}

; Function Attrs: null_pointer_is_valid
declare dso_local void @refcount_warn_saturate(ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @strcmp(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare void @llvm.va_start(ptr) #18

; Function Attrs: null_pointer_is_valid
declare dso_local ptr @print_tainted() local_unnamed_addr #3

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare void @llvm.va_end(ptr) #18

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @__kasan_metadata_size(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc i32 @check_bytes_and_report(ptr noundef %s, ptr noundef %slab, ptr noundef %object, ptr noundef %what, ptr noundef %start, i32 noundef %value, i32 noundef %bytes) unnamed_addr #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %call.i.i = tail call ptr @page_address(ptr noundef %slab) #27
  tail call void @kasan_disable_current() #27
  %call2 = tail call ptr @memchr_inv(ptr noundef %start, i32 noundef %value, i32 noundef %bytes) #27
  tail call void @kasan_enable_current() #27
  %tobool.not = icmp eq ptr %call2, null
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %add.ptr = getelementptr i8, ptr %start, i32 %bytes
  br label %while.cond

while.cond:                                       ; preds = %land.rhs, %if.end
  %end.0 = phi ptr [ %add.ptr, %if.end ], [ %arrayidx, %land.rhs ]
  %cmp = icmp ugt ptr %end.0, %call2
  br i1 %cmp, label %land.rhs, label %while.end

land.rhs:                                         ; preds = %while.cond
  %arrayidx = getelementptr i8, ptr %end.0, i32 -1
  %0 = load i8, ptr %arrayidx, align 1
  %conv = zext i8 %0 to i32
  %cmp3 = icmp eq i32 %conv, %value
  br i1 %cmp3, label %while.cond, label %while.end

while.end:                                        ; preds = %land.rhs, %while.cond
  %1 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i = and i32 %1, -16384
  %2 = inttoptr i32 %and.i.i to ptr
  %task.i = getelementptr inbounds %struct.thread_info, ptr %2, i32 0, i32 2
  %3 = load ptr, ptr %task.i, align 8
  %kunit_test.i = getelementptr inbounds %struct.task_struct, ptr %3, i32 0, i32 192
  %4 = load ptr, ptr %kunit_test.i, align 4
  %tobool.not.i = icmp eq ptr %4, null
  br i1 %tobool.not.i, label %if.end7, label %if.end.i, !prof !14

if.end.i:                                         ; preds = %while.end
  %call7.i = tail call fastcc ptr @kunit_find_named_resource(ptr noundef nonnull %4) #27
  %tobool8.not.i = icmp eq ptr %call7.i, null
  br i1 %tobool8.not.i, label %if.end7, label %slab_add_kunit_errors.exit

slab_add_kunit_errors.exit:                       ; preds = %if.end.i
  %5 = load ptr, ptr %call7.i, align 4
  %6 = load i32, ptr %5, align 4
  %inc.i = add i32 %6, 1
  store i32 %inc.i, ptr %5, align 4
  tail call fastcc void @kunit_put_resource(ptr noundef nonnull %call7.i) #27
  %.pre = ptrtoint ptr %call2 to i32
  br label %skip_bug_print

if.end7:                                          ; preds = %if.end.i, %while.end
  tail call void (ptr, ptr, ...) @slab_bug(ptr noundef %s, ptr noundef nonnull @.str.76, ptr noundef %what) #25
  %add.ptr8 = getelementptr i8, ptr %end.0, i32 -1
  %sub.ptr.lhs.cast = ptrtoint ptr %call2 to i32
  %sub.ptr.rhs.cast = ptrtoint ptr %call.i.i to i32
  %sub.ptr.sub = sub i32 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %7 = load i8, ptr %call2, align 1
  %conv10 = zext i8 %7 to i32
  %call11 = tail call i32 (ptr, ...) @_printk(ptr noundef nonnull @.str.77, ptr noundef nonnull %call2, ptr noundef %add.ptr8, i32 noundef %sub.ptr.sub, i32 noundef %conv10, i32 noundef %value) #26
  tail call fastcc void @print_trailer(ptr noundef %s, ptr noundef %slab, ptr noundef %object) #25
  tail call void @add_taint(i32 noundef 5, i32 noundef 1) #27
  br label %skip_bug_print

skip_bug_print:                                   ; preds = %if.end7, %slab_add_kunit_errors.exit
  %sub.ptr.rhs.cast.i.pre-phi = phi i32 [ %.pre, %slab_add_kunit_errors.exit ], [ %sub.ptr.lhs.cast, %if.end7 ]
  %add.ptr.i = getelementptr i8, ptr %end.0, i32 -1
  %conv.i = and i32 %value, 255
  tail call void (ptr, ptr, ...) @slab_fix(ptr noundef %s, ptr noundef nonnull @.str.38, ptr noundef %what, ptr noundef nonnull %call2, ptr noundef %add.ptr.i, i32 noundef %conv.i) #27
  %sub.ptr.lhs.cast.i = ptrtoint ptr %end.0 to i32
  %sub.ptr.sub.i = sub i32 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i.pre-phi
  %call.i = tail call ptr @__memset(ptr noundef nonnull %call2, i32 noundef %conv.i, i32 noundef %sub.ptr.sub.i) #27
  br label %cleanup

cleanup:                                          ; preds = %skip_bug_print, %entry
  %retval.0 = phi i32 [ 0, %skip_bug_print ], [ 1, %entry ]
  ret i32 %retval.0
}

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @stack_trace_save(ptr noundef, i32 noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @vsnprintf(ptr noundef, i32 noundef, ptr noundef, [1 x i32]) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local void @_raw_spin_unlock_irqrestore(ptr noundef, i32 noundef) local_unnamed_addr #3 section ".spinlock.text"

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc void @__unfreeze_partials(ptr noundef %s, ptr noundef %partial_slab) unnamed_addr #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %tobool.not119 = icmp eq ptr %partial_slab, null
  br i1 %tobool.not119, label %while.end61, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %arrayidx.i = getelementptr %struct.kmem_cache, ptr %s, i32 0, i32 26, i32 0
  %min_partial = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 2
  br label %while.body

while.body:                                       ; preds = %if.end52, %while.body.lr.ph
  %partial_slab.addr.0123 = phi ptr [ %partial_slab, %while.body.lr.ph ], [ %1, %if.end52 ]
  %flags.0122 = phi i32 [ 0, %while.body.lr.ph ], [ %flags.1, %if.end52 ]
  %slab_to_discard.0121 = phi ptr [ null, %while.body.lr.ph ], [ %slab_to_discard.1, %if.end52 ]
  %n.0120 = phi ptr [ null, %while.body.lr.ph ], [ %n.1, %if.end52 ]
  %0 = getelementptr inbounds %struct.slab, ptr %partial_slab.addr.0123, i32 0, i32 1
  %1 = load ptr, ptr %0, align 4
  %2 = load volatile i32, ptr %partial_slab.addr.0123, align 4
  %cmp.i.not.i.i.i = icmp eq i32 %2, -1
  br i1 %cmp.i.not.i.i.i, label %if.then.i.i.i, label %slab_nid.exit, !prof !13

if.then.i.i.i:                                    ; preds = %while.body
  tail call void @dump_page(ptr noundef nonnull %partial_slab.addr.0123, ptr noundef nonnull @.str.88) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/mm.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 1368, 0\0A.popsection", ""() #24, !srcloc !37
  unreachable

slab_nid.exit:                                    ; preds = %while.body
  %3 = load ptr, ptr %arrayidx.i, align 4
  %cmp.not = icmp eq ptr %n.0120, %3
  br i1 %cmp.not, label %if.end11, label %if.then

if.then:                                          ; preds = %slab_nid.exit
  %tobool2.not = icmp eq ptr %n.0120, null
  br i1 %tobool2.not, label %if.end, label %if.then3

if.then3:                                         ; preds = %if.then
  tail call void @_raw_spin_unlock_irqrestore(ptr noundef nonnull %n.0120, i32 noundef %flags.0122) #27
  br label %if.end

if.end:                                           ; preds = %if.then3, %if.then
  %call8 = tail call i32 @_raw_spin_lock_irqsave(ptr noundef %3) #27
  br label %if.end11

if.end11:                                         ; preds = %if.end, %slab_nid.exit
  %n.1 = phi ptr [ %3, %if.end ], [ %n.0120, %slab_nid.exit ]
  %flags.1 = phi i32 [ %call8, %if.end ], [ %flags.0122, %slab_nid.exit ]
  %4 = getelementptr inbounds %struct.slab, ptr %partial_slab.addr.0123, i32 0, i32 4
  %freelist = getelementptr inbounds %struct.slab, ptr %partial_slab.addr.0123, i32 0, i32 3
  br label %do.body12

do.body12:                                        ; preds = %do.end28, %if.end11
  %5 = load i32, ptr %4, align 4
  %bf.clear = and i32 %5, 1
  %tobool15.not = icmp eq i32 %bf.clear, 0
  br i1 %tobool15.not, label %do.body20, label %do.end28, !prof !13

do.body20:                                        ; preds = %do.body12
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slub.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 2507, 0\0A.popsection", ""() #24, !srcloc !87
  unreachable

do.end28:                                         ; preds = %do.body12
  %6 = load ptr, ptr %freelist, align 4
  %bf.clear32 = and i32 %5, -2
  %call36 = tail call fastcc zeroext i1 @__cmpxchg_double_slab(ptr noundef %s, ptr noundef nonnull %partial_slab.addr.0123, ptr noundef %6, i32 noundef %5, ptr noundef %6, i32 noundef %bf.clear32) #25
  br i1 %call36, label %do.end39, label %do.body12

do.end39:                                         ; preds = %do.end28
  %tobool41.not = icmp ult i32 %5, 65536
  br i1 %tobool41.not, label %land.rhs, label %if.else

land.rhs:                                         ; preds = %do.end39
  %nr_partial = getelementptr inbounds %struct.kmem_cache_node, ptr %n.1, i32 0, i32 1
  %7 = load i32, ptr %nr_partial, align 4
  %8 = load i32, ptr %min_partial, align 4
  %cmp42.not = icmp ult i32 %7, %8
  br i1 %cmp42.not, label %if.else, label %if.then50, !prof !14

if.then50:                                        ; preds = %land.rhs
  store ptr %slab_to_discard.0121, ptr %0, align 4
  br label %if.end52

if.else:                                          ; preds = %land.rhs, %do.end39
  %9 = load i32, ptr @debug_locks, align 4
  %tobool.not.i = icmp eq i32 %9, 0
  br i1 %tobool.not.i, label %if.end.i, label %land.rhs.i

land.rhs.i:                                       ; preds = %if.else
  %dep_map.i = getelementptr inbounds %struct.anon.15, ptr %n.1, i32 0, i32 1
  %call.i.i = tail call i32 @lock_is_held_type(ptr noundef %dep_map.i, i32 noundef -1) #27
  %cmp.not.i = icmp eq i32 %call.i.i, 0
  br i1 %cmp.not.i, label %do.end.i, label %if.end.i, !prof !13

do.end.i:                                         ; preds = %land.rhs.i
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.2, i32 noundef 2068, i32 noundef 9, ptr noundef null) #27
  br label %if.end.i

if.end.i:                                         ; preds = %do.end.i, %land.rhs.i, %if.else
  %nr_partial.i.i = getelementptr inbounds %struct.kmem_cache_node, ptr %n.1, i32 0, i32 1
  %10 = load i32, ptr %nr_partial.i.i, align 4
  %inc.i.i = add i32 %10, 1
  store i32 %inc.i.i, ptr %nr_partial.i.i, align 4
  %partial.i.i = getelementptr inbounds %struct.kmem_cache_node, ptr %n.1, i32 0, i32 2
  %prev.i.i.i = getelementptr inbounds %struct.kmem_cache_node, ptr %n.1, i32 0, i32 2, i32 1
  %11 = load ptr, ptr %prev.i.i.i, align 4
  %call.i.i.i.i = tail call zeroext i1 @__list_add_valid(ptr noundef %0, ptr noundef %11, ptr noundef %partial.i.i) #27
  br i1 %call.i.i.i.i, label %if.end.sink.split.i.i, label %add_partial.exit

if.end.sink.split.i.i:                            ; preds = %if.end.i
  store ptr %0, ptr %prev.i.i.i, align 4
  store ptr %partial.i.i, ptr %0, align 4
  %prev3.i.i6.i.i = getelementptr inbounds %struct.slab, ptr %partial_slab.addr.0123, i32 0, i32 1, i32 0, i32 1
  store ptr %11, ptr %prev3.i.i6.i.i, align 4
  store volatile ptr %0, ptr %11, align 4
  br label %add_partial.exit

add_partial.exit:                                 ; preds = %if.end.sink.split.i.i, %if.end.i
  %12 = load ptr, ptr %s, align 4
  %arrayidx.i95 = getelementptr %struct.kmem_cache_cpu, ptr %12, i32 0, i32 5, i32 5
  %13 = ptrtoint ptr %arrayidx.i95 to i32
  %14 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i = and i32 %14, -16384
  %15 = inttoptr i32 %and.i.i to ptr
  %cpu.i = getelementptr inbounds %struct.thread_info, ptr %15, i32 0, i32 3
  %16 = load i32, ptr %cpu.i, align 4
  %arrayidx7.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %16
  %17 = load i32, ptr %arrayidx7.i, align 4
  %add.i = add i32 %17, %13
  %18 = inttoptr i32 %add.i to ptr
  %19 = load i32, ptr %18, align 4
  %add8.i = add i32 %19, 1
  store i32 %add8.i, ptr %18, align 4
  br label %if.end52

if.end52:                                         ; preds = %add_partial.exit, %if.then50
  %slab_to_discard.1 = phi ptr [ %partial_slab.addr.0123, %if.then50 ], [ %slab_to_discard.0121, %add_partial.exit ]
  %tobool.not = icmp eq ptr %1, null
  br i1 %tobool.not, label %while.end, label %while.body

while.end:                                        ; preds = %if.end52
  %tobool53.not = icmp eq ptr %n.1, null
  br i1 %tobool53.not, label %if.end56, label %if.then54

if.then54:                                        ; preds = %while.end
  tail call void @_raw_spin_unlock_irqrestore(ptr noundef nonnull %n.1, i32 noundef %flags.1) #27
  br label %if.end56

if.end56:                                         ; preds = %if.then54, %while.end
  %tobool58.not126 = icmp eq ptr %slab_to_discard.1, null
  br i1 %tobool58.not126, label %while.end61, label %while.body59.lr.ph

while.body59.lr.ph:                               ; preds = %if.end56
  %flags.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 1
  br label %while.body59

while.body59:                                     ; preds = %discard_slab.exit, %while.body59.lr.ph
  %slab_to_discard.2127 = phi ptr [ %slab_to_discard.1, %while.body59.lr.ph ], [ %21, %discard_slab.exit ]
  %20 = getelementptr inbounds %struct.slab, ptr %slab_to_discard.2127, i32 0, i32 1
  %21 = load ptr, ptr %20, align 4
  %22 = load ptr, ptr %s, align 4
  %arrayidx.i96 = getelementptr %struct.kmem_cache_cpu, ptr %22, i32 0, i32 5, i32 14
  %23 = ptrtoint ptr %arrayidx.i96 to i32
  %24 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i97 = and i32 %24, -16384
  %25 = inttoptr i32 %and.i.i97 to ptr
  %cpu.i98 = getelementptr inbounds %struct.thread_info, ptr %25, i32 0, i32 3
  %26 = load i32, ptr %cpu.i98, align 4
  %arrayidx7.i99 = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %26
  %27 = load i32, ptr %arrayidx7.i99, align 4
  %add.i100 = add i32 %27, %23
  %28 = inttoptr i32 %add.i100 to ptr
  %29 = load i32, ptr %28, align 4
  %add8.i101 = add i32 %29, 1
  store i32 %add8.i101, ptr %28, align 4
  %30 = load volatile i32, ptr %slab_to_discard.2127, align 4
  %cmp.i.not.i.i.i.i = icmp eq i32 %30, -1
  br i1 %cmp.i.not.i.i.i.i, label %if.then.i.i.i.i, label %slab_nid.exit.i, !prof !13

if.then.i.i.i.i:                                  ; preds = %while.body59
  tail call void @dump_page(ptr noundef nonnull %slab_to_discard.2127, ptr noundef nonnull @.str.88) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/mm.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 1368, 0\0A.popsection", ""() #24, !srcloc !37
  unreachable

slab_nid.exit.i:                                  ; preds = %while.body59
  %31 = getelementptr inbounds %struct.slab, ptr %slab_to_discard.2127, i32 0, i32 4
  %bf.load.i = load i32, ptr %31, align 4
  %bf.lshr.i = lshr i32 %bf.load.i, 1
  %bf.clear.i = and i32 %bf.lshr.i, 32767
  %32 = load ptr, ptr %arrayidx.i, align 4
  %nr_slabs.i.i = getelementptr inbounds %struct.kmem_cache_node, ptr %32, i32 0, i32 3
  tail call void @llvm.prefetch.p0(ptr %nr_slabs.i.i, i32 1, i32 3, i32 1) #24
  %33 = tail call { i32, i32 } asm sideeffect "@ atomic_sub\0A1:\09ldrex\09$0, [$3]\0A\09sub\09$0, $0, $4\0A\09strex\09$1, $0, [$3]\0A\09teq\09$1, #0\0A\09bne\091b", "=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %nr_slabs.i.i, ptr %nr_slabs.i.i, i32 1, ptr elementtype(i32) %nr_slabs.i.i) #24, !srcloc !48
  %total_objects.i.i = getelementptr inbounds %struct.kmem_cache_node, ptr %32, i32 0, i32 4
  tail call void @llvm.prefetch.p0(ptr %total_objects.i.i, i32 1, i32 3, i32 1) #24
  %34 = tail call { i32, i32 } asm sideeffect "@ atomic_sub\0A1:\09ldrex\09$0, [$3]\0A\09sub\09$0, $0, $4\0A\09strex\09$1, $0, [$3]\0A\09teq\09$1, #0\0A\09bne\091b", "=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %total_objects.i.i, ptr %total_objects.i.i, i32 %bf.clear.i, ptr elementtype(i32) %total_objects.i.i) #24, !srcloc !48
  %35 = load i32, ptr %flags.i.i, align 4
  %and.i.i102 = and i32 %35, 524288
  %tobool.not.i.i = icmp eq i32 %and.i.i102, 0
  br i1 %tobool.not.i.i, label %if.else.i.i, label %if.then.i.i, !prof !14

if.then.i.i:                                      ; preds = %slab_nid.exit.i
  tail call void @call_rcu(ptr noundef %20, ptr noundef nonnull @rcu_free_slab) #27
  br label %discard_slab.exit

if.else.i.i:                                      ; preds = %slab_nid.exit.i
  tail call fastcc void @__free_slab(ptr noundef %s, ptr noundef nonnull %slab_to_discard.2127) #27
  br label %discard_slab.exit

discard_slab.exit:                                ; preds = %if.else.i.i, %if.then.i.i
  %36 = load ptr, ptr %s, align 4
  %arrayidx.i103 = getelementptr %struct.kmem_cache_cpu, ptr %36, i32 0, i32 5, i32 11
  %37 = ptrtoint ptr %arrayidx.i103 to i32
  %38 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i104 = and i32 %38, -16384
  %39 = inttoptr i32 %and.i.i104 to ptr
  %cpu.i105 = getelementptr inbounds %struct.thread_info, ptr %39, i32 0, i32 3
  %40 = load i32, ptr %cpu.i105, align 4
  %arrayidx7.i106 = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %40
  %41 = load i32, ptr %arrayidx7.i106, align 4
  %add.i107 = add i32 %41, %37
  %42 = inttoptr i32 %add.i107 to ptr
  %43 = load i32, ptr %42, align 4
  %add8.i108 = add i32 %43, 1
  store i32 %add8.i108, ptr %42, align 4
  %tobool58.not = icmp eq ptr %21, null
  br i1 %tobool58.not, label %while.end61, label %while.body59

while.end61:                                      ; preds = %discard_slab.exit, %if.end56, %entry
  ret void
}

; Function Attrs: inlinehint nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc zeroext i1 @__cmpxchg_double_slab(ptr nocapture noundef readonly %s, ptr noundef %slab, ptr noundef readnone %freelist_old, i32 noundef %counters_old, ptr noundef %freelist_new, i32 noundef %counters_new) unnamed_addr #5 align 64 {
entry:
  %0 = load i32, ptr @debug_locks, align 4
  %tobool.not = icmp eq i32 %0, 0
  br i1 %tobool.not, label %if.end86, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %1 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i = and i32 %1, -16384
  %2 = inttoptr i32 %and.i.i.i to ptr
  %preempt_count.i.i = getelementptr inbounds %struct.thread_info, ptr %2, i32 0, i32 1
  %3 = load volatile i32, ptr %preempt_count.i.i, align 4
  %add.i = add i32 %3, 1
  store volatile i32 %add.i, ptr %preempt_count.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !88
  %4 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i = and i32 %4, -16384
  %5 = inttoptr i32 %and.i to ptr
  %cpu = getelementptr inbounds %struct.thread_info, ptr %5, i32 0, i32 3
  %6 = load i32, ptr %cpu, align 4
  %arrayidx = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %6
  %7 = load i32, ptr %arrayidx, align 4
  %add = add i32 %7, ptrtoint (ptr @lockdep_recursion to i32)
  %8 = inttoptr i32 %add to ptr
  %9 = load volatile i32, ptr %8, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !89
  %10 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i2 = and i32 %10, -16384
  %11 = inttoptr i32 %and.i.i.i2 to ptr
  %preempt_count.i.i3 = getelementptr inbounds %struct.thread_info, ptr %11, i32 0, i32 1
  %12 = load volatile i32, ptr %preempt_count.i.i3, align 4
  %sub.i = add i32 %12, -1
  store volatile i32 %sub.i, ptr %preempt_count.i.i3, align 4
  %tobool20.not = icmp eq i32 %9, 0
  br i1 %tobool20.not, label %land.end, label %if.end86

land.end:                                         ; preds = %land.lhs.true
  %13 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i4 = and i32 %13, -16384
  %14 = inttoptr i32 %and.i.i.i4 to ptr
  %preempt_count.i.i5 = getelementptr inbounds %struct.thread_info, ptr %14, i32 0, i32 1
  %15 = load volatile i32, ptr %preempt_count.i.i5, align 4
  %add.i6 = add i32 %15, 1
  store volatile i32 %add.i6, ptr %preempt_count.i.i5, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !90
  %16 = load i32, ptr %cpu, align 4
  %arrayidx44 = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %16
  %17 = load i32, ptr %arrayidx44, align 4
  %add45 = add i32 %17, ptrtoint (ptr @hardirqs_enabled to i32)
  %18 = inttoptr i32 %add45 to ptr
  %19 = load volatile i32, ptr %18, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !91
  %20 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i7 = and i32 %20, -16384
  %21 = inttoptr i32 %and.i.i.i7 to ptr
  %preempt_count.i.i8 = getelementptr inbounds %struct.thread_info, ptr %21, i32 0, i32 1
  %22 = load volatile i32, ptr %preempt_count.i.i8, align 4
  %sub.i9 = add i32 %22, -1
  store volatile i32 %sub.i9, ptr %preempt_count.i.i8, align 4
  %tobool52 = icmp ne i32 %19, 0
  %.b1 = load i1, ptr @__cmpxchg_double_slab.__already_done, align 1
  %lnot57 = xor i1 %.b1, true
  %23 = select i1 %tobool52, i1 %lnot57, i1 false
  br i1 %23, label %if.then, label %if.end86, !prof !13

if.then:                                          ; preds = %land.end
  store i1 true, ptr @__cmpxchg_double_slab.__already_done, align 1
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.2, i32 noundef 484, i32 noundef 9, ptr noundef null) #27
  br label %if.end86

if.end86:                                         ; preds = %if.then, %land.end, %land.lhs.true, %entry
  %24 = getelementptr inbounds %struct.page, ptr %slab, i32 0, i32 1
  %25 = load volatile i32, ptr %24, align 4
  %and.i.i.i10 = and i32 %25, 1
  %tobool.not.i.i = icmp eq i32 %and.i.i.i10, 0
  br i1 %tobool.not.i.i, label %do.end8.i.i, label %if.then.i.i, !prof !14

if.then.i.i:                                      ; preds = %if.end86
  tail call void @dump_page(ptr noundef %slab, ptr noundef nonnull @.str.29) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slub.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 447, 0\0A.popsection", ""() #24, !srcloc !70
  unreachable

do.end8.i.i:                                      ; preds = %if.end86
  %26 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i.i.i.i = and i32 %26, -16384
  %27 = inttoptr i32 %and.i.i.i.i.i.i to ptr
  %preempt_count.i.i.i.i.i = getelementptr inbounds %struct.thread_info, ptr %27, i32 0, i32 1
  %28 = load volatile i32, ptr %preempt_count.i.i.i.i.i, align 4
  %add.i.i.i.i = add i32 %28, 1
  store volatile i32 %add.i.i.i.i, ptr %preempt_count.i.i.i.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !71
  br label %while.cond.i.i.i

while.cond.i.i.i:                                 ; preds = %do.body14.i.i.i, %do.end8.i.i
  %29 = load volatile i32, ptr %slab, align 4
  %and.i.i.i.i.i = and i32 %29, 1
  %tobool.not.i.i.i.i.i = icmp eq i32 %and.i.i.i.i.i, 0
  br i1 %tobool.not.i.i.i.i.i, label %test_and_set_bit_lock.exit.i.i.i, label %do.body2.i.i.i, !prof !72

test_and_set_bit_lock.exit.i.i.i:                 ; preds = %while.cond.i.i.i
  tail call void @llvm.prefetch.p0(ptr %slab, i32 1, i32 3, i32 1) #24
  %30 = tail call { i32, i32, i32 } asm sideeffect "@ atomic_fetch_or\0A1:\09ldrex\09$0, [$4]\0A\09orr\09$1, $0, $5\0A\09strex\09$2, $1, [$4]\0A\09teq\09$2, #0\0A\09bne\091b", "=&r,=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %slab, ptr %slab, i32 1, ptr elementtype(i32) %slab) #24, !srcloc !73
  %asmresult.i.i.i.i.i.i.i.i = extractvalue { i32, i32, i32 } %30, 0
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #24, !srcloc !74
  %and1.i.i.i.i.i = and i32 %asmresult.i.i.i.i.i.i.i.i, 1
  %phi.cmp.i.not.i.i.i = icmp eq i32 %and1.i.i.i.i.i, 0
  br i1 %phi.cmp.i.not.i.i.i, label %slab_lock.exit, label %do.body2.i.i.i, !prof !14

do.body2.i.i.i:                                   ; preds = %test_and_set_bit_lock.exit.i.i.i, %while.cond.i.i.i
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !75
  %31 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i1.i.i.i = and i32 %31, -16384
  %32 = inttoptr i32 %and.i.i.i1.i.i.i to ptr
  %preempt_count.i.i2.i.i.i = getelementptr inbounds %struct.thread_info, ptr %32, i32 0, i32 1
  %33 = load volatile i32, ptr %preempt_count.i.i2.i.i.i, align 4
  %sub.i.i.i.i = add i32 %33, -1
  store volatile i32 %sub.i.i.i.i, ptr %preempt_count.i.i2.i.i.i, align 4
  br label %do.body4.i.i.i

do.body4.i.i.i:                                   ; preds = %do.body4.i.i.i, %do.body2.i.i.i
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #24, !srcloc !76
  tail call void asm sideeffect "nop; nop; nop; nop; nop; nop; nop; nop; nop; nop;", ""() #24, !srcloc !77
  %34 = load volatile i32, ptr %slab, align 4
  %and1.i.i.i.i = and i32 %34, 1
  %tobool12.not.i.i.i = icmp eq i32 %and1.i.i.i.i, 0
  br i1 %tobool12.not.i.i.i, label %do.body14.i.i.i, label %do.body4.i.i.i

do.body14.i.i.i:                                  ; preds = %do.body4.i.i.i
  %35 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i3.i.i.i = and i32 %35, -16384
  %36 = inttoptr i32 %and.i.i.i3.i.i.i to ptr
  %preempt_count.i.i4.i.i.i = getelementptr inbounds %struct.thread_info, ptr %36, i32 0, i32 1
  %37 = load volatile i32, ptr %preempt_count.i.i4.i.i.i, align 4
  %add.i5.i.i.i = add i32 %37, 1
  store volatile i32 %add.i5.i.i.i, ptr %preempt_count.i.i4.i.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !78
  br label %while.cond.i.i.i

slab_lock.exit:                                   ; preds = %test_and_set_bit_lock.exit.i.i.i
  %freelist = getelementptr inbounds %struct.slab, ptr %slab, i32 0, i32 3
  %38 = load ptr, ptr %freelist, align 4
  %cmp = icmp eq ptr %38, %freelist_old
  br i1 %cmp, label %land.lhs.true96, label %if.end100

land.lhs.true96:                                  ; preds = %slab_lock.exit
  %39 = getelementptr inbounds %struct.slab, ptr %slab, i32 0, i32 4
  %40 = load i32, ptr %39, align 4
  %cmp97 = icmp eq i32 %40, %counters_old
  br i1 %cmp97, label %if.then98, label %if.end100

if.then98:                                        ; preds = %land.lhs.true96
  store ptr %freelist_new, ptr %freelist, align 4
  store i32 %counters_new, ptr %39, align 4
  %41 = load volatile i32, ptr %24, align 4
  %and.i.i.i11 = and i32 %41, 1
  %tobool.not.i.i12 = icmp eq i32 %and.i.i.i11, 0
  br i1 %tobool.not.i.i12, label %do.end8.i.i15, label %if.then.i.i13, !prof !14

if.then.i.i13:                                    ; preds = %if.then98
  tail call void @dump_page(ptr noundef %slab, ptr noundef nonnull @.str.29) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slub.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 455, 0\0A.popsection", ""() #24, !srcloc !79
  unreachable

do.end8.i.i15:                                    ; preds = %if.then98
  %42 = load volatile i32, ptr %slab, align 4
  %and1.i.i.i.i14 = and i32 %42, 1
  %tobool.not.i.i.i = icmp eq i32 %and1.i.i.i.i14, 0
  br i1 %tobool.not.i.i.i, label %do.body4.i.i.i16, label %cleanup, !prof !13

do.body4.i.i.i16:                                 ; preds = %do.end8.i.i15
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/bit_spinlock.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 77, 0\0A.popsection", ""() #24, !srcloc !80
  unreachable

if.end100:                                        ; preds = %land.lhs.true96, %slab_lock.exit
  %43 = load volatile i32, ptr %24, align 4
  %and.i.i.i21 = and i32 %43, 1
  %tobool.not.i.i22 = icmp eq i32 %and.i.i.i21, 0
  br i1 %tobool.not.i.i22, label %do.end8.i.i26, label %if.then.i.i23, !prof !14

if.then.i.i23:                                    ; preds = %if.end100
  tail call void @dump_page(ptr noundef %slab, ptr noundef nonnull @.str.29) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slub.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 455, 0\0A.popsection", ""() #24, !srcloc !79
  unreachable

do.end8.i.i26:                                    ; preds = %if.end100
  %44 = load volatile i32, ptr %slab, align 4
  %and1.i.i.i.i24 = and i32 %44, 1
  %tobool.not.i.i.i25 = icmp eq i32 %and1.i.i.i.i24, 0
  br i1 %tobool.not.i.i.i25, label %do.body4.i.i.i27, label %do.end105, !prof !13

do.body4.i.i.i27:                                 ; preds = %do.end8.i.i26
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/bit_spinlock.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 77, 0\0A.popsection", ""() #24, !srcloc !80
  unreachable

cleanup:                                          ; preds = %do.end8.i.i15
  %45 = load volatile i32, ptr %slab, align 4
  %and.i.i.i.i.i17 = and i32 %45, -2
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #24, !srcloc !81
  store volatile i32 %and.i.i.i.i.i17, ptr %slab, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !82
  %46 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i.i.i.i18 = and i32 %46, -16384
  %47 = inttoptr i32 %and.i.i.i.i.i.i18 to ptr
  %preempt_count.i.i.i.i.i19 = getelementptr inbounds %struct.thread_info, ptr %47, i32 0, i32 1
  %48 = load volatile i32, ptr %preempt_count.i.i.i.i.i19, align 4
  %sub.i.i.i.i20 = add i32 %48, -1
  store volatile i32 %sub.i.i.i.i20, ptr %preempt_count.i.i.i.i.i19, align 4
  br label %return

do.end105:                                        ; preds = %do.end8.i.i26
  %49 = load volatile i32, ptr %slab, align 4
  %and.i.i.i.i.i28 = and i32 %49, -2
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #24, !srcloc !81
  store volatile i32 %and.i.i.i.i.i28, ptr %slab, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !82
  %50 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i.i.i.i29 = and i32 %50, -16384
  %51 = inttoptr i32 %and.i.i.i.i.i.i29 to ptr
  %preempt_count.i.i.i.i.i30 = getelementptr inbounds %struct.thread_info, ptr %51, i32 0, i32 1
  %52 = load volatile i32, ptr %preempt_count.i.i.i.i.i30, align 4
  %sub.i.i.i.i31 = add i32 %52, -1
  store volatile i32 %sub.i.i.i.i31, ptr %preempt_count.i.i.i.i.i30, align 4
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #24, !srcloc !92
  tail call void asm sideeffect "nop; nop; nop; nop; nop; nop; nop; nop; nop; nop;", ""() #24, !srcloc !93
  %53 = load ptr, ptr %s, align 4
  %arrayidx.i = getelementptr %struct.kmem_cache_cpu, ptr %53, i32 0, i32 5, i32 21
  %54 = ptrtoint ptr %arrayidx.i to i32
  %55 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i = and i32 %55, -16384
  %56 = inttoptr i32 %and.i.i to ptr
  %cpu.i = getelementptr inbounds %struct.thread_info, ptr %56, i32 0, i32 3
  %57 = load i32, ptr %cpu.i, align 4
  %arrayidx7.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %57
  %58 = load i32, ptr %arrayidx7.i, align 4
  %add.i33 = add i32 %58, %54
  %59 = inttoptr i32 %add.i33 to ptr
  %60 = load i32, ptr %59, align 4
  %add8.i = add i32 %60, 1
  store i32 %add8.i, ptr %59, align 4
  br label %return

return:                                           ; preds = %do.end105, %cleanup
  %cleanup.dest.slot.038 = phi i1 [ true, %cleanup ], [ false, %do.end105 ]
  ret i1 %cleanup.dest.slot.038
}

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @lock_is_held_type(ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local zeroext i1 @__list_del_entry_valid(ptr noundef) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local zeroext i1 @__list_add_valid(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local void @call_rcu(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal void @rcu_free_slab(ptr noundef %h) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %add.ptr = getelementptr i8, ptr %h, i32 -4
  %slab_cache = getelementptr i8, ptr %h, i32 8
  %0 = load ptr, ptr %slab_cache, align 4
  tail call fastcc void @__free_slab(ptr noundef %0, ptr noundef %add.ptr) #25
  ret void
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc void @__free_slab(ptr noundef %s, ptr noundef %slab) unnamed_addr #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load volatile i32, ptr %slab, align 4
  %cmp.i.not.i.i.i = icmp eq i32 %0, -1
  br i1 %cmp.i.not.i.i.i, label %if.then.i.i.i, label %PageHead.exit.i.i, !prof !13

if.then.i.i.i:                                    ; preds = %entry
  tail call void @dump_page(ptr noundef %slab, ptr noundef nonnull @.str.33) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 698, 0\0A.popsection", ""() #24, !srcloc !51
  unreachable

PageHead.exit.i.i:                                ; preds = %entry
  %1 = load volatile i32, ptr %slab, align 4
  %2 = and i32 %1, 65536
  %tobool.not.i.i36 = icmp eq i32 %2, 0
  br i1 %tobool.not.i.i36, label %folio_order.exit, label %if.end.i.i

if.end.i.i:                                       ; preds = %PageHead.exit.i.i
  %3 = getelementptr %struct.page, ptr %slab, i32 1, i32 1
  %compound_order.i.i = getelementptr inbounds %struct.anon.47, ptr %3, i32 0, i32 2
  %4 = load i8, ptr %compound_order.i.i, align 1
  %conv.i.i = zext i8 %4 to i32
  br label %folio_order.exit

folio_order.exit:                                 ; preds = %if.end.i.i, %PageHead.exit.i.i
  %retval.0.i.i = phi i32 [ %conv.i.i, %if.end.i.i ], [ 0, %PageHead.exit.i.i ]
  %shl = shl nuw i32 1, %retval.0.i.i
  callbr void asm sideeffect "1:\0A\09b ${1:l}\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr nonnull @slub_debug_enabled, ptr blockaddress(@__free_slab, %if.then37.i)) #24
          to label %if.end [label %if.then37.i], !srcloc !10

if.then37.i:                                      ; preds = %folio_order.exit
  %flags38.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 1
  %5 = load i32, ptr %flags38.i, align 4
  %and39.i = and i32 %5, 256
  %tobool40.i.not = icmp eq i32 %and39.i, 0
  br i1 %tobool40.i.not, label %if.end, label %if.then

if.then:                                          ; preds = %if.then37.i
  tail call fastcc void @slab_pad_check(ptr noundef %s, ptr noundef %slab) #25
  %call.i.i = tail call ptr @page_address(ptr noundef %slab) #27
  callbr void asm sideeffect "1:\0A\09b ${1:l}\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr nonnull @slub_debug_enabled, ptr blockaddress(@__free_slab, %if.then37.i.i)) #24
          to label %fixup_red_left.exit [label %if.then37.i.i], !srcloc !10

if.then37.i.i:                                    ; preds = %if.then
  %6 = load i32, ptr %flags38.i, align 4
  %and39.i.i = and i32 %6, 1024
  %tobool40.i.not.i = icmp eq i32 %and39.i.i, 0
  br i1 %tobool40.i.not.i, label %fixup_red_left.exit, label %if.then.i37

if.then.i37:                                      ; preds = %if.then37.i.i
  %red_left_pad.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 17
  %7 = load i32, ptr %red_left_pad.i, align 4
  %add.ptr.i = getelementptr i8, ptr %call.i.i, i32 %7
  br label %fixup_red_left.exit

fixup_red_left.exit:                              ; preds = %if.then.i37, %if.then37.i.i, %if.then
  %p.addr.0.i = phi ptr [ %add.ptr.i, %if.then.i37 ], [ %call.i.i, %if.then37.i.i ], [ %call.i.i, %if.then ]
  %call.i.i3846 = tail call ptr @page_address(ptr noundef %slab) #27
  %8 = getelementptr inbounds %struct.slab, ptr %slab, i32 0, i32 4
  %bf.load47 = load i32, ptr %8, align 4
  %bf.lshr48 = lshr i32 %bf.load47, 1
  %bf.clear49 = and i32 %bf.lshr48, 32767
  %size = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 3
  %9 = load i32, ptr %size, align 4
  %mul50 = mul i32 %bf.clear49, %9
  %add.ptr51 = getelementptr i8, ptr %call.i.i3846, i32 %mul50
  %cmp52 = icmp ult ptr %p.addr.0.i, %add.ptr51
  br i1 %cmp52, label %for.body, label %if.end

for.body:                                         ; preds = %for.body, %fixup_red_left.exit
  %p.053 = phi ptr [ %add.ptr8, %for.body ], [ %p.addr.0.i, %fixup_red_left.exit ]
  %call6 = tail call fastcc i32 @check_object(ptr noundef %s, ptr noundef %slab, ptr noundef %p.053, i8 noundef zeroext -69) #25
  %10 = load i32, ptr %size, align 4
  %add.ptr8 = getelementptr i8, ptr %p.053, i32 %10
  %call.i.i38 = tail call ptr @page_address(ptr noundef %slab) #27
  %bf.load = load i32, ptr %8, align 4
  %bf.lshr = lshr i32 %bf.load, 1
  %bf.clear = and i32 %bf.lshr, 32767
  %11 = load i32, ptr %size, align 4
  %mul = mul i32 %bf.clear, %11
  %add.ptr = getelementptr i8, ptr %call.i.i38, i32 %mul
  %cmp = icmp ult ptr %add.ptr8, %add.ptr
  br i1 %cmp, label %for.body, label %if.end

if.end:                                           ; preds = %for.body, %fixup_red_left.exit, %if.then37.i, %folio_order.exit
  %12 = getelementptr inbounds %struct.page, ptr %slab, i32 0, i32 1
  %13 = load volatile i32, ptr %12, align 4
  %and.i.i.i.i = and i32 %13, 1
  %tobool.not.i.i.i = icmp eq i32 %and.i.i.i.i, 0
  br i1 %tobool.not.i.i.i, label %__slab_clear_pfmemalloc.exit, label %if.then.i.i.i39, !prof !14

if.then.i.i.i39:                                  ; preds = %if.end
  tail call void @dump_page(ptr noundef %slab, ptr noundef nonnull @.str.29) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 260, 0\0A.popsection", ""() #24, !srcloc !28
  unreachable

__slab_clear_pfmemalloc.exit:                     ; preds = %if.end
  %14 = load i32, ptr %slab, align 4
  %and.i.i.i40 = and i32 %14, -33
  store i32 %and.i.i.i40, ptr %slab, align 4
  %15 = load volatile i32, ptr %12, align 4
  %and.i.i.i = and i32 %15, 1
  %tobool.not.i.i = icmp eq i32 %and.i.i.i, 0
  br i1 %tobool.not.i.i, label %__folio_clear_slab.exit, label %if.then.i.i, !prof !14

if.then.i.i:                                      ; preds = %__slab_clear_pfmemalloc.exit
  tail call void @dump_page(ptr noundef %slab, ptr noundef nonnull @.str.29) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 260, 0\0A.popsection", ""() #24, !srcloc !28
  unreachable

__folio_clear_slab.exit:                          ; preds = %__slab_clear_pfmemalloc.exit
  %and.i.i = and i32 %14, -545
  store i32 %and.i.i, ptr %slab, align 4
  %mapping = getelementptr inbounds %struct.anon.87, ptr %slab, i32 0, i32 2
  store ptr null, ptr %mapping, align 4
  %16 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i = and i32 %16, -16384
  %17 = inttoptr i32 %and.i to ptr
  %task = getelementptr inbounds %struct.thread_info, ptr %17, i32 0, i32 2
  %18 = load ptr, ptr %task, align 8
  %reclaim_state = getelementptr inbounds %struct.task_struct, ptr %18, i32 0, i32 149
  %19 = load ptr, ptr %reclaim_state, align 16
  %tobool.not = icmp eq ptr %19, null
  br i1 %tobool.not, label %if.end14, label %if.then10

if.then10:                                        ; preds = %__folio_clear_slab.exit
  %20 = load i32, ptr %19, align 4
  %add = add i32 %20, %shl
  store i32 %add, ptr %19, align 4
  br label %if.end14

if.end14:                                         ; preds = %if.then10, %__folio_clear_slab.exit
  callbr void asm sideeffect "1:\0A\09b ${1:l}\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr getelementptr inbounds (i8, ptr @memcg_kmem_enabled_key, i32 1), ptr blockaddress(@__free_slab, %unaccount_slab.exit)) #24
          to label %if.then.i [label %unaccount_slab.exit], !srcloc !10

if.then.i:                                        ; preds = %if.end14
  %memcg_data1.i.i = getelementptr inbounds %struct.slab, ptr %slab, i32 0, i32 7
  %21 = load volatile i32, ptr %memcg_data1.i.i, align 4
  %tobool.i.i = icmp ne i32 %21, 0
  %and.i.i42 = and i32 %21, 1
  %tobool3.not.i.i = icmp eq i32 %and.i.i42, 0
  %22 = and i1 %tobool.i.i, %tobool3.not.i.i
  br i1 %22, label %if.then.i.i43, label %do.body15.i.i, !prof !13

if.then.i.i43:                                    ; preds = %if.then.i
  tail call void @dump_page(ptr noundef %slab, ptr noundef nonnull @.str.90) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slab.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 445, 0\0A.popsection", ""() #24, !srcloc !35
  unreachable

do.body15.i.i:                                    ; preds = %if.then.i
  %and16.i.i = and i32 %21, 2
  %tobool17.not.i.i = icmp eq i32 %and16.i.i, 0
  br i1 %tobool17.not.i.i, label %memcg_free_slab_cgroups.exit, label %if.then24.i.i, !prof !14

if.then24.i.i:                                    ; preds = %do.body15.i.i
  tail call void @dump_page(ptr noundef %slab, ptr noundef nonnull @.str.91) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slab.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 446, 0\0A.popsection", ""() #24, !srcloc !36
  unreachable

memcg_free_slab_cgroups.exit:                     ; preds = %do.body15.i.i
  %and35.i.i = and i32 %21, -4
  %23 = inttoptr i32 %and35.i.i to ptr
  tail call void @kfree(ptr noundef %23) #27
  store i32 0, ptr %memcg_data1.i.i, align 4
  br label %unaccount_slab.exit

unaccount_slab.exit:                              ; preds = %memcg_free_slab_cgroups.exit, %if.end14
  %24 = load volatile i32, ptr %slab, align 4
  %cmp.i.not.i.i.i.i = icmp eq i32 %24, -1
  br i1 %cmp.i.not.i.i.i.i, label %if.then.i.i.i.i, label %slab_pgdat.exit, !prof !13

if.then.i.i.i.i:                                  ; preds = %unaccount_slab.exit
  tail call void @dump_page(ptr noundef %slab, ptr noundef nonnull @.str.88) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/mm.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 1368, 0\0A.popsection", ""() #24, !srcloc !37
  unreachable

slab_pgdat.exit:                                  ; preds = %unaccount_slab.exit
  %flags.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 1
  %25 = load i32, ptr %flags.i, align 4
  %and.i44 = and i32 %25, 131072
  %tobool.not.i = icmp eq i32 %and.i44, 0
  %cond.i = select i1 %tobool.not.i, i32 6, i32 5
  %shl.neg.i = shl i32 -4096, %retval.0.i.i
  tail call void @mod_node_page_state(ptr noundef nonnull @contig_page_data, i32 noundef %cond.i, i32 noundef %shl.neg.i) #27
  tail call void @__free_pages(ptr noundef %slab, i32 noundef %retval.0.i.i) #27
  ret void
}

; Function Attrs: null_pointer_is_valid
declare dso_local void @__free_pages(ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local void @mod_node_page_state(ptr noundef, i32 noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @__traceiter_kmem_cache_free(ptr noundef, i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc zeroext i1 @slab_free_freelist_hook(ptr noundef %s, ptr nocapture noundef %head, ptr nocapture noundef %tail, ptr nocapture noundef %cnt) unnamed_addr #5 align 64 {
entry:
  %0 = load ptr, ptr %head, align 4
  %1 = load ptr, ptr %tail, align 4
  %tobool.not = icmp eq ptr %1, null
  %. = select i1 %tobool.not, ptr %0, ptr %1
  %2 = load ptr, ptr @__kfence_pool, align 4
  %sub.ptr.lhs.cast.i = ptrtoint ptr %0 to i32
  %sub.ptr.rhs.cast.i = ptrtoint ptr %2 to i32
  %sub.ptr.sub.i = sub i32 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i
  %cmp.i = icmp ult i32 %sub.ptr.sub.i, 2097152
  %tobool.i = icmp ne ptr %2, null
  %3 = select i1 %cmp.i, i1 %tobool.i, i1 false
  br i1 %3, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %flags.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 1
  %4 = load i32, ptr %flags.i, align 4
  %and.i.i = and i32 %4, 8388608
  %tobool.not.i.i = icmp eq i32 %and.i.i, 0
  br i1 %tobool.not.i.i, label %if.then.i.i, label %kmemleak_free_recursive.exit.i

if.then.i.i:                                      ; preds = %if.then
  tail call void @kmemleak_free(ptr noundef %0) #27
  br label %kmemleak_free_recursive.exit.i

kmemleak_free_recursive.exit.i:                   ; preds = %if.then.i.i, %if.then
  %object_size.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 4
  %5 = load i32, ptr %object_size.i, align 4
  tail call void @debug_check_no_locks_freed(ptr noundef %0, i32 noundef %5) #27
  %6 = load i32, ptr %flags.i, align 4
  %and.i = and i32 %6, 4194304
  %tobool.not.i = icmp eq i32 %and.i, 0
  br i1 %tobool.not.i, label %if.then.i, label %slab_free_hook.exit

if.then.i:                                        ; preds = %kmemleak_free_recursive.exit.i
  %7 = load i32, ptr %object_size.i, align 4
  tail call void @debug_check_no_obj_freed(ptr noundef %0, i32 noundef %7) #27
  br label %slab_free_hook.exit

slab_free_hook.exit:                              ; preds = %if.then.i, %kmemleak_free_recursive.exit.i
  %8 = tail call ptr @llvm.returnaddress(i32 0) #24
  %9 = ptrtoint ptr %8 to i32
  %call1.i.i = tail call zeroext i1 @__kasan_slab_free(ptr noundef %s, ptr noundef %0, i32 noundef %9, i1 noundef zeroext false) #27
  br label %cleanup

if.end:                                           ; preds = %entry
  store ptr null, ptr %head, align 4
  store ptr null, ptr %tail, align 4
  %offset.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 6
  %random.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 21
  %ctor.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 14
  %flags.i52 = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 1
  %object_size.i43 = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 4
  %red_left_pad.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 17
  %inuse.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 15
  %size.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 3
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end
  %next.0 = phi ptr [ %0, %if.end ], [ %15, %do.cond ]
  %10 = load i32, ptr %offset.i, align 4
  %add.ptr.i50 = getelementptr i8, ptr %next.0, i32 %10
  %11 = load i32, ptr %add.ptr.i50, align 4
  %12 = ptrtoint ptr %add.ptr.i50 to i32
  %13 = load i32, ptr %random.i.i.i, align 4
  %14 = tail call i32 @llvm.bswap.i32(i32 %12) #24
  %xor.i.i.i = xor i32 %13, %11
  %xor2.i.i.i = xor i32 %xor.i.i.i, %14
  %15 = inttoptr i32 %xor2.i.i.i to ptr
  callbr void asm sideeffect "1:\0A\09nop\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr getelementptr inbounds (i8, ptr @init_on_free, i32 1), ptr blockaddress(@slab_free_freelist_hook, %slab_want_init_on_free.exit)) #24
          to label %if.then.i51 [label %slab_want_init_on_free.exit], !srcloc !12

if.then.i51:                                      ; preds = %do.body
  %16 = load ptr, ptr %ctor.i, align 4
  %tobool15.not.i = icmp eq ptr %16, null
  br i1 %tobool15.not.i, label %lor.rhs.i, label %slab_want_init_on_free.exit

lor.rhs.i:                                        ; preds = %if.then.i51
  %17 = load i32, ptr %flags.i52, align 4
  %and.i53 = and i32 %17, 526336
  %tobool16.i = icmp eq i32 %and.i53, 0
  br label %slab_want_init_on_free.exit

slab_want_init_on_free.exit:                      ; preds = %lor.rhs.i, %if.then.i51, %do.body
  %retval.0.i = phi i1 [ false, %if.then.i51 ], [ %tobool16.i, %lor.rhs.i ], [ false, %do.body ]
  %18 = load i32, ptr %flags.i52, align 4
  %and.i.i40 = and i32 %18, 8388608
  %tobool.not.i.i41 = icmp eq i32 %and.i.i40, 0
  br i1 %tobool.not.i.i41, label %if.then.i.i42, label %kmemleak_free_recursive.exit.i46

if.then.i.i42:                                    ; preds = %slab_want_init_on_free.exit
  tail call void @kmemleak_free(ptr noundef %next.0) #27
  br label %kmemleak_free_recursive.exit.i46

kmemleak_free_recursive.exit.i46:                 ; preds = %if.then.i.i42, %slab_want_init_on_free.exit
  %19 = load i32, ptr %object_size.i43, align 4
  tail call void @debug_check_no_locks_freed(ptr noundef %next.0, i32 noundef %19) #27
  %20 = load i32, ptr %flags.i52, align 4
  %and.i44 = and i32 %20, 4194304
  %tobool.not.i45 = icmp eq i32 %and.i44, 0
  br i1 %tobool.not.i45, label %if.then.i47, label %if.end8.i

if.then.i47:                                      ; preds = %kmemleak_free_recursive.exit.i46
  %21 = load i32, ptr %object_size.i43, align 4
  tail call void @debug_check_no_obj_freed(ptr noundef %next.0, i32 noundef %21) #27
  br label %if.end8.i

if.end8.i:                                        ; preds = %if.then.i47, %kmemleak_free_recursive.exit.i46
  br i1 %retval.0.i, label %if.then10.i, label %slab_free_hook.exit49

if.then10.i:                                      ; preds = %if.end8.i
  %22 = load i32, ptr %object_size.i43, align 4
  %call14.i = tail call ptr @__memset(ptr noundef %next.0, i32 noundef 0, i32 noundef %22) #27
  %23 = load i32, ptr %flags.i52, align 4
  %and17.i = and i32 %23, 1024
  %tobool18.not.i = icmp eq i32 %and17.i, 0
  br i1 %tobool18.not.i, label %cond.end.i, label %cond.true.i

cond.true.i:                                      ; preds = %if.then10.i
  %24 = load i32, ptr %red_left_pad.i, align 4
  br label %cond.end.i

cond.end.i:                                       ; preds = %cond.true.i, %if.then10.i
  %cond.i = phi i32 [ %24, %cond.true.i ], [ 0, %if.then10.i ]
  %25 = load i32, ptr %inuse.i, align 4
  %add.ptr.i = getelementptr i8, ptr %next.0, i32 %25
  %26 = load i32, ptr %size.i, align 4
  %27 = add i32 %25, %cond.i
  %sub21.i = sub i32 %26, %27
  %call22.i = tail call ptr @__memset(ptr noundef %add.ptr.i, i32 noundef 0, i32 noundef %sub21.i) #27
  br label %slab_free_hook.exit49

slab_free_hook.exit49:                            ; preds = %cond.end.i, %if.end8.i
  %28 = tail call ptr @llvm.returnaddress(i32 0) #24
  %29 = ptrtoint ptr %28 to i32
  %call1.i.i48 = tail call zeroext i1 @__kasan_slab_free(ptr noundef %s, ptr noundef %next.0, i32 noundef %29, i1 noundef zeroext %retval.0.i) #27
  br i1 %call1.i.i48, label %if.else, label %if.then5

if.then5:                                         ; preds = %slab_free_hook.exit49
  %30 = load ptr, ptr %head, align 4
  %cmp.i54 = icmp eq ptr %next.0, %30
  br i1 %cmp.i54, label %do.body2.i, label %set_freepointer.exit, !prof !13

do.body2.i:                                       ; preds = %if.then5
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slub.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 379, 0\0A.popsection", ""() #24, !srcloc !30
  unreachable

set_freepointer.exit:                             ; preds = %if.then5
  %31 = ptrtoint ptr %next.0 to i32
  %32 = load i32, ptr %offset.i, align 4
  %add.i = add i32 %32, %31
  %33 = inttoptr i32 %add.i to ptr
  %34 = ptrtoint ptr %30 to i32
  %35 = load i32, ptr %random.i.i.i, align 4
  %36 = tail call i32 @llvm.bswap.i32(i32 %add.i) #24
  %xor.i.i = xor i32 %35, %34
  %xor2.i.i = xor i32 %xor.i.i, %36
  %37 = inttoptr i32 %xor2.i.i to ptr
  store ptr %37, ptr %33, align 4
  store ptr %next.0, ptr %head, align 4
  %38 = load ptr, ptr %tail, align 4
  %tobool6.not = icmp eq ptr %38, null
  br i1 %tobool6.not, label %if.then7, label %do.cond

if.then7:                                         ; preds = %set_freepointer.exit
  store ptr %next.0, ptr %tail, align 4
  br label %do.cond

if.else:                                          ; preds = %slab_free_hook.exit49
  %39 = load i32, ptr %cnt, align 4
  %dec = add i32 %39, -1
  store i32 %dec, ptr %cnt, align 4
  br label %do.cond

do.cond:                                          ; preds = %if.else, %if.then7, %set_freepointer.exit
  %cmp.not = icmp eq ptr %next.0, %.
  br i1 %cmp.not, label %do.end, label %do.body

do.end:                                           ; preds = %do.cond
  %40 = load ptr, ptr %head, align 4
  %41 = load ptr, ptr %tail, align 4
  %cmp10 = icmp eq ptr %40, %41
  br i1 %cmp10, label %if.then11, label %if.end12

if.then11:                                        ; preds = %do.end
  store ptr null, ptr %tail, align 4
  %.pre = load ptr, ptr %head, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %do.end
  %42 = phi ptr [ %.pre, %if.then11 ], [ %40, %do.end ]
  %cmp13 = icmp ne ptr %42, null
  br label %cleanup

cleanup:                                          ; preds = %if.end12, %slab_free_hook.exit
  %retval.0 = phi i1 [ true, %slab_free_hook.exit ], [ %cmp13, %if.end12 ]
  ret i1 %retval.0
}

; Function Attrs: null_pointer_is_valid
declare dso_local void @debug_check_no_locks_freed(ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local void @debug_check_no_obj_freed(ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local void @kmemleak_free(ptr noundef) local_unnamed_addr #3 section ".ref.text"

; Function Attrs: null_pointer_is_valid
declare dso_local zeroext i1 @__kasan_slab_free(ptr noundef, ptr noundef, i32 noundef, i1 noundef zeroext) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local void @obj_cgroup_uncharge(ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local void @mod_objcg_state(ptr noundef, ptr noundef, i32 noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc void @obj_cgroup_put(ptr noundef %objcg) unnamed_addr #5 align 64 {
entry:
  %0 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i.i.i.i.i = and i32 %0, -16384
  %1 = inttoptr i32 %and.i.i.i.i.i.i.i to ptr
  %preempt_count.i.i.i.i.i.i = getelementptr inbounds %struct.thread_info, ptr %1, i32 0, i32 1
  %2 = load volatile i32, ptr %preempt_count.i.i.i.i.i.i, align 4
  %add.i.i.i.i.i = add i32 %2, 1
  store volatile i32 %add.i.i.i.i.i, ptr %preempt_count.i.i.i.i.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !94
  tail call fastcc void @rcu_lock_acquire(ptr noundef nonnull @rcu_lock_map) #27
  %call.i.i.i = tail call zeroext i1 @rcu_is_watching() #27
  br i1 %call.i.i.i, label %rcu_read_lock.exit.i.i, label %land.lhs.true.i.i.i

land.lhs.true.i.i.i:                              ; preds = %entry
  %call1.i.i.i = tail call i32 @debug_lockdep_rcu_enabled() #27
  %tobool.not.i.i.i = icmp eq i32 %call1.i.i.i, 0
  br i1 %tobool.not.i.i.i, label %rcu_read_lock.exit.i.i, label %land.lhs.true2.i.i.i

land.lhs.true2.i.i.i:                             ; preds = %land.lhs.true.i.i.i
  %.b4.i.i.i = load i1, ptr @rcu_read_lock.__warned, align 1
  br i1 %.b4.i.i.i, label %rcu_read_lock.exit.i.i, label %if.then.i.i.i

if.then.i.i.i:                                    ; preds = %land.lhs.true2.i.i.i
  store i1 true, ptr @rcu_read_lock.__warned, align 1
  tail call void @lockdep_rcu_suspicious(ptr noundef nonnull @.str.94, i32 noundef 696, ptr noundef nonnull @.str.95) #27
  br label %rcu_read_lock.exit.i.i

rcu_read_lock.exit.i.i:                           ; preds = %if.then.i.i.i, %land.lhs.true2.i.i.i, %land.lhs.true.i.i.i, %entry
  %3 = load volatile i32, ptr %objcg, align 4
  %and.i.i.i = and i32 %3, 3
  %tobool.not.i1.i.i = icmp eq i32 %and.i.i.i, 0
  br i1 %tobool.not.i1.i.i, label %do.body1.i.i, label %if.else.i.i, !prof !14

do.body1.i.i:                                     ; preds = %rcu_read_lock.exit.i.i
  %4 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ arch_local_irq_save\0A\09cpsid\09i", "=r,~{memory},~{cc}"() #24, !srcloc !19
  %5 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i2.i.i = and i32 %5, -16384
  %6 = inttoptr i32 %and.i2.i.i to ptr
  %cpu.i.i = getelementptr inbounds %struct.thread_info, ptr %6, i32 0, i32 3
  %7 = load i32, ptr %cpu.i.i, align 4
  %arrayidx.i.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %7
  %8 = load i32, ptr %arrayidx.i.i, align 4
  %add.i.i = add i32 %8, %3
  %9 = inttoptr i32 %add.i.i to ptr
  %10 = load i32, ptr %9, align 4
  %add15.i.i = add i32 %10, -1
  store i32 %add15.i.i, ptr %9, align 4
  %11 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ local_save_flags", "=r,~{memory},~{cc}"() #24, !srcloc !20
  %and.i.i.i.i = and i32 %11, 128
  %tobool.not.i.i = icmp eq i32 %and.i.i.i.i, 0
  br i1 %tobool.not.i.i, label %if.then29.i.i, label %do.end31.i.i, !prof !13

if.then29.i.i:                                    ; preds = %do.body1.i.i
  tail call void @warn_bogus_irq_restore() #27
  br label %do.end31.i.i

do.end31.i.i:                                     ; preds = %if.then29.i.i, %do.body1.i.i
  tail call void asm sideeffect "\09msr\09cpsr_c, $0\09@ local_irq_restore", "r,~{memory},~{cc}"(i32 %4) #24, !srcloc !21
  br label %if.end48.i.i

if.else.i.i:                                      ; preds = %rcu_read_lock.exit.i.i
  %data.i.i = getelementptr inbounds %struct.percpu_ref, ptr %objcg, i32 0, i32 1
  %12 = load ptr, ptr %data.i.i, align 4
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #24, !srcloc !95
  tail call void @llvm.prefetch.p0(ptr %12, i32 1, i32 3, i32 1) #24
  %13 = tail call { i32, i32 } asm sideeffect "@ atomic_sub_return\0A1:\09ldrex\09$0, [$3]\0A\09sub\09$0, $0, $4\0A\09strex\09$1, $0, [$3]\0A\09teq\09$1, #0\0A\09bne\091b", "=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %12, ptr %12, i32 1, ptr elementtype(i32) %12) #24, !srcloc !96
  %asmresult.i.i.i.i.i.i.i = extractvalue { i32, i32 } %13, 0
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #24, !srcloc !97
  %cmp.i.i.i.i.i = icmp eq i32 %asmresult.i.i.i.i.i.i.i, 0
  br i1 %cmp.i.i.i.i.i, label %if.then45.i.i, label %if.end48.i.i, !prof !13

if.then45.i.i:                                    ; preds = %if.else.i.i
  %14 = load ptr, ptr %data.i.i, align 4
  %release.i.i = getelementptr inbounds %struct.percpu_ref_data, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %release.i.i, align 4
  tail call void %15(ptr noundef %objcg) #27
  br label %if.end48.i.i

if.end48.i.i:                                     ; preds = %if.then45.i.i, %if.else.i.i, %do.end31.i.i
  %call.i3.i.i = tail call zeroext i1 @rcu_is_watching() #27
  br i1 %call.i3.i.i, label %percpu_ref_put.exit, label %land.lhs.true.i6.i.i

land.lhs.true.i6.i.i:                             ; preds = %if.end48.i.i
  %call1.i4.i.i = tail call i32 @debug_lockdep_rcu_enabled() #27
  %tobool.not.i5.i.i = icmp eq i32 %call1.i4.i.i, 0
  br i1 %tobool.not.i5.i.i, label %percpu_ref_put.exit, label %land.lhs.true2.i8.i.i

land.lhs.true2.i8.i.i:                            ; preds = %land.lhs.true.i6.i.i
  %.b4.i7.i.i = load i1, ptr @rcu_read_unlock.__warned, align 1
  br i1 %.b4.i7.i.i, label %percpu_ref_put.exit, label %if.then.i9.i.i

if.then.i9.i.i:                                   ; preds = %land.lhs.true2.i8.i.i
  store i1 true, ptr @rcu_read_unlock.__warned, align 1
  tail call void @lockdep_rcu_suspicious(ptr noundef nonnull @.str.94, i32 noundef 724, ptr noundef nonnull @.str.96) #27
  br label %percpu_ref_put.exit

percpu_ref_put.exit:                              ; preds = %if.then.i9.i.i, %land.lhs.true2.i8.i.i, %land.lhs.true.i6.i.i, %if.end48.i.i
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !98
  %16 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i.i.i10.i.i = and i32 %16, -16384
  %17 = inttoptr i32 %and.i.i.i.i.i10.i.i to ptr
  %preempt_count.i.i.i.i11.i.i = getelementptr inbounds %struct.thread_info, ptr %17, i32 0, i32 1
  %18 = load volatile i32, ptr %preempt_count.i.i.i.i11.i.i, align 4
  %sub.i.i.i.i.i = add i32 %18, -1
  store volatile i32 %sub.i.i.i.i.i, ptr %preempt_count.i.i.i.i11.i.i, align 4
  tail call void @rcu_read_unlock_strict() #27
  tail call fastcc void @rcu_lock_release(ptr noundef nonnull @rcu_lock_map) #27
  ret void
}

; Function Attrs: inlinehint nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc void @rcu_lock_acquire(ptr nocapture noundef readnone %map) #5 align 64 {
entry:
  br label %__here

__here:                                           ; preds = %entry
  tail call void @lock_acquire(ptr noundef nonnull @rcu_lock_map, i32 noundef 0, i32 noundef 0, i32 noundef 2, i32 noundef 0, ptr noundef null, i32 noundef ptrtoint (ptr blockaddress(@rcu_lock_acquire, %__here) to i32)) #27
  ret void
}

; Function Attrs: null_pointer_is_valid
declare dso_local zeroext i1 @rcu_is_watching() local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local void @lock_acquire(ptr noundef, i32 noundef, i32 noundef, i32 noundef, i32 noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc void @rcu_lock_release(ptr nocapture noundef readnone %map) #5 align 64 {
entry:
  br label %__here

__here:                                           ; preds = %entry
  tail call void @lock_release(ptr noundef nonnull @rcu_lock_map, i32 noundef ptrtoint (ptr blockaddress(@rcu_lock_release, %__here) to i32)) #27
  ret void
}

; Function Attrs: null_pointer_is_valid
declare dso_local void @rcu_read_unlock_strict() local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local void @lock_release(ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @should_failslab(ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local void @fs_reclaim_acquire(i32 noundef) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local void @fs_reclaim_release(i32 noundef) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local void @__might_sleep(ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local ptr @get_obj_cgroup_from_current() local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @obj_cgroup_charge(ptr noundef, i32 noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind readonly
declare i32 @llvm.read_register.i32(metadata) #19

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @debug_locks_off() local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local ptr @__kfence_alloc(ptr noundef, i32 noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc void @deactivate_slab(ptr noundef %s, ptr noundef %slab, ptr noundef %freelist) unnamed_addr #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load volatile i32, ptr %slab, align 4
  %cmp.i.not.i.i.i = icmp eq i32 %0, -1
  br i1 %cmp.i.not.i.i.i, label %if.then.i.i.i, label %slab_nid.exit, !prof !13

if.then.i.i.i:                                    ; preds = %entry
  tail call void @dump_page(ptr noundef %slab, ptr noundef nonnull @.str.88) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/mm.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 1368, 0\0A.popsection", ""() #24, !srcloc !37
  unreachable

slab_nid.exit:                                    ; preds = %entry
  %arrayidx.i = getelementptr %struct.kmem_cache, ptr %s, i32 0, i32 26, i32 0
  %1 = load ptr, ptr %arrayidx.i, align 4
  %freelist2 = getelementptr inbounds %struct.slab, ptr %slab, i32 0, i32 3
  %2 = load ptr, ptr %freelist2, align 4
  %tobool.not = icmp eq ptr %2, null
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %slab_nid.exit
  %3 = load ptr, ptr %s, align 4
  %arrayidx.i189 = getelementptr %struct.kmem_cache_cpu, ptr %3, i32 0, i32 5, i32 17
  %4 = ptrtoint ptr %arrayidx.i189 to i32
  %5 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i = and i32 %5, -16384
  %6 = inttoptr i32 %and.i.i to ptr
  %cpu.i = getelementptr inbounds %struct.thread_info, ptr %6, i32 0, i32 3
  %7 = load i32, ptr %cpu.i, align 4
  %arrayidx7.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %7
  %8 = load i32, ptr %arrayidx7.i, align 4
  %add.i = add i32 %8, %4
  %9 = inttoptr i32 %add.i to ptr
  %10 = load i32, ptr %9, align 4
  %add8.i = add i32 %10, 1
  store i32 %add8.i, ptr %9, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %slab_nid.exit
  %tail.0 = phi i32 [ 16, %if.then ], [ 15, %slab_nid.exit ]
  %tobool3.not276 = icmp eq ptr %freelist, null
  br i1 %tobool3.not276, label %while.end, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %if.end
  %offset.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 6
  %random.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 21
  %flags.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 1
  %red_left_pad.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 17
  %11 = getelementptr inbounds %struct.slab, ptr %slab, i32 0, i32 4
  %size.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 3
  %.pre = load i32, ptr %flags.i, align 4
  br label %while.body

while.body:                                       ; preds = %if.end7, %while.body.lr.ph
  %12 = phi i32 [ %.pre, %while.body.lr.ph ], [ %33, %if.end7 ]
  %free_delta.0279 = phi i32 [ 0, %while.body.lr.ph ], [ %inc, %if.end7 ]
  %freelist_tail.0278 = phi ptr [ null, %while.body.lr.ph ], [ %storemerge277, %if.end7 ]
  %storemerge277 = phi ptr [ %freelist, %while.body.lr.ph ], [ %18, %if.end7 ]
  %13 = load i32, ptr %offset.i, align 4
  %add.ptr.i = getelementptr i8, ptr %storemerge277, i32 %13
  %14 = load i32, ptr %add.ptr.i, align 4
  %15 = ptrtoint ptr %add.ptr.i to i32
  %16 = load i32, ptr %random.i.i.i, align 4
  %17 = tail call i32 @llvm.bswap.i32(i32 %15) #24
  %xor.i.i.i = xor i32 %16, %14
  %xor2.i.i.i = xor i32 %xor.i.i.i, %17
  %18 = inttoptr i32 %xor2.i.i.i to ptr
  %and.i = and i32 %12, 256
  %tobool.not.i = icmp eq i32 %and.i, 0
  %tobool.not.i.i = icmp eq i32 %xor2.i.i.i, 0
  %or.cond22.i = or i1 %tobool.not.i.i, %tobool.not.i
  br i1 %or.cond22.i, label %if.end7, label %if.end.i.i

if.end.i.i:                                       ; preds = %while.body
  %call.i.i.i.i = tail call ptr @page_address(ptr noundef %slab) #27
  %19 = load i32, ptr %flags.i, align 4
  %and.i.i.i = and i32 %19, 1024
  %tobool.not.i.i.i = icmp eq i32 %and.i.i.i, 0
  br i1 %tobool.not.i.i.i, label %restore_red_left.exit.i.i, label %if.then.i.i.i190

if.then.i.i.i190:                                 ; preds = %if.end.i.i
  %20 = load i32, ptr %red_left_pad.i.i.i, align 4
  %idx.neg.i.i.i = sub i32 0, %20
  %add.ptr.i.i.i = getelementptr i8, ptr %18, i32 %idx.neg.i.i.i
  br label %restore_red_left.exit.i.i

restore_red_left.exit.i.i:                        ; preds = %if.then.i.i.i190, %if.end.i.i
  %p.addr.0.i.i.i = phi ptr [ %add.ptr.i.i.i, %if.then.i.i.i190 ], [ %18, %if.end.i.i ]
  %cmp.i.i = icmp ult ptr %p.addr.0.i.i.i, %call.i.i.i.i
  br i1 %cmp.i.i, label %if.then.i, label %lor.lhs.false.i.i

lor.lhs.false.i.i:                                ; preds = %restore_red_left.exit.i.i
  %bf.load.i.i = load i32, ptr %11, align 4
  %bf.lshr.i.i = lshr i32 %bf.load.i.i, 1
  %bf.clear.i.i = and i32 %bf.lshr.i.i, 32767
  %21 = load i32, ptr %size.i.i, align 4
  %mul.i.i = mul i32 %bf.clear.i.i, %21
  %add.ptr.i.i = getelementptr i8, ptr %call.i.i.i.i, i32 %mul.i.i
  %cmp3.not.i.i = icmp ult ptr %p.addr.0.i.i.i, %add.ptr.i.i
  br i1 %cmp3.not.i.i, label %check_valid_pointer.exit.i, label %if.then.i

check_valid_pointer.exit.i:                       ; preds = %lor.lhs.false.i.i
  %sub.ptr.lhs.cast.i.i = ptrtoint ptr %p.addr.0.i.i.i to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint ptr %call.i.i.i.i to i32
  %sub.ptr.sub.i.i = sub i32 %sub.ptr.lhs.cast.i.i, %sub.ptr.rhs.cast.i.i
  %rem.i.i = urem i32 %sub.ptr.sub.i.i, %21
  %tobool6.not.i.i.not = icmp eq i32 %rem.i.i, 0
  br i1 %tobool6.not.i.i.not, label %if.end7, label %if.then.i

if.then.i:                                        ; preds = %check_valid_pointer.exit.i, %lor.lhs.false.i.i, %restore_red_left.exit.i.i
  %22 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i.i = and i32 %22, -16384
  %23 = inttoptr i32 %and.i.i.i.i to ptr
  %task.i.i.i = getelementptr inbounds %struct.thread_info, ptr %23, i32 0, i32 2
  %24 = load ptr, ptr %task.i.i.i, align 8
  %kunit_test.i.i.i = getelementptr inbounds %struct.task_struct, ptr %24, i32 0, i32 192
  %25 = load ptr, ptr %kunit_test.i.i.i, align 4
  %tobool.not.i.i10.i = icmp eq ptr %25, null
  br i1 %tobool.not.i.i10.i, label %if.end.i11.i, label %if.end.i.i.i, !prof !14

if.end.i.i.i:                                     ; preds = %if.then.i
  %lock.i.i.i = getelementptr inbounds %struct.kunit, ptr %25, i32 0, i32 6
  %call2.i.i.i = tail call i32 @_raw_spin_lock_irqsave(ptr noundef %lock.i.i.i) #27
  %resources.i.i.i = getelementptr inbounds %struct.kunit, ptr %25, i32 0, i32 8
  %prev.i.i.i = getelementptr inbounds %struct.kunit, ptr %25, i32 0, i32 8, i32 1
  %.pn3.i.i.i = load ptr, ptr %prev.i.i.i, align 4
  %cmp7.not4.i.i.i = icmp eq ptr %.pn3.i.i.i, %resources.i.i.i
  br i1 %cmp7.not4.i.i.i, label %kunit_find_named_resource.exit.thread.i, label %for.body.i.i.i

for.body.i.i.i:                                   ; preds = %for.inc.i.i.i, %if.end.i.i.i
  %.pn5.i.i.i = phi ptr [ %.pn.i.i.i, %for.inc.i.i.i ], [ %.pn3.i.i.i, %if.end.i.i.i ]
  %name.i.i.i.i = getelementptr i8, ptr %.pn5.i.i.i, i32 -12
  %26 = load ptr, ptr %name.i.i.i.i, align 4
  %tobool.not.i.i.i13.i = icmp eq ptr %26, null
  br i1 %tobool.not.i.i.i13.i, label %for.inc.i.i.i, label %kunit_resource_name_match.exit.i.i.i

kunit_resource_name_match.exit.i.i.i:             ; preds = %for.body.i.i.i
  %call.i.i.i14.i = tail call i32 @strcmp(ptr noundef nonnull %26, ptr noundef nonnull @.str.53) #27
  %cmp.i.i.i.i = icmp eq i32 %call.i.i.i14.i, 0
  br i1 %cmp.i.i.i.i, label %if.then.i.i15.i, label %for.inc.i.i.i

if.then.i.i15.i:                                  ; preds = %kunit_resource_name_match.exit.i.i.i
  %res.0.le.i.i.i = getelementptr i8, ptr %.pn5.i.i.i, i32 -16
  %refcount.i.i.i.i = getelementptr i8, ptr %.pn5.i.i.i, i32 -4
  tail call void @llvm.prefetch.p0(ptr %refcount.i.i.i.i, i32 1, i32 3, i32 1) #24
  %27 = tail call { i32, i32, i32 } asm sideeffect "@ atomic_fetch_add\0A1:\09ldrex\09$0, [$4]\0A\09add\09$1, $0, $5\0A\09strex\09$2, $1, [$4]\0A\09teq\09$2, #0\0A\09bne\091b", "=&r,=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %refcount.i.i.i.i, ptr %refcount.i.i.i.i, i32 1, ptr elementtype(i32) %refcount.i.i.i.i) #24, !srcloc !62
  %asmresult.i.i.i.i.i.i.i.i.i.i = extractvalue { i32, i32, i32 } %27, 0
  %tobool1.not.i.i.i.i.i.i.i.i = icmp eq i32 %asmresult.i.i.i.i.i.i.i.i.i.i, 0
  br i1 %tobool1.not.i.i.i.i.i.i.i.i, label %if.end15.sink.split.i.i.i.i.i.i.i.i, label %if.else.i.i.i.i.i.i.i.i, !prof !13

if.else.i.i.i.i.i.i.i.i:                          ; preds = %if.then.i.i15.i
  %add.i.i.i.i.i.i.i.i = add i32 %asmresult.i.i.i.i.i.i.i.i.i.i, 1
  %28 = or i32 %add.i.i.i.i.i.i.i.i, %asmresult.i.i.i.i.i.i.i.i.i.i
  %.not.i.i.i.i.i.i.i.i = icmp sgt i32 %28, -1
  br i1 %.not.i.i.i.i.i.i.i.i, label %kunit_find_named_resource.exit.i, label %if.end15.sink.split.i.i.i.i.i.i.i.i, !prof !14

if.end15.sink.split.i.i.i.i.i.i.i.i:              ; preds = %if.else.i.i.i.i.i.i.i.i, %if.then.i.i15.i
  %.sink.i.i.i.i.i.i.i.i = phi i32 [ 2, %if.then.i.i15.i ], [ 1, %if.else.i.i.i.i.i.i.i.i ]
  tail call void @refcount_warn_saturate(ptr noundef %refcount.i.i.i.i, i32 noundef %.sink.i.i.i.i.i.i.i.i) #27
  br label %kunit_find_named_resource.exit.i

for.inc.i.i.i:                                    ; preds = %kunit_resource_name_match.exit.i.i.i, %for.body.i.i.i
  %prev12.i.i.i = getelementptr inbounds %struct.list_head, ptr %.pn5.i.i.i, i32 0, i32 1
  %.pn.i.i.i = load ptr, ptr %prev12.i.i.i, align 4
  %cmp7.not.i.i.i = icmp eq ptr %.pn.i.i.i, %resources.i.i.i
  br i1 %cmp7.not.i.i.i, label %kunit_find_named_resource.exit.thread.i, label %for.body.i.i.i

kunit_find_named_resource.exit.thread.i:          ; preds = %for.inc.i.i.i, %if.end.i.i.i
  tail call void @_raw_spin_unlock_irqrestore(ptr noundef %lock.i.i.i, i32 noundef %call2.i.i.i) #27
  br label %if.end.i11.i

kunit_find_named_resource.exit.i:                 ; preds = %if.end15.sink.split.i.i.i.i.i.i.i.i, %if.else.i.i.i.i.i.i.i.i
  tail call void @_raw_spin_unlock_irqrestore(ptr noundef %lock.i.i.i, i32 noundef %call2.i.i.i) #27
  %tobool8.not.i.i.i = icmp eq ptr %res.0.le.i.i.i, null
  br i1 %tobool8.not.i.i.i, label %if.end.i11.i, label %slab_add_kunit_errors.exit.i.i

slab_add_kunit_errors.exit.i.i:                   ; preds = %kunit_find_named_resource.exit.i
  %29 = load ptr, ptr %res.0.le.i.i.i, align 4
  %30 = load i32, ptr %29, align 4
  %inc.i.i.i = add i32 %30, 1
  store i32 %inc.i.i.i, ptr %29, align 4
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #24, !srcloc !63
  tail call void @llvm.prefetch.p0(ptr %refcount.i.i.i.i, i32 1, i32 3, i32 1) #24
  %31 = tail call { i32, i32, i32 } asm sideeffect "@ atomic_fetch_sub\0A1:\09ldrex\09$0, [$4]\0A\09sub\09$1, $0, $5\0A\09strex\09$2, $1, [$4]\0A\09teq\09$2, #0\0A\09bne\091b", "=&r,=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %refcount.i.i.i.i, ptr %refcount.i.i.i.i, i32 1, ptr elementtype(i32) %refcount.i.i.i.i) #24, !srcloc !64
  %asmresult.i.i.i.i.i.i.i.i.i = extractvalue { i32, i32, i32 } %31, 0
  %cmp.i.i.i.i.i.i = icmp eq i32 %asmresult.i.i.i.i.i.i.i.i.i, 1
  br i1 %cmp.i.i.i.i.i.i, label %if.then.i.i12.i, label %if.end5.i.i.i.i.i.i

if.end5.i.i.i.i.i.i:                              ; preds = %slab_add_kunit_errors.exit.i.i
  %.not.i.i.i.i.i.i = icmp sgt i32 %asmresult.i.i.i.i.i.i.i.i.i, 0
  br i1 %.not.i.i.i.i.i.i, label %freelist_corrupted.exit, label %if.then10.i.i.i.i.i.i, !prof !14

if.then10.i.i.i.i.i.i:                            ; preds = %if.end5.i.i.i.i.i.i
  tail call void @refcount_warn_saturate(ptr noundef %refcount.i.i.i.i, i32 noundef 3) #27
  br label %freelist_corrupted.exit

if.then.i.i12.i:                                  ; preds = %slab_add_kunit_errors.exit.i.i
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #24, !srcloc !65
  %free.i.i.i.i = getelementptr i8, ptr %.pn5.i.i.i, i32 -8
  %32 = load ptr, ptr %free.i.i.i.i, align 4
  %tobool.not.i.i.i.i = icmp eq ptr %32, null
  br i1 %tobool.not.i.i.i.i, label %freelist_corrupted.exit, label %if.then.i.i.i.i

if.then.i.i.i.i:                                  ; preds = %if.then.i.i12.i
  tail call void %32(ptr noundef nonnull %res.0.le.i.i.i) #27
  tail call void @kfree(ptr noundef nonnull %res.0.le.i.i.i) #34
  br label %freelist_corrupted.exit

if.end.i11.i:                                     ; preds = %kunit_find_named_resource.exit.i, %kunit_find_named_resource.exit.thread.i, %if.then.i
  tail call void (ptr, ptr, ...) @slab_bug(ptr noundef %s, ptr noundef nonnull @.str.52, ptr noundef nonnull @.str.45) #27
  tail call fastcc void @print_trailer(ptr noundef %s, ptr noundef %slab, ptr noundef nonnull %storemerge277) #27
  tail call void @add_taint(i32 noundef 5, i32 noundef 1) #27
  br label %freelist_corrupted.exit

freelist_corrupted.exit:                          ; preds = %if.end.i11.i, %if.then.i.i.i.i, %if.then.i.i12.i, %if.then10.i.i.i.i.i.i, %if.end5.i.i.i.i.i.i
  tail call void (ptr, ptr, ...) @slab_fix(ptr noundef %s, ptr noundef nonnull @.str.103) #27
  br label %while.end

if.end7:                                          ; preds = %check_valid_pointer.exit.i, %while.body
  %33 = phi i32 [ %19, %check_valid_pointer.exit.i ], [ %12, %while.body ]
  %inc = add i32 %free_delta.0279, 1
  br i1 %tobool.not.i.i, label %while.end, label %while.body

while.end:                                        ; preds = %if.end7, %freelist_corrupted.exit, %if.end
  %freelist_tail.0274 = phi ptr [ %freelist_tail.0278, %freelist_corrupted.exit ], [ null, %if.end ], [ %storemerge277, %if.end7 ]
  %free_delta.0272 = phi i32 [ %free_delta.0279, %freelist_corrupted.exit ], [ 0, %if.end ], [ %inc, %if.end7 ]
  %34 = getelementptr inbounds %struct.slab, ptr %slab, i32 0, i32 4
  %tobool29.not = icmp eq ptr %freelist_tail.0274, null
  %sub187.neg = mul i32 %free_delta.0272, -65536
  %35 = ptrtoint ptr %freelist_tail.0274 to i32
  %offset.i191 = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 6
  %random.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 21
  %nr_partial = getelementptr inbounds %struct.kmem_cache_node, ptr %1, i32 0, i32 1
  %min_partial = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 2
  %flags38.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 1
  %dep_map.i200 = getelementptr inbounds %struct.anon.15, ptr %1, i32 0, i32 1
  %36 = getelementptr inbounds %struct.slab, ptr %slab, i32 0, i32 1
  %prev.i.i.i206 = getelementptr inbounds %struct.slab, ptr %slab, i32 0, i32 1, i32 0, i32 1
  %full.i = getelementptr inbounds %struct.kmem_cache_node, ptr %1, i32 0, i32 5
  %partial.i.i = getelementptr inbounds %struct.kmem_cache_node, ptr %1, i32 0, i32 2
  %prev.i.i.i218 = getelementptr inbounds %struct.kmem_cache_node, ptr %1, i32 0, i32 2, i32 1
  br label %redo

redo:                                             ; preds = %if.end107, %while.end
  %flags.0 = phi i32 [ 0, %while.end ], [ %flags.1, %if.end107 ]
  %l.0 = phi i32 [ 0, %while.end ], [ %m.0, %if.end107 ]
  %lock.0 = phi i32 [ 0, %while.end ], [ %lock.1, %if.end107 ]
  %37 = load volatile ptr, ptr %freelist2, align 4
  %38 = load volatile i32, ptr %34, align 4
  %bf.clear = and i32 %38, 1
  %tobool15.not = icmp eq i32 %bf.clear, 0
  br i1 %tobool15.not, label %do.body20, label %do.end28, !prof !13

do.body20:                                        ; preds = %redo
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slub.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 2409, 0\0A.popsection", ""() #24, !srcloc !99
  unreachable

do.end28:                                         ; preds = %redo
  br i1 %tobool29.not, label %if.end38, label %if.then30

if.then30:                                        ; preds = %do.end28
  %cmp.i = icmp eq ptr %freelist_tail.0274, %37
  br i1 %cmp.i, label %do.body2.i, label %set_freepointer.exit, !prof !13

do.body2.i:                                       ; preds = %if.then30
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slub.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 379, 0\0A.popsection", ""() #24, !srcloc !30
  unreachable

set_freepointer.exit:                             ; preds = %if.then30
  %bf.lshr188 = add i32 %38, %sub187.neg
  %39 = load i32, ptr %offset.i191, align 4
  %add.i192 = add i32 %39, %35
  %40 = inttoptr i32 %add.i192 to ptr
  %41 = ptrtoint ptr %37 to i32
  %42 = load i32, ptr %random.i.i, align 4
  %43 = tail call i32 @llvm.bswap.i32(i32 %add.i192) #24
  %xor.i.i = xor i32 %42, %41
  %xor2.i.i = xor i32 %xor.i.i, %43
  %44 = inttoptr i32 %xor2.i.i to ptr
  store ptr %44, ptr %40, align 4
  br label %if.end38

if.end38:                                         ; preds = %set_freepointer.exit, %do.end28
  %new.sroa.3.0 = phi ptr [ %freelist, %set_freepointer.exit ], [ %37, %do.end28 ]
  %new.sroa.7.0 = phi i32 [ %bf.lshr188, %set_freepointer.exit ], [ %38, %do.end28 ]
  %bf.clear40 = and i32 %new.sroa.7.0, -2
  %tobool44.not = icmp ult i32 %new.sroa.7.0, 65536
  br i1 %tobool44.not, label %land.lhs.true, label %if.else46

land.lhs.true:                                    ; preds = %if.end38
  %45 = load i32, ptr %nr_partial, align 4
  %46 = load i32, ptr %min_partial, align 4
  %cmp.not = icmp ult i32 %45, %46
  br i1 %cmp.not, label %if.else46, label %if.end85

if.else46:                                        ; preds = %land.lhs.true, %if.end38
  %tobool48.not = icmp eq ptr %new.sroa.3.0, null
  br i1 %tobool48.not, label %if.else63, label %if.then49

if.then49:                                        ; preds = %if.else46
  %tobool50.not = icmp eq i32 %lock.0, 0
  br i1 %tobool50.not, label %if.end85.sink.split, label %if.end85

if.else63:                                        ; preds = %if.else46
  callbr void asm sideeffect "1:\0A\09b ${1:l}\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr nonnull @slub_debug_enabled, ptr blockaddress(@deactivate_slab, %if.then37.i)) #24
          to label %kmem_cache_debug_flags.exit [label %if.then37.i], !srcloc !10

if.then37.i:                                      ; preds = %if.else63
  %47 = load i32, ptr %flags38.i, align 4
  %and39.i = and i32 %47, 65536
  %tobool40.i = icmp ne i32 %and39.i, 0
  br label %kmem_cache_debug_flags.exit

kmem_cache_debug_flags.exit:                      ; preds = %if.then37.i, %if.else63
  %retval.0.i193 = phi i1 [ %tobool40.i, %if.then37.i ], [ false, %if.else63 ]
  %call64.not = xor i1 %retval.0.i193, true
  %tobool67 = icmp ne i32 %lock.0, 0
  %or.cond = select i1 %call64.not, i1 true, i1 %tobool67
  br i1 %or.cond, label %if.end85, label %if.end85.sink.split

if.end85.sink.split:                              ; preds = %kmem_cache_debug_flags.exit, %if.then49
  %m.0.ph = phi i32 [ 1, %if.then49 ], [ 2, %kmem_cache_debug_flags.exit ]
  %48 = xor i1 %tobool48.not, true
  %call57 = tail call i32 @_raw_spin_lock_irqsave(ptr noundef %1) #27
  br label %if.end85

if.end85:                                         ; preds = %if.end85.sink.split, %kmem_cache_debug_flags.exit, %if.then49, %land.lhs.true
  %cmp117 = phi i1 [ true, %if.then49 ], [ false, %kmem_cache_debug_flags.exit ], [ false, %land.lhs.true ], [ %48, %if.end85.sink.split ]
  %cmp121 = phi i1 [ false, %if.then49 ], [ true, %kmem_cache_debug_flags.exit ], [ false, %land.lhs.true ], [ %tobool48.not, %if.end85.sink.split ]
  %m.0 = phi i32 [ 1, %if.then49 ], [ 2, %kmem_cache_debug_flags.exit ], [ 3, %land.lhs.true ], [ %m.0.ph, %if.end85.sink.split ]
  %flags.1 = phi i32 [ %flags.0, %if.then49 ], [ %flags.0, %kmem_cache_debug_flags.exit ], [ %flags.0, %land.lhs.true ], [ %call57, %if.end85.sink.split ]
  %lock.1 = phi i32 [ 1, %if.then49 ], [ %lock.0, %kmem_cache_debug_flags.exit ], [ %lock.0, %land.lhs.true ], [ 1, %if.end85.sink.split ]
  %cmp86.not = icmp eq i32 %l.0, %m.0
  br i1 %cmp86.not, label %if.end107, label %if.then88

if.then88:                                        ; preds = %if.end85
  switch i32 %l.0, label %if.end97 [
    i32 1, label %if.then91
    i32 2, label %if.then95
  ]

if.then91:                                        ; preds = %if.then88
  %49 = load i32, ptr @debug_locks, align 4
  %tobool.not.i194 = icmp eq i32 %49, 0
  br i1 %tobool.not.i194, label %if.end.i, label %land.rhs.i

land.rhs.i:                                       ; preds = %if.then91
  %call.i.i = tail call i32 @lock_is_held_type(ptr noundef %dep_map.i200, i32 noundef -1) #27
  %cmp.not.i = icmp eq i32 %call.i.i, 0
  br i1 %cmp.not.i, label %do.end.i, label %if.end.i, !prof !13

do.end.i:                                         ; preds = %land.rhs.i
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.2, i32 noundef 2075, i32 noundef 9, ptr noundef null) #27
  br label %if.end.i

if.end.i:                                         ; preds = %do.end.i, %land.rhs.i, %if.then91
  %call.i.i.i = tail call zeroext i1 @__list_del_entry_valid(ptr noundef %36) #27
  br i1 %call.i.i.i, label %if.end.i.i.i196, label %remove_partial.exit

if.end.i.i.i196:                                  ; preds = %if.end.i
  %50 = load ptr, ptr %prev.i.i.i206, align 4
  %51 = load ptr, ptr %36, align 4
  %prev1.i.i.i.i = getelementptr inbounds %struct.list_head, ptr %51, i32 0, i32 1
  store ptr %50, ptr %prev1.i.i.i.i, align 4
  store volatile ptr %51, ptr %50, align 4
  br label %remove_partial.exit

remove_partial.exit:                              ; preds = %if.end.i.i.i196, %if.end.i
  store ptr inttoptr (i32 256 to ptr), ptr %36, align 4
  store ptr inttoptr (i32 290 to ptr), ptr %prev.i.i.i206, align 4
  %52 = load i32, ptr %nr_partial, align 4
  %dec.i = add i32 %52, -1
  store i32 %dec.i, ptr %nr_partial, align 4
  br label %if.end97

if.then95:                                        ; preds = %if.then88
  %53 = load i32, ptr %flags38.i, align 4
  %and.i198 = and i32 %53, 65536
  %tobool.not.i199 = icmp eq i32 %and.i198, 0
  br i1 %tobool.not.i199, label %if.end97, label %do.body.i

do.body.i:                                        ; preds = %if.then95
  %54 = load i32, ptr @debug_locks, align 4
  %tobool1.not.i = icmp eq i32 %54, 0
  br i1 %tobool1.not.i, label %if.end18.i, label %land.rhs.i203

land.rhs.i203:                                    ; preds = %do.body.i
  %call.i.i201 = tail call i32 @lock_is_held_type(ptr noundef %dep_map.i200, i32 noundef -1) #27
  %cmp.not.i202 = icmp eq i32 %call.i.i201, 0
  br i1 %cmp.not.i202, label %do.end.i204, label %if.end18.i, !prof !13

do.end.i204:                                      ; preds = %land.rhs.i203
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.2, i32 noundef 1230, i32 noundef 9, ptr noundef null) #27
  br label %if.end18.i

if.end18.i:                                       ; preds = %do.end.i204, %land.rhs.i203, %do.body.i
  %call.i.i.i205 = tail call zeroext i1 @__list_del_entry_valid(ptr noundef %36) #27
  br i1 %call.i.i.i205, label %if.end.i.i.i208, label %list_del.exit.i

if.end.i.i.i208:                                  ; preds = %if.end18.i
  %55 = load ptr, ptr %prev.i.i.i206, align 4
  %56 = load ptr, ptr %36, align 4
  %prev1.i.i.i.i207 = getelementptr inbounds %struct.list_head, ptr %56, i32 0, i32 1
  store ptr %55, ptr %prev1.i.i.i.i207, align 4
  store volatile ptr %56, ptr %55, align 4
  br label %list_del.exit.i

list_del.exit.i:                                  ; preds = %if.end.i.i.i208, %if.end18.i
  store ptr inttoptr (i32 256 to ptr), ptr %36, align 4
  store ptr inttoptr (i32 290 to ptr), ptr %prev.i.i.i206, align 4
  br label %if.end97

if.end97:                                         ; preds = %list_del.exit.i, %if.then95, %remove_partial.exit, %if.then88
  br i1 %cmp117, label %if.then100, label %if.else101

if.then100:                                       ; preds = %if.end97
  %57 = load i32, ptr @debug_locks, align 4
  %tobool.not.i210 = icmp eq i32 %57, 0
  br i1 %tobool.not.i210, label %if.end.i217, label %land.rhs.i214

land.rhs.i214:                                    ; preds = %if.then100
  %call.i.i212 = tail call i32 @lock_is_held_type(ptr noundef %dep_map.i200, i32 noundef -1) #27
  %cmp.not.i213 = icmp eq i32 %call.i.i212, 0
  br i1 %cmp.not.i213, label %do.end.i215, label %if.end.i217, !prof !13

do.end.i215:                                      ; preds = %land.rhs.i214
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.2, i32 noundef 2068, i32 noundef 9, ptr noundef null) #27
  br label %if.end.i217

if.end.i217:                                      ; preds = %do.end.i215, %land.rhs.i214, %if.then100
  %58 = load i32, ptr %nr_partial, align 4
  %inc.i.i = add i32 %58, 1
  store i32 %inc.i.i, ptr %nr_partial, align 4
  br i1 %tobool.not, label %if.else.i.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.end.i217
  %59 = load ptr, ptr %prev.i.i.i218, align 4
  %call.i.i.i.i219 = tail call zeroext i1 @__list_add_valid(ptr noundef %36, ptr noundef %59, ptr noundef %partial.i.i) #27
  br i1 %call.i.i.i.i219, label %if.end107.sink.split, label %if.end107

if.else.i.i:                                      ; preds = %if.end.i217
  %60 = load ptr, ptr %partial.i.i, align 4
  %call.i.i5.i.i = tail call zeroext i1 @__list_add_valid(ptr noundef %36, ptr noundef %partial.i.i, ptr noundef %60) #27
  br i1 %call.i.i5.i.i, label %if.end.i.i7.i.i, label %if.end107

if.end.i.i7.i.i:                                  ; preds = %if.else.i.i
  %prev1.i.i.i.i220 = getelementptr inbounds %struct.list_head, ptr %60, i32 0, i32 1
  br label %if.end107.sink.split

if.else101:                                       ; preds = %if.end97
  br i1 %cmp121, label %if.then104, label %if.end107

if.then104:                                       ; preds = %if.else101
  %61 = load i32, ptr %flags38.i, align 4
  %and.i222 = and i32 %61, 65536
  %tobool.not.i223 = icmp eq i32 %and.i222, 0
  br i1 %tobool.not.i223, label %if.end107, label %do.body.i225

do.body.i225:                                     ; preds = %if.then104
  %62 = load i32, ptr @debug_locks, align 4
  %tobool1.not.i224 = icmp eq i32 %62, 0
  br i1 %tobool1.not.i224, label %if.end18.i232, label %land.rhs.i229

land.rhs.i229:                                    ; preds = %do.body.i225
  %call.i.i227 = tail call i32 @lock_is_held_type(ptr noundef %dep_map.i200, i32 noundef -1) #27
  %cmp.not.i228 = icmp eq i32 %call.i.i227, 0
  br i1 %cmp.not.i228, label %do.end.i230, label %if.end18.i232, !prof !13

do.end.i230:                                      ; preds = %land.rhs.i229
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.2, i32 noundef 1221, i32 noundef 9, ptr noundef null) #27
  br label %if.end18.i232

if.end18.i232:                                    ; preds = %do.end.i230, %land.rhs.i229, %do.body.i225
  %63 = load ptr, ptr %full.i, align 4
  %call.i.i.i231 = tail call zeroext i1 @__list_add_valid(ptr noundef %36, ptr noundef %full.i, ptr noundef %63) #27
  br i1 %call.i.i.i231, label %if.end.i.i.i233, label %if.end107

if.end.i.i.i233:                                  ; preds = %if.end18.i232
  %prev1.i.i.i = getelementptr inbounds %struct.list_head, ptr %63, i32 0, i32 1
  br label %if.end107.sink.split

if.end107.sink.split:                             ; preds = %if.end.i.i.i233, %if.end.i.i7.i.i, %if.then.i.i
  %prev1.i.i.i.sink = phi ptr [ %prev1.i.i.i, %if.end.i.i.i233 ], [ %prev1.i.i.i.i220, %if.end.i.i7.i.i ], [ %prev.i.i.i218, %if.then.i.i ]
  %.sink = phi ptr [ %63, %if.end.i.i.i233 ], [ %60, %if.end.i.i7.i.i ], [ %partial.i.i, %if.then.i.i ]
  %full.i.sink290 = phi ptr [ %full.i, %if.end.i.i.i233 ], [ %partial.i.i, %if.end.i.i7.i.i ], [ %59, %if.then.i.i ]
  store ptr %36, ptr %prev1.i.i.i.sink, align 4
  store ptr %.sink, ptr %36, align 4
  store ptr %full.i.sink290, ptr %prev.i.i.i206, align 4
  store volatile ptr %36, ptr %full.i.sink290, align 4
  br label %if.end107

if.end107:                                        ; preds = %if.end107.sink.split, %if.end18.i232, %if.then104, %if.else101, %if.else.i.i, %if.then.i.i, %if.end85
  %call110 = tail call fastcc zeroext i1 @cmpxchg_double_slab(ptr noundef %s, ptr noundef %slab, ptr noundef %37, i32 noundef %38, ptr noundef %new.sroa.3.0, i32 noundef %bf.clear40) #25
  br i1 %call110, label %if.end112, label %redo

if.end112:                                        ; preds = %if.end107
  %tobool113.not = icmp eq i32 %lock.1, 0
  br i1 %tobool113.not, label %if.end116, label %if.then114

if.then114:                                       ; preds = %if.end112
  tail call void @_raw_spin_unlock_irqrestore(ptr noundef %1, i32 noundef %flags.1) #27
  br label %if.end116

if.end116:                                        ; preds = %if.then114, %if.end112
  %64 = load ptr, ptr %s, align 4
  br i1 %cmp117, label %if.then119, label %if.else120

if.then119:                                       ; preds = %if.end116
  %arrayidx.i234 = getelementptr %struct.kmem_cache_cpu, ptr %64, i32 0, i32 5, i32 %tail.0
  br label %if.end130

if.else120:                                       ; preds = %if.end116
  br i1 %cmp121, label %if.then123, label %if.then127

if.then123:                                       ; preds = %if.else120
  %arrayidx.i240 = getelementptr %struct.kmem_cache_cpu, ptr %64, i32 0, i32 5, i32 13
  br label %if.end130

if.then127:                                       ; preds = %if.else120
  %arrayidx.i246 = getelementptr %struct.kmem_cache_cpu, ptr %64, i32 0, i32 5, i32 14
  %65 = ptrtoint ptr %arrayidx.i246 to i32
  %66 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i247 = and i32 %66, -16384
  %67 = inttoptr i32 %and.i.i247 to ptr
  %cpu.i248 = getelementptr inbounds %struct.thread_info, ptr %67, i32 0, i32 3
  %68 = load i32, ptr %cpu.i248, align 4
  %arrayidx7.i249 = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %68
  %69 = load i32, ptr %arrayidx7.i249, align 4
  %add.i250 = add i32 %69, %65
  %70 = inttoptr i32 %add.i250 to ptr
  %71 = load i32, ptr %70, align 4
  %add8.i251 = add i32 %71, 1
  store i32 %add8.i251, ptr %70, align 4
  %72 = load volatile i32, ptr %slab, align 4
  %cmp.i.not.i.i.i.i = icmp eq i32 %72, -1
  br i1 %cmp.i.not.i.i.i.i, label %if.then.i.i.i.i252, label %slab_nid.exit.i, !prof !13

if.then.i.i.i.i252:                               ; preds = %if.then127
  tail call void @dump_page(ptr noundef %slab, ptr noundef nonnull @.str.88) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/mm.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 1368, 0\0A.popsection", ""() #24, !srcloc !37
  unreachable

slab_nid.exit.i:                                  ; preds = %if.then127
  %bf.load.i = load i32, ptr %34, align 4
  %bf.lshr.i = lshr i32 %bf.load.i, 1
  %bf.clear.i = and i32 %bf.lshr.i, 32767
  %73 = load ptr, ptr %arrayidx.i, align 4
  %nr_slabs.i.i = getelementptr inbounds %struct.kmem_cache_node, ptr %73, i32 0, i32 3
  tail call void @llvm.prefetch.p0(ptr %nr_slabs.i.i, i32 1, i32 3, i32 1) #24
  %74 = tail call { i32, i32 } asm sideeffect "@ atomic_sub\0A1:\09ldrex\09$0, [$3]\0A\09sub\09$0, $0, $4\0A\09strex\09$1, $0, [$3]\0A\09teq\09$1, #0\0A\09bne\091b", "=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %nr_slabs.i.i, ptr %nr_slabs.i.i, i32 1, ptr elementtype(i32) %nr_slabs.i.i) #24, !srcloc !48
  %total_objects.i.i = getelementptr inbounds %struct.kmem_cache_node, ptr %73, i32 0, i32 4
  tail call void @llvm.prefetch.p0(ptr %total_objects.i.i, i32 1, i32 3, i32 1) #24
  %75 = tail call { i32, i32 } asm sideeffect "@ atomic_sub\0A1:\09ldrex\09$0, [$3]\0A\09sub\09$0, $0, $4\0A\09strex\09$1, $0, [$3]\0A\09teq\09$1, #0\0A\09bne\091b", "=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %total_objects.i.i, ptr %total_objects.i.i, i32 %bf.clear.i, ptr elementtype(i32) %total_objects.i.i) #24, !srcloc !48
  %76 = load i32, ptr %flags38.i, align 4
  %and.i.i253 = and i32 %76, 524288
  %tobool.not.i.i254 = icmp eq i32 %and.i.i253, 0
  br i1 %tobool.not.i.i254, label %if.else.i.i256, label %if.then.i.i255, !prof !14

if.then.i.i255:                                   ; preds = %slab_nid.exit.i
  tail call void @call_rcu(ptr noundef %36, ptr noundef nonnull @rcu_free_slab) #27
  br label %discard_slab.exit

if.else.i.i256:                                   ; preds = %slab_nid.exit.i
  tail call fastcc void @__free_slab(ptr noundef %s, ptr noundef %slab) #28
  br label %discard_slab.exit

discard_slab.exit:                                ; preds = %if.else.i.i256, %if.then.i.i255
  %77 = load ptr, ptr %s, align 4
  %arrayidx.i257 = getelementptr %struct.kmem_cache_cpu, ptr %77, i32 0, i32 5, i32 11
  br label %if.end130

if.end130:                                        ; preds = %discard_slab.exit, %if.then123, %if.then119
  %arrayidx.i240.sink = phi ptr [ %arrayidx.i240, %if.then123 ], [ %arrayidx.i257, %discard_slab.exit ], [ %arrayidx.i234, %if.then119 ]
  %78 = ptrtoint ptr %arrayidx.i240.sink to i32
  %79 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i241 = and i32 %79, -16384
  %80 = inttoptr i32 %and.i.i241 to ptr
  %cpu.i242 = getelementptr inbounds %struct.thread_info, ptr %80, i32 0, i32 3
  %81 = load i32, ptr %cpu.i242, align 4
  %arrayidx7.i243 = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %81
  %82 = load i32, ptr %arrayidx7.i243, align 4
  %add.i244 = add i32 %82, %78
  %83 = inttoptr i32 %add.i244 to ptr
  %84 = load i32, ptr %83, align 4
  %add8.i245 = add i32 %84, 1
  store i32 %add8.i245, ptr %83, align 4
  ret void
}

; Function Attrs: noinline nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc void @slab_out_of_memory(ptr nocapture noundef readonly %s, i32 noundef %gfpflags) unnamed_addr #17 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %gfpflags.addr = alloca i32, align 4
  store i32 %gfpflags, ptr %gfpflags.addr, align 4
  %and = and i32 %gfpflags, 8192
  %tobool.not = icmp eq i32 %and, 0
  br i1 %tobool.not, label %lor.lhs.false, label %cleanup

lor.lhs.false:                                    ; preds = %entry
  %call = tail call i32 @___ratelimit(ptr noundef nonnull @slab_out_of_memory.slub_oom_rs, ptr noundef nonnull @__func__.slab_out_of_memory) #27
  %tobool1.not = icmp eq i32 %call, 0
  br i1 %tobool1.not, label %cleanup, label %do.end

do.end:                                           ; preds = %lor.lhs.false
  %call2 = call i32 (ptr, ...) @_printk(ptr noundef nonnull @.str.107, i32 noundef -1, i32 noundef %gfpflags, ptr noundef nonnull %gfpflags.addr) #26
  %name = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 18
  %0 = load ptr, ptr %name, align 4
  %object_size = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 4
  %1 = load i32, ptr %object_size, align 4
  %size = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 3
  %2 = load i32, ptr %size, align 4
  %oo = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 9
  %.unpack = load i32, ptr %oo, align 4
  %shr.i3 = lshr i32 %.unpack, 16
  %min = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 11
  %.unpack1 = load i32, ptr %min, align 4
  %shr.i4 = lshr i32 %.unpack1, 16
  %call10 = call i32 (ptr, ...) @_printk(ptr noundef nonnull @.str.109, ptr noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %shr.i3, i32 noundef %shr.i4) #26
  %.unpack2 = load i32, ptr %min, align 4
  %shr.i5 = lshr i32 %.unpack2, 16
  %3 = load i32, ptr %object_size, align 4
  %dec.i = add i32 %3, -1
  %tobool.not.i.i = icmp ult i32 %dec.i, 4096
  %shr.i = lshr i32 %dec.i, 12
  %4 = call i32 @llvm.ctlz.i32(i32 %shr.i, i1 false) #24, !range !50
  %sub.i.i = sub nuw nsw i32 32, %4
  %cond.i.i = select i1 %tobool.not.i.i, i32 0, i32 %sub.i.i
  %cmp = icmp ugt i32 %shr.i5, %cond.i.i
  br i1 %cmp, label %do.end19, label %if.end23

do.end19:                                         ; preds = %do.end
  %5 = load ptr, ptr %name, align 4
  %call22 = call i32 (ptr, ...) @_printk(ptr noundef nonnull @.str.112, ptr noundef %5) #26
  br label %if.end23

if.end23:                                         ; preds = %do.end19, %do.end
  %arrayidx.i = getelementptr %struct.kmem_cache, ptr %s, i32 0, i32 26, i32 0
  %6 = load ptr, ptr %arrayidx.i, align 4
  %tobool26.not = icmp eq ptr %6, null
  br i1 %tobool26.not, label %cleanup, label %if.then27

if.then27:                                        ; preds = %if.end23
  %call28 = call fastcc i32 @count_partial(ptr noundef nonnull %6, ptr noundef nonnull @count_free) #25
  %nr_slabs.i = getelementptr inbounds %struct.kmem_cache_node, ptr %6, i32 0, i32 3
  %7 = load volatile i32, ptr %nr_slabs.i, align 4
  %total_objects.i = getelementptr inbounds %struct.kmem_cache_node, ptr %6, i32 0, i32 4
  %8 = load volatile i32, ptr %total_objects.i, align 4
  %call35 = call i32 (ptr, ...) @_printk(ptr noundef nonnull @.str.115, i32 noundef 0, i32 noundef %7, i32 noundef %8, i32 noundef %call28) #26
  br label %cleanup

cleanup:                                          ; preds = %if.then27, %if.end23, %lor.lhs.false, %entry
  ret void
}

; Function Attrs: noinline nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc i32 @alloc_debug_processing(ptr noundef %s, ptr noundef %slab, ptr noundef %object, i32 noundef %addr) unnamed_addr #17 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %flags = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 1
  %0 = load i32, ptr %flags, align 4
  %and = and i32 %0, 256
  %tobool.not = icmp eq i32 %and, 0
  br i1 %tobool.not, label %if.end3, label %if.then

if.then:                                          ; preds = %entry
  %call.i = tail call fastcc i32 @check_slab(ptr noundef %s, ptr noundef %slab) #27
  %tobool.not.i = icmp eq i32 %call.i, 0
  br i1 %tobool.not.i, label %bad, label %if.end.i

if.end.i:                                         ; preds = %if.then
  %tobool.not.i.i28 = icmp eq ptr %object, null
  br i1 %tobool.not.i.i28, label %alloc_consistency_checks.exit, label %if.end.i.i

if.end.i.i:                                       ; preds = %if.end.i
  %call.i.i.i.i = tail call ptr @page_address(ptr noundef %slab) #27
  %1 = load i32, ptr %flags, align 4
  %and.i.i.i29 = and i32 %1, 1024
  %tobool.not.i.i.i = icmp eq i32 %and.i.i.i29, 0
  br i1 %tobool.not.i.i.i, label %restore_red_left.exit.i.i, label %if.then.i.i.i

if.then.i.i.i:                                    ; preds = %if.end.i.i
  %red_left_pad.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 17
  %2 = load i32, ptr %red_left_pad.i.i.i, align 4
  %idx.neg.i.i.i = sub i32 0, %2
  %add.ptr.i.i.i = getelementptr i8, ptr %object, i32 %idx.neg.i.i.i
  br label %restore_red_left.exit.i.i

restore_red_left.exit.i.i:                        ; preds = %if.then.i.i.i, %if.end.i.i
  %p.addr.0.i.i.i = phi ptr [ %add.ptr.i.i.i, %if.then.i.i.i ], [ %object, %if.end.i.i ]
  %cmp.i.i = icmp ult ptr %p.addr.0.i.i.i, %call.i.i.i.i
  br i1 %cmp.i.i, label %if.then3.i, label %lor.lhs.false.i.i

lor.lhs.false.i.i:                                ; preds = %restore_red_left.exit.i.i
  %3 = getelementptr inbounds %struct.slab, ptr %slab, i32 0, i32 4
  %bf.load.i.i = load i32, ptr %3, align 4
  %bf.lshr.i.i = lshr i32 %bf.load.i.i, 1
  %bf.clear.i.i = and i32 %bf.lshr.i.i, 32767
  %size.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 3
  %4 = load i32, ptr %size.i.i, align 4
  %mul.i.i = mul i32 %bf.clear.i.i, %4
  %add.ptr.i.i = getelementptr i8, ptr %call.i.i.i.i, i32 %mul.i.i
  %cmp3.not.i.i = icmp ult ptr %p.addr.0.i.i.i, %add.ptr.i.i
  br i1 %cmp3.not.i.i, label %check_valid_pointer.exit.i, label %if.then3.i

check_valid_pointer.exit.i:                       ; preds = %lor.lhs.false.i.i
  %sub.ptr.lhs.cast.i.i = ptrtoint ptr %p.addr.0.i.i.i to i32
  %sub.ptr.rhs.cast.i.i = ptrtoint ptr %call.i.i.i.i to i32
  %sub.ptr.sub.i.i = sub i32 %sub.ptr.lhs.cast.i.i, %sub.ptr.rhs.cast.i.i
  %rem.i.i = urem i32 %sub.ptr.sub.i.i, %4
  %tobool6.not.i.not.i = icmp eq i32 %rem.i.i, 0
  br i1 %tobool6.not.i.not.i, label %alloc_consistency_checks.exit, label %if.then3.i

if.then3.i:                                       ; preds = %check_valid_pointer.exit.i, %lor.lhs.false.i.i, %restore_red_left.exit.i.i
  %5 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i.i = and i32 %5, -16384
  %6 = inttoptr i32 %and.i.i.i.i to ptr
  %task.i.i.i = getelementptr inbounds %struct.thread_info, ptr %6, i32 0, i32 2
  %7 = load ptr, ptr %task.i.i.i, align 8
  %kunit_test.i.i.i = getelementptr inbounds %struct.task_struct, ptr %7, i32 0, i32 192
  %8 = load ptr, ptr %kunit_test.i.i.i, align 4
  %tobool.not.i.i17.i = icmp eq ptr %8, null
  br i1 %tobool.not.i.i17.i, label %if.end.i18.i, label %if.end.i.i.i, !prof !14

if.end.i.i.i:                                     ; preds = %if.then3.i
  %lock.i.i.i = getelementptr inbounds %struct.kunit, ptr %8, i32 0, i32 6
  %call2.i.i.i = tail call i32 @_raw_spin_lock_irqsave(ptr noundef %lock.i.i.i) #27
  %resources.i.i.i = getelementptr inbounds %struct.kunit, ptr %8, i32 0, i32 8
  %prev.i.i.i = getelementptr inbounds %struct.kunit, ptr %8, i32 0, i32 8, i32 1
  %.pn3.i.i.i = load ptr, ptr %prev.i.i.i, align 4
  %cmp7.not4.i.i.i = icmp eq ptr %.pn3.i.i.i, %resources.i.i.i
  br i1 %cmp7.not4.i.i.i, label %kunit_find_named_resource.exit.thread.i, label %for.body.i.i.i

for.body.i.i.i:                                   ; preds = %for.inc.i.i.i, %if.end.i.i.i
  %.pn5.i.i.i = phi ptr [ %.pn.i.i.i, %for.inc.i.i.i ], [ %.pn3.i.i.i, %if.end.i.i.i ]
  %name.i.i.i.i = getelementptr i8, ptr %.pn5.i.i.i, i32 -12
  %9 = load ptr, ptr %name.i.i.i.i, align 4
  %tobool.not.i.i.i20.i = icmp eq ptr %9, null
  br i1 %tobool.not.i.i.i20.i, label %for.inc.i.i.i, label %kunit_resource_name_match.exit.i.i.i

kunit_resource_name_match.exit.i.i.i:             ; preds = %for.body.i.i.i
  %call.i.i.i21.i = tail call i32 @strcmp(ptr noundef nonnull %9, ptr noundef nonnull @.str.53) #27
  %cmp.i.i.i.i = icmp eq i32 %call.i.i.i21.i, 0
  br i1 %cmp.i.i.i.i, label %if.then.i.i22.i, label %for.inc.i.i.i

if.then.i.i22.i:                                  ; preds = %kunit_resource_name_match.exit.i.i.i
  %res.0.le.i.i.i = getelementptr i8, ptr %.pn5.i.i.i, i32 -16
  %refcount.i.i.i.i = getelementptr i8, ptr %.pn5.i.i.i, i32 -4
  tail call void @llvm.prefetch.p0(ptr %refcount.i.i.i.i, i32 1, i32 3, i32 1) #24
  %10 = tail call { i32, i32, i32 } asm sideeffect "@ atomic_fetch_add\0A1:\09ldrex\09$0, [$4]\0A\09add\09$1, $0, $5\0A\09strex\09$2, $1, [$4]\0A\09teq\09$2, #0\0A\09bne\091b", "=&r,=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %refcount.i.i.i.i, ptr %refcount.i.i.i.i, i32 1, ptr elementtype(i32) %refcount.i.i.i.i) #24, !srcloc !62
  %asmresult.i.i.i.i.i.i.i.i.i.i = extractvalue { i32, i32, i32 } %10, 0
  %tobool1.not.i.i.i.i.i.i.i.i = icmp eq i32 %asmresult.i.i.i.i.i.i.i.i.i.i, 0
  br i1 %tobool1.not.i.i.i.i.i.i.i.i, label %if.end15.sink.split.i.i.i.i.i.i.i.i, label %if.else.i.i.i.i.i.i.i.i, !prof !13

if.else.i.i.i.i.i.i.i.i:                          ; preds = %if.then.i.i22.i
  %add.i.i.i.i.i.i.i.i = add i32 %asmresult.i.i.i.i.i.i.i.i.i.i, 1
  %11 = or i32 %add.i.i.i.i.i.i.i.i, %asmresult.i.i.i.i.i.i.i.i.i.i
  %.not.i.i.i.i.i.i.i.i = icmp sgt i32 %11, -1
  br i1 %.not.i.i.i.i.i.i.i.i, label %kunit_find_named_resource.exit.i, label %if.end15.sink.split.i.i.i.i.i.i.i.i, !prof !14

if.end15.sink.split.i.i.i.i.i.i.i.i:              ; preds = %if.else.i.i.i.i.i.i.i.i, %if.then.i.i22.i
  %.sink.i.i.i.i.i.i.i.i = phi i32 [ 2, %if.then.i.i22.i ], [ 1, %if.else.i.i.i.i.i.i.i.i ]
  tail call void @refcount_warn_saturate(ptr noundef %refcount.i.i.i.i, i32 noundef %.sink.i.i.i.i.i.i.i.i) #27
  br label %kunit_find_named_resource.exit.i

for.inc.i.i.i:                                    ; preds = %kunit_resource_name_match.exit.i.i.i, %for.body.i.i.i
  %prev12.i.i.i = getelementptr inbounds %struct.list_head, ptr %.pn5.i.i.i, i32 0, i32 1
  %.pn.i.i.i = load ptr, ptr %prev12.i.i.i, align 4
  %cmp7.not.i.i.i = icmp eq ptr %.pn.i.i.i, %resources.i.i.i
  br i1 %cmp7.not.i.i.i, label %kunit_find_named_resource.exit.thread.i, label %for.body.i.i.i

kunit_find_named_resource.exit.thread.i:          ; preds = %for.inc.i.i.i, %if.end.i.i.i
  tail call void @_raw_spin_unlock_irqrestore(ptr noundef %lock.i.i.i, i32 noundef %call2.i.i.i) #27
  br label %if.end.i18.i

kunit_find_named_resource.exit.i:                 ; preds = %if.end15.sink.split.i.i.i.i.i.i.i.i, %if.else.i.i.i.i.i.i.i.i
  tail call void @_raw_spin_unlock_irqrestore(ptr noundef %lock.i.i.i, i32 noundef %call2.i.i.i) #27
  %tobool8.not.i.i.i = icmp eq ptr %res.0.le.i.i.i, null
  br i1 %tobool8.not.i.i.i, label %if.end.i18.i, label %slab_add_kunit_errors.exit.i.i

slab_add_kunit_errors.exit.i.i:                   ; preds = %kunit_find_named_resource.exit.i
  %12 = load ptr, ptr %res.0.le.i.i.i, align 4
  %13 = load i32, ptr %12, align 4
  %inc.i.i.i = add i32 %13, 1
  store i32 %inc.i.i.i, ptr %12, align 4
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #24, !srcloc !63
  tail call void @llvm.prefetch.p0(ptr %refcount.i.i.i.i, i32 1, i32 3, i32 1) #24
  %14 = tail call { i32, i32, i32 } asm sideeffect "@ atomic_fetch_sub\0A1:\09ldrex\09$0, [$4]\0A\09sub\09$1, $0, $5\0A\09strex\09$2, $1, [$4]\0A\09teq\09$2, #0\0A\09bne\091b", "=&r,=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %refcount.i.i.i.i, ptr %refcount.i.i.i.i, i32 1, ptr elementtype(i32) %refcount.i.i.i.i) #24, !srcloc !64
  %asmresult.i.i.i.i.i.i.i.i.i = extractvalue { i32, i32, i32 } %14, 0
  %cmp.i.i.i.i.i.i = icmp eq i32 %asmresult.i.i.i.i.i.i.i.i.i, 1
  br i1 %cmp.i.i.i.i.i.i, label %if.then.i.i19.i, label %if.end5.i.i.i.i.i.i

if.end5.i.i.i.i.i.i:                              ; preds = %slab_add_kunit_errors.exit.i.i
  %.not.i.i.i.i.i.i = icmp sgt i32 %asmresult.i.i.i.i.i.i.i.i.i, 0
  br i1 %.not.i.i.i.i.i.i, label %bad, label %if.then10.i.i.i.i.i.i, !prof !14

if.then10.i.i.i.i.i.i:                            ; preds = %if.end5.i.i.i.i.i.i
  tail call void @refcount_warn_saturate(ptr noundef %refcount.i.i.i.i, i32 noundef 3) #27
  br label %bad

if.then.i.i19.i:                                  ; preds = %slab_add_kunit_errors.exit.i.i
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #24, !srcloc !65
  %free.i.i.i.i = getelementptr i8, ptr %.pn5.i.i.i, i32 -8
  %15 = load ptr, ptr %free.i.i.i.i, align 4
  %tobool.not.i.i.i.i = icmp eq ptr %15, null
  br i1 %tobool.not.i.i.i.i, label %bad, label %if.then.i.i.i.i

if.then.i.i.i.i:                                  ; preds = %if.then.i.i19.i
  tail call void %15(ptr noundef nonnull %res.0.le.i.i.i) #27
  tail call void @kfree(ptr noundef nonnull %res.0.le.i.i.i) #34
  br label %bad

if.end.i18.i:                                     ; preds = %kunit_find_named_resource.exit.i, %kunit_find_named_resource.exit.thread.i, %if.then3.i
  tail call void (ptr, ptr, ...) @slab_bug(ptr noundef %s, ptr noundef nonnull @.str.52, ptr noundef nonnull @.str.118) #27
  tail call fastcc void @print_trailer(ptr noundef %s, ptr noundef %slab, ptr noundef nonnull %object) #27
  tail call void @add_taint(i32 noundef 5, i32 noundef 1) #27
  br label %bad

alloc_consistency_checks.exit:                    ; preds = %check_valid_pointer.exit.i, %if.end.i
  %call5.i = tail call fastcc i32 @check_object(ptr noundef %s, ptr noundef %slab, ptr noundef %object, i8 noundef zeroext -69) #27
  %tobool6.not.i.not = icmp eq i32 %call5.i, 0
  br i1 %tobool6.not.i.not, label %bad, label %alloc_consistency_checks.exit.if.end3_crit_edge

alloc_consistency_checks.exit.if.end3_crit_edge:  ; preds = %alloc_consistency_checks.exit
  %.pre = load i32, ptr %flags, align 4
  br label %if.end3

if.end3:                                          ; preds = %alloc_consistency_checks.exit.if.end3_crit_edge, %entry
  %16 = phi i32 [ %.pre, %alloc_consistency_checks.exit.if.end3_crit_edge ], [ %0, %entry ]
  %and5 = and i32 %16, 65536
  %tobool6.not = icmp eq i32 %and5, 0
  br i1 %tobool6.not, label %if.end8, label %if.then7

if.then7:                                         ; preds = %if.end3
  %offset.i.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 6
  %17 = load i32, ptr %offset.i.i.i.i, align 4
  %inuse.i.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 15
  %18 = load i32, ptr %inuse.i.i.i.i, align 4
  %cmp.i.not.i.i.i = icmp ult i32 %17, %18
  %add.i.i.i = add i32 %18, 4
  %spec.select.i.i.i = select i1 %cmp.i.not.i.i.i, i32 %18, i32 %add.i.i.i
  %add.ptr.i.i30 = getelementptr i8, ptr %object, i32 %spec.select.i.i.i
  %tobool.not.i31 = icmp eq i32 %addr, 0
  br i1 %tobool.not.i31, label %if.else.i, label %if.then.i

if.then.i:                                        ; preds = %if.then7
  tail call void @kasan_disable_current() #27
  %addrs.i = getelementptr inbounds %struct.track, ptr %add.ptr.i.i30, i32 0, i32 1
  %call2.i = tail call i32 @stack_trace_save(ptr noundef %addrs.i, i32 noundef 16, i32 noundef 3) #27
  tail call void @kasan_enable_current() #27
  %cmp.i = icmp ult i32 %call2.i, 16
  br i1 %cmp.i, label %if.then3.i32, label %if.end.i33

if.then3.i32:                                     ; preds = %if.then.i
  %arrayidx.i = getelementptr %struct.track, ptr %add.ptr.i.i30, i32 0, i32 1, i32 %call2.i
  store i32 0, ptr %arrayidx.i, align 4
  br label %if.end.i33

if.end.i33:                                       ; preds = %if.then3.i32, %if.then.i
  store i32 %addr, ptr %add.ptr.i.i30, align 4
  %19 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i = and i32 %19, -16384
  %20 = inttoptr i32 %and.i.i to ptr
  %cpu.i = getelementptr inbounds %struct.thread_info, ptr %20, i32 0, i32 3
  %21 = load i32, ptr %cpu.i, align 4
  %cpu7.i = getelementptr inbounds %struct.track, ptr %add.ptr.i.i30, i32 0, i32 2
  store i32 %21, ptr %cpu7.i, align 4
  %task.i = getelementptr inbounds %struct.thread_info, ptr %20, i32 0, i32 2
  %22 = load ptr, ptr %task.i, align 8
  %pid.i = getelementptr inbounds %struct.task_struct, ptr %22, i32 0, i32 68
  %23 = load i32, ptr %pid.i, align 8
  %pid9.i = getelementptr inbounds %struct.track, ptr %add.ptr.i.i30, i32 0, i32 3
  store i32 %23, ptr %pid9.i, align 4
  %24 = load volatile i32, ptr @jiffies, align 128
  %when.i = getelementptr inbounds %struct.track, ptr %add.ptr.i.i30, i32 0, i32 4
  store i32 %24, ptr %when.i, align 4
  br label %if.end8

if.else.i:                                        ; preds = %if.then7
  %call10.i = tail call ptr @__memset(ptr noundef %add.ptr.i.i30, i32 noundef 0, i32 noundef 80) #27
  br label %if.end8

if.end8:                                          ; preds = %if.else.i, %if.end.i33, %if.end3
  %25 = load i32, ptr %flags, align 4
  %and.i = and i32 %25, 2097152
  %tobool.not.i34 = icmp eq i32 %and.i, 0
  br i1 %tobool.not.i34, label %trace.exit, label %do.end.i

do.end.i:                                         ; preds = %if.end8
  %name.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 18
  %26 = load ptr, ptr %name.i, align 4
  %27 = getelementptr inbounds %struct.slab, ptr %slab, i32 0, i32 4
  %bf.load.i = load i32, ptr %27, align 4
  %bf.lshr.i = lshr i32 %bf.load.i, 16
  %freelist.i = getelementptr inbounds %struct.slab, ptr %slab, i32 0, i32 3
  %28 = load ptr, ptr %freelist.i, align 4
  %call.i35 = tail call i32 (ptr, ...) @_printk(ptr noundef nonnull @.str.80, ptr noundef %26, ptr noundef nonnull @.str.82, ptr noundef %object, i32 noundef %bf.lshr.i, ptr noundef %28) #26
  tail call void @dump_stack() #26
  %.pre49 = load i32, ptr %flags, align 4
  br label %trace.exit

trace.exit:                                       ; preds = %do.end.i, %if.end8
  %29 = phi i32 [ %25, %if.end8 ], [ %.pre49, %do.end.i ]
  %and.i39 = and i32 %29, 1024
  %tobool.not.i40 = icmp eq i32 %and.i39, 0
  br i1 %tobool.not.i40, label %if.end.i43, label %if.then.i42

if.then.i42:                                      ; preds = %trace.exit
  %red_left_pad.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 17
  %30 = load i32, ptr %red_left_pad.i, align 4
  %idx.neg.i = sub i32 0, %30
  %add.ptr.i = getelementptr i8, ptr %object, i32 %idx.neg.i
  %call2.i41 = tail call ptr @__memset(ptr noundef %add.ptr.i, i32 noundef 204, i32 noundef %30) #27
  %.pr.i = load i32, ptr %flags, align 4
  br label %if.end.i43

if.end.i43:                                       ; preds = %if.then.i42, %trace.exit
  %31 = phi i32 [ %.pr.i, %if.then.i42 ], [ %29, %trace.exit ]
  %tobool5.not.i = icmp sgt i32 %31, -1
  br i1 %tobool5.not.i, label %if.end10.i, label %if.then6.i

if.then6.i:                                       ; preds = %if.end.i43
  %object_size.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 4
  %32 = load i32, ptr %object_size.i, align 4
  %sub.i = add i32 %32, -1
  %call7.i = tail call ptr @__memset(ptr noundef %object, i32 noundef 107, i32 noundef %sub.i) #27
  %33 = load i32, ptr %object_size.i, align 4
  %sub9.i = add i32 %33, -1
  %arrayidx.i44 = getelementptr i8, ptr %object, i32 %sub9.i
  store i8 -91, ptr %arrayidx.i44, align 1
  %.pre.i = load i32, ptr %flags, align 4
  br label %if.end10.i

if.end10.i:                                       ; preds = %if.then6.i, %if.end.i43
  %34 = phi i32 [ %.pre.i, %if.then6.i ], [ %31, %if.end.i43 ]
  %and12.i = and i32 %34, 1024
  %tobool13.not.i = icmp eq i32 %and12.i, 0
  br i1 %tobool13.not.i, label %return, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %object_size15.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 4
  %35 = load i32, ptr %object_size15.i, align 4
  %add.ptr16.i = getelementptr i8, ptr %object, i32 %35
  %inuse.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 15
  %36 = load i32, ptr %inuse.i, align 4
  %sub19.i = sub i32 %36, %35
  %call20.i = tail call ptr @__memset(ptr noundef %add.ptr16.i, i32 noundef 204, i32 noundef %sub19.i) #27
  br label %return

bad:                                              ; preds = %alloc_consistency_checks.exit, %if.end.i18.i, %if.then.i.i.i.i, %if.then.i.i19.i, %if.then10.i.i.i.i.i.i, %if.end5.i.i.i.i.i.i, %if.then
  %37 = getelementptr inbounds %struct.page, ptr %slab, i32 0, i32 1
  %38 = load volatile i32, ptr %37, align 4
  %and.i.i.i = and i32 %38, 1
  %tobool.not.i.i = icmp eq i32 %and.i.i.i, 0
  br i1 %tobool.not.i.i, label %folio_test_slab.exit, label %if.then.i.i, !prof !14

if.then.i.i:                                      ; preds = %bad
  tail call void @dump_page(ptr noundef %slab, ptr noundef nonnull @.str.29) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 260, 0\0A.popsection", ""() #24, !srcloc !28
  unreachable

folio_test_slab.exit:                             ; preds = %bad
  %39 = load volatile i32, ptr %slab, align 4
  %40 = and i32 %39, 512
  %tobool.i.not = icmp eq i32 %40, 0
  br i1 %tobool.i.not, label %return, label %if.then10

if.then10:                                        ; preds = %folio_test_slab.exit
  tail call void (ptr, ptr, ...) @slab_fix(ptr noundef %s, ptr noundef nonnull @.str.117) #25
  %41 = getelementptr inbounds %struct.slab, ptr %slab, i32 0, i32 4
  %bf.load = load i32, ptr %41, align 4
  %42 = shl i32 %bf.load, 15
  %bf.shl = and i32 %42, 2147418112
  %bf.clear12 = and i32 %bf.load, 65535
  %bf.set = or i32 %bf.shl, %bf.clear12
  store i32 %bf.set, ptr %41, align 4
  %freelist = getelementptr inbounds %struct.slab, ptr %slab, i32 0, i32 3
  store ptr null, ptr %freelist, align 4
  br label %return

return:                                           ; preds = %if.then10, %folio_test_slab.exit, %if.then14.i, %if.end10.i
  %retval.0 = phi i32 [ 0, %if.then10 ], [ 0, %folio_test_slab.exit ], [ 1, %if.end10.i ], [ 1, %if.then14.i ]
  ret i32 %retval.0
}

; Function Attrs: null_pointer_is_valid
declare dso_local zeroext i1 @gfp_pfmemalloc_allowed(i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc ptr @get_partial_node(ptr noundef %s, ptr noundef %n, ptr nocapture noundef writeonly %ret_slab, i32 noundef %gfpflags) unnamed_addr #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %tobool.not = icmp eq ptr %n, null
  br i1 %tobool.not, label %cleanup37, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %nr_partial = getelementptr inbounds %struct.kmem_cache_node, ptr %n, i32 0, i32 1
  %0 = load i32, ptr %nr_partial, align 4
  %tobool1.not = icmp eq i32 %0, 0
  br i1 %tobool1.not, label %cleanup37, label %do.body2

do.body2:                                         ; preds = %lor.lhs.false
  %call3 = tail call i32 @_raw_spin_lock_irqsave(ptr noundef nonnull %n) #27
  %partial = getelementptr inbounds %struct.kmem_cache_node, ptr %n, i32 0, i32 2
  %1 = load ptr, ptr %partial, align 4
  %dep_map.i = getelementptr inbounds %struct.anon.15, ptr %n, i32 0, i32 1
  %flags38.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 1
  %cpu_partial_slabs = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 8
  %cmp12.not110 = icmp eq ptr %1, %partial
  br i1 %cmp12.not110, label %for.end, label %for.body

for.body:                                         ; preds = %cleanup, %do.body2
  %.pn.in114 = phi ptr [ %.pn117, %cleanup ], [ %1, %do.body2 ]
  %object.0113 = phi ptr [ %object.2, %cleanup ], [ null, %do.body2 ]
  %partial_slabs.0111 = phi i32 [ %partial_slabs.2, %cleanup ], [ 0, %do.body2 ]
  %slab.0116 = getelementptr i8, ptr %.pn.in114, i32 -4
  %.pn117 = load ptr, ptr %.pn.in114, align 4
  %2 = load volatile i32, ptr %.pn.in114, align 4
  %and.i.i.i.i.i = and i32 %2, 1
  %tobool.not.i.i.i.i = icmp eq i32 %and.i.i.i.i.i, 0
  br i1 %tobool.not.i.i.i.i, label %slab_test_pfmemalloc.exit.i, label %if.then.i.i.i.i, !prof !14

if.then.i.i.i.i:                                  ; preds = %for.body
  tail call void @dump_page(ptr noundef %slab.0116, ptr noundef nonnull @.str.29) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 260, 0\0A.popsection", ""() #24, !srcloc !28
  unreachable

slab_test_pfmemalloc.exit.i:                      ; preds = %for.body
  %3 = load volatile i32, ptr %slab.0116, align 4
  %4 = and i32 %3, 32
  %tobool.i.i.not.i = icmp eq i32 %4, 0
  br i1 %tobool.i.i.not.i, label %if.end16, label %pfmemalloc_match.exit, !prof !14

pfmemalloc_match.exit:                            ; preds = %slab_test_pfmemalloc.exit.i
  %call2.i = tail call zeroext i1 @gfp_pfmemalloc_allowed(i32 noundef %gfpflags) #27
  br i1 %call2.i, label %if.end16, label %cleanup

if.end16:                                         ; preds = %pfmemalloc_match.exit, %slab_test_pfmemalloc.exit.i
  %cmp17 = icmp eq ptr %object.0113, null
  %5 = load i32, ptr @debug_locks, align 4
  %tobool.not.i = icmp eq i32 %5, 0
  br i1 %tobool.not.i, label %if.end.i, label %land.rhs.i

land.rhs.i:                                       ; preds = %if.end16
  %call.i.i = tail call i32 @lock_is_held_type(ptr noundef %dep_map.i, i32 noundef -1) #27
  %cmp.not.i = icmp eq i32 %call.i.i, 0
  br i1 %cmp.not.i, label %do.end.i, label %if.end.i, !prof !13

do.end.i:                                         ; preds = %land.rhs.i
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.2, i32 noundef 2094, i32 noundef 9, ptr noundef null) #27
  br label %if.end.i

if.end.i:                                         ; preds = %do.end.i, %land.rhs.i, %if.end16
  %freelist24.i = getelementptr i8, ptr %.pn.in114, i32 12
  %6 = load ptr, ptr %freelist24.i, align 4
  %7 = getelementptr i8, ptr %.pn.in114, i32 16
  %8 = load i32, ptr %7, align 4
  %9 = shl i32 %8, 15
  %bf.shl.i = and i32 %9, 2147418112
  %bf.clear28.i = and i32 %8, 65535
  %bf.set.i = or i32 %bf.shl.i, %bf.clear28.i
  %new.sroa.6.0.i = select i1 %cmp17, i32 %bf.set.i, i32 %8
  %bf.clear34.i = and i32 %new.sroa.6.0.i, 1
  %tobool35.not.i = icmp eq i32 %bf.clear34.i, 0
  br i1 %tobool35.not.i, label %do.end51.i, label %do.body43.i, !prof !14

do.body43.i:                                      ; preds = %if.end.i
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slub.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 2111, 0\0A.popsection", ""() #24, !srcloc !100
  unreachable

do.end51.i:                                       ; preds = %if.end.i
  %new.sroa.3.0.i = select i1 %cmp17, ptr null, ptr %6
  %bf.set54.i = or i32 %new.sroa.6.0.i, 1
  %call56.i = tail call fastcc zeroext i1 @__cmpxchg_double_slab(ptr noundef %s, ptr noundef %slab.0116, ptr noundef %6, i32 noundef %8, ptr noundef %new.sroa.3.0.i, i32 noundef %bf.set54.i) #27
  br i1 %call56.i, label %if.end58.i, label %for.end

if.end58.i:                                       ; preds = %do.end51.i
  %10 = load i32, ptr @debug_locks, align 4
  %tobool.not.i.i = icmp eq i32 %10, 0
  br i1 %tobool.not.i.i, label %if.end.i.i, label %land.rhs.i.i

land.rhs.i.i:                                     ; preds = %if.end58.i
  %call.i.i.i = tail call i32 @lock_is_held_type(ptr noundef %dep_map.i, i32 noundef -1) #27
  %cmp.not.i.i = icmp eq i32 %call.i.i.i, 0
  br i1 %cmp.not.i.i, label %do.end.i.i, label %if.end.i.i, !prof !13

do.end.i.i:                                       ; preds = %land.rhs.i.i
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.2, i32 noundef 2075, i32 noundef 9, ptr noundef null) #27
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %do.end.i.i, %land.rhs.i.i, %if.end58.i
  %call.i.i.i.i = tail call zeroext i1 @__list_del_entry_valid(ptr noundef %.pn.in114) #27
  br i1 %call.i.i.i.i, label %if.end.i.i.i.i, label %remove_partial.exit.i

if.end.i.i.i.i:                                   ; preds = %if.end.i.i
  %prev.i.i.i.i = getelementptr i8, ptr %.pn.in114, i32 4
  %11 = load ptr, ptr %prev.i.i.i.i, align 4
  %12 = load ptr, ptr %.pn.in114, align 4
  %prev1.i.i.i.i.i = getelementptr inbounds %struct.list_head, ptr %12, i32 0, i32 1
  store ptr %11, ptr %prev1.i.i.i.i.i, align 4
  store volatile ptr %12, ptr %11, align 4
  br label %remove_partial.exit.i

remove_partial.exit.i:                            ; preds = %if.end.i.i.i.i, %if.end.i.i
  store ptr inttoptr (i32 256 to ptr), ptr %.pn.in114, align 4
  %prev.i.i.i = getelementptr i8, ptr %.pn.in114, i32 4
  store ptr inttoptr (i32 290 to ptr), ptr %prev.i.i.i, align 4
  %13 = load i32, ptr %nr_partial, align 4
  %dec.i.i = add i32 %13, -1
  store i32 %dec.i.i, ptr %nr_partial, align 4
  %tobool60.not.i = icmp eq ptr %6, null
  br i1 %tobool60.not.i, label %do.end78.i, label %if.end22, !prof !13

do.end78.i:                                       ; preds = %remove_partial.exit.i
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.2, i32 noundef 2121, i32 noundef 9, ptr noundef null) #27
  br label %for.end

if.end22:                                         ; preds = %remove_partial.exit.i
  br i1 %cmp17, label %if.then24, label %if.else

if.then24:                                        ; preds = %if.end22
  store ptr %slab.0116, ptr %ret_slab, align 4
  %14 = load ptr, ptr %s, align 4
  %arrayidx.i = getelementptr %struct.kmem_cache_cpu, ptr %14, i32 0, i32 5, i32 7
  %15 = ptrtoint ptr %arrayidx.i to i32
  %16 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i = and i32 %16, -16384
  %17 = inttoptr i32 %and.i.i to ptr
  %cpu.i = getelementptr inbounds %struct.thread_info, ptr %17, i32 0, i32 3
  %18 = load i32, ptr %cpu.i, align 4
  %arrayidx7.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %18
  %19 = load i32, ptr %arrayidx7.i, align 4
  %add.i = add i32 %19, %15
  %20 = inttoptr i32 %add.i to ptr
  %21 = load i32, ptr %20, align 4
  %add8.i = add i32 %21, 1
  store i32 %add8.i, ptr %20, align 4
  br label %if.end25

if.else:                                          ; preds = %if.end22
  tail call fastcc void @put_cpu_partial(ptr noundef %s, ptr noundef %slab.0116, i32 noundef 0) #25
  %22 = load ptr, ptr %s, align 4
  %arrayidx.i66 = getelementptr %struct.kmem_cache_cpu, ptr %22, i32 0, i32 5, i32 24
  %23 = ptrtoint ptr %arrayidx.i66 to i32
  %24 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i67 = and i32 %24, -16384
  %25 = inttoptr i32 %and.i.i67 to ptr
  %cpu.i68 = getelementptr inbounds %struct.thread_info, ptr %25, i32 0, i32 3
  %26 = load i32, ptr %cpu.i68, align 4
  %arrayidx7.i69 = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %26
  %27 = load i32, ptr %arrayidx7.i69, align 4
  %add.i70 = add i32 %27, %23
  %28 = inttoptr i32 %add.i70 to ptr
  %29 = load i32, ptr %28, align 4
  %add8.i71 = add i32 %29, 1
  store i32 %add8.i71, ptr %28, align 4
  %inc = add i32 %partial_slabs.0111, 1
  br label %if.end25

if.end25:                                         ; preds = %if.else, %if.then24
  %partial_slabs.1 = phi i32 [ %inc, %if.else ], [ %partial_slabs.0111, %if.then24 ]
  %object.1 = phi ptr [ %object.0113, %if.else ], [ %6, %if.then24 ]
  callbr void asm sideeffect "1:\0A\09b ${1:l}\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr nonnull @slub_debug_enabled, ptr blockaddress(@get_partial_node, %if.then37.i.i.i)) #24
          to label %lor.lhs.false27 [label %if.then37.i.i.i], !srcloc !10

if.then37.i.i.i:                                  ; preds = %if.end25
  %30 = load i32, ptr %flags38.i.i.i, align 4
  %and39.i.i.i = and i32 %30, 2166016
  %tobool40.i.i.i = icmp eq i32 %and39.i.i.i, 0
  br i1 %tobool40.i.i.i, label %lor.lhs.false27, label %for.end

lor.lhs.false27:                                  ; preds = %if.then37.i.i.i, %if.end25
  %31 = load i32, ptr %cpu_partial_slabs, align 4
  %div63 = lshr i32 %31, 1
  %cmp28 = icmp ugt i32 %partial_slabs.1, %div63
  br i1 %cmp28, label %for.end, label %cleanup

cleanup:                                          ; preds = %lor.lhs.false27, %pfmemalloc_match.exit
  %partial_slabs.2 = phi i32 [ %partial_slabs.0111, %pfmemalloc_match.exit ], [ %partial_slabs.1, %lor.lhs.false27 ]
  %object.2 = phi ptr [ %object.0113, %pfmemalloc_match.exit ], [ %object.1, %lor.lhs.false27 ]
  %cmp12.not = icmp eq ptr %.pn117, %partial
  br i1 %cmp12.not, label %for.end, label %for.body

for.end:                                          ; preds = %cleanup, %lor.lhs.false27, %if.then37.i.i.i, %do.end78.i, %do.end51.i, %do.body2
  %object.3 = phi ptr [ %object.0113, %do.end78.i ], [ null, %do.body2 ], [ %object.1, %lor.lhs.false27 ], [ %object.0113, %do.end51.i ], [ %object.1, %if.then37.i.i.i ], [ %object.2, %cleanup ]
  tail call void @_raw_spin_unlock_irqrestore(ptr noundef nonnull %n, i32 noundef %call3) #27
  br label %cleanup37

cleanup37:                                        ; preds = %for.end, %lor.lhs.false, %entry
  %retval.0 = phi ptr [ %object.3, %for.end ], [ null, %lor.lhs.false ], [ null, %entry ]
  ret ptr %retval.0
}

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @kmalloc_fix_flags(i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc ptr @allocate_slab(ptr noundef %s, i32 noundef %flags, i32 noundef %node) unnamed_addr #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %oo1 = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 9
  %oo.sroa.0.0.copyload = load i32, ptr %oo1, align 4
  %0 = load i32, ptr @gfp_allowed_mask, align 4
  %and = and i32 %0, %flags
  %allocflags = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 12
  %1 = load i32, ptr %allocflags, align 4
  %or = or i32 %and, %1
  %or3 = and i32 %or, -106497
  %and4 = or i32 %or3, 73728
  %and5 = and i32 %or, 1024
  %tobool.not = icmp eq i32 %and5, 0
  %.pre187 = lshr i32 %oo.sroa.0.0.copyload, 16
  br i1 %tobool.not, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %min = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 11
  %.unpack = load i32, ptr %min, align 4
  %shr.i142 = lshr i32 %.unpack, 16
  %cmp = icmp ugt i32 %.pre187, %shr.i142
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %or8 = and i32 %or, -633857
  %and9 = or i32 %or8, 598016
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %alloc_gfp.0 = phi i32 [ %and9, %if.then ], [ %and4, %land.lhs.true ], [ %and4, %entry ]
  %call38.i.i.i.i = tail call ptr @__alloc_pages(i32 noundef %alloc_gfp.0, i32 noundef %.pre187, i32 noundef 0, ptr noundef null) #27
  %tobool.not.i143 = icmp eq ptr %call38.i.i.i.i, null
  br i1 %tobool.not.i143, label %if.then16, label %if.end5.i

if.end5.i:                                        ; preds = %if.end
  %2 = getelementptr inbounds %struct.page, ptr %call38.i.i.i.i, i32 0, i32 1
  %3 = load volatile i32, ptr %2, align 4
  %and.i.i.i.i = and i32 %3, 1
  %tobool.not.i.i.i = icmp eq i32 %and.i.i.i.i, 0
  br i1 %tobool.not.i.i.i, label %__folio_set_slab.exit.i, label %if.then.i.i.i, !prof !14

if.then.i.i.i:                                    ; preds = %if.end5.i
  tail call void @dump_page(ptr noundef nonnull %call38.i.i.i.i, ptr noundef nonnull @.str.29) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 260, 0\0A.popsection", ""() #24, !srcloc !28
  unreachable

__folio_set_slab.exit.i:                          ; preds = %if.end5.i
  %4 = load i32, ptr %call38.i.i.i.i, align 4
  %or.i.i.i = or i32 %4, 512
  store i32 %or.i.i.i, ptr %call38.i.i.i.i, align 4
  %and.i.i144 = and i32 %3, 2
  %tobool.i.not.i = icmp eq i32 %and.i.i144, 0
  br i1 %tobool.i.not.i, label %if.end31, label %if.then7.i

if.then7.i:                                       ; preds = %__folio_set_slab.exit.i
  %5 = load volatile i32, ptr %2, align 4
  %and.i.i.i.i.i = and i32 %5, 1
  %tobool.not.i.i.i.i = icmp eq i32 %and.i.i.i.i.i, 0
  br i1 %tobool.not.i.i.i.i, label %slab_set_pfmemalloc.exit.i, label %if.then.i.i.i.i, !prof !14

if.then.i.i.i.i:                                  ; preds = %if.then7.i
  tail call void @dump_page(ptr noundef nonnull %call38.i.i.i.i, ptr noundef nonnull @.str.29) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 260, 0\0A.popsection", ""() #24, !srcloc !28
  unreachable

slab_set_pfmemalloc.exit.i:                       ; preds = %if.then7.i
  tail call void @_set_bit(i32 noundef 5, ptr noundef nonnull %call38.i.i.i.i) #27
  br label %if.end31

if.then16:                                        ; preds = %if.end
  %min17 = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 11
  %oo.sroa.0.0.copyload97 = load i32, ptr %min17, align 4
  %.fca.0.insert89 = insertvalue [1 x i32] poison, i32 %oo.sroa.0.0.copyload97, 0
  %call19 = tail call fastcc ptr @alloc_slab_page(i32 noundef %or, i32 noundef %node, [1 x i32] %.fca.0.insert89) #25
  %tobool20.not = icmp eq ptr %call19, null
  br i1 %tobool20.not, label %cleanup, label %if.end30, !prof !13

if.end30:                                         ; preds = %if.then16
  %6 = load ptr, ptr %s, align 4
  %arrayidx.i = getelementptr %struct.kmem_cache_cpu, ptr %6, i32 0, i32 5, i32 19
  %7 = ptrtoint ptr %arrayidx.i to i32
  %8 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i145 = and i32 %8, -16384
  %9 = inttoptr i32 %and.i.i145 to ptr
  %cpu.i = getelementptr inbounds %struct.thread_info, ptr %9, i32 0, i32 3
  %10 = load i32, ptr %cpu.i, align 4
  %arrayidx7.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %10
  %11 = load i32, ptr %arrayidx7.i, align 4
  %add.i = add i32 %11, %7
  %12 = inttoptr i32 %add.i to ptr
  %13 = load i32, ptr %12, align 4
  %add8.i = add i32 %13, 1
  store i32 %add8.i, ptr %12, align 4
  %.pre = lshr i32 %oo.sroa.0.0.copyload97, 16
  br label %if.end31

if.end31:                                         ; preds = %if.end30, %slab_set_pfmemalloc.exit.i, %__folio_set_slab.exit.i
  %shr.i147.pre-phi = phi i32 [ %.pre187, %slab_set_pfmemalloc.exit.i ], [ %.pre187, %__folio_set_slab.exit.i ], [ %.pre, %if.end30 ]
  %slab.0 = phi ptr [ %call38.i.i.i.i, %slab_set_pfmemalloc.exit.i ], [ %call38.i.i.i.i, %__folio_set_slab.exit.i ], [ %call19, %if.end30 ]
  %oo.sroa.0.0 = phi i32 [ %oo.sroa.0.0.copyload, %slab_set_pfmemalloc.exit.i ], [ %oo.sroa.0.0.copyload, %__folio_set_slab.exit.i ], [ %oo.sroa.0.0.copyload97, %if.end30 ]
  %14 = getelementptr inbounds %struct.slab, ptr %slab.0, i32 0, i32 4
  %bf.load = load i32, ptr %14, align 4
  %and.i146 = shl i32 %oo.sroa.0.0, 1
  %bf.shl = and i32 %and.i146, 65534
  %bf.clear = and i32 %bf.load, -65535
  %bf.set = or i32 %bf.clear, %bf.shl
  store i32 %bf.set, ptr %14, align 4
  callbr void asm sideeffect "1:\0A\09b ${1:l}\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr getelementptr inbounds (i8, ptr @memcg_kmem_enabled_key, i32 1), ptr blockaddress(@allocate_slab, %if.end.i)) #24
          to label %land.lhs.true.i [label %if.end.i], !srcloc !10

land.lhs.true.i:                                  ; preds = %if.end31
  %flags.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 1
  %15 = load i32, ptr %flags.i, align 4
  %and.i = and i32 %15, 67108864
  %tobool.not.i = icmp eq i32 %and.i, 0
  br i1 %tobool.not.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %land.lhs.true.i
  %call1.i = tail call i32 @memcg_alloc_slab_cgroups(ptr noundef nonnull %slab.0, ptr noundef %s, i32 noundef %or, i1 noundef zeroext true) #27
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %land.lhs.true.i, %if.end31
  %16 = load volatile i32, ptr %slab.0, align 4
  %cmp.i.not.i.i.i.i.i = icmp eq i32 %16, -1
  br i1 %cmp.i.not.i.i.i.i.i, label %if.then.i.i.i.i.i, label %account_slab.exit, !prof !13

if.then.i.i.i.i.i:                                ; preds = %if.end.i
  tail call void @dump_page(ptr noundef nonnull %slab.0, ptr noundef nonnull @.str.88) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/mm.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 1368, 0\0A.popsection", ""() #24, !srcloc !37
  unreachable

account_slab.exit:                                ; preds = %if.end.i
  %flags.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 1
  %17 = load i32, ptr %flags.i.i, align 4
  %and.i.i = and i32 %17, 131072
  %tobool.not.i.i = icmp eq i32 %and.i.i, 0
  %cond.i.i = select i1 %tobool.not.i.i, i32 6, i32 5
  %shl.i = shl i32 4096, %shr.i147.pre-phi
  tail call void @mod_node_page_state(ptr noundef nonnull @contig_page_data, i32 noundef %cond.i.i, i32 noundef %shl.i) #27
  %slab_cache = getelementptr inbounds %struct.slab, ptr %slab.0, i32 0, i32 2
  store ptr %s, ptr %slab_cache, align 4
  tail call void @__kasan_poison_slab(ptr noundef nonnull %slab.0) #27
  %call.i.i = tail call ptr @page_address(ptr noundef nonnull %slab.0) #27
  callbr void asm sideeffect "1:\0A\09b ${1:l}\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr nonnull @slub_debug_enabled, ptr blockaddress(@allocate_slab, %if.then37.i.i)) #24
          to label %setup_slab_debug.exit [label %if.then37.i.i], !srcloc !10

if.then37.i.i:                                    ; preds = %account_slab.exit
  %18 = load i32, ptr %flags.i.i, align 4
  %and39.i.i = and i32 %18, 2048
  %tobool40.i.not.i = icmp eq i32 %and39.i.i, 0
  br i1 %tobool40.i.not.i, label %setup_slab_debug.exit, label %if.end.i148

if.end.i148:                                      ; preds = %if.then37.i.i
  tail call void @kasan_disable_current() #27
  %19 = load volatile i32, ptr %slab.0, align 4
  %cmp.i.not.i.i.i.i.i.i = icmp eq i32 %19, -1
  br i1 %cmp.i.not.i.i.i.i.i.i, label %if.then.i.i.i.i.i.i, label %PageHead.exit.i.i.i.i.i, !prof !13

if.then.i.i.i.i.i.i:                              ; preds = %if.end.i148
  tail call void @dump_page(ptr noundef nonnull %slab.0, ptr noundef nonnull @.str.33) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 698, 0\0A.popsection", ""() #24, !srcloc !51
  unreachable

PageHead.exit.i.i.i.i.i:                          ; preds = %if.end.i148
  %20 = load volatile i32, ptr %slab.0, align 4
  %21 = and i32 %20, 65536
  %tobool.not.i.i.i.i.i = icmp eq i32 %21, 0
  br i1 %tobool.not.i.i.i.i.i, label %slab_size.exit.i, label %if.end.i.i.i.i.i

if.end.i.i.i.i.i:                                 ; preds = %PageHead.exit.i.i.i.i.i
  %22 = getelementptr %struct.page, ptr %slab.0, i32 1, i32 1
  %compound_order.i.i.i.i.i = getelementptr inbounds %struct.anon.47, ptr %22, i32 0, i32 2
  %23 = load i8, ptr %compound_order.i.i.i.i.i, align 1
  %conv.i.i.i.i.i = zext i8 %23 to i32
  br label %slab_size.exit.i

slab_size.exit.i:                                 ; preds = %if.end.i.i.i.i.i, %PageHead.exit.i.i.i.i.i
  %retval.0.i.i.i.i.i = phi i32 [ %conv.i.i.i.i.i, %if.end.i.i.i.i.i ], [ 0, %PageHead.exit.i.i.i.i.i ]
  %shl.i.i = shl i32 4096, %retval.0.i.i.i.i.i
  %call3.i = tail call ptr @__memset(ptr noundef %call.i.i, i32 noundef 90, i32 noundef %shl.i.i) #27
  tail call void @kasan_enable_current() #27
  br label %setup_slab_debug.exit

setup_slab_debug.exit:                            ; preds = %slab_size.exit.i, %if.then37.i.i, %account_slab.exit
  %call37 = tail call fastcc zeroext i1 @shuffle_freelist(ptr noundef %s, ptr noundef nonnull %slab.0) #25
  br i1 %call37, label %out, label %if.then39

if.then39:                                        ; preds = %setup_slab_debug.exit
  callbr void asm sideeffect "1:\0A\09b ${1:l}\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr nonnull @slub_debug_enabled, ptr blockaddress(@allocate_slab, %if.then37.i.i152)) #24
          to label %fixup_red_left.exit [label %if.then37.i.i152], !srcloc !10

if.then37.i.i152:                                 ; preds = %if.then39
  %24 = load i32, ptr %flags.i.i, align 4
  %and39.i.i150 = and i32 %24, 1024
  %tobool40.i.not.i151 = icmp eq i32 %and39.i.i150, 0
  br i1 %tobool40.i.not.i151, label %fixup_red_left.exit, label %if.then.i153

if.then.i153:                                     ; preds = %if.then37.i.i152
  %red_left_pad.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 17
  %25 = load i32, ptr %red_left_pad.i, align 4
  %add.ptr.i = getelementptr i8, ptr %call.i.i, i32 %25
  br label %fixup_red_left.exit

fixup_red_left.exit:                              ; preds = %if.then.i153, %if.then37.i.i152, %if.then39
  %p.addr.0.i = phi ptr [ %add.ptr.i, %if.then.i153 ], [ %call.i.i, %if.then37.i.i152 ], [ %call.i.i, %if.then39 ]
  tail call fastcc void @setup_object_debug(ptr noundef %s, ptr noundef %p.addr.0.i) #27
  %call1.i.i = tail call ptr @__kasan_init_slab_obj(ptr noundef %s, ptr noundef %p.addr.0.i) #27
  %ctor.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 14
  %26 = load ptr, ptr %ctor.i, align 4
  %tobool.not.i155 = icmp eq ptr %26, null
  br i1 %tobool.not.i155, label %setup_object.exit, label %if.then.i156, !prof !14

if.then.i156:                                     ; preds = %fixup_red_left.exit
  tail call void @__kasan_unpoison_object_data(ptr noundef %s, ptr noundef %call1.i.i) #27
  %27 = load ptr, ptr %ctor.i, align 4
  tail call void %27(ptr noundef %call1.i.i) #27
  tail call void @__kasan_poison_object_data(ptr noundef %s, ptr noundef %call1.i.i) #27
  br label %setup_object.exit

setup_object.exit:                                ; preds = %if.then.i156, %fixup_red_left.exit
  %freelist = getelementptr inbounds %struct.slab, ptr %slab.0, i32 0, i32 3
  store ptr %call1.i.i, ptr %freelist, align 4
  %bf.load42179 = load i32, ptr %14, align 4
  %28 = and i32 %bf.load42179, 65532
  %cmp44183.not = icmp eq i32 %28, 0
  br i1 %cmp44183.not, label %for.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %setup_object.exit
  %size = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 3
  %offset.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 6
  %random.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 21
  br label %for.body

for.body:                                         ; preds = %set_freepointer.exit, %for.body.lr.ph
  %idx.0185 = phi i32 [ 0, %for.body.lr.ph ], [ %inc, %set_freepointer.exit ]
  %p.0184 = phi ptr [ %call1.i.i, %for.body.lr.ph ], [ %call1.i.i158, %set_freepointer.exit ]
  %29 = load i32, ptr %size, align 4
  %add.ptr = getelementptr i8, ptr %p.0184, i32 %29
  tail call fastcc void @setup_object_debug(ptr noundef %s, ptr noundef %add.ptr) #27
  %call1.i.i158 = tail call ptr @__kasan_init_slab_obj(ptr noundef %s, ptr noundef %add.ptr) #27
  %30 = load ptr, ptr %ctor.i, align 4
  %tobool.not.i160 = icmp eq ptr %30, null
  br i1 %tobool.not.i160, label %setup_object.exit163, label %if.then.i161, !prof !14

if.then.i161:                                     ; preds = %for.body
  tail call void @__kasan_unpoison_object_data(ptr noundef %s, ptr noundef %call1.i.i158) #27
  %31 = load ptr, ptr %ctor.i, align 4
  tail call void %31(ptr noundef %call1.i.i158) #27
  tail call void @__kasan_poison_object_data(ptr noundef %s, ptr noundef %call1.i.i158) #27
  br label %setup_object.exit163

setup_object.exit163:                             ; preds = %if.then.i161, %for.body
  %cmp.i = icmp eq ptr %p.0184, %call1.i.i158
  br i1 %cmp.i, label %do.body2.i, label %set_freepointer.exit, !prof !13

do.body2.i:                                       ; preds = %setup_object.exit163
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slub.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 379, 0\0A.popsection", ""() #24, !srcloc !30
  unreachable

set_freepointer.exit:                             ; preds = %setup_object.exit163
  %32 = ptrtoint ptr %p.0184 to i32
  %33 = load i32, ptr %offset.i, align 4
  %add.i164 = add i32 %33, %32
  %34 = inttoptr i32 %add.i164 to ptr
  %35 = ptrtoint ptr %call1.i.i158 to i32
  %36 = load i32, ptr %random.i.i, align 4
  %37 = tail call i32 @llvm.bswap.i32(i32 %add.i164) #24
  %xor.i.i = xor i32 %36, %35
  %xor2.i.i = xor i32 %xor.i.i, %37
  %38 = inttoptr i32 %xor2.i.i to ptr
  store ptr %38, ptr %34, align 4
  %inc = add nuw nsw i32 %idx.0185, 1
  %bf.load42 = load i32, ptr %14, align 4
  %bf.lshr = lshr i32 %bf.load42, 1
  %bf.clear43 = and i32 %bf.lshr, 32767
  %sub = add nsw i32 %bf.clear43, -1
  %cmp44 = icmp slt i32 %inc, %sub
  br i1 %cmp44, label %for.body, label %for.end

for.end:                                          ; preds = %set_freepointer.exit, %setup_object.exit
  %p.0.lcssa = phi ptr [ %call1.i.i, %setup_object.exit ], [ %call1.i.i158, %set_freepointer.exit ]
  %cmp.i165 = icmp eq ptr %p.0.lcssa, null
  br i1 %cmp.i165, label %do.body2.i166, label %set_freepointer.exit171, !prof !13

do.body2.i166:                                    ; preds = %for.end
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slub.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 379, 0\0A.popsection", ""() #24, !srcloc !30
  unreachable

set_freepointer.exit171:                          ; preds = %for.end
  %39 = ptrtoint ptr %p.0.lcssa to i32
  %offset.i167 = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 6
  %40 = load i32, ptr %offset.i167, align 4
  %add.i168 = add i32 %40, %39
  %41 = inttoptr i32 %add.i168 to ptr
  %random.i.i169 = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 21
  %42 = load i32, ptr %random.i.i169, align 4
  %43 = tail call i32 @llvm.bswap.i32(i32 %add.i168) #24
  %xor2.i.i170 = xor i32 %43, %42
  %44 = inttoptr i32 %xor2.i.i170 to ptr
  store ptr %44, ptr %41, align 4
  br label %out

out:                                              ; preds = %set_freepointer.exit171, %setup_slab_debug.exit
  %bf.load47 = load i32, ptr %14, align 4
  %45 = shl i32 %bf.load47, 15
  %bf.shl52 = and i32 %45, 2147418112
  %bf.clear53 = and i32 %bf.load47, 65534
  %bf.set54 = or i32 %bf.clear53, %bf.shl52
  %bf.set57 = or i32 %bf.set54, 1
  store i32 %bf.set57, ptr %14, align 4
  %46 = load volatile i32, ptr %slab.0, align 4
  %cmp.i.not.i.i.i = icmp eq i32 %46, -1
  br i1 %cmp.i.not.i.i.i, label %if.then.i.i.i172, label %slab_nid.exit, !prof !13

if.then.i.i.i172:                                 ; preds = %out
  tail call void @dump_page(ptr noundef nonnull %slab.0, ptr noundef nonnull @.str.88) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/mm.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 1368, 0\0A.popsection", ""() #24, !srcloc !37
  unreachable

slab_nid.exit:                                    ; preds = %out
  %arrayidx.i.i = getelementptr %struct.kmem_cache, ptr %s, i32 0, i32 26, i32 0
  %47 = load ptr, ptr %arrayidx.i.i, align 4
  %tobool.not.i173 = icmp eq ptr %47, null
  br i1 %tobool.not.i173, label %cleanup, label %if.then.i174, !prof !13

if.then.i174:                                     ; preds = %slab_nid.exit
  %bf.lshr63 = lshr exact i32 %bf.clear53, 1
  %nr_slabs.i = getelementptr inbounds %struct.kmem_cache_node, ptr %47, i32 0, i32 3
  tail call void @llvm.prefetch.p0(ptr %nr_slabs.i, i32 1, i32 3, i32 1) #24
  %48 = tail call { i32, i32 } asm sideeffect "@ atomic_add\0A1:\09ldrex\09$0, [$3]\0A\09add\09$0, $0, $4\0A\09strex\09$1, $0, [$3]\0A\09teq\09$1, #0\0A\09bne\091b", "=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %nr_slabs.i, ptr %nr_slabs.i, i32 1, ptr elementtype(i32) %nr_slabs.i) #24, !srcloc !59
  %total_objects.i = getelementptr inbounds %struct.kmem_cache_node, ptr %47, i32 0, i32 4
  tail call void @llvm.prefetch.p0(ptr %total_objects.i, i32 1, i32 3, i32 1) #24
  %49 = tail call { i32, i32 } asm sideeffect "@ atomic_add\0A1:\09ldrex\09$0, [$3]\0A\09add\09$0, $0, $4\0A\09strex\09$1, $0, [$3]\0A\09teq\09$1, #0\0A\09bne\091b", "=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %total_objects.i, ptr %total_objects.i, i32 %bf.lshr63, ptr elementtype(i32) %total_objects.i) #24, !srcloc !59
  br label %cleanup

cleanup:                                          ; preds = %if.then.i174, %slab_nid.exit, %if.then16
  %retval.0 = phi ptr [ %slab.0, %slab_nid.exit ], [ %slab.0, %if.then.i174 ], [ null, %if.then16 ]
  ret ptr %retval.0
}

; Function Attrs: inlinehint nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc ptr @alloc_slab_page(i32 noundef %flags, i32 noundef %node, [1 x i32] %oo.coerce) unnamed_addr #5 align 64 {
entry:
  %x.coerce.fca.0.extract.i = extractvalue [1 x i32] %oo.coerce, 0
  %shr.i = lshr i32 %x.coerce.fca.0.extract.i, 16
  %call38.i.i.i = tail call ptr @__alloc_pages(i32 noundef %flags, i32 noundef %shr.i, i32 noundef 0, ptr noundef null) #27
  %tobool.not = icmp eq ptr %call38.i.i.i, null
  br i1 %tobool.not, label %cleanup, label %if.end5

if.end5:                                          ; preds = %entry
  %0 = getelementptr inbounds %struct.page, ptr %call38.i.i.i, i32 0, i32 1
  %1 = load volatile i32, ptr %0, align 4
  %and.i.i.i = and i32 %1, 1
  %tobool.not.i.i = icmp eq i32 %and.i.i.i, 0
  br i1 %tobool.not.i.i, label %__folio_set_slab.exit, label %if.then.i.i, !prof !14

if.then.i.i:                                      ; preds = %if.end5
  tail call void @dump_page(ptr noundef nonnull %call38.i.i.i, ptr noundef nonnull @.str.29) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 260, 0\0A.popsection", ""() #24, !srcloc !28
  unreachable

__folio_set_slab.exit:                            ; preds = %if.end5
  %2 = load i32, ptr %call38.i.i.i, align 4
  %or.i.i = or i32 %2, 512
  store i32 %or.i.i, ptr %call38.i.i.i, align 4
  %and.i = and i32 %1, 2
  %tobool.i.not = icmp eq i32 %and.i, 0
  br i1 %tobool.i.not, label %cleanup, label %if.then7

if.then7:                                         ; preds = %__folio_set_slab.exit
  %3 = load volatile i32, ptr %0, align 4
  %and.i.i.i.i = and i32 %3, 1
  %tobool.not.i.i.i = icmp eq i32 %and.i.i.i.i, 0
  br i1 %tobool.not.i.i.i, label %slab_set_pfmemalloc.exit, label %if.then.i.i.i, !prof !14

if.then.i.i.i:                                    ; preds = %if.then7
  tail call void @dump_page(ptr noundef nonnull %call38.i.i.i, ptr noundef nonnull @.str.29) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 260, 0\0A.popsection", ""() #24, !srcloc !28
  unreachable

slab_set_pfmemalloc.exit:                         ; preds = %if.then7
  tail call void @_set_bit(i32 noundef 5, ptr noundef nonnull %call38.i.i.i) #27
  br label %cleanup

cleanup:                                          ; preds = %slab_set_pfmemalloc.exit, %__folio_set_slab.exit, %entry
  ret ptr %call38.i.i.i
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc zeroext i1 @shuffle_freelist(ptr noundef %s, ptr noundef %slab) unnamed_addr #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = getelementptr inbounds %struct.slab, ptr %slab, i32 0, i32 4
  %bf.load = load i32, ptr %0, align 4
  %1 = and i32 %bf.load, 65532
  %cmp = icmp eq i32 %1, 0
  br i1 %cmp, label %cleanup, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %random_seq = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 22
  %2 = load ptr, ptr %random_seq, align 4
  %tobool.not = icmp eq ptr %2, null
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %lor.lhs.false
  %oo = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 9
  %.unpack = load i32, ptr %oo, align 4
  %and.i = and i32 %.unpack, 65535
  %call.i = tail call i32 @get_random_u32() #27
  %rem = urem i32 %call.i, %and.i
  %bf.load2 = load i32, ptr %0, align 4
  %bf.lshr3 = lshr i32 %bf.load2, 1
  %bf.clear4 = and i32 %bf.lshr3, 32767
  %size = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 3
  %3 = load i32, ptr %size, align 4
  %mul = mul i32 %bf.clear4, %3
  %call.i.i = tail call ptr @page_address(ptr noundef %slab) #27
  callbr void asm sideeffect "1:\0A\09b ${1:l}\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr nonnull @slub_debug_enabled, ptr blockaddress(@shuffle_freelist, %if.then37.i.i)) #24
          to label %fixup_red_left.exit [label %if.then37.i.i], !srcloc !10

if.then37.i.i:                                    ; preds = %if.end
  %flags38.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 1
  %4 = load i32, ptr %flags38.i.i, align 4
  %and39.i.i = and i32 %4, 1024
  %tobool40.i.not.i = icmp eq i32 %and39.i.i, 0
  br i1 %tobool40.i.not.i, label %fixup_red_left.exit, label %if.then.i

if.then.i:                                        ; preds = %if.then37.i.i
  %red_left_pad.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 17
  %5 = load i32, ptr %red_left_pad.i, align 4
  %add.ptr.i = getelementptr i8, ptr %call.i.i, i32 %5
  br label %fixup_red_left.exit

fixup_red_left.exit:                              ; preds = %if.then.i, %if.then37.i.i, %if.end
  %p.addr.0.i = phi ptr [ %add.ptr.i, %if.then.i ], [ %call.i.i, %if.then37.i.i ], [ %call.i.i, %if.end ]
  %6 = load ptr, ptr %random_seq, align 4
  br label %do.body.i

do.body.i:                                        ; preds = %do.body.i, %fixup_red_left.exit
  %7 = phi i32 [ %spec.select.i, %do.body.i ], [ %rem, %fixup_red_left.exit ]
  %arrayidx.i = getelementptr i32, ptr %6, i32 %7
  %8 = load i32, ptr %arrayidx.i, align 4
  %add.i = add i32 %7, 1
  %cmp.not.i = icmp ult i32 %add.i, %and.i
  %spec.select.i = select i1 %cmp.not.i, i32 %add.i, i32 0
  %cmp1.not.i = icmp ult i32 %8, %mul
  br i1 %cmp1.not.i, label %next_freelist_entry.exit, label %do.body.i, !prof !14

next_freelist_entry.exit:                         ; preds = %do.body.i
  %add.ptr.i48 = getelementptr i8, ptr %p.addr.0.i, i32 %8
  tail call fastcc void @setup_object_debug(ptr noundef %s, ptr noundef %add.ptr.i48) #27
  %call1.i.i = tail call ptr @__kasan_init_slab_obj(ptr noundef %s, ptr noundef %add.ptr.i48) #27
  %ctor.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 14
  %9 = load ptr, ptr %ctor.i, align 4
  %tobool.not.i = icmp eq ptr %9, null
  br i1 %tobool.not.i, label %setup_object.exit, label %if.then.i49, !prof !14

if.then.i49:                                      ; preds = %next_freelist_entry.exit
  tail call void @__kasan_unpoison_object_data(ptr noundef %s, ptr noundef %call1.i.i) #27
  %10 = load ptr, ptr %ctor.i, align 4
  tail call void %10(ptr noundef %call1.i.i) #27
  tail call void @__kasan_poison_object_data(ptr noundef %s, ptr noundef %call1.i.i) #27
  br label %setup_object.exit

setup_object.exit:                                ; preds = %if.then.i49, %next_freelist_entry.exit
  %freelist = getelementptr inbounds %struct.slab, ptr %slab, i32 0, i32 3
  store ptr %call1.i.i, ptr %freelist, align 4
  %bf.load976 = load i32, ptr %0, align 4
  %11 = and i32 %bf.load976, 65532
  %cmp1279.not = icmp eq i32 %11, 0
  br i1 %cmp1279.not, label %for.end, label %do.body.i57.preheader.lr.ph

do.body.i57.preheader.lr.ph:                      ; preds = %setup_object.exit
  %offset.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 6
  %random.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 21
  br label %do.body.i57.preheader

do.body.i57.preheader:                            ; preds = %set_freepointer.exit, %do.body.i57.preheader.lr.ph
  %idx.082 = phi i32 [ 1, %do.body.i57.preheader.lr.ph ], [ %inc, %set_freepointer.exit ]
  %cur.081 = phi ptr [ %call1.i.i, %do.body.i57.preheader.lr.ph ], [ %call1.i.i60, %set_freepointer.exit ]
  %pos.080 = phi i32 [ %spec.select.i, %do.body.i57.preheader.lr.ph ], [ %spec.select.i55, %set_freepointer.exit ]
  %12 = load ptr, ptr %random_seq, align 4
  br label %do.body.i57

do.body.i57:                                      ; preds = %do.body.i57, %do.body.i57.preheader
  %13 = phi i32 [ %spec.select.i55, %do.body.i57 ], [ %pos.080, %do.body.i57.preheader ]
  %arrayidx.i52 = getelementptr i32, ptr %12, i32 %13
  %14 = load i32, ptr %arrayidx.i52, align 4
  %add.i53 = add i32 %13, 1
  %cmp.not.i54 = icmp ult i32 %add.i53, %and.i
  %spec.select.i55 = select i1 %cmp.not.i54, i32 %add.i53, i32 0
  %cmp1.not.i56 = icmp ult i32 %14, %mul
  br i1 %cmp1.not.i56, label %next_freelist_entry.exit59, label %do.body.i57, !prof !14

next_freelist_entry.exit59:                       ; preds = %do.body.i57
  %add.ptr.i58 = getelementptr i8, ptr %p.addr.0.i, i32 %14
  tail call fastcc void @setup_object_debug(ptr noundef %s, ptr noundef %add.ptr.i58) #27
  %call1.i.i60 = tail call ptr @__kasan_init_slab_obj(ptr noundef %s, ptr noundef %add.ptr.i58) #27
  %15 = load ptr, ptr %ctor.i, align 4
  %tobool.not.i62 = icmp eq ptr %15, null
  br i1 %tobool.not.i62, label %setup_object.exit64, label %if.then.i63, !prof !14

if.then.i63:                                      ; preds = %next_freelist_entry.exit59
  tail call void @__kasan_unpoison_object_data(ptr noundef %s, ptr noundef %call1.i.i60) #27
  %16 = load ptr, ptr %ctor.i, align 4
  tail call void %16(ptr noundef %call1.i.i60) #27
  tail call void @__kasan_poison_object_data(ptr noundef %s, ptr noundef %call1.i.i60) #27
  br label %setup_object.exit64

setup_object.exit64:                              ; preds = %if.then.i63, %next_freelist_entry.exit59
  %cmp.i = icmp eq ptr %cur.081, %call1.i.i60
  br i1 %cmp.i, label %do.body2.i, label %set_freepointer.exit, !prof !13

do.body2.i:                                       ; preds = %setup_object.exit64
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slub.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 379, 0\0A.popsection", ""() #24, !srcloc !30
  unreachable

set_freepointer.exit:                             ; preds = %setup_object.exit64
  %17 = ptrtoint ptr %cur.081 to i32
  %18 = load i32, ptr %offset.i, align 4
  %add.i65 = add i32 %18, %17
  %19 = inttoptr i32 %add.i65 to ptr
  %20 = ptrtoint ptr %call1.i.i60 to i32
  %21 = load i32, ptr %random.i.i, align 4
  %22 = tail call i32 @llvm.bswap.i32(i32 %add.i65) #24
  %xor.i.i = xor i32 %21, %20
  %xor2.i.i = xor i32 %xor.i.i, %22
  %23 = inttoptr i32 %xor2.i.i to ptr
  store ptr %23, ptr %19, align 4
  %inc = add nuw nsw i32 %idx.082, 1
  %bf.load9 = load i32, ptr %0, align 4
  %bf.lshr10 = lshr i32 %bf.load9, 1
  %bf.clear11 = and i32 %bf.lshr10, 32767
  %cmp12 = icmp ult i32 %inc, %bf.clear11
  br i1 %cmp12, label %do.body.i57.preheader, label %for.end

for.end:                                          ; preds = %set_freepointer.exit, %setup_object.exit
  %cur.0.lcssa = phi ptr [ %call1.i.i, %setup_object.exit ], [ %call1.i.i60, %set_freepointer.exit ]
  %cmp.i66 = icmp eq ptr %cur.0.lcssa, null
  br i1 %cmp.i66, label %do.body2.i67, label %set_freepointer.exit72, !prof !13

do.body2.i67:                                     ; preds = %for.end
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slub.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 379, 0\0A.popsection", ""() #24, !srcloc !30
  unreachable

set_freepointer.exit72:                           ; preds = %for.end
  %24 = ptrtoint ptr %cur.0.lcssa to i32
  %offset.i68 = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 6
  %25 = load i32, ptr %offset.i68, align 4
  %add.i69 = add i32 %25, %24
  %26 = inttoptr i32 %add.i69 to ptr
  %random.i.i70 = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 21
  %27 = load i32, ptr %random.i.i70, align 4
  %28 = tail call i32 @llvm.bswap.i32(i32 %add.i69) #24
  %xor2.i.i71 = xor i32 %28, %27
  %29 = inttoptr i32 %xor2.i.i71 to ptr
  store ptr %29, ptr %26, align 4
  br label %cleanup

cleanup:                                          ; preds = %set_freepointer.exit72, %lor.lhs.false, %entry
  %retval.0 = phi i1 [ true, %set_freepointer.exit72 ], [ false, %lor.lhs.false ], [ false, %entry ]
  ret i1 %retval.0
}

; Function Attrs: null_pointer_is_valid
declare dso_local ptr @__alloc_pages(i32 noundef, i32 noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local void @_set_bit(i32 noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @memcg_alloc_slab_cgroups(ptr noundef, ptr noundef, i32 noundef, i1 noundef zeroext) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local void @__kasan_poison_slab(ptr noundef) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @get_random_u32() local_unnamed_addr #3

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc void @setup_object_debug(ptr nocapture noundef readonly %s, ptr noundef %object) unnamed_addr #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  callbr void asm sideeffect "1:\0A\09b ${1:l}\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr nonnull @slub_debug_enabled, ptr blockaddress(@setup_object_debug, %if.then37.i)) #24
          to label %return [label %if.then37.i], !srcloc !10

if.then37.i:                                      ; preds = %entry
  %flags38.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 1
  %0 = load i32, ptr %flags38.i, align 4
  %and39.i = and i32 %0, -2147417088
  %tobool40.i.not = icmp eq i32 %and39.i, 0
  br i1 %tobool40.i.not, label %return, label %if.end

if.end:                                           ; preds = %if.then37.i
  %and.i = and i32 %0, 1024
  %tobool.not.i = icmp eq i32 %and.i, 0
  br i1 %tobool.not.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %if.end
  %red_left_pad.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 17
  %1 = load i32, ptr %red_left_pad.i, align 4
  %idx.neg.i = sub i32 0, %1
  %add.ptr.i = getelementptr i8, ptr %object, i32 %idx.neg.i
  %call2.i = tail call ptr @__memset(ptr noundef %add.ptr.i, i32 noundef 187, i32 noundef %1) #27
  %.pr.i = load i32, ptr %flags38.i, align 4
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %if.end
  %2 = phi i32 [ %.pr.i, %if.then.i ], [ %0, %if.end ]
  %tobool5.not.i = icmp sgt i32 %2, -1
  br i1 %tobool5.not.i, label %if.end10.i, label %if.then6.i

if.then6.i:                                       ; preds = %if.end.i
  %object_size.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 4
  %3 = load i32, ptr %object_size.i, align 4
  %sub.i = add i32 %3, -1
  %call7.i = tail call ptr @__memset(ptr noundef %object, i32 noundef 107, i32 noundef %sub.i) #27
  %4 = load i32, ptr %object_size.i, align 4
  %sub9.i = add i32 %4, -1
  %arrayidx.i = getelementptr i8, ptr %object, i32 %sub9.i
  store i8 -91, ptr %arrayidx.i, align 1
  %.pre.i = load i32, ptr %flags38.i, align 4
  br label %if.end10.i

if.end10.i:                                       ; preds = %if.then6.i, %if.end.i
  %5 = phi i32 [ %.pre.i, %if.then6.i ], [ %2, %if.end.i ]
  %and12.i = and i32 %5, 1024
  %tobool13.not.i = icmp eq i32 %and12.i, 0
  br i1 %tobool13.not.i, label %init_object.exit, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %object_size15.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 4
  %6 = load i32, ptr %object_size15.i, align 4
  %add.ptr16.i = getelementptr i8, ptr %object, i32 %6
  %inuse.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 15
  %7 = load i32, ptr %inuse.i, align 4
  %sub19.i = sub i32 %7, %6
  %call20.i = tail call ptr @__memset(ptr noundef %add.ptr16.i, i32 noundef 187, i32 noundef %sub19.i) #27
  %.pre = load i32, ptr %flags38.i, align 4
  br label %init_object.exit

init_object.exit:                                 ; preds = %if.then14.i, %if.end10.i
  %8 = phi i32 [ %5, %if.end10.i ], [ %.pre, %if.then14.i ]
  %and.i2 = and i32 %8, 65536
  %tobool.not.i3 = icmp eq i32 %and.i2, 0
  br i1 %tobool.not.i3, label %return, label %if.end.i4

if.end.i4:                                        ; preds = %init_object.exit
  %offset.i.i.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 6
  %9 = load i32, ptr %offset.i.i.i.i.i, align 4
  %inuse.i.i.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 15
  %10 = load i32, ptr %inuse.i.i.i.i.i, align 4
  %cmp.i.not.i.i.i.i = icmp ult i32 %9, %10
  %add.i.i.i.i = add i32 %10, 4
  %spec.select.i.i.i.i = select i1 %cmp.i.not.i.i.i.i, i32 %10, i32 %add.i.i.i.i
  %add.ptr.i.i.i = getelementptr i8, ptr %object, i32 %spec.select.i.i.i.i
  %add.ptr1.i.i.i = getelementptr %struct.track, ptr %add.ptr.i.i.i, i32 1
  %call10.i.i = tail call ptr @__memset(ptr noundef %add.ptr1.i.i.i, i32 noundef 0, i32 noundef 80) #27
  %11 = load i32, ptr %offset.i.i.i.i.i, align 4
  %12 = load i32, ptr %inuse.i.i.i.i.i, align 4
  %cmp.i.not.i.i.i6.i = icmp ult i32 %11, %12
  %add.i.i.i7.i = add i32 %12, 4
  %spec.select.i.i.i8.i = select i1 %cmp.i.not.i.i.i6.i, i32 %12, i32 %add.i.i.i7.i
  %add.ptr.i.i9.i = getelementptr i8, ptr %object, i32 %spec.select.i.i.i8.i
  %call10.i10.i = tail call ptr @__memset(ptr noundef %add.ptr.i.i9.i, i32 noundef 0, i32 noundef 80) #27
  br label %return

return:                                           ; preds = %if.end.i4, %init_object.exit, %if.then37.i, %entry
  ret void
}

; Function Attrs: null_pointer_is_valid
declare dso_local ptr @__kasan_init_slab_obj(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local void @__kasan_unpoison_object_data(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local void @__kasan_poison_object_data(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @___ratelimit(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #14

; Function Attrs: inlinehint nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc void @memcg_slab_post_alloc_hook(ptr noundef %s, ptr noundef %objcg, i32 noundef %flags, i32 noundef %size, ptr nocapture noundef readonly %p) unnamed_addr #5 align 64 {
entry:
  callbr void asm sideeffect "1:\0A\09b ${1:l}\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr getelementptr inbounds (i8, ptr @memcg_kmem_enabled_key, i32 1), ptr blockaddress(@memcg_slab_post_alloc_hook, %cleanup)) #24
          to label %memcg_kmem_enabled.exit [label %cleanup], !srcloc !10

memcg_kmem_enabled.exit:                          ; preds = %entry
  %tobool.not = icmp eq ptr %objcg, null
  br i1 %tobool.not, label %cleanup, label %for.cond.preheader

for.cond.preheader:                               ; preds = %memcg_kmem_enabled.exit
  %cmp79.not = icmp eq i32 %size, 0
  br i1 %cmp79.not, label %for.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %for.cond.preheader
  %size.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 3
  %reciprocal_size.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 5
  %.elt2.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 5, i32 1
  %data.i.i.i = getelementptr inbounds %struct.percpu_ref, ptr %objcg, i32 0, i32 1
  %flags.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 1
  br label %for.body

for.body:                                         ; preds = %for.inc, %for.body.lr.ph
  %i.080 = phi i32 [ 0, %for.body.lr.ph ], [ %inc, %for.inc ]
  %arrayidx = getelementptr ptr, ptr %p, i32 %i.080
  %0 = load ptr, ptr %arrayidx, align 4
  %tobool1.not = icmp eq ptr %0, null
  br i1 %tobool1.not, label %if.else, label %if.then4, !prof !13

if.then4:                                         ; preds = %for.body
  %1 = load ptr, ptr @mem_map, align 4
  %2 = ptrtoint ptr %0 to i32
  %sub.i.i = add i32 %2, 1073741824
  %shr.i.i = lshr i32 %sub.i.i, 12
  %3 = getelementptr %struct.page, ptr %1, i32 %shr.i.i, i32 1
  %4 = load volatile i32, ptr %3, align 4
  %and.i.i.i = and i32 %4, 1
  %tobool.not.i.i3.i = icmp eq i32 %and.i.i.i, 0
  br i1 %tobool.not.i.i3.i, label %if.end.i.i.i, label %if.then.i.i4.i, !prof !14

if.then.i.i4.i:                                   ; preds = %if.then4
  %sub.i.i.i = add i32 %4, -1
  br label %virt_to_folio.exit.i

if.end.i.i.i:                                     ; preds = %if.then4
  %add.ptr.i.i = getelementptr %struct.page, ptr %1, i32 %shr.i.i
  %5 = ptrtoint ptr %add.ptr.i.i to i32
  br label %virt_to_folio.exit.i

virt_to_folio.exit.i:                             ; preds = %if.end.i.i.i, %if.then.i.i4.i
  %retval.0.i.i.i = phi i32 [ %sub.i.i.i, %if.then.i.i4.i ], [ %5, %if.end.i.i.i ]
  %6 = inttoptr i32 %retval.0.i.i.i to ptr
  %7 = getelementptr inbounds %struct.page, ptr %6, i32 0, i32 1
  %8 = load volatile i32, ptr %7, align 4
  %and.i.i.i.i = and i32 %8, 1
  %tobool.not.i.i.i = icmp eq i32 %and.i.i.i.i, 0
  br i1 %tobool.not.i.i.i, label %virt_to_slab.exit, label %if.then.i.i.i, !prof !14

if.then.i.i.i:                                    ; preds = %virt_to_folio.exit.i
  %9 = inttoptr i32 %retval.0.i.i.i to ptr
  tail call void @dump_page(ptr noundef %9, ptr noundef nonnull @.str.29) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/page-flags.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 260, 0\0A.popsection", ""() #24, !srcloc !28
  unreachable

virt_to_slab.exit:                                ; preds = %virt_to_folio.exit.i
  %10 = load volatile i32, ptr %6, align 4
  %11 = and i32 %10, 512
  %tobool.i.not.i = icmp eq i32 %11, 0
  %call..i = select i1 %tobool.i.not.i, ptr null, ptr %6
  %memcg_data1.i = getelementptr inbounds %struct.slab, ptr %call..i, i32 0, i32 7
  %12 = load volatile i32, ptr %memcg_data1.i, align 4
  %tobool.i = icmp ne i32 %12, 0
  %and.i = and i32 %12, 1
  %tobool3.not.i = icmp eq i32 %and.i, 0
  %13 = and i1 %tobool.i, %tobool3.not.i
  br i1 %13, label %if.then.i, label %do.body15.i, !prof !13

if.then.i:                                        ; preds = %virt_to_slab.exit
  tail call void @dump_page(ptr noundef %call..i, ptr noundef nonnull @.str.90) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slab.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 445, 0\0A.popsection", ""() #24, !srcloc !35
  unreachable

do.body15.i:                                      ; preds = %virt_to_slab.exit
  %and16.i = and i32 %12, 2
  %tobool17.not.i = icmp eq i32 %and16.i, 0
  br i1 %tobool17.not.i, label %slab_objcgs.exit, label %if.then24.i, !prof !14

if.then24.i:                                      ; preds = %do.body15.i
  tail call void @dump_page(ptr noundef %call..i, ptr noundef nonnull @.str.91) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slab.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 446, 0\0A.popsection", ""() #24, !srcloc !36
  unreachable

slab_objcgs.exit:                                 ; preds = %do.body15.i
  %tobool8.not = icmp ult i32 %12, 4
  br i1 %tobool8.not, label %land.lhs.true, label %if.end13

land.lhs.true:                                    ; preds = %slab_objcgs.exit
  %call9 = tail call i32 @memcg_alloc_slab_cgroups(ptr noundef %call..i, ptr noundef %s, i32 noundef %flags, i1 noundef zeroext false) #27
  %tobool10.not = icmp eq i32 %call9, 0
  br i1 %tobool10.not, label %land.lhs.true.if.end13_crit_edge, label %if.then11

land.lhs.true.if.end13_crit_edge:                 ; preds = %land.lhs.true
  %.pre = load ptr, ptr %arrayidx, align 4
  %.pre90 = ptrtoint ptr %.pre to i32
  br label %if.end13

if.then11:                                        ; preds = %land.lhs.true
  %14 = load i32, ptr %size.i, align 4
  %add.i = add i32 %14, 4
  tail call void @obj_cgroup_uncharge(ptr noundef nonnull %objcg, i32 noundef %add.i) #27
  br label %for.inc

if.end13:                                         ; preds = %land.lhs.true.if.end13_crit_edge, %slab_objcgs.exit
  %sub.ptr.lhs.cast.i.i.pre-phi = phi i32 [ %.pre90, %land.lhs.true.if.end13_crit_edge ], [ %2, %slab_objcgs.exit ]
  %15 = load ptr, ptr @__kfence_pool, align 4
  %sub.ptr.rhs.cast.i.i = ptrtoint ptr %15 to i32
  %sub.ptr.sub.i.i = sub i32 %sub.ptr.lhs.cast.i.i.pre-phi, %sub.ptr.rhs.cast.i.i
  %cmp.i.i = icmp ult i32 %sub.ptr.sub.i.i, 2097152
  %tobool.i.i = icmp ne ptr %15, null
  %16 = select i1 %cmp.i.i, i1 %tobool.i.i, i1 false
  br i1 %16, label %obj_to_index.exit, label %if.end.i

if.end.i:                                         ; preds = %if.end13
  %call.i.i.i = tail call ptr @page_address(ptr noundef %call..i) #27
  %sub.ptr.rhs.cast.i5.i = ptrtoint ptr %call.i.i.i to i32
  %sub.ptr.sub.i6.i = sub i32 %sub.ptr.lhs.cast.i.i.pre-phi, %sub.ptr.rhs.cast.i5.i
  %.unpack.i.i = load i32, ptr %reciprocal_size.i.i, align 4
  %.unpack3.i.i = load i32, ptr %.elt2.i.i, align 4
  %R.sroa.2.4.extract.shift.i.i.i = lshr i32 %.unpack3.i.i, 24
  %R.sroa.4.4.extract.shift.i.i.i = lshr i32 %.unpack3.i.i, 16
  %conv.i.i.i = zext i32 %sub.ptr.sub.i6.i to i64
  %conv1.i.i.i = zext i32 %.unpack.i.i to i64
  %mul.i.i.i = mul nuw i64 %conv.i.i.i, %conv1.i.i.i
  %shr.i.i.i = lshr i64 %mul.i.i.i, 32
  %conv2.i.i.i = trunc i64 %shr.i.i.i to i32
  %sub.i.i.i46 = sub i32 %sub.ptr.sub.i6.i, %conv2.i.i.i
  %shr4.i.i.i = lshr i32 %sub.i.i.i46, %R.sroa.2.4.extract.shift.i.i.i
  %add.i.i.i = add i32 %shr4.i.i.i, %conv2.i.i.i
  %conv5.i.i.i = and i32 %R.sroa.4.4.extract.shift.i.i.i, 255
  %shr6.i.i.i = lshr i32 %add.i.i.i, %conv5.i.i.i
  br label %obj_to_index.exit

obj_to_index.exit:                                ; preds = %if.end.i, %if.end13
  %retval.0.i = phi i32 [ %shr6.i.i.i, %if.end.i ], [ 0, %if.end13 ]
  %17 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i.i.i.i.i.i = and i32 %17, -16384
  %18 = inttoptr i32 %and.i.i.i.i.i.i.i.i to ptr
  %preempt_count.i.i.i.i.i.i.i = getelementptr inbounds %struct.thread_info, ptr %18, i32 0, i32 1
  %19 = load volatile i32, ptr %preempt_count.i.i.i.i.i.i.i, align 4
  %add.i.i.i.i.i.i = add i32 %19, 1
  store volatile i32 %add.i.i.i.i.i.i, ptr %preempt_count.i.i.i.i.i.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !94
  tail call fastcc void @rcu_lock_acquire(ptr noundef nonnull @rcu_lock_map) #27
  %call.i.i.i.i = tail call zeroext i1 @rcu_is_watching() #27
  br i1 %call.i.i.i.i, label %rcu_read_lock.exit.i.i.i, label %land.lhs.true.i.i.i.i

land.lhs.true.i.i.i.i:                            ; preds = %obj_to_index.exit
  %call1.i.i.i.i = tail call i32 @debug_lockdep_rcu_enabled() #27
  %tobool.not.i.i.i.i = icmp eq i32 %call1.i.i.i.i, 0
  br i1 %tobool.not.i.i.i.i, label %rcu_read_lock.exit.i.i.i, label %land.lhs.true2.i.i.i.i

land.lhs.true2.i.i.i.i:                           ; preds = %land.lhs.true.i.i.i.i
  %.b4.i.i.i.i = load i1, ptr @rcu_read_lock.__warned, align 1
  br i1 %.b4.i.i.i.i, label %rcu_read_lock.exit.i.i.i, label %if.then.i.i.i.i

if.then.i.i.i.i:                                  ; preds = %land.lhs.true2.i.i.i.i
  store i1 true, ptr @rcu_read_lock.__warned, align 1
  tail call void @lockdep_rcu_suspicious(ptr noundef nonnull @.str.94, i32 noundef 696, ptr noundef nonnull @.str.95) #27
  br label %rcu_read_lock.exit.i.i.i

rcu_read_lock.exit.i.i.i:                         ; preds = %if.then.i.i.i.i, %land.lhs.true2.i.i.i.i, %land.lhs.true.i.i.i.i, %obj_to_index.exit
  %20 = load volatile i32, ptr %objcg, align 4
  %and.i.i.i.i47 = and i32 %20, 3
  %tobool.not.i1.i.i.i = icmp eq i32 %and.i.i.i.i47, 0
  br i1 %tobool.not.i1.i.i.i, label %do.body1.i.i.i, label %if.else.i.i.i, !prof !14

do.body1.i.i.i:                                   ; preds = %rcu_read_lock.exit.i.i.i
  %21 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ arch_local_irq_save\0A\09cpsid\09i", "=r,~{memory},~{cc}"() #24, !srcloc !19
  %22 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i2.i.i.i = and i32 %22, -16384
  %23 = inttoptr i32 %and.i2.i.i.i to ptr
  %cpu.i.i.i = getelementptr inbounds %struct.thread_info, ptr %23, i32 0, i32 3
  %24 = load i32, ptr %cpu.i.i.i, align 4
  %arrayidx.i.i.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %24
  %25 = load i32, ptr %arrayidx.i.i.i, align 4
  %add.i.i.i48 = add i32 %25, %20
  %26 = inttoptr i32 %add.i.i.i48 to ptr
  %27 = load i32, ptr %26, align 4
  %add15.i.i.i = add i32 %27, 1
  store i32 %add15.i.i.i, ptr %26, align 4
  %28 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ local_save_flags", "=r,~{memory},~{cc}"() #24, !srcloc !20
  %and.i.i.i.i.i = and i32 %28, 128
  %tobool.not.i.i.i49 = icmp eq i32 %and.i.i.i.i.i, 0
  br i1 %tobool.not.i.i.i49, label %if.then29.i.i.i, label %do.end31.i.i.i, !prof !13

if.then29.i.i.i:                                  ; preds = %do.body1.i.i.i
  tail call void @warn_bogus_irq_restore() #27
  br label %do.end31.i.i.i

do.end31.i.i.i:                                   ; preds = %if.then29.i.i.i, %do.body1.i.i.i
  tail call void asm sideeffect "\09msr\09cpsr_c, $0\09@ local_irq_restore", "r,~{memory},~{cc}"(i32 %21) #24, !srcloc !21
  br label %if.end38.i.i.i

if.else.i.i.i:                                    ; preds = %rcu_read_lock.exit.i.i.i
  %29 = load ptr, ptr %data.i.i.i, align 4
  tail call void @llvm.prefetch.p0(ptr %29, i32 1, i32 3, i32 1) #24
  %30 = tail call { i32, i32 } asm sideeffect "@ atomic_add\0A1:\09ldrex\09$0, [$3]\0A\09add\09$0, $0, $4\0A\09strex\09$1, $0, [$3]\0A\09teq\09$1, #0\0A\09bne\091b", "=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %29, ptr %29, i32 1, ptr elementtype(i32) %29) #24, !srcloc !59
  br label %if.end38.i.i.i

if.end38.i.i.i:                                   ; preds = %if.else.i.i.i, %do.end31.i.i.i
  %call.i3.i.i.i = tail call zeroext i1 @rcu_is_watching() #27
  br i1 %call.i3.i.i.i, label %obj_cgroup_get.exit, label %land.lhs.true.i6.i.i.i

land.lhs.true.i6.i.i.i:                           ; preds = %if.end38.i.i.i
  %call1.i4.i.i.i = tail call i32 @debug_lockdep_rcu_enabled() #27
  %tobool.not.i5.i.i.i = icmp eq i32 %call1.i4.i.i.i, 0
  br i1 %tobool.not.i5.i.i.i, label %obj_cgroup_get.exit, label %land.lhs.true2.i8.i.i.i

land.lhs.true2.i8.i.i.i:                          ; preds = %land.lhs.true.i6.i.i.i
  %.b4.i7.i.i.i = load i1, ptr @rcu_read_unlock.__warned, align 1
  br i1 %.b4.i7.i.i.i, label %obj_cgroup_get.exit, label %if.then.i9.i.i.i

if.then.i9.i.i.i:                                 ; preds = %land.lhs.true2.i8.i.i.i
  store i1 true, ptr @rcu_read_unlock.__warned, align 1
  tail call void @lockdep_rcu_suspicious(ptr noundef nonnull @.str.94, i32 noundef 724, ptr noundef nonnull @.str.96) #27
  br label %obj_cgroup_get.exit

obj_cgroup_get.exit:                              ; preds = %if.then.i9.i.i.i, %land.lhs.true2.i8.i.i.i, %land.lhs.true.i6.i.i.i, %if.end38.i.i.i
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !98
  %31 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i.i.i10.i.i.i = and i32 %31, -16384
  %32 = inttoptr i32 %and.i.i.i.i.i10.i.i.i to ptr
  %preempt_count.i.i.i.i11.i.i.i = getelementptr inbounds %struct.thread_info, ptr %32, i32 0, i32 1
  %33 = load volatile i32, ptr %preempt_count.i.i.i.i11.i.i.i, align 4
  %sub.i.i.i.i.i.i = add i32 %33, -1
  store volatile i32 %sub.i.i.i.i.i.i, ptr %preempt_count.i.i.i.i11.i.i.i, align 4
  tail call void @rcu_read_unlock_strict() #27
  tail call fastcc void @rcu_lock_release(ptr noundef nonnull @rcu_lock_map) #27
  %34 = load volatile i32, ptr %memcg_data1.i, align 4
  %tobool.i51 = icmp ne i32 %34, 0
  %and.i52 = and i32 %34, 1
  %tobool3.not.i53 = icmp eq i32 %and.i52, 0
  %35 = and i1 %tobool.i51, %tobool3.not.i53
  br i1 %35, label %if.then.i54, label %do.body15.i57, !prof !13

if.then.i54:                                      ; preds = %obj_cgroup_get.exit
  tail call void @dump_page(ptr noundef %call..i, ptr noundef nonnull @.str.90) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slab.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 445, 0\0A.popsection", ""() #24, !srcloc !35
  unreachable

do.body15.i57:                                    ; preds = %obj_cgroup_get.exit
  %and16.i55 = and i32 %34, 2
  %tobool17.not.i56 = icmp eq i32 %and16.i55, 0
  br i1 %tobool17.not.i56, label %slab_objcgs.exit60, label %if.then24.i58, !prof !14

if.then24.i58:                                    ; preds = %do.body15.i57
  tail call void @dump_page(ptr noundef %call..i, ptr noundef nonnull @.str.91) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slab.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 446, 0\0A.popsection", ""() #24, !srcloc !36
  unreachable

slab_objcgs.exit60:                               ; preds = %do.body15.i57
  %and35.i59 = and i32 %34, -4
  %36 = inttoptr i32 %and35.i59 to ptr
  %arrayidx17 = getelementptr ptr, ptr %36, i32 %retval.0.i
  store ptr %objcg, ptr %arrayidx17, align 4
  %37 = load volatile i32, ptr %call..i, align 4
  %cmp.i.not.i.i.i.i = icmp eq i32 %37, -1
  br i1 %cmp.i.not.i.i.i.i, label %if.then.i.i.i.i61, label %slab_pgdat.exit, !prof !13

if.then.i.i.i.i61:                                ; preds = %slab_objcgs.exit60
  tail call void @dump_page(ptr noundef %call..i, ptr noundef nonnull @.str.88) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/mm.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 1368, 0\0A.popsection", ""() #24, !srcloc !37
  unreachable

slab_pgdat.exit:                                  ; preds = %slab_objcgs.exit60
  %38 = load i32, ptr %flags.i, align 4
  %and.i62 = and i32 %38, 131072
  %tobool.not.i = icmp eq i32 %and.i62, 0
  %cond.i = select i1 %tobool.not.i, i32 6, i32 5
  %39 = load i32, ptr %size.i, align 4
  %add.i64 = add i32 %39, 4
  tail call void @mod_objcg_state(ptr noundef nonnull %objcg, ptr noundef nonnull @contig_page_data, i32 noundef %cond.i, i32 noundef %add.i64) #27
  br label %for.inc

if.else:                                          ; preds = %for.body
  %40 = load i32, ptr %size.i, align 4
  %add.i66 = add i32 %40, 4
  tail call void @obj_cgroup_uncharge(ptr noundef nonnull %objcg, i32 noundef %add.i66) #27
  br label %for.inc

for.inc:                                          ; preds = %if.else, %slab_pgdat.exit, %if.then11
  %inc = add nuw i32 %i.080, 1
  %exitcond.not = icmp eq i32 %inc, %size
  br i1 %exitcond.not, label %for.end, label %for.body

for.end:                                          ; preds = %for.inc, %for.cond.preheader
  tail call fastcc void @obj_cgroup_put(ptr noundef nonnull %objcg) #25
  br label %cleanup

cleanup:                                          ; preds = %for.end, %memcg_kmem_enabled.exit, %entry
  ret void
}

; Function Attrs: null_pointer_is_valid
declare dso_local ptr @__kasan_slab_alloc(ptr noundef, ptr noundef, i32 noundef, i1 noundef zeroext) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local void @kmemleak_alloc(ptr noundef, i32 noundef, i32 noundef, i32 noundef) local_unnamed_addr #3 section ".ref.text"

; Function Attrs: null_pointer_is_valid
declare dso_local void @lockdep_assert_cpus_held() local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local void @mutex_lock_nested(ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: mustprogress nofree nounwind null_pointer_is_valid readonly willreturn
declare dso_local i32 @cpumask_next(i32 noundef, ptr noundef) local_unnamed_addr #20

; Function Attrs: null_pointer_is_valid
declare dso_local void @__init_work(ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal void @flush_cpu_slab(ptr nocapture noundef readonly %w) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %s1 = getelementptr inbounds %struct.slub_flush_work, ptr %w, i32 0, i32 1
  %0 = load ptr, ptr %s1, align 4
  %1 = load ptr, ptr %0, align 4
  %2 = ptrtoint ptr %1 to i32
  %3 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i = and i32 %3, -16384
  %4 = inttoptr i32 %and.i to ptr
  %cpu = getelementptr inbounds %struct.thread_info, ptr %4, i32 0, i32 3
  %5 = load i32, ptr %cpu, align 4
  %arrayidx = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %5
  %6 = load i32, ptr %arrayidx, align 4
  %add = add i32 %6, %2
  %7 = inttoptr i32 %add to ptr
  %slab = getelementptr inbounds %struct.kmem_cache_cpu, ptr %7, i32 0, i32 2
  %8 = load ptr, ptr %slab, align 4
  %tobool.not = icmp eq ptr %8, null
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %9 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ arch_local_irq_save\0A\09cpsid\09i", "=r,~{memory},~{cc}"() #24, !srcloc !19
  %and.i.i = and i32 %9, 128
  %tobool.not.i = icmp eq i32 %and.i.i, 0
  br i1 %tobool.not.i, label %if.then.i, label %do.body12.i

if.then.i:                                        ; preds = %if.then
  tail call void @trace_hardirqs_off() #27
  br label %do.body12.i

do.body12.i:                                      ; preds = %if.then.i, %if.then
  %10 = load ptr, ptr %0, align 4
  %lock.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %10, i32 0, i32 4
  %11 = ptrtoint ptr %lock.i to i32
  %12 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i87.i = and i32 %12, -16384
  %13 = inttoptr i32 %and.i87.i to ptr
  %cpu.i = getelementptr inbounds %struct.thread_info, ptr %13, i32 0, i32 3
  %14 = load i32, ptr %cpu.i, align 4
  %arrayidx.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %14
  %15 = load i32, ptr %arrayidx.i, align 4
  %add.i = add i32 %15, %11
  %16 = inttoptr i32 %add.i to ptr
  tail call fastcc void @local_lock_acquire(ptr noundef %16) #27
  %17 = load ptr, ptr %slab, align 4
  %18 = load ptr, ptr %7, align 4
  store ptr null, ptr %slab, align 4
  store ptr null, ptr %7, align 4
  %tid.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %7, i32 0, i32 1
  %19 = load i32, ptr %tid.i, align 4
  %add.i.i = add i32 %19, 1
  store i32 %add.i.i, ptr %tid.i, align 4
  %20 = load ptr, ptr %0, align 4
  %lock34.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %20, i32 0, i32 4
  %21 = ptrtoint ptr %lock34.i to i32
  %22 = load i32, ptr %cpu.i, align 4
  %arrayidx38.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %22
  %23 = load i32, ptr %arrayidx38.i, align 4
  %add39.i = add i32 %23, %21
  %24 = inttoptr i32 %add39.i to ptr
  tail call fastcc void @local_lock_release(ptr noundef %24) #27
  br i1 %tobool.not.i, label %if.then49.i, label %do.body51.i

if.then49.i:                                      ; preds = %do.body12.i
  tail call void @trace_hardirqs_on() #27
  br label %do.body51.i

do.body51.i:                                      ; preds = %if.then49.i, %do.body12.i
  %25 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ local_save_flags", "=r,~{memory},~{cc}"() #24, !srcloc !20
  %and.i.i.i = and i32 %25, 128
  %tobool59.not.i = icmp eq i32 %and.i.i.i, 0
  br i1 %tobool59.not.i, label %if.then63.i, label %do.end66.i, !prof !13

if.then63.i:                                      ; preds = %do.body51.i
  tail call void @warn_bogus_irq_restore() #27
  br label %do.end66.i

do.end66.i:                                       ; preds = %if.then63.i, %do.body51.i
  tail call void asm sideeffect "\09msr\09cpsr_c, $0\09@ local_irq_restore", "r,~{memory},~{cc}"(i32 %9) #24, !srcloc !21
  %tobool73.not.i = icmp eq ptr %17, null
  br i1 %tobool73.not.i, label %if.end, label %if.then74.i

if.then74.i:                                      ; preds = %do.end66.i
  tail call fastcc void @deactivate_slab(ptr noundef %0, ptr noundef nonnull %17, ptr noundef %18) #27
  %26 = load ptr, ptr %0, align 4
  %arrayidx.i.i = getelementptr %struct.kmem_cache_cpu, ptr %26, i32 0, i32 5, i32 12
  %27 = ptrtoint ptr %arrayidx.i.i to i32
  %28 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i89.i = and i32 %28, -16384
  %29 = inttoptr i32 %and.i.i89.i to ptr
  %cpu.i.i = getelementptr inbounds %struct.thread_info, ptr %29, i32 0, i32 3
  %30 = load i32, ptr %cpu.i.i, align 4
  %arrayidx7.i.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %30
  %31 = load i32, ptr %arrayidx7.i.i, align 4
  %add.i90.i = add i32 %31, %27
  %32 = inttoptr i32 %add.i90.i to ptr
  %33 = load i32, ptr %32, align 4
  %add8.i.i = add i32 %33, 1
  store i32 %add8.i.i, ptr %32, align 4
  br label %if.end

if.end:                                           ; preds = %if.then74.i, %do.end66.i, %entry
  %34 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ arch_local_irq_save\0A\09cpsid\09i", "=r,~{memory},~{cc}"() #24, !srcloc !19
  %and.i.i7 = and i32 %34, 128
  %tobool.not.i8 = icmp eq i32 %and.i.i7, 0
  br i1 %tobool.not.i8, label %if.then.i9, label %do.body12.i16

if.then.i9:                                       ; preds = %if.end
  tail call void @trace_hardirqs_off() #27
  br label %do.body12.i16

do.body12.i16:                                    ; preds = %if.then.i9, %if.end
  %35 = load ptr, ptr %0, align 4
  %lock.i10 = getelementptr inbounds %struct.kmem_cache_cpu, ptr %35, i32 0, i32 4
  %36 = ptrtoint ptr %lock.i10 to i32
  %37 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i166.i = and i32 %37, -16384
  %38 = inttoptr i32 %and.i166.i to ptr
  %cpu.i11 = getelementptr inbounds %struct.thread_info, ptr %38, i32 0, i32 3
  %39 = load i32, ptr %cpu.i11, align 4
  %arrayidx.i12 = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %39
  %40 = load i32, ptr %arrayidx.i12, align 4
  %add.i13 = add i32 %40, %36
  %41 = inttoptr i32 %add.i13 to ptr
  tail call fastcc void @local_lock_acquire(ptr noundef %41) #27
  %42 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i.i = and i32 %42, -16384
  %43 = inttoptr i32 %and.i.i.i.i to ptr
  %preempt_count.i.i.i = getelementptr inbounds %struct.thread_info, ptr %43, i32 0, i32 1
  %44 = load volatile i32, ptr %preempt_count.i.i.i, align 4
  %add.i.i14 = add i32 %44, 1
  store volatile i32 %add.i.i14, ptr %preempt_count.i.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !101
  %45 = load ptr, ptr %0, align 4
  %partial.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %45, i32 0, i32 3
  %46 = ptrtoint ptr %partial.i to i32
  %47 = load i32, ptr %cpu.i11, align 4
  %arrayidx41.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %47
  %48 = load i32, ptr %arrayidx41.i, align 4
  %add42.i = add i32 %48, %46
  %49 = inttoptr i32 %add42.i to ptr
  %50 = load volatile ptr, ptr %49, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !102
  %51 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i164.i = and i32 %51, -16384
  %52 = inttoptr i32 %and.i.i.i164.i to ptr
  %preempt_count.i.i165.i = getelementptr inbounds %struct.thread_info, ptr %52, i32 0, i32 1
  %53 = load volatile i32, ptr %preempt_count.i.i165.i, align 4
  %sub.i.i = add i32 %53, -1
  store volatile i32 %sub.i.i, ptr %preempt_count.i.i165.i, align 4
  %54 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ arch_local_irq_save\0A\09cpsid\09i", "=r,~{memory},~{cc}"() #24, !srcloc !19
  %55 = load ptr, ptr %0, align 4
  %partial72.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %55, i32 0, i32 3
  %56 = ptrtoint ptr %partial72.i to i32
  %57 = load i32, ptr %cpu.i11, align 4
  %arrayidx76.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %57
  %58 = load i32, ptr %arrayidx76.i, align 4
  %add77.i = add i32 %58, %56
  %59 = inttoptr i32 %add77.i to ptr
  store ptr null, ptr %59, align 4
  %60 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ local_save_flags", "=r,~{memory},~{cc}"() #24, !srcloc !20
  %and.i.i.i15 = and i32 %60, 128
  %tobool88.not.i = icmp eq i32 %and.i.i.i15, 0
  br i1 %tobool88.not.i, label %if.then92.i, label %do.end95.i, !prof !13

if.then92.i:                                      ; preds = %do.body12.i16
  tail call void @warn_bogus_irq_restore() #27
  br label %do.end95.i

do.end95.i:                                       ; preds = %if.then92.i, %do.body12.i16
  tail call void asm sideeffect "\09msr\09cpsr_c, $0\09@ local_irq_restore", "r,~{memory},~{cc}"(i32 %54) #24, !srcloc !21
  %61 = load ptr, ptr %0, align 4
  %lock110.i = getelementptr inbounds %struct.kmem_cache_cpu, ptr %61, i32 0, i32 4
  %62 = ptrtoint ptr %lock110.i to i32
  %63 = load i32, ptr %cpu.i11, align 4
  %arrayidx114.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %63
  %64 = load i32, ptr %arrayidx114.i, align 4
  %add115.i = add i32 %64, %62
  %65 = inttoptr i32 %add115.i to ptr
  tail call fastcc void @local_lock_release(ptr noundef %65) #27
  br i1 %tobool.not.i8, label %if.then125.i, label %do.body127.i

if.then125.i:                                     ; preds = %do.end95.i
  tail call void @trace_hardirqs_on() #27
  br label %do.body127.i

do.body127.i:                                     ; preds = %if.then125.i, %do.end95.i
  %66 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ local_save_flags", "=r,~{memory},~{cc}"() #24, !srcloc !20
  %and.i.i168.i = and i32 %66, 128
  %tobool135.not.i = icmp eq i32 %and.i.i168.i, 0
  br i1 %tobool135.not.i, label %if.then144.i, label %do.end147.i, !prof !13

if.then144.i:                                     ; preds = %do.body127.i
  tail call void @warn_bogus_irq_restore() #27
  br label %do.end147.i

do.end147.i:                                      ; preds = %if.then144.i, %do.body127.i
  tail call void asm sideeffect "\09msr\09cpsr_c, $0\09@ local_irq_restore", "r,~{memory},~{cc}"(i32 %34) #24, !srcloc !21
  %tobool154.not.i = icmp eq ptr %50, null
  br i1 %tobool154.not.i, label %unfreeze_partials.exit, label %if.then155.i

if.then155.i:                                     ; preds = %do.end147.i
  tail call fastcc void @__unfreeze_partials(ptr noundef %0, ptr noundef nonnull %50) #27
  br label %unfreeze_partials.exit

unfreeze_partials.exit:                           ; preds = %if.then155.i, %do.end147.i
  ret void
}

; Function Attrs: null_pointer_is_valid
declare dso_local zeroext i1 @flush_work(ptr noundef) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local void @mutex_unlock(ptr noundef) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local void @lockdep_init_map_type(ptr noundef, ptr noundef, ptr noundef, i32 noundef, i8 noundef zeroext, i8 noundef zeroext, i8 noundef zeroext) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local zeroext i1 @queue_work_on(i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc void @list_slab_objects(ptr nocapture noundef readonly %s, ptr noundef %slab) unnamed_addr #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %call.i.i = tail call ptr @page_address(ptr noundef %slab) #27
  %name = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 18
  %0 = load ptr, ptr %name, align 4
  tail call void (ptr, ptr, ptr, ...) @slab_err(ptr noundef %s, ptr noundef %slab, ptr noundef nonnull @.str.122, ptr noundef %0) #25
  %1 = getelementptr inbounds %struct.page, ptr %slab, i32 0, i32 1
  %2 = load volatile i32, ptr %1, align 4
  %and.i.i.i = and i32 %2, 1
  %tobool.not.i.i = icmp eq i32 %and.i.i.i, 0
  br i1 %tobool.not.i.i, label %do.end8.i.i, label %if.then.i.i, !prof !14

if.then.i.i:                                      ; preds = %entry
  tail call void @dump_page(ptr noundef %slab, ptr noundef nonnull @.str.29) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slub.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 447, 0\0A.popsection", ""() #24, !srcloc !70
  unreachable

do.end8.i.i:                                      ; preds = %entry
  %3 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i.i.i.i = and i32 %3, -16384
  %4 = inttoptr i32 %and.i.i.i.i.i.i to ptr
  %preempt_count.i.i.i.i.i = getelementptr inbounds %struct.thread_info, ptr %4, i32 0, i32 1
  %5 = load volatile i32, ptr %preempt_count.i.i.i.i.i, align 4
  %add.i.i.i.i = add i32 %5, 1
  store volatile i32 %add.i.i.i.i, ptr %preempt_count.i.i.i.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !71
  br label %while.cond.i.i.i

while.cond.i.i.i:                                 ; preds = %do.body14.i.i.i, %do.end8.i.i
  %6 = load volatile i32, ptr %slab, align 4
  %and.i.i.i.i.i = and i32 %6, 1
  %tobool.not.i.i.i.i.i = icmp eq i32 %and.i.i.i.i.i, 0
  br i1 %tobool.not.i.i.i.i.i, label %test_and_set_bit_lock.exit.i.i.i, label %do.body2.i.i.i, !prof !72

test_and_set_bit_lock.exit.i.i.i:                 ; preds = %while.cond.i.i.i
  tail call void @llvm.prefetch.p0(ptr %slab, i32 1, i32 3, i32 1) #24
  %7 = tail call { i32, i32, i32 } asm sideeffect "@ atomic_fetch_or\0A1:\09ldrex\09$0, [$4]\0A\09orr\09$1, $0, $5\0A\09strex\09$2, $1, [$4]\0A\09teq\09$2, #0\0A\09bne\091b", "=&r,=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %slab, ptr %slab, i32 1, ptr elementtype(i32) %slab) #24, !srcloc !73
  %asmresult.i.i.i.i.i.i.i.i = extractvalue { i32, i32, i32 } %7, 0
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #24, !srcloc !74
  %and1.i.i.i.i.i = and i32 %asmresult.i.i.i.i.i.i.i.i, 1
  %phi.cmp.i.not.i.i.i = icmp eq i32 %and1.i.i.i.i.i, 0
  br i1 %phi.cmp.i.not.i.i.i, label %slab_lock.exit, label %do.body2.i.i.i, !prof !14

do.body2.i.i.i:                                   ; preds = %test_and_set_bit_lock.exit.i.i.i, %while.cond.i.i.i
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !75
  %8 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i1.i.i.i = and i32 %8, -16384
  %9 = inttoptr i32 %and.i.i.i1.i.i.i to ptr
  %preempt_count.i.i2.i.i.i = getelementptr inbounds %struct.thread_info, ptr %9, i32 0, i32 1
  %10 = load volatile i32, ptr %preempt_count.i.i2.i.i.i, align 4
  %sub.i.i.i.i = add i32 %10, -1
  store volatile i32 %sub.i.i.i.i, ptr %preempt_count.i.i2.i.i.i, align 4
  br label %do.body4.i.i.i

do.body4.i.i.i:                                   ; preds = %do.body4.i.i.i, %do.body2.i.i.i
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #24, !srcloc !76
  tail call void asm sideeffect "nop; nop; nop; nop; nop; nop; nop; nop; nop; nop;", ""() #24, !srcloc !77
  %11 = load volatile i32, ptr %slab, align 4
  %and1.i.i.i.i = and i32 %11, 1
  %tobool12.not.i.i.i = icmp eq i32 %and1.i.i.i.i, 0
  br i1 %tobool12.not.i.i.i, label %do.body14.i.i.i, label %do.body4.i.i.i

do.body14.i.i.i:                                  ; preds = %do.body4.i.i.i
  %12 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i3.i.i.i = and i32 %12, -16384
  %13 = inttoptr i32 %and.i.i.i3.i.i.i to ptr
  %preempt_count.i.i4.i.i.i = getelementptr inbounds %struct.thread_info, ptr %13, i32 0, i32 1
  %14 = load volatile i32, ptr %preempt_count.i.i4.i.i.i, align 4
  %add.i5.i.i.i = add i32 %14, 1
  store volatile i32 %add.i5.i.i.i, ptr %preempt_count.i.i4.i.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !78
  br label %while.cond.i.i.i

slab_lock.exit:                                   ; preds = %test_and_set_bit_lock.exit.i.i.i
  %15 = tail call i32 asm sideeffect "\09mrs\09$0, cpsr\09@ local_save_flags", "=r,~{memory},~{cc}"() #24, !srcloc !20
  %and.i.i = and i32 %15, 128
  %tobool.not.i = icmp eq i32 %and.i.i, 0
  br i1 %tobool.not.i, label %do.body13.i, label %get_map.exit, !prof !13

do.body13.i:                                      ; preds = %slab_lock.exit
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slub.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 605, 0\0A.popsection", ""() #24, !srcloc !103
  unreachable

get_map.exit:                                     ; preds = %slab_lock.exit
  tail call void @_raw_spin_lock(ptr noundef nonnull @object_map_lock) #27
  tail call fastcc void @__fill_map(ptr noundef nonnull @object_map, ptr noundef %s, ptr noundef %slab) #27
  callbr void asm sideeffect "1:\0A\09b ${1:l}\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr nonnull @slub_debug_enabled, ptr blockaddress(@list_slab_objects, %if.then37.i.i)) #24
          to label %fixup_red_left.exit [label %if.then37.i.i], !srcloc !10

if.then37.i.i:                                    ; preds = %get_map.exit
  %flags38.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 1
  %16 = load i32, ptr %flags38.i.i, align 4
  %and39.i.i = and i32 %16, 1024
  %tobool40.i.not.i = icmp eq i32 %and39.i.i, 0
  br i1 %tobool40.i.not.i, label %fixup_red_left.exit, label %if.then.i

if.then.i:                                        ; preds = %if.then37.i.i
  %red_left_pad.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 17
  %17 = load i32, ptr %red_left_pad.i, align 4
  %add.ptr.i = getelementptr i8, ptr %call.i.i, i32 %17
  br label %fixup_red_left.exit

fixup_red_left.exit:                              ; preds = %if.then.i, %if.then37.i.i, %get_map.exit
  %p.addr.0.i = phi ptr [ %add.ptr.i, %if.then.i ], [ %call.i.i, %if.then37.i.i ], [ %call.i.i, %get_map.exit ]
  %18 = getelementptr inbounds %struct.slab, ptr %slab, i32 0, i32 4
  %size = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 3
  %bf.load13 = load i32, ptr %18, align 4
  %bf.lshr14 = lshr i32 %bf.load13, 1
  %bf.clear15 = and i32 %bf.lshr14, 32767
  %19 = load i32, ptr %size, align 4
  %mul16 = mul i32 %bf.clear15, %19
  %add.ptr17 = getelementptr i8, ptr %call.i.i, i32 %mul16
  %cmp18 = icmp ult ptr %p.addr.0.i, %add.ptr17
  br i1 %cmp18, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %fixup_red_left.exit
  %sub.ptr.rhs.cast.i = ptrtoint ptr %call.i.i to i32
  %reciprocal_size.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 5
  %.elt2.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 5, i32 1
  %flags.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 1
  %offset.i.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 6
  %inuse.i.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 15
  br label %for.body

for.body:                                         ; preds = %for.inc, %for.body.lr.ph
  %p.019 = phi ptr [ %p.addr.0.i, %for.body.lr.ph ], [ %add.ptr7, %for.inc ]
  %sub.ptr.lhs.cast.i = ptrtoint ptr %p.019 to i32
  %sub.ptr.sub.i = sub i32 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i
  %.unpack.i = load i32, ptr %reciprocal_size.i, align 4
  %.unpack3.i = load i32, ptr %.elt2.i, align 4
  %R.sroa.2.4.extract.shift.i.i = lshr i32 %.unpack3.i, 24
  %R.sroa.4.4.extract.shift.i.i = lshr i32 %.unpack3.i, 16
  %conv.i.i = zext i32 %sub.ptr.sub.i to i64
  %conv1.i.i = zext i32 %.unpack.i to i64
  %mul.i.i = mul nuw i64 %conv1.i.i, %conv.i.i
  %shr.i.i = lshr i64 %mul.i.i, 32
  %conv2.i.i = trunc i64 %shr.i.i to i32
  %sub.i.i = sub i32 %sub.ptr.sub.i, %conv2.i.i
  %shr4.i.i = lshr i32 %sub.i.i, %R.sroa.2.4.extract.shift.i.i
  %add.i.i = add i32 %shr4.i.i, %conv2.i.i
  %conv5.i.i = and i32 %R.sroa.4.4.extract.shift.i.i, 255
  %shr6.i.i = lshr i32 %add.i.i, %conv5.i.i
  %div3.i = lshr i32 %shr6.i.i, 5
  %arrayidx.i = getelementptr i32, ptr @object_map, i32 %div3.i
  %20 = load volatile i32, ptr %arrayidx.i, align 4
  %and.i = and i32 %shr6.i.i, 31
  %21 = shl nuw i32 1, %and.i
  %22 = and i32 %21, %20
  %tobool.not = icmp eq i32 %22, 0
  br i1 %tobool.not, label %do.end, label %for.inc

do.end:                                           ; preds = %for.body
  %call5 = tail call i32 (ptr, ...) @_printk(ptr noundef nonnull @.str.123, ptr noundef %p.019, i32 noundef %sub.ptr.sub.i) #26
  %23 = load volatile i32, ptr @jiffies, align 128
  %24 = load i32, ptr %flags.i, align 4
  %and.i11 = and i32 %24, 65536
  %tobool.not.i12 = icmp eq i32 %and.i11, 0
  br i1 %tobool.not.i12, label %for.inc, label %if.end.i

if.end.i:                                         ; preds = %do.end
  %25 = load i32, ptr %offset.i.i.i.i, align 4
  %26 = load i32, ptr %inuse.i.i.i.i, align 4
  %cmp.i.not.i.i.i = icmp ult i32 %25, %26
  %add.i.i.i = add i32 %26, 4
  %spec.select.i.i.i = select i1 %cmp.i.not.i.i.i, i32 %26, i32 %add.i.i.i
  %add.ptr.i.i = getelementptr i8, ptr %p.019, i32 %spec.select.i.i.i
  tail call fastcc void @print_track(ptr noundef nonnull @.str, ptr noundef %add.ptr.i.i, i32 noundef %23) #27
  %27 = load i32, ptr %offset.i.i.i.i, align 4
  %28 = load i32, ptr %inuse.i.i.i.i, align 4
  %cmp.i.not.i.i8.i = icmp ult i32 %27, %28
  %add.i.i9.i = add i32 %28, 4
  %spec.select.i.i10.i = select i1 %cmp.i.not.i.i8.i, i32 %28, i32 %add.i.i9.i
  %add.ptr.i11.i = getelementptr i8, ptr %p.019, i32 %spec.select.i.i10.i
  %add.ptr1.i.i = getelementptr %struct.track, ptr %add.ptr.i11.i, i32 1
  tail call fastcc void @print_track(ptr noundef nonnull @.str.1, ptr noundef %add.ptr1.i.i, i32 noundef %23) #27
  br label %for.inc

for.inc:                                          ; preds = %if.end.i, %do.end, %for.body
  %29 = load i32, ptr %size, align 4
  %add.ptr7 = getelementptr i8, ptr %p.019, i32 %29
  %bf.load = load i32, ptr %18, align 4
  %bf.lshr = lshr i32 %bf.load, 1
  %bf.clear = and i32 %bf.lshr, 32767
  %mul = mul i32 %bf.clear, %29
  %add.ptr = getelementptr i8, ptr %call.i.i, i32 %mul
  %cmp = icmp ult ptr %add.ptr7, %add.ptr
  br i1 %cmp, label %for.body, label %for.end

for.end:                                          ; preds = %for.inc, %fixup_red_left.exit
  tail call void @_raw_spin_unlock(ptr noundef nonnull @object_map_lock) #27
  %30 = load volatile i32, ptr %1, align 4
  %and.i.i.i1 = and i32 %30, 1
  %tobool.not.i.i2 = icmp eq i32 %and.i.i.i1, 0
  br i1 %tobool.not.i.i2, label %do.end8.i.i5, label %if.then.i.i3, !prof !14

if.then.i.i3:                                     ; preds = %for.end
  tail call void @dump_page(ptr noundef %slab, ptr noundef nonnull @.str.29) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slub.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 455, 0\0A.popsection", ""() #24, !srcloc !79
  unreachable

do.end8.i.i5:                                     ; preds = %for.end
  %31 = load volatile i32, ptr %slab, align 4
  %and1.i.i.i.i4 = and i32 %31, 1
  %tobool.not.i.i.i = icmp eq i32 %and1.i.i.i.i4, 0
  br i1 %tobool.not.i.i.i, label %do.body4.i.i.i6, label %slab_unlock.exit, !prof !13

do.body4.i.i.i6:                                  ; preds = %do.end8.i.i5
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/bit_spinlock.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 77, 0\0A.popsection", ""() #24, !srcloc !80
  unreachable

slab_unlock.exit:                                 ; preds = %do.end8.i.i5
  %32 = load volatile i32, ptr %slab, align 4
  %and.i.i.i.i.i7 = and i32 %32, -2
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #24, !srcloc !81
  store volatile i32 %and.i.i.i.i.i7, ptr %slab, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !82
  %33 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i.i.i.i8 = and i32 %33, -16384
  %34 = inttoptr i32 %and.i.i.i.i.i.i8 to ptr
  %preempt_count.i.i.i.i.i9 = getelementptr inbounds %struct.thread_info, ptr %34, i32 0, i32 1
  %35 = load volatile i32, ptr %preempt_count.i.i.i.i.i9, align 4
  %sub.i.i.i.i10 = add i32 %35, -1
  store volatile i32 %sub.i.i.i.i10, ptr %preempt_count.i.i.i.i.i9, align 4
  ret void
}

; Function Attrs: null_pointer_is_valid
declare dso_local void @_raw_spin_lock_irq(ptr noundef) local_unnamed_addr #3 section ".spinlock.text"

; Function Attrs: null_pointer_is_valid
declare dso_local void @_raw_spin_lock(ptr noundef) local_unnamed_addr #3 section ".spinlock.text"

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc void @__fill_map(ptr noundef %obj_map, ptr nocapture noundef readonly %s, ptr noundef %slab) unnamed_addr #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %call.i.i = tail call ptr @page_address(ptr noundef %slab) #27
  %0 = getelementptr inbounds %struct.slab, ptr %slab, i32 0, i32 4
  %bf.load = load i32, ptr %0, align 4
  %bf.lshr = lshr i32 %bf.load, 1
  %bf.clear = and i32 %bf.lshr, 32767
  %sub.i = add nuw nsw i32 %bf.clear, 31
  %1 = lshr i32 %sub.i, 3
  %mul.i = and i32 %1, 8188
  %call.i = tail call ptr @__memset(ptr noundef %obj_map, i32 noundef 0, i32 noundef %mul.i) #27
  %freelist = getelementptr inbounds %struct.slab, ptr %slab, i32 0, i32 3
  %2 = load ptr, ptr %freelist, align 4
  %tobool.not9 = icmp eq ptr %2, null
  br i1 %tobool.not9, label %for.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %entry
  %sub.ptr.rhs.cast.i = ptrtoint ptr %call.i.i to i32
  %reciprocal_size.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 5
  %.elt2.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 5, i32 1
  %offset.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 6
  %random.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 21
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %p.010 = phi ptr [ %2, %for.body.lr.ph ], [ %8, %for.body ]
  %sub.ptr.lhs.cast.i = ptrtoint ptr %p.010 to i32
  %sub.ptr.sub.i = sub i32 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i
  %.unpack.i = load i32, ptr %reciprocal_size.i, align 4
  %.unpack3.i = load i32, ptr %.elt2.i, align 4
  %R.sroa.2.4.extract.shift.i.i = lshr i32 %.unpack3.i, 24
  %R.sroa.4.4.extract.shift.i.i = lshr i32 %.unpack3.i, 16
  %conv.i.i = zext i32 %sub.ptr.sub.i to i64
  %conv1.i.i = zext i32 %.unpack.i to i64
  %mul.i.i = mul nuw i64 %conv1.i.i, %conv.i.i
  %shr.i.i = lshr i64 %mul.i.i, 32
  %conv2.i.i = trunc i64 %shr.i.i to i32
  %sub.i.i = sub i32 %sub.ptr.sub.i, %conv2.i.i
  %shr4.i.i = lshr i32 %sub.i.i, %R.sroa.2.4.extract.shift.i.i
  %add.i.i = add i32 %shr4.i.i, %conv2.i.i
  %conv5.i.i = and i32 %R.sroa.4.4.extract.shift.i.i, 255
  %shr6.i.i = lshr i32 %add.i.i, %conv5.i.i
  tail call void @_set_bit(i32 noundef %shr6.i.i, ptr noundef %obj_map) #27
  %3 = load i32, ptr %offset.i, align 4
  %add.ptr.i = getelementptr i8, ptr %p.010, i32 %3
  %4 = load i32, ptr %add.ptr.i, align 4
  %5 = ptrtoint ptr %add.ptr.i to i32
  %6 = load i32, ptr %random.i.i.i, align 4
  %7 = tail call i32 @llvm.bswap.i32(i32 %5) #24
  %xor.i.i.i = xor i32 %6, %4
  %xor2.i.i.i = xor i32 %xor.i.i.i, %7
  %8 = inttoptr i32 %xor2.i.i.i to ptr
  %tobool.not = icmp eq i32 %xor2.i.i.i, 0
  br i1 %tobool.not, label %for.end, label %for.body

for.end:                                          ; preds = %for.body, %entry
  ret void
}

; Function Attrs: null_pointer_is_valid
declare dso_local void @_raw_spin_unlock(ptr noundef) local_unnamed_addr #3 section ".spinlock.text"

; Function Attrs: null_pointer_is_valid
declare dso_local void @_raw_spin_unlock_irq(ptr noundef) local_unnamed_addr #3 section ".spinlock.text"

; Function Attrs: null_pointer_is_valid
declare dso_local ptr @page_address(ptr noundef) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @get_option(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid allocsize(0)
declare dso_local noalias ptr @kmalloc_order_trace(i32 noundef, i32 noundef, i32 noundef) local_unnamed_addr #21

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @__traceiter_kfree(ptr noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local void @__kasan_kfree_large(ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local void @__mod_lruvec_page_state(ptr noundef, i32 noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local void @cpus_read_lock() local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local void @cpus_read_unlock() local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local void @__raw_spin_lock_init(ptr noundef, ptr noundef, ptr noundef, i16 noundef signext) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local ptr @__memcpy(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc i32 @init_cache_random_seq(ptr noundef %s) unnamed_addr #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %oo = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 9
  %.unpack = load i32, ptr %oo, align 4
  %and.i = and i32 %.unpack, 65535
  %random_seq = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 22
  %0 = load ptr, ptr %random_seq, align 4
  %tobool.not = icmp eq ptr %0, null
  br i1 %tobool.not, label %if.end, label %cleanup

if.end:                                           ; preds = %entry
  %call1 = tail call i32 @cache_random_seq_create(ptr noundef %s, i32 noundef %and.i, i32 noundef 3264) #27
  %tobool2.not = icmp eq i32 %call1, 0
  br i1 %tobool2.not, label %if.end5, label %do.end

do.end:                                           ; preds = %if.end
  %name = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 18
  %1 = load ptr, ptr %name, align 4
  %call4 = tail call i32 (ptr, ...) @_printk(ptr noundef nonnull @.str.130, ptr noundef %1) #26
  br label %cleanup

if.end5:                                          ; preds = %if.end
  %2 = load ptr, ptr %random_seq, align 4
  %tobool7.not = icmp ne ptr %2, null
  %cmp22 = icmp ne i32 %and.i, 0
  %or.cond = select i1 %tobool7.not, i1 %cmp22, i1 false
  br i1 %or.cond, label %for.body.lr.ph, label %cleanup

for.body.lr.ph:                                   ; preds = %if.end5
  %size = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 3
  %3 = load i32, ptr %size, align 4
  %4 = load i32, ptr %2, align 4
  %mul24 = mul i32 %4, %3
  store i32 %mul24, ptr %2, align 4
  %exitcond.not25 = icmp eq i32 %and.i, 1
  br i1 %exitcond.not25, label %cleanup, label %for.body.for.body_crit_edge

for.body.for.body_crit_edge:                      ; preds = %for.body.for.body_crit_edge, %for.body.lr.ph
  %inc26 = phi i32 [ %inc, %for.body.for.body_crit_edge ], [ 1, %for.body.lr.ph ]
  %.pre = load ptr, ptr %random_seq, align 4
  %5 = load i32, ptr %size, align 4
  %arrayidx = getelementptr i32, ptr %.pre, i32 %inc26
  %6 = load i32, ptr %arrayidx, align 4
  %mul = mul i32 %6, %5
  store i32 %mul, ptr %arrayidx, align 4
  %inc = add nuw nsw i32 %inc26, 1
  %exitcond.not = icmp eq i32 %inc, %and.i
  br i1 %exitcond.not, label %cleanup, label %for.body.for.body_crit_edge

cleanup:                                          ; preds = %for.body.for.body_crit_edge, %for.body.lr.ph, %if.end5, %do.end, %entry
  %retval.0 = phi i32 [ %call1, %do.end ], [ 0, %entry ], [ 0, %if.end5 ], [ 0, %for.body.lr.ph ], [ 0, %for.body.for.body_crit_edge ]
  ret i32 %retval.0
}

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @cache_random_seq_create(ptr noundef, i32 noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @__cpuhp_setup_state(i32 noundef, ptr noundef, i1 noundef zeroext, ptr noundef, ptr noundef, i1 noundef zeroext) local_unnamed_addr #3

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc i32 @calculate_sizes(ptr noundef %s) unnamed_addr #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %size = alloca i32, align 4
  %tmp = alloca %struct.reciprocal_value, align 8
  %flags1 = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 1
  %0 = load i32, ptr %flags1, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %size) #24
  %object_size = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 4
  %1 = load i32, ptr %object_size, align 4
  %add = add i32 %1, 3
  %and = and i32 %add, -4
  store i32 %and, ptr %size, align 4
  %2 = and i32 %0, 526336
  %3 = icmp eq i32 %2, 2048
  br i1 %3, label %land.lhs.true5, label %if.end

land.lhs.true5:                                   ; preds = %entry
  %ctor = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 14
  %4 = load ptr, ptr %ctor, align 4
  %tobool6.not = icmp eq ptr %4, null
  br i1 %tobool6.not, label %if.end.thread, label %if.end.thread48

if.end:                                           ; preds = %entry
  %and9 = and i32 %0, 2147483647
  store i32 %and9, ptr %flags1, align 4
  %and10 = and i32 %0, 1024
  %tobool11.not = icmp eq i32 %and10, 0
  br i1 %tobool11.not, label %if.end16.thread, label %land.lhs.true12

if.end.thread48:                                  ; preds = %land.lhs.true5
  %and949 = and i32 %0, 2147483647
  store i32 %and949, ptr %flags1, align 4
  %and1050 = and i32 %0, 1024
  %tobool11.not51 = icmp eq i32 %and1050, 0
  br i1 %tobool11.not51, label %if.then27.sink.split, label %land.lhs.true12

if.end.thread:                                    ; preds = %land.lhs.true5
  %or = or i32 %0, -2147483648
  store i32 %or, ptr %flags1, align 4
  %and1038 = and i32 %0, 1024
  %tobool11.not39 = icmp eq i32 %and1038, 0
  br i1 %tobool11.not39, label %if.then27.sink.split, label %land.lhs.true12

land.lhs.true12:                                  ; preds = %if.end.thread, %if.end.thread48, %if.end
  %cmp = icmp eq i32 %and, %1
  br i1 %cmp, label %if.then14, label %if.end16

if.then14:                                        ; preds = %land.lhs.true12
  %add15 = add i32 %1, 4
  store i32 %add15, ptr %size, align 4
  br label %if.end16

if.end16:                                         ; preds = %if.then14, %land.lhs.true12
  %5 = phi i32 [ %add15, %if.then14 ], [ %and, %land.lhs.true12 ]
  %inuse = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 15
  store i32 %5, ptr %inuse, align 4
  %tobool18.not = icmp ne i32 %2, 0
  %cmp23 = icmp ult i32 %1, 4
  %or.cond31 = select i1 %tobool18.not, i1 true, i1 %cmp23
  br i1 %or.cond31, label %if.then27, label %lor.lhs.false24

if.end16.thread:                                  ; preds = %if.end
  %inuse20 = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 15
  store i32 %and, ptr %inuse20, align 4
  %tobool18.not22 = icmp eq i32 %2, 0
  br i1 %tobool18.not22, label %lor.lhs.false24, label %if.then27

lor.lhs.false24:                                  ; preds = %if.end16.thread, %if.end16
  %tobool11.not41 = phi i1 [ true, %if.end16.thread ], [ false, %if.end16 ]
  %6 = phi i32 [ %and, %if.end16.thread ], [ %5, %if.end16 ]
  %ctor25 = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 14
  %7 = load ptr, ptr %ctor25, align 4
  %tobool26.not = icmp eq ptr %7, null
  br i1 %tobool26.not, label %if.else29, label %if.then27

if.then27.sink.split:                             ; preds = %if.end.thread, %if.end.thread48
  %inuse2054 = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 15
  store i32 %and, ptr %inuse2054, align 4
  br label %if.then27

if.then27:                                        ; preds = %if.then27.sink.split, %lor.lhs.false24, %if.end16.thread, %if.end16
  %tobool11.not42 = phi i1 [ true, %if.end16.thread ], [ %tobool11.not41, %lor.lhs.false24 ], [ false, %if.end16 ], [ true, %if.then27.sink.split ]
  %8 = phi i32 [ %and, %if.end16.thread ], [ %6, %lor.lhs.false24 ], [ %5, %if.end16 ], [ %and, %if.then27.sink.split ]
  %offset = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 6
  store i32 %8, ptr %offset, align 4
  %add28 = add i32 %8, 4
  store i32 %add28, ptr %size, align 4
  br label %if.end34

if.else29:                                        ; preds = %lor.lhs.false24
  %div1 = lshr i32 %1, 1
  %and32 = and i32 %div1, 2147483644
  %offset33 = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 6
  store i32 %and32, ptr %offset33, align 4
  br label %if.end34

if.end34:                                         ; preds = %if.else29, %if.then27
  %tobool11.not40 = phi i1 [ %tobool11.not41, %if.else29 ], [ %tobool11.not42, %if.then27 ]
  %9 = phi i32 [ %6, %if.else29 ], [ %add28, %if.then27 ]
  %and35 = and i32 %0, 65536
  %tobool36.not = icmp eq i32 %and35, 0
  br i1 %tobool36.not, label %if.end39, label %if.then37

if.then37:                                        ; preds = %if.end34
  %add38 = add i32 %9, 160
  store i32 %add38, ptr %size, align 4
  br label %if.end39

if.end39:                                         ; preds = %if.then37, %if.end34
  call void @__kasan_cache_create(ptr noundef %s, ptr noundef nonnull %size, ptr noundef %flags1) #27
  %.pre = load i32, ptr %size, align 4
  br i1 %tobool11.not40, label %if.end39.if.end54_crit_edge, label %if.then43

if.end39.if.end54_crit_edge:                      ; preds = %if.end39
  %align55.phi.trans.insert = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 16
  %.pre35 = load i32, ptr %align55.phi.trans.insert, align 4
  %.pre36 = sub i32 0, %.pre35
  br label %if.end54

if.then43:                                        ; preds = %if.end39
  %add44 = add i32 %.pre, 4
  %red_left_pad = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 17
  %align = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 16
  %10 = load i32, ptr %align, align 4
  %add47 = add i32 %10, 3
  %neg = sub i32 0, %10
  %and50 = and i32 %add47, %neg
  store i32 %and50, ptr %red_left_pad, align 4
  %add53 = add i32 %and50, %add44
  br label %if.end54

if.end54:                                         ; preds = %if.then43, %if.end39.if.end54_crit_edge
  %neg60.pre-phi = phi i32 [ %.pre36, %if.end39.if.end54_crit_edge ], [ %neg, %if.then43 ]
  %11 = phi i32 [ %.pre35, %if.end39.if.end54_crit_edge ], [ %10, %if.then43 ]
  %12 = phi i32 [ %.pre, %if.end39.if.end54_crit_edge ], [ %add53, %if.then43 ]
  %sub56 = add i32 %12, -1
  %add57 = add i32 %sub56, %11
  %and61 = and i32 %add57, %neg60.pre-phi
  store i32 %and61, ptr %size, align 4
  %size62 = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 3
  store i32 %and61, ptr %size62, align 4
  %reciprocal_size = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 5
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %tmp) #24
  call void @reciprocal_value(ptr nonnull sret(%struct.reciprocal_value) align 4 %tmp, i32 noundef %and61) #27
  %13 = load i64, ptr %tmp, align 8
  store i64 %13, ptr %reciprocal_size, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %tmp) #24
  %14 = load i32, ptr %size, align 4
  %15 = load i32, ptr @slub_min_objects, align 4
  %tobool.not.i5 = icmp eq i32 %15, 0
  br i1 %tobool.not.i5, label %if.end.i.i.i, label %if.end3.i9

if.end.i.i.i:                                     ; preds = %if.end54
  %16 = load i32, ptr @nr_cpu_ids, align 4
  %call4.i.i.i = call i32 @__bitmap_weight(ptr noundef nonnull @__cpu_present_mask, i32 noundef %16) #27
  %cmp.i7 = icmp ult i32 %call4.i.i.i, 2
  %17 = load i32, ptr @nr_cpu_ids, align 4
  %spec.select.i = select i1 %cmp.i7, i32 %17, i32 %call4.i.i.i
  %tobool.not.i.i8 = icmp eq i32 %spec.select.i, 0
  %18 = call i32 @llvm.ctlz.i32(i32 %spec.select.i, i1 false) #24, !range !50
  %.neg.i = mul nsw i32 %18, -4
  %sub.i.op.op.i = add nsw i32 %.neg.i, 132
  %mul.i = select i1 %tobool.not.i.i8, i32 4, i32 %sub.i.op.op.i
  br label %if.end3.i9

if.end3.i9:                                       ; preds = %if.end.i.i.i, %if.end54
  %min_objects.0.i = phi i32 [ %15, %if.end54 ], [ %mul.i, %if.end.i.i.i ]
  %19 = load i32, ptr @slub_max_order, align 4
  %shl.i.i = shl i32 4096, %19
  %div.i.i = udiv i32 %shl.i.i, %14
  %20 = call i32 @llvm.umin.i32(i32 %min_objects.0.i, i32 %div.i.i) #24
  %21 = load i32, ptr @slub_min_order, align 4
  %shl.i.i.i = shl i32 4096, %21
  %mul.i.i = mul i32 %14, 32767
  %dec.i.i.i = add i32 %mul.i.i, -1
  %shr.i.i49.i = lshr i32 %dec.i.i.i, 12
  %tobool.not.i.i.i.i = icmp ult i32 %dec.i.i.i, 4096
  %22 = call i32 @llvm.ctlz.i32(i32 %shr.i.i49.i, i1 false) #24, !range !104
  %sub.i.i.i.i = sub nuw nsw i32 32, %22
  %cond.i.i.i.i = select i1 %tobool.not.i.i.i.i, i32 0, i32 %sub.i.i.i.i
  %div.i.i.i = udiv i32 %shl.i.i.i, %14
  %cmp.i.i = icmp ugt i32 %div.i.i.i, 32767
  %cmp6.i33 = icmp ugt i32 %20, 1
  br i1 %cmp6.i33, label %while.cond7.preheader.i.preheader, label %while.end14.i

while.cond7.preheader.i.preheader:                ; preds = %if.end3.i9
  %sub.i51.i = add nsw i32 %cond.i.i.i.i, -1
  %cmp11.not163.i = icmp ugt i32 %sub.i51.i, %19
  br label %while.cond7.preheader.i

while.cond.i:                                     ; preds = %calc_slab_order.exit.2.i
  %dec.i10 = add i32 %min_objects.1.i34, -1
  %cmp6.i = icmp ugt i32 %dec.i10, 1
  br i1 %cmp6.i, label %while.cond7.preheader.i, label %while.end14.i

while.cond7.preheader.i:                          ; preds = %while.cond.i, %while.cond7.preheader.i.preheader
  %min_objects.1.i34 = phi i32 [ %dec.i10, %while.cond.i ], [ %20, %while.cond7.preheader.i.preheader ]
  br i1 %cmp.i.i, label %calc_slab_order.exit.thread161.i, label %if.end.i.i

for.body.i.1.i:                                   ; preds = %calc_slab_order.exit.i, %for.inc.i.1.i
  %order.039.i.1.i = phi i32 [ %inc.i.1.i, %for.inc.i.1.i ], [ %24, %calc_slab_order.exit.i ]
  %shl.i52.1.i = shl i32 4096, %order.039.i.1.i
  %rem6.i.1.i = urem i32 %shl.i52.1.i, %14
  %div.i53.1157.i = lshr exact i32 %shl.i52.1.i, 3
  %cmp7.not.i.1.i = icmp ugt i32 %rem6.i.1.i, %div.i53.1157.i
  br i1 %cmp7.not.i.1.i, label %for.inc.i.1.i, label %calc_slab_order.exit.1.i

for.inc.i.1.i:                                    ; preds = %for.body.i.1.i
  %inc.i.1.i = add i32 %order.039.i.1.i, 1
  %cmp5.not.i.1.i = icmp ugt i32 %inc.i.1.i, %19
  br i1 %cmp5.not.i.1.i, label %calc_slab_order.exit.1.i, label %for.body.i.1.i

calc_slab_order.exit.1.i:                         ; preds = %for.inc.i.1.i, %for.body.i.1.i
  %retval.0.i.1.i = phi i32 [ %inc.i.1.i, %for.inc.i.1.i ], [ %order.039.i.1.i, %for.body.i.1.i ]
  %cmp11.not.1.i = icmp ugt i32 %retval.0.i.1.i, %19
  br i1 %cmp11.not.1.i, label %for.body.i.2.i, label %calculate_order.exit

for.body.i.2.i:                                   ; preds = %for.inc.i.2.i, %calc_slab_order.exit.1.i
  %order.039.i.2.i = phi i32 [ %inc.i.2.i, %for.inc.i.2.i ], [ %24, %calc_slab_order.exit.1.i ]
  %shl.i52.2.i = shl i32 4096, %order.039.i.2.i
  %rem6.i.2.i = urem i32 %shl.i52.2.i, %14
  %div.i53.2158.i = lshr exact i32 %shl.i52.2.i, 2
  %cmp7.not.i.2.i = icmp ugt i32 %rem6.i.2.i, %div.i53.2158.i
  br i1 %cmp7.not.i.2.i, label %for.inc.i.2.i, label %calc_slab_order.exit.2.i

for.inc.i.2.i:                                    ; preds = %for.body.i.2.i
  %inc.i.2.i = add i32 %order.039.i.2.i, 1
  %cmp5.not.i.2.i = icmp ugt i32 %inc.i.2.i, %19
  br i1 %cmp5.not.i.2.i, label %calc_slab_order.exit.2.i, label %for.body.i.2.i

calc_slab_order.exit.2.i:                         ; preds = %calc_slab_order.exit.thread161.i, %if.end.i.i, %for.inc.i.2.i, %for.body.i.2.i
  %retval.0.i.2.i = phi i32 [ %24, %if.end.i.i ], [ %sub.i51.i, %calc_slab_order.exit.thread161.i ], [ %inc.i.2.i, %for.inc.i.2.i ], [ %order.039.i.2.i, %for.body.i.2.i ]
  %cmp11.not.2.i = icmp ugt i32 %retval.0.i.2.i, %19
  br i1 %cmp11.not.2.i, label %while.cond.i, label %calculate_order.exit

if.end.i.i:                                       ; preds = %while.cond7.preheader.i
  %mul2.i.i = mul i32 %min_objects.1.i34, %14
  %dec.i30.i.i = add i32 %mul2.i.i, -1
  %tobool.not.i.i32.i.i = icmp ult i32 %dec.i30.i.i, 4096
  %shr.i31.i.i = lshr i32 %dec.i30.i.i, 12
  %23 = call i32 @llvm.ctlz.i32(i32 %shr.i31.i.i, i1 false) #24, !range !104
  %sub.i.i33.i.i = sub nuw nsw i32 32, %23
  %cond.i.i34.i.i = select i1 %tobool.not.i.i32.i.i, i32 0, i32 %sub.i.i33.i.i
  %24 = call i32 @llvm.umax.i32(i32 %21, i32 %cond.i.i34.i.i) #24
  %cmp5.not38.i.i = icmp ugt i32 %24, %19
  br i1 %cmp5.not38.i.i, label %calc_slab_order.exit.2.i, label %for.body.i.i

for.body.i.i:                                     ; preds = %for.inc.i.i, %if.end.i.i
  %order.039.i.i = phi i32 [ %inc.i.i, %for.inc.i.i ], [ %24, %if.end.i.i ]
  %shl.i52.i = shl i32 4096, %order.039.i.i
  %rem6.i.i = urem i32 %shl.i52.i, %14
  %div.i53156.i = lshr exact i32 %shl.i52.i, 4
  %cmp7.not.i.i = icmp ugt i32 %rem6.i.i, %div.i53156.i
  br i1 %cmp7.not.i.i, label %for.inc.i.i, label %calc_slab_order.exit.i

for.inc.i.i:                                      ; preds = %for.body.i.i
  %inc.i.i = add i32 %order.039.i.i, 1
  %cmp5.not.i.i = icmp ugt i32 %inc.i.i, %19
  br i1 %cmp5.not.i.i, label %calc_slab_order.exit.i, label %for.body.i.i

calc_slab_order.exit.i:                           ; preds = %for.inc.i.i, %for.body.i.i
  %retval.0.i.ph.i = phi i32 [ %inc.i.i, %for.inc.i.i ], [ %order.039.i.i, %for.body.i.i ]
  %cmp11.not.i = icmp ugt i32 %retval.0.i.ph.i, %19
  br i1 %cmp11.not.i, label %for.body.i.1.i, label %calculate_order.exit

calc_slab_order.exit.thread161.i:                 ; preds = %while.cond7.preheader.i
  br i1 %cmp11.not163.i, label %calc_slab_order.exit.2.i, label %calculate_order.exit

while.end14.i:                                    ; preds = %while.cond.i, %if.end3.i9
  br i1 %cmp.i.i, label %if.then.i58.i, label %get_order.exit37.i91.thread.i

if.then.i58.i:                                    ; preds = %while.end14.i
  %sub.i73.i = add nsw i32 %cond.i.i.i.i, -1
  %cmp16.not143.i = icmp ugt i32 %sub.i73.i, %19
  br i1 %cmp16.not143.i, label %calc_slab_order.exit141.i, label %calculate_order.exit

get_order.exit37.i91.thread.i:                    ; preds = %while.end14.i
  %dec.i30.i83.i = add i32 %14, -1
  %shr.i31.i84.i = lshr i32 %dec.i30.i83.i, 12
  %tobool.not.i.i32.i85.i = icmp ult i32 %dec.i30.i83.i, 4096
  %25 = call i32 @llvm.ctlz.i32(i32 %shr.i31.i84.i, i1 false) #24, !range !50
  %sub.i.i33.i86.i = sub nuw nsw i32 32, %25
  %cond.i.i34.i87.i = select i1 %tobool.not.i.i32.i85.i, i32 0, i32 %sub.i.i33.i86.i
  %26 = call i32 @llvm.umax.i32(i32 %21, i32 %cond.i.i34.i87.i) #24
  %cmp16.not176.i = icmp ugt i32 %26, %19
  br i1 %cmp16.not176.i, label %get_order.exit37.i135.i, label %calculate_order.exit

get_order.exit37.i135.i:                          ; preds = %get_order.exit37.i91.thread.i
  %27 = call i32 @llvm.umax.i32(i32 %21, i32 %cond.i.i34.i87.i) #24
  br label %calc_slab_order.exit141.i

calc_slab_order.exit141.i:                        ; preds = %get_order.exit37.i135.i, %if.then.i58.i
  %retval.0.i140.i = phi i32 [ %27, %get_order.exit37.i135.i ], [ %sub.i73.i, %if.then.i58.i ]
  %cmp20.i = icmp ult i32 %retval.0.i140.i, 12
  br i1 %cmp20.i, label %if.end69, label %cleanup

calculate_order.exit:                             ; preds = %get_order.exit37.i91.thread.i, %if.then.i58.i, %calc_slab_order.exit.thread161.i, %calc_slab_order.exit.i, %calc_slab_order.exit.2.i, %calc_slab_order.exit.1.i
  %retval.2.i = phi i32 [ %sub.i73.i, %if.then.i58.i ], [ %26, %get_order.exit37.i91.thread.i ], [ %retval.0.i.ph.i, %calc_slab_order.exit.i ], [ %retval.0.i.1.i, %calc_slab_order.exit.1.i ], [ %retval.0.i.2.i, %calc_slab_order.exit.2.i ], [ %sub.i51.i, %calc_slab_order.exit.thread161.i ]
  %cmp67 = icmp slt i32 %retval.2.i, 0
  br i1 %cmp67, label %cleanup, label %if.end69

if.end69:                                         ; preds = %calculate_order.exit, %calc_slab_order.exit141.i
  %retval.2.i30 = phi i32 [ %retval.2.i, %calculate_order.exit ], [ %retval.0.i140.i, %calc_slab_order.exit141.i ]
  %allocflags = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 12
  %tobool70.not = icmp eq i32 %retval.2.i30, 0
  %spec.select = select i1 %tobool70.not, i32 0, i32 262144
  store i32 %spec.select, ptr %allocflags, align 4
  %28 = load i32, ptr %flags1, align 4
  %29 = and i32 %28, 180224
  %.not = icmp eq i32 %29, 0
  br i1 %.not, label %if.end14.i, label %30

30:                                               ; preds = %if.end69
  %and83 = lshr i32 %28, 13
  %31 = and i32 %and83, 4
  %and76 = lshr i32 %28, 14
  %32 = and i32 %and76, 1
  %33 = or i32 %32, %spec.select
  %34 = or i32 %31, %33
  %and90 = lshr i32 %28, 13
  %35 = and i32 %and90, 16
  %36 = or i32 %35, %34
  store i32 %36, ptr %allocflags, align 4
  br label %if.end14.i

if.end14.i:                                       ; preds = %30, %if.end69
  %oo = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 9
  %37 = load i32, ptr %size, align 4
  %shl.i = shl i32 %retval.2.i30, 16
  %shl.i.i11 = shl i32 4096, %retval.2.i30
  %div.i.i12 = udiv i32 %shl.i.i11, %37
  %add.i13 = add i32 %div.i.i12, %shl.i
  store i32 %add.i13, ptr %oo, align 4
  %min = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 11
  %dec.i = add i32 %37, -1
  %tobool.not.i.i = icmp ult i32 %dec.i, 4096
  %shr.i = lshr i32 %dec.i, 12
  %38 = call i32 @llvm.ctlz.i32(i32 %shr.i, i1 false) #24, !range !50
  %sub.i.i = sub nuw nsw i32 32, %38
  %cond.i.i = select i1 %tobool.not.i.i, i32 0, i32 %sub.i.i
  %shl.i14 = shl nsw i32 %cond.i.i, 16
  %shl.i.i15 = shl i32 4096, %cond.i.i
  %div.i.i16 = udiv i32 %shl.i.i15, %37
  %add.i17 = add i32 %div.i.i16, %shl.i14
  store i32 %add.i17, ptr %min, align 4
  %and.i = and i32 %add.i13, 65535
  %max = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 10
  %.unpack2 = load i32, ptr %max, align 4
  %and.i18 = and i32 %.unpack2, 65535
  %cmp107 = icmp ugt i32 %and.i, %and.i18
  br i1 %cmp107, label %if.then108, label %if.end111

if.then108:                                       ; preds = %if.end14.i
  store i32 %add.i13, ptr %max, align 4
  br label %if.end111

if.end111:                                        ; preds = %if.then108, %if.end14.i
  %tobool115 = icmp ne i32 %and.i, 0
  %lnot.ext = zext i1 %tobool115 to i32
  br label %cleanup

cleanup:                                          ; preds = %if.end111, %calculate_order.exit, %calc_slab_order.exit141.i
  %retval.0 = phi i32 [ %lnot.ext, %if.end111 ], [ 0, %calculate_order.exit ], [ 0, %calc_slab_order.exit141.i ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %size) #24
  ret i32 %retval.0
}

; Function Attrs: null_pointer_is_valid
declare dso_local void @reciprocal_value(ptr sret(%struct.reciprocal_value) align 4, i32 noundef) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local void @__kasan_cache_create(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @__bitmap_weight(ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @_find_first_bit_be(ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid allocsize(0)
declare dso_local noalias ptr @__alloc_percpu(i32 noundef, i32 noundef) local_unnamed_addr #21

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc void @validate_slab(ptr noundef %s, ptr noundef %slab, ptr noundef %obj_map) unnamed_addr #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %call.i.i = tail call ptr @page_address(ptr noundef %slab) #27
  %0 = getelementptr inbounds %struct.page, ptr %slab, i32 0, i32 1
  %1 = load volatile i32, ptr %0, align 4
  %and.i.i.i = and i32 %1, 1
  %tobool.not.i.i = icmp eq i32 %and.i.i.i, 0
  br i1 %tobool.not.i.i, label %do.end8.i.i, label %if.then.i.i, !prof !14

if.then.i.i:                                      ; preds = %entry
  tail call void @dump_page(ptr noundef %slab, ptr noundef nonnull @.str.29) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slub.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 447, 0\0A.popsection", ""() #24, !srcloc !70
  unreachable

do.end8.i.i:                                      ; preds = %entry
  %2 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i.i.i.i = and i32 %2, -16384
  %3 = inttoptr i32 %and.i.i.i.i.i.i to ptr
  %preempt_count.i.i.i.i.i = getelementptr inbounds %struct.thread_info, ptr %3, i32 0, i32 1
  %4 = load volatile i32, ptr %preempt_count.i.i.i.i.i, align 4
  %add.i.i.i.i = add i32 %4, 1
  store volatile i32 %add.i.i.i.i, ptr %preempt_count.i.i.i.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !71
  br label %while.cond.i.i.i

while.cond.i.i.i:                                 ; preds = %do.body14.i.i.i, %do.end8.i.i
  %5 = load volatile i32, ptr %slab, align 4
  %and.i.i.i.i.i = and i32 %5, 1
  %tobool.not.i.i.i.i.i = icmp eq i32 %and.i.i.i.i.i, 0
  br i1 %tobool.not.i.i.i.i.i, label %test_and_set_bit_lock.exit.i.i.i, label %do.body2.i.i.i, !prof !72

test_and_set_bit_lock.exit.i.i.i:                 ; preds = %while.cond.i.i.i
  tail call void @llvm.prefetch.p0(ptr %slab, i32 1, i32 3, i32 1) #24
  %6 = tail call { i32, i32, i32 } asm sideeffect "@ atomic_fetch_or\0A1:\09ldrex\09$0, [$4]\0A\09orr\09$1, $0, $5\0A\09strex\09$2, $1, [$4]\0A\09teq\09$2, #0\0A\09bne\091b", "=&r,=&r,=&r,=*Qo,r,Ir,*Qo,~{cc}"(ptr elementtype(i32) %slab, ptr %slab, i32 1, ptr elementtype(i32) %slab) #24, !srcloc !73
  %asmresult.i.i.i.i.i.i.i.i = extractvalue { i32, i32, i32 } %6, 0
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #24, !srcloc !74
  %and1.i.i.i.i.i = and i32 %asmresult.i.i.i.i.i.i.i.i, 1
  %phi.cmp.i.not.i.i.i = icmp eq i32 %and1.i.i.i.i.i, 0
  br i1 %phi.cmp.i.not.i.i.i, label %slab_lock.exit, label %do.body2.i.i.i, !prof !14

do.body2.i.i.i:                                   ; preds = %test_and_set_bit_lock.exit.i.i.i, %while.cond.i.i.i
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !75
  %7 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i1.i.i.i = and i32 %7, -16384
  %8 = inttoptr i32 %and.i.i.i1.i.i.i to ptr
  %preempt_count.i.i2.i.i.i = getelementptr inbounds %struct.thread_info, ptr %8, i32 0, i32 1
  %9 = load volatile i32, ptr %preempt_count.i.i2.i.i.i, align 4
  %sub.i.i.i.i = add i32 %9, -1
  store volatile i32 %sub.i.i.i.i, ptr %preempt_count.i.i2.i.i.i, align 4
  br label %do.body4.i.i.i

do.body4.i.i.i:                                   ; preds = %do.body4.i.i.i, %do.body2.i.i.i
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #24, !srcloc !76
  tail call void asm sideeffect "nop; nop; nop; nop; nop; nop; nop; nop; nop; nop;", ""() #24, !srcloc !77
  %10 = load volatile i32, ptr %slab, align 4
  %and1.i.i.i.i = and i32 %10, 1
  %tobool12.not.i.i.i = icmp eq i32 %and1.i.i.i.i, 0
  br i1 %tobool12.not.i.i.i, label %do.body14.i.i.i, label %do.body4.i.i.i

do.body14.i.i.i:                                  ; preds = %do.body4.i.i.i
  %11 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i3.i.i.i = and i32 %11, -16384
  %12 = inttoptr i32 %and.i.i.i3.i.i.i to ptr
  %preempt_count.i.i4.i.i.i = getelementptr inbounds %struct.thread_info, ptr %12, i32 0, i32 1
  %13 = load volatile i32, ptr %preempt_count.i.i4.i.i.i, align 4
  %add.i5.i.i.i = add i32 %13, 1
  store volatile i32 %add.i5.i.i.i, ptr %preempt_count.i.i4.i.i.i, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !78
  br label %while.cond.i.i.i

slab_lock.exit:                                   ; preds = %test_and_set_bit_lock.exit.i.i.i
  %call1 = tail call fastcc i32 @check_slab(ptr noundef %s, ptr noundef %slab) #25
  %tobool.not = icmp eq i32 %call1, 0
  br i1 %tobool.not, label %unlock, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %slab_lock.exit
  %call2 = tail call fastcc i32 @on_freelist(ptr noundef %s, ptr noundef %slab, ptr noundef null) #25
  %tobool3.not = icmp eq i32 %call2, 0
  br i1 %tobool3.not, label %unlock, label %if.end

if.end:                                           ; preds = %lor.lhs.false
  tail call fastcc void @__fill_map(ptr noundef %obj_map, ptr noundef %s, ptr noundef %slab) #25
  callbr void asm sideeffect "1:\0A\09b ${1:l}\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr nonnull @slub_debug_enabled, ptr blockaddress(@validate_slab, %if.then37.i.i)) #24
          to label %fixup_red_left.exit [label %if.then37.i.i], !srcloc !10

if.then37.i.i:                                    ; preds = %if.end
  %flags38.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 1
  %14 = load i32, ptr %flags38.i.i, align 4
  %and39.i.i = and i32 %14, 1024
  %tobool40.i.not.i = icmp eq i32 %and39.i.i, 0
  br i1 %tobool40.i.not.i, label %fixup_red_left.exit, label %if.then.i

if.then.i:                                        ; preds = %if.then37.i.i
  %red_left_pad.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 17
  %15 = load i32, ptr %red_left_pad.i, align 4
  %add.ptr.i = getelementptr i8, ptr %call.i.i, i32 %15
  br label %fixup_red_left.exit

fixup_red_left.exit:                              ; preds = %if.then.i, %if.then37.i.i, %if.end
  %p.addr.0.i = phi ptr [ %add.ptr.i, %if.then.i ], [ %call.i.i, %if.then37.i.i ], [ %call.i.i, %if.end ]
  %16 = getelementptr inbounds %struct.slab, ptr %slab, i32 0, i32 4
  %size = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 3
  %bf.load44 = load i32, ptr %16, align 4
  %bf.lshr45 = lshr i32 %bf.load44, 1
  %bf.clear46 = and i32 %bf.lshr45, 32767
  %17 = load i32, ptr %size, align 4
  %mul47 = mul i32 %bf.clear46, %17
  %add.ptr48 = getelementptr i8, ptr %call.i.i, i32 %mul47
  %cmp49 = icmp ult ptr %p.addr.0.i, %add.ptr48
  br i1 %cmp49, label %for.body.lr.ph, label %unlock

for.body.lr.ph:                                   ; preds = %fixup_red_left.exit
  %sub.ptr.rhs.cast.i = ptrtoint ptr %call.i.i to i32
  %reciprocal_size.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 5
  %.elt2.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 5, i32 1
  br label %for.body

for.body:                                         ; preds = %for.inc, %for.body.lr.ph
  %p.050 = phi ptr [ %p.addr.0.i, %for.body.lr.ph ], [ %add.ptr13, %for.inc ]
  %sub.ptr.lhs.cast.i = ptrtoint ptr %p.050 to i32
  %sub.ptr.sub.i = sub i32 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i
  %.unpack.i = load i32, ptr %reciprocal_size.i, align 4
  %.unpack3.i = load i32, ptr %.elt2.i, align 4
  %R.sroa.2.4.extract.shift.i.i = lshr i32 %.unpack3.i, 24
  %R.sroa.4.4.extract.shift.i.i = lshr i32 %.unpack3.i, 16
  %conv.i.i = zext i32 %sub.ptr.sub.i to i64
  %conv1.i.i = zext i32 %.unpack.i to i64
  %mul.i.i = mul nuw i64 %conv1.i.i, %conv.i.i
  %shr.i.i = lshr i64 %mul.i.i, 32
  %conv2.i.i = trunc i64 %shr.i.i to i32
  %sub.i.i = sub i32 %sub.ptr.sub.i, %conv2.i.i
  %shr4.i.i = lshr i32 %sub.i.i, %R.sroa.2.4.extract.shift.i.i
  %add.i.i = add i32 %shr4.i.i, %conv2.i.i
  %conv5.i.i = and i32 %R.sroa.4.4.extract.shift.i.i, 255
  %shr6.i.i = lshr i32 %add.i.i, %conv5.i.i
  %div3.i = lshr i32 %shr6.i.i, 5
  %arrayidx.i = getelementptr i32, ptr %obj_map, i32 %div3.i
  %18 = load volatile i32, ptr %arrayidx.i, align 4
  %and.i = and i32 %shr6.i.i, 31
  %19 = shl nuw i32 1, %and.i
  %20 = and i32 %19, %18
  %tobool7.not = icmp eq i32 %20, 0
  %conv = select i1 %tobool7.not, i8 -52, i8 -69
  %call8 = tail call fastcc i32 @check_object(ptr noundef %s, ptr noundef %slab, ptr noundef %p.050, i8 noundef zeroext %conv) #25
  %tobool9.not = icmp eq i32 %call8, 0
  br i1 %tobool9.not, label %unlock, label %for.inc

for.inc:                                          ; preds = %for.body
  %21 = load i32, ptr %size, align 4
  %add.ptr13 = getelementptr i8, ptr %p.050, i32 %21
  %bf.load = load i32, ptr %16, align 4
  %bf.lshr = lshr i32 %bf.load, 1
  %bf.clear = and i32 %bf.lshr, 32767
  %mul = mul i32 %bf.clear, %21
  %add.ptr = getelementptr i8, ptr %call.i.i, i32 %mul
  %cmp = icmp ult ptr %add.ptr13, %add.ptr
  br i1 %cmp, label %for.body, label %unlock

unlock:                                           ; preds = %for.inc, %for.body, %fixup_red_left.exit, %lor.lhs.false, %slab_lock.exit
  %22 = load volatile i32, ptr %0, align 4
  %and.i.i.i34 = and i32 %22, 1
  %tobool.not.i.i35 = icmp eq i32 %and.i.i.i34, 0
  br i1 %tobool.not.i.i35, label %do.end8.i.i38, label %if.then.i.i36, !prof !14

if.then.i.i36:                                    ; preds = %unlock
  tail call void @dump_page(ptr noundef %slab, ptr noundef nonnull @.str.29) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22mm/slub.c\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 455, 0\0A.popsection", ""() #24, !srcloc !79
  unreachable

do.end8.i.i38:                                    ; preds = %unlock
  %23 = load volatile i32, ptr %slab, align 4
  %and1.i.i.i.i37 = and i32 %23, 1
  %tobool.not.i.i.i = icmp eq i32 %and1.i.i.i.i37, 0
  br i1 %tobool.not.i.i.i, label %do.body4.i.i.i39, label %slab_unlock.exit, !prof !13

do.body4.i.i.i39:                                 ; preds = %do.end8.i.i38
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/bit_spinlock.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 77, 0\0A.popsection", ""() #24, !srcloc !80
  unreachable

slab_unlock.exit:                                 ; preds = %do.end8.i.i38
  %24 = load volatile i32, ptr %slab, align 4
  %and.i.i.i.i.i40 = and i32 %24, -2
  tail call void asm sideeffect "mcr p15, 0, $0, c7, c10, 5", "r,~{memory}"(i32 0) #24, !srcloc !81
  store volatile i32 %and.i.i.i.i.i40, ptr %slab, align 4
  tail call void asm sideeffect "", "~{memory}"() #24, !srcloc !82
  %25 = tail call i32 @llvm.read_register.i32(metadata !0) #24
  %and.i.i.i.i.i.i41 = and i32 %25, -16384
  %26 = inttoptr i32 %and.i.i.i.i.i.i41 to ptr
  %preempt_count.i.i.i.i.i42 = getelementptr inbounds %struct.thread_info, ptr %26, i32 0, i32 1
  %27 = load volatile i32, ptr %preempt_count.i.i.i.i.i42, align 4
  %sub.i.i.i.i43 = add i32 %27, -1
  store volatile i32 %sub.i.i.i.i43, ptr %preempt_count.i.i.i.i.i42, align 4
  ret void
}

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @slab_unmergeable(ptr noundef) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local void @kobject_init(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local void @sysfs_remove_link(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @kobject_init_and_add(ptr noundef, ptr noundef, ptr noundef, ptr noundef, ...) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @sysfs_create_group(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal void @kmem_cache_release(ptr noundef %k) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %add.ptr = getelementptr i8, ptr %k, i32 -88
  tail call void @slab_kmem_cache_release(ptr noundef %add.ptr) #27
  ret void
}

; Function Attrs: null_pointer_is_valid
declare dso_local void @slab_kmem_cache_release(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @slab_attr_show(ptr noundef %kobj, ptr nocapture noundef readonly %attr, ptr noundef %buf) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %show = getelementptr inbounds %struct.slab_attribute, ptr %attr, i32 0, i32 1
  %0 = load ptr, ptr %show, align 4
  %tobool.not = icmp eq ptr %0, null
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %add.ptr3 = getelementptr i8, ptr %kobj, i32 -88
  %call = tail call i32 %0(ptr noundef %add.ptr3, ptr noundef %buf) #27
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry
  %retval.0 = phi i32 [ %call, %if.end ], [ -5, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @slab_attr_store(ptr noundef %kobj, ptr nocapture noundef readonly %attr, ptr noundef %buf, i32 noundef %len) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %store = getelementptr inbounds %struct.slab_attribute, ptr %attr, i32 0, i32 2
  %0 = load ptr, ptr %store, align 4
  %tobool.not = icmp eq ptr %0, null
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %add.ptr3 = getelementptr i8, ptr %kobj, i32 -88
  %call = tail call i32 %0(ptr noundef %add.ptr3, ptr noundef %buf, i32 noundef %len) #27
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry
  %retval.0 = phi i32 [ %call, %if.end ], [ -5, %entry ]
  ret i32 %retval.0
}

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @sprintf(ptr noundef, ptr noundef, ...) local_unnamed_addr #3

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @slab_size_show(ptr nocapture noundef readonly %s, ptr noundef %buf) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %size = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 3
  %0 = load i32, ptr %size, align 4
  %call = tail call i32 (ptr, ptr, ...) @sysfs_emit(ptr noundef %buf, ptr noundef nonnull @.str.145, i32 noundef %0) #27
  ret i32 %call
}

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @sysfs_emit(ptr noundef, ptr noundef, ...) local_unnamed_addr #3

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @object_size_show(ptr nocapture noundef readonly %s, ptr noundef %buf) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %object_size = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 4
  %0 = load i32, ptr %object_size, align 4
  %call = tail call i32 (ptr, ptr, ...) @sysfs_emit(ptr noundef %buf, ptr noundef nonnull @.str.145, i32 noundef %0) #27
  ret i32 %call
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @objs_per_slab_show(ptr nocapture noundef readonly %s, ptr noundef %buf) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %oo = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 9
  %.unpack = load i32, ptr %oo, align 4
  %and.i = and i32 %.unpack, 65535
  %call1 = tail call i32 (ptr, ptr, ...) @sysfs_emit(ptr noundef %buf, ptr noundef nonnull @.str.145, i32 noundef %and.i) #27
  ret i32 %call1
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @order_show(ptr nocapture noundef readonly %s, ptr noundef %buf) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %oo = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 9
  %.unpack = load i32, ptr %oo, align 4
  %shr.i = lshr i32 %.unpack, 16
  %call1 = tail call i32 (ptr, ptr, ...) @sysfs_emit(ptr noundef %buf, ptr noundef nonnull @.str.145, i32 noundef %shr.i) #27
  ret i32 %call1
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @min_partial_show(ptr nocapture noundef readonly %s, ptr noundef %buf) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %min_partial = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 2
  %0 = load i32, ptr %min_partial, align 4
  %call = tail call i32 (ptr, ptr, ...) @sysfs_emit(ptr noundef %buf, ptr noundef nonnull @.str.150, i32 noundef %0) #27
  ret i32 %call
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @min_partial_store(ptr nocapture noundef writeonly %s, ptr noundef %buf, i32 noundef %length) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %min = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %min) #24
  store i32 -1, ptr %min, align 4, !annotation !11
  %call.i = call i32 @_kstrtoul(ptr noundef %buf, i32 noundef 10, ptr noundef nonnull %min) #27
  %tobool.not = icmp eq i32 %call.i, 0
  br i1 %tobool.not, label %if.end, label %cleanup

if.end:                                           ; preds = %entry
  %0 = load i32, ptr %min, align 4
  %1 = call i32 @llvm.umin.i32(i32 %0, i32 10) #24
  %2 = call i32 @llvm.umax.i32(i32 %1, i32 5) #24
  %min_partial.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 2
  store i32 %2, ptr %min_partial.i, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry
  %retval.0 = phi i32 [ %length, %if.end ], [ %call.i, %entry ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %min) #24
  ret i32 %retval.0
}

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @_kstrtoul(ptr noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @cpu_partial_show(ptr nocapture noundef readonly %s, ptr noundef %buf) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %cpu_partial = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 7
  %0 = load i32, ptr %cpu_partial, align 4
  %call = tail call i32 (ptr, ptr, ...) @sysfs_emit(ptr noundef %buf, ptr noundef nonnull @.str.145, i32 noundef %0) #27
  ret i32 %call
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @cpu_partial_store(ptr noundef %s, ptr noundef %buf, i32 noundef %length) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %objects = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %objects) #24
  store i32 -1, ptr %objects, align 4, !annotation !11
  %call = call i32 @kstrtouint(ptr noundef %buf, i32 noundef 10, ptr noundef nonnull %objects) #27
  %tobool.not = icmp eq i32 %call, 0
  br i1 %tobool.not, label %if.end, label %cleanup

if.end:                                           ; preds = %entry
  %0 = load i32, ptr %objects, align 4
  %tobool1.not = icmp eq i32 %0, 0
  br i1 %tobool1.not, label %if.end4, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end
  callbr void asm sideeffect "1:\0A\09b ${1:l}\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr nonnull @slub_debug_enabled, ptr blockaddress(@cpu_partial_store, %if.then37.i.i.i)) #24
          to label %if.end4 [label %if.then37.i.i.i], !srcloc !10

if.then37.i.i.i:                                  ; preds = %land.lhs.true
  %flags38.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 1
  %1 = load i32, ptr %flags38.i.i.i, align 4
  %and39.i.i.i = and i32 %1, 2166016
  %tobool40.i.i.i = icmp eq i32 %and39.i.i.i, 0
  br i1 %tobool40.i.i.i, label %if.end4, label %cleanup

if.end4:                                          ; preds = %if.then37.i.i.i, %land.lhs.true, %if.end
  %2 = load i32, ptr %objects, align 4
  %cpu_partial.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 7
  store i32 %2, ptr %cpu_partial.i, align 4
  %mul.i = shl i32 %2, 1
  %oo.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 9
  %.unpack.i = load i32, ptr %oo.i, align 4
  %and.i.i = and i32 %.unpack.i, 65535
  %add.i = add i32 %mul.i, -1
  %sub.i = add i32 %add.i, %and.i.i
  %div.i = udiv i32 %sub.i, %and.i.i
  %cpu_partial_slabs.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 8
  store i32 %div.i, ptr %cpu_partial_slabs.i, align 4
  call void @cpus_read_lock() #27
  call fastcc void @flush_all_cpus_locked(ptr noundef %s) #27
  call void @cpus_read_unlock() #27
  br label %cleanup

cleanup:                                          ; preds = %if.end4, %if.then37.i.i.i, %entry
  %retval.0 = phi i32 [ %length, %if.end4 ], [ %call, %entry ], [ -22, %if.then37.i.i.i ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %objects) #24
  ret i32 %retval.0
}

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @kstrtouint(ptr noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @objects_show(ptr nocapture noundef readonly %s, ptr noundef %buf) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %call = tail call fastcc i32 @show_slab_objects(ptr noundef %s, ptr noundef %buf, i32 noundef 9) #25
  ret i32 %call
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc i32 @show_slab_objects(ptr nocapture noundef readonly %s, ptr noundef %buf, i32 noundef %flags) unnamed_addr #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load ptr, ptr getelementptr inbounds ([4 x [14 x ptr]], ptr @kmalloc_caches, i32 0, i32 0, i32 7), align 4
  %call7.i.i.i = tail call noalias align 8 ptr @kmem_cache_alloc_trace(ptr noundef %0, i32 noundef 3520, i32 noundef 4) #33
  %tobool.not = icmp eq ptr %call7.i.i.i, null
  br i1 %tobool.not, label %cleanup205, label %if.end

if.end:                                           ; preds = %entry
  %and = and i32 %flags, 4
  %tobool1.not = icmp eq i32 %and, 0
  br i1 %tobool1.not, label %if.end139, label %for.cond.preheader

for.cond.preheader:                               ; preds = %if.end
  %call3315 = tail call i32 @cpumask_next(i32 noundef -1, ptr noundef nonnull @__cpu_possible_mask) #29
  %1 = load i32, ptr @nr_cpu_ids, align 4
  %cmp316 = icmp ult i32 %call3315, %1
  br i1 %cmp316, label %for.body.lr.ph, label %if.end139

for.body.lr.ph:                                   ; preds = %for.cond.preheader
  %and15 = and i32 %flags, 16
  %tobool16.not = icmp eq i32 %and15, 0
  %and18 = and i32 %flags, 8
  %tobool19.not = icmp eq i32 %and18, 0
  br label %for.body

for.body:                                         ; preds = %cleanup, %for.body.lr.ph
  %2 = phi i32 [ %1, %for.body.lr.ph ], [ %15, %cleanup ]
  %call3318 = phi i32 [ %call3315, %for.body.lr.ph ], [ %call3, %cleanup ]
  %total.0317 = phi i32 [ 0, %for.body.lr.ph ], [ %total.2, %cleanup ]
  %3 = load ptr, ptr %s, align 4
  %4 = ptrtoint ptr %3 to i32
  %arrayidx = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %call3318
  %5 = load i32, ptr %arrayidx, align 4
  %add = add i32 %5, %4
  %6 = inttoptr i32 %add to ptr
  %slab10 = getelementptr inbounds %struct.kmem_cache_cpu, ptr %6, i32 0, i32 2
  %7 = load volatile ptr, ptr %slab10, align 4
  %tobool11.not = icmp eq ptr %7, null
  br i1 %tobool11.not, label %cleanup, label %if.end13

if.end13:                                         ; preds = %for.body
  %8 = load volatile i32, ptr %7, align 4
  %cmp.i.not.i.i.i = icmp eq i32 %8, -1
  br i1 %cmp.i.not.i.i.i, label %if.then.i.i.i, label %slab_nid.exit, !prof !13

if.then.i.i.i:                                    ; preds = %if.end13
  tail call void @dump_page(ptr noundef nonnull %7, ptr noundef nonnull @.str.88) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/mm.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 1368, 0\0A.popsection", ""() #24, !srcloc !37
  unreachable

slab_nid.exit:                                    ; preds = %if.end13
  br i1 %tobool16.not, label %if.else, label %if.then17

if.then17:                                        ; preds = %slab_nid.exit
  %9 = getelementptr inbounds %struct.slab, ptr %7, i32 0, i32 4
  %bf.load = load i32, ptr %9, align 4
  %bf.lshr = lshr i32 %bf.load, 1
  %bf.clear = and i32 %bf.lshr, 32767
  br label %if.end25

if.else:                                          ; preds = %slab_nid.exit
  br i1 %tobool19.not, label %if.end25, label %if.then20

if.then20:                                        ; preds = %if.else
  %10 = getelementptr inbounds %struct.slab, ptr %7, i32 0, i32 4
  %bf.load21 = load i32, ptr %10, align 4
  %bf.lshr22 = lshr i32 %bf.load21, 16
  br label %if.end25

if.end25:                                         ; preds = %if.then20, %if.else, %if.then17
  %x.0 = phi i32 [ %bf.clear, %if.then17 ], [ %bf.lshr22, %if.then20 ], [ 1, %if.else ]
  %add26 = add i32 %x.0, %total.0317
  %11 = load i32, ptr %call7.i.i.i, align 8
  %add28 = add i32 %11, %x.0
  store i32 %add28, ptr %call7.i.i.i, align 8
  %partial = getelementptr inbounds %struct.kmem_cache_cpu, ptr %6, i32 0, i32 3
  %12 = load volatile ptr, ptr %partial, align 4
  %tobool33.not = icmp eq ptr %12, null
  br i1 %tobool33.not, label %cleanup, label %if.then34

if.then34:                                        ; preds = %if.end25
  %13 = load volatile i32, ptr %12, align 4
  %cmp.i.not.i.i.i273 = icmp eq i32 %13, -1
  br i1 %cmp.i.not.i.i.i273, label %if.then.i.i.i274, label %slab_nid.exit275, !prof !13

if.then.i.i.i274:                                 ; preds = %if.then34
  tail call void @dump_page(ptr noundef nonnull %12, ptr noundef nonnull @.str.88) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/mm.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 1368, 0\0A.popsection", ""() #24, !srcloc !37
  unreachable

slab_nid.exit275:                                 ; preds = %if.then34
  br i1 %tobool16.not, label %if.else78, label %if.then38

if.then38:                                        ; preds = %slab_nid.exit275
  %.b272 = load i1, ptr @show_slab_objects.__already_done, align 1
  br i1 %.b272, label %if.end132, label %if.then44, !prof !14

if.then44:                                        ; preds = %if.then38
  store i1 true, ptr @show_slab_objects.__already_done, align 1
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.2, i32 noundef 5266, i32 noundef 9, ptr noundef null) #27
  br label %if.end132

if.else78:                                        ; preds = %slab_nid.exit275
  br i1 %tobool19.not, label %if.else130, label %if.then81

if.then81:                                        ; preds = %if.else78
  %.b270271 = load i1, ptr @show_slab_objects.__already_done.153, align 1
  br i1 %.b270271, label %if.end132, label %if.then95, !prof !14

if.then95:                                        ; preds = %if.then81
  store i1 true, ptr @show_slab_objects.__already_done.153, align 1
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.2, i32 noundef 5268, i32 noundef 9, ptr noundef null) #27
  br label %if.end132

if.else130:                                       ; preds = %if.else78
  %slabs = getelementptr inbounds %struct.slab, ptr %12, i32 0, i32 1, i32 0, i32 1
  %14 = load i32, ptr %slabs, align 4
  br label %if.end132

if.end132:                                        ; preds = %if.else130, %if.then95, %if.then81, %if.then44, %if.then38
  %x.1 = phi i32 [ %14, %if.else130 ], [ %x.0, %if.then44 ], [ %x.0, %if.then38 ], [ %x.0, %if.then95 ], [ %x.0, %if.then81 ]
  %add133 = add i32 %x.1, %add26
  %add135 = add i32 %add28, %x.1
  store i32 %add135, ptr %call7.i.i.i, align 8
  %.pre = load i32, ptr @nr_cpu_ids, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end132, %if.end25, %for.body
  %15 = phi i32 [ %2, %for.body ], [ %.pre, %if.end132 ], [ %2, %if.end25 ]
  %total.2 = phi i32 [ %total.0317, %for.body ], [ %add133, %if.end132 ], [ %add26, %if.end25 ]
  %call3 = tail call i32 @cpumask_next(i32 noundef %call3318, ptr noundef nonnull @__cpu_possible_mask) #29
  %cmp = icmp ult i32 %call3, %15
  br i1 %cmp, label %for.body, label %if.end139

if.end139:                                        ; preds = %cleanup, %for.cond.preheader, %if.end
  %total.3 = phi i32 [ 0, %if.end ], [ 0, %for.cond.preheader ], [ %total.2, %cleanup ]
  %and140 = and i32 %flags, 1
  %tobool141.not = icmp eq i32 %and140, 0
  br i1 %tobool141.not, label %if.else169, label %for.cond143.preheader

for.cond143.preheader:                            ; preds = %if.end139
  %arrayidx.i = getelementptr %struct.kmem_cache, ptr %s, i32 0, i32 26, i32 0
  %and154 = and i32 %flags, 8
  %tobool155.not = icmp eq i32 %and154, 0
  %16 = load ptr, ptr %arrayidx.i, align 4
  %tobool147.not = icmp eq ptr %16, null
  br i1 %tobool147.not, label %if.end200, label %if.then148

if.then148:                                       ; preds = %for.cond143.preheader
  %and149 = and i32 %flags, 16
  %tobool150.not = icmp eq i32 %and149, 0
  br i1 %tobool150.not, label %if.else153, label %if.then151

if.then151:                                       ; preds = %if.then148
  %total_objects = getelementptr inbounds %struct.kmem_cache_node, ptr %16, i32 0, i32 4
  %17 = load volatile i32, ptr %total_objects, align 4
  br label %if.end200.sink.split

if.else153:                                       ; preds = %if.then148
  br i1 %tobool155.not, label %if.else160, label %if.then156

if.then156:                                       ; preds = %if.else153
  %total_objects157 = getelementptr inbounds %struct.kmem_cache_node, ptr %16, i32 0, i32 4
  %18 = load volatile i32, ptr %total_objects157, align 4
  %call2.i = tail call i32 @_raw_spin_lock_irqsave(ptr noundef nonnull %16) #27
  %partial.i = getelementptr inbounds %struct.kmem_cache_node, ptr %16, i32 0, i32 2
  %.pn21.i = load ptr, ptr %partial.i, align 4
  %cmp7.not22.i = icmp eq ptr %.pn21.i, %partial.i
  br i1 %cmp7.not22.i, label %count_partial.exit, label %for.body.i

for.body.i:                                       ; preds = %for.body.i, %if.then156
  %.pn24.i = phi ptr [ %.pn.i, %for.body.i ], [ %.pn21.i, %if.then156 ]
  %x.023.i = phi i32 [ %add.i, %for.body.i ], [ 0, %if.then156 ]
  %19 = getelementptr i8, ptr %.pn24.i, i32 16
  %bf.load.i = load i32, ptr %19, align 4
  %bf.lshr.i = lshr i32 %bf.load.i, 1
  %bf.clear.i = and i32 %bf.lshr.i, 32767
  %bf.lshr2.i = lshr i32 %bf.load.i, 16
  %sub.i = sub nsw i32 %bf.clear.i, %bf.lshr2.i
  %add.i = add i32 %sub.i, %x.023.i
  %.pn.i = load ptr, ptr %.pn24.i, align 4
  %cmp7.not.i = icmp eq ptr %.pn.i, %partial.i
  br i1 %cmp7.not.i, label %count_partial.exit, label %for.body.i

count_partial.exit:                               ; preds = %for.body.i, %if.then156
  %x.0.lcssa.i = phi i32 [ 0, %if.then156 ], [ %add.i, %for.body.i ]
  tail call void @_raw_spin_unlock_irqrestore(ptr noundef nonnull %16, i32 noundef %call2.i) #27
  %sub = sub i32 %18, %x.0.lcssa.i
  br label %if.end200.sink.split

if.else160:                                       ; preds = %if.else153
  %nr_slabs = getelementptr inbounds %struct.kmem_cache_node, ptr %16, i32 0, i32 3
  %20 = load volatile i32, ptr %nr_slabs, align 4
  br label %if.end200.sink.split

if.else169:                                       ; preds = %if.end139
  %and170 = and i32 %flags, 2
  %tobool171.not = icmp eq i32 %and170, 0
  br i1 %tobool171.not, label %if.end200, label %for.cond174.preheader

for.cond174.preheader:                            ; preds = %if.else169
  %arrayidx.i276 = getelementptr %struct.kmem_cache, ptr %s, i32 0, i32 26, i32 0
  %and185 = and i32 %flags, 8
  %tobool186.not = icmp eq i32 %and185, 0
  %21 = load ptr, ptr %arrayidx.i276, align 4
  %tobool178.not = icmp eq ptr %21, null
  br i1 %tobool178.not, label %if.end200, label %if.then179

if.then179:                                       ; preds = %for.cond174.preheader
  %and180 = and i32 %flags, 16
  %tobool181.not = icmp eq i32 %and180, 0
  br i1 %tobool181.not, label %if.else184, label %if.then182

if.then182:                                       ; preds = %if.then179
  %call2.i277 = tail call i32 @_raw_spin_lock_irqsave(ptr noundef nonnull %21) #27
  %partial.i278 = getelementptr inbounds %struct.kmem_cache_node, ptr %21, i32 0, i32 2
  %.pn21.i279 = load ptr, ptr %partial.i278, align 4
  %cmp7.not22.i280 = icmp eq ptr %.pn21.i279, %partial.i278
  br i1 %cmp7.not22.i280, label %count_partial.exit290, label %for.body.i288

for.body.i288:                                    ; preds = %for.body.i288, %if.then182
  %.pn24.i281 = phi ptr [ %.pn.i286, %for.body.i288 ], [ %.pn21.i279, %if.then182 ]
  %x.023.i282 = phi i32 [ %add.i285, %for.body.i288 ], [ 0, %if.then182 ]
  %22 = getelementptr i8, ptr %.pn24.i281, i32 16
  %bf.load.i305 = load i32, ptr %22, align 4
  %bf.lshr.i306 = lshr i32 %bf.load.i305, 1
  %bf.clear.i307 = and i32 %bf.lshr.i306, 32767
  %add.i285 = add i32 %bf.clear.i307, %x.023.i282
  %.pn.i286 = load ptr, ptr %.pn24.i281, align 4
  %cmp7.not.i287 = icmp eq ptr %.pn.i286, %partial.i278
  br i1 %cmp7.not.i287, label %count_partial.exit290, label %for.body.i288

count_partial.exit290:                            ; preds = %for.body.i288, %if.then182
  %x.0.lcssa.i289 = phi i32 [ 0, %if.then182 ], [ %add.i285, %for.body.i288 ]
  tail call void @_raw_spin_unlock_irqrestore(ptr noundef nonnull %21, i32 noundef %call2.i277) #27
  br label %if.end200.sink.split

if.else184:                                       ; preds = %if.then179
  br i1 %tobool186.not, label %if.else189, label %if.then187

if.then187:                                       ; preds = %if.else184
  %call2.i291 = tail call i32 @_raw_spin_lock_irqsave(ptr noundef nonnull %21) #27
  %partial.i292 = getelementptr inbounds %struct.kmem_cache_node, ptr %21, i32 0, i32 2
  %.pn21.i293 = load ptr, ptr %partial.i292, align 4
  %cmp7.not22.i294 = icmp eq ptr %.pn21.i293, %partial.i292
  br i1 %cmp7.not22.i294, label %count_partial.exit304, label %for.body.i302

for.body.i302:                                    ; preds = %for.body.i302, %if.then187
  %.pn24.i295 = phi ptr [ %.pn.i300, %for.body.i302 ], [ %.pn21.i293, %if.then187 ]
  %x.023.i296 = phi i32 [ %add.i299, %for.body.i302 ], [ 0, %if.then187 ]
  %23 = getelementptr i8, ptr %.pn24.i295, i32 16
  %bf.load.i308 = load i32, ptr %23, align 4
  %bf.lshr.i309 = lshr i32 %bf.load.i308, 16
  %add.i299 = add i32 %bf.lshr.i309, %x.023.i296
  %.pn.i300 = load ptr, ptr %.pn24.i295, align 4
  %cmp7.not.i301 = icmp eq ptr %.pn.i300, %partial.i292
  br i1 %cmp7.not.i301, label %count_partial.exit304, label %for.body.i302

count_partial.exit304:                            ; preds = %for.body.i302, %if.then187
  %x.0.lcssa.i303 = phi i32 [ 0, %if.then187 ], [ %add.i299, %for.body.i302 ]
  tail call void @_raw_spin_unlock_irqrestore(ptr noundef nonnull %21, i32 noundef %call2.i291) #27
  br label %if.end200.sink.split

if.else189:                                       ; preds = %if.else184
  %nr_partial = getelementptr inbounds %struct.kmem_cache_node, ptr %21, i32 0, i32 1
  %24 = load i32, ptr %nr_partial, align 4
  br label %if.end200.sink.split

if.end200.sink.split:                             ; preds = %if.else189, %count_partial.exit304, %count_partial.exit290, %if.else160, %count_partial.exit, %if.then151
  %x.2.sink327 = phi i32 [ %17, %if.then151 ], [ %sub, %count_partial.exit ], [ %20, %if.else160 ], [ %x.0.lcssa.i289, %count_partial.exit290 ], [ %x.0.lcssa.i303, %count_partial.exit304 ], [ %24, %if.else189 ]
  %add164 = add i32 %x.2.sink327, %total.3
  %25 = load i32, ptr %call7.i.i.i, align 8
  %add166 = add i32 %25, %x.2.sink327
  store i32 %add166, ptr %call7.i.i.i, align 8
  br label %if.end200

if.end200:                                        ; preds = %if.end200.sink.split, %for.cond174.preheader, %if.else169, %for.cond143.preheader
  %total.8 = phi i32 [ %total.3, %if.else169 ], [ %total.3, %for.cond174.preheader ], [ %total.3, %for.cond143.preheader ], [ %add164, %if.end200.sink.split ]
  %call201 = tail call i32 (ptr, i32, ptr, ...) @sysfs_emit_at(ptr noundef %buf, i32 noundef 0, ptr noundef nonnull @.str.154, i32 noundef %total.8) #27
  %call203 = tail call i32 (ptr, i32, ptr, ...) @sysfs_emit_at(ptr noundef %buf, i32 noundef %call201, ptr noundef nonnull @.str.155) #27
  %add204 = add i32 %call203, %call201
  tail call void @kfree(ptr noundef nonnull %call7.i.i.i) #25
  br label %cleanup205

cleanup205:                                       ; preds = %if.end200, %entry
  %retval.0 = phi i32 [ %add204, %if.end200 ], [ -12, %entry ]
  ret i32 %retval.0
}

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @sysfs_emit_at(ptr noundef, i32 noundef, ptr noundef, ...) local_unnamed_addr #3

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare { i32, i1 } @llvm.umul.with.overflow.i32(i32, i32) #14

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @objects_partial_show(ptr nocapture noundef readonly %s, ptr noundef %buf) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %call = tail call fastcc i32 @show_slab_objects(ptr noundef %s, ptr noundef %buf, i32 noundef 10) #25
  ret i32 %call
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @partial_show(ptr nocapture noundef readonly %s, ptr noundef %buf) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load ptr, ptr getelementptr inbounds ([4 x [14 x ptr]], ptr @kmalloc_caches, i32 0, i32 0, i32 7), align 4
  %call7.i.i.i.i = tail call noalias align 8 ptr @kmem_cache_alloc_trace(ptr noundef %0, i32 noundef 3520, i32 noundef 4) #33
  %tobool.not.i = icmp eq ptr %call7.i.i.i.i, null
  br i1 %tobool.not.i, label %show_slab_objects.exit, label %if.end.i

if.end.i:                                         ; preds = %entry
  %arrayidx.i276.i = getelementptr %struct.kmem_cache, ptr %s, i32 0, i32 26, i32 0
  %1 = load ptr, ptr %arrayidx.i276.i, align 4
  %tobool178.not.i = icmp eq ptr %1, null
  br i1 %tobool178.not.i, label %if.end200.i, label %if.then179.i

if.then179.i:                                     ; preds = %if.end.i
  %nr_partial.i = getelementptr inbounds %struct.kmem_cache_node, ptr %1, i32 0, i32 1
  %2 = load i32, ptr %nr_partial.i, align 4
  %3 = load i32, ptr %call7.i.i.i.i, align 8
  %add166.i = add i32 %3, %2
  store i32 %add166.i, ptr %call7.i.i.i.i, align 8
  br label %if.end200.i

if.end200.i:                                      ; preds = %if.then179.i, %if.end.i
  %total.8.i = phi i32 [ 0, %if.end.i ], [ %2, %if.then179.i ]
  %call201.i = tail call i32 (ptr, i32, ptr, ...) @sysfs_emit_at(ptr noundef %buf, i32 noundef 0, ptr noundef nonnull @.str.154, i32 noundef %total.8.i) #27
  %call203.i = tail call i32 (ptr, i32, ptr, ...) @sysfs_emit_at(ptr noundef %buf, i32 noundef %call201.i, ptr noundef nonnull @.str.155) #27
  %add204.i = add i32 %call203.i, %call201.i
  tail call void @kfree(ptr noundef nonnull %call7.i.i.i.i) #27
  br label %show_slab_objects.exit

show_slab_objects.exit:                           ; preds = %if.end200.i, %entry
  %retval.0.i = phi i32 [ %add204.i, %if.end200.i ], [ -12, %entry ]
  ret i32 %retval.0.i
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @cpu_slabs_show(ptr nocapture noundef readonly %s, ptr noundef %buf) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %call = tail call fastcc i32 @show_slab_objects(ptr noundef %s, ptr noundef %buf, i32 noundef 4) #25
  ret i32 %call
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @ctor_show(ptr nocapture noundef readonly %s, ptr noundef %buf) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %ctor = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 14
  %0 = load ptr, ptr %ctor, align 4
  %tobool.not = icmp eq ptr %0, null
  br i1 %tobool.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  %call = tail call i32 (ptr, ptr, ...) @sysfs_emit(ptr noundef %buf, ptr noundef nonnull @.str.160, ptr noundef nonnull %0) #27
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ %call, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @aliases_show(ptr nocapture noundef readonly %s, ptr noundef %buf) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %refcount = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 13
  %0 = load i32, ptr %refcount, align 4
  %cmp = icmp slt i32 %0, 0
  %sub = add i32 %0, -1
  %spec.select = select i1 %cmp, i32 0, i32 %sub
  %call = tail call i32 (ptr, ptr, ...) @sysfs_emit(ptr noundef %buf, ptr noundef nonnull @.str.162, i32 noundef %spec.select) #27
  ret i32 %call
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @align_show(ptr nocapture noundef readonly %s, ptr noundef %buf) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %align = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 16
  %0 = load i32, ptr %align, align 4
  %call = tail call i32 (ptr, ptr, ...) @sysfs_emit(ptr noundef %buf, ptr noundef nonnull @.str.145, i32 noundef %0) #27
  ret i32 %call
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @hwcache_align_show(ptr nocapture noundef readonly %s, ptr noundef %buf) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %flags = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 1
  %0 = load i32, ptr %flags, align 4
  %and = lshr i32 %0, 13
  %and.lobit = and i32 %and, 1
  %call = tail call i32 (ptr, ptr, ...) @sysfs_emit(ptr noundef %buf, ptr noundef nonnull @.str.162, i32 noundef %and.lobit) #27
  ret i32 %call
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @reclaim_account_show(ptr nocapture noundef readonly %s, ptr noundef %buf) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %flags = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 1
  %0 = load i32, ptr %flags, align 4
  %and = lshr i32 %0, 17
  %and.lobit = and i32 %and, 1
  %call = tail call i32 (ptr, ptr, ...) @sysfs_emit(ptr noundef %buf, ptr noundef nonnull @.str.162, i32 noundef %and.lobit) #27
  ret i32 %call
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @destroy_by_rcu_show(ptr nocapture noundef readonly %s, ptr noundef %buf) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %flags = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 1
  %0 = load i32, ptr %flags, align 4
  %and = lshr i32 %0, 19
  %and.lobit = and i32 %and, 1
  %call = tail call i32 (ptr, ptr, ...) @sysfs_emit(ptr noundef %buf, ptr noundef nonnull @.str.162, i32 noundef %and.lobit) #27
  ret i32 %call
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind null_pointer_is_valid readnone sspstrong willreturn uwtable(sync)
define internal i32 @shrink_show(ptr nocapture noundef readnone %s, ptr nocapture noundef readnone %buf) #13 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  ret i32 0
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @shrink_store(ptr noundef %s, ptr nocapture noundef readonly %buf, i32 noundef %length) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load i8, ptr %buf, align 1
  %cmp = icmp eq i8 %0, 49
  br i1 %cmp, label %if.then, label %return

if.then:                                          ; preds = %entry
  %call = tail call i32 @kmem_cache_shrink(ptr noundef %s) #27
  br label %return

return:                                           ; preds = %if.then, %entry
  %retval.0 = phi i32 [ %length, %if.then ], [ -22, %entry ]
  ret i32 %retval.0
}

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @kmem_cache_shrink(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @slabs_cpu_partial_show(ptr nocapture noundef readonly %s, ptr noundef %buf) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load i32, ptr @nr_cpu_ids, align 4
  %call70 = tail call i32 @cpumask_next(i32 noundef -1, ptr noundef nonnull @__cpu_online_mask) #29
  %cmp71 = icmp ult i32 %call70, %0
  br i1 %cmp71, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %entry
  %1 = load ptr, ptr %s, align 4
  %2 = ptrtoint ptr %1 to i32
  br label %for.body

for.body:                                         ; preds = %if.end, %for.body.lr.ph
  %call73 = phi i32 [ %call70, %for.body.lr.ph ], [ %call, %if.end ]
  %slabs.072 = phi i32 [ 0, %for.body.lr.ph ], [ %slabs.1, %if.end ]
  %arrayidx = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %call73
  %3 = load i32, ptr %arrayidx, align 4
  %add = add i32 %3, %2
  %4 = inttoptr i32 %add to ptr
  %partial = getelementptr inbounds %struct.kmem_cache_cpu, ptr %4, i32 0, i32 3
  %5 = load ptr, ptr %partial, align 4
  %tobool.not = icmp eq ptr %5, null
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  %slabs2 = getelementptr inbounds %struct.slab, ptr %5, i32 0, i32 1, i32 0, i32 1
  %6 = load i32, ptr %slabs2, align 4
  %add3 = add i32 %6, %slabs.072
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %slabs.1 = phi i32 [ %add3, %if.then ], [ %slabs.072, %for.body ]
  %call = tail call i32 @cpumask_next(i32 noundef %call73, ptr noundef nonnull @__cpu_online_mask) #29
  %cmp = icmp ult i32 %call, %0
  br i1 %cmp, label %for.body, label %for.end

for.end:                                          ; preds = %if.end, %entry
  %slabs.0.lcssa = phi i32 [ 0, %entry ], [ %slabs.1, %if.end ]
  %oo = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 9
  %.unpack = load i32, ptr %oo, align 4
  %and.i = and i32 %.unpack, 65535
  %mul = mul i32 %and.i, %slabs.0.lcssa
  %div66 = lshr i32 %mul, 1
  %call5 = tail call i32 (ptr, i32, ptr, ...) @sysfs_emit_at(ptr noundef %buf, i32 noundef 0, ptr noundef nonnull @.str.169, i32 noundef %div66, i32 noundef %slabs.0.lcssa) #27
  %call874 = tail call i32 @cpumask_next(i32 noundef -1, ptr noundef nonnull @__cpu_online_mask) #29
  %7 = load i32, ptr @nr_cpu_ids, align 4
  %cmp975 = icmp ult i32 %call874, %7
  br i1 %cmp975, label %for.body10, label %for.end38

for.body10:                                       ; preds = %if.end37, %for.end
  %8 = phi i32 [ %15, %if.end37 ], [ %7, %for.end ]
  %call877 = phi i32 [ %call8, %if.end37 ], [ %call874, %for.end ]
  %len.076 = phi i32 [ %len.1, %if.end37 ], [ %call5, %for.end ]
  %9 = load ptr, ptr %s, align 4
  %10 = ptrtoint ptr %9 to i32
  %arrayidx20 = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %call877
  %11 = load i32, ptr %arrayidx20, align 4
  %add21 = add i32 %11, %10
  %12 = inttoptr i32 %add21 to ptr
  %partial22 = getelementptr inbounds %struct.kmem_cache_cpu, ptr %12, i32 0, i32 3
  %13 = load ptr, ptr %partial22, align 4
  %tobool23.not = icmp eq ptr %13, null
  br i1 %tobool23.not, label %if.end37, label %do.end27

do.end27:                                         ; preds = %for.body10
  %slabs29 = getelementptr inbounds %struct.slab, ptr %13, i32 0, i32 1, i32 0, i32 1
  %14 = load volatile i32, ptr %slabs29, align 4
  %.unpack67 = load i32, ptr %oo, align 4
  %and.i69 = and i32 %.unpack67, 65535
  %mul33 = mul i32 %and.i69, %14
  %div3468 = lshr i32 %mul33, 1
  %call35 = tail call i32 (ptr, i32, ptr, ...) @sysfs_emit_at(ptr noundef %buf, i32 noundef %len.076, ptr noundef nonnull @.str.170, i32 noundef %call877, i32 noundef %div3468, i32 noundef %14) #27
  %add36 = add i32 %call35, %len.076
  %.pre = load i32, ptr @nr_cpu_ids, align 4
  br label %if.end37

if.end37:                                         ; preds = %do.end27, %for.body10
  %15 = phi i32 [ %.pre, %do.end27 ], [ %8, %for.body10 ]
  %len.1 = phi i32 [ %add36, %do.end27 ], [ %len.076, %for.body10 ]
  %call8 = tail call i32 @cpumask_next(i32 noundef %call877, ptr noundef nonnull @__cpu_online_mask) #29
  %cmp9 = icmp ult i32 %call8, %15
  br i1 %cmp9, label %for.body10, label %for.end38

for.end38:                                        ; preds = %if.end37, %for.end
  %len.0.lcssa = phi i32 [ %call5, %for.end ], [ %len.1, %if.end37 ]
  %call39 = tail call i32 (ptr, i32, ptr, ...) @sysfs_emit_at(ptr noundef %buf, i32 noundef %len.0.lcssa, ptr noundef nonnull @.str.155) #27
  %add40 = add i32 %call39, %len.0.lcssa
  ret i32 %add40
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @total_objects_show(ptr nocapture noundef readonly %s, ptr noundef %buf) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load ptr, ptr getelementptr inbounds ([4 x [14 x ptr]], ptr @kmalloc_caches, i32 0, i32 0, i32 7), align 4
  %call7.i.i.i.i = tail call noalias align 8 ptr @kmem_cache_alloc_trace(ptr noundef %0, i32 noundef 3520, i32 noundef 4) #33
  %tobool.not.i = icmp eq ptr %call7.i.i.i.i, null
  br i1 %tobool.not.i, label %show_slab_objects.exit, label %if.end.i

if.end.i:                                         ; preds = %entry
  %arrayidx.i.i = getelementptr %struct.kmem_cache, ptr %s, i32 0, i32 26, i32 0
  %1 = load ptr, ptr %arrayidx.i.i, align 4
  %tobool147.not.i = icmp eq ptr %1, null
  br i1 %tobool147.not.i, label %if.end200.i, label %if.then148.i

if.then148.i:                                     ; preds = %if.end.i
  %total_objects.i = getelementptr inbounds %struct.kmem_cache_node, ptr %1, i32 0, i32 4
  %2 = load volatile i32, ptr %total_objects.i, align 4
  %3 = load i32, ptr %call7.i.i.i.i, align 8
  %add166.i = add i32 %3, %2
  store i32 %add166.i, ptr %call7.i.i.i.i, align 8
  br label %if.end200.i

if.end200.i:                                      ; preds = %if.then148.i, %if.end.i
  %total.8.i = phi i32 [ 0, %if.end.i ], [ %2, %if.then148.i ]
  %call201.i = tail call i32 (ptr, i32, ptr, ...) @sysfs_emit_at(ptr noundef %buf, i32 noundef 0, ptr noundef nonnull @.str.154, i32 noundef %total.8.i) #27
  %call203.i = tail call i32 (ptr, i32, ptr, ...) @sysfs_emit_at(ptr noundef %buf, i32 noundef %call201.i, ptr noundef nonnull @.str.155) #27
  %add204.i = add i32 %call203.i, %call201.i
  tail call void @kfree(ptr noundef nonnull %call7.i.i.i.i) #27
  br label %show_slab_objects.exit

show_slab_objects.exit:                           ; preds = %if.end200.i, %entry
  %retval.0.i = phi i32 [ %add204.i, %if.end200.i ], [ -12, %entry ]
  ret i32 %retval.0.i
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @slabs_show(ptr nocapture noundef readonly %s, ptr noundef %buf) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load ptr, ptr getelementptr inbounds ([4 x [14 x ptr]], ptr @kmalloc_caches, i32 0, i32 0, i32 7), align 4
  %call7.i.i.i.i = tail call noalias align 8 ptr @kmem_cache_alloc_trace(ptr noundef %0, i32 noundef 3520, i32 noundef 4) #33
  %tobool.not.i = icmp eq ptr %call7.i.i.i.i, null
  br i1 %tobool.not.i, label %show_slab_objects.exit, label %if.end.i

if.end.i:                                         ; preds = %entry
  %arrayidx.i.i = getelementptr %struct.kmem_cache, ptr %s, i32 0, i32 26, i32 0
  %1 = load ptr, ptr %arrayidx.i.i, align 4
  %tobool147.not.i = icmp eq ptr %1, null
  br i1 %tobool147.not.i, label %if.end200.i, label %if.then148.i

if.then148.i:                                     ; preds = %if.end.i
  %nr_slabs.i = getelementptr inbounds %struct.kmem_cache_node, ptr %1, i32 0, i32 3
  %2 = load volatile i32, ptr %nr_slabs.i, align 4
  %3 = load i32, ptr %call7.i.i.i.i, align 8
  %add166.i = add i32 %3, %2
  store i32 %add166.i, ptr %call7.i.i.i.i, align 8
  br label %if.end200.i

if.end200.i:                                      ; preds = %if.then148.i, %if.end.i
  %total.8.i = phi i32 [ 0, %if.end.i ], [ %2, %if.then148.i ]
  %call201.i = tail call i32 (ptr, i32, ptr, ...) @sysfs_emit_at(ptr noundef %buf, i32 noundef 0, ptr noundef nonnull @.str.154, i32 noundef %total.8.i) #27
  %call203.i = tail call i32 (ptr, i32, ptr, ...) @sysfs_emit_at(ptr noundef %buf, i32 noundef %call201.i, ptr noundef nonnull @.str.155) #27
  %add204.i = add i32 %call203.i, %call201.i
  tail call void @kfree(ptr noundef nonnull %call7.i.i.i.i) #27
  br label %show_slab_objects.exit

show_slab_objects.exit:                           ; preds = %if.end200.i, %entry
  %retval.0.i = phi i32 [ %add204.i, %if.end200.i ], [ -12, %entry ]
  ret i32 %retval.0.i
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @sanity_checks_show(ptr nocapture noundef readonly %s, ptr noundef %buf) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %flags = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 1
  %0 = load i32, ptr %flags, align 4
  %and = lshr i32 %0, 8
  %and.lobit = and i32 %and, 1
  %call = tail call i32 (ptr, ptr, ...) @sysfs_emit(ptr noundef %buf, ptr noundef nonnull @.str.162, i32 noundef %and.lobit) #27
  ret i32 %call
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @trace_show(ptr nocapture noundef readonly %s, ptr noundef %buf) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %flags = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 1
  %0 = load i32, ptr %flags, align 4
  %and = lshr i32 %0, 21
  %and.lobit = and i32 %and, 1
  %call = tail call i32 (ptr, ptr, ...) @sysfs_emit(ptr noundef %buf, ptr noundef nonnull @.str.162, i32 noundef %and.lobit) #27
  ret i32 %call
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @red_zone_show(ptr nocapture noundef readonly %s, ptr noundef %buf) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %flags = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 1
  %0 = load i32, ptr %flags, align 4
  %and = lshr i32 %0, 10
  %and.lobit = and i32 %and, 1
  %call = tail call i32 (ptr, ptr, ...) @sysfs_emit(ptr noundef %buf, ptr noundef nonnull @.str.162, i32 noundef %and.lobit) #27
  ret i32 %call
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @poison_show(ptr nocapture noundef readonly %s, ptr noundef %buf) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %flags = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 1
  %0 = load i32, ptr %flags, align 4
  %and = lshr i32 %0, 11
  %and.lobit = and i32 %and, 1
  %call = tail call i32 (ptr, ptr, ...) @sysfs_emit(ptr noundef %buf, ptr noundef nonnull @.str.162, i32 noundef %and.lobit) #27
  ret i32 %call
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @store_user_show(ptr nocapture noundef readonly %s, ptr noundef %buf) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %flags = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 1
  %0 = load i32, ptr %flags, align 4
  %and = lshr i32 %0, 16
  %and.lobit = and i32 %and, 1
  %call = tail call i32 (ptr, ptr, ...) @sysfs_emit(ptr noundef %buf, ptr noundef nonnull @.str.162, i32 noundef %and.lobit) #27
  ret i32 %call
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind null_pointer_is_valid readnone sspstrong willreturn uwtable(sync)
define internal i32 @validate_show(ptr nocapture noundef readnone %s, ptr nocapture noundef readnone %buf) #13 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  ret i32 0
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @validate_store(ptr noundef %s, ptr nocapture noundef readonly %buf, i32 noundef %length) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load i8, ptr %buf, align 1
  %cmp = icmp eq i8 %0, 49
  br i1 %cmp, label %if.then, label %if.end5

if.then:                                          ; preds = %entry
  %call = tail call i32 @validate_slab_cache(ptr noundef %s) #25
  %cmp27 = icmp slt i32 %call, 0
  %spec.select = select i1 %cmp27, i32 %call, i32 %length
  br label %if.end5

if.end5:                                          ; preds = %if.then, %entry
  %ret.0 = phi i32 [ -22, %entry ], [ %spec.select, %if.then ]
  ret i32 %ret.0
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @cache_dma_show(ptr nocapture noundef readonly %s, ptr noundef %buf) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %flags = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 1
  %0 = load i32, ptr %flags, align 4
  %and = lshr i32 %0, 14
  %and.lobit = and i32 %and, 1
  %call = tail call i32 (ptr, ptr, ...) @sysfs_emit(ptr noundef %buf, ptr noundef nonnull @.str.162, i32 noundef %and.lobit) #27
  ret i32 %call
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @alloc_fastpath_show(ptr nocapture noundef readonly %s, ptr noundef %buf) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %call = tail call fastcc i32 @show_stat(ptr noundef %s, ptr noundef %buf, i32 noundef 0) #25
  ret i32 %call
}

; Function Attrs: nofree nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @alloc_fastpath_store(ptr nocapture noundef readonly %s, ptr nocapture noundef readonly %buf, i32 noundef %length) #22 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load i8, ptr %buf, align 1
  %cmp.not = icmp eq i8 %0, 48
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %call5.i = tail call i32 @cpumask_next(i32 noundef -1, ptr noundef nonnull @__cpu_online_mask) #29
  %1 = load i32, ptr @nr_cpu_ids, align 4
  %cmp6.i = icmp ult i32 %call5.i, %1
  br i1 %cmp6.i, label %do.body.i, label %return

do.body.i:                                        ; preds = %do.body.i, %if.end
  %call7.i = phi i32 [ %call.i, %do.body.i ], [ %call5.i, %if.end ]
  %2 = load ptr, ptr %s, align 4
  %3 = ptrtoint ptr %2 to i32
  %arrayidx.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %call7.i
  %4 = load i32, ptr %arrayidx.i, align 4
  %add.i = add i32 %4, %3
  %5 = inttoptr i32 %add.i to ptr
  %arrayidx2.i = getelementptr %struct.kmem_cache_cpu, ptr %5, i32 0, i32 5, i32 0
  store i32 0, ptr %arrayidx2.i, align 4
  %call.i = tail call i32 @cpumask_next(i32 noundef %call7.i, ptr noundef nonnull @__cpu_online_mask) #29
  %6 = load i32, ptr @nr_cpu_ids, align 4
  %cmp.i = icmp ult i32 %call.i, %6
  br i1 %cmp.i, label %do.body.i, label %return

return:                                           ; preds = %do.body.i, %if.end, %entry
  %retval.0 = phi i32 [ -22, %entry ], [ %length, %if.end ], [ %length, %do.body.i ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc i32 @show_stat(ptr nocapture noundef readonly %s, ptr noundef %buf, i32 noundef %si) unnamed_addr #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load i32, ptr @nr_cpu_ids, align 4
  %1 = tail call { i32, i1 } @llvm.umul.with.overflow.i32(i32 %0, i32 4) #24
  %2 = extractvalue { i32, i1 } %1, 1
  br i1 %2, label %cleanup, label %if.end7.i, !prof !13

if.end7.i:                                        ; preds = %entry
  %3 = extractvalue { i32, i1 } %1, 0
  %call8.i = tail call noalias align 128 ptr @__kmalloc(i32 noundef %3, i32 noundef 3264) #30
  %tobool.not = icmp eq ptr %call8.i, null
  br i1 %tobool.not, label %cleanup, label %for.cond.preheader

for.cond.preheader:                               ; preds = %if.end7.i
  %call149 = tail call i32 @cpumask_next(i32 noundef -1, ptr noundef nonnull @__cpu_online_mask) #29
  %4 = load i32, ptr @nr_cpu_ids, align 4
  %cmp50 = icmp ult i32 %call149, %4
  br i1 %cmp50, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %for.cond.preheader
  %5 = load ptr, ptr %s, align 4
  %6 = ptrtoint ptr %5 to i32
  %7 = load i32, ptr @nr_cpu_ids, align 4
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %call152 = phi i32 [ %call1, %for.body ], [ %call149, %for.body.preheader ]
  %sum.051 = phi i32 [ %add5, %for.body ], [ 0, %for.body.preheader ]
  %arrayidx = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %call152
  %8 = load i32, ptr %arrayidx, align 4
  %add = add i32 %8, %6
  %9 = inttoptr i32 %add to ptr
  %arrayidx3 = getelementptr %struct.kmem_cache_cpu, ptr %9, i32 0, i32 5, i32 %si
  %10 = load i32, ptr %arrayidx3, align 4
  %arrayidx4 = getelementptr i32, ptr %call8.i, i32 %call152
  store i32 %10, ptr %arrayidx4, align 4
  %add5 = add i32 %10, %sum.051
  %call1 = tail call i32 @cpumask_next(i32 noundef %call152, ptr noundef nonnull @__cpu_online_mask) #29
  %cmp = icmp ult i32 %call1, %7
  br i1 %cmp, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %for.cond.preheader
  %sum.0.lcssa = phi i32 [ 0, %for.cond.preheader ], [ %add5, %for.body ]
  %call6 = tail call i32 (ptr, i32, ptr, ...) @sysfs_emit_at(ptr noundef %buf, i32 noundef 0, ptr noundef nonnull @.str.154, i32 noundef %sum.0.lcssa) #27
  %call953 = tail call i32 @cpumask_next(i32 noundef -1, ptr noundef nonnull @__cpu_online_mask) #29
  %11 = load i32, ptr @nr_cpu_ids, align 4
  %cmp1054 = icmp ult i32 %call953, %11
  br i1 %cmp1054, label %for.body11, label %for.end19

for.body11:                                       ; preds = %if.end18, %for.end
  %12 = phi i32 [ %14, %if.end18 ], [ %11, %for.end ]
  %call956 = phi i32 [ %call9, %if.end18 ], [ %call953, %for.end ]
  %len.055 = phi i32 [ %len.1, %if.end18 ], [ %call6, %for.end ]
  %arrayidx12 = getelementptr i32, ptr %call8.i, i32 %call956
  %13 = load i32, ptr %arrayidx12, align 4
  %tobool13.not = icmp eq i32 %13, 0
  br i1 %tobool13.not, label %if.end18, label %if.then14

if.then14:                                        ; preds = %for.body11
  %call16 = tail call i32 (ptr, i32, ptr, ...) @sysfs_emit_at(ptr noundef %buf, i32 noundef %len.055, ptr noundef nonnull @.str.180, i32 noundef %call956, i32 noundef %13) #27
  %add17 = add i32 %call16, %len.055
  %.pre = load i32, ptr @nr_cpu_ids, align 4
  br label %if.end18

if.end18:                                         ; preds = %if.then14, %for.body11
  %14 = phi i32 [ %.pre, %if.then14 ], [ %12, %for.body11 ]
  %len.1 = phi i32 [ %add17, %if.then14 ], [ %len.055, %for.body11 ]
  %call9 = tail call i32 @cpumask_next(i32 noundef %call956, ptr noundef nonnull @__cpu_online_mask) #29
  %cmp10 = icmp ult i32 %call9, %14
  br i1 %cmp10, label %for.body11, label %for.end19

for.end19:                                        ; preds = %if.end18, %for.end
  %len.0.lcssa = phi i32 [ %call6, %for.end ], [ %len.1, %if.end18 ]
  tail call void @kfree(ptr noundef nonnull %call8.i) #25
  %call20 = tail call i32 (ptr, i32, ptr, ...) @sysfs_emit_at(ptr noundef %buf, i32 noundef %len.0.lcssa, ptr noundef nonnull @.str.155) #27
  %add21 = add i32 %call20, %len.0.lcssa
  br label %cleanup

cleanup:                                          ; preds = %for.end19, %if.end7.i, %entry
  %retval.0 = phi i32 [ %add21, %for.end19 ], [ -12, %if.end7.i ], [ -12, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @alloc_slowpath_show(ptr nocapture noundef readonly %s, ptr noundef %buf) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %call = tail call fastcc i32 @show_stat(ptr noundef %s, ptr noundef %buf, i32 noundef 1) #25
  ret i32 %call
}

; Function Attrs: nofree nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @alloc_slowpath_store(ptr nocapture noundef readonly %s, ptr nocapture noundef readonly %buf, i32 noundef %length) #22 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load i8, ptr %buf, align 1
  %cmp.not = icmp eq i8 %0, 48
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %call5.i = tail call i32 @cpumask_next(i32 noundef -1, ptr noundef nonnull @__cpu_online_mask) #29
  %1 = load i32, ptr @nr_cpu_ids, align 4
  %cmp6.i = icmp ult i32 %call5.i, %1
  br i1 %cmp6.i, label %do.body.i, label %return

do.body.i:                                        ; preds = %do.body.i, %if.end
  %call7.i = phi i32 [ %call.i, %do.body.i ], [ %call5.i, %if.end ]
  %2 = load ptr, ptr %s, align 4
  %3 = ptrtoint ptr %2 to i32
  %arrayidx.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %call7.i
  %4 = load i32, ptr %arrayidx.i, align 4
  %add.i = add i32 %4, %3
  %5 = inttoptr i32 %add.i to ptr
  %arrayidx2.i = getelementptr %struct.kmem_cache_cpu, ptr %5, i32 0, i32 5, i32 1
  store i32 0, ptr %arrayidx2.i, align 4
  %call.i = tail call i32 @cpumask_next(i32 noundef %call7.i, ptr noundef nonnull @__cpu_online_mask) #29
  %6 = load i32, ptr @nr_cpu_ids, align 4
  %cmp.i = icmp ult i32 %call.i, %6
  br i1 %cmp.i, label %do.body.i, label %return

return:                                           ; preds = %do.body.i, %if.end, %entry
  %retval.0 = phi i32 [ -22, %entry ], [ %length, %if.end ], [ %length, %do.body.i ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @free_fastpath_show(ptr nocapture noundef readonly %s, ptr noundef %buf) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %call = tail call fastcc i32 @show_stat(ptr noundef %s, ptr noundef %buf, i32 noundef 2) #25
  ret i32 %call
}

; Function Attrs: nofree nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @free_fastpath_store(ptr nocapture noundef readonly %s, ptr nocapture noundef readonly %buf, i32 noundef %length) #22 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load i8, ptr %buf, align 1
  %cmp.not = icmp eq i8 %0, 48
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %call5.i = tail call i32 @cpumask_next(i32 noundef -1, ptr noundef nonnull @__cpu_online_mask) #29
  %1 = load i32, ptr @nr_cpu_ids, align 4
  %cmp6.i = icmp ult i32 %call5.i, %1
  br i1 %cmp6.i, label %do.body.i, label %return

do.body.i:                                        ; preds = %do.body.i, %if.end
  %call7.i = phi i32 [ %call.i, %do.body.i ], [ %call5.i, %if.end ]
  %2 = load ptr, ptr %s, align 4
  %3 = ptrtoint ptr %2 to i32
  %arrayidx.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %call7.i
  %4 = load i32, ptr %arrayidx.i, align 4
  %add.i = add i32 %4, %3
  %5 = inttoptr i32 %add.i to ptr
  %arrayidx2.i = getelementptr %struct.kmem_cache_cpu, ptr %5, i32 0, i32 5, i32 2
  store i32 0, ptr %arrayidx2.i, align 4
  %call.i = tail call i32 @cpumask_next(i32 noundef %call7.i, ptr noundef nonnull @__cpu_online_mask) #29
  %6 = load i32, ptr @nr_cpu_ids, align 4
  %cmp.i = icmp ult i32 %call.i, %6
  br i1 %cmp.i, label %do.body.i, label %return

return:                                           ; preds = %do.body.i, %if.end, %entry
  %retval.0 = phi i32 [ -22, %entry ], [ %length, %if.end ], [ %length, %do.body.i ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @free_slowpath_show(ptr nocapture noundef readonly %s, ptr noundef %buf) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %call = tail call fastcc i32 @show_stat(ptr noundef %s, ptr noundef %buf, i32 noundef 3) #25
  ret i32 %call
}

; Function Attrs: nofree nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @free_slowpath_store(ptr nocapture noundef readonly %s, ptr nocapture noundef readonly %buf, i32 noundef %length) #22 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load i8, ptr %buf, align 1
  %cmp.not = icmp eq i8 %0, 48
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %call5.i = tail call i32 @cpumask_next(i32 noundef -1, ptr noundef nonnull @__cpu_online_mask) #29
  %1 = load i32, ptr @nr_cpu_ids, align 4
  %cmp6.i = icmp ult i32 %call5.i, %1
  br i1 %cmp6.i, label %do.body.i, label %return

do.body.i:                                        ; preds = %do.body.i, %if.end
  %call7.i = phi i32 [ %call.i, %do.body.i ], [ %call5.i, %if.end ]
  %2 = load ptr, ptr %s, align 4
  %3 = ptrtoint ptr %2 to i32
  %arrayidx.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %call7.i
  %4 = load i32, ptr %arrayidx.i, align 4
  %add.i = add i32 %4, %3
  %5 = inttoptr i32 %add.i to ptr
  %arrayidx2.i = getelementptr %struct.kmem_cache_cpu, ptr %5, i32 0, i32 5, i32 3
  store i32 0, ptr %arrayidx2.i, align 4
  %call.i = tail call i32 @cpumask_next(i32 noundef %call7.i, ptr noundef nonnull @__cpu_online_mask) #29
  %6 = load i32, ptr @nr_cpu_ids, align 4
  %cmp.i = icmp ult i32 %call.i, %6
  br i1 %cmp.i, label %do.body.i, label %return

return:                                           ; preds = %do.body.i, %if.end, %entry
  %retval.0 = phi i32 [ -22, %entry ], [ %length, %if.end ], [ %length, %do.body.i ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @free_frozen_show(ptr nocapture noundef readonly %s, ptr noundef %buf) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %call = tail call fastcc i32 @show_stat(ptr noundef %s, ptr noundef %buf, i32 noundef 4) #25
  ret i32 %call
}

; Function Attrs: nofree nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @free_frozen_store(ptr nocapture noundef readonly %s, ptr nocapture noundef readonly %buf, i32 noundef %length) #22 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load i8, ptr %buf, align 1
  %cmp.not = icmp eq i8 %0, 48
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %call5.i = tail call i32 @cpumask_next(i32 noundef -1, ptr noundef nonnull @__cpu_online_mask) #29
  %1 = load i32, ptr @nr_cpu_ids, align 4
  %cmp6.i = icmp ult i32 %call5.i, %1
  br i1 %cmp6.i, label %do.body.i, label %return

do.body.i:                                        ; preds = %do.body.i, %if.end
  %call7.i = phi i32 [ %call.i, %do.body.i ], [ %call5.i, %if.end ]
  %2 = load ptr, ptr %s, align 4
  %3 = ptrtoint ptr %2 to i32
  %arrayidx.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %call7.i
  %4 = load i32, ptr %arrayidx.i, align 4
  %add.i = add i32 %4, %3
  %5 = inttoptr i32 %add.i to ptr
  %arrayidx2.i = getelementptr %struct.kmem_cache_cpu, ptr %5, i32 0, i32 5, i32 4
  store i32 0, ptr %arrayidx2.i, align 4
  %call.i = tail call i32 @cpumask_next(i32 noundef %call7.i, ptr noundef nonnull @__cpu_online_mask) #29
  %6 = load i32, ptr @nr_cpu_ids, align 4
  %cmp.i = icmp ult i32 %call.i, %6
  br i1 %cmp.i, label %do.body.i, label %return

return:                                           ; preds = %do.body.i, %if.end, %entry
  %retval.0 = phi i32 [ -22, %entry ], [ %length, %if.end ], [ %length, %do.body.i ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @free_add_partial_show(ptr nocapture noundef readonly %s, ptr noundef %buf) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %call = tail call fastcc i32 @show_stat(ptr noundef %s, ptr noundef %buf, i32 noundef 5) #25
  ret i32 %call
}

; Function Attrs: nofree nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @free_add_partial_store(ptr nocapture noundef readonly %s, ptr nocapture noundef readonly %buf, i32 noundef %length) #22 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load i8, ptr %buf, align 1
  %cmp.not = icmp eq i8 %0, 48
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %call5.i = tail call i32 @cpumask_next(i32 noundef -1, ptr noundef nonnull @__cpu_online_mask) #29
  %1 = load i32, ptr @nr_cpu_ids, align 4
  %cmp6.i = icmp ult i32 %call5.i, %1
  br i1 %cmp6.i, label %do.body.i, label %return

do.body.i:                                        ; preds = %do.body.i, %if.end
  %call7.i = phi i32 [ %call.i, %do.body.i ], [ %call5.i, %if.end ]
  %2 = load ptr, ptr %s, align 4
  %3 = ptrtoint ptr %2 to i32
  %arrayidx.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %call7.i
  %4 = load i32, ptr %arrayidx.i, align 4
  %add.i = add i32 %4, %3
  %5 = inttoptr i32 %add.i to ptr
  %arrayidx2.i = getelementptr %struct.kmem_cache_cpu, ptr %5, i32 0, i32 5, i32 5
  store i32 0, ptr %arrayidx2.i, align 4
  %call.i = tail call i32 @cpumask_next(i32 noundef %call7.i, ptr noundef nonnull @__cpu_online_mask) #29
  %6 = load i32, ptr @nr_cpu_ids, align 4
  %cmp.i = icmp ult i32 %call.i, %6
  br i1 %cmp.i, label %do.body.i, label %return

return:                                           ; preds = %do.body.i, %if.end, %entry
  %retval.0 = phi i32 [ -22, %entry ], [ %length, %if.end ], [ %length, %do.body.i ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @free_remove_partial_show(ptr nocapture noundef readonly %s, ptr noundef %buf) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %call = tail call fastcc i32 @show_stat(ptr noundef %s, ptr noundef %buf, i32 noundef 6) #25
  ret i32 %call
}

; Function Attrs: nofree nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @free_remove_partial_store(ptr nocapture noundef readonly %s, ptr nocapture noundef readonly %buf, i32 noundef %length) #22 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load i8, ptr %buf, align 1
  %cmp.not = icmp eq i8 %0, 48
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %call5.i = tail call i32 @cpumask_next(i32 noundef -1, ptr noundef nonnull @__cpu_online_mask) #29
  %1 = load i32, ptr @nr_cpu_ids, align 4
  %cmp6.i = icmp ult i32 %call5.i, %1
  br i1 %cmp6.i, label %do.body.i, label %return

do.body.i:                                        ; preds = %do.body.i, %if.end
  %call7.i = phi i32 [ %call.i, %do.body.i ], [ %call5.i, %if.end ]
  %2 = load ptr, ptr %s, align 4
  %3 = ptrtoint ptr %2 to i32
  %arrayidx.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %call7.i
  %4 = load i32, ptr %arrayidx.i, align 4
  %add.i = add i32 %4, %3
  %5 = inttoptr i32 %add.i to ptr
  %arrayidx2.i = getelementptr %struct.kmem_cache_cpu, ptr %5, i32 0, i32 5, i32 6
  store i32 0, ptr %arrayidx2.i, align 4
  %call.i = tail call i32 @cpumask_next(i32 noundef %call7.i, ptr noundef nonnull @__cpu_online_mask) #29
  %6 = load i32, ptr @nr_cpu_ids, align 4
  %cmp.i = icmp ult i32 %call.i, %6
  br i1 %cmp.i, label %do.body.i, label %return

return:                                           ; preds = %do.body.i, %if.end, %entry
  %retval.0 = phi i32 [ -22, %entry ], [ %length, %if.end ], [ %length, %do.body.i ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @alloc_from_partial_show(ptr nocapture noundef readonly %s, ptr noundef %buf) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %call = tail call fastcc i32 @show_stat(ptr noundef %s, ptr noundef %buf, i32 noundef 7) #25
  ret i32 %call
}

; Function Attrs: nofree nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @alloc_from_partial_store(ptr nocapture noundef readonly %s, ptr nocapture noundef readonly %buf, i32 noundef %length) #22 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load i8, ptr %buf, align 1
  %cmp.not = icmp eq i8 %0, 48
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %call5.i = tail call i32 @cpumask_next(i32 noundef -1, ptr noundef nonnull @__cpu_online_mask) #29
  %1 = load i32, ptr @nr_cpu_ids, align 4
  %cmp6.i = icmp ult i32 %call5.i, %1
  br i1 %cmp6.i, label %do.body.i, label %return

do.body.i:                                        ; preds = %do.body.i, %if.end
  %call7.i = phi i32 [ %call.i, %do.body.i ], [ %call5.i, %if.end ]
  %2 = load ptr, ptr %s, align 4
  %3 = ptrtoint ptr %2 to i32
  %arrayidx.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %call7.i
  %4 = load i32, ptr %arrayidx.i, align 4
  %add.i = add i32 %4, %3
  %5 = inttoptr i32 %add.i to ptr
  %arrayidx2.i = getelementptr %struct.kmem_cache_cpu, ptr %5, i32 0, i32 5, i32 7
  store i32 0, ptr %arrayidx2.i, align 4
  %call.i = tail call i32 @cpumask_next(i32 noundef %call7.i, ptr noundef nonnull @__cpu_online_mask) #29
  %6 = load i32, ptr @nr_cpu_ids, align 4
  %cmp.i = icmp ult i32 %call.i, %6
  br i1 %cmp.i, label %do.body.i, label %return

return:                                           ; preds = %do.body.i, %if.end, %entry
  %retval.0 = phi i32 [ -22, %entry ], [ %length, %if.end ], [ %length, %do.body.i ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @alloc_slab_show(ptr nocapture noundef readonly %s, ptr noundef %buf) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %call = tail call fastcc i32 @show_stat(ptr noundef %s, ptr noundef %buf, i32 noundef 8) #25
  ret i32 %call
}

; Function Attrs: nofree nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @alloc_slab_store(ptr nocapture noundef readonly %s, ptr nocapture noundef readonly %buf, i32 noundef %length) #22 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load i8, ptr %buf, align 1
  %cmp.not = icmp eq i8 %0, 48
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %call5.i = tail call i32 @cpumask_next(i32 noundef -1, ptr noundef nonnull @__cpu_online_mask) #29
  %1 = load i32, ptr @nr_cpu_ids, align 4
  %cmp6.i = icmp ult i32 %call5.i, %1
  br i1 %cmp6.i, label %do.body.i, label %return

do.body.i:                                        ; preds = %do.body.i, %if.end
  %call7.i = phi i32 [ %call.i, %do.body.i ], [ %call5.i, %if.end ]
  %2 = load ptr, ptr %s, align 4
  %3 = ptrtoint ptr %2 to i32
  %arrayidx.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %call7.i
  %4 = load i32, ptr %arrayidx.i, align 4
  %add.i = add i32 %4, %3
  %5 = inttoptr i32 %add.i to ptr
  %arrayidx2.i = getelementptr %struct.kmem_cache_cpu, ptr %5, i32 0, i32 5, i32 8
  store i32 0, ptr %arrayidx2.i, align 4
  %call.i = tail call i32 @cpumask_next(i32 noundef %call7.i, ptr noundef nonnull @__cpu_online_mask) #29
  %6 = load i32, ptr @nr_cpu_ids, align 4
  %cmp.i = icmp ult i32 %call.i, %6
  br i1 %cmp.i, label %do.body.i, label %return

return:                                           ; preds = %do.body.i, %if.end, %entry
  %retval.0 = phi i32 [ -22, %entry ], [ %length, %if.end ], [ %length, %do.body.i ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @alloc_refill_show(ptr nocapture noundef readonly %s, ptr noundef %buf) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %call = tail call fastcc i32 @show_stat(ptr noundef %s, ptr noundef %buf, i32 noundef 9) #25
  ret i32 %call
}

; Function Attrs: nofree nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @alloc_refill_store(ptr nocapture noundef readonly %s, ptr nocapture noundef readonly %buf, i32 noundef %length) #22 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load i8, ptr %buf, align 1
  %cmp.not = icmp eq i8 %0, 48
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %call5.i = tail call i32 @cpumask_next(i32 noundef -1, ptr noundef nonnull @__cpu_online_mask) #29
  %1 = load i32, ptr @nr_cpu_ids, align 4
  %cmp6.i = icmp ult i32 %call5.i, %1
  br i1 %cmp6.i, label %do.body.i, label %return

do.body.i:                                        ; preds = %do.body.i, %if.end
  %call7.i = phi i32 [ %call.i, %do.body.i ], [ %call5.i, %if.end ]
  %2 = load ptr, ptr %s, align 4
  %3 = ptrtoint ptr %2 to i32
  %arrayidx.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %call7.i
  %4 = load i32, ptr %arrayidx.i, align 4
  %add.i = add i32 %4, %3
  %5 = inttoptr i32 %add.i to ptr
  %arrayidx2.i = getelementptr %struct.kmem_cache_cpu, ptr %5, i32 0, i32 5, i32 9
  store i32 0, ptr %arrayidx2.i, align 4
  %call.i = tail call i32 @cpumask_next(i32 noundef %call7.i, ptr noundef nonnull @__cpu_online_mask) #29
  %6 = load i32, ptr @nr_cpu_ids, align 4
  %cmp.i = icmp ult i32 %call.i, %6
  br i1 %cmp.i, label %do.body.i, label %return

return:                                           ; preds = %do.body.i, %if.end, %entry
  %retval.0 = phi i32 [ -22, %entry ], [ %length, %if.end ], [ %length, %do.body.i ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @alloc_node_mismatch_show(ptr nocapture noundef readonly %s, ptr noundef %buf) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %call = tail call fastcc i32 @show_stat(ptr noundef %s, ptr noundef %buf, i32 noundef 10) #25
  ret i32 %call
}

; Function Attrs: nofree nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @alloc_node_mismatch_store(ptr nocapture noundef readonly %s, ptr nocapture noundef readonly %buf, i32 noundef %length) #22 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load i8, ptr %buf, align 1
  %cmp.not = icmp eq i8 %0, 48
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %call5.i = tail call i32 @cpumask_next(i32 noundef -1, ptr noundef nonnull @__cpu_online_mask) #29
  %1 = load i32, ptr @nr_cpu_ids, align 4
  %cmp6.i = icmp ult i32 %call5.i, %1
  br i1 %cmp6.i, label %do.body.i, label %return

do.body.i:                                        ; preds = %do.body.i, %if.end
  %call7.i = phi i32 [ %call.i, %do.body.i ], [ %call5.i, %if.end ]
  %2 = load ptr, ptr %s, align 4
  %3 = ptrtoint ptr %2 to i32
  %arrayidx.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %call7.i
  %4 = load i32, ptr %arrayidx.i, align 4
  %add.i = add i32 %4, %3
  %5 = inttoptr i32 %add.i to ptr
  %arrayidx2.i = getelementptr %struct.kmem_cache_cpu, ptr %5, i32 0, i32 5, i32 10
  store i32 0, ptr %arrayidx2.i, align 4
  %call.i = tail call i32 @cpumask_next(i32 noundef %call7.i, ptr noundef nonnull @__cpu_online_mask) #29
  %6 = load i32, ptr @nr_cpu_ids, align 4
  %cmp.i = icmp ult i32 %call.i, %6
  br i1 %cmp.i, label %do.body.i, label %return

return:                                           ; preds = %do.body.i, %if.end, %entry
  %retval.0 = phi i32 [ -22, %entry ], [ %length, %if.end ], [ %length, %do.body.i ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @free_slab_show(ptr nocapture noundef readonly %s, ptr noundef %buf) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %call = tail call fastcc i32 @show_stat(ptr noundef %s, ptr noundef %buf, i32 noundef 11) #25
  ret i32 %call
}

; Function Attrs: nofree nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @free_slab_store(ptr nocapture noundef readonly %s, ptr nocapture noundef readonly %buf, i32 noundef %length) #22 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load i8, ptr %buf, align 1
  %cmp.not = icmp eq i8 %0, 48
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %call5.i = tail call i32 @cpumask_next(i32 noundef -1, ptr noundef nonnull @__cpu_online_mask) #29
  %1 = load i32, ptr @nr_cpu_ids, align 4
  %cmp6.i = icmp ult i32 %call5.i, %1
  br i1 %cmp6.i, label %do.body.i, label %return

do.body.i:                                        ; preds = %do.body.i, %if.end
  %call7.i = phi i32 [ %call.i, %do.body.i ], [ %call5.i, %if.end ]
  %2 = load ptr, ptr %s, align 4
  %3 = ptrtoint ptr %2 to i32
  %arrayidx.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %call7.i
  %4 = load i32, ptr %arrayidx.i, align 4
  %add.i = add i32 %4, %3
  %5 = inttoptr i32 %add.i to ptr
  %arrayidx2.i = getelementptr %struct.kmem_cache_cpu, ptr %5, i32 0, i32 5, i32 11
  store i32 0, ptr %arrayidx2.i, align 4
  %call.i = tail call i32 @cpumask_next(i32 noundef %call7.i, ptr noundef nonnull @__cpu_online_mask) #29
  %6 = load i32, ptr @nr_cpu_ids, align 4
  %cmp.i = icmp ult i32 %call.i, %6
  br i1 %cmp.i, label %do.body.i, label %return

return:                                           ; preds = %do.body.i, %if.end, %entry
  %retval.0 = phi i32 [ -22, %entry ], [ %length, %if.end ], [ %length, %do.body.i ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @cpuslab_flush_show(ptr nocapture noundef readonly %s, ptr noundef %buf) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %call = tail call fastcc i32 @show_stat(ptr noundef %s, ptr noundef %buf, i32 noundef 12) #25
  ret i32 %call
}

; Function Attrs: nofree nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @cpuslab_flush_store(ptr nocapture noundef readonly %s, ptr nocapture noundef readonly %buf, i32 noundef %length) #22 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load i8, ptr %buf, align 1
  %cmp.not = icmp eq i8 %0, 48
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %call5.i = tail call i32 @cpumask_next(i32 noundef -1, ptr noundef nonnull @__cpu_online_mask) #29
  %1 = load i32, ptr @nr_cpu_ids, align 4
  %cmp6.i = icmp ult i32 %call5.i, %1
  br i1 %cmp6.i, label %do.body.i, label %return

do.body.i:                                        ; preds = %do.body.i, %if.end
  %call7.i = phi i32 [ %call.i, %do.body.i ], [ %call5.i, %if.end ]
  %2 = load ptr, ptr %s, align 4
  %3 = ptrtoint ptr %2 to i32
  %arrayidx.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %call7.i
  %4 = load i32, ptr %arrayidx.i, align 4
  %add.i = add i32 %4, %3
  %5 = inttoptr i32 %add.i to ptr
  %arrayidx2.i = getelementptr %struct.kmem_cache_cpu, ptr %5, i32 0, i32 5, i32 12
  store i32 0, ptr %arrayidx2.i, align 4
  %call.i = tail call i32 @cpumask_next(i32 noundef %call7.i, ptr noundef nonnull @__cpu_online_mask) #29
  %6 = load i32, ptr @nr_cpu_ids, align 4
  %cmp.i = icmp ult i32 %call.i, %6
  br i1 %cmp.i, label %do.body.i, label %return

return:                                           ; preds = %do.body.i, %if.end, %entry
  %retval.0 = phi i32 [ -22, %entry ], [ %length, %if.end ], [ %length, %do.body.i ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @deactivate_full_show(ptr nocapture noundef readonly %s, ptr noundef %buf) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %call = tail call fastcc i32 @show_stat(ptr noundef %s, ptr noundef %buf, i32 noundef 13) #25
  ret i32 %call
}

; Function Attrs: nofree nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @deactivate_full_store(ptr nocapture noundef readonly %s, ptr nocapture noundef readonly %buf, i32 noundef %length) #22 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load i8, ptr %buf, align 1
  %cmp.not = icmp eq i8 %0, 48
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %call5.i = tail call i32 @cpumask_next(i32 noundef -1, ptr noundef nonnull @__cpu_online_mask) #29
  %1 = load i32, ptr @nr_cpu_ids, align 4
  %cmp6.i = icmp ult i32 %call5.i, %1
  br i1 %cmp6.i, label %do.body.i, label %return

do.body.i:                                        ; preds = %do.body.i, %if.end
  %call7.i = phi i32 [ %call.i, %do.body.i ], [ %call5.i, %if.end ]
  %2 = load ptr, ptr %s, align 4
  %3 = ptrtoint ptr %2 to i32
  %arrayidx.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %call7.i
  %4 = load i32, ptr %arrayidx.i, align 4
  %add.i = add i32 %4, %3
  %5 = inttoptr i32 %add.i to ptr
  %arrayidx2.i = getelementptr %struct.kmem_cache_cpu, ptr %5, i32 0, i32 5, i32 13
  store i32 0, ptr %arrayidx2.i, align 4
  %call.i = tail call i32 @cpumask_next(i32 noundef %call7.i, ptr noundef nonnull @__cpu_online_mask) #29
  %6 = load i32, ptr @nr_cpu_ids, align 4
  %cmp.i = icmp ult i32 %call.i, %6
  br i1 %cmp.i, label %do.body.i, label %return

return:                                           ; preds = %do.body.i, %if.end, %entry
  %retval.0 = phi i32 [ -22, %entry ], [ %length, %if.end ], [ %length, %do.body.i ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @deactivate_empty_show(ptr nocapture noundef readonly %s, ptr noundef %buf) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %call = tail call fastcc i32 @show_stat(ptr noundef %s, ptr noundef %buf, i32 noundef 14) #25
  ret i32 %call
}

; Function Attrs: nofree nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @deactivate_empty_store(ptr nocapture noundef readonly %s, ptr nocapture noundef readonly %buf, i32 noundef %length) #22 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load i8, ptr %buf, align 1
  %cmp.not = icmp eq i8 %0, 48
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %call5.i = tail call i32 @cpumask_next(i32 noundef -1, ptr noundef nonnull @__cpu_online_mask) #29
  %1 = load i32, ptr @nr_cpu_ids, align 4
  %cmp6.i = icmp ult i32 %call5.i, %1
  br i1 %cmp6.i, label %do.body.i, label %return

do.body.i:                                        ; preds = %do.body.i, %if.end
  %call7.i = phi i32 [ %call.i, %do.body.i ], [ %call5.i, %if.end ]
  %2 = load ptr, ptr %s, align 4
  %3 = ptrtoint ptr %2 to i32
  %arrayidx.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %call7.i
  %4 = load i32, ptr %arrayidx.i, align 4
  %add.i = add i32 %4, %3
  %5 = inttoptr i32 %add.i to ptr
  %arrayidx2.i = getelementptr %struct.kmem_cache_cpu, ptr %5, i32 0, i32 5, i32 14
  store i32 0, ptr %arrayidx2.i, align 4
  %call.i = tail call i32 @cpumask_next(i32 noundef %call7.i, ptr noundef nonnull @__cpu_online_mask) #29
  %6 = load i32, ptr @nr_cpu_ids, align 4
  %cmp.i = icmp ult i32 %call.i, %6
  br i1 %cmp.i, label %do.body.i, label %return

return:                                           ; preds = %do.body.i, %if.end, %entry
  %retval.0 = phi i32 [ -22, %entry ], [ %length, %if.end ], [ %length, %do.body.i ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @deactivate_to_head_show(ptr nocapture noundef readonly %s, ptr noundef %buf) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %call = tail call fastcc i32 @show_stat(ptr noundef %s, ptr noundef %buf, i32 noundef 15) #25
  ret i32 %call
}

; Function Attrs: nofree nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @deactivate_to_head_store(ptr nocapture noundef readonly %s, ptr nocapture noundef readonly %buf, i32 noundef %length) #22 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load i8, ptr %buf, align 1
  %cmp.not = icmp eq i8 %0, 48
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %call5.i = tail call i32 @cpumask_next(i32 noundef -1, ptr noundef nonnull @__cpu_online_mask) #29
  %1 = load i32, ptr @nr_cpu_ids, align 4
  %cmp6.i = icmp ult i32 %call5.i, %1
  br i1 %cmp6.i, label %do.body.i, label %return

do.body.i:                                        ; preds = %do.body.i, %if.end
  %call7.i = phi i32 [ %call.i, %do.body.i ], [ %call5.i, %if.end ]
  %2 = load ptr, ptr %s, align 4
  %3 = ptrtoint ptr %2 to i32
  %arrayidx.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %call7.i
  %4 = load i32, ptr %arrayidx.i, align 4
  %add.i = add i32 %4, %3
  %5 = inttoptr i32 %add.i to ptr
  %arrayidx2.i = getelementptr %struct.kmem_cache_cpu, ptr %5, i32 0, i32 5, i32 15
  store i32 0, ptr %arrayidx2.i, align 4
  %call.i = tail call i32 @cpumask_next(i32 noundef %call7.i, ptr noundef nonnull @__cpu_online_mask) #29
  %6 = load i32, ptr @nr_cpu_ids, align 4
  %cmp.i = icmp ult i32 %call.i, %6
  br i1 %cmp.i, label %do.body.i, label %return

return:                                           ; preds = %do.body.i, %if.end, %entry
  %retval.0 = phi i32 [ -22, %entry ], [ %length, %if.end ], [ %length, %do.body.i ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @deactivate_to_tail_show(ptr nocapture noundef readonly %s, ptr noundef %buf) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %call = tail call fastcc i32 @show_stat(ptr noundef %s, ptr noundef %buf, i32 noundef 16) #25
  ret i32 %call
}

; Function Attrs: nofree nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @deactivate_to_tail_store(ptr nocapture noundef readonly %s, ptr nocapture noundef readonly %buf, i32 noundef %length) #22 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load i8, ptr %buf, align 1
  %cmp.not = icmp eq i8 %0, 48
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %call5.i = tail call i32 @cpumask_next(i32 noundef -1, ptr noundef nonnull @__cpu_online_mask) #29
  %1 = load i32, ptr @nr_cpu_ids, align 4
  %cmp6.i = icmp ult i32 %call5.i, %1
  br i1 %cmp6.i, label %do.body.i, label %return

do.body.i:                                        ; preds = %do.body.i, %if.end
  %call7.i = phi i32 [ %call.i, %do.body.i ], [ %call5.i, %if.end ]
  %2 = load ptr, ptr %s, align 4
  %3 = ptrtoint ptr %2 to i32
  %arrayidx.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %call7.i
  %4 = load i32, ptr %arrayidx.i, align 4
  %add.i = add i32 %4, %3
  %5 = inttoptr i32 %add.i to ptr
  %arrayidx2.i = getelementptr %struct.kmem_cache_cpu, ptr %5, i32 0, i32 5, i32 16
  store i32 0, ptr %arrayidx2.i, align 4
  %call.i = tail call i32 @cpumask_next(i32 noundef %call7.i, ptr noundef nonnull @__cpu_online_mask) #29
  %6 = load i32, ptr @nr_cpu_ids, align 4
  %cmp.i = icmp ult i32 %call.i, %6
  br i1 %cmp.i, label %do.body.i, label %return

return:                                           ; preds = %do.body.i, %if.end, %entry
  %retval.0 = phi i32 [ -22, %entry ], [ %length, %if.end ], [ %length, %do.body.i ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @deactivate_remote_frees_show(ptr nocapture noundef readonly %s, ptr noundef %buf) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %call = tail call fastcc i32 @show_stat(ptr noundef %s, ptr noundef %buf, i32 noundef 17) #25
  ret i32 %call
}

; Function Attrs: nofree nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @deactivate_remote_frees_store(ptr nocapture noundef readonly %s, ptr nocapture noundef readonly %buf, i32 noundef %length) #22 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load i8, ptr %buf, align 1
  %cmp.not = icmp eq i8 %0, 48
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %call5.i = tail call i32 @cpumask_next(i32 noundef -1, ptr noundef nonnull @__cpu_online_mask) #29
  %1 = load i32, ptr @nr_cpu_ids, align 4
  %cmp6.i = icmp ult i32 %call5.i, %1
  br i1 %cmp6.i, label %do.body.i, label %return

do.body.i:                                        ; preds = %do.body.i, %if.end
  %call7.i = phi i32 [ %call.i, %do.body.i ], [ %call5.i, %if.end ]
  %2 = load ptr, ptr %s, align 4
  %3 = ptrtoint ptr %2 to i32
  %arrayidx.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %call7.i
  %4 = load i32, ptr %arrayidx.i, align 4
  %add.i = add i32 %4, %3
  %5 = inttoptr i32 %add.i to ptr
  %arrayidx2.i = getelementptr %struct.kmem_cache_cpu, ptr %5, i32 0, i32 5, i32 17
  store i32 0, ptr %arrayidx2.i, align 4
  %call.i = tail call i32 @cpumask_next(i32 noundef %call7.i, ptr noundef nonnull @__cpu_online_mask) #29
  %6 = load i32, ptr @nr_cpu_ids, align 4
  %cmp.i = icmp ult i32 %call.i, %6
  br i1 %cmp.i, label %do.body.i, label %return

return:                                           ; preds = %do.body.i, %if.end, %entry
  %retval.0 = phi i32 [ -22, %entry ], [ %length, %if.end ], [ %length, %do.body.i ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @deactivate_bypass_show(ptr nocapture noundef readonly %s, ptr noundef %buf) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %call = tail call fastcc i32 @show_stat(ptr noundef %s, ptr noundef %buf, i32 noundef 18) #25
  ret i32 %call
}

; Function Attrs: nofree nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @deactivate_bypass_store(ptr nocapture noundef readonly %s, ptr nocapture noundef readonly %buf, i32 noundef %length) #22 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load i8, ptr %buf, align 1
  %cmp.not = icmp eq i8 %0, 48
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %call5.i = tail call i32 @cpumask_next(i32 noundef -1, ptr noundef nonnull @__cpu_online_mask) #29
  %1 = load i32, ptr @nr_cpu_ids, align 4
  %cmp6.i = icmp ult i32 %call5.i, %1
  br i1 %cmp6.i, label %do.body.i, label %return

do.body.i:                                        ; preds = %do.body.i, %if.end
  %call7.i = phi i32 [ %call.i, %do.body.i ], [ %call5.i, %if.end ]
  %2 = load ptr, ptr %s, align 4
  %3 = ptrtoint ptr %2 to i32
  %arrayidx.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %call7.i
  %4 = load i32, ptr %arrayidx.i, align 4
  %add.i = add i32 %4, %3
  %5 = inttoptr i32 %add.i to ptr
  %arrayidx2.i = getelementptr %struct.kmem_cache_cpu, ptr %5, i32 0, i32 5, i32 18
  store i32 0, ptr %arrayidx2.i, align 4
  %call.i = tail call i32 @cpumask_next(i32 noundef %call7.i, ptr noundef nonnull @__cpu_online_mask) #29
  %6 = load i32, ptr @nr_cpu_ids, align 4
  %cmp.i = icmp ult i32 %call.i, %6
  br i1 %cmp.i, label %do.body.i, label %return

return:                                           ; preds = %do.body.i, %if.end, %entry
  %retval.0 = phi i32 [ -22, %entry ], [ %length, %if.end ], [ %length, %do.body.i ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @order_fallback_show(ptr nocapture noundef readonly %s, ptr noundef %buf) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %call = tail call fastcc i32 @show_stat(ptr noundef %s, ptr noundef %buf, i32 noundef 19) #25
  ret i32 %call
}

; Function Attrs: nofree nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @order_fallback_store(ptr nocapture noundef readonly %s, ptr nocapture noundef readonly %buf, i32 noundef %length) #22 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load i8, ptr %buf, align 1
  %cmp.not = icmp eq i8 %0, 48
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %call5.i = tail call i32 @cpumask_next(i32 noundef -1, ptr noundef nonnull @__cpu_online_mask) #29
  %1 = load i32, ptr @nr_cpu_ids, align 4
  %cmp6.i = icmp ult i32 %call5.i, %1
  br i1 %cmp6.i, label %do.body.i, label %return

do.body.i:                                        ; preds = %do.body.i, %if.end
  %call7.i = phi i32 [ %call.i, %do.body.i ], [ %call5.i, %if.end ]
  %2 = load ptr, ptr %s, align 4
  %3 = ptrtoint ptr %2 to i32
  %arrayidx.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %call7.i
  %4 = load i32, ptr %arrayidx.i, align 4
  %add.i = add i32 %4, %3
  %5 = inttoptr i32 %add.i to ptr
  %arrayidx2.i = getelementptr %struct.kmem_cache_cpu, ptr %5, i32 0, i32 5, i32 19
  store i32 0, ptr %arrayidx2.i, align 4
  %call.i = tail call i32 @cpumask_next(i32 noundef %call7.i, ptr noundef nonnull @__cpu_online_mask) #29
  %6 = load i32, ptr @nr_cpu_ids, align 4
  %cmp.i = icmp ult i32 %call.i, %6
  br i1 %cmp.i, label %do.body.i, label %return

return:                                           ; preds = %do.body.i, %if.end, %entry
  %retval.0 = phi i32 [ -22, %entry ], [ %length, %if.end ], [ %length, %do.body.i ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @cmpxchg_double_fail_show(ptr nocapture noundef readonly %s, ptr noundef %buf) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %call = tail call fastcc i32 @show_stat(ptr noundef %s, ptr noundef %buf, i32 noundef 21) #25
  ret i32 %call
}

; Function Attrs: nofree nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @cmpxchg_double_fail_store(ptr nocapture noundef readonly %s, ptr nocapture noundef readonly %buf, i32 noundef %length) #22 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load i8, ptr %buf, align 1
  %cmp.not = icmp eq i8 %0, 48
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %call5.i = tail call i32 @cpumask_next(i32 noundef -1, ptr noundef nonnull @__cpu_online_mask) #29
  %1 = load i32, ptr @nr_cpu_ids, align 4
  %cmp6.i = icmp ult i32 %call5.i, %1
  br i1 %cmp6.i, label %do.body.i, label %return

do.body.i:                                        ; preds = %do.body.i, %if.end
  %call7.i = phi i32 [ %call.i, %do.body.i ], [ %call5.i, %if.end ]
  %2 = load ptr, ptr %s, align 4
  %3 = ptrtoint ptr %2 to i32
  %arrayidx.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %call7.i
  %4 = load i32, ptr %arrayidx.i, align 4
  %add.i = add i32 %4, %3
  %5 = inttoptr i32 %add.i to ptr
  %arrayidx2.i = getelementptr %struct.kmem_cache_cpu, ptr %5, i32 0, i32 5, i32 21
  store i32 0, ptr %arrayidx2.i, align 4
  %call.i = tail call i32 @cpumask_next(i32 noundef %call7.i, ptr noundef nonnull @__cpu_online_mask) #29
  %6 = load i32, ptr @nr_cpu_ids, align 4
  %cmp.i = icmp ult i32 %call.i, %6
  br i1 %cmp.i, label %do.body.i, label %return

return:                                           ; preds = %do.body.i, %if.end, %entry
  %retval.0 = phi i32 [ -22, %entry ], [ %length, %if.end ], [ %length, %do.body.i ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @cmpxchg_double_cpu_fail_show(ptr nocapture noundef readonly %s, ptr noundef %buf) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %call = tail call fastcc i32 @show_stat(ptr noundef %s, ptr noundef %buf, i32 noundef 20) #25
  ret i32 %call
}

; Function Attrs: nofree nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @cmpxchg_double_cpu_fail_store(ptr nocapture noundef readonly %s, ptr nocapture noundef readonly %buf, i32 noundef %length) #22 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load i8, ptr %buf, align 1
  %cmp.not = icmp eq i8 %0, 48
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %call5.i = tail call i32 @cpumask_next(i32 noundef -1, ptr noundef nonnull @__cpu_online_mask) #29
  %1 = load i32, ptr @nr_cpu_ids, align 4
  %cmp6.i = icmp ult i32 %call5.i, %1
  br i1 %cmp6.i, label %do.body.i, label %return

do.body.i:                                        ; preds = %do.body.i, %if.end
  %call7.i = phi i32 [ %call.i, %do.body.i ], [ %call5.i, %if.end ]
  %2 = load ptr, ptr %s, align 4
  %3 = ptrtoint ptr %2 to i32
  %arrayidx.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %call7.i
  %4 = load i32, ptr %arrayidx.i, align 4
  %add.i = add i32 %4, %3
  %5 = inttoptr i32 %add.i to ptr
  %arrayidx2.i = getelementptr %struct.kmem_cache_cpu, ptr %5, i32 0, i32 5, i32 20
  store i32 0, ptr %arrayidx2.i, align 4
  %call.i = tail call i32 @cpumask_next(i32 noundef %call7.i, ptr noundef nonnull @__cpu_online_mask) #29
  %6 = load i32, ptr @nr_cpu_ids, align 4
  %cmp.i = icmp ult i32 %call.i, %6
  br i1 %cmp.i, label %do.body.i, label %return

return:                                           ; preds = %do.body.i, %if.end, %entry
  %retval.0 = phi i32 [ -22, %entry ], [ %length, %if.end ], [ %length, %do.body.i ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @cpu_partial_alloc_show(ptr nocapture noundef readonly %s, ptr noundef %buf) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %call = tail call fastcc i32 @show_stat(ptr noundef %s, ptr noundef %buf, i32 noundef 22) #25
  ret i32 %call
}

; Function Attrs: nofree nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @cpu_partial_alloc_store(ptr nocapture noundef readonly %s, ptr nocapture noundef readonly %buf, i32 noundef %length) #22 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load i8, ptr %buf, align 1
  %cmp.not = icmp eq i8 %0, 48
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %call5.i = tail call i32 @cpumask_next(i32 noundef -1, ptr noundef nonnull @__cpu_online_mask) #29
  %1 = load i32, ptr @nr_cpu_ids, align 4
  %cmp6.i = icmp ult i32 %call5.i, %1
  br i1 %cmp6.i, label %do.body.i, label %return

do.body.i:                                        ; preds = %do.body.i, %if.end
  %call7.i = phi i32 [ %call.i, %do.body.i ], [ %call5.i, %if.end ]
  %2 = load ptr, ptr %s, align 4
  %3 = ptrtoint ptr %2 to i32
  %arrayidx.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %call7.i
  %4 = load i32, ptr %arrayidx.i, align 4
  %add.i = add i32 %4, %3
  %5 = inttoptr i32 %add.i to ptr
  %arrayidx2.i = getelementptr %struct.kmem_cache_cpu, ptr %5, i32 0, i32 5, i32 22
  store i32 0, ptr %arrayidx2.i, align 4
  %call.i = tail call i32 @cpumask_next(i32 noundef %call7.i, ptr noundef nonnull @__cpu_online_mask) #29
  %6 = load i32, ptr @nr_cpu_ids, align 4
  %cmp.i = icmp ult i32 %call.i, %6
  br i1 %cmp.i, label %do.body.i, label %return

return:                                           ; preds = %do.body.i, %if.end, %entry
  %retval.0 = phi i32 [ -22, %entry ], [ %length, %if.end ], [ %length, %do.body.i ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @cpu_partial_free_show(ptr nocapture noundef readonly %s, ptr noundef %buf) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %call = tail call fastcc i32 @show_stat(ptr noundef %s, ptr noundef %buf, i32 noundef 23) #25
  ret i32 %call
}

; Function Attrs: nofree nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @cpu_partial_free_store(ptr nocapture noundef readonly %s, ptr nocapture noundef readonly %buf, i32 noundef %length) #22 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load i8, ptr %buf, align 1
  %cmp.not = icmp eq i8 %0, 48
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %call5.i = tail call i32 @cpumask_next(i32 noundef -1, ptr noundef nonnull @__cpu_online_mask) #29
  %1 = load i32, ptr @nr_cpu_ids, align 4
  %cmp6.i = icmp ult i32 %call5.i, %1
  br i1 %cmp6.i, label %do.body.i, label %return

do.body.i:                                        ; preds = %do.body.i, %if.end
  %call7.i = phi i32 [ %call.i, %do.body.i ], [ %call5.i, %if.end ]
  %2 = load ptr, ptr %s, align 4
  %3 = ptrtoint ptr %2 to i32
  %arrayidx.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %call7.i
  %4 = load i32, ptr %arrayidx.i, align 4
  %add.i = add i32 %4, %3
  %5 = inttoptr i32 %add.i to ptr
  %arrayidx2.i = getelementptr %struct.kmem_cache_cpu, ptr %5, i32 0, i32 5, i32 23
  store i32 0, ptr %arrayidx2.i, align 4
  %call.i = tail call i32 @cpumask_next(i32 noundef %call7.i, ptr noundef nonnull @__cpu_online_mask) #29
  %6 = load i32, ptr @nr_cpu_ids, align 4
  %cmp.i = icmp ult i32 %call.i, %6
  br i1 %cmp.i, label %do.body.i, label %return

return:                                           ; preds = %do.body.i, %if.end, %entry
  %retval.0 = phi i32 [ -22, %entry ], [ %length, %if.end ], [ %length, %do.body.i ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @cpu_partial_node_show(ptr nocapture noundef readonly %s, ptr noundef %buf) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %call = tail call fastcc i32 @show_stat(ptr noundef %s, ptr noundef %buf, i32 noundef 24) #25
  ret i32 %call
}

; Function Attrs: nofree nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @cpu_partial_node_store(ptr nocapture noundef readonly %s, ptr nocapture noundef readonly %buf, i32 noundef %length) #22 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load i8, ptr %buf, align 1
  %cmp.not = icmp eq i8 %0, 48
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %call5.i = tail call i32 @cpumask_next(i32 noundef -1, ptr noundef nonnull @__cpu_online_mask) #29
  %1 = load i32, ptr @nr_cpu_ids, align 4
  %cmp6.i = icmp ult i32 %call5.i, %1
  br i1 %cmp6.i, label %do.body.i, label %return

do.body.i:                                        ; preds = %do.body.i, %if.end
  %call7.i = phi i32 [ %call.i, %do.body.i ], [ %call5.i, %if.end ]
  %2 = load ptr, ptr %s, align 4
  %3 = ptrtoint ptr %2 to i32
  %arrayidx.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %call7.i
  %4 = load i32, ptr %arrayidx.i, align 4
  %add.i = add i32 %4, %3
  %5 = inttoptr i32 %add.i to ptr
  %arrayidx2.i = getelementptr %struct.kmem_cache_cpu, ptr %5, i32 0, i32 5, i32 24
  store i32 0, ptr %arrayidx2.i, align 4
  %call.i = tail call i32 @cpumask_next(i32 noundef %call7.i, ptr noundef nonnull @__cpu_online_mask) #29
  %6 = load i32, ptr @nr_cpu_ids, align 4
  %cmp.i = icmp ult i32 %call.i, %6
  br i1 %cmp.i, label %do.body.i, label %return

return:                                           ; preds = %do.body.i, %if.end, %entry
  %retval.0 = phi i32 [ -22, %entry ], [ %length, %if.end ], [ %length, %do.body.i ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @cpu_partial_drain_show(ptr nocapture noundef readonly %s, ptr noundef %buf) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %call = tail call fastcc i32 @show_stat(ptr noundef %s, ptr noundef %buf, i32 noundef 25) #25
  ret i32 %call
}

; Function Attrs: nofree nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @cpu_partial_drain_store(ptr nocapture noundef readonly %s, ptr nocapture noundef readonly %buf, i32 noundef %length) #22 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %0 = load i8, ptr %buf, align 1
  %cmp.not = icmp eq i8 %0, 48
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %call5.i = tail call i32 @cpumask_next(i32 noundef -1, ptr noundef nonnull @__cpu_online_mask) #29
  %1 = load i32, ptr @nr_cpu_ids, align 4
  %cmp6.i = icmp ult i32 %call5.i, %1
  br i1 %cmp6.i, label %do.body.i, label %return

do.body.i:                                        ; preds = %do.body.i, %if.end
  %call7.i = phi i32 [ %call.i, %do.body.i ], [ %call5.i, %if.end ]
  %2 = load ptr, ptr %s, align 4
  %3 = ptrtoint ptr %2 to i32
  %arrayidx.i = getelementptr [4 x i32], ptr @__per_cpu_offset, i32 0, i32 %call7.i
  %4 = load i32, ptr %arrayidx.i, align 4
  %add.i = add i32 %4, %3
  %5 = inttoptr i32 %add.i to ptr
  %arrayidx2.i = getelementptr %struct.kmem_cache_cpu, ptr %5, i32 0, i32 5, i32 25
  store i32 0, ptr %arrayidx2.i, align 4
  %call.i = tail call i32 @cpumask_next(i32 noundef %call7.i, ptr noundef nonnull @__cpu_online_mask) #29
  %6 = load i32, ptr @nr_cpu_ids, align 4
  %cmp.i = icmp ult i32 %call.i, %6
  br i1 %cmp.i, label %do.body.i, label %return

return:                                           ; preds = %do.body.i, %if.end, %entry
  %retval.0 = phi i32 [ -22, %entry ], [ %length, %if.end ], [ %length, %do.body.i ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @failslab_show(ptr nocapture noundef readonly %s, ptr noundef %buf) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %flags = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 1
  %0 = load i32, ptr %flags, align 4
  %and = lshr i32 %0, 25
  %and.lobit = and i32 %and, 1
  %call = tail call i32 (ptr, ptr, ...) @sysfs_emit(ptr noundef %buf, ptr noundef nonnull @.str.162, i32 noundef %and.lobit) #27
  ret i32 %call
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @usersize_show(ptr nocapture noundef readonly %s, ptr noundef %buf) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %usersize = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 25
  %0 = load i32, ptr %usersize, align 4
  %call = tail call i32 (ptr, ptr, ...) @sysfs_emit(ptr noundef %buf, ptr noundef nonnull @.str.145, i32 noundef %0) #27
  ret i32 %call
}

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @sysfs_create_link(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local ptr @kset_create_and_add(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local ptr @debugfs_create_dir(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local ptr @debugfs_create_file(ptr noundef, i16 noundef zeroext, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local i64 @seq_lseek(ptr noundef, i64 noundef, i32 noundef) #3

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @seq_read(ptr noundef, ptr noundef, i32 noundef, ptr noundef) #3

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @slab_debug_trace_open(ptr noundef %inode, ptr noundef %filep) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %call = tail call ptr @__seq_open_private(ptr noundef %filep, ptr noundef nonnull @slab_debugfs_sops, i32 noundef 24) #27
  %f_inode.i = getelementptr inbounds %struct.file, ptr %filep, i32 0, i32 2
  %0 = load ptr, ptr %f_inode.i, align 8
  %i_private = getelementptr inbounds %struct.inode, ptr %0, i32 0, i32 54
  %1 = load ptr, ptr %i_private, align 4
  %tobool.not = icmp eq ptr %call, null
  br i1 %tobool.not, label %cleanup61, label %if.end

if.end:                                           ; preds = %entry
  %oo = getelementptr inbounds %struct.kmem_cache, ptr %1, i32 0, i32 9
  %.unpack = load i32, ptr %oo, align 4
  %and.i = and i32 %.unpack, 65535
  %call3 = tail call ptr @bitmap_alloc(i32 noundef %and.i, i32 noundef 3264) #27
  %tobool4.not = icmp eq ptr %call3, null
  br i1 %tobool4.not, label %if.then5, label %if.end7

if.then5:                                         ; preds = %if.end
  %call6 = tail call i32 @seq_release_private(ptr noundef %inode, ptr noundef %filep) #27
  br label %cleanup61

if.end7:                                          ; preds = %if.end
  %dentry = getelementptr inbounds %struct.file, ptr %filep, i32 0, i32 1, i32 1
  %2 = load ptr, ptr %dentry, align 4
  %name = getelementptr inbounds %struct.dentry, ptr %2, i32 0, i32 4, i32 1
  %3 = load ptr, ptr %name, align 8
  %call8 = tail call i32 @strcmp(ptr noundef %3, ptr noundef nonnull @.str.217) #27
  %cmp = icmp ne i32 %call8, 0
  %. = zext i1 %cmp to i32
  %call1.i = tail call i32 @__get_free_pages(i32 noundef 3264, i32 noundef 0) #27
  %4 = inttoptr i32 %call1.i to ptr
  %tobool.not.i = icmp eq i32 %call1.i, 0
  br i1 %tobool.not.i, label %if.then13, label %if.end.i

if.end.i:                                         ; preds = %if.end7
  %count.i = getelementptr inbounds %struct.loc_track, ptr %call, i32 0, i32 1
  %5 = load i32, ptr %count.i, align 4
  %tobool2.not.i = icmp eq i32 %5, 0
  br i1 %tobool2.not.i, label %for.body, label %if.then3.i

if.then3.i:                                       ; preds = %if.end.i
  %loc.i = getelementptr inbounds %struct.loc_track, ptr %call, i32 0, i32 2
  %6 = load ptr, ptr %loc.i, align 8
  %mul5.i = mul i32 %5, 40
  %call6.i = tail call ptr @__memcpy(ptr noundef nonnull %4, ptr noundef %6, i32 noundef %mul5.i) #27
  %7 = load i32, ptr %call, align 8
  %tobool.not.i20.i = icmp eq i32 %7, 0
  br i1 %tobool.not.i20.i, label %for.body, label %if.then.i21.i

if.then.i21.i:                                    ; preds = %if.then3.i
  %8 = load ptr, ptr %loc.i, align 8
  %9 = ptrtoint ptr %8 to i32
  %mul.i.i = mul i32 %7, 40
  %dec.i.i.i = add i32 %mul.i.i, -1
  %tobool.not.i.i.i.i = icmp ult i32 %dec.i.i.i, 4096
  %shr.i.i.i = lshr i32 %dec.i.i.i, 12
  %10 = tail call i32 @llvm.ctlz.i32(i32 %shr.i.i.i, i1 false) #24, !range !50
  %sub.i.i.i.i = sub nuw nsw i32 32, %10
  %cond.i.i.i.i = select i1 %tobool.not.i.i.i.i, i32 0, i32 %sub.i.i.i.i
  tail call void @free_pages(i32 noundef %9, i32 noundef %cond.i.i.i.i) #27
  br label %for.body

if.then13:                                        ; preds = %if.end7
  tail call void @bitmap_free(ptr noundef nonnull %call3) #27
  %call14 = tail call i32 @seq_release_private(ptr noundef %inode, ptr noundef %filep) #27
  br label %cleanup61

for.body:                                         ; preds = %if.then.i21.i, %if.then3.i, %if.end.i
  store i32 102, ptr %call, align 8
  %loc9.i = getelementptr inbounds %struct.loc_track, ptr %call, i32 0, i32 2
  store ptr %4, ptr %loc9.i, align 8
  %arrayidx.i = getelementptr %struct.kmem_cache, ptr %1, i32 0, i32 26, i32 0
  %11 = load ptr, ptr %arrayidx.i, align 4
  %tobool18.not = icmp eq ptr %11, null
  br i1 %tobool18.not, label %for.end60, label %if.then19

if.then19:                                        ; preds = %for.body
  %nr_slabs = getelementptr inbounds %struct.kmem_cache_node, ptr %11, i32 0, i32 3
  %12 = load volatile i32, ptr %nr_slabs, align 4
  %tobool21.not = icmp eq i32 %12, 0
  br i1 %tobool21.not, label %for.end60, label %do.body24

do.body24:                                        ; preds = %if.then19
  %call27 = tail call i32 @_raw_spin_lock_irqsave(ptr noundef nonnull %11) #27
  %partial = getelementptr inbounds %struct.kmem_cache_node, ptr %11, i32 0, i32 2
  %.pn99 = load ptr, ptr %partial, align 4
  %cmp33.not100 = icmp eq ptr %.pn99, %partial
  br i1 %cmp33.not100, label %for.end, label %for.body35

for.body35:                                       ; preds = %for.body35, %do.body24
  %.pn101 = phi ptr [ %.pn, %for.body35 ], [ %.pn99, %do.body24 ]
  %slab.0 = getelementptr i8, ptr %.pn101, i32 -4
  tail call fastcc void @process_slab(ptr noundef nonnull %call, ptr noundef %1, ptr noundef %slab.0, i32 noundef %., ptr noundef nonnull %call3) #25
  %.pn = load ptr, ptr %.pn101, align 4
  %cmp33.not = icmp eq ptr %.pn, %partial
  br i1 %cmp33.not, label %for.end, label %for.body35

for.end:                                          ; preds = %for.body35, %do.body24
  %full = getelementptr inbounds %struct.kmem_cache_node, ptr %11, i32 0, i32 5
  %.pn96102 = load ptr, ptr %full, align 4
  %cmp46.not103 = icmp eq ptr %.pn96102, %full
  br i1 %cmp46.not103, label %for.end55, label %for.body49

for.body49:                                       ; preds = %for.body49, %for.end
  %.pn96104 = phi ptr [ %.pn96, %for.body49 ], [ %.pn96102, %for.end ]
  %slab.1 = getelementptr i8, ptr %.pn96104, i32 -4
  tail call fastcc void @process_slab(ptr noundef nonnull %call, ptr noundef %1, ptr noundef %slab.1, i32 noundef %., ptr noundef nonnull %call3) #25
  %.pn96 = load ptr, ptr %.pn96104, align 4
  %cmp46.not = icmp eq ptr %.pn96, %full
  br i1 %cmp46.not, label %for.end55, label %for.body49

for.end55:                                        ; preds = %for.body49, %for.end
  tail call void @_raw_spin_unlock_irqrestore(ptr noundef nonnull %11, i32 noundef %call27) #27
  br label %for.end60

for.end60:                                        ; preds = %for.end55, %if.then19, %for.body
  tail call void @bitmap_free(ptr noundef nonnull %call3) #27
  br label %cleanup61

cleanup61:                                        ; preds = %for.end60, %if.then13, %if.then5, %entry
  %retval.0 = phi i32 [ 0, %for.end60 ], [ -12, %if.then13 ], [ -12, %if.then5 ], [ -12, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @slab_debug_trace_release(ptr noundef %inode, ptr noundef %file) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %private_data = getelementptr inbounds %struct.file, ptr %file, i32 0, i32 16
  %0 = load ptr, ptr %private_data, align 4
  %private = getelementptr inbounds %struct.seq_file, ptr %0, i32 0, i32 11
  %1 = load ptr, ptr %private, align 8
  %2 = load i32, ptr %1, align 8
  %tobool.not.i = icmp eq i32 %2, 0
  br i1 %tobool.not.i, label %free_loc_track.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %loc.i = getelementptr inbounds %struct.loc_track, ptr %1, i32 0, i32 2
  %3 = load ptr, ptr %loc.i, align 8
  %4 = ptrtoint ptr %3 to i32
  %mul.i = mul i32 %2, 40
  %dec.i.i = add i32 %mul.i, -1
  %tobool.not.i.i.i = icmp ult i32 %dec.i.i, 4096
  %shr.i.i = lshr i32 %dec.i.i, 12
  %5 = tail call i32 @llvm.ctlz.i32(i32 %shr.i.i, i1 false) #24, !range !50
  %sub.i.i.i = sub nuw nsw i32 32, %5
  %cond.i.i.i = select i1 %tobool.not.i.i.i, i32 0, i32 %sub.i.i.i
  tail call void @free_pages(i32 noundef %4, i32 noundef %cond.i.i.i) #27
  br label %free_loc_track.exit

free_loc_track.exit:                              ; preds = %if.then.i, %entry
  %call = tail call i32 @seq_release_private(ptr noundef %inode, ptr noundef %file) #27
  ret i32 %call
}

; Function Attrs: null_pointer_is_valid
declare dso_local ptr @__seq_open_private(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @seq_release_private(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal fastcc void @process_slab(ptr nocapture noundef %t, ptr nocapture noundef readonly %s, ptr noundef %slab, i32 noundef %alloc, ptr noundef %obj_map) unnamed_addr #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %call.i.i = tail call ptr @page_address(ptr noundef %slab) #27
  tail call fastcc void @__fill_map(ptr noundef %obj_map, ptr noundef %s, ptr noundef %slab) #25
  callbr void asm sideeffect "1:\0A\09b ${1:l}\0A\09.pushsection __jump_table,  \22aw\22\0A\09.word 1b, ${1:l}, ${0:c}\0A\09.popsection\0A\09", "i,i"(ptr nonnull @slub_debug_enabled, ptr blockaddress(@process_slab, %if.then37.i.i)) #24
          to label %fixup_red_left.exit [label %if.then37.i.i], !srcloc !10

if.then37.i.i:                                    ; preds = %entry
  %flags38.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 1
  %0 = load i32, ptr %flags38.i.i, align 4
  %and39.i.i = and i32 %0, 1024
  %tobool40.i.not.i = icmp eq i32 %and39.i.i, 0
  br i1 %tobool40.i.not.i, label %fixup_red_left.exit, label %if.then.i

if.then.i:                                        ; preds = %if.then37.i.i
  %red_left_pad.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 17
  %1 = load i32, ptr %red_left_pad.i, align 4
  %add.ptr.i = getelementptr i8, ptr %call.i.i, i32 %1
  br label %fixup_red_left.exit

fixup_red_left.exit:                              ; preds = %if.then.i, %if.then37.i.i, %entry
  %p.addr.0.i = phi ptr [ %add.ptr.i, %if.then.i ], [ %call.i.i, %if.then37.i.i ], [ %call.i.i, %entry ]
  %2 = getelementptr inbounds %struct.slab, ptr %slab, i32 0, i32 4
  %size = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 3
  %bf.load30 = load i32, ptr %2, align 4
  %bf.lshr31 = lshr i32 %bf.load30, 1
  %bf.clear32 = and i32 %bf.lshr31, 32767
  %3 = load i32, ptr %size, align 4
  %mul33 = mul i32 %bf.clear32, %3
  %add.ptr34 = getelementptr i8, ptr %call.i.i, i32 %mul33
  %cmp35 = icmp ult ptr %p.addr.0.i, %add.ptr34
  br i1 %cmp35, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %fixup_red_left.exit
  %sub.ptr.rhs.cast.i = ptrtoint ptr %call.i.i to i32
  %reciprocal_size.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 5
  %.elt2.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 5, i32 1
  %offset.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 6
  %inuse.i.i.i = getelementptr inbounds %struct.kmem_cache, ptr %s, i32 0, i32 15
  %count.i = getelementptr inbounds %struct.loc_track, ptr %t, i32 0, i32 1
  %loc.i = getelementptr inbounds %struct.loc_track, ptr %t, i32 0, i32 2
  br label %for.body

for.body:                                         ; preds = %for.inc, %for.body.lr.ph
  %p.036 = phi ptr [ %p.addr.0.i, %for.body.lr.ph ], [ %add.ptr7, %for.inc ]
  %sub.ptr.lhs.cast.i = ptrtoint ptr %p.036 to i32
  %sub.ptr.sub.i = sub i32 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i
  %.unpack.i = load i32, ptr %reciprocal_size.i, align 4
  %.unpack3.i = load i32, ptr %.elt2.i, align 4
  %R.sroa.2.4.extract.shift.i.i = lshr i32 %.unpack3.i, 24
  %R.sroa.4.4.extract.shift.i.i = lshr i32 %.unpack3.i, 16
  %conv.i.i = zext i32 %sub.ptr.sub.i to i64
  %conv1.i.i = zext i32 %.unpack.i to i64
  %mul.i.i = mul nuw i64 %conv1.i.i, %conv.i.i
  %shr.i.i = lshr i64 %mul.i.i, 32
  %conv2.i.i = trunc i64 %shr.i.i to i32
  %sub.i.i = sub i32 %sub.ptr.sub.i, %conv2.i.i
  %shr4.i.i = lshr i32 %sub.i.i, %R.sroa.2.4.extract.shift.i.i
  %add.i.i = add i32 %shr4.i.i, %conv2.i.i
  %conv5.i.i = and i32 %R.sroa.4.4.extract.shift.i.i, 255
  %shr6.i.i = lshr i32 %add.i.i, %conv5.i.i
  %div3.i = lshr i32 %shr6.i.i, 5
  %arrayidx.i = getelementptr i32, ptr %obj_map, i32 %div3.i
  %4 = load volatile i32, ptr %arrayidx.i, align 4
  %and.i = and i32 %shr6.i.i, 31
  %5 = shl nuw i32 1, %and.i
  %6 = and i32 %5, %4
  %tobool.not = icmp eq i32 %6, 0
  br i1 %tobool.not, label %if.then, label %for.inc

if.then:                                          ; preds = %for.body
  %7 = load i32, ptr %offset.i.i.i, align 4
  %8 = load i32, ptr %inuse.i.i.i, align 4
  %cmp.i.not.i.i = icmp ult i32 %7, %8
  %add.i.i22 = add i32 %8, 4
  %spec.select.i.i = select i1 %cmp.i.not.i.i, i32 %8, i32 %add.i.i22
  %add.ptr.i23 = getelementptr i8, ptr %p.036, i32 %spec.select.i.i
  %add.ptr1.i = getelementptr %struct.track, ptr %add.ptr.i23, i32 %alloc
  %9 = load volatile i32, ptr @jiffies, align 128
  %when.i = getelementptr inbounds %struct.track, ptr %add.ptr1.i, i32 0, i32 4
  %10 = load i32, ptr %when.i, align 4
  %sub.i = sub i32 %9, %10
  %11 = load i32, ptr %count.i, align 4
  %add18.i = add i32 %11, 2
  %div19.i = sdiv i32 %add18.i, 2
  %add220.i = add nsw i32 %div19.i, -1
  %cmp21.i = icmp eq i32 %add220.i, %11
  br i1 %cmp21.i, label %for.end.i, label %if.end.lr.ph.i

if.end.lr.ph.i:                                   ; preds = %if.then
  %12 = load ptr, ptr %loc.i, align 8
  %13 = load i32, ptr %add.ptr1.i, align 4
  br label %if.end.i

if.end.i:                                         ; preds = %if.end39.i, %if.end.lr.ph.i
  %add224.i = phi i32 [ %add220.i, %if.end.lr.ph.i ], [ %add2.i, %if.end39.i ]
  %end.023.i = phi i32 [ %11, %if.end.lr.ph.i ], [ %add2.end.0.i, %if.end39.i ]
  %start.022.i = phi i32 [ -1, %if.end.lr.ph.i ], [ %start.0.add2.i, %if.end39.i ]
  %addr.i = getelementptr %struct.location, ptr %12, i32 %add224.i, i32 1
  %14 = load i32, ptr %addr.i, align 4
  %cmp4.i = icmp eq i32 %13, %14
  br i1 %cmp4.i, label %if.then5.i, label %if.end39.i

if.then5.i:                                       ; preds = %if.end.i
  %arrayidx.i24 = getelementptr %struct.location, ptr %12, i32 %add224.i
  %15 = load i32, ptr %arrayidx.i24, align 8
  %inc.i = add i32 %15, 1
  store i32 %inc.i, ptr %arrayidx.i24, align 8
  %16 = load i32, ptr %when.i, align 4
  %tobool.not.i = icmp eq i32 %16, 0
  br i1 %tobool.not.i, label %if.end35.i, label %if.then10.i

if.then10.i:                                      ; preds = %if.then5.i
  %conv.i = zext i32 %sub.i to i64
  %sum_time.i = getelementptr %struct.location, ptr %12, i32 %add224.i, i32 2
  %17 = load i64, ptr %sum_time.i, align 8
  %add11.i = add i64 %17, %conv.i
  store i64 %add11.i, ptr %sum_time.i, align 8
  %min_time.i = getelementptr %struct.location, ptr %12, i32 %add224.i, i32 3
  %18 = load i32, ptr %min_time.i, align 8
  %cmp12.i = icmp ult i32 %sub.i, %18
  br i1 %cmp12.i, label %if.then14.i, label %if.end16.i

if.then14.i:                                      ; preds = %if.then10.i
  store i32 %sub.i, ptr %min_time.i, align 8
  br label %if.end16.i

if.end16.i:                                       ; preds = %if.then14.i, %if.then10.i
  %max_time.i = getelementptr %struct.location, ptr %12, i32 %add224.i, i32 4
  %19 = load i32, ptr %max_time.i, align 4
  %cmp17.i = icmp ugt i32 %sub.i, %19
  br i1 %cmp17.i, label %if.then19.i, label %if.end21.i

if.then19.i:                                      ; preds = %if.end16.i
  store i32 %sub.i, ptr %max_time.i, align 4
  br label %if.end21.i

if.end21.i:                                       ; preds = %if.then19.i, %if.end16.i
  %pid.i = getelementptr inbounds %struct.track, ptr %add.ptr1.i, i32 0, i32 3
  %20 = load i32, ptr %pid.i, align 4
  %min_pid.i = getelementptr %struct.location, ptr %12, i32 %add224.i, i32 5
  %21 = load i32, ptr %min_pid.i, align 8
  %cmp22.i = icmp slt i32 %20, %21
  br i1 %cmp22.i, label %if.then24.i, label %if.end27.i

if.then24.i:                                      ; preds = %if.end21.i
  store i32 %20, ptr %min_pid.i, align 8
  %.pre.i = load i32, ptr %pid.i, align 4
  br label %if.end27.i

if.end27.i:                                       ; preds = %if.then24.i, %if.end21.i
  %22 = phi i32 [ %.pre.i, %if.then24.i ], [ %20, %if.end21.i ]
  %max_pid.i = getelementptr %struct.location, ptr %12, i32 %add224.i, i32 6
  %23 = load i32, ptr %max_pid.i, align 4
  %cmp29.i = icmp sgt i32 %22, %23
  br i1 %cmp29.i, label %if.then31.i, label %if.end34.i

if.then31.i:                                      ; preds = %if.end27.i
  store i32 %22, ptr %max_pid.i, align 4
  br label %if.end34.i

if.end34.i:                                       ; preds = %if.then31.i, %if.end27.i
  %cpu.i = getelementptr inbounds %struct.track, ptr %add.ptr1.i, i32 0, i32 2
  %24 = load i32, ptr %cpu.i, align 4
  %cpus.i = getelementptr %struct.location, ptr %12, i32 %add224.i, i32 7
  %25 = load i32, ptr @nr_cpu_ids, align 4
  %cmp.i.i.i.i = icmp ule i32 %25, %24
  %.b37.i.i.i.i = load i1, ptr @cpu_max_bits_warn.__already_done, align 1
  %lnot3.i.i.i.i = xor i1 %.b37.i.i.i.i, true
  %26 = select i1 %cmp.i.i.i.i, i1 %lnot3.i.i.i.i, i1 false
  br i1 %26, label %if.then.i.i.i.i, label %cpumask_set_cpu.exit.i, !prof !13

if.then.i.i.i.i:                                  ; preds = %if.end34.i
  store i1 true, ptr @cpu_max_bits_warn.__already_done, align 1
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.24, i32 noundef 108, i32 noundef 9, ptr noundef null) #27
  br label %cpumask_set_cpu.exit.i

cpumask_set_cpu.exit.i:                           ; preds = %if.then.i.i.i.i, %if.end34.i
  tail call void @_set_bit(i32 noundef %24, ptr noundef %cpus.i) #27
  br label %if.end35.i

if.end35.i:                                       ; preds = %cpumask_set_cpu.exit.i, %if.then5.i
  %27 = load ptr, ptr @mem_map, align 4
  %28 = ptrtoint ptr %add.ptr1.i to i32
  %sub36.i = add i32 %28, 1073741824
  %shr.i25 = lshr i32 %sub36.i, 12
  %add.ptr.i26 = getelementptr %struct.page, ptr %27, i32 %shr.i25
  %29 = load volatile i32, ptr %add.ptr.i26, align 4
  %cmp.i.not.i.i27 = icmp eq i32 %29, -1
  br i1 %cmp.i.not.i.i27, label %if.then.i.i, label %page_to_nid.exit.i, !prof !13

if.then.i.i:                                      ; preds = %if.end35.i
  tail call void @dump_page(ptr noundef %add.ptr.i26, ptr noundef nonnull @.str.88) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/mm.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 1368, 0\0A.popsection", ""() #24, !srcloc !37
  unreachable

page_to_nid.exit.i:                               ; preds = %if.end35.i
  %nodes.i = getelementptr %struct.location, ptr %12, i32 %add224.i, i32 8
  br label %cleanup.sink.split.i

if.end39.i:                                       ; preds = %if.end.i
  %cmp41.i = icmp ult i32 %13, %14
  %start.0.add2.i = select i1 %cmp41.i, i32 %start.022.i, i32 %add224.i
  %add2.end.0.i = select i1 %cmp41.i, i32 %add224.i, i32 %end.023.i
  %sub1.i = sub i32 1, %start.0.add2.i
  %add.i = add i32 %sub1.i, %add2.end.0.i
  %div.i = sdiv i32 %add.i, 2
  %add2.i = add i32 %div.i, %start.0.add2.i
  %cmp.i = icmp eq i32 %add2.i, %add2.end.0.i
  br i1 %cmp.i, label %for.end.i, label %if.end.i

for.end.i:                                        ; preds = %if.end39.i, %if.then
  %add2.lcssa.i = phi i32 [ %11, %if.then ], [ %add2.end.0.i, %if.end39.i ]
  %30 = load i32, ptr %t, align 8
  %cmp46.not.i = icmp ult i32 %11, %30
  br i1 %cmp46.not.i, label %for.end.if.end52_crit_edge.i, label %land.lhs.true.i

for.end.if.end52_crit_edge.i:                     ; preds = %for.end.i
  %.pre27.i = load ptr, ptr %loc.i, align 8
  br label %if.end52.i

land.lhs.true.i:                                  ; preds = %for.end.i
  %mul.i = shl i32 %30, 1
  %mul.i.i28 = mul i32 %30, 80
  %dec.i.i.i = add i32 %mul.i.i28, -1
  %tobool.not.i.i.i.i = icmp ult i32 %dec.i.i.i, 4096
  %shr.i.i.i = lshr i32 %dec.i.i.i, 12
  %31 = tail call i32 @llvm.ctlz.i32(i32 %shr.i.i.i, i1 false) #24, !range !50
  %sub.i.i.i.i = sub nuw nsw i32 32, %31
  %cond.i.i.i.i = select i1 %tobool.not.i.i.i.i, i32 0, i32 %sub.i.i.i.i
  %call1.i.i = tail call i32 @__get_free_pages(i32 noundef 2592, i32 noundef %cond.i.i.i.i) #27
  %32 = inttoptr i32 %call1.i.i to ptr
  %tobool.not.i.i = icmp eq i32 %call1.i.i, 0
  br i1 %tobool.not.i.i, label %for.inc, label %if.end.i.i

if.end.i.i:                                       ; preds = %land.lhs.true.i
  %33 = load i32, ptr %count.i, align 4
  %tobool2.not.i.i = icmp eq i32 %33, 0
  br i1 %tobool2.not.i.i, label %alloc_loc_track.exit.i, label %if.then3.i.i

if.then3.i.i:                                     ; preds = %if.end.i.i
  %34 = load ptr, ptr %loc.i, align 8
  %mul5.i.i = mul i32 %33, 40
  %call6.i.i = tail call ptr @__memcpy(ptr noundef nonnull %32, ptr noundef %34, i32 noundef %mul5.i.i) #27
  %35 = load i32, ptr %t, align 8
  %tobool.not.i20.i.i = icmp eq i32 %35, 0
  br i1 %tobool.not.i20.i.i, label %alloc_loc_track.exit.i, label %if.then.i21.i.i

if.then.i21.i.i:                                  ; preds = %if.then3.i.i
  %36 = load ptr, ptr %loc.i, align 8
  %37 = ptrtoint ptr %36 to i32
  %mul.i.i.i = mul i32 %35, 40
  %dec.i.i.i.i = add i32 %mul.i.i.i, -1
  %tobool.not.i.i.i.i.i = icmp ult i32 %dec.i.i.i.i, 4096
  %shr.i.i.i.i = lshr i32 %dec.i.i.i.i, 12
  %38 = tail call i32 @llvm.ctlz.i32(i32 %shr.i.i.i.i, i1 false) #24, !range !50
  %sub.i.i.i.i.i = sub nuw nsw i32 32, %38
  %cond.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 0, i32 %sub.i.i.i.i.i
  tail call void @free_pages(i32 noundef %37, i32 noundef %cond.i.i.i.i.i) #27
  br label %alloc_loc_track.exit.i

alloc_loc_track.exit.i:                           ; preds = %if.then.i21.i.i, %if.then3.i.i, %if.end.i.i
  store i32 %mul.i, ptr %t, align 8
  store ptr %32, ptr %loc.i, align 8
  %.pre28.i = load i32, ptr %count.i, align 4
  br label %if.end52.i

if.end52.i:                                       ; preds = %alloc_loc_track.exit.i, %for.end.if.end52_crit_edge.i
  %39 = phi i32 [ %11, %for.end.if.end52_crit_edge.i ], [ %.pre28.i, %alloc_loc_track.exit.i ]
  %40 = phi ptr [ %.pre27.i, %for.end.if.end52_crit_edge.i ], [ %32, %alloc_loc_track.exit.i ]
  %add.ptr54.i = getelementptr %struct.location, ptr %40, i32 %add2.lcssa.i
  %cmp56.i = icmp ugt i32 %39, %add2.lcssa.i
  br i1 %cmp56.i, label %if.then58.i, label %if.end64.i

if.then58.i:                                      ; preds = %if.end52.i
  %add.ptr59.i = getelementptr %struct.location, ptr %add.ptr54.i, i32 1
  %sub61.i = sub i32 %39, %add2.lcssa.i
  %mul62.i = mul i32 %sub61.i, 40
  %call63.i = tail call ptr @__memmove(ptr noundef %add.ptr59.i, ptr noundef %add.ptr54.i, i32 noundef %mul62.i) #27
  %.pre29.i = load i32, ptr %count.i, align 4
  br label %if.end64.i

if.end64.i:                                       ; preds = %if.then58.i, %if.end52.i
  %41 = phi i32 [ %.pre29.i, %if.then58.i ], [ %39, %if.end52.i ]
  %inc66.i = add i32 %41, 1
  store i32 %inc66.i, ptr %count.i, align 4
  store i32 1, ptr %add.ptr54.i, align 8
  %42 = load i32, ptr %add.ptr1.i, align 4
  %addr69.i = getelementptr %struct.location, ptr %40, i32 %add2.lcssa.i, i32 1
  store i32 %42, ptr %addr69.i, align 4
  %conv70.i = zext i32 %sub.i to i64
  %sum_time71.i = getelementptr %struct.location, ptr %40, i32 %add2.lcssa.i, i32 2
  store i64 %conv70.i, ptr %sum_time71.i, align 8
  %min_time72.i = getelementptr %struct.location, ptr %40, i32 %add2.lcssa.i, i32 3
  store i32 %sub.i, ptr %min_time72.i, align 8
  %max_time73.i = getelementptr %struct.location, ptr %40, i32 %add2.lcssa.i, i32 4
  store i32 %sub.i, ptr %max_time73.i, align 4
  %pid74.i = getelementptr inbounds %struct.track, ptr %add.ptr1.i, i32 0, i32 3
  %43 = load i32, ptr %pid74.i, align 4
  %min_pid75.i = getelementptr %struct.location, ptr %40, i32 %add2.lcssa.i, i32 5
  store i32 %43, ptr %min_pid75.i, align 8
  %44 = load i32, ptr %pid74.i, align 4
  %max_pid77.i = getelementptr %struct.location, ptr %40, i32 %add2.lcssa.i, i32 6
  store i32 %44, ptr %max_pid77.i, align 4
  %cpus78.i = getelementptr %struct.location, ptr %40, i32 %add2.lcssa.i, i32 7
  %45 = load i32, ptr @nr_cpu_ids, align 4
  %sub.i.i3.i = add i32 %45, 31
  %46 = lshr i32 %sub.i.i3.i, 3
  %mul.i.i4.i = and i32 %46, 536870908
  %call.i.i.i = tail call ptr @__memset(ptr noundef %cpus78.i, i32 noundef 0, i32 noundef %mul.i.i4.i) #27
  %cpu80.i = getelementptr inbounds %struct.track, ptr %add.ptr1.i, i32 0, i32 2
  %47 = load i32, ptr %cpu80.i, align 4
  %48 = load i32, ptr @nr_cpu_ids, align 4
  %cmp.i.i.i5.i = icmp ule i32 %48, %47
  %.b37.i.i.i6.i = load i1, ptr @cpu_max_bits_warn.__already_done, align 1
  %lnot3.i.i.i7.i = xor i1 %.b37.i.i.i6.i, true
  %49 = select i1 %cmp.i.i.i5.i, i1 %lnot3.i.i.i7.i, i1 false
  br i1 %49, label %if.then.i.i.i8.i, label %cpumask_set_cpu.exit9.i, !prof !13

if.then.i.i.i8.i:                                 ; preds = %if.end64.i
  store i1 true, ptr @cpu_max_bits_warn.__already_done, align 1
  tail call void (ptr, i32, i32, ptr, ...) @warn_slowpath_fmt(ptr noundef nonnull @.str.24, i32 noundef 108, i32 noundef 9, ptr noundef null) #27
  br label %cpumask_set_cpu.exit9.i

cpumask_set_cpu.exit9.i:                          ; preds = %if.then.i.i.i8.i, %if.end64.i
  tail call void @_set_bit(i32 noundef %47, ptr noundef %cpus78.i) #27
  %nodes83.i = getelementptr %struct.location, ptr %40, i32 %add2.lcssa.i, i32 8
  %call.i.i10.i = tail call ptr @__memset(ptr noundef %nodes83.i, i32 noundef 0, i32 noundef 4) #27
  %50 = load ptr, ptr @mem_map, align 4
  %51 = ptrtoint ptr %add.ptr1.i to i32
  %sub84.i = add i32 %51, 1073741824
  %shr85.i = lshr i32 %sub84.i, 12
  %add.ptr88.i = getelementptr %struct.page, ptr %50, i32 %shr85.i
  %52 = load volatile i32, ptr %add.ptr88.i, align 4
  %cmp.i.not.i11.i = icmp eq i32 %52, -1
  br i1 %cmp.i.not.i11.i, label %if.then.i12.i, label %cleanup.sink.split.i, !prof !13

if.then.i12.i:                                    ; preds = %cpumask_set_cpu.exit9.i
  tail call void @dump_page(ptr noundef %add.ptr88.i, ptr noundef nonnull @.str.88) #27
  tail call void asm sideeffect "1:\09.long ( (((0xe7f001f2) << 24) & 0xFF000000) | (((0xe7f001f2) << 8) & 0x00FF0000) | (((0xe7f001f2) >> 8) & 0x0000FF00) | (((0xe7f001f2) >> 24) & 0x000000FF) )\0A\09\0A.pushsection .rodata.str, \22aMS\22, %progbits, 1\0A2:\09.asciz \22include/linux/mm.h\22\0A.popsection\0A.pushsection __bug_table,\22aw\22\0A.align 2\0A3:\09.word 1b, 2b\0A\09.hword 1368, 0\0A.popsection", ""() #24, !srcloc !37
  unreachable

cleanup.sink.split.i:                             ; preds = %cpumask_set_cpu.exit9.i, %page_to_nid.exit.i
  %nodes83.sink.i = phi ptr [ %nodes.i, %page_to_nid.exit.i ], [ %nodes83.i, %cpumask_set_cpu.exit9.i ]
  tail call void @_set_bit(i32 noundef 0, ptr noundef %nodes83.sink.i) #27
  br label %for.inc

for.inc:                                          ; preds = %cleanup.sink.split.i, %land.lhs.true.i, %for.body
  %53 = load i32, ptr %size, align 4
  %add.ptr7 = getelementptr i8, ptr %p.036, i32 %53
  %bf.load = load i32, ptr %2, align 4
  %bf.lshr = lshr i32 %bf.load, 1
  %bf.clear = and i32 %bf.lshr, 32767
  %mul = mul i32 %bf.clear, %53
  %add.ptr = getelementptr i8, ptr %call.i.i, i32 %mul
  %cmp = icmp ult ptr %add.ptr7, %add.ptr
  br i1 %cmp, label %for.body, label %for.end

for.end:                                          ; preds = %for.inc, %fixup_red_left.exit
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind null_pointer_is_valid sspstrong willreturn uwtable(sync)
define internal ptr @slab_debugfs_start(ptr nocapture noundef readonly %seq, ptr noundef readonly returned %ppos) #23 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %private = getelementptr inbounds %struct.seq_file, ptr %seq, i32 0, i32 11
  %0 = load ptr, ptr %private, align 8
  %1 = load i64, ptr %ppos, align 8
  %idx = getelementptr inbounds %struct.loc_track, ptr %0, i32 0, i32 3
  store i64 %1, ptr %idx, align 8
  ret ptr %ppos
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind null_pointer_is_valid readnone sspstrong willreturn uwtable(sync)
define internal void @slab_debugfs_stop(ptr nocapture noundef %seq, ptr nocapture noundef %v) #13 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind null_pointer_is_valid sspstrong willreturn uwtable(sync)
define internal ptr @slab_debugfs_next(ptr nocapture noundef readonly %seq, ptr nocapture noundef readnone %v, ptr noundef %ppos) #23 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %private = getelementptr inbounds %struct.seq_file, ptr %seq, i32 0, i32 11
  %0 = load ptr, ptr %private, align 8
  %1 = load i64, ptr %ppos, align 8
  %inc = add i64 %1, 1
  store i64 %inc, ptr %ppos, align 8
  %idx = getelementptr inbounds %struct.loc_track, ptr %0, i32 0, i32 3
  store i64 %inc, ptr %idx, align 8
  %2 = load i64, ptr %ppos, align 8
  %count = getelementptr inbounds %struct.loc_track, ptr %0, i32 0, i32 1
  %3 = load i32, ptr %count, align 4
  %conv = zext i32 %3 to i64
  %cmp.not = icmp sgt i64 %2, %conv
  %.ppos = select i1 %cmp.not, ptr null, ptr %ppos
  ret ptr %.ppos
}

; Function Attrs: nounwind null_pointer_is_valid sspstrong uwtable(sync)
define internal i32 @slab_debugfs_show(ptr noundef %seq, ptr nocapture noundef readnone %v) #0 align 64 {
entry:
  call void @llvm.arm.gnu.eabi.mcount()
  %private = getelementptr inbounds %struct.seq_file, ptr %seq, i32 0, i32 11
  %0 = load ptr, ptr %private, align 8
  %idx1 = getelementptr inbounds %struct.loc_track, ptr %0, i32 0, i32 3
  %1 = load i64, ptr %idx1, align 8
  %conv = trunc i64 %1 to i32
  %count = getelementptr inbounds %struct.loc_track, ptr %0, i32 0, i32 1
  %2 = load i32, ptr %count, align 4
  %cmp = icmp ugt i32 %2, %conv
  br i1 %cmp, label %if.then, label %if.end33

if.then:                                          ; preds = %entry
  %loc = getelementptr inbounds %struct.loc_track, ptr %0, i32 0, i32 2
  %3 = load ptr, ptr %loc, align 8
  %arrayidx = getelementptr %struct.location, ptr %3, i32 %conv
  %4 = load i32, ptr %arrayidx, align 8
  tail call void (ptr, ptr, ...) @seq_printf(ptr noundef %seq, ptr noundef nonnull @.str.219, i32 noundef %4) #27
  %addr = getelementptr %struct.location, ptr %3, i32 %conv, i32 1
  %5 = load i32, ptr %addr, align 4
  %tobool.not = icmp eq i32 %5, 0
  br i1 %tobool.not, label %if.else, label %if.then4

if.then4:                                         ; preds = %if.then
  %6 = inttoptr i32 %5 to ptr
  tail call void (ptr, ptr, ...) @seq_printf(ptr noundef %seq, ptr noundef nonnull @.str.220, ptr noundef nonnull %6) #27
  br label %if.end

if.else:                                          ; preds = %if.then
  tail call void @seq_puts(ptr noundef %seq, ptr noundef nonnull @.str.221) #27
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then4
  %sum_time = getelementptr %struct.location, ptr %3, i32 %conv, i32 2
  %7 = load i64, ptr %sum_time, align 8
  %min_time = getelementptr %struct.location, ptr %3, i32 %conv, i32 3
  %8 = load i32, ptr %min_time, align 8
  %conv6 = sext i32 %8 to i64
  %cmp7.not = icmp eq i64 %7, %conv6
  br i1 %cmp7.not, label %if.else13, label %if.then9

if.then9:                                         ; preds = %if.end
  %9 = load i32, ptr %arrayidx, align 8
  %cmp164.i.i = icmp ult i64 %7, 4294967296
  br i1 %cmp164.i.i, label %if.then168.i.i, label %if.else174.i.i, !prof !14

if.then168.i.i:                                   ; preds = %if.then9
  %conv169.i.i = trunc i64 %7 to i32
  %div172.i.i = udiv i32 %conv169.i.i, %9
  %conv173.i.i = zext i32 %div172.i.i to i64
  br label %div_u64.exit

if.else174.i.i:                                   ; preds = %if.then9
  %10 = tail call { i64, i64 } asm ".ifnc $0,r0; .ifnc $0r0,fpr11; .ifnc $0r0,r11fp; .ifnc $0r0,ipr12; .ifnc $0r0,r12ip; .err; .endif; .endif; .endif; .endif; .endif\0A\09.ifnc $1,r2; .ifnc $1r2,fpr11; .ifnc $1r2,r11fp; .ifnc $1r2,ipr12; .ifnc $1r2,r12ip; .err; .endif; .endif; .endif; .endif; .endif\0A\09.ifnc $2,r4; .ifnc $2r4,fpr11; .ifnc $2r4,r11fp; .ifnc $2r4,ipr12; .ifnc $2r4,r12ip; .err; .endif; .endif; .endif; .endif; .endif\0A\09bl\09__do_div64", "={r0},={r2},{r4},{r0},~{r12},~{lr},~{cc}"(i32 %9, i64 %7) #35, !srcloc !105
  %asmresult1.i.i.i = extractvalue { i64, i64 } %10, 1
  br label %div_u64.exit

div_u64.exit:                                     ; preds = %if.else174.i.i, %if.then168.i.i
  %dividend.addr.0.i.i = phi i64 [ %conv173.i.i, %if.then168.i.i ], [ %asmresult1.i.i.i, %if.else174.i.i ]
  %max_time = getelementptr %struct.location, ptr %3, i32 %conv, i32 4
  %11 = load i32, ptr %max_time, align 4
  tail call void (ptr, ptr, ...) @seq_printf(ptr noundef %seq, ptr noundef nonnull @.str.222, i32 noundef %8, i64 noundef %dividend.addr.0.i.i, i32 noundef %11) #27
  br label %if.end15

if.else13:                                        ; preds = %if.end
  tail call void (ptr, ptr, ...) @seq_printf(ptr noundef %seq, ptr noundef nonnull @.str.223, i32 noundef %8) #27
  br label %if.end15

if.end15:                                         ; preds = %if.else13, %div_u64.exit
  %min_pid = getelementptr %struct.location, ptr %3, i32 %conv, i32 5
  %12 = load i32, ptr %min_pid, align 8
  %max_pid = getelementptr %struct.location, ptr %3, i32 %conv, i32 6
  %13 = load i32, ptr %max_pid, align 4
  %cmp16.not = icmp eq i32 %12, %13
  br i1 %cmp16.not, label %if.else21, label %if.then18

if.then18:                                        ; preds = %if.end15
  tail call void (ptr, ptr, ...) @seq_printf(ptr noundef %seq, ptr noundef nonnull @.str.224, i32 noundef %12, i32 noundef %13) #27
  br label %if.end23

if.else21:                                        ; preds = %if.end15
  tail call void (ptr, ptr, ...) @seq_printf(ptr noundef %seq, ptr noundef nonnull @.str.225, i32 noundef %12) #27
  br label %if.end23

if.end23:                                         ; preds = %if.else21, %if.then18
  %14 = load volatile i32, ptr @__num_online_cpus, align 4
  %cmp25 = icmp ugt i32 %14, 1
  br i1 %cmp25, label %land.lhs.true, label %if.end32

land.lhs.true:                                    ; preds = %if.end23
  %cpus = getelementptr %struct.location, ptr %3, i32 %conv, i32 7
  %15 = load i32, ptr @nr_cpu_ids, align 4
  %call.i.i = tail call i32 @_find_first_bit_be(ptr noundef %cpus, i32 noundef %15) #27
  %cmp4.i.i = icmp eq i32 %call.i.i, %15
  br i1 %cmp4.i.i, label %if.end32, label %if.then28

if.then28:                                        ; preds = %land.lhs.true
  %.pre = load i32, ptr @nr_cpu_ids, align 4
  tail call void (ptr, ptr, ...) @seq_printf(ptr noundef %seq, ptr noundef nonnull @.str.226, i32 noundef %.pre, ptr noundef %cpus) #27
  br label %if.end32

if.end32:                                         ; preds = %if.then28, %land.lhs.true, %if.end23
  tail call void @seq_puts(ptr noundef %seq, ptr noundef nonnull @.str.155) #27
  br label %if.end33

if.end33:                                         ; preds = %if.end32, %entry
  %tobool34.not = icmp eq i32 %conv, 0
  br i1 %tobool34.not, label %land.lhs.true35, label %if.end39

land.lhs.true35:                                  ; preds = %if.end33
  %16 = load i32, ptr %count, align 4
  %tobool37.not = icmp eq i32 %16, 0
  br i1 %tobool37.not, label %if.then38, label %if.end39

if.then38:                                        ; preds = %land.lhs.true35
  tail call void @seq_puts(ptr noundef %seq, ptr noundef nonnull @.str.227) #27
  br label %if.end39

if.end39:                                         ; preds = %if.then38, %land.lhs.true35, %if.end33
  ret i32 0
}

; Function Attrs: null_pointer_is_valid
declare dso_local void @seq_printf(ptr noundef, ptr noundef, ...) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local void @seq_puts(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local i32 @__get_free_pages(i32 noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local void @free_pages(i32 noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: null_pointer_is_valid
declare dso_local ptr @__memmove(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.umax.i32(i32, i32) #14

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.umin.i32(i32, i32) #14

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.smin.i32(i32, i32) #14

; Function Attrs: nounwind
declare void @llvm.arm.gnu.eabi.mcount() #24

attributes #0 = { nounwind null_pointer_is_valid sspstrong uwtable(sync) "frame-pointer"="all" "min-legal-vector-width"="0" "no-builtins" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="mpcore" "target-features"="+armv6k,+dsp,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" "warn-stack-size"="1024" }
attributes #1 = { argmemonly nocallback nofree nosync nounwind willreturn }
attributes #2 = { cold nounwind null_pointer_is_valid optsize sspstrong uwtable(sync) "frame-pointer"="all" "min-legal-vector-width"="0" "no-builtins" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="mpcore" "target-features"="+armv6k,+dsp,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" "warn-stack-size"="1024" }
attributes #3 = { null_pointer_is_valid "frame-pointer"="all" "no-builtins" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="mpcore" "target-features"="+armv6k,+dsp,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" }
attributes #4 = { nocallback nofree nosync nounwind readnone willreturn }
attributes #5 = { inlinehint nounwind null_pointer_is_valid sspstrong uwtable(sync) "frame-pointer"="all" "min-legal-vector-width"="0" "no-builtins" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="mpcore" "target-features"="+armv6k,+dsp,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" "warn-stack-size"="1024" }
attributes #6 = { nounwind null_pointer_is_valid sspstrong allocsize(2) uwtable(sync) "frame-pointer"="all" "min-legal-vector-width"="0" "no-builtins" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="mpcore" "target-features"="+armv6k,+dsp,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" "warn-stack-size"="1024" }
attributes #7 = { nofree norecurse nounwind null_pointer_is_valid sspstrong uwtable(sync) "frame-pointer"="all" "min-legal-vector-width"="0" "no-builtins" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="mpcore" "target-features"="+armv6k,+dsp,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" "warn-stack-size"="1024" }
attributes #8 = { nounwind null_pointer_is_valid sspstrong allocsize(0) uwtable(sync) "frame-pointer"="all" "min-legal-vector-width"="0" "no-builtins" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="mpcore" "target-features"="+armv6k,+dsp,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" "warn-stack-size"="1024" }
attributes #9 = { noreturn null_pointer_is_valid "frame-pointer"="all" "no-builtins" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="mpcore" "target-features"="+armv6k,+dsp,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" }
attributes #10 = { cold null_pointer_is_valid "frame-pointer"="all" "no-builtins" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="mpcore" "target-features"="+armv6k,+dsp,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" }
attributes #11 = { cold mustprogress nofree norecurse nosync nounwind null_pointer_is_valid optsize readnone sspstrong willreturn uwtable(sync) "frame-pointer"="all" "min-legal-vector-width"="0" "no-builtins" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="mpcore" "target-features"="+armv6k,+dsp,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" "warn-stack-size"="1024" }
attributes #12 = { argmemonly mustprogress nofree norecurse nosync nounwind null_pointer_is_valid readonly sspstrong willreturn uwtable(sync) "frame-pointer"="all" "min-legal-vector-width"="0" "no-builtins" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="mpcore" "target-features"="+armv6k,+dsp,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" "warn-stack-size"="1024" }
attributes #13 = { mustprogress nofree norecurse nosync nounwind null_pointer_is_valid readnone sspstrong willreturn uwtable(sync) "frame-pointer"="all" "min-legal-vector-width"="0" "no-builtins" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="mpcore" "target-features"="+armv6k,+dsp,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" "warn-stack-size"="1024" }
attributes #14 = { nocallback nofree nosync nounwind readnone speculatable willreturn }
attributes #15 = { inaccessiblemem_or_argmemonly nocallback nofree nosync nounwind willreturn }
attributes #16 = { argmemonly nofree nounwind willreturn writeonly }
attributes #17 = { noinline nounwind null_pointer_is_valid sspstrong uwtable(sync) "frame-pointer"="all" "min-legal-vector-width"="0" "no-builtins" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="mpcore" "target-features"="+armv6k,+dsp,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" "warn-stack-size"="1024" }
attributes #18 = { nocallback nofree nosync nounwind willreturn }
attributes #19 = { nounwind readonly }
attributes #20 = { mustprogress nofree nounwind null_pointer_is_valid readonly willreturn "frame-pointer"="all" "no-builtins" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="mpcore" "target-features"="+armv6k,+dsp,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" }
attributes #21 = { null_pointer_is_valid allocsize(0) "frame-pointer"="all" "no-builtins" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="mpcore" "target-features"="+armv6k,+dsp,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" }
attributes #22 = { nofree nounwind null_pointer_is_valid sspstrong uwtable(sync) "frame-pointer"="all" "min-legal-vector-width"="0" "no-builtins" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="mpcore" "target-features"="+armv6k,+dsp,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" "warn-stack-size"="1024" }
attributes #23 = { mustprogress nofree norecurse nosync nounwind null_pointer_is_valid sspstrong willreturn uwtable(sync) "frame-pointer"="all" "min-legal-vector-width"="0" "no-builtins" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="mpcore" "target-features"="+armv6k,+dsp,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" "warn-stack-size"="1024" }
attributes #24 = { nounwind }
attributes #25 = { nobuiltin "no-builtins" }
attributes #26 = { cold nobuiltin nounwind "no-builtins" }
attributes #27 = { nobuiltin nounwind "no-builtins" }
attributes #28 = { nobuiltin nounwind "function-inline-cost-multiplier"="2" "no-builtins" }
attributes #29 = { nobuiltin nounwind readonly willreturn "no-builtins" }
attributes #30 = { nobuiltin nounwind allocsize(0) "no-builtins" }
attributes #31 = { nobuiltin noreturn nounwind "no-builtins" }
attributes #32 = { cold nobuiltin "no-builtins" }
attributes #33 = { nobuiltin nounwind allocsize(2) "no-builtins" }
attributes #34 = { nobuiltin nounwind "function-inline-cost-multiplier"="4" "no-builtins" }
attributes #35 = { nounwind readnone }

!llvm.named.register.sp = !{!0}
!llvm.module.flags = !{!1, !2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9}

!0 = !{!"sp"}
!1 = !{i32 1, !"wchar_size", i32 2}
!2 = !{i32 1, !"min_enum_size", i32 4}
!3 = !{i32 8, !"branch-target-enforcement", i32 0}
!4 = !{i32 8, !"sign-return-address", i32 0}
!5 = !{i32 8, !"sign-return-address-all", i32 0}
!6 = !{i32 8, !"sign-return-address-with-bkey", i32 0}
!7 = !{i32 7, !"uwtable", i32 1}
!8 = !{i32 7, !"frame-pointer", i32 2}
!9 = !{!"clang version 15.0.0 (git@github.com:linkeLi0421/llvm-project15-IRDumperPass.git 23ab625cb005cd08da083f9b643a7feed9af8abe)"}
!10 = !{i64 2148422044, i64 2148422049, i64 2148422070, i64 2148422114, i64 2148422148, i64 2148422169}
!11 = !{!"auto-init"}
!12 = !{i64 2148421641, i64 2148421646, i64 2148421659, i64 2148421703, i64 2148421737, i64 2148421758}
!13 = !{!"branch_weights", i32 1, i32 2000}
!14 = !{!"branch_weights", i32 2000, i32 1}
!15 = !{i64 2156376040}
!16 = !{!"branch_weights", i32 4000000, i32 4001}
!17 = !{i64 2156398585, i64 2156398758, i64 2156398773, i64 2156398825, i64 2156398867, i64 2156398891, i64 2156398932, i64 2156398953, i64 2156398981, i64 2156399014}
!18 = !{i64 2156399340, i64 2156399513, i64 2156399528, i64 2156399580, i64 2156399622, i64 2156399646, i64 2156399687, i64 2156399708, i64 2156399736, i64 2156399769}
!19 = !{i64 1225644, i64 1225705}
!20 = !{i64 1228376}
!21 = !{i64 1228661}
!22 = !{i64 2155486156}
!23 = !{i64 2155486449}
!24 = !{i64 2150164969}
!25 = !{i64 2150166005}
!26 = !{i64 2155468523}
!27 = !{i64 2155468798}
!28 = !{i64 2150376075, i64 2150376566, i64 2150376112, i64 2150376168, i64 2150376202, i64 2150376226, i64 2150376267, i64 2150376288, i64 2150376316, i64 2150376350}
!29 = !{i64 2156419386}
!30 = !{i64 2155750672, i64 2155751146, i64 2155750709, i64 2155750765, i64 2155750799, i64 2155750823, i64 2155750864, i64 2155750885, i64 2155750913, i64 2155750947}
!31 = !{i64 2156443839, i64 2156444012, i64 2156444027, i64 2156444079, i64 2156444121, i64 2156444145, i64 2156444186, i64 2156444207, i64 2156444235, i64 2156444268}
!32 = !{i64 2156444594, i64 2156444767, i64 2156444782, i64 2156444834, i64 2156444876, i64 2156444900, i64 2156444941, i64 2156444962, i64 2156444990, i64 2156445023}
!33 = !{i64 2155560021}
!34 = !{i64 2155560254}
!35 = !{i64 2155172282, i64 2155172756, i64 2155172319, i64 2155172375, i64 2155172409, i64 2155172433, i64 2155172474, i64 2155172495, i64 2155172523, i64 2155172557}
!36 = !{i64 2155174676, i64 2155175150, i64 2155174713, i64 2155174769, i64 2155174803, i64 2155174827, i64 2155174868, i64 2155174889, i64 2155174917, i64 2155174951}
!37 = !{i64 2153297793, i64 2153298277, i64 2153297830, i64 2153297886, i64 2153297920, i64 2153297944, i64 2153297985, i64 2153298006, i64 2153298034, i64 2153298068}
!38 = !{i64 2156461054}
!39 = !{i64 1226079}
!40 = !{i64 1225889}
!41 = !{i64 2156468321}
!42 = !{i64 2156468584}
!43 = !{i64 2156334716, i64 2156335191, i64 2156334753, i64 2156334809, i64 2156334843, i64 2156334867, i64 2156334908, i64 2156334929, i64 2156334957, i64 2156334991}
!44 = !{i64 2156348595, i64 2156349070, i64 2156348632, i64 2156348688, i64 2156348722, i64 2156348746, i64 2156348787, i64 2156348808, i64 2156348836, i64 2156348870}
!45 = !{i64 2156365441}
!46 = !{i64 2156365747}
!47 = !{i64 2156490901, i64 2156491376, i64 2156490938, i64 2156490994, i64 2156491028, i64 2156491052, i64 2156491093, i64 2156491114, i64 2156491142, i64 2156491176}
!48 = !{i64 2148823429, i64 2148823455, i64 2148823484, i64 2148823518, i64 2148823549, i64 2148823572}
!49 = !{i8 0, i8 2}
!50 = !{i32 0, i32 33}
!51 = !{i64 2151142861, i64 2151143352, i64 2151142898, i64 2151142954, i64 2151142988, i64 2151143012, i64 2151143053, i64 2151143074, i64 2151143102, i64 2151143136}
!52 = !{i64 2155543748}
!53 = !{i64 2155543949}
!54 = !{i64 2156522672}
!55 = !{i64 2156522938, i64 2156523413, i64 2156522975, i64 2156523031, i64 2156523065, i64 2156523089, i64 2156523130, i64 2156523151, i64 2156523179, i64 2156523213}
!56 = !{i64 2156476492, i64 2156476967, i64 2156476529, i64 2156476585, i64 2156476619, i64 2156476643, i64 2156476684, i64 2156476705, i64 2156476733, i64 2156476767}
!57 = !{i64 2156478100, i64 2156478575, i64 2156478137, i64 2156478193, i64 2156478227, i64 2156478251, i64 2156478292, i64 2156478313, i64 2156478341, i64 2156478375}
!58 = !{i64 2156483258, i64 2156483733, i64 2156483295, i64 2156483351, i64 2156483385, i64 2156483409, i64 2156483450, i64 2156483471, i64 2156483499, i64 2156483533}
!59 = !{i64 2148820964, i64 2148820990, i64 2148821019, i64 2148821053, i64 2148821084, i64 2148821107}
!60 = !{i64 2156690972, i64 2156691447, i64 2156691009, i64 2156691065, i64 2156691099, i64 2156691123, i64 2156691164, i64 2156691185, i64 2156691213, i64 2156691247}
!61 = !{i64 2156692718, i64 2156693193, i64 2156692755, i64 2156692811, i64 2156692845, i64 2156692869, i64 2156692910, i64 2156692931, i64 2156692959, i64 2156692993}
!62 = !{i64 2148822494, i64 2148822526, i64 2148822555, i64 2148822589, i64 2148822620, i64 2148822643}
!63 = !{i64 2148910519}
!64 = !{i64 2148824959, i64 2148824991, i64 2148825020, i64 2148825054, i64 2148825085, i64 2148825108}
!65 = !{i64 2150106867}
!66 = distinct !{ptr @count_free, null, null}
!67 = !{i64 2156370739}
!68 = !{i64 2156371829}
!69 = !{!"branch_weights", i32 4001, i32 1}
!70 = !{i64 2155753929, i64 2155754403, i64 2155753966, i64 2155754022, i64 2155754056, i64 2155754080, i64 2155754121, i64 2155754142, i64 2155754170, i64 2155754204}
!71 = !{i64 2151442408}
!72 = !{!"branch_weights", i32 2146410443, i32 1073205}
!73 = !{i64 2148829822, i64 2148829854, i64 2148829883, i64 2148829917, i64 2148829948, i64 2148829971}
!74 = !{i64 2148918927}
!75 = !{i64 2151442568}
!76 = !{i64 2151442845}
!77 = !{i64 2151442687}
!78 = !{i64 2151443050}
!79 = !{i64 2155756322, i64 2155756796, i64 2155756359, i64 2155756415, i64 2155756449, i64 2155756473, i64 2155756514, i64 2155756535, i64 2155756563, i64 2155756597}
!80 = !{i64 2151446089, i64 2151446581, i64 2151446126, i64 2151446182, i64 2151446216, i64 2151446240, i64 2151446281, i64 2151446302, i64 2151446330, i64 2151446364}
!81 = !{i64 2148902949}
!82 = !{i64 2151447484}
!83 = !{i64 2156031496}
!84 = !{i64 2156031338}
!85 = !{i64 2156251681}
!86 = !{i64 2156269034}
!87 = !{i64 2156111540, i64 2156112015, i64 2156111577, i64 2156111633, i64 2156111667, i64 2156111691, i64 2156111732, i64 2156111753, i64 2156111781, i64 2156111815}
!88 = !{i64 2155988612}
!89 = !{i64 2155993546}
!90 = !{i64 2156015228}
!91 = !{i64 2156020122}
!92 = !{i64 2156028857}
!93 = !{i64 2156028699}
!94 = !{i64 2150156410}
!95 = !{i64 2148909440}
!96 = !{i64 2148824149, i64 2148824181, i64 2148824210, i64 2148824244, i64 2148824275, i64 2148824298}
!97 = !{i64 2148909669}
!98 = !{i64 2150156676}
!99 = !{i64 2156108818, i64 2156109293, i64 2156108855, i64 2156108911, i64 2156108945, i64 2156108969, i64 2156109010, i64 2156109031, i64 2156109059, i64 2156109093}
!100 = !{i64 2156089370, i64 2156089845, i64 2156089407, i64 2156089463, i64 2156089497, i64 2156089521, i64 2156089562, i64 2156089583, i64 2156089611, i64 2156089645}
!101 = !{i64 2156156938}
!102 = !{i64 2156174291}
!103 = !{i64 2156034979, i64 2156035453, i64 2156035016, i64 2156035072, i64 2156035106, i64 2156035130, i64 2156035171, i64 2156035192, i64 2156035220, i64 2156035254}
!104 = !{i32 12, i32 33}
!105 = !{i64 2148670749, i64 2148671029, i64 2148671363, i64 2148671697}
