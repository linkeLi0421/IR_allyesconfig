; ModuleID = '/llk/IR_all_yes/scripts/dtc/flattree.c_pt.bc'
source_filename = "../scripts/dtc/flattree.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.version_info = type { i32, i32, i32, i32 }
%struct.emitter = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%struct.data = type { i32, ptr, ptr }
%struct.fdt_header = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.dt_info = type { i32, ptr, i32, ptr, ptr }
%struct.reserve_info = type { i64, i64, ptr, ptr }
%struct.__va_list_tag = type { i32, i32, ptr, ptr }
%struct.node = type { i8, ptr, ptr, ptr, ptr, ptr, ptr, i32, i32, i32, i32, ptr, ptr, ptr, i8, i8 }
%struct.property = type { i8, ptr, %struct.data, ptr, ptr, ptr }
%struct.label = type { i8, ptr, ptr }
%struct.inbuf = type { ptr, ptr, ptr }
%struct.marker = type { i32, i32, ptr, ptr }

@version_table = internal global [5 x %struct.version_info] [%struct.version_info { i32 1, i32 1, i32 28, i32 7 }, %struct.version_info { i32 2, i32 1, i32 32, i32 15 }, %struct.version_info { i32 3, i32 1, i32 36, i32 31 }, %struct.version_info { i32 16, i32 16, i32 36, i32 88 }, %struct.version_info { i32 17, i32 16, i32 40, i32 120 }], align 16
@.str = private unnamed_addr constant [37 x i8] c"Unknown device tree blob version %d\0A\00", align 1
@bin_emitter = internal global %struct.emitter { ptr @bin_emit_cell, ptr @bin_emit_string, ptr @bin_emit_align, ptr @bin_emit_data, ptr @bin_emit_beginnode, ptr @bin_emit_endnode, ptr @bin_emit_property }, align 8
@minsize = external local_unnamed_addr global i32, align 4
@quiet = external local_unnamed_addr global i32, align 4
@stderr = external local_unnamed_addr global ptr, align 8
@.str.1 = private unnamed_addr constant [42 x i8] c"Warning: blob size %u >= minimum size %d\0A\00", align 1
@padsize = external local_unnamed_addr global i32, align 4
@alignsize = external local_unnamed_addr global i32, align 4
@.str.2 = private unnamed_addr constant [36 x i8] c"Error writing device tree blob: %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [33 x i8] c"Short write on device tree blob\0A\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"dt\00", align 1
@.str.5 = private unnamed_addr constant [42 x i8] c"/* autogenerated by dtc, do not edit */\0A\0A\00", align 1
@.str.6 = private unnamed_addr constant [11 x i8] c"blob_start\00", align 1
@.str.7 = private unnamed_addr constant [7 x i8] c"header\00", align 1
@.str.8 = private unnamed_addr constant [14 x i8] c"\09/* magic */\0A\00", align 1
@.str.9 = private unnamed_addr constant [18 x i8] c"\09/* totalsize */\0A\00", align 1
@.str.10 = private unnamed_addr constant [59 x i8] c"\09.byte\09((_%s_blob_abs_end - _%s_blob_start) >> 24) & 0xff\0A\00", align 1
@.str.11 = private unnamed_addr constant [59 x i8] c"\09.byte\09((_%s_blob_abs_end - _%s_blob_start) >> 16) & 0xff\0A\00", align 1
@.str.12 = private unnamed_addr constant [58 x i8] c"\09.byte\09((_%s_blob_abs_end - _%s_blob_start) >> 8) & 0xff\0A\00", align 1
@.str.13 = private unnamed_addr constant [51 x i8] c"\09.byte\09(_%s_blob_abs_end - _%s_blob_start) & 0xff\0A\00", align 1
@.str.14 = private unnamed_addr constant [22 x i8] c"\09/* off_dt_struct */\0A\00", align 1
@.str.15 = private unnamed_addr constant [59 x i8] c"\09.byte\09((_%s_struct_start - _%s_blob_start) >> 24) & 0xff\0A\00", align 1
@.str.16 = private unnamed_addr constant [59 x i8] c"\09.byte\09((_%s_struct_start - _%s_blob_start) >> 16) & 0xff\0A\00", align 1
@.str.17 = private unnamed_addr constant [58 x i8] c"\09.byte\09((_%s_struct_start - _%s_blob_start) >> 8) & 0xff\0A\00", align 1
@.str.18 = private unnamed_addr constant [51 x i8] c"\09.byte\09(_%s_struct_start - _%s_blob_start) & 0xff\0A\00", align 1
@.str.19 = private unnamed_addr constant [23 x i8] c"\09/* off_dt_strings */\0A\00", align 1
@.str.20 = private unnamed_addr constant [60 x i8] c"\09.byte\09((_%s_strings_start - _%s_blob_start) >> 24) & 0xff\0A\00", align 1
@.str.21 = private unnamed_addr constant [60 x i8] c"\09.byte\09((_%s_strings_start - _%s_blob_start) >> 16) & 0xff\0A\00", align 1
@.str.22 = private unnamed_addr constant [59 x i8] c"\09.byte\09((_%s_strings_start - _%s_blob_start) >> 8) & 0xff\0A\00", align 1
@.str.23 = private unnamed_addr constant [52 x i8] c"\09.byte\09(_%s_strings_start - _%s_blob_start) & 0xff\0A\00", align 1
@.str.24 = private unnamed_addr constant [23 x i8] c"\09/* off_mem_rsvmap */\0A\00", align 1
@.str.25 = private unnamed_addr constant [58 x i8] c"\09.byte\09((_%s_reserve_map - _%s_blob_start) >> 24) & 0xff\0A\00", align 1
@.str.26 = private unnamed_addr constant [58 x i8] c"\09.byte\09((_%s_reserve_map - _%s_blob_start) >> 16) & 0xff\0A\00", align 1
@.str.27 = private unnamed_addr constant [57 x i8] c"\09.byte\09((_%s_reserve_map - _%s_blob_start) >> 8) & 0xff\0A\00", align 1
@.str.28 = private unnamed_addr constant [50 x i8] c"\09.byte\09(_%s_reserve_map - _%s_blob_start) & 0xff\0A\00", align 1
@.str.29 = private unnamed_addr constant [16 x i8] c"\09/* version */\0A\00", align 1
@.str.30 = private unnamed_addr constant [26 x i8] c"\09/* last_comp_version */\0A\00", align 1
@.str.31 = private unnamed_addr constant [24 x i8] c"\09/* boot_cpuid_phys */\0A\00", align 1
@.str.32 = private unnamed_addr constant [24 x i8] c"\09/* size_dt_strings */\0A\00", align 1
@.str.33 = private unnamed_addr constant [61 x i8] c"\09.byte\09((_%s_strings_end - _%s_strings_start) >> 24) & 0xff\0A\00", align 1
@.str.34 = private unnamed_addr constant [61 x i8] c"\09.byte\09((_%s_strings_end - _%s_strings_start) >> 16) & 0xff\0A\00", align 1
@.str.35 = private unnamed_addr constant [60 x i8] c"\09.byte\09((_%s_strings_end - _%s_strings_start) >> 8) & 0xff\0A\00", align 1
@.str.36 = private unnamed_addr constant [53 x i8] c"\09.byte\09(_%s_strings_end - _%s_strings_start) & 0xff\0A\00", align 1
@.str.37 = private unnamed_addr constant [23 x i8] c"\09/* size_dt_struct */\0A\00", align 1
@.str.38 = private unnamed_addr constant [59 x i8] c"\09.byte\09((_%s_struct_end - _%s_struct_start) >> 24) & 0xff\0A\00", align 1
@.str.39 = private unnamed_addr constant [59 x i8] c"\09.byte\09((_%s_struct_end - _%s_struct_start) >> 16) & 0xff\0A\00", align 1
@.str.40 = private unnamed_addr constant [58 x i8] c"\09.byte\09((_%s_struct_end - _%s_struct_start) >> 8) & 0xff\0A\00", align 1
@.str.41 = private unnamed_addr constant [51 x i8] c"\09.byte\09(_%s_struct_end - _%s_struct_start) & 0xff\0A\00", align 1
@.str.42 = private unnamed_addr constant [12 x i8] c"reserve_map\00", align 1
@.str.43 = private unnamed_addr constant [43 x i8] c"/* Memory reserve map from source file */\0A\00", align 1
@.str.44 = private unnamed_addr constant [12 x i8] c"\09.globl\09%s\0A\00", align 1
@.str.45 = private unnamed_addr constant [5 x i8] c"%s:\0A\00", align 1
@.str.46 = private unnamed_addr constant [32 x i8] c"\09.byte\09((0x%08x) >> 24) & 0xff\0A\00", align 1
@.str.47 = private unnamed_addr constant [32 x i8] c"\09.byte\09((0x%08x) >> 16) & 0xff\0A\00", align 1
@.str.48 = private unnamed_addr constant [31 x i8] c"\09.byte\09((0x%08x) >> 8) & 0xff\0A\00", align 1
@.str.49 = private unnamed_addr constant [24 x i8] c"\09.byte\09(0x%08x) & 0xff\0A\00", align 1
@reservenum = external local_unnamed_addr global i32, align 4
@.str.50 = private unnamed_addr constant [25 x i8] c"\09.long\090, 0\0A\09.long\090, 0\0A\00", align 1
@.str.51 = private unnamed_addr constant [13 x i8] c"struct_start\00", align 1
@asm_emitter = internal global %struct.emitter { ptr @asm_emit_cell, ptr @asm_emit_string, ptr @asm_emit_align, ptr @asm_emit_data, ptr @asm_emit_beginnode, ptr @asm_emit_endnode, ptr @asm_emit_property }, align 8
@.str.52 = private unnamed_addr constant [16 x i8] c"\09/* FDT_END */\0A\00", align 1
@.str.53 = private unnamed_addr constant [11 x i8] c"struct_end\00", align 1
@.str.54 = private unnamed_addr constant [14 x i8] c"strings_start\00", align 1
@.str.55 = private unnamed_addr constant [12 x i8] c"strings_end\00", align 1
@.str.56 = private unnamed_addr constant [9 x i8] c"blob_end\00", align 1
@.str.57 = private unnamed_addr constant [49 x i8] c"\09.space\09%d - (_%s_blob_end - _%s_blob_start), 0\0A\00", align 1
@.str.58 = private unnamed_addr constant [15 x i8] c"\09.space\09%d, 0\0A\00", align 1
@.str.59 = private unnamed_addr constant [13 x i8] c"blob_abs_end\00", align 1
@.str.60 = private unnamed_addr constant [40 x i8] c"Error reading DT blob magic number: %s\0A\00", align 1
@.str.61 = private unnamed_addr constant [34 x i8] c"EOF reading DT blob magic number\0A\00", align 1
@.str.62 = private unnamed_addr constant [44 x i8] c"Mysterious short read reading magic number\0A\00", align 1
@.str.63 = private unnamed_addr constant [33 x i8] c"Blob has incorrect magic number\0A\00", align 1
@.str.64 = private unnamed_addr constant [32 x i8] c"Error reading DT blob size: %s\0A\00", align 1
@.str.65 = private unnamed_addr constant [26 x i8] c"EOF reading DT blob size\0A\00", align 1
@.str.66 = private unnamed_addr constant [41 x i8] c"Mysterious short read reading blob size\0A\00", align 1
@.str.67 = private unnamed_addr constant [32 x i8] c"DT blob size (%d) is too small\0A\00", align 1
@.str.68 = private unnamed_addr constant [40 x i8] c"EOF before reading %d bytes of DT blob\0A\00", align 1
@.str.69 = private unnamed_addr constant [27 x i8] c"Error reading DT blob: %s\0A\00", align 1
@.str.70 = private unnamed_addr constant [49 x i8] c"Mem Reserve structure offset exceeds total size\0A\00", align 1
@.str.71 = private unnamed_addr constant [40 x i8] c"DT structure offset exceeds total size\0A\00", align 1
@.str.72 = private unnamed_addr constant [40 x i8] c"String table offset exceeds total size\0A\00", align 1
@.str.73 = private unnamed_addr constant [38 x i8] c"String table extends past total size\0A\00", align 1
@.str.74 = private unnamed_addr constant [41 x i8] c"Structure block extends past total size\0A\00", align 1
@.str.75 = private unnamed_addr constant [73 x i8] c"Device tree blob doesn't begin with FDT_BEGIN_NODE (begins with 0x%08x)\0A\00", align 1
@.str.76 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.77 = private unnamed_addr constant [43 x i8] c"Device tree blob doesn't end with FDT_END\0A\00", align 1
@.str.78 = private unnamed_addr constant [14 x i8] c"FATAL ERROR: \00", align 1
@.str.79 = private unnamed_addr constant [5 x i8] c"name\00", align 1
@.str.80 = private unnamed_addr constant [15 x i8] c"\09.globl\09%s_%s\0A\00", align 1
@.str.81 = private unnamed_addr constant [8 x i8] c"%s_%s:\0A\00", align 1
@.str.82 = private unnamed_addr constant [9 x i8] c"_%s_%s:\0A\00", align 1
@.str.83 = private unnamed_addr constant [57 x i8] c"\09.byte\090x%02x\0A\09.byte\090x%02x\0A\09.byte\090x%02x\0A\09.byte\090x%02x\0A\00", align 1
@.str.84 = private unnamed_addr constant [16 x i8] c"\09.balign\09%d, 0\0A\00", align 1
@.str.85 = private unnamed_addr constant [16 x i8] c"\09.asciz\09\22%.*s\22\0A\00", align 1
@.str.86 = private unnamed_addr constant [14 x i8] c"\09.asciz\09\22%s\22\0A\00", align 1
@.str.87 = private unnamed_addr constant [15 x i8] c"\09.byte\090x%hhx\0A\00", align 1
@.str.89 = private unnamed_addr constant [26 x i8] c"../scripts/dtc/flattree.c\00", align 1
@.str.90 = private unnamed_addr constant [13 x i8] c"%s\09= . + %d\0A\00", align 1
@.str.91 = private unnamed_addr constant [23 x i8] c"\09/* FDT_BEGIN_NODE */\0A\00", align 1
@.str.92 = private unnamed_addr constant [21 x i8] c"\09/* FDT_END_NODE */\0A\00", align 1
@.str.93 = private unnamed_addr constant [16 x i8] c"\09.globl\09%s_end\0A\00", align 1
@.str.94 = private unnamed_addr constant [9 x i8] c"%s_end:\0A\00", align 1
@.str.95 = private unnamed_addr constant [17 x i8] c"\09/* FDT_PROP */\0A\00", align 1
@.str.96 = private unnamed_addr constant [14 x i8] c"\09.asciz \22%s\22\0A\00", align 1
@.str.97 = private unnamed_addr constant [17 x i8] c"malloc() failed\0A\00", align 1
@.str.98 = private unnamed_addr constant [48 x i8] c"Premature end of data parsing flat device tree\0A\00", align 1
@.str.99 = private unnamed_addr constant [44 x i8] c"((inb->ptr - inb->base) % sizeof(val)) == 0\00", align 1
@__PRETTY_FUNCTION__.flat_read_word = private unnamed_addr constant [40 x i8] c"uint32_t flat_read_word(struct inbuf *)\00", align 1
@.str.100 = private unnamed_addr constant [61 x i8] c"Warning: Flat tree input has subnodes preceding a property.\0A\00", align 1
@.str.101 = private unnamed_addr constant [39 x i8] c"Premature FDT_END in device tree blob\0A\00", align 1
@.str.102 = private unnamed_addr constant [49 x i8] c"Warning: NOP tag found in flat tree version <16\0A\00", align 1
@.str.103 = private unnamed_addr constant [46 x i8] c"Invalid opcode word %08x in device tree blob\0A\00", align 1
@.str.104 = private unnamed_addr constant [43 x i8] c"Path \22%s\22 is not valid as a child of \22%s\22\0A\00", align 1
@.str.105 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@.str.106 = private unnamed_addr constant [40 x i8] c"String offset %d overruns string table\0A\00", align 1

; Function Attrs: nounwind uwtable
define dso_local void @dt_to_blob(ptr nocapture noundef %f, ptr nocapture noundef readonly %dti, i32 noundef %version) local_unnamed_addr #0 {
entry:
  %tmp.i93 = alloca %struct.data, align 8
  %tmp3.i = alloca %struct.data, align 8
  %tmp.i = alloca %struct.data, align 8
  %blob = alloca %struct.data, align 8
  %reservebuf = alloca %struct.data, align 8
  %dtbuf = alloca %struct.data, align 8
  %strbuf = alloca %struct.data, align 8
  %fdt = alloca %struct.fdt_header, align 4
  %tmp = alloca %struct.data, align 8
  %tmp51 = alloca %struct.data, align 8
  %tmp52 = alloca %struct.data, align 8
  %tmp53 = alloca %struct.data, align 8
  %tmp54 = alloca %struct.data, align 8
  %tmp55 = alloca %struct.data, align 8
  %tmp56 = alloca %struct.data, align 8
  %tmp60 = alloca %struct.data, align 8
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %blob) #18
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %blob, i8 0, i64 24, i1 false)
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %reservebuf) #18
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %reservebuf, i8 0, i64 24, i1 false)
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %dtbuf) #18
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %dtbuf, i8 0, i64 24, i1 false)
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %strbuf) #18
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %strbuf, i8 0, i64 24, i1 false)
  call void @llvm.lifetime.start.p0(i64 40, ptr nonnull %fdt) #18
  %0 = load i32, ptr @version_table, align 16, !tbaa !5
  %cmp3 = icmp eq i32 %0, %version
  %spec.select = select i1 %cmp3, ptr @version_table, ptr null
  %1 = load i32, ptr getelementptr inbounds ([5 x %struct.version_info], ptr @version_table, i64 0, i64 1), align 16, !tbaa !5
  %cmp3.1 = icmp eq i32 %1, %version
  %spec.select.1 = select i1 %cmp3.1, ptr getelementptr inbounds ([5 x %struct.version_info], ptr @version_table, i64 0, i64 1), ptr %spec.select
  %2 = load i32, ptr getelementptr inbounds ([5 x %struct.version_info], ptr @version_table, i64 0, i64 2), align 16, !tbaa !5
  %cmp3.2 = icmp eq i32 %2, %version
  %spec.select.2 = select i1 %cmp3.2, ptr getelementptr inbounds ([5 x %struct.version_info], ptr @version_table, i64 0, i64 2), ptr %spec.select.1
  %3 = load i32, ptr getelementptr inbounds ([5 x %struct.version_info], ptr @version_table, i64 0, i64 3), align 16, !tbaa !5
  %cmp3.3 = icmp eq i32 %3, %version
  %spec.select.3 = select i1 %cmp3.3, ptr getelementptr inbounds ([5 x %struct.version_info], ptr @version_table, i64 0, i64 3), ptr %spec.select.2
  %4 = load i32, ptr getelementptr inbounds ([5 x %struct.version_info], ptr @version_table, i64 0, i64 4), align 16, !tbaa !5
  %cmp3.4 = icmp eq i32 %4, %version
  %spec.select.4 = select i1 %cmp3.4, ptr getelementptr inbounds ([5 x %struct.version_info], ptr @version_table, i64 0, i64 4), ptr %spec.select.3
  %tobool.not = icmp eq ptr %spec.select.4, null
  br i1 %tobool.not, label %if.then7, label %if.end8

if.then7:                                         ; preds = %entry
  tail call void (ptr, ...) @die(ptr noundef nonnull @.str, i32 noundef %version) #19
  unreachable

if.end8:                                          ; preds = %entry
  %dt = getelementptr inbounds %struct.dt_info, ptr %dti, i64 0, i32 3
  %5 = load ptr, ptr %dt, align 8, !tbaa !10
  call fastcc void @flatten_tree(ptr noundef %5, ptr noundef nonnull @bin_emitter, ptr noundef nonnull %dtbuf, ptr noundef nonnull %strbuf, ptr noundef nonnull %spec.select.4)
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %tmp.i) #18
  call void @data_append_cell(ptr nonnull sret(%struct.data) align 8 %tmp.i, ptr noundef nonnull byval(%struct.data) align 8 %dtbuf, i32 noundef 9) #18
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %dtbuf, ptr noundef nonnull align 8 dereferenceable(24) %tmp.i, i64 24, i1 false) #18, !tbaa.struct !13
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %tmp.i) #18
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %tmp) #18
  %reservelist = getelementptr inbounds %struct.dt_info, ptr %dti, i64 0, i32 1
  %6 = load ptr, ptr %reservelist, align 8, !tbaa !16
  call void @llvm.experimental.noalias.scope.decl(metadata !17)
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %tmp, i8 0, i64 24, i1 false) #18, !alias.scope !17
  %tobool.not1.i = icmp eq ptr %6, null
  br i1 %tobool.not1.i, label %for.cond1.preheader.i, label %for.body.i

for.cond1.preheader.i:                            ; preds = %for.body.i, %if.end8
  %7 = load i32, ptr @reservenum, align 4, !tbaa !14
  %cmp3.not.i = icmp eq i32 %7, 0
  br i1 %cmp3.not.i, label %flatten_reserve_list.exit, label %for.body2.i

for.body.i:                                       ; preds = %for.body.i, %if.end8
  %re.02.i = phi ptr [ %10, %for.body.i ], [ %6, %if.end8 ]
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %tmp.i93) #18, !noalias !17
  %8 = load i64, ptr %re.02.i, align 8, !tbaa !20
  %size.i = getelementptr inbounds %struct.reserve_info, ptr %re.02.i, i64 0, i32 1
  %9 = load i64, ptr %size.i, align 8, !tbaa !23
  call void @data_append_re(ptr nonnull sret(%struct.data) align 8 %tmp.i93, ptr noundef nonnull byval(%struct.data) align 8 %tmp, i64 noundef %8, i64 noundef %9) #18
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %tmp, ptr noundef nonnull align 8 dereferenceable(24) %tmp.i93, i64 24, i1 false) #18, !tbaa.struct !13
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %tmp.i93) #18, !noalias !17
  %next.i = getelementptr inbounds %struct.reserve_info, ptr %re.02.i, i64 0, i32 2
  %10 = load ptr, ptr %next.i, align 8, !tbaa !24
  %tobool.not.i = icmp eq ptr %10, null
  br i1 %tobool.not.i, label %for.cond1.preheader.i, label %for.body.i

for.body2.i:                                      ; preds = %for.body2.i, %for.cond1.preheader.i
  %j.04.i = phi i32 [ %inc.i, %for.body2.i ], [ 0, %for.cond1.preheader.i ]
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %tmp3.i) #18, !noalias !17
  call void @data_append_re(ptr nonnull sret(%struct.data) align 8 %tmp3.i, ptr noundef nonnull byval(%struct.data) align 8 %tmp, i64 noundef 0, i64 noundef 0) #18
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %tmp, ptr noundef nonnull align 8 dereferenceable(24) %tmp3.i, i64 24, i1 false) #18, !tbaa.struct !13
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %tmp3.i) #18, !noalias !17
  %inc.i = add nuw i32 %j.04.i, 1
  %11 = load i32, ptr @reservenum, align 4, !tbaa !14
  %cmp.i = icmp ult i32 %inc.i, %11
  br i1 %cmp.i, label %for.body2.i, label %flatten_reserve_list.exit

flatten_reserve_list.exit:                        ; preds = %for.body2.i, %for.cond1.preheader.i
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %reservebuf, ptr noundef nonnull align 8 dereferenceable(24) %tmp, i64 24, i1 false), !tbaa.struct !13
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %tmp) #18
  %12 = load i32, ptr %reservebuf, align 8, !tbaa !25
  %13 = load i32, ptr %dtbuf, align 8, !tbaa !25
  %14 = load i32, ptr %strbuf, align 8, !tbaa !25
  %boot_cpuid_phys = getelementptr inbounds %struct.dt_info, ptr %dti, i64 0, i32 2
  %15 = load i32, ptr %boot_cpuid_phys, align 8, !tbaa !27
  %add.i = add i32 %12, 16
  %16 = getelementptr inbounds i8, ptr %fdt, i64 4
  %17 = getelementptr inbounds i8, ptr %fdt, i64 28
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(40) %17, i8 -1, i64 12, i1 false) #18
  store i32 -302117424, ptr %fdt, align 4, !tbaa !28
  %18 = load i32, ptr %spec.select.4, align 16, !tbaa !5
  %rev.i.i = call i32 @llvm.bswap.i32(i32 %18) #18
  %version3.i = getelementptr inbounds %struct.fdt_header, ptr %fdt, i64 0, i32 5
  store i32 %rev.i.i, ptr %version3.i, align 4, !tbaa !30
  %last_comp_version.i = getelementptr inbounds %struct.version_info, ptr %spec.select.4, i64 0, i32 1
  %19 = load i32, ptr %last_comp_version.i, align 4, !tbaa !31
  %rev.i56.i = call i32 @llvm.bswap.i32(i32 %19) #18
  %last_comp_version5.i = getelementptr inbounds %struct.fdt_header, ptr %fdt, i64 0, i32 6
  store i32 %rev.i56.i, ptr %last_comp_version5.i, align 4, !tbaa !32
  %hdr_size.i = getelementptr inbounds %struct.version_info, ptr %spec.select.4, i64 0, i32 2
  %20 = load i32, ptr %hdr_size.i, align 4, !tbaa !33
  %sub.i = add nsw i32 %20, 7
  %and.i = and i32 %sub.i, -8
  %rev.i57.i = call i32 @llvm.bswap.i32(i32 %and.i) #18
  %off_mem_rsvmap.i = getelementptr inbounds %struct.fdt_header, ptr %fdt, i64 0, i32 4
  store i32 %rev.i57.i, ptr %off_mem_rsvmap.i, align 4, !tbaa !34
  %add8.i = add nsw i32 %add.i, %and.i
  %rev.i58.i = call i32 @llvm.bswap.i32(i32 %add8.i) #18
  %off_dt_struct.i = getelementptr inbounds %struct.fdt_header, ptr %fdt, i64 0, i32 2
  store i32 %rev.i58.i, ptr %off_dt_struct.i, align 4, !tbaa !35
  %add11.i = add nsw i32 %add8.i, %13
  %rev.i59.i = call i32 @llvm.bswap.i32(i32 %add11.i) #18
  %off_dt_strings.i = getelementptr inbounds %struct.fdt_header, ptr %fdt, i64 0, i32 3
  store i32 %rev.i59.i, ptr %off_dt_strings.i, align 4, !tbaa !36
  %add15.i = add nsw i32 %add11.i, %14
  %rev.i60.i = call i32 @llvm.bswap.i32(i32 %add15.i) #18
  store i32 %rev.i60.i, ptr %16, align 4, !tbaa !37
  %flags.i = getelementptr inbounds %struct.version_info, ptr %spec.select.4, i64 0, i32 3
  %21 = load i32, ptr %flags.i, align 4, !tbaa !38
  %and17.i = and i32 %21, 8
  %tobool.not.i94 = icmp eq i32 %and17.i, 0
  br i1 %tobool.not.i94, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %flatten_reserve_list.exit
  %rev.i61.i = call i32 @llvm.bswap.i32(i32 %15) #18
  %boot_cpuid_phys19.i = getelementptr inbounds %struct.fdt_header, ptr %fdt, i64 0, i32 7
  store i32 %rev.i61.i, ptr %boot_cpuid_phys19.i, align 4, !tbaa !39
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %flatten_reserve_list.exit
  %and21.i = and i32 %21, 16
  %tobool22.not.i = icmp eq i32 %and21.i, 0
  br i1 %tobool22.not.i, label %if.end25.i, label %if.then23.i

if.then23.i:                                      ; preds = %if.end.i
  %rev.i62.i = call i32 @llvm.bswap.i32(i32 %14) #18
  %size_dt_strings.i = getelementptr inbounds %struct.fdt_header, ptr %fdt, i64 0, i32 8
  store i32 %rev.i62.i, ptr %size_dt_strings.i, align 4, !tbaa !40
  br label %if.end25.i

if.end25.i:                                       ; preds = %if.then23.i, %if.end.i
  %and27.i = and i32 %21, 32
  %tobool28.not.i = icmp eq i32 %and27.i, 0
  br i1 %tobool28.not.i, label %make_fdt_header.exit, label %if.then29.i

if.then29.i:                                      ; preds = %if.end25.i
  %rev.i63.i = call i32 @llvm.bswap.i32(i32 %13) #18
  %size_dt_struct.i = getelementptr inbounds %struct.fdt_header, ptr %fdt, i64 0, i32 9
  store i32 %rev.i63.i, ptr %size_dt_struct.i, align 4, !tbaa !41
  br label %make_fdt_header.exit

make_fdt_header.exit:                             ; preds = %if.then29.i, %if.end25.i
  %22 = load i32, ptr @minsize, align 4, !tbaa !14
  %cmp11 = icmp sgt i32 %22, 0
  br i1 %cmp11, label %if.then13, label %if.end25

if.then13:                                        ; preds = %make_fdt_header.exit
  %sub = sub i32 %22, %add15.i
  %cmp14 = icmp slt i32 %sub, 0
  br i1 %cmp14, label %if.then16, label %if.end25

if.then16:                                        ; preds = %if.then13
  %23 = load i32, ptr @quiet, align 4, !tbaa !14
  %cmp17 = icmp slt i32 %23, 1
  br i1 %cmp17, label %if.then19, label %if.end25

if.then19:                                        ; preds = %if.then16
  %24 = load ptr, ptr @stderr, align 8, !tbaa !15
  %call22 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %24, ptr noundef nonnull @.str.1, i32 noundef %add15.i, i32 noundef %22) #20
  br label %if.end25

if.end25:                                         ; preds = %if.then19, %if.then16, %if.then13, %make_fdt_header.exit
  %padlen.0 = phi i32 [ 0, %if.then19 ], [ 0, %if.then16 ], [ %sub, %if.then13 ], [ 0, %make_fdt_header.exit ]
  %25 = load i32, ptr @padsize, align 4, !tbaa !14
  %cmp26 = icmp sgt i32 %25, 0
  %spec.select92 = select i1 %cmp26, i32 %25, i32 %padlen.0
  %26 = load i32, ptr @alignsize, align 4, !tbaa !14
  %cmp30 = icmp sgt i32 %26, 0
  br i1 %cmp30, label %if.then32, label %if.end41

if.then32:                                        ; preds = %if.end25
  %27 = load i32, ptr %16, align 4, !tbaa !37
  %rev.i96 = call i32 @llvm.bswap.i32(i32 %27) #18
  %add = add nsw i32 %26, -1
  %add35 = add nuw i32 %add, %spec.select92
  %sub36 = add i32 %add35, %rev.i96
  %neg = sub nsw i32 0, %26
  %and = and i32 %sub36, %neg
  %sub40 = sub i32 %and, %rev.i96
  br label %if.end41

if.end41:                                         ; preds = %if.then32, %if.end25
  %padlen.2 = phi i32 [ %sub40, %if.then32 ], [ %spec.select92, %if.end25 ]
  %cmp42 = icmp sgt i32 %padlen.2, 0
  br i1 %cmp42, label %if.then44, label %if.end50

if.then44:                                        ; preds = %if.end41
  %28 = load i32, ptr %16, align 4, !tbaa !37
  %rev.i98 = call i32 @llvm.bswap.i32(i32 %28) #18
  %add47 = add nsw i32 %rev.i98, %padlen.2
  %rev.i99 = call i32 @llvm.bswap.i32(i32 %add47) #18
  store i32 %rev.i99, ptr %16, align 4, !tbaa !37
  br label %if.end50

if.end50:                                         ; preds = %if.then44, %if.end41
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %tmp51) #18
  %29 = load i32, ptr %hdr_size.i, align 4, !tbaa !33
  call void @data_append_data(ptr nonnull sret(%struct.data) align 8 %tmp51, ptr noundef nonnull byval(%struct.data) align 8 %blob, ptr noundef nonnull %fdt, i32 noundef %29) #18
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %blob, ptr noundef nonnull align 8 dereferenceable(24) %tmp51, i64 24, i1 false), !tbaa.struct !13
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %tmp51) #18
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %tmp52) #18
  call void @data_append_align(ptr nonnull sret(%struct.data) align 8 %tmp52, ptr noundef nonnull byval(%struct.data) align 8 %blob, i32 noundef 8) #18
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %blob, ptr noundef nonnull align 8 dereferenceable(24) %tmp52, i64 24, i1 false), !tbaa.struct !13
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %tmp52) #18
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %tmp53) #18
  call void @data_merge(ptr nonnull sret(%struct.data) align 8 %tmp53, ptr noundef nonnull byval(%struct.data) align 8 %blob, ptr noundef nonnull byval(%struct.data) align 8 %reservebuf) #18
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %blob, ptr noundef nonnull align 8 dereferenceable(24) %tmp53, i64 24, i1 false), !tbaa.struct !13
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %tmp53) #18
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %tmp54) #18
  call void @data_append_zeroes(ptr nonnull sret(%struct.data) align 8 %tmp54, ptr noundef nonnull byval(%struct.data) align 8 %blob, i32 noundef 16) #18
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %blob, ptr noundef nonnull align 8 dereferenceable(24) %tmp54, i64 24, i1 false), !tbaa.struct !13
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %tmp54) #18
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %tmp55) #18
  call void @data_merge(ptr nonnull sret(%struct.data) align 8 %tmp55, ptr noundef nonnull byval(%struct.data) align 8 %blob, ptr noundef nonnull byval(%struct.data) align 8 %dtbuf) #18
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %blob, ptr noundef nonnull align 8 dereferenceable(24) %tmp55, i64 24, i1 false), !tbaa.struct !13
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %tmp55) #18
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %tmp56) #18
  call void @data_merge(ptr nonnull sret(%struct.data) align 8 %tmp56, ptr noundef nonnull byval(%struct.data) align 8 %blob, ptr noundef nonnull byval(%struct.data) align 8 %strbuf) #18
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %blob, ptr noundef nonnull align 8 dereferenceable(24) %tmp56, i64 24, i1 false), !tbaa.struct !13
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %tmp56) #18
  br i1 %cmp42, label %if.then59, label %if.end61

if.then59:                                        ; preds = %if.end50
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %tmp60) #18
  call void @data_append_zeroes(ptr nonnull sret(%struct.data) align 8 %tmp60, ptr noundef nonnull byval(%struct.data) align 8 %blob, i32 noundef %padlen.2) #18
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %blob, ptr noundef nonnull align 8 dereferenceable(24) %tmp60, i64 24, i1 false), !tbaa.struct !13
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %tmp60) #18
  br label %if.end61

if.end61:                                         ; preds = %if.then59, %if.end50
  %val = getelementptr inbounds %struct.data, ptr %blob, i64 0, i32 1
  %30 = load ptr, ptr %val, align 8, !tbaa !42
  %31 = load i32, ptr %blob, align 8, !tbaa !25
  %conv63 = zext i32 %31 to i64
  %call64 = call i64 @fwrite(ptr noundef %30, i64 noundef %conv63, i64 noundef 1, ptr noundef %f)
  %cmp65.not = icmp eq i64 %call64, 1
  br i1 %cmp65.not, label %if.end73, label %if.then67

if.then67:                                        ; preds = %if.end61
  %call68 = call i32 @ferror(ptr noundef %f) #18
  %tobool69.not = icmp eq i32 %call68, 0
  br i1 %tobool69.not, label %if.else, label %if.then70

if.then70:                                        ; preds = %if.then67
  %call71 = tail call ptr @__errno_location() #21
  %32 = load i32, ptr %call71, align 4, !tbaa !14
  %call72 = call ptr @strerror(i32 noundef %32) #18
  call void (ptr, ...) @die(ptr noundef nonnull @.str.2, ptr noundef %call72) #19
  unreachable

if.else:                                          ; preds = %if.then67
  call void (ptr, ...) @die(ptr noundef nonnull @.str.3) #19
  unreachable

if.end73:                                         ; preds = %if.end61
  call void @data_free(ptr noundef nonnull byval(%struct.data) align 8 %blob) #18
  call void @llvm.lifetime.end.p0(i64 40, ptr nonnull %fdt) #18
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %strbuf) #18
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %dtbuf) #18
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %reservebuf) #18
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %blob) #18
  ret void
}

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: inlinehint noreturn nounwind uwtable
define internal void @die(ptr nocapture noundef readonly %str, ...) unnamed_addr #3 {
entry:
  %ap = alloca [1 x %struct.__va_list_tag], align 16
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %ap) #18
  call void @llvm.va_start(ptr nonnull %ap)
  %0 = load ptr, ptr @stderr, align 8, !tbaa !15
  %1 = call i64 @fwrite(ptr nonnull @.str.78, i64 13, i64 1, ptr %0) #20
  %2 = load ptr, ptr @stderr, align 8, !tbaa !15
  %call2 = call i32 @vfprintf(ptr noundef %2, ptr noundef %str, ptr noundef nonnull %ap) #20
  call void @llvm.va_end(ptr nonnull %ap)
  call void @exit(i32 noundef 1) #22
  unreachable
}

; Function Attrs: nounwind uwtable
define internal fastcc void @flatten_tree(ptr nocapture noundef readonly %tree, ptr nocapture noundef readonly %emit, ptr noundef %etarget, ptr noundef %strbuf, ptr nocapture noundef readonly %vi) unnamed_addr #0 {
entry:
  %tmp.i126 = alloca %struct.data, align 8
  %tmp.i = alloca %struct.data, align 8
  %0 = load i8, ptr %tree, align 8, !tbaa !43, !range !46
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.end, label %cleanup

if.end:                                           ; preds = %entry
  %beginnode = getelementptr inbounds %struct.emitter, ptr %emit, i64 0, i32 4
  %1 = load ptr, ptr %beginnode, align 8, !tbaa !47
  %labels = getelementptr inbounds %struct.node, ptr %tree, i64 0, i32 11
  %2 = load ptr, ptr %labels, align 8, !tbaa !49
  tail call void %1(ptr noundef %etarget, ptr noundef %2) #18
  %flags = getelementptr inbounds %struct.version_info, ptr %vi, i64 0, i32 3
  %3 = load i32, ptr %flags, align 4, !tbaa !38
  %and = and i32 %3, 1
  %tobool1.not = icmp eq i32 %and, 0
  %string3 = getelementptr inbounds %struct.emitter, ptr %emit, i64 0, i32 1
  %4 = load ptr, ptr %string3, align 8, !tbaa !50
  %name = getelementptr inbounds %struct.node, ptr %tree, i64 0, i32 1
  %fullpath = getelementptr inbounds %struct.node, ptr %tree, i64 0, i32 6
  %name.sink = select i1 %tobool1.not, ptr %name, ptr %fullpath
  %5 = load ptr, ptr %name.sink, align 8, !tbaa !15
  tail call void %4(ptr noundef %etarget, ptr noundef %5, i32 noundef 0) #18
  %align = getelementptr inbounds %struct.emitter, ptr %emit, i64 0, i32 2
  %6 = load ptr, ptr %align, align 8, !tbaa !51
  tail call void %6(ptr noundef %etarget, i32 noundef 4) #18
  %proplist = getelementptr inbounds %struct.node, ptr %tree, i64 0, i32 2
  %prop.0147 = load ptr, ptr %proplist, align 8, !tbaa !15
  %tobool5.not148 = icmp eq ptr %prop.0147, null
  br i1 %tobool5.not148, label %for.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.end
  %val.i = getelementptr inbounds %struct.data, ptr %strbuf, i64 0, i32 1
  %property = getelementptr inbounds %struct.emitter, ptr %emit, i64 0, i32 6
  %data = getelementptr inbounds %struct.emitter, ptr %emit, i64 0, i32 3
  br label %for.body

for.body:                                         ; preds = %for.inc, %for.body.lr.ph
  %prop.0150 = phi ptr [ %prop.0147, %for.body.lr.ph ], [ %prop.0, %for.inc ]
  %seen_name_prop.0149 = phi i8 [ 0, %for.body.lr.ph ], [ %seen_name_prop.2, %for.inc ]
  %7 = load i8, ptr %prop.0150, align 8, !tbaa !52, !range !46
  %tobool7.not = icmp eq i8 %7, 0
  br i1 %tobool7.not, label %if.then8, label %for.inc

if.then8:                                         ; preds = %for.body
  %name9 = getelementptr inbounds %struct.property, ptr %prop.0150, i64 0, i32 1
  %8 = load ptr, ptr %name9, align 8, !tbaa !54
  %call = call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %8, ptr noundef nonnull dereferenceable(5) @.str.79) #23
  %cmp = icmp eq i32 %call, 0
  %spec.select = select i1 %cmp, i8 1, i8 %seen_name_prop.0149
  %9 = load i32, ptr %strbuf, align 8, !tbaa !25
  %cmp14.not.i = icmp eq i32 %9, 0
  br i1 %cmp14.not.i, label %for.end.i, label %for.body.lr.ph.i

for.body.lr.ph.i:                                 ; preds = %if.then8
  %10 = load ptr, ptr %val.i, align 8, !tbaa !42
  %wide.trip.count.i = zext i32 %9 to i64
  br label %for.body.i

for.body.i:                                       ; preds = %for.inc.i, %for.body.lr.ph.i
  %indvars.iv.i = phi i64 [ 0, %for.body.lr.ph.i ], [ %indvars.iv.next.i, %for.inc.i ]
  %add.ptr.i = getelementptr inbounds i8, ptr %10, i64 %indvars.iv.i
  %call.i = call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %8, ptr noundef nonnull dereferenceable(1) %add.ptr.i) #23
  %cmp1.i = icmp eq i32 %call.i, 0
  br i1 %cmp1.i, label %cleanup.loopexit.i, label %for.inc.i

for.inc.i:                                        ; preds = %for.body.i
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, %wide.trip.count.i
  br i1 %exitcond.not.i, label %for.end.i, label %for.body.i

for.end.i:                                        ; preds = %for.inc.i, %if.then8
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %tmp.i) #18
  %call2.i = call i64 @strlen(ptr noundef nonnull dereferenceable(1) %8) #23
  %11 = trunc i64 %call2.i to i32
  %conv.i = add i32 %11, 1
  call void @data_append_data(ptr nonnull sret(%struct.data) align 8 %tmp.i, ptr noundef nonnull byval(%struct.data) align 8 %strbuf, ptr noundef %8, i32 noundef %conv.i) #18
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %strbuf, ptr noundef nonnull align 8 dereferenceable(24) %tmp.i, i64 24, i1 false) #18, !tbaa.struct !13
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %tmp.i) #18
  br label %stringtable_insert.exit

cleanup.loopexit.i:                               ; preds = %for.body.i
  %12 = trunc i64 %indvars.iv.i to i32
  br label %stringtable_insert.exit

stringtable_insert.exit:                          ; preds = %cleanup.loopexit.i, %for.end.i
  %i.013.i = phi i32 [ %9, %for.end.i ], [ %12, %cleanup.loopexit.i ]
  %13 = load ptr, ptr %property, align 8, !tbaa !55
  %labels14 = getelementptr inbounds %struct.property, ptr %prop.0150, i64 0, i32 4
  %14 = load ptr, ptr %labels14, align 8, !tbaa !56
  call void %13(ptr noundef %etarget, ptr noundef %14) #18
  %15 = load ptr, ptr %emit, align 8, !tbaa !57
  %val = getelementptr inbounds %struct.property, ptr %prop.0150, i64 0, i32 2
  %16 = load i32, ptr %val, align 8, !tbaa !58
  call void %15(ptr noundef %etarget, i32 noundef %16) #18
  %17 = load ptr, ptr %emit, align 8, !tbaa !57
  call void %17(ptr noundef %etarget, i32 noundef %i.013.i) #18
  %18 = load i32, ptr %flags, align 4, !tbaa !38
  %and17 = and i32 %18, 2
  %tobool18.not = icmp eq i32 %and17, 0
  br i1 %tobool18.not, label %if.end24, label %land.lhs.true

land.lhs.true:                                    ; preds = %stringtable_insert.exit
  %19 = load i32, ptr %val, align 8, !tbaa !58
  %cmp21 = icmp ugt i32 %19, 7
  br i1 %cmp21, label %if.then22, label %if.end24

if.then22:                                        ; preds = %land.lhs.true
  %20 = load ptr, ptr %align, align 8, !tbaa !51
  call void %20(ptr noundef %etarget, i32 noundef 8) #18
  br label %if.end24

if.end24:                                         ; preds = %if.then22, %land.lhs.true, %stringtable_insert.exit
  %21 = load ptr, ptr %data, align 8, !tbaa !59
  call void %21(ptr noundef %etarget, ptr noundef nonnull byval(%struct.data) align 8 %val) #18
  %22 = load ptr, ptr %align, align 8, !tbaa !51
  call void %22(ptr noundef %etarget, i32 noundef 4) #18
  br label %for.inc

for.inc:                                          ; preds = %if.end24, %for.body
  %seen_name_prop.2 = phi i8 [ %seen_name_prop.0149, %for.body ], [ %spec.select, %if.end24 ]
  %next = getelementptr inbounds %struct.property, ptr %prop.0150, i64 0, i32 3
  %prop.0 = load ptr, ptr %next, align 8, !tbaa !15
  %tobool5.not = icmp eq ptr %prop.0, null
  br i1 %tobool5.not, label %for.end, label %for.body

for.end:                                          ; preds = %for.inc, %if.end
  %seen_name_prop.0.lcssa = phi i8 [ 0, %if.end ], [ %seen_name_prop.2, %for.inc ]
  %23 = load i32, ptr %flags, align 4, !tbaa !38
  %and29 = and i32 %23, 4
  %tobool30.not = icmp ne i32 %and29, 0
  %24 = and i8 %seen_name_prop.0.lcssa, 1
  %tobool32.not = icmp eq i8 %24, 0
  %or.cond = select i1 %tobool30.not, i1 %tobool32.not, i1 false
  br i1 %or.cond, label %if.then33, label %if.end52

if.then33:                                        ; preds = %for.end
  %property34 = getelementptr inbounds %struct.emitter, ptr %emit, i64 0, i32 6
  %25 = load ptr, ptr %property34, align 8, !tbaa !55
  call void %25(ptr noundef %etarget, ptr noundef null) #18
  %26 = load ptr, ptr %emit, align 8, !tbaa !57
  %basenamelen = getelementptr inbounds %struct.node, ptr %tree, i64 0, i32 7
  %27 = load i32, ptr %basenamelen, align 8, !tbaa !60
  %add = add nsw i32 %27, 1
  call void %26(ptr noundef %etarget, i32 noundef %add) #18
  %28 = load ptr, ptr %emit, align 8, !tbaa !57
  %29 = load i32, ptr %strbuf, align 8, !tbaa !25
  %cmp14.not.i127 = icmp eq i32 %29, 0
  br i1 %cmp14.not.i127, label %for.end.i141, label %for.body.lr.ph.i130

for.body.lr.ph.i130:                              ; preds = %if.then33
  %val.i128 = getelementptr inbounds %struct.data, ptr %strbuf, i64 0, i32 1
  %30 = load ptr, ptr %val.i128, align 8, !tbaa !42
  %wide.trip.count.i129 = zext i32 %29 to i64
  br label %for.body.i135

for.body.i135:                                    ; preds = %for.inc.i138, %for.body.lr.ph.i130
  %indvars.iv.i131 = phi i64 [ 0, %for.body.lr.ph.i130 ], [ %indvars.iv.next.i136, %for.inc.i138 ]
  %add.ptr.i132 = getelementptr inbounds i8, ptr %30, i64 %indvars.iv.i131
  %call.i133 = call i32 @strcmp(ptr noundef nonnull dereferenceable(5) @.str.79, ptr noundef nonnull dereferenceable(1) %add.ptr.i132) #23
  %cmp1.i134 = icmp eq i32 %call.i133, 0
  br i1 %cmp1.i134, label %cleanup.loopexit.i142, label %for.inc.i138

for.inc.i138:                                     ; preds = %for.body.i135
  %indvars.iv.next.i136 = add nuw nsw i64 %indvars.iv.i131, 1
  %exitcond.not.i137 = icmp eq i64 %indvars.iv.next.i136, %wide.trip.count.i129
  br i1 %exitcond.not.i137, label %for.end.i141, label %for.body.i135

for.end.i141:                                     ; preds = %for.inc.i138, %if.then33
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %tmp.i126) #18
  call void @data_append_data(ptr nonnull sret(%struct.data) align 8 %tmp.i126, ptr noundef nonnull byval(%struct.data) align 8 %strbuf, ptr noundef nonnull @.str.79, i32 noundef 5) #18
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %strbuf, ptr noundef nonnull align 8 dereferenceable(24) %tmp.i126, i64 24, i1 false) #18, !tbaa.struct !13
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %tmp.i126) #18
  br label %stringtable_insert.exit144

cleanup.loopexit.i142:                            ; preds = %for.body.i135
  %31 = trunc i64 %indvars.iv.i131 to i32
  br label %stringtable_insert.exit144

stringtable_insert.exit144:                       ; preds = %cleanup.loopexit.i142, %for.end.i141
  %i.013.i143 = phi i32 [ %29, %for.end.i141 ], [ %31, %cleanup.loopexit.i142 ]
  call void %28(ptr noundef %etarget, i32 noundef %i.013.i143) #18
  %32 = load i32, ptr %flags, align 4, !tbaa !38
  %and39 = and i32 %32, 2
  %tobool40.not = icmp eq i32 %and39, 0
  br i1 %tobool40.not, label %if.end47, label %land.lhs.true41

land.lhs.true41:                                  ; preds = %stringtable_insert.exit144
  %33 = load i32, ptr %basenamelen, align 8, !tbaa !60
  %cmp44 = icmp sgt i32 %33, 6
  br i1 %cmp44, label %if.then45, label %if.end47

if.then45:                                        ; preds = %land.lhs.true41
  %34 = load ptr, ptr %align, align 8, !tbaa !51
  call void %34(ptr noundef %etarget, i32 noundef 8) #18
  br label %if.end47

if.end47:                                         ; preds = %if.then45, %land.lhs.true41, %stringtable_insert.exit144
  %35 = load ptr, ptr %string3, align 8, !tbaa !50
  %36 = load ptr, ptr %name, align 8, !tbaa !61
  %37 = load i32, ptr %basenamelen, align 8, !tbaa !60
  call void %35(ptr noundef %etarget, ptr noundef %36, i32 noundef %37) #18
  %38 = load ptr, ptr %align, align 8, !tbaa !51
  call void %38(ptr noundef %etarget, i32 noundef 4) #18
  br label %if.end52

if.end52:                                         ; preds = %if.end47, %for.end
  %children = getelementptr inbounds %struct.node, ptr %tree, i64 0, i32 3
  %child.0152 = load ptr, ptr %children, align 8, !tbaa !15
  %tobool54.not153 = icmp eq ptr %child.0152, null
  br i1 %tobool54.not153, label %for.end61, label %for.body55

for.body55:                                       ; preds = %for.inc60, %if.end52
  %child.0154 = phi ptr [ %child.0, %for.inc60 ], [ %child.0152, %if.end52 ]
  %39 = load i8, ptr %child.0154, align 8, !tbaa !43, !range !46
  %tobool57.not = icmp eq i8 %39, 0
  br i1 %tobool57.not, label %if.then58, label %for.inc60

if.then58:                                        ; preds = %for.body55
  call fastcc void @flatten_tree(ptr noundef nonnull %child.0154, ptr noundef %emit, ptr noundef %etarget, ptr noundef %strbuf, ptr noundef %vi)
  br label %for.inc60

for.inc60:                                        ; preds = %if.then58, %for.body55
  %next_sibling = getelementptr inbounds %struct.node, ptr %child.0154, i64 0, i32 5
  %child.0 = load ptr, ptr %next_sibling, align 8, !tbaa !15
  %tobool54.not = icmp eq ptr %child.0, null
  br i1 %tobool54.not, label %for.end61, label %for.body55

for.end61:                                        ; preds = %for.inc60, %if.end52
  %endnode = getelementptr inbounds %struct.emitter, ptr %emit, i64 0, i32 5
  %40 = load ptr, ptr %endnode, align 8, !tbaa !62
  %41 = load ptr, ptr %labels, align 8, !tbaa !49
  call void %40(ptr noundef %etarget, ptr noundef %41) #18
  br label %cleanup

cleanup:                                          ; preds = %for.end61, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @bin_emit_cell(ptr noundef %e, i32 noundef %val) #0 {
entry:
  %tmp = alloca %struct.data, align 8
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %tmp) #18
  call void @data_append_cell(ptr nonnull sret(%struct.data) align 8 %tmp, ptr noundef byval(%struct.data) align 8 %e, i32 noundef %val) #18
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %e, ptr noundef nonnull align 8 dereferenceable(24) %tmp, i64 24, i1 false), !tbaa.struct !13
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %tmp) #18
  ret void
}

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #4

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: nofree nounwind
declare noundef i32 @fprintf(ptr nocapture noundef, ptr nocapture noundef readonly, ...) local_unnamed_addr #5

declare void @data_append_data(ptr sret(%struct.data) align 8, ptr noundef byval(%struct.data) align 8, ptr noundef, i32 noundef) local_unnamed_addr #6

declare void @data_append_align(ptr sret(%struct.data) align 8, ptr noundef byval(%struct.data) align 8, i32 noundef) local_unnamed_addr #6

declare void @data_merge(ptr sret(%struct.data) align 8, ptr noundef byval(%struct.data) align 8, ptr noundef byval(%struct.data) align 8) local_unnamed_addr #6

declare void @data_append_zeroes(ptr sret(%struct.data) align 8, ptr noundef byval(%struct.data) align 8, i32 noundef) local_unnamed_addr #6

; Function Attrs: nofree nounwind
declare noundef i64 @fwrite(ptr nocapture noundef, i64 noundef, i64 noundef, ptr nocapture noundef) local_unnamed_addr #5

; Function Attrs: nofree nounwind readonly
declare noundef i32 @ferror(ptr nocapture noundef) local_unnamed_addr #7

; Function Attrs: nounwind
declare ptr @strerror(i32 noundef) local_unnamed_addr #8

; Function Attrs: mustprogress nofree nosync nounwind readnone willreturn
declare ptr @__errno_location() local_unnamed_addr #9

declare void @data_free(ptr noundef byval(%struct.data) align 8) local_unnamed_addr #6

; Function Attrs: nounwind uwtable
define dso_local void @dt_to_asm(ptr noundef %f, ptr nocapture noundef readonly %dti, i32 noundef %version) local_unnamed_addr #0 {
entry:
  %strbuf = alloca %struct.data, align 8
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %strbuf) #18
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %strbuf, i8 0, i64 24, i1 false)
  %0 = load i32, ptr @version_table, align 16, !tbaa !5
  %cmp3 = icmp eq i32 %0, %version
  %spec.select = select i1 %cmp3, ptr @version_table, ptr null
  %1 = load i32, ptr getelementptr inbounds ([5 x %struct.version_info], ptr @version_table, i64 0, i64 1), align 16, !tbaa !5
  %cmp3.1 = icmp eq i32 %1, %version
  %spec.select.1 = select i1 %cmp3.1, ptr getelementptr inbounds ([5 x %struct.version_info], ptr @version_table, i64 0, i64 1), ptr %spec.select
  %2 = load i32, ptr getelementptr inbounds ([5 x %struct.version_info], ptr @version_table, i64 0, i64 2), align 16, !tbaa !5
  %cmp3.2 = icmp eq i32 %2, %version
  %spec.select.2 = select i1 %cmp3.2, ptr getelementptr inbounds ([5 x %struct.version_info], ptr @version_table, i64 0, i64 2), ptr %spec.select.1
  %3 = load i32, ptr getelementptr inbounds ([5 x %struct.version_info], ptr @version_table, i64 0, i64 3), align 16, !tbaa !5
  %cmp3.3 = icmp eq i32 %3, %version
  %spec.select.3 = select i1 %cmp3.3, ptr getelementptr inbounds ([5 x %struct.version_info], ptr @version_table, i64 0, i64 3), ptr %spec.select.2
  %4 = load i32, ptr getelementptr inbounds ([5 x %struct.version_info], ptr @version_table, i64 0, i64 4), align 16, !tbaa !5
  %cmp3.4 = icmp eq i32 %4, %version
  %spec.select.4 = select i1 %cmp3.4, ptr getelementptr inbounds ([5 x %struct.version_info], ptr @version_table, i64 0, i64 4), ptr %spec.select.3
  %tobool.not = icmp eq ptr %spec.select.4, null
  br i1 %tobool.not, label %if.then7, label %if.end8

if.then7:                                         ; preds = %entry
  tail call void (ptr, ...) @die(ptr noundef nonnull @.str, i32 noundef %version) #19
  unreachable

if.end8:                                          ; preds = %entry
  %5 = tail call i64 @fwrite(ptr nonnull @.str.5, i64 41, i64 1, ptr %f)
  %call.i = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.80, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.6) #18
  %call1.i = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.81, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.6) #18
  %call2.i = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.82, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.6) #18
  %call.i332 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.80, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.7) #18
  %call1.i333 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.81, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.7) #18
  %call2.i334 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.82, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.7) #18
  %6 = tail call i64 @fwrite(ptr nonnull @.str.8, i64 13, i64 1, ptr %f)
  %call.i335 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.83, i32 noundef 208, i32 noundef 13, i32 noundef 254, i32 noundef 237) #18
  %7 = tail call i64 @fwrite(ptr nonnull @.str.9, i64 17, i64 1, ptr %f)
  %call11 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.10, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.4)
  %call12 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.11, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.4)
  %call13 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.12, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.4)
  %call14 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.13, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.4)
  %8 = tail call i64 @fwrite(ptr nonnull @.str.14, i64 21, i64 1, ptr %f)
  %call16 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.15, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.4)
  %call17 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.16, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.4)
  %call18 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.17, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.4)
  %call19 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.18, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.4)
  %9 = tail call i64 @fwrite(ptr nonnull @.str.19, i64 22, i64 1, ptr %f)
  %call21 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.20, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.4)
  %call22 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.21, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.4)
  %call23 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.22, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.4)
  %call24 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.23, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.4)
  %10 = tail call i64 @fwrite(ptr nonnull @.str.24, i64 22, i64 1, ptr %f)
  %call26 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.25, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.4)
  %call27 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.26, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.4)
  %call28 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.27, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.4)
  %call29 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.28, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.4)
  %11 = tail call i64 @fwrite(ptr nonnull @.str.29, i64 15, i64 1, ptr %f)
  %12 = load i32, ptr %spec.select.4, align 16, !tbaa !5
  %shr.i = lshr i32 %12, 24
  %shr1.i = lshr i32 %12, 16
  %and2.i = and i32 %shr1.i, 255
  %shr3.i = lshr i32 %12, 8
  %and4.i = and i32 %shr3.i, 255
  %and5.i = and i32 %12, 255
  %call.i336 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.83, i32 noundef %shr.i, i32 noundef %and2.i, i32 noundef %and4.i, i32 noundef %and5.i) #18
  %13 = tail call i64 @fwrite(ptr nonnull @.str.30, i64 25, i64 1, ptr %f)
  %last_comp_version = getelementptr inbounds %struct.version_info, ptr %spec.select.4, i64 0, i32 1
  %14 = load i32, ptr %last_comp_version, align 4, !tbaa !31
  %shr.i337 = lshr i32 %14, 24
  %shr1.i338 = lshr i32 %14, 16
  %and2.i339 = and i32 %shr1.i338, 255
  %shr3.i340 = lshr i32 %14, 8
  %and4.i341 = and i32 %shr3.i340, 255
  %and5.i342 = and i32 %14, 255
  %call.i343 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.83, i32 noundef %shr.i337, i32 noundef %and2.i339, i32 noundef %and4.i341, i32 noundef %and5.i342) #18
  %flags = getelementptr inbounds %struct.version_info, ptr %spec.select.4, i64 0, i32 3
  %15 = load i32, ptr %flags, align 4, !tbaa !38
  %and = and i32 %15, 8
  %tobool33.not = icmp eq i32 %and, 0
  br i1 %tobool33.not, label %if.end36, label %if.then34

if.then34:                                        ; preds = %if.end8
  %16 = tail call i64 @fwrite(ptr nonnull @.str.31, i64 23, i64 1, ptr %f)
  %boot_cpuid_phys = getelementptr inbounds %struct.dt_info, ptr %dti, i64 0, i32 2
  %17 = load i32, ptr %boot_cpuid_phys, align 8, !tbaa !27
  %shr.i344 = lshr i32 %17, 24
  %shr1.i345 = lshr i32 %17, 16
  %and2.i346 = and i32 %shr1.i345, 255
  %shr3.i347 = lshr i32 %17, 8
  %and4.i348 = and i32 %shr3.i347, 255
  %and5.i349 = and i32 %17, 255
  %call.i350 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.83, i32 noundef %shr.i344, i32 noundef %and2.i346, i32 noundef %and4.i348, i32 noundef %and5.i349) #18
  %.pre = load i32, ptr %flags, align 4, !tbaa !38
  br label %if.end36

if.end36:                                         ; preds = %if.then34, %if.end8
  %18 = phi i32 [ %.pre, %if.then34 ], [ %15, %if.end8 ]
  %and38 = and i32 %18, 16
  %tobool39.not = icmp eq i32 %and38, 0
  br i1 %tobool39.not, label %if.end46, label %if.then40

if.then40:                                        ; preds = %if.end36
  %19 = tail call i64 @fwrite(ptr nonnull @.str.32, i64 23, i64 1, ptr %f)
  %call42 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.33, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.4)
  %call43 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.34, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.4)
  %call44 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.35, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.4)
  %call45 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.36, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.4)
  %.pre390 = load i32, ptr %flags, align 4, !tbaa !38
  br label %if.end46

if.end46:                                         ; preds = %if.then40, %if.end36
  %20 = phi i32 [ %.pre390, %if.then40 ], [ %18, %if.end36 ]
  %and48 = and i32 %20, 32
  %tobool49.not = icmp eq i32 %and48, 0
  br i1 %tobool49.not, label %if.end56, label %if.then50

if.then50:                                        ; preds = %if.end46
  %21 = tail call i64 @fwrite(ptr nonnull @.str.37, i64 22, i64 1, ptr %f)
  %call52 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.38, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.4)
  %call53 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.39, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.4)
  %call54 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.40, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.4)
  %call55 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.41, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.4)
  br label %if.end56

if.end56:                                         ; preds = %if.then50, %if.end46
  %call.i351 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.84, i32 noundef 8) #18
  %call.i352 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.80, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.42) #18
  %call1.i353 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.81, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.42) #18
  %call2.i354 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.82, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.42) #18
  %22 = tail call i64 @fwrite(ptr nonnull @.str.43, i64 42, i64 1, ptr %f)
  %reservelist = getelementptr inbounds %struct.dt_info, ptr %dti, i64 0, i32 1
  %re.0384 = load ptr, ptr %reservelist, align 8, !tbaa !15
  %tobool59.not385 = icmp eq ptr %re.0384, null
  br i1 %tobool59.not385, label %for.cond136.preheader, label %for.body60

for.cond136.preheader:                            ; preds = %for.end71, %if.end56
  %23 = load i32, ptr @reservenum, align 4, !tbaa !14
  %cmp137387.not = icmp eq i32 %23, 0
  br i1 %cmp137387.not, label %for.end143, label %for.body139

for.body60:                                       ; preds = %for.end71, %if.end56
  %re.0386 = phi ptr [ %re.0, %for.end71 ], [ %re.0384, %if.end56 ]
  %labels = getelementptr inbounds %struct.reserve_info, ptr %re.0386, i64 0, i32 3
  %l.0380 = load ptr, ptr %labels, align 8, !tbaa !15
  %tobool62.not381 = icmp eq ptr %l.0380, null
  br i1 %tobool62.not381, label %for.end71, label %for.body63

for.body63:                                       ; preds = %for.inc70, %for.body60
  %l.0382 = phi ptr [ %l.0, %for.inc70 ], [ %l.0380, %for.body60 ]
  %24 = load i8, ptr %l.0382, align 8, !tbaa !63, !range !46
  %tobool64.not = icmp eq i8 %24, 0
  br i1 %tobool64.not, label %if.then65, label %for.inc70

if.then65:                                        ; preds = %for.body63
  %label = getelementptr inbounds %struct.label, ptr %l.0382, i64 0, i32 1
  %25 = load ptr, ptr %label, align 8, !tbaa !65
  %call66 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.44, ptr noundef %25)
  %26 = load ptr, ptr %label, align 8, !tbaa !65
  %call68 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.45, ptr noundef %26)
  br label %for.inc70

for.inc70:                                        ; preds = %if.then65, %for.body63
  %next = getelementptr inbounds %struct.label, ptr %l.0382, i64 0, i32 2
  %l.0 = load ptr, ptr %next, align 8, !tbaa !15
  %tobool62.not = icmp eq ptr %l.0, null
  br i1 %tobool62.not, label %for.end71, label %for.body63

for.end71:                                        ; preds = %for.inc70, %for.body60
  %27 = load i64, ptr %re.0386, align 8, !tbaa !20
  %shr = lshr i64 %27, 32
  %conv72 = trunc i64 %shr to i32
  %call73 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.46, i32 noundef %conv72)
  %28 = load i64, ptr %re.0386, align 8, !tbaa !20
  %shr75 = lshr i64 %28, 32
  %conv76 = trunc i64 %shr75 to i32
  %call77 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.47, i32 noundef %conv76)
  %29 = load i64, ptr %re.0386, align 8, !tbaa !20
  %shr79 = lshr i64 %29, 32
  %conv80 = trunc i64 %shr79 to i32
  %call81 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.48, i32 noundef %conv80)
  %30 = load i64, ptr %re.0386, align 8, !tbaa !20
  %shr83 = lshr i64 %30, 32
  %conv84 = trunc i64 %shr83 to i32
  %call85 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.49, i32 noundef %conv84)
  %31 = load i64, ptr %re.0386, align 8, !tbaa !20
  %conv88 = trunc i64 %31 to i32
  %call89 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.46, i32 noundef %conv88)
  %32 = load i64, ptr %re.0386, align 8, !tbaa !20
  %conv92 = trunc i64 %32 to i32
  %call93 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.47, i32 noundef %conv92)
  %33 = load i64, ptr %re.0386, align 8, !tbaa !20
  %conv96 = trunc i64 %33 to i32
  %call97 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.48, i32 noundef %conv96)
  %34 = load i64, ptr %re.0386, align 8, !tbaa !20
  %conv100 = trunc i64 %34 to i32
  %call101 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.49, i32 noundef %conv100)
  %size = getelementptr inbounds %struct.reserve_info, ptr %re.0386, i64 0, i32 1
  %35 = load i64, ptr %size, align 8, !tbaa !23
  %shr102 = lshr i64 %35, 32
  %conv103 = trunc i64 %shr102 to i32
  %call104 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.46, i32 noundef %conv103)
  %36 = load i64, ptr %size, align 8, !tbaa !23
  %shr106 = lshr i64 %36, 32
  %conv107 = trunc i64 %shr106 to i32
  %call108 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.47, i32 noundef %conv107)
  %37 = load i64, ptr %size, align 8, !tbaa !23
  %shr110 = lshr i64 %37, 32
  %conv111 = trunc i64 %shr110 to i32
  %call112 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.48, i32 noundef %conv111)
  %38 = load i64, ptr %size, align 8, !tbaa !23
  %shr114 = lshr i64 %38, 32
  %conv115 = trunc i64 %shr114 to i32
  %call116 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.49, i32 noundef %conv115)
  %39 = load i64, ptr %size, align 8, !tbaa !23
  %conv119 = trunc i64 %39 to i32
  %call120 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.46, i32 noundef %conv119)
  %40 = load i64, ptr %size, align 8, !tbaa !23
  %conv123 = trunc i64 %40 to i32
  %call124 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.47, i32 noundef %conv123)
  %41 = load i64, ptr %size, align 8, !tbaa !23
  %conv127 = trunc i64 %41 to i32
  %call128 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.48, i32 noundef %conv127)
  %42 = load i64, ptr %size, align 8, !tbaa !23
  %conv131 = trunc i64 %42 to i32
  %call132 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.49, i32 noundef %conv131)
  %next134 = getelementptr inbounds %struct.reserve_info, ptr %re.0386, i64 0, i32 2
  %re.0 = load ptr, ptr %next134, align 8, !tbaa !15
  %tobool59.not = icmp eq ptr %re.0, null
  br i1 %tobool59.not, label %for.cond136.preheader, label %for.body60

for.body139:                                      ; preds = %for.body139, %for.cond136.preheader
  %i.1388 = phi i32 [ %inc142, %for.body139 ], [ 0, %for.cond136.preheader ]
  %43 = tail call i64 @fwrite(ptr nonnull @.str.50, i64 24, i64 1, ptr %f)
  %inc142 = add nuw i32 %i.1388, 1
  %44 = load i32, ptr @reservenum, align 4, !tbaa !14
  %cmp137 = icmp ult i32 %inc142, %44
  br i1 %cmp137, label %for.body139, label %for.end143

for.end143:                                       ; preds = %for.body139, %for.cond136.preheader
  %45 = tail call i64 @fwrite(ptr nonnull @.str.50, i64 24, i64 1, ptr %f)
  %call.i355 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.80, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.51) #18
  %call1.i356 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.81, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.51) #18
  %call2.i357 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.82, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.51) #18
  %dt = getelementptr inbounds %struct.dt_info, ptr %dti, i64 0, i32 3
  %46 = load ptr, ptr %dt, align 8, !tbaa !10
  call fastcc void @flatten_tree(ptr noundef %46, ptr noundef nonnull @asm_emitter, ptr noundef %f, ptr noundef nonnull %strbuf, ptr noundef nonnull %spec.select.4)
  %47 = call i64 @fwrite(ptr nonnull @.str.52, i64 15, i64 1, ptr %f)
  %call.i358 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.83, i32 noundef 0, i32 noundef 0, i32 noundef 0, i32 noundef 9) #18
  %call.i359 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.80, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.53) #18
  %call1.i360 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.81, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.53) #18
  %call2.i361 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.82, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.53) #18
  %call.i362 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.80, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.54) #18
  %call1.i363 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.81, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.54) #18
  %call2.i364 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.82, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.54) #18
  %strbuf365.sroa.0.0.copyload = load i32, ptr %strbuf, align 8
  %strbuf365.sroa.4377.0.strbuf.sroa_idx = getelementptr inbounds i8, ptr %strbuf, i64 8
  %strbuf365.sroa.4377.0.copyload = load ptr, ptr %strbuf365.sroa.4377.0.strbuf.sroa_idx, align 8
  %idx.ext.i = zext i32 %strbuf365.sroa.0.0.copyload to i64
  %add.ptr.i = getelementptr inbounds i8, ptr %strbuf365.sroa.4377.0.copyload, i64 %idx.ext.i
  %cmp9.not.i = icmp eq i32 %strbuf365.sroa.0.0.copyload, 0
  br i1 %cmp9.not.i, label %dump_stringtable_asm.exit, label %while.body.i

while.body.i:                                     ; preds = %while.body.i, %for.end143
  %p.010.i = phi ptr [ %add.ptr5.i, %while.body.i ], [ %strbuf365.sroa.4377.0.copyload, %for.end143 ]
  %call.i366 = call i64 @strlen(ptr noundef nonnull dereferenceable(1) %p.010.i) #23
  %call3.i = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.96, ptr noundef %p.010.i) #18
  %add.i = shl i64 %call.i366, 32
  %sext.i = add i64 %add.i, 4294967296
  %idx.ext4.i = ashr exact i64 %sext.i, 32
  %add.ptr5.i = getelementptr inbounds i8, ptr %p.010.i, i64 %idx.ext4.i
  %cmp.i = icmp ult ptr %add.ptr5.i, %add.ptr.i
  br i1 %cmp.i, label %while.body.i, label %dump_stringtable_asm.exit

dump_stringtable_asm.exit:                        ; preds = %while.body.i, %for.end143
  %call.i367 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.80, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.55) #18
  %call1.i368 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.81, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.55) #18
  %call2.i369 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.82, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.55) #18
  %call.i370 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.80, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.56) #18
  %call1.i371 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.81, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.56) #18
  %call2.i372 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.82, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.56) #18
  %48 = load i32, ptr @minsize, align 4, !tbaa !14
  %cmp146 = icmp sgt i32 %48, 0
  br i1 %cmp146, label %if.then148, label %if.end150

if.then148:                                       ; preds = %dump_stringtable_asm.exit
  %call149 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.57, i32 noundef %48, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.4)
  br label %if.end150

if.end150:                                        ; preds = %if.then148, %dump_stringtable_asm.exit
  %49 = load i32, ptr @padsize, align 4, !tbaa !14
  %cmp151 = icmp sgt i32 %49, 0
  br i1 %cmp151, label %if.then153, label %if.end155

if.then153:                                       ; preds = %if.end150
  %call154 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.58, i32 noundef %49)
  br label %if.end155

if.end155:                                        ; preds = %if.then153, %if.end150
  %50 = load i32, ptr @alignsize, align 4, !tbaa !14
  %cmp156 = icmp sgt i32 %50, 0
  br i1 %cmp156, label %if.then158, label %if.end159

if.then158:                                       ; preds = %if.end155
  %call.i373 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.84, i32 noundef %50) #18
  br label %if.end159

if.end159:                                        ; preds = %if.then158, %if.end155
  %call.i374 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.80, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.59) #18
  %call1.i375 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.81, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.59) #18
  %call2.i376 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %f, ptr noundef nonnull @.str.82, ptr noundef nonnull @.str.4, ptr noundef nonnull @.str.59) #18
  call void @data_free(ptr noundef nonnull byval(%struct.data) align 8 %strbuf) #18
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %strbuf) #18
  ret void
}

; Function Attrs: nofree nounwind uwtable
define internal void @asm_emit_cell(ptr nocapture noundef %e, i32 noundef %val) #10 {
entry:
  %shr = lshr i32 %val, 24
  %shr1 = lshr i32 %val, 16
  %and2 = and i32 %shr1, 255
  %shr3 = lshr i32 %val, 8
  %and4 = and i32 %shr3, 255
  %and5 = and i32 %val, 255
  %call = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %e, ptr noundef nonnull @.str.83, i32 noundef %shr, i32 noundef %and2, i32 noundef %and4, i32 noundef %and5)
  ret void
}

; Function Attrs: nofree nounwind uwtable
define internal void @asm_emit_align(ptr nocapture noundef %e, i32 noundef %a) #10 {
entry:
  %call = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %e, ptr noundef nonnull @.str.84, i32 noundef %a)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local ptr @dt_from_blob(ptr noundef %fname) local_unnamed_addr #0 {
entry:
  %magic_buf = alloca i32, align 4
  %totalsize_buf = alloca i32, align 4
  %dtbuf = alloca %struct.inbuf, align 8
  %strbuf = alloca %struct.inbuf, align 8
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %magic_buf) #18
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %totalsize_buf) #18
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %dtbuf) #18
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %strbuf) #18
  %call = tail call ptr @srcfile_relative_open(ptr noundef %fname, ptr noundef null) #18
  %call1 = call i64 @fread(ptr noundef nonnull %magic_buf, i64 noundef 4, i64 noundef 1, ptr noundef %call)
  %call2 = tail call i32 @ferror(ptr noundef %call) #18
  %tobool.not = icmp eq i32 %call2, 0
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call3 = tail call ptr @__errno_location() #21
  %0 = load i32, ptr %call3, align 4, !tbaa !14
  %call4 = tail call ptr @strerror(i32 noundef %0) #18
  tail call void (ptr, ...) @die(ptr noundef nonnull @.str.60, ptr noundef %call4) #19
  unreachable

if.end:                                           ; preds = %entry
  %conv = trunc i64 %call1 to i32
  %cmp = icmp slt i32 %conv, 1
  br i1 %cmp, label %if.then6, label %if.end10

if.then6:                                         ; preds = %if.end
  %call7 = tail call i32 @feof(ptr noundef %call) #18
  %tobool8.not = icmp eq i32 %call7, 0
  br i1 %tobool8.not, label %if.else, label %if.then9

if.then9:                                         ; preds = %if.then6
  tail call void (ptr, ...) @die(ptr noundef nonnull @.str.61) #19
  unreachable

if.else:                                          ; preds = %if.then6
  tail call void (ptr, ...) @die(ptr noundef nonnull @.str.62) #19
  unreachable

if.end10:                                         ; preds = %if.end
  %1 = load i32, ptr %magic_buf, align 4, !tbaa !14
  %cmp12.not = icmp eq i32 %1, -302117424
  br i1 %cmp12.not, label %if.end15, label %if.then14

if.then14:                                        ; preds = %if.end10
  tail call void (ptr, ...) @die(ptr noundef nonnull @.str.63) #19
  unreachable

if.end15:                                         ; preds = %if.end10
  %call16 = call i64 @fread(ptr noundef nonnull %totalsize_buf, i64 noundef 4, i64 noundef 1, ptr noundef %call)
  %call18 = tail call i32 @ferror(ptr noundef %call) #18
  %tobool19.not = icmp eq i32 %call18, 0
  br i1 %tobool19.not, label %if.end23, label %if.then20

if.then20:                                        ; preds = %if.end15
  %call21 = tail call ptr @__errno_location() #21
  %2 = load i32, ptr %call21, align 4, !tbaa !14
  %call22 = tail call ptr @strerror(i32 noundef %2) #18
  tail call void (ptr, ...) @die(ptr noundef nonnull @.str.64, ptr noundef %call22) #19
  unreachable

if.end23:                                         ; preds = %if.end15
  %conv17 = trunc i64 %call16 to i32
  %cmp24 = icmp slt i32 %conv17, 1
  br i1 %cmp24, label %if.then26, label %if.end31

if.then26:                                        ; preds = %if.end23
  %call27 = tail call i32 @feof(ptr noundef %call) #18
  %tobool28.not = icmp eq i32 %call27, 0
  br i1 %tobool28.not, label %if.else30, label %if.then29

if.then29:                                        ; preds = %if.then26
  tail call void (ptr, ...) @die(ptr noundef nonnull @.str.65) #19
  unreachable

if.else30:                                        ; preds = %if.then26
  tail call void (ptr, ...) @die(ptr noundef nonnull @.str.66) #19
  unreachable

if.end31:                                         ; preds = %if.end23
  %3 = load i32, ptr %totalsize_buf, align 4, !tbaa !14
  %rev.i217 = tail call i32 @llvm.bswap.i32(i32 %3) #18
  %conv33 = zext i32 %rev.i217 to i64
  %cmp34 = icmp ult i32 %rev.i217, 28
  br i1 %cmp34, label %if.then36, label %if.end37

if.then36:                                        ; preds = %if.end31
  tail call void (ptr, ...) @die(ptr noundef nonnull @.str.67, i32 noundef %rev.i217) #19
  unreachable

if.end37:                                         ; preds = %if.end31
  %call.i = tail call noalias ptr @malloc(i64 noundef %conv33) #24
  %tobool.not.i = icmp eq ptr %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %while.body.preheader

if.then.i:                                        ; preds = %if.end37
  tail call void (ptr, ...) @die(ptr noundef nonnull @.str.97) #22
  unreachable

while.body.preheader:                             ; preds = %if.end37
  store i32 -302117424, ptr %call.i, align 4, !tbaa !28
  %totalsize43 = getelementptr inbounds %struct.fdt_header, ptr %call.i, i64 0, i32 1
  store i32 %3, ptr %totalsize43, align 4, !tbaa !37
  %sub45 = add i32 %rev.i217, -8
  %add.ptr47 = getelementptr inbounds i8, ptr %call.i, i64 8
  br label %while.body

while.body:                                       ; preds = %if.end61, %while.body.preheader
  %p.0260 = phi ptr [ %add.ptr63, %if.end61 ], [ %add.ptr47, %while.body.preheader ]
  %sizeleft.0259 = phi i32 [ %sub62, %if.end61 ], [ %sub45, %while.body.preheader ]
  %call49 = tail call i32 @feof(ptr noundef %call) #18
  %tobool50.not = icmp eq i32 %call49, 0
  br i1 %tobool50.not, label %if.end52, label %if.then51

if.then51:                                        ; preds = %while.body
  tail call void (ptr, ...) @die(ptr noundef nonnull @.str.68, i32 noundef %rev.i217) #19
  unreachable

if.end52:                                         ; preds = %while.body
  %conv53 = sext i32 %sizeleft.0259 to i64
  %call54 = tail call i64 @fread(ptr noundef %p.0260, i64 noundef 1, i64 noundef %conv53, ptr noundef %call)
  %call56 = tail call i32 @ferror(ptr noundef %call) #18
  %tobool57.not = icmp eq i32 %call56, 0
  br i1 %tobool57.not, label %if.end61, label %if.then58

if.then58:                                        ; preds = %if.end52
  %call59 = tail call ptr @__errno_location() #21
  %4 = load i32, ptr %call59, align 4, !tbaa !14
  %call60 = tail call ptr @strerror(i32 noundef %4) #18
  tail call void (ptr, ...) @die(ptr noundef nonnull @.str.69, ptr noundef %call60) #19
  unreachable

if.end61:                                         ; preds = %if.end52
  %conv55 = trunc i64 %call54 to i32
  %sub62 = sub nsw i32 %sizeleft.0259, %conv55
  %sext = shl i64 %call54, 32
  %idx.ext = ashr exact i64 %sext, 32
  %add.ptr63 = getelementptr inbounds i8, ptr %p.0260, i64 %idx.ext
  %tobool48.not = icmp eq i32 %sub62, 0
  br i1 %tobool48.not, label %while.end, label %while.body

while.end:                                        ; preds = %if.end61
  %.pre = load i32, ptr %add.ptr47, align 4, !tbaa !35
  %off_dt_strings.phi.trans.insert = getelementptr inbounds %struct.fdt_header, ptr %call.i, i64 0, i32 3
  %.pre262 = load i32, ptr %off_dt_strings.phi.trans.insert, align 4, !tbaa !36
  %off_mem_rsvmap66.phi.trans.insert = getelementptr inbounds %struct.fdt_header, ptr %call.i, i64 0, i32 4
  %.pre263 = load i32, ptr %off_mem_rsvmap66.phi.trans.insert, align 4, !tbaa !34
  %version68.phi.trans.insert = getelementptr inbounds %struct.fdt_header, ptr %call.i, i64 0, i32 5
  %.pre264 = load i32, ptr %version68.phi.trans.insert, align 4, !tbaa !30
  %boot_cpuid_phys70.phi.trans.insert = getelementptr inbounds %struct.fdt_header, ptr %call.i, i64 0, i32 7
  %.pre265 = load i32, ptr %boot_cpuid_phys70.phi.trans.insert, align 4, !tbaa !39
  %rev.i218 = tail call i32 @llvm.bswap.i32(i32 %.pre) #18
  %rev.i219 = tail call i32 @llvm.bswap.i32(i32 %.pre262) #18
  %rev.i220 = tail call i32 @llvm.bswap.i32(i32 %.pre263) #18
  %rev.i221 = tail call i32 @llvm.bswap.i32(i32 %.pre264) #18
  %cmp72.not = icmp ult i32 %rev.i220, %rev.i217
  br i1 %cmp72.not, label %if.end75, label %if.then74

if.then74:                                        ; preds = %while.end
  tail call void (ptr, ...) @die(ptr noundef nonnull @.str.70) #19
  unreachable

if.end75:                                         ; preds = %while.end
  %cmp76.not = icmp ult i32 %rev.i218, %rev.i217
  br i1 %cmp76.not, label %if.end79, label %if.then78

if.then78:                                        ; preds = %if.end75
  tail call void (ptr, ...) @die(ptr noundef nonnull @.str.71) #19
  unreachable

if.end79:                                         ; preds = %if.end75
  %cmp80 = icmp ugt i32 %rev.i219, %rev.i217
  br i1 %cmp80, label %if.then82, label %if.end83

if.then82:                                        ; preds = %if.end79
  tail call void (ptr, ...) @die(ptr noundef nonnull @.str.72) #19
  unreachable

if.end83:                                         ; preds = %if.end79
  %cmp84 = icmp ugt i32 %rev.i221, 2
  br i1 %cmp84, label %if.then86, label %if.end106.thread

if.then86:                                        ; preds = %if.end83
  %size_dt_strings = getelementptr inbounds %struct.fdt_header, ptr %call.i, i64 0, i32 8
  %5 = load i32, ptr %size_dt_strings, align 4, !tbaa !40
  %rev.i223 = tail call i32 @llvm.bswap.i32(i32 %5) #18
  %add = add i32 %rev.i223, %rev.i219
  %cmp88 = icmp ult i32 %add, %rev.i219
  %cmp91 = icmp ugt i32 %add, %rev.i217
  %or.cond = select i1 %cmp88, i1 true, i1 %cmp91
  br i1 %or.cond, label %if.then93, label %if.end106

if.then93:                                        ; preds = %if.then86
  tail call void (ptr, ...) @die(ptr noundef nonnull @.str.73) #19
  unreachable

if.end106.thread:                                 ; preds = %if.end83
  %idx.ext102 = zext i32 %rev.i219 to i64
  %add.ptr103 = getelementptr inbounds i8, ptr %call.i, i64 %idx.ext102
  %add.ptr105 = getelementptr inbounds i8, ptr %call.i, i64 %conv33
  store ptr %add.ptr103, ptr %strbuf, align 8, !tbaa !66
  %limit2.i224 = getelementptr inbounds %struct.inbuf, ptr %strbuf, i64 0, i32 1
  store ptr %add.ptr105, ptr %limit2.i224, align 8, !tbaa !68
  %ptr.i225 = getelementptr inbounds %struct.inbuf, ptr %strbuf, i64 0, i32 2
  store ptr %add.ptr103, ptr %ptr.i225, align 8, !tbaa !69
  br label %if.end120

if.end106:                                        ; preds = %if.then86
  %idx.ext95 = zext i32 %rev.i219 to i64
  %add.ptr96 = getelementptr inbounds i8, ptr %call.i, i64 %idx.ext95
  %idx.ext99 = zext i32 %rev.i223 to i64
  %add.ptr100 = getelementptr inbounds i8, ptr %add.ptr96, i64 %idx.ext99
  store ptr %add.ptr96, ptr %strbuf, align 8, !tbaa !66
  %limit2.i = getelementptr inbounds %struct.inbuf, ptr %strbuf, i64 0, i32 1
  store ptr %add.ptr100, ptr %limit2.i, align 8, !tbaa !68
  %ptr.i = getelementptr inbounds %struct.inbuf, ptr %strbuf, i64 0, i32 2
  store ptr %add.ptr96, ptr %ptr.i, align 8, !tbaa !69
  %cmp107 = icmp ugt i32 %rev.i221, 16
  br i1 %cmp107, label %if.then109, label %if.end120

if.then109:                                       ; preds = %if.end106
  %size_dt_struct = getelementptr inbounds %struct.fdt_header, ptr %call.i, i64 0, i32 9
  %6 = load i32, ptr %size_dt_struct, align 4, !tbaa !41
  %rev.i226 = tail call i32 @llvm.bswap.i32(i32 %6) #18
  %add111 = add i32 %rev.i226, %rev.i218
  %cmp112 = icmp ult i32 %add111, %rev.i218
  %cmp116 = icmp ugt i32 %add111, %rev.i217
  %or.cond216 = select i1 %cmp112, i1 true, i1 %cmp116
  br i1 %or.cond216, label %if.then118, label %if.end120

if.then118:                                       ; preds = %if.then109
  tail call void (ptr, ...) @die(ptr noundef nonnull @.str.74) #19
  unreachable

if.end120:                                        ; preds = %if.then109, %if.end106, %if.end106.thread
  %cmp121 = icmp ult i32 %rev.i221, 16
  %. = select i1 %cmp121, i32 7, i32 64
  %idx.ext127 = zext i32 %rev.i220 to i64
  %add.ptr128 = getelementptr inbounds i8, ptr %call.i, i64 %idx.ext127
  %add.ptr130 = getelementptr inbounds i8, ptr %call.i, i64 %conv33
  %idx.ext131 = zext i32 %rev.i218 to i64
  %add.ptr132 = getelementptr inbounds i8, ptr %call.i, i64 %idx.ext131
  store ptr %add.ptr132, ptr %dtbuf, align 8, !tbaa !66
  %limit2.i229 = getelementptr inbounds %struct.inbuf, ptr %dtbuf, i64 0, i32 1
  store ptr %add.ptr130, ptr %limit2.i229, align 8, !tbaa !68
  %ptr.i230 = getelementptr inbounds %struct.inbuf, ptr %dtbuf, i64 0, i32 2
  store ptr %add.ptr132, ptr %ptr.i230, align 8, !tbaa !69
  %add.ptr.i18.i = getelementptr inbounds i8, ptr %add.ptr128, i64 16
  %cmp.i19.i = icmp ugt ptr %add.ptr.i18.i, %add.ptr130
  br i1 %cmp.i19.i, label %if.then.i.i, label %flat_read_chunk.exit.i

if.then.i.i:                                      ; preds = %cleanup.i, %if.end120
  tail call void (ptr, ...) @die(ptr noundef nonnull @.str.98) #22
  unreachable

flat_read_chunk.exit.i:                           ; preds = %cleanup.i, %if.end120
  %add.ptr.i21.i = phi ptr [ %add.ptr.i.i, %cleanup.i ], [ %add.ptr.i18.i, %if.end120 ]
  %7 = phi ptr [ %add.ptr.i21.i, %cleanup.i ], [ %add.ptr128, %if.end120 ]
  %reservelist.020.i = phi ptr [ %call5.i, %cleanup.i ], [ null, %if.end120 ]
  %re.sroa.4.0..sroa_idx.i = getelementptr inbounds i8, ptr %7, i64 8
  %re.sroa.4.0.copyload.i = load i64, ptr %re.sroa.4.0..sroa_idx.i, align 1
  %cmp.i = icmp eq i64 %re.sroa.4.0.copyload.i, 0
  br i1 %cmp.i, label %if.end.i, label %cleanup.i

cleanup.i:                                        ; preds = %flat_read_chunk.exit.i
  %re.sroa.0.0.copyload.i = load i64, ptr %7, align 1
  %or26.i12.i = tail call i64 @llvm.bswap.i64(i64 %re.sroa.4.0.copyload.i) #18
  %or26.i.i = tail call i64 @llvm.bswap.i64(i64 %re.sroa.0.0.copyload.i) #18
  %call4.i = tail call ptr @build_reserve_entry(i64 noundef %or26.i.i, i64 noundef %or26.i12.i) #18
  %call5.i = tail call ptr @add_reserve_entry(ptr noundef %reservelist.020.i, ptr noundef %call4.i) #18
  %add.ptr.i.i = getelementptr inbounds i8, ptr %add.ptr.i21.i, i64 16
  %cmp.i.i = icmp ugt ptr %add.ptr.i.i, %add.ptr130
  br i1 %cmp.i.i, label %if.then.i.i, label %flat_read_chunk.exit.i

if.end.i:                                         ; preds = %flat_read_chunk.exit.i
  %add.ptr.i.i233 = getelementptr inbounds i8, ptr %add.ptr132, i64 4
  %cmp.i.i235 = icmp ugt ptr %add.ptr.i.i233, %add.ptr130
  br i1 %cmp.i.i235, label %if.then.i.i236, label %flat_read_word.exit

if.then.i.i236:                                   ; preds = %if.end.i
  tail call void (ptr, ...) @die(ptr noundef nonnull @.str.98) #22
  unreachable

flat_read_word.exit:                              ; preds = %if.end.i
  %val.0.copyload.i = load i32, ptr %add.ptr132, align 1
  store ptr %add.ptr.i.i233, ptr %ptr.i230, align 8, !tbaa !69
  %cmp137.not = icmp eq i32 %val.0.copyload.i, 16777216
  br i1 %cmp137.not, label %if.end140, label %if.then139

if.then139:                                       ; preds = %flat_read_word.exit
  %rev.i.i = tail call i32 @llvm.bswap.i32(i32 %val.0.copyload.i) #18
  tail call void (ptr, ...) @die(ptr noundef nonnull @.str.75, i32 noundef %rev.i.i) #19
  unreachable

if.end140:                                        ; preds = %flat_read_word.exit
  %call141 = call fastcc ptr @unflatten_tree(ptr noundef nonnull %dtbuf, ptr noundef nonnull %strbuf, ptr noundef nonnull @.str.76, i32 noundef %.)
  %8 = load ptr, ptr %ptr.i230, align 8, !tbaa !69
  %9 = load ptr, ptr %dtbuf, align 8, !tbaa !66
  %sub.ptr.lhs.cast.i239 = ptrtoint ptr %8 to i64
  %sub.ptr.rhs.cast.i240 = ptrtoint ptr %9 to i64
  %sub.ptr.sub.i241 = sub i64 %sub.ptr.lhs.cast.i239, %sub.ptr.rhs.cast.i240
  %rem.i242 = and i64 %sub.ptr.sub.i241, 3
  %cmp.i243 = icmp eq i64 %rem.i242, 0
  br i1 %cmp.i243, label %if.end.i248, label %if.else.i244

if.else.i244:                                     ; preds = %if.end140
  tail call void @__assert_fail(ptr noundef nonnull @.str.99, ptr noundef nonnull @.str.89, i32 noundef 591, ptr noundef nonnull @__PRETTY_FUNCTION__.flat_read_word) #22
  unreachable

if.end.i248:                                      ; preds = %if.end140
  %add.ptr.i.i245 = getelementptr inbounds i8, ptr %8, i64 4
  %10 = load ptr, ptr %limit2.i229, align 8, !tbaa !68
  %cmp.i.i247 = icmp ugt ptr %add.ptr.i.i245, %10
  br i1 %cmp.i.i247, label %if.then.i.i249, label %flat_read_word.exit253

if.then.i.i249:                                   ; preds = %if.end.i248
  tail call void (ptr, ...) @die(ptr noundef nonnull @.str.98) #22
  unreachable

flat_read_word.exit253:                           ; preds = %if.end.i248
  %val.0.copyload.i250 = load i32, ptr %8, align 1
  %cmp143.not = icmp eq i32 %val.0.copyload.i250, 150994944
  br i1 %cmp143.not, label %if.end146, label %if.then145

if.then145:                                       ; preds = %flat_read_word.exit253
  tail call void (ptr, ...) @die(ptr noundef nonnull @.str.77) #19
  unreachable

if.end146:                                        ; preds = %flat_read_word.exit253
  %rev.i222 = tail call i32 @llvm.bswap.i32(i32 %.pre265) #18
  tail call void @free(ptr noundef nonnull %call.i) #18
  %call147 = tail call i32 @fclose(ptr noundef %call)
  %call148 = tail call ptr @build_dt_info(i32 noundef 1, ptr noundef %reservelist.020.i, ptr noundef %call141, i32 noundef %rev.i222) #18
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %strbuf) #18
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %dtbuf) #18
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %totalsize_buf) #18
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %magic_buf) #18
  ret ptr %call148
}

declare ptr @srcfile_relative_open(ptr noundef, ptr noundef) local_unnamed_addr #6

; Function Attrs: nofree nounwind
declare noundef i64 @fread(ptr nocapture noundef, i64 noundef, i64 noundef, ptr nocapture noundef) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare noundef i32 @feof(ptr nocapture noundef) local_unnamed_addr #5

; Function Attrs: nounwind uwtable
define internal fastcc ptr @unflatten_tree(ptr nocapture noundef %dtbuf, ptr nocapture noundef readonly %strbuf, ptr noundef %parent_flatname, i32 noundef %flags) unnamed_addr #0 {
entry:
  %d.i.i = alloca %struct.data, align 8
  %tmp.i.i = alloca %struct.data, align 8
  %val.i = alloca %struct.data, align 8
  %tmp.i = alloca %struct.data, align 8
  %call = tail call ptr @build_node(ptr noundef null, ptr noundef null, ptr noundef null) #18
  %ptr.i = getelementptr inbounds %struct.inbuf, ptr %dtbuf, i64 0, i32 2
  %0 = load ptr, ptr %ptr.i, align 8, !tbaa !69
  %limit.i = getelementptr inbounds %struct.inbuf, ptr %dtbuf, i64 0, i32 1
  %1 = load ptr, ptr %limit.i, align 8, !tbaa !68
  br label %do.body.i

do.body.i:                                        ; preds = %if.end.i, %entry
  %p.0.i = phi ptr [ %0, %entry ], [ %incdec.ptr.i, %if.end.i ]
  %len.0.i = phi i32 [ 0, %entry ], [ %inc.i, %if.end.i ]
  %cmp.not.i = icmp ult ptr %p.0.i, %1
  br i1 %cmp.not.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %do.body.i
  tail call void (ptr, ...) @die(ptr noundef nonnull @.str.98) #22
  unreachable

if.end.i:                                         ; preds = %do.body.i
  %inc.i = add nuw nsw i32 %len.0.i, 1
  %incdec.ptr.i = getelementptr inbounds i8, ptr %p.0.i, i64 1
  %2 = load i8, ptr %p.0.i, align 1, !tbaa !70
  %cmp1.not.i = icmp eq i8 %2, 0
  br i1 %cmp1.not.i, label %do.end.i, label %do.body.i

do.end.i:                                         ; preds = %if.end.i
  %call.i = tail call ptr @xstrdup(ptr noundef %0) #18
  %3 = load ptr, ptr %ptr.i, align 8, !tbaa !69
  %idx.ext.i = zext i32 %inc.i to i64
  %add.ptr.i = getelementptr inbounds i8, ptr %3, i64 %idx.ext.i
  %4 = load ptr, ptr %dtbuf, align 8, !tbaa !66
  %sub.ptr.lhs.cast.i.i = ptrtoint ptr %add.ptr.i to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint ptr %4 to i64
  %sub.ptr.sub.i.i = sub i64 %sub.ptr.lhs.cast.i.i, %sub.ptr.rhs.cast.i.i
  %sub.i.i = shl i64 %sub.ptr.sub.i.i, 32
  %and.i.i = add i64 %sub.i.i, 12884901888
  %sext.i = ashr exact i64 %and.i.i, 32
  %idx.ext.i.i = and i64 %sext.i, -4
  %add.ptr.i.i = getelementptr inbounds i8, ptr %4, i64 %idx.ext.i.i
  store ptr %add.ptr.i.i, ptr %ptr.i, align 8, !tbaa !69
  %5 = load ptr, ptr %limit.i, align 8, !tbaa !68
  %cmp.i.i = icmp ugt ptr %add.ptr.i.i, %5
  br i1 %cmp.i.i, label %if.then.i.i, label %flat_read_string.exit

if.then.i.i:                                      ; preds = %do.end.i
  tail call void (ptr, ...) @die(ptr noundef nonnull @.str.98) #22
  unreachable

flat_read_string.exit:                            ; preds = %do.end.i
  %and = and i32 %flags, 1
  %tobool.not = icmp eq i32 %and, 0
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %flat_read_string.exit
  %call.i42 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %parent_flatname) #23
  %call2.i = tail call i32 @strncmp(ptr noundef %call.i, ptr noundef %parent_flatname, i64 noundef %call.i42) #23
  %cmp.i = icmp eq i32 %call2.i, 0
  br i1 %cmp.i, label %nodename_from_path.exit, label %if.then.i43

if.then.i43:                                      ; preds = %if.then
  tail call void (ptr, ...) @die(ptr noundef nonnull @.str.104, ptr noundef %call.i, ptr noundef %parent_flatname) #22
  unreachable

nodename_from_path.exit:                          ; preds = %if.then
  %call4.i = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %parent_flatname, ptr noundef nonnull dereferenceable(2) @.str.105) #23
  %cmp5.i = icmp ne i32 %call4.i, 0
  %inc.i44 = zext i1 %cmp5.i to i64
  %spec.select.i = add i64 %call.i42, %inc.i44
  %sext.i45 = shl i64 %spec.select.i, 32
  %idx.ext.i46 = ashr exact i64 %sext.i45, 32
  %add.ptr.i47 = getelementptr inbounds i8, ptr %call.i, i64 %idx.ext.i46
  %call9.i = tail call ptr @xstrdup(ptr noundef %add.ptr.i47) #18
  br label %if.end

if.end:                                           ; preds = %nodename_from_path.exit, %flat_read_string.exit
  %call.i.sink = phi ptr [ %call9.i, %nodename_from_path.exit ], [ %call.i, %flat_read_string.exit ]
  %name3 = getelementptr inbounds %struct.node, ptr %call, i64 0, i32 1
  store ptr %call.i.sink, ptr %name3, align 8, !tbaa !61
  %and14 = and i32 %flags, 64
  %tobool15.not = icmp eq i32 %and14, 0
  %children = getelementptr inbounds %struct.node, ptr %call, i64 0, i32 3
  %limit.i.i61 = getelementptr inbounds %struct.inbuf, ptr %strbuf, i64 0, i32 1
  %and.i = and i32 %flags, 2
  %tobool.i = icmp ne i32 %and.i, 0
  %val.i.i = getelementptr inbounds %struct.data, ptr %d.i.i, i64 0, i32 1
  br label %do.body

do.body:                                          ; preds = %sw.epilog, %if.end
  %6 = load ptr, ptr %ptr.i, align 8, !tbaa !69
  %7 = load ptr, ptr %dtbuf, align 8, !tbaa !66
  %sub.ptr.lhs.cast.i = ptrtoint ptr %6 to i64
  %sub.ptr.rhs.cast.i = ptrtoint ptr %7 to i64
  %sub.ptr.sub.i = sub i64 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i
  %rem.i = and i64 %sub.ptr.sub.i, 3
  %cmp.i50 = icmp eq i64 %rem.i, 0
  br i1 %cmp.i50, label %if.end.i53, label %if.else.i

if.else.i:                                        ; preds = %do.body
  call void @__assert_fail(ptr noundef nonnull @.str.99, ptr noundef nonnull @.str.89, i32 noundef 591, ptr noundef nonnull @__PRETTY_FUNCTION__.flat_read_word) #22
  unreachable

if.end.i53:                                       ; preds = %do.body
  %add.ptr.i.i51 = getelementptr inbounds i8, ptr %6, i64 4
  %8 = load ptr, ptr %limit.i, align 8, !tbaa !68
  %cmp.i.i52 = icmp ugt ptr %add.ptr.i.i51, %8
  br i1 %cmp.i.i52, label %if.then.i.i54, label %flat_read_word.exit

if.then.i.i54:                                    ; preds = %if.end.i53
  call void (ptr, ...) @die(ptr noundef nonnull @.str.98) #22
  unreachable

flat_read_word.exit:                              ; preds = %if.end.i53
  %val.0.copyload.i = load i32, ptr %6, align 1
  store ptr %add.ptr.i.i51, ptr %ptr.i, align 8, !tbaa !69
  %rev.i.i = call i32 @llvm.bswap.i32(i32 %val.0.copyload.i) #18
  switch i32 %rev.i.i, label %sw.default [
    i32 3, label %sw.bb
    i32 1, label %sw.bb10
    i32 4, label %sw.bb13
    i32 9, label %sw.bb12
    i32 2, label %do.end
  ]

sw.bb:                                            ; preds = %flat_read_word.exit
  %9 = load ptr, ptr %children, align 8, !tbaa !71
  %tobool5.not = icmp eq ptr %9, null
  br i1 %tobool5.not, label %if.end8, label %if.then6

if.then6:                                         ; preds = %sw.bb
  %10 = load ptr, ptr @stderr, align 8, !tbaa !15
  %11 = call i64 @fwrite(ptr nonnull @.str.100, i64 60, i64 1, ptr %10) #20
  %.pre = load ptr, ptr %ptr.i, align 8, !tbaa !69
  %.pre103 = load ptr, ptr %dtbuf, align 8, !tbaa !66
  %.pre104 = ptrtoint ptr %.pre103 to i64
  br label %if.end8

if.end8:                                          ; preds = %if.then6, %sw.bb
  %sub.ptr.rhs.cast.i.i56.pre-phi = phi i64 [ %.pre104, %if.then6 ], [ %sub.ptr.rhs.cast.i, %sw.bb ]
  %12 = phi ptr [ %.pre, %if.then6 ], [ %add.ptr.i.i51, %sw.bb ]
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %val.i) #18
  %sub.ptr.lhs.cast.i.i55 = ptrtoint ptr %12 to i64
  %sub.ptr.sub.i.i57 = sub i64 %sub.ptr.lhs.cast.i.i55, %sub.ptr.rhs.cast.i.i56.pre-phi
  %rem.i.i = and i64 %sub.ptr.sub.i.i57, 3
  %cmp.i.i58 = icmp eq i64 %rem.i.i, 0
  br i1 %cmp.i.i58, label %if.end.i.i, label %if.else.i.i

if.else.i.i:                                      ; preds = %if.end8
  call void @__assert_fail(ptr noundef nonnull @.str.99, ptr noundef nonnull @.str.89, i32 noundef 591, ptr noundef nonnull @__PRETTY_FUNCTION__.flat_read_word) #22
  unreachable

if.end.i.i:                                       ; preds = %if.end8
  %add.ptr.i.i.i = getelementptr inbounds i8, ptr %12, i64 4
  %13 = load ptr, ptr %limit.i, align 8, !tbaa !68
  %cmp.i.i.i = icmp ugt ptr %add.ptr.i.i.i, %13
  br i1 %cmp.i.i.i, label %if.then.i.i.i, label %flat_read_word.exit.i

if.then.i.i.i:                                    ; preds = %if.end.i.i
  call void (ptr, ...) @die(ptr noundef nonnull @.str.98) #22
  unreachable

flat_read_word.exit.i:                            ; preds = %if.end.i.i
  %val.0.copyload.i.i = load i32, ptr %12, align 1
  store ptr %add.ptr.i.i.i, ptr %ptr.i, align 8, !tbaa !69
  %rev.i.i.i = call i32 @llvm.bswap.i32(i32 %val.0.copyload.i.i) #18
  %sub.ptr.lhs.cast.i9.i = ptrtoint ptr %add.ptr.i.i.i to i64
  %sub.ptr.sub.i11.i = sub i64 %sub.ptr.lhs.cast.i9.i, %sub.ptr.rhs.cast.i.i56.pre-phi
  %rem.i12.i = and i64 %sub.ptr.sub.i11.i, 3
  %cmp.i13.i = icmp eq i64 %rem.i12.i, 0
  br i1 %cmp.i13.i, label %if.end.i18.i, label %if.else.i14.i

if.else.i14.i:                                    ; preds = %flat_read_word.exit.i
  call void @__assert_fail(ptr noundef nonnull @.str.99, ptr noundef nonnull @.str.89, i32 noundef 591, ptr noundef nonnull @__PRETTY_FUNCTION__.flat_read_word) #22
  unreachable

if.end.i18.i:                                     ; preds = %flat_read_word.exit.i
  %add.ptr.i.i15.i = getelementptr inbounds i8, ptr %12, i64 8
  %cmp.i.i17.i = icmp ugt ptr %add.ptr.i.i15.i, %13
  br i1 %cmp.i.i17.i, label %if.then.i.i19.i, label %flat_read_word.exit22.i

if.then.i.i19.i:                                  ; preds = %if.end.i18.i
  call void (ptr, ...) @die(ptr noundef nonnull @.str.98) #22
  unreachable

flat_read_word.exit22.i:                          ; preds = %if.end.i18.i
  %val.0.copyload.i20.i = load i32, ptr %add.ptr.i.i.i, align 1
  store ptr %add.ptr.i.i15.i, ptr %ptr.i, align 8, !tbaa !69
  %rev.i.i21.i = call i32 @llvm.bswap.i32(i32 %val.0.copyload.i20.i) #18
  %14 = load ptr, ptr %strbuf, align 8, !tbaa !66
  %idx.ext.i.i59 = sext i32 %rev.i.i21.i to i64
  %add.ptr.i.i60 = getelementptr inbounds i8, ptr %14, i64 %idx.ext.i.i59
  %15 = load ptr, ptr %limit.i.i61, align 8, !tbaa !68
  %cmp.not18.i.i = icmp uge ptr %add.ptr.i.i60, %15
  %cmp219.i.i = icmp slt i32 %rev.i.i21.i, 0
  %or.cond20.i.i = or i1 %cmp219.i.i, %cmp.not18.i.i
  br i1 %or.cond20.i.i, label %if.then.i.i62, label %if.end.i23.i

while.cond.i.i:                                   ; preds = %if.end.i23.i
  %incdec.ptr.i.i = getelementptr inbounds i8, ptr %p.021.i.i, i64 1
  %cmp.not.i.i = icmp uge ptr %incdec.ptr.i.i, %15
  %cmp2.i.i = icmp ult ptr %incdec.ptr.i.i, %14
  %or.cond.i.i = select i1 %cmp.not.i.i, i1 true, i1 %cmp2.i.i
  br i1 %or.cond.i.i, label %if.then.i.i62, label %if.end.i23.i

if.then.i.i62:                                    ; preds = %while.cond.i.i, %flat_read_word.exit22.i
  call void (ptr, ...) @die(ptr noundef nonnull @.str.106, i32 noundef %rev.i.i21.i) #22
  unreachable

if.end.i23.i:                                     ; preds = %while.cond.i.i, %flat_read_word.exit22.i
  %p.021.i.i = phi ptr [ %incdec.ptr.i.i, %while.cond.i.i ], [ %add.ptr.i.i60, %flat_read_word.exit22.i ]
  %16 = load i8, ptr %p.021.i.i, align 1, !tbaa !70
  %cmp3.i.i = icmp eq i8 %16, 0
  br i1 %cmp3.i.i, label %flat_read_stringtable.exit.i, label %while.cond.i.i

flat_read_stringtable.exit.i:                     ; preds = %if.end.i23.i
  %call.i.i = call ptr @xstrdup(ptr noundef %add.ptr.i.i60) #18
  %cmp.i63 = icmp ugt i32 %rev.i.i.i, 7
  %or.cond.i = select i1 %tobool.i, i1 %cmp.i63, i1 false
  br i1 %or.cond.i, label %if.then.i67, label %if.end.i68

if.then.i67:                                      ; preds = %flat_read_stringtable.exit.i
  %17 = load ptr, ptr %ptr.i, align 8, !tbaa !69
  %18 = load ptr, ptr %dtbuf, align 8, !tbaa !66
  %sub.ptr.lhs.cast.i25.i = ptrtoint ptr %17 to i64
  %sub.ptr.rhs.cast.i26.i = ptrtoint ptr %18 to i64
  %sub.ptr.sub.i27.i = sub i64 %sub.ptr.lhs.cast.i25.i, %sub.ptr.rhs.cast.i26.i
  %sub.i.i64 = shl i64 %sub.ptr.sub.i27.i, 32
  %and.i.i65 = add i64 %sub.i.i64, 30064771072
  %sext.i66 = ashr exact i64 %and.i.i65, 32
  %idx.ext.i28.i = and i64 %sext.i66, -8
  %add.ptr.i29.i = getelementptr inbounds i8, ptr %18, i64 %idx.ext.i28.i
  store ptr %add.ptr.i29.i, ptr %ptr.i, align 8, !tbaa !69
  %19 = load ptr, ptr %limit.i, align 8, !tbaa !68
  %cmp.i31.i = icmp ugt ptr %add.ptr.i29.i, %19
  br i1 %cmp.i31.i, label %if.then.i32.i, label %if.end.thread.i

if.end.thread.i:                                  ; preds = %if.then.i67
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %tmp.i)
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %d.i.i) #18, !noalias !72
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %d.i.i, i8 0, i64 24, i1 false) #18, !noalias !72
  br label %if.end.i39.i

if.then.i32.i:                                    ; preds = %if.then.i67
  call void (ptr, ...) @die(ptr noundef nonnull @.str.98) #22
  unreachable

if.end.i68:                                       ; preds = %flat_read_stringtable.exit.i
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %tmp.i)
  call void @llvm.experimental.noalias.scope.decl(metadata !75) #18
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %d.i.i) #18, !noalias !75
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %d.i.i, i8 0, i64 24, i1 false) #18, !noalias !75
  %cmp.i34.i = icmp eq i32 %val.0.copyload.i.i, 0
  br i1 %cmp.i34.i, label %if.then.i35.i, label %if.end.i39.i

if.then.i35.i:                                    ; preds = %if.end.i68
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %tmp.i, i8 0, i64 24, i1 false), !alias.scope !75
  br label %flat_read_property.exit

if.end.i39.i:                                     ; preds = %if.end.i68, %if.end.thread.i
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %tmp.i.i) #18, !noalias !75
  call void @data_grow_for(ptr nonnull sret(%struct.data) align 8 %tmp.i.i, ptr noundef nonnull byval(%struct.data) align 8 %d.i.i, i32 noundef %rev.i.i.i) #18, !noalias !75
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %d.i.i, ptr noundef nonnull align 8 dereferenceable(24) %tmp.i.i, i64 24, i1 false) #18, !tbaa.struct !13, !noalias !75
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %tmp.i.i) #18, !noalias !75
  store i32 %rev.i.i.i, ptr %d.i.i, align 8, !tbaa !25, !noalias !75
  %20 = load ptr, ptr %ptr.i, align 8, !tbaa !69, !noalias !75
  %idx.ext.i.i.i = sext i32 %rev.i.i.i to i64
  %add.ptr.i.i36.i = getelementptr inbounds i8, ptr %20, i64 %idx.ext.i.i.i
  %21 = load ptr, ptr %limit.i, align 8, !tbaa !68, !noalias !75
  %cmp.i.i38.i = icmp ugt ptr %add.ptr.i.i36.i, %21
  br i1 %cmp.i.i38.i, label %if.then.i.i40.i, label %flat_read_chunk.exit.i.i

if.then.i.i40.i:                                  ; preds = %if.end.i39.i
  call void (ptr, ...) @die(ptr noundef nonnull @.str.98) #22, !noalias !75
  unreachable

flat_read_chunk.exit.i.i:                         ; preds = %if.end.i39.i
  %22 = load ptr, ptr %val.i.i, align 8, !tbaa !42, !noalias !75
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %22, ptr align 1 %20, i64 %idx.ext.i.i.i, i1 false) #18, !noalias !75
  %23 = load ptr, ptr %ptr.i, align 8, !tbaa !69, !noalias !75
  %add.ptr4.i.i.i = getelementptr inbounds i8, ptr %23, i64 %idx.ext.i.i.i
  %24 = load ptr, ptr %dtbuf, align 8, !tbaa !66, !noalias !75
  %sub.ptr.lhs.cast.i.i.i = ptrtoint ptr %add.ptr4.i.i.i to i64
  %sub.ptr.rhs.cast.i.i.i = ptrtoint ptr %24 to i64
  %sub.ptr.sub.i.i.i = sub i64 %sub.ptr.lhs.cast.i.i.i, %sub.ptr.rhs.cast.i.i.i
  %sub.i.i.i = shl i64 %sub.ptr.sub.i.i.i, 32
  %and.i.i.i = add i64 %sub.i.i.i, 12884901888
  %sext.i.i = ashr exact i64 %and.i.i.i, 32
  %idx.ext.i8.i.i = and i64 %sext.i.i, -4
  %add.ptr.i9.i.i = getelementptr inbounds i8, ptr %24, i64 %idx.ext.i8.i.i
  store ptr %add.ptr.i9.i.i, ptr %ptr.i, align 8, !tbaa !69, !noalias !75
  %25 = load ptr, ptr %limit.i, align 8, !tbaa !68, !noalias !75
  %cmp.i11.i.i = icmp ugt ptr %add.ptr.i9.i.i, %25
  br i1 %cmp.i11.i.i, label %if.then.i12.i.i, label %flat_realign.exit.i.i

if.then.i12.i.i:                                  ; preds = %flat_read_chunk.exit.i.i
  call void (ptr, ...) @die(ptr noundef nonnull @.str.98) #22, !noalias !75
  unreachable

flat_realign.exit.i.i:                            ; preds = %flat_read_chunk.exit.i.i
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %tmp.i, ptr noundef nonnull align 8 dereferenceable(24) %d.i.i, i64 24, i1 false) #18, !tbaa.struct !13
  br label %flat_read_property.exit

flat_read_property.exit:                          ; preds = %flat_realign.exit.i.i, %if.then.i35.i
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %d.i.i) #18, !noalias !75
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %val.i, ptr noundef nonnull align 8 dereferenceable(24) %tmp.i, i64 24, i1 false) #18, !tbaa.struct !13
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %tmp.i)
  %call3.i = call ptr @build_property(ptr noundef %call.i.i, ptr noundef nonnull byval(%struct.data) align 8 %val.i, ptr noundef null) #18
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %val.i) #18
  call void @add_property(ptr noundef %call, ptr noundef %call3.i) #18
  br label %sw.epilog

sw.bb10:                                          ; preds = %flat_read_word.exit
  %call11 = call fastcc ptr @unflatten_tree(ptr noundef nonnull %dtbuf, ptr noundef %strbuf, ptr noundef %call.i, i32 noundef %flags)
  call void @add_child(ptr noundef %call, ptr noundef %call11) #18
  br label %sw.epilog

sw.bb12:                                          ; preds = %flat_read_word.exit
  call void (ptr, ...) @die(ptr noundef nonnull @.str.101) #19
  unreachable

sw.bb13:                                          ; preds = %flat_read_word.exit
  br i1 %tobool15.not, label %if.then16, label %sw.epilog

if.then16:                                        ; preds = %sw.bb13
  %26 = load ptr, ptr @stderr, align 8, !tbaa !15
  %27 = call i64 @fwrite(ptr nonnull @.str.102, i64 48, i64 1, ptr %26) #20
  br label %sw.epilog

sw.default:                                       ; preds = %flat_read_word.exit
  call void (ptr, ...) @die(ptr noundef nonnull @.str.103, i32 noundef %rev.i.i) #19
  unreachable

sw.epilog:                                        ; preds = %if.then16, %sw.bb13, %sw.bb10, %flat_read_property.exit
  %cmp.not = icmp eq i32 %val.0.copyload.i, 33554432
  br i1 %cmp.not, label %do.end, label %do.body

do.end:                                           ; preds = %sw.epilog, %flat_read_word.exit
  %name19 = getelementptr inbounds %struct.node, ptr %call, i64 0, i32 1
  %28 = load ptr, ptr %name19, align 8, !tbaa !61
  %cmp20.not = icmp eq ptr %28, %call.i
  br i1 %cmp20.not, label %if.end22, label %if.then21

if.then21:                                        ; preds = %do.end
  call void @free(ptr noundef %call.i) #18
  br label %if.end22

if.end22:                                         ; preds = %if.then21, %do.end
  ret ptr %call
}

; Function Attrs: inaccessiblemem_or_argmemonly mustprogress nounwind willreturn
declare void @free(ptr allocptr nocapture noundef) local_unnamed_addr #11

; Function Attrs: nofree nounwind
declare noundef i32 @fclose(ptr nocapture noundef) local_unnamed_addr #5

declare ptr @build_dt_info(i32 noundef, ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #6

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare void @llvm.va_start(ptr) #12

; Function Attrs: nofree nounwind
declare noundef i32 @vfprintf(ptr nocapture noundef, ptr nocapture noundef readonly, ptr noundef) local_unnamed_addr #5

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare void @llvm.va_end(ptr) #12

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) local_unnamed_addr #13

; Function Attrs: argmemonly mustprogress nofree nounwind readonly willreturn
declare i32 @strcmp(ptr nocapture noundef, ptr nocapture noundef) local_unnamed_addr #14

; Function Attrs: argmemonly mustprogress nofree nounwind readonly willreturn
declare i64 @strlen(ptr nocapture noundef) local_unnamed_addr #14

; Function Attrs: nounwind uwtable
define internal void @bin_emit_string(ptr noundef %e, ptr noundef %str, i32 noundef %len) #0 {
entry:
  %tmp = alloca %struct.data, align 8
  %tmp1 = alloca %struct.data, align 8
  %cmp = icmp eq i32 %len, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %str) #23
  %conv = trunc i64 %call to i32
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %len.addr.0 = phi i32 [ %conv, %if.then ], [ %len, %entry ]
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %tmp) #18
  call void @data_append_data(ptr nonnull sret(%struct.data) align 8 %tmp, ptr noundef byval(%struct.data) align 8 %e, ptr noundef %str, i32 noundef %len.addr.0) #18
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %e, ptr noundef nonnull align 8 dereferenceable(24) %tmp, i64 24, i1 false), !tbaa.struct !13
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %tmp) #18
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %tmp1) #18
  call void @data_append_byte(ptr nonnull sret(%struct.data) align 8 %tmp1, ptr noundef byval(%struct.data) align 8 %e, i8 noundef zeroext 0) #18
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %e, ptr noundef nonnull align 8 dereferenceable(24) %tmp1, i64 24, i1 false), !tbaa.struct !13
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %tmp1) #18
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @bin_emit_align(ptr noundef %e, i32 noundef %a) #0 {
entry:
  %tmp = alloca %struct.data, align 8
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %tmp) #18
  call void @data_append_align(ptr nonnull sret(%struct.data) align 8 %tmp, ptr noundef byval(%struct.data) align 8 %e, i32 noundef %a) #18
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %e, ptr noundef nonnull align 8 dereferenceable(24) %tmp, i64 24, i1 false), !tbaa.struct !13
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %tmp) #18
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @bin_emit_data(ptr noundef %e, ptr nocapture noundef readonly byval(%struct.data) align 8 %d) #0 {
entry:
  %tmp = alloca %struct.data, align 8
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %tmp) #18
  %val = getelementptr inbounds %struct.data, ptr %d, i64 0, i32 1
  %0 = load ptr, ptr %val, align 8, !tbaa !42
  %1 = load i32, ptr %d, align 8, !tbaa !25
  call void @data_append_data(ptr nonnull sret(%struct.data) align 8 %tmp, ptr noundef byval(%struct.data) align 8 %e, ptr noundef %0, i32 noundef %1) #18
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %e, ptr noundef nonnull align 8 dereferenceable(24) %tmp, i64 24, i1 false), !tbaa.struct !13
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %tmp) #18
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @bin_emit_beginnode(ptr noundef %e, ptr nocapture noundef readnone %labels) #0 {
entry:
  %tmp.i = alloca %struct.data, align 8
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %tmp.i) #18
  call void @data_append_cell(ptr nonnull sret(%struct.data) align 8 %tmp.i, ptr noundef byval(%struct.data) align 8 %e, i32 noundef 1) #18
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %e, ptr noundef nonnull align 8 dereferenceable(24) %tmp.i, i64 24, i1 false) #18, !tbaa.struct !13
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %tmp.i) #18
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @bin_emit_endnode(ptr noundef %e, ptr nocapture noundef readnone %labels) #0 {
entry:
  %tmp.i = alloca %struct.data, align 8
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %tmp.i) #18
  call void @data_append_cell(ptr nonnull sret(%struct.data) align 8 %tmp.i, ptr noundef byval(%struct.data) align 8 %e, i32 noundef 2) #18
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %e, ptr noundef nonnull align 8 dereferenceable(24) %tmp.i, i64 24, i1 false) #18, !tbaa.struct !13
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %tmp.i) #18
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @bin_emit_property(ptr noundef %e, ptr nocapture noundef readnone %labels) #0 {
entry:
  %tmp.i = alloca %struct.data, align 8
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %tmp.i) #18
  call void @data_append_cell(ptr nonnull sret(%struct.data) align 8 %tmp.i, ptr noundef byval(%struct.data) align 8 %e, i32 noundef 3) #18
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %e, ptr noundef nonnull align 8 dereferenceable(24) %tmp.i, i64 24, i1 false) #18, !tbaa.struct !13
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %tmp.i) #18
  ret void
}

declare void @data_append_byte(ptr sret(%struct.data) align 8, ptr noundef byval(%struct.data) align 8, i8 noundef zeroext) local_unnamed_addr #6

declare void @data_append_cell(ptr sret(%struct.data) align 8, ptr noundef byval(%struct.data) align 8, i32 noundef) local_unnamed_addr #6

declare void @data_append_re(ptr sret(%struct.data) align 8, ptr noundef byval(%struct.data) align 8, i64 noundef, i64 noundef) local_unnamed_addr #6

; Function Attrs: nofree nounwind uwtable
define internal void @asm_emit_string(ptr nocapture noundef %e, ptr noundef %str, i32 noundef %len) #10 {
entry:
  %cmp.not = icmp eq i32 %len, 0
  br i1 %cmp.not, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %call = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %e, ptr noundef nonnull @.str.85, i32 noundef %len, ptr noundef %str)
  br label %if.end

if.else:                                          ; preds = %entry
  %call1 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %e, ptr noundef nonnull @.str.86, ptr noundef %str)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: nofree nounwind uwtable
define internal void @asm_emit_data(ptr nocapture noundef %e, ptr nocapture noundef readonly byval(%struct.data) align 8 %d) #10 {
entry:
  %markers = getelementptr inbounds %struct.data, ptr %d, i64 0, i32 2
  %m.034 = load ptr, ptr %markers, align 8, !tbaa !15
  %tobool.not35 = icmp eq ptr %m.034, null
  br i1 %tobool.not35, label %while.cond.preheader, label %for.body

while.cond.preheader:                             ; preds = %for.inc, %entry
  %0 = load i32, ptr %d, align 8, !tbaa !25
  %cmp137 = icmp ugt i32 %0, 3
  br i1 %cmp137, label %while.body.lr.ph, label %while.cond5.preheader

while.body.lr.ph:                                 ; preds = %while.cond.preheader
  %val = getelementptr inbounds %struct.data, ptr %d, i64 0, i32 1
  %1 = load ptr, ptr %val, align 8, !tbaa !42
  br label %while.body

for.body:                                         ; preds = %for.inc, %entry
  %m.036 = phi ptr [ %m.0, %for.inc ], [ %m.034, %entry ]
  %2 = load i32, ptr %m.036, align 8, !tbaa !77
  %cmp = icmp eq i32 %2, 3
  br i1 %cmp, label %if.then, label %for.inc

if.then:                                          ; preds = %for.body
  %ref = getelementptr inbounds %struct.marker, ptr %m.036, i64 0, i32 2
  %3 = load ptr, ptr %ref, align 8, !tbaa !79
  %offset = getelementptr inbounds %struct.marker, ptr %m.036, i64 0, i32 1
  %4 = load i32, ptr %offset, align 4, !tbaa !80
  %call.i = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %e, ptr noundef nonnull @.str.44, ptr noundef %3) #18
  %call1.i = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %e, ptr noundef nonnull @.str.90, ptr noundef %3, i32 noundef %4) #18
  br label %for.inc

for.inc:                                          ; preds = %if.then, %for.body
  %next = getelementptr inbounds %struct.marker, ptr %m.036, i64 0, i32 3
  %m.0 = load ptr, ptr %next, align 8, !tbaa !15
  %tobool.not = icmp eq ptr %m.0, null
  br i1 %tobool.not, label %while.cond.preheader, label %for.body

while.cond5.preheader.loopexit:                   ; preds = %while.body
  %5 = and i32 %0, -4
  br label %while.cond5.preheader

while.cond5.preheader:                            ; preds = %while.cond5.preheader.loopexit, %while.cond.preheader
  %off.0.lcssa = phi i32 [ 0, %while.cond.preheader ], [ %5, %while.cond5.preheader.loopexit ]
  %cmp8.not40 = icmp eq i32 %0, %off.0.lcssa
  br i1 %cmp8.not40, label %if.end20, label %while.body10.lr.ph

while.body10.lr.ph:                               ; preds = %while.cond5.preheader
  %val11 = getelementptr inbounds %struct.data, ptr %d, i64 0, i32 1
  %6 = load ptr, ptr %val11, align 8, !tbaa !42
  br label %while.body10

while.body:                                       ; preds = %while.body, %while.body.lr.ph
  %indvars.iv = phi i64 [ 0, %while.body.lr.ph ], [ %indvars.iv.next, %while.body ]
  %add.ptr = getelementptr inbounds i8, ptr %1, i64 %indvars.iv
  %7 = load i8, ptr %add.ptr, align 1, !tbaa !70
  %conv.i = zext i8 %7 to i32
  %arrayidx1.i = getelementptr inbounds i8, ptr %add.ptr, i64 1
  %8 = load i8, ptr %arrayidx1.i, align 1, !tbaa !70
  %conv2.i = zext i8 %8 to i32
  %arrayidx4.i = getelementptr inbounds i8, ptr %add.ptr, i64 2
  %9 = load i8, ptr %arrayidx4.i, align 1, !tbaa !70
  %conv5.i = zext i8 %9 to i32
  %arrayidx8.i = getelementptr inbounds i8, ptr %add.ptr, i64 3
  %10 = load i8, ptr %arrayidx8.i, align 1, !tbaa !70
  %conv9.i = zext i8 %10 to i32
  %call.i33 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %e, ptr noundef nonnull @.str.83, i32 noundef %conv.i, i32 noundef %conv2.i, i32 noundef %conv5.i, i32 noundef %conv9.i) #18
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 4
  %indvars = trunc i64 %indvars.iv.next to i32
  %sub = sub i32 %0, %indvars
  %cmp1 = icmp ugt i32 %sub, 3
  br i1 %cmp1, label %while.body, label %while.cond5.preheader.loopexit

while.body10:                                     ; preds = %while.body10, %while.body10.lr.ph
  %off.141 = phi i32 [ %off.0.lcssa, %while.body10.lr.ph ], [ %add14, %while.body10 ]
  %idxprom = zext i32 %off.141 to i64
  %arrayidx = getelementptr inbounds i8, ptr %6, i64 %idxprom
  %11 = load i8, ptr %arrayidx, align 1, !tbaa !70
  %conv12 = sext i8 %11 to i32
  %call13 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %e, ptr noundef nonnull @.str.87, i32 noundef %conv12)
  %add14 = add i32 %off.141, 1
  %cmp8.not = icmp eq i32 %0, %add14
  br i1 %cmp8.not, label %if.end20, label %while.body10

if.end20:                                         ; preds = %while.body10, %while.cond5.preheader
  ret void
}

; Function Attrs: nofree nounwind uwtable
define internal void @asm_emit_beginnode(ptr nocapture noundef %e, ptr noundef readonly %labels) #10 {
entry:
  %tobool.not12 = icmp eq ptr %labels, null
  br i1 %tobool.not12, label %for.end, label %for.body

for.body:                                         ; preds = %for.inc, %entry
  %l.013 = phi ptr [ %3, %for.inc ], [ %labels, %entry ]
  %0 = load i8, ptr %l.013, align 8, !tbaa !63, !range !46
  %tobool1.not = icmp eq i8 %0, 0
  br i1 %tobool1.not, label %if.then, label %for.inc

if.then:                                          ; preds = %for.body
  %label = getelementptr inbounds %struct.label, ptr %l.013, i64 0, i32 1
  %1 = load ptr, ptr %label, align 8, !tbaa !65
  %call = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %e, ptr noundef nonnull @.str.44, ptr noundef %1)
  %2 = load ptr, ptr %label, align 8, !tbaa !65
  %call3 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %e, ptr noundef nonnull @.str.45, ptr noundef %2)
  br label %for.inc

for.inc:                                          ; preds = %if.then, %for.body
  %next = getelementptr inbounds %struct.label, ptr %l.013, i64 0, i32 2
  %3 = load ptr, ptr %next, align 8, !tbaa !81
  %tobool.not = icmp eq ptr %3, null
  br i1 %tobool.not, label %for.end, label %for.body

for.end:                                          ; preds = %for.inc, %entry
  %4 = tail call i64 @fwrite(ptr nonnull @.str.91, i64 22, i64 1, ptr %e)
  %call.i = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %e, ptr noundef nonnull @.str.83, i32 noundef 0, i32 noundef 0, i32 noundef 0, i32 noundef 1) #18
  ret void
}

; Function Attrs: nofree nounwind uwtable
define internal void @asm_emit_endnode(ptr nocapture noundef %e, ptr noundef readonly %labels) #10 {
entry:
  %0 = tail call i64 @fwrite(ptr nonnull @.str.92, i64 20, i64 1, ptr %e)
  %call.i = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %e, ptr noundef nonnull @.str.83, i32 noundef 0, i32 noundef 0, i32 noundef 0, i32 noundef 2) #18
  %tobool.not12 = icmp eq ptr %labels, null
  br i1 %tobool.not12, label %for.end, label %for.body

for.body:                                         ; preds = %for.inc, %entry
  %l.013 = phi ptr [ %4, %for.inc ], [ %labels, %entry ]
  %1 = load i8, ptr %l.013, align 8, !tbaa !63, !range !46
  %tobool1.not = icmp eq i8 %1, 0
  br i1 %tobool1.not, label %if.then, label %for.inc

if.then:                                          ; preds = %for.body
  %label = getelementptr inbounds %struct.label, ptr %l.013, i64 0, i32 1
  %2 = load ptr, ptr %label, align 8, !tbaa !65
  %call2 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %e, ptr noundef nonnull @.str.93, ptr noundef %2)
  %3 = load ptr, ptr %label, align 8, !tbaa !65
  %call4 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %e, ptr noundef nonnull @.str.94, ptr noundef %3)
  br label %for.inc

for.inc:                                          ; preds = %if.then, %for.body
  %next = getelementptr inbounds %struct.label, ptr %l.013, i64 0, i32 2
  %4 = load ptr, ptr %next, align 8, !tbaa !81
  %tobool.not = icmp eq ptr %4, null
  br i1 %tobool.not, label %for.end, label %for.body

for.end:                                          ; preds = %for.inc, %entry
  ret void
}

; Function Attrs: nofree nounwind uwtable
define internal void @asm_emit_property(ptr nocapture noundef %e, ptr noundef readonly %labels) #10 {
entry:
  %tobool.not12 = icmp eq ptr %labels, null
  br i1 %tobool.not12, label %for.end, label %for.body

for.body:                                         ; preds = %for.inc, %entry
  %l.013 = phi ptr [ %3, %for.inc ], [ %labels, %entry ]
  %0 = load i8, ptr %l.013, align 8, !tbaa !63, !range !46
  %tobool1.not = icmp eq i8 %0, 0
  br i1 %tobool1.not, label %if.then, label %for.inc

if.then:                                          ; preds = %for.body
  %label = getelementptr inbounds %struct.label, ptr %l.013, i64 0, i32 1
  %1 = load ptr, ptr %label, align 8, !tbaa !65
  %call = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %e, ptr noundef nonnull @.str.44, ptr noundef %1)
  %2 = load ptr, ptr %label, align 8, !tbaa !65
  %call3 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %e, ptr noundef nonnull @.str.45, ptr noundef %2)
  br label %for.inc

for.inc:                                          ; preds = %if.then, %for.body
  %next = getelementptr inbounds %struct.label, ptr %l.013, i64 0, i32 2
  %3 = load ptr, ptr %next, align 8, !tbaa !81
  %tobool.not = icmp eq ptr %3, null
  br i1 %tobool.not, label %for.end, label %for.body

for.end:                                          ; preds = %for.inc, %entry
  %4 = tail call i64 @fwrite(ptr nonnull @.str.95, i64 16, i64 1, ptr %e)
  %call.i = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %e, ptr noundef nonnull @.str.83, i32 noundef 0, i32 noundef 0, i32 noundef 0, i32 noundef 3) #18
  ret void
}

; Function Attrs: noreturn nounwind
declare void @__assert_fail(ptr noundef, ptr noundef, i32 noundef, ptr noundef) local_unnamed_addr #13

; Function Attrs: inaccessiblememonly mustprogress nofree nounwind willreturn allocsize(0)
declare noalias noundef ptr @malloc(i64 noundef) local_unnamed_addr #15

declare ptr @build_reserve_entry(i64 noundef, i64 noundef) local_unnamed_addr #6

declare ptr @add_reserve_entry(ptr noundef, ptr noundef) local_unnamed_addr #6

declare ptr @build_node(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #6

declare void @add_property(ptr noundef, ptr noundef) local_unnamed_addr #6

declare void @add_child(ptr noundef, ptr noundef) local_unnamed_addr #6

declare ptr @xstrdup(ptr noundef) local_unnamed_addr #6

; Function Attrs: argmemonly mustprogress nofree nounwind readonly willreturn
declare i32 @strncmp(ptr nocapture noundef, ptr nocapture noundef, i64 noundef) local_unnamed_addr #14

declare ptr @build_property(ptr noundef, ptr noundef byval(%struct.data) align 8, ptr noundef) local_unnamed_addr #6

declare void @data_grow_for(ptr sret(%struct.data) align 8, ptr noundef byval(%struct.data) align 8, i32 noundef) local_unnamed_addr #6

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.bswap.i32(i32) #16

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.bswap.i64(i64) #16

; Function Attrs: inaccessiblememonly nocallback nofree nosync nounwind willreturn
declare void @llvm.experimental.noalias.scope.decl(metadata) #17

attributes #0 = { nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly nocallback nofree nosync nounwind willreturn }
attributes #2 = { argmemonly nofree nounwind willreturn writeonly }
attributes #3 = { inlinehint noreturn nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { argmemonly nofree nounwind willreturn }
attributes #5 = { nofree nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { nofree nounwind readonly "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #8 = { nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #9 = { mustprogress nofree nosync nounwind readnone willreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #10 = { nofree nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #11 = { inaccessiblemem_or_argmemonly mustprogress nounwind willreturn "alloc-family"="malloc" "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #12 = { nocallback nofree nosync nounwind willreturn }
attributes #13 = { noreturn nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #14 = { argmemonly mustprogress nofree nounwind readonly willreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #15 = { inaccessiblememonly mustprogress nofree nounwind willreturn allocsize(0) "alloc-family"="malloc" "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #16 = { nocallback nofree nosync nounwind readnone speculatable willreturn }
attributes #17 = { inaccessiblememonly nocallback nofree nosync nounwind willreturn }
attributes #18 = { nounwind }
attributes #19 = { noreturn }
attributes #20 = { cold }
attributes #21 = { nounwind readnone willreturn }
attributes #22 = { noreturn nounwind }
attributes #23 = { nounwind readonly willreturn }
attributes #24 = { nounwind allocsize(0) }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{!"clang version 15.0.0 (git@github.com:linkeLi0421/llvm-project15-IRDumperPass.git 23ab625cb005cd08da083f9b643a7feed9af8abe)"}
!5 = !{!6, !7, i64 0}
!6 = !{!"version_info", !7, i64 0, !7, i64 4, !7, i64 8, !7, i64 12}
!7 = !{!"int", !8, i64 0}
!8 = !{!"omnipotent char", !9, i64 0}
!9 = !{!"Simple C/C++ TBAA"}
!10 = !{!11, !12, i64 24}
!11 = !{!"dt_info", !7, i64 0, !12, i64 8, !7, i64 16, !12, i64 24, !12, i64 32}
!12 = !{!"any pointer", !8, i64 0}
!13 = !{i64 0, i64 4, !14, i64 8, i64 8, !15, i64 16, i64 8, !15}
!14 = !{!7, !7, i64 0}
!15 = !{!12, !12, i64 0}
!16 = !{!11, !12, i64 8}
!17 = !{!18}
!18 = distinct !{!18, !19, !"flatten_reserve_list: %agg.result"}
!19 = distinct !{!19, !"flatten_reserve_list"}
!20 = !{!21, !22, i64 0}
!21 = !{!"reserve_info", !22, i64 0, !22, i64 8, !12, i64 16, !12, i64 24}
!22 = !{!"long", !8, i64 0}
!23 = !{!21, !22, i64 8}
!24 = !{!21, !12, i64 16}
!25 = !{!26, !7, i64 0}
!26 = !{!"data", !7, i64 0, !12, i64 8, !12, i64 16}
!27 = !{!11, !7, i64 16}
!28 = !{!29, !7, i64 0}
!29 = !{!"fdt_header", !7, i64 0, !7, i64 4, !7, i64 8, !7, i64 12, !7, i64 16, !7, i64 20, !7, i64 24, !7, i64 28, !7, i64 32, !7, i64 36}
!30 = !{!29, !7, i64 20}
!31 = !{!6, !7, i64 4}
!32 = !{!29, !7, i64 24}
!33 = !{!6, !7, i64 8}
!34 = !{!29, !7, i64 16}
!35 = !{!29, !7, i64 8}
!36 = !{!29, !7, i64 12}
!37 = !{!29, !7, i64 4}
!38 = !{!6, !7, i64 12}
!39 = !{!29, !7, i64 28}
!40 = !{!29, !7, i64 32}
!41 = !{!29, !7, i64 36}
!42 = !{!26, !12, i64 8}
!43 = !{!44, !45, i64 0}
!44 = !{!"node", !45, i64 0, !12, i64 8, !12, i64 16, !12, i64 24, !12, i64 32, !12, i64 40, !12, i64 48, !7, i64 56, !7, i64 60, !7, i64 64, !7, i64 68, !12, i64 72, !12, i64 80, !12, i64 88, !45, i64 96, !45, i64 97}
!45 = !{!"_Bool", !8, i64 0}
!46 = !{i8 0, i8 2}
!47 = !{!48, !12, i64 32}
!48 = !{!"emitter", !12, i64 0, !12, i64 8, !12, i64 16, !12, i64 24, !12, i64 32, !12, i64 40, !12, i64 48}
!49 = !{!44, !12, i64 72}
!50 = !{!48, !12, i64 8}
!51 = !{!48, !12, i64 16}
!52 = !{!53, !45, i64 0}
!53 = !{!"property", !45, i64 0, !12, i64 8, !26, i64 16, !12, i64 40, !12, i64 48, !12, i64 56}
!54 = !{!53, !12, i64 8}
!55 = !{!48, !12, i64 48}
!56 = !{!53, !12, i64 48}
!57 = !{!48, !12, i64 0}
!58 = !{!53, !7, i64 16}
!59 = !{!48, !12, i64 24}
!60 = !{!44, !7, i64 56}
!61 = !{!44, !12, i64 8}
!62 = !{!48, !12, i64 40}
!63 = !{!64, !45, i64 0}
!64 = !{!"label", !45, i64 0, !12, i64 8, !12, i64 16}
!65 = !{!64, !12, i64 8}
!66 = !{!67, !12, i64 0}
!67 = !{!"inbuf", !12, i64 0, !12, i64 8, !12, i64 16}
!68 = !{!67, !12, i64 8}
!69 = !{!67, !12, i64 16}
!70 = !{!8, !8, i64 0}
!71 = !{!44, !12, i64 24}
!72 = !{!73}
!73 = distinct !{!73, !74, !"flat_read_data: %agg.result:thread"}
!74 = distinct !{!74, !"flat_read_data"}
!75 = !{!76}
!76 = distinct !{!76, !74, !"flat_read_data: %agg.result"}
!77 = !{!78, !8, i64 0}
!78 = !{!"marker", !8, i64 0, !7, i64 4, !12, i64 8, !12, i64 16}
!79 = !{!78, !12, i64 8}
!80 = !{!78, !7, i64 4}
!81 = !{!64, !12, i64 16}
